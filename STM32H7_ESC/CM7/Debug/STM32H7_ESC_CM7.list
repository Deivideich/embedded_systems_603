
STM32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008fc8  08008fc8  00018fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800944c  0800944c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800944c  0800944c  0001944c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009454  08009454  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800945c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  240001e0  0800963c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002f0  0800963c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175aa  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac4  00000000  00000000  000377b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003be0b  00000000  00000000  0003c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019309  00000000  00000000  000782a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001885cc  00000000  00000000  000915ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00219b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  00219bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008fac 	.word	0x08008fac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08008fac 	.word	0x08008fac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	4a2f      	ldr	r2, [pc, #188]	; (80008b8 <MX_GPIO_Init+0xf8>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xf8>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_GPIO_Init+0xf8>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xfc>)
 8000874:	f001 f83a 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0x100>)
 800088e:	f000 fe7d 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000892:	f244 0301 	movw	r3, #16385	; 0x4001
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xfc>)
 80008ac:	f000 fe6e 	bl	800158c <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020400 	.word	0x58020400
 80008c0:	58020800 	.word	0x58020800
 80008c4:	00000000 	.word	0x00000000

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b092      	sub	sp, #72	; 0x48
 80008cc:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008d4:	bf00      	nop
 80008d6:	4bae      	ldr	r3, [pc, #696]	; (8000b90 <main+0x2c8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d004      	beq.n	80008ec <main+0x24>
 80008e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dcf4      	bgt.n	80008d6 <main+0xe>
  if ( timeout < 0 )
 80008ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da01      	bge.n	80008f6 <main+0x2e>
  {
  Error_Handler();
 80008f2:	f000 f9d7 	bl	8000ca4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fca3 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f959 	bl	8000bb0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008fe:	4ba4      	ldr	r3, [pc, #656]	; (8000b90 <main+0x2c8>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4aa2      	ldr	r2, [pc, #648]	; (8000b90 <main+0x2c8>)
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4ba0      	ldr	r3, [pc, #640]	; (8000b90 <main+0x2c8>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800091c:	2000      	movs	r0, #0
 800091e:	f000 ffff 	bl	8001920 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000922:	2100      	movs	r1, #0
 8000924:	2000      	movs	r0, #0
 8000926:	f001 f815 	bl	8001954 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000930:	bf00      	nop
 8000932:	4b97      	ldr	r3, [pc, #604]	; (8000b90 <main+0x2c8>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d104      	bne.n	8000948 <main+0x80>
 800093e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000944:	2b00      	cmp	r3, #0
 8000946:	dcf4      	bgt.n	8000932 <main+0x6a>
if ( timeout < 0 )
 8000948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800094a:	2b00      	cmp	r3, #0
 800094c:	da01      	bge.n	8000952 <main+0x8a>
{
Error_Handler();
 800094e:	f000 f9a9 	bl	8000ca4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f7ff ff35 	bl	80007c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000956:	f000 fb97 	bl	8001088 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800095a:	f000 fac5 	bl	8000ee8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800095e:	2100      	movs	r1, #0
 8000960:	488c      	ldr	r0, [pc, #560]	; (8000b94 <main+0x2cc>)
 8000962:	f003 fc3f 	bl	80041e4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t input[4];
  int inputInt;
  double pulseWidth = 0.000;
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double prevPulseWidth = 0.000;
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double ccr = 0;
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	e9c7 2306 	strd	r2, r3, [r7, #24]

  double i = 0.0001;
 800098a:	a379      	add	r3, pc, #484	; (adr r3, 8000b70 <main+0x2a8>)
 800098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000990:	e9c7 2304 	strd	r2, r3, [r7, #16]

  printf("Starting...\r\n");
 8000994:	4880      	ldr	r0, [pc, #512]	; (8000b98 <main+0x2d0>)
 8000996:	f006 fad7 	bl	8006f48 <puts>


  do{
	  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 800099a:	4b7e      	ldr	r3, [pc, #504]	; (8000b94 <main+0x2cc>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80009a6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80009aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80009ae:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8000b78 <main+0x2b0>
 80009b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009b6:	ed87 7b06 	vstr	d7, [r7, #24]
	  htim2.Instance->CCR1 = ccr;
 80009ba:	4b76      	ldr	r3, [pc, #472]	; (8000b94 <main+0x2cc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	ed97 7b06 	vldr	d7, [r7, #24]
 80009c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009c6:	ee17 2a90 	vmov	r2, s15
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fcc9 	bl	8001364 <HAL_Delay>

	  printf("(From Start) pulseWidth = %f {CCR=%f}\r\n", pulseWidth,ccr);
 80009d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80009d6:	e9cd 2300 	strd	r2, r3, [sp]
 80009da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80009de:	486f      	ldr	r0, [pc, #444]	; (8000b9c <main+0x2d4>)
 80009e0:	f006 fa2c 	bl	8006e3c <iprintf>
//			  i += 0.000001;

	  pulseWidth += i;
 80009e4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80009e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80009ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009f0:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30

  }while(pulseWidth < 0.002);
 80009f4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80009f8:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8000b80 <main+0x2b8>
 80009fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a04:	d4c9      	bmi.n	800099a <main+0xd2>

  pulseWidth = 0.002;
 8000a06:	a35e      	add	r3, pc, #376	; (adr r3, 8000b80 <main+0x2b8>)
 8000a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 8000a10:	4b60      	ldr	r3, [pc, #384]	; (8000b94 <main+0x2cc>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a1c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000a20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a24:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000b78 <main+0x2b0>
 8000a28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a2c:	ed87 7b06 	vstr	d7, [r7, #24]
  printf("CCR: %f\r\n",ccr);
 8000a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a34:	485a      	ldr	r0, [pc, #360]	; (8000ba0 <main+0x2d8>)
 8000a36:	f006 fa01 	bl	8006e3c <iprintf>
  htim2.Instance->CCR1 = ccr;
 8000a3a:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <main+0x2cc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000a42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a46:	ee17 2a90 	vmov	r2, s15
 8000a4a:	635a      	str	r2, [r3, #52]	; 0x34


  while (1)
  {
	  while(HAL_UART_Receive(&huart3, input, 4, HAL_MAX_DELAY));
 8000a4c:	bf00      	nop
 8000a4e:	f107 0108 	add.w	r1, r7, #8
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2204      	movs	r2, #4
 8000a58:	4852      	ldr	r0, [pc, #328]	; (8000ba4 <main+0x2dc>)
 8000a5a:	f004 fc85 	bl	8005368 <HAL_UART_Receive>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f4      	bne.n	8000a4e <main+0x186>
	  printf("Receive from UART %c%c%c%c \r\n",input[0],input[1],input[2],input[3]);
 8000a64:	7a3b      	ldrb	r3, [r7, #8]
 8000a66:	4619      	mov	r1, r3
 8000a68:	7a7b      	ldrb	r3, [r7, #9]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	7abb      	ldrb	r3, [r7, #10]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	7afb      	ldrb	r3, [r7, #11]
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	4603      	mov	r3, r0
 8000a76:	484c      	ldr	r0, [pc, #304]	; (8000ba8 <main+0x2e0>)
 8000a78:	f006 f9e0 	bl	8006e3c <iprintf>

	  for(int i = 0 ; i < 4 ; i++){
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a80:	e00f      	b.n	8000aa2 <main+0x1da>
		  input[i]-='0';
 8000a82:	f107 0208 	add.w	r2, r7, #8
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3b30      	subs	r3, #48	; 0x30
 8000a8e:	b2d9      	uxtb	r1, r3
 8000a90:	f107 0208 	add.w	r2, r7, #8
 8000a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a96:	4413      	add	r3, r2
 8000a98:	460a      	mov	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
	  for(int i = 0 ; i < 4 ; i++){
 8000a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	ddec      	ble.n	8000a82 <main+0x1ba>
	  }

	  inputInt = (input[0]*1000 + input[1]*100 + input[2]*10 + input[3]*1);
 8000aa8:	7a3b      	ldrb	r3, [r7, #8]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	fb03 f202 	mul.w	r2, r3, r2
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	fb01 f303 	mul.w	r3, r1, r3
 8000abe:	441a      	add	r2, r3
 8000ac0:	7abb      	ldrb	r3, [r7, #10]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	7afa      	ldrb	r2, [r7, #11]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

	  if(inputInt < 2500 && inputInt > 550){
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000ada:	4293      	cmp	r3, r2
 8000adc:	dc23      	bgt.n	8000b26 <main+0x25e>
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f240 2226 	movw	r2, #550	; 0x226
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	dd1e      	ble.n	8000b26 <main+0x25e>
		  pulseWidth = (input[0]*1000 + input[1]*100 + input[2]*10 + input[3]*1)/1000000.0;
 8000ae8:	7a3b      	ldrb	r3, [r7, #8]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af0:	fb03 f202 	mul.w	r2, r3, r2
 8000af4:	7a7b      	ldrb	r3, [r7, #9]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	fb01 f303 	mul.w	r3, r1, r3
 8000afe:	441a      	add	r2, r3
 8000b00:	7abb      	ldrb	r3, [r7, #10]
 8000b02:	4619      	mov	r1, r3
 8000b04:	460b      	mov	r3, r1
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	7afa      	ldrb	r2, [r7, #11]
 8000b10:	4413      	add	r3, r2
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b1a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000b88 <main+0x2c0>
 8000b1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b22:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	  }
//	  pulseWidth = 0.001;

	  printf("PulseWidth %f\r\n",pulseWidth);
 8000b26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000b2a:	4820      	ldr	r0, [pc, #128]	; (8000bac <main+0x2e4>)
 8000b2c:	f006 f986 	bl	8006e3c <iprintf>

	  ccr = (pulseWidth * htim2.Init.Period) / 0.02;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <main+0x2cc>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000b3c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000b40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b44:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000b78 <main+0x2b0>
 8000b48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b4c:	ed87 7b06 	vstr	d7, [r7, #24]
	  htim2.Instance->CCR1 = ccr;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <main+0x2cc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	ed97 7b06 	vldr	d7, [r7, #24]
 8000b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5c:	ee17 2a90 	vmov	r2, s15
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f000 fbfe 	bl	8001364 <HAL_Delay>
	  while(HAL_UART_Receive(&huart3, input, 4, HAL_MAX_DELAY));
 8000b68:	e770      	b.n	8000a4c <main+0x184>
 8000b6a:	bf00      	nop
 8000b6c:	f3af 8000 	nop.w
 8000b70:	eb1c432d 	.word	0xeb1c432d
 8000b74:	3f1a36e2 	.word	0x3f1a36e2
 8000b78:	47ae147b 	.word	0x47ae147b
 8000b7c:	3f947ae1 	.word	0x3f947ae1
 8000b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b84:	3f60624d 	.word	0x3f60624d
 8000b88:	00000000 	.word	0x00000000
 8000b8c:	412e8480 	.word	0x412e8480
 8000b90:	58024400 	.word	0x58024400
 8000b94:	24000200 	.word	0x24000200
 8000b98:	08008fc8 	.word	0x08008fc8
 8000b9c:	08008fd8 	.word	0x08008fd8
 8000ba0:	08009000 	.word	0x08009000
 8000ba4:	2400024c 	.word	0x2400024c
 8000ba8:	0800900c 	.word	0x0800900c
 8000bac:	0800902c 	.word	0x0800902c

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09c      	sub	sp, #112	; 0x70
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	224c      	movs	r2, #76	; 0x4c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f005 fcf0 	bl	80065a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f005 fcea 	bl	80065a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bd0:	2004      	movs	r0, #4
 8000bd2:	f000 fed3 	bl	800197c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <SystemClock_Config+0xec>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <SystemClock_Config+0xec>)
 8000be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <SystemClock_Config+0xec>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemClock_Config+0xf0>)
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <SystemClock_Config+0xf0>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemClock_Config+0xf0>)
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c08:	bf00      	nop
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <SystemClock_Config+0xec>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c16:	d1f8      	bne.n	8000c0a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000c2e:	23f0      	movs	r3, #240	; 0xf0
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 feee 	bl	8001a30 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c5a:	f000 f823 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	233f      	movs	r3, #63	; 0x3f
 8000c60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2104      	movs	r1, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fb01 	bl	800228c <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c90:	f000 f808 	bl	8000ca4 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3770      	adds	r7, #112	; 0x70
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	58024800 	.word	0x58024800
 8000ca0:	58000400 	.word	0x58000400

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <__io_putchar+0x20>)
 8000cc2:	f004 fabb 	bl	800523c <HAL_UART_Transmit>
  return ch;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2400024c 	.word	0x2400024c

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x30>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	58024400 	.word	0x58024400

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 fae6 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	return 1;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_kill>:

int _kill(int pid, int sig)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d76:	f005 fbeb 	bl	8006550 <__errno>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2216      	movs	r2, #22
 8000d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_exit>:

void _exit (int status)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe7 	bl	8000d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d9e:	e7fe      	b.n	8000d9e <_exit+0x12>

08000da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e00a      	b.n	8000dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000db2:	f3af 8000 	nop.w
 8000db6:	4601      	mov	r1, r0
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	b2ca      	uxtb	r2, r1
 8000dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbf0      	blt.n	8000db2 <_read+0x12>
	}

return len;
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	e009      	b.n	8000e00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5b 	bl	8000cb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf1      	blt.n	8000dec <_write+0x12>
	}
	return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_close>:

int _close(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_isatty>:

int _isatty(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f005 fb50 	bl	8006550 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	24080000 	.word	0x24080000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	240001fc 	.word	0x240001fc
 8000ee4:	240002f0 	.word	0x240002f0

08000ee8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f24:	2248      	movs	r2, #72	; 0x48
 8000f26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f42:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f44:	f003 f896 	bl	8004074 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f4e:	f7ff fea9 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f60:	f003 fb62 	bl	8004628 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f6a:	f7ff fe9b 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f70:	f003 f8d7 	bl	8004122 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f7a:	f7ff fe93 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000f8e:	f004 f877 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f98:	f7ff fe84 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	; 0x60
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000fb4:	f003 fa24 	bl	8004400 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fbe:	f7ff fe71 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <MX_TIM2_Init+0xe8>)
 8000fc4:	f000 f826 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000fc8:	bf00      	nop
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	24000200 	.word	0x24000200

08000fd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d10e      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_TIM_Base_MspInit+0x3c>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	58024400 	.word	0x58024400

08001014 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d11f      	bne.n	8001076 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_TIM_MspPostInit+0x6c>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_TIM_MspPostInit+0x6c>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_TIM_MspPostInit+0x6c>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001058:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001066:	2301      	movs	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <HAL_TIM_MspPostInit+0x70>)
 8001072:	f000 fa8b 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	58024400 	.word	0x58024400
 8001084:	58020000 	.word	0x58020000

08001088 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_USART3_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_USART3_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_USART3_UART_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010d2:	f004 f863 	bl	800519c <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f7ff fde2 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010e4:	f005 f96a 	bl	80063bc <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f7ff fdd9 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010f6:	f005 f99f 	bl	8006438 <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f7ff fdd0 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_USART3_UART_Init+0x90>)
 8001106:	f005 f920 	bl	800634a <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f7ff fdc8 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2400024c 	.word	0x2400024c
 800111c:	40004800 	.word	0x40004800

08001120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0b8      	sub	sp, #224	; 0xe0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	22bc      	movs	r2, #188	; 0xbc
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f005 fa2f 	bl	80065a4 <memset>
  if(uartHandle->Instance==USART3)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <HAL_UART_MspInit+0xc0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d142      	bne.n	80011d6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001150:	2302      	movs	r3, #2
 8001152:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fc20 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800116a:	f7ff fd9b 	bl	8000ca4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_UART_MspInit+0xc4>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0xc4>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0xc4>)
 8001180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_UART_MspInit+0xc4>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_UART_MspInit+0xc4>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_UART_MspInit+0xc4>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_UART_MspInit+0xc8>)
 80011d2:	f000 f9db 	bl	800158c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	37e0      	adds	r7, #224	; 0xe0
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40004800 	.word	0x40004800
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020c00 	.word	0x58020c00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff fa50 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	; (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f005 f99f 	bl	800655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fb53 	bl	80008c8 <main>
  bx  lr
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001228:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800122c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001230:	0800945c 	.word	0x0800945c
  ldr r2, =_sbss
 8001234:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001238:	240002f0 	.word	0x240002f0

0800123c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC3_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001246:	2003      	movs	r0, #3
 8001248:	f000 f96e 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800124c:	f001 f9d4 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_Init+0x68>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	4913      	ldr	r1, [pc, #76]	; (80012ac <HAL_Init+0x6c>)
 800125e:	5ccb      	ldrb	r3, [r1, r3]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_Init+0x68>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_Init+0x6c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_Init+0x70>)
 8001282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_Init+0x74>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f814 	bl	80012b8 <HAL_InitTick>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e002      	b.n	80012a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800129a:	f7ff fd1b 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024400 	.word	0x58024400
 80012ac:	0800903c 	.word	0x0800903c
 80012b0:	24000004 	.word	0x24000004
 80012b4:	24000000 	.word	0x24000000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_InitTick+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e021      	b.n	8001310 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_InitTick+0x64>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_InitTick+0x60>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f945 	bl	8001572 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 f91d 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x68>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2400000c 	.word	0x2400000c
 800131c:	24000000 	.word	0x24000000
 8001320:	24000008 	.word	0x24000008

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2400000c 	.word	0x2400000c
 8001348:	240002dc 	.word	0x240002dc

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	240002dc 	.word	0x240002dc

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_Delay+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2400000c 	.word	0x2400000c

080013ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetREVID+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0c1b      	lsrs	r3, r3, #16
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	5c001000 	.word	0x5c001000

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0000 	.word	0x05fa0000

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff47 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff5e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffb2 	bl	80014e4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_GPIO_Init+0x234>)
 800159c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159e:	e194      	b.n	80018ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8186 	beq.w	80018c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x44>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 0201 	and.w	r2, r3, #1
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b03      	cmp	r3, #3
 800163c:	d017      	beq.n	800166e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d123      	bne.n	80016c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	69b9      	ldr	r1, [r7, #24]
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0203 	and.w	r2, r3, #3
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80e0 	beq.w	80018c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x238>)
 8001706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <HAL_GPIO_Init+0x238>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_GPIO_Init+0x238>)
 8001716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001722:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_GPIO_Init+0x23c>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_GPIO_Init+0x240>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d052      	beq.n	80017f4 <HAL_GPIO_Init+0x268>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_GPIO_Init+0x244>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d031      	beq.n	80017ba <HAL_GPIO_Init+0x22e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_GPIO_Init+0x248>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x22a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x24c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x226>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_GPIO_Init+0x250>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x222>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_GPIO_Init+0x254>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x21e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_GPIO_Init+0x258>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x21a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_GPIO_Init+0x25c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x216>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <HAL_GPIO_Init+0x260>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x212>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_GPIO_Init+0x264>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x20e>
 8001796:	2309      	movs	r3, #9
 8001798:	e02d      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 800179a:	230a      	movs	r3, #10
 800179c:	e02b      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 800179e:	2308      	movs	r3, #8
 80017a0:	e029      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e027      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e025      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e023      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e021      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e01f      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e01d      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e01b      	b.n	80017f6 <HAL_GPIO_Init+0x26a>
 80017be:	bf00      	nop
 80017c0:	58000080 	.word	0x58000080
 80017c4:	58024400 	.word	0x58024400
 80017c8:	58000400 	.word	0x58000400
 80017cc:	58020000 	.word	0x58020000
 80017d0:	58020400 	.word	0x58020400
 80017d4:	58020800 	.word	0x58020800
 80017d8:	58020c00 	.word	0x58020c00
 80017dc:	58021000 	.word	0x58021000
 80017e0:	58021400 	.word	0x58021400
 80017e4:	58021800 	.word	0x58021800
 80017e8:	58021c00 	.word	0x58021c00
 80017ec:	58022000 	.word	0x58022000
 80017f0:	58022400 	.word	0x58022400
 80017f4:	2300      	movs	r3, #0
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001806:	4938      	ldr	r1, [pc, #224]	; (80018e8 <HAL_GPIO_Init+0x35c>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f47f ae63 	bne.w	80015a0 <HAL_GPIO_Init+0x14>
  }
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3724      	adds	r7, #36	; 0x24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	58000400 	.word	0x58000400

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_HSEM_FastTake+0x2c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3320      	adds	r3, #32
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_HSEM_FastTake+0x30>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	58026400 	.word	0x58026400
 8001950:	80000300 	.word	0x80000300

08001954 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800195e:	4906      	ldr	r1, [pc, #24]	; (8001978 <HAL_HSEM_Release+0x24>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	58026400 	.word	0x58026400

0800197c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b06      	cmp	r3, #6
 800198e:	d00a      	beq.n	80019a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e040      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e03e      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019ae:	491f      	ldr	r1, [pc, #124]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019b6:	f7ff fcc9 	bl	800134c <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019bc:	e009      	b.n	80019d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019be:	f7ff fcc5 	bl	800134c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019cc:	d901      	bls.n	80019d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e028      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	d1ee      	bne.n	80019be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b1e      	cmp	r3, #30
 80019e4:	d008      	beq.n	80019f8 <HAL_PWREx_ConfigSupply+0x7c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b2e      	cmp	r3, #46	; 0x2e
 80019ea:	d005      	beq.n	80019f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b1d      	cmp	r3, #29
 80019f0:	d002      	beq.n	80019f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b2d      	cmp	r3, #45	; 0x2d
 80019f6:	d114      	bne.n	8001a22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80019f8:	f7ff fca8 	bl	800134c <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019fe:	e009      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a00:	f7ff fca4 	bl	800134c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a0e:	d901      	bls.n	8001a14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e007      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	d1ee      	bne.n	8001a00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	58024800 	.word	0x58024800

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f000 bc1d 	b.w	800227e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8087 	beq.w	8001b60 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b99      	ldr	r3, [pc, #612]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a5c:	4b96      	ldr	r3, [pc, #600]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_OscConfig+0x48>
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	2b18      	cmp	r3, #24
 8001a6c:	d110      	bne.n	8001a90 <HAL_RCC_OscConfig+0x60>
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4b8f      	ldr	r3, [pc, #572]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d06c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x12e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d168      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e3f6      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x78>
 8001a9a:	4b87      	ldr	r3, [pc, #540]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a86      	ldr	r2, [pc, #536]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e02e      	b.n	8001b06 <HAL_RCC_OscConfig+0xd6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x9a>
 8001ab0:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a80      	ldr	r2, [pc, #512]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e01d      	b.n	8001b06 <HAL_RCC_OscConfig+0xd6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0xbe>
 8001ad4:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a77      	ldr	r2, [pc, #476]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a74      	ldr	r2, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0xd6>
 8001aee:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a71      	ldr	r2, [pc, #452]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d013      	beq.n	8001b36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fc1d 	bl	800134c <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b16:	f7ff fc19 	bl	800134c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e3aa      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b28:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0xe6>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fc09 	bl	800134c <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fc05 	bl	800134c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e396      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x10e>
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80cb 	beq.w	8001d04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6e:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b78:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_RCC_OscConfig+0x164>
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	2b18      	cmp	r3, #24
 8001b88:	d156      	bne.n	8001c38 <HAL_RCC_OscConfig+0x208>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d151      	bne.n	8001c38 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x17c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e368      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 0219 	bic.w	r2, r3, #25
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	493f      	ldr	r1, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bbe:	f7ff fbc5 	bl	800134c <HAL_GetTick>
 8001bc2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fbc1 	bl	800134c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e352      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	f7ff fbe2 	bl	80013ac <HAL_GetREVID>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d817      	bhi.n	8001c22 <HAL_RCC_OscConfig+0x1f2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b40      	cmp	r3, #64	; 0x40
 8001bf8:	d108      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1dc>
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0a:	e07b      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	031b      	lsls	r3, r3, #12
 8001c1a:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	e070      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4921      	ldr	r1, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c36:	e065      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d048      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 0219 	bic.w	r2, r3, #25
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb7b 	bl	800134c <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fb77 	bl	800134c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e308      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	f7ff fb98 	bl	80013ac <HAL_GetREVID>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d81a      	bhi.n	8001cbc <HAL_RCC_OscConfig+0x28c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x270>
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6053      	str	r3, [r2, #4]
 8001c9e:	e031      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	031b      	lsls	r3, r3, #12
 8001cae:	4902      	ldr	r1, [pc, #8]	; (8001cb8 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e026      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
 8001cb6:	bf00      	nop
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	4b9a      	ldr	r3, [pc, #616]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	4997      	ldr	r1, [pc, #604]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a94      	ldr	r2, [pc, #592]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb35 	bl	800134c <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fb31 	bl	800134c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e2c2      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cf8:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a9 	beq.w	8001e64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d1c:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d007      	beq.n	8001d38 <HAL_RCC_OscConfig+0x308>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b18      	cmp	r3, #24
 8001d2c:	d13a      	bne.n	8001da4 <HAL_RCC_OscConfig+0x374>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d135      	bne.n	8001da4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x320>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b80      	cmp	r3, #128	; 0x80
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e296      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d50:	f7ff fb2c 	bl	80013ac <HAL_GetREVID>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d817      	bhi.n	8001d8e <HAL_RCC_OscConfig+0x35e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x348>
 8001d66:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d76:	e075      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d78:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	069b      	lsls	r3, r3, #26
 8001d86:	4968      	ldr	r1, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d8c:	e06a      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	061b      	lsls	r3, r3, #24
 8001d9c:	4962      	ldr	r1, [pc, #392]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001da2:	e05f      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d042      	beq.n	8001e32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fac8 	bl	800134c <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fac4 	bl	800134c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e255      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dd2:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dde:	f7ff fae5 	bl	80013ac <HAL_GetREVID>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d817      	bhi.n	8001e1c <HAL_RCC_OscConfig+0x3ec>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d108      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3d6>
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e02:	6053      	str	r3, [r2, #4]
 8001e04:	e02e      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	4944      	ldr	r1, [pc, #272]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
 8001e1a:	e023      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	493f      	ldr	r1, [pc, #252]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fa85 	bl	800134c <HAL_GetTick>
 8001e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e46:	f7ff fa81 	bl	800134c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e212      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d036      	beq.n	8001ede <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d019      	beq.n	8001eac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fa62 	bl	800134c <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fa5e 	bl	800134c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1ef      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x45c>
 8001eaa:	e018      	b.n	8001ede <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fa48 	bl	800134c <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fa44 	bl	800134c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1d5      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d039      	beq.n	8001f5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001efc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fa25 	bl	800134c <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f06:	f7ff fa21 	bl	800134c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1b2      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4d6>
 8001f24:	e01b      	b.n	8001f5e <HAL_RCC_OscConfig+0x52e>
 8001f26:	bf00      	nop
 8001f28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a9a      	ldr	r2, [pc, #616]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fa08 	bl	800134c <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f40:	f7ff fa04 	bl	800134c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e195      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f52:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8081 	beq.w	800206e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x770>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a8b      	ldr	r2, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x770>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f78:	f7ff f9e8 	bl	800134c <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7ff f9e4 	bl	800134c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e175      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f92:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_RCC_OscConfig+0x770>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x584>
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a7c      	ldr	r2, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	e02d      	b.n	8002010 <HAL_RCC_OscConfig+0x5e0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5a6>
 8001fbc:	4b77      	ldr	r3, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a76      	ldr	r2, [pc, #472]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a73      	ldr	r2, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x5e0>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c8>
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a6b      	ldr	r2, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x5e0>
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a67      	ldr	r2, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a64      	ldr	r2, [pc, #400]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff f998 	bl	800134c <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff f994 	bl	800134c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e123      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002036:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ee      	beq.n	8002020 <HAL_RCC_OscConfig+0x5f0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f982 	bl	800134c <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff f97e 	bl	800134c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e10d      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ee      	bne.n	800204c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8102 	beq.w	800227c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002080:	2b18      	cmp	r3, #24
 8002082:	f000 80bd 	beq.w	8002200 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2b02      	cmp	r3, #2
 800208c:	f040 809e 	bne.w	80021cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a41      	ldr	r2, [pc, #260]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f956 	bl	800134c <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f952 	bl	800134c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0e3      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 80020c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x774>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	430a      	orrs	r2, r1
 80020d6:	4931      	ldr	r1, [pc, #196]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	628b      	str	r3, [r1, #40]	; 0x28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	3b01      	subs	r3, #1
 80020e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	3b01      	subs	r3, #1
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	3b01      	subs	r3, #1
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800210c:	4923      	ldr	r1, [pc, #140]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x778>)
 8002124:	4013      	ands	r3, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212a:	00d2      	lsls	r2, r2, #3
 800212c:	491b      	ldr	r1, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f023 020c 	bic.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4917      	ldr	r1, [pc, #92]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	f023 0202 	bic.w	r2, r3, #2
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	4912      	ldr	r1, [pc, #72]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_RCC_OscConfig+0x76c>)
 800218c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff f8db 	bl	800134c <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002198:	e011      	b.n	80021be <HAL_RCC_OscConfig+0x78e>
 800219a:	bf00      	nop
 800219c:	58024400 	.word	0x58024400
 80021a0:	58024800 	.word	0x58024800
 80021a4:	fffffc0c 	.word	0xfffffc0c
 80021a8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff f8ce 	bl	800134c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e05f      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x77c>
 80021ca:	e057      	b.n	800227c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f8b8 	bl	800134c <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f8b4 	bl	800134c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x7b0>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_OscConfig+0x858>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	2b01      	cmp	r3, #1
 8002212:	d031      	beq.n	8002278 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d12a      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d122      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0a5b      	lsrs	r3, r3, #9
 8002246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d108      	bne.n	8002278 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3730      	adds	r7, #48	; 0x30
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	58024400 	.word	0x58024400

0800228c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e19c      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b87      	ldr	r3, [pc, #540]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	4985      	ldr	r1, [pc, #532]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b83      	ldr	r3, [pc, #524]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e184      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d908      	bls.n	80022fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4975      	ldr	r1, [pc, #468]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002316:	429a      	cmp	r2, r3
 8002318:	d908      	bls.n	800232c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	496a      	ldr	r1, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002328:	4313      	orrs	r3, r2
 800232a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	4b64      	ldr	r3, [pc, #400]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	495e      	ldr	r1, [pc, #376]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002356:	4313      	orrs	r3, r2
 8002358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002372:	429a      	cmp	r2, r3
 8002374:	d908      	bls.n	8002388 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4953      	ldr	r1, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002384:	4313      	orrs	r3, r2
 8002386:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d908      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f023 020f 	bic.w	r2, r3, #15
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4947      	ldr	r1, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d055      	beq.n	800246e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4940      	ldr	r1, [pc, #256]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023dc:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d121      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0f6      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023f4:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d115      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0ea      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0de      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d6      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f023 0207 	bic.w	r2, r3, #7
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4925      	ldr	r1, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800243a:	4313      	orrs	r3, r2
 800243c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe ff85 	bl	800134c <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e00a      	b.n	800245c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe ff81 	bl	800134c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0be      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	429a      	cmp	r2, r3
 800246c:	d1eb      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	429a      	cmp	r2, r3
 8002488:	d208      	bcs.n	800249c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x244>)
 8002498:	4313      	orrs	r3, r2
 800249a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d214      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 020f 	bic.w	r2, r3, #15
 80024b2:	4906      	ldr	r1, [pc, #24]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCC_ClockConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e086      	b.n	80025da <HAL_RCC_ClockConfig+0x34e>
 80024cc:	52002000 	.word	0x52002000
 80024d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d208      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f0:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4939      	ldr	r1, [pc, #228]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800251a:	429a      	cmp	r2, r3
 800251c:	d208      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	492e      	ldr	r1, [pc, #184]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002548:	429a      	cmp	r2, r3
 800254a:	d208      	bcs.n	800255e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800255a:	4313      	orrs	r3, r2
 800255c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002576:	429a      	cmp	r2, r3
 8002578:	d208      	bcs.n	800258c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4917      	ldr	r1, [pc, #92]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002588:	4313      	orrs	r3, r2
 800258a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800258c:	f000 f834 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	4912      	ldr	r1, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x35c>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_RCC_ClockConfig+0x358>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_RCC_ClockConfig+0x35c>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x360>)
 80025c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x364>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x368>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fe72 	bl	80012b8 <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
 80025e8:	0800903c 	.word	0x0800903c
 80025ec:	24000004 	.word	0x24000004
 80025f0:	24000000 	.word	0x24000000
 80025f4:	24000008 	.word	0x24000008

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fe:	4bb3      	ldr	r3, [pc, #716]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002606:	2b18      	cmp	r3, #24
 8002608:	f200 8155 	bhi.w	80028b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <HAL_RCC_GetSysClockFreq+0x1c>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002679 	.word	0x08002679
 8002618:	080028b7 	.word	0x080028b7
 800261c:	080028b7 	.word	0x080028b7
 8002620:	080028b7 	.word	0x080028b7
 8002624:	080028b7 	.word	0x080028b7
 8002628:	080028b7 	.word	0x080028b7
 800262c:	080028b7 	.word	0x080028b7
 8002630:	080028b7 	.word	0x080028b7
 8002634:	0800269f 	.word	0x0800269f
 8002638:	080028b7 	.word	0x080028b7
 800263c:	080028b7 	.word	0x080028b7
 8002640:	080028b7 	.word	0x080028b7
 8002644:	080028b7 	.word	0x080028b7
 8002648:	080028b7 	.word	0x080028b7
 800264c:	080028b7 	.word	0x080028b7
 8002650:	080028b7 	.word	0x080028b7
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080028b7 	.word	0x080028b7
 800265c:	080028b7 	.word	0x080028b7
 8002660:	080028b7 	.word	0x080028b7
 8002664:	080028b7 	.word	0x080028b7
 8002668:	080028b7 	.word	0x080028b7
 800266c:	080028b7 	.word	0x080028b7
 8002670:	080028b7 	.word	0x080028b7
 8002674:	080026ab 	.word	0x080026ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002678:	4b94      	ldr	r3, [pc, #592]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	4a90      	ldr	r2, [pc, #576]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002696:	e111      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002698:	4b8d      	ldr	r3, [pc, #564]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800269a:	61bb      	str	r3, [r7, #24]
    break;
 800269c:	e10e      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800269e:	4b8d      	ldr	r3, [pc, #564]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026a0:	61bb      	str	r3, [r7, #24]
    break;
 80026a2:	e10b      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026a4:	4b8c      	ldr	r3, [pc, #560]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026a6:	61bb      	str	r3, [r7, #24]
    break;
 80026a8:	e108      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026b4:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026c0:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026ca:	4b80      	ldr	r3, [pc, #512]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80e1 	beq.w	80028b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f000 8083 	beq.w	80027fc <HAL_RCC_GetSysClockFreq+0x204>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f200 80a1 	bhi.w	8002840 <HAL_RCC_GetSysClockFreq+0x248>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x114>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d056      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800270a:	e099      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800270c:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d02d      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002718:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002752:	ed97 6a02 	vldr	s12, [r7, #8]
 8002756:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800275a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800275e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002772:	e087      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002786:	4b51      	ldr	r3, [pc, #324]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002796:	ed97 6a02 	vldr	s12, [r7, #8]
 800279a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800279e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027b6:	e065      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ca:	4b40      	ldr	r3, [pc, #256]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	ed97 6a02 	vldr	s12, [r7, #8]
 80027de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027fa:	e043      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002822:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800283e:	e021      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800284e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002862:	ed97 6a02 	vldr	s12, [r7, #8]
 8002866:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800286a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800286e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002882:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	0a5b      	lsrs	r3, r3, #9
 800288a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288e:	3301      	adds	r3, #1
 8002890:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289c:	edd7 6a07 	vldr	s13, [r7, #28]
 80028a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a8:	ee17 3a90 	vmov	r3, s15
 80028ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028ae:	e005      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    break;
 80028b4:	e002      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028b8:	61bb      	str	r3, [r7, #24]
    break;
 80028ba:	bf00      	nop
  }

  return sysclockfreq;
 80028bc:	69bb      	ldr	r3, [r7, #24]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	03d09000 	.word	0x03d09000
 80028d4:	003d0900 	.word	0x003d0900
 80028d8:	007a1200 	.word	0x007a1200
 80028dc:	46000000 	.word	0x46000000
 80028e0:	4c742400 	.word	0x4c742400
 80028e4:	4a742400 	.word	0x4a742400
 80028e8:	4af42400 	.word	0x4af42400

080028ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028f2:	f7ff fe81 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_GetHCLKFreq+0x50>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490f      	ldr	r1, [pc, #60]	; (8002940 <HAL_RCC_GetHCLKFreq+0x54>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_GetHCLKFreq+0x50>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_RCC_GetHCLKFreq+0x54>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <HAL_RCC_GetHCLKFreq+0x58>)
 8002928:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_RCC_GetHCLKFreq+0x5c>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_RCC_GetHCLKFreq+0x58>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58024400 	.word	0x58024400
 8002940:	0800903c 	.word	0x0800903c
 8002944:	24000004 	.word	0x24000004
 8002948:	24000000 	.word	0x24000000

0800294c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002950:	f7ff ffcc 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4904      	ldr	r1, [pc, #16]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58024400 	.word	0x58024400
 8002974:	0800903c 	.word	0x0800903c

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800297c:	f7ff ffb6 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58024400 	.word	0x58024400
 80029a0:	0800903c 	.word	0x0800903c

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029c8:	d02a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029ce:	d824      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d4:	d018      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029da:	d81e      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e4:	d007      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029e6:	e018      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4ba3      	ldr	r3, [pc, #652]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4aa2      	ldr	r2, [pc, #648]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029f4:	e015      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2102      	movs	r1, #2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f9d5 	bl	8003dac <RCCEx_PLL2_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a06:	e00c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3324      	adds	r3, #36	; 0x24
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fa7e 	bl	8003f10 <RCCEx_PLL3_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a18:	e003      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1e:	e000      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a28:	4b93      	ldr	r3, [pc, #588]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a34:	4990      	ldr	r1, [pc, #576]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	650b      	str	r3, [r1, #80]	; 0x50
 8002a3a:	e001      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d03d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d826      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a7f 	.word	0x08002a7f
 8002a64:	08002a91 	.word	0x08002a91
 8002a68:	08002aa9 	.word	0x08002aa9
 8002a6c:	08002aa9 	.word	0x08002aa9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	4a80      	ldr	r2, [pc, #512]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a7c:	e015      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 f991 	bl	8003dac <RCCEx_PLL2_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e00c      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3324      	adds	r3, #36	; 0x24
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fa3a 	bl	8003f10 <RCCEx_PLL3_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e003      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa6:	e000      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab0:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	f023 0207 	bic.w	r2, r3, #7
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	496e      	ldr	r1, [pc, #440]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d042      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002adc:	d02b      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d825      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ae4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ae6:	d028      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ae8:	2bc0      	cmp	r3, #192	; 0xc0
 8002aea:	d821      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d016      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d81d      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d007      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002afc:	e018      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e017      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 f94a 	bl	8003dac <RCCEx_PLL2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f9f3 	bl	8003f10 <RCCEx_PLL3_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b42:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	494a      	ldr	r1, [pc, #296]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	650b      	str	r3, [r1, #80]	; 0x50
 8002b54:	e001      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d049      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b70:	d030      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b76:	d82a      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b7c:	d02c      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b82:	d824      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b88:	d018      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8e:	d81e      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b98:	d007      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b9a:	e018      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba8:	e017      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f8fb 	bl	8003dac <RCCEx_PLL2_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bba:	e00e      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f9a4 	bl	8003f10 <RCCEx_PLL3_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e005      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bee:	4922      	ldr	r1, [pc, #136]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	658b      	str	r3, [r1, #88]	; 0x58
 8002bf4:	e001      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04b      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c10:	d030      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c16:	d82a      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c1c:	d02e      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c22:	d824      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c28:	d018      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c2e:	d81e      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c38:	d007      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c48:	e019      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f8ab 	bl	8003dac <RCCEx_PLL2_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e010      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3324      	adds	r3, #36	; 0x24
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f954 	bl	8003f10 <RCCEx_PLL3_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c6c:	e007      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
      break;
 8002c72:	e004      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c78:	58024400 	.word	0x58024400
      break;
 8002c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c84:	4b99      	ldr	r3, [pc, #612]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c92:	4996      	ldr	r1, [pc, #600]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	658b      	str	r3, [r1, #88]	; 0x58
 8002c98:	e001      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d032      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	2b30      	cmp	r3, #48	; 0x30
 8002cb0:	d01c      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cb2:	2b30      	cmp	r3, #48	; 0x30
 8002cb4:	d817      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d813      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc6:	4b89      	ldr	r3, [pc, #548]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4a88      	ldr	r2, [pc, #544]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cd2:	e00e      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f866 	bl	8003dac <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cf8:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	4979      	ldr	r1, [pc, #484]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d0a:	e001      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d047      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d24:	d030      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2a:	d82a      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d30:	d02c      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d36:	d824      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3c:	d018      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d42:	d81e      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d007      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4a65      	ldr	r2, [pc, #404]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e017      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f821 	bl	8003dac <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e00e      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 f8ca 	bl	8003f10 <RCCEx_PLL3_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d80:	e005      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	4952      	ldr	r1, [pc, #328]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	650b      	str	r3, [r1, #80]	; 0x50
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d049      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d02e      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc6:	d828      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dcc:	d02a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd2:	d822      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dd8:	d026      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dde:	d81c      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de4:	d010      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dea:	d816      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01d      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d111      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ffd5 	bl	8003dac <RCCEx_PLL2_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e06:	e012      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3324      	adds	r3, #36	; 0x24
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f87e 	bl	8003f10 <RCCEx_PLL3_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e18:	e009      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e1e:	e006      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e20:	bf00      	nop
 8002e22:	e004      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e24:	bf00      	nop
 8002e26:	e002      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	492a      	ldr	r1, [pc, #168]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	650b      	str	r3, [r1, #80]	; 0x50
 8002e46:	e001      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d04d      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e62:	d02e      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e68:	d828      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6e:	d02a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d822      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e7a:	d026      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e80:	d81c      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e86:	d010      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d816      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e96:	d111      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ff84 	bl	8003dac <RCCEx_PLL2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ea8:	e012      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3324      	adds	r3, #36	; 0x24
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 f82d 	bl	8003f10 <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002eba:	e009      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	658b      	str	r3, [r1, #88]	; 0x58
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02f      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f08:	d00e      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0e:	d814      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1a:	4baf      	ldr	r3, [pc, #700]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4aae      	ldr	r2, [pc, #696]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f26:	e00c      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 ff3c 	bl	8003dac <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f48:	4ba3      	ldr	r3, [pc, #652]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f54:	49a0      	ldr	r1, [pc, #640]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	650b      	str	r3, [r1, #80]	; 0x50
 8002f5a:	e001      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d032      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d81b      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fb3 	.word	0x08002fb3
 8002f80:	08002f8d 	.word	0x08002f8d
 8002f84:	08002f9b 	.word	0x08002f9b
 8002f88:	08002fb3 	.word	0x08002fb3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4a91      	ldr	r2, [pc, #580]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f98:	e00c      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 ff03 	bl	8003dac <RCCEx_PLL2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002faa:	e003      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fba:	4b87      	ldr	r3, [pc, #540]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4984      	ldr	r1, [pc, #528]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fcc:	e001      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8086 	beq.w	80030ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe0:	4b7e      	ldr	r3, [pc, #504]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fec:	f7fe f9ae 	bl	800134c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	e009      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fe f9aa 	bl	800134c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d902      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	75fb      	strb	r3, [r7, #23]
        break;
 8003006:	e005      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003008:	4b74      	ldr	r3, [pc, #464]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d166      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800301a:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800301c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003024:	4053      	eors	r3, r2
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d013      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003050:	4a61      	ldr	r2, [pc, #388]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d115      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe f973 	bl	800134c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003068:	e00b      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe f96f 	bl	800134c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d902      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	75fb      	strb	r3, [r7, #23]
            break;
 8003080:	e005      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ed      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d126      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030b2:	0919      	lsrs	r1, r3, #4
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80030b6:	400b      	ands	r3, r1
 80030b8:	4947      	ldr	r1, [pc, #284]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	610b      	str	r3, [r1, #16]
 80030be:	e005      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	4a44      	ldr	r2, [pc, #272]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030ca:	6113      	str	r3, [r2, #16]
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030da:	493f      	ldr	r1, [pc, #252]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	670b      	str	r3, [r1, #112]	; 0x70
 80030e0:	e004      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	75bb      	strb	r3, [r7, #22]
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8085 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fe:	2b28      	cmp	r3, #40	; 0x28
 8003100:	d866      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	080031e5 	.word	0x080031e5
 800310c:	080031d1 	.word	0x080031d1
 8003110:	080031d1 	.word	0x080031d1
 8003114:	080031d1 	.word	0x080031d1
 8003118:	080031d1 	.word	0x080031d1
 800311c:	080031d1 	.word	0x080031d1
 8003120:	080031d1 	.word	0x080031d1
 8003124:	080031d1 	.word	0x080031d1
 8003128:	080031ad 	.word	0x080031ad
 800312c:	080031d1 	.word	0x080031d1
 8003130:	080031d1 	.word	0x080031d1
 8003134:	080031d1 	.word	0x080031d1
 8003138:	080031d1 	.word	0x080031d1
 800313c:	080031d1 	.word	0x080031d1
 8003140:	080031d1 	.word	0x080031d1
 8003144:	080031d1 	.word	0x080031d1
 8003148:	080031bf 	.word	0x080031bf
 800314c:	080031d1 	.word	0x080031d1
 8003150:	080031d1 	.word	0x080031d1
 8003154:	080031d1 	.word	0x080031d1
 8003158:	080031d1 	.word	0x080031d1
 800315c:	080031d1 	.word	0x080031d1
 8003160:	080031d1 	.word	0x080031d1
 8003164:	080031d1 	.word	0x080031d1
 8003168:	080031e5 	.word	0x080031e5
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031d1 	.word	0x080031d1
 8003174:	080031d1 	.word	0x080031d1
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031e5 	.word	0x080031e5
 800318c:	080031d1 	.word	0x080031d1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080031d1 	.word	0x080031d1
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e5 	.word	0x080031e5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fdfa 	bl	8003dac <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031bc:	e013      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3324      	adds	r3, #36	; 0x24
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fea3 	bl	8003f10 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031ce:	e00a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      break;
 80031d4:	e007      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400
 80031dc:	58024800 	.word	0x58024800
 80031e0:	00ffffcf 	.word	0x00ffffcf
      break;
 80031e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f8:	4993      	ldr	r1, [pc, #588]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	654b      	str	r3, [r1, #84]	; 0x54
 80031fe:	e001      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d038      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	2b05      	cmp	r3, #5
 8003216:	d821      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003263 	.word	0x08003263
 8003224:	08003239 	.word	0x08003239
 8003228:	0800324b 	.word	0x0800324b
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fdb4 	bl	8003dac <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003248:	e00c      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fe5d 	bl	8003f10 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800326a:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	4974      	ldr	r1, [pc, #464]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	654b      	str	r3, [r1, #84]	; 0x54
 800327c:	e001      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	2b05      	cmp	r3, #5
 8003296:	d821      	bhi.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032e3 	.word	0x080032e3
 80032a4:	080032b9 	.word	0x080032b9
 80032a8:	080032cb 	.word	0x080032cb
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e3 	.word	0x080032e3
 80032b4:	080032e3 	.word	0x080032e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	2101      	movs	r1, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fd74 	bl	8003dac <RCCEx_PLL2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032c8:	e00c      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3324      	adds	r3, #36	; 0x24
 80032ce:	2101      	movs	r1, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fe1d 	bl	8003f10 <RCCEx_PLL3_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032da:	e003      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
      break;
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80032e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	4953      	ldr	r1, [pc, #332]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	658b      	str	r3, [r1, #88]	; 0x58
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331a:	d02e      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800331c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003320:	d828      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d02a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d822      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800332e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003332:	d026      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003338:	d81c      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800333a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333e:	d010      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003344:	d816      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800334a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800334e:	d111      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fd28 	bl	8003dac <RCCEx_PLL2_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003360:	e012      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3324      	adds	r3, #36	; 0x24
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fdd1 	bl	8003f10 <RCCEx_PLL3_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003372:	e009      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
      break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339c:	492a      	ldr	r1, [pc, #168]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	654b      	str	r3, [r1, #84]	; 0x54
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d04d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033be:	d02e      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80033c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c4:	d828      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d02a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d822      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033d6:	d026      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80033d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033dc:	d81c      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e2:	d010      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	d816      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01d      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d111      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fcd6 	bl	8003dac <RCCEx_PLL2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003404:	e012      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3324      	adds	r3, #36	; 0x24
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fd7f 	bl	8003f10 <RCCEx_PLL3_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
      break;
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800342a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003440:	4901      	ldr	r1, [pc, #4]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	658b      	str	r3, [r1, #88]	; 0x58
 8003446:	e003      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d04b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003462:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003466:	d02e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003468:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800346c:	d828      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d02a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	d822      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800347a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800347e:	d026      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003480:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003484:	d81c      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348a:	d010      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800348c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003490:	d816      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349a:	d111      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fc82 	bl	8003dac <RCCEx_PLL2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034ac:	e012      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3324      	adds	r3, #36	; 0x24
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fd2b 	bl	8003f10 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034be:	e009      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
      break;
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034c6:	bf00      	nop
 80034c8:	e004      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ca:	bf00      	nop
 80034cc:	e002      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034da:	4b9d      	ldr	r3, [pc, #628]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e8:	4999      	ldr	r1, [pc, #612]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	658b      	str	r3, [r1, #88]	; 0x58
 80034ee:	e001      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fcfc 	bl	8003f10 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003522:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003530:	4987      	ldr	r1, [pc, #540]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003532:	4313      	orrs	r3, r2
 8003534:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d10a      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3324      	adds	r3, #36	; 0x24
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fcdb 	bl	8003f10 <RCCEx_PLL3_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003564:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	4977      	ldr	r1, [pc, #476]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d034      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800358a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358e:	d01d      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003594:	d817      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800359a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359e:	d009      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035a0:	e011      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fbff 	bl	8003dac <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fca8 	bl	8003f10 <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d4:	4b5e      	ldr	r3, [pc, #376]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035e2:	495b      	ldr	r1, [pc, #364]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	658b      	str	r3, [r1, #88]	; 0x58
 80035e8:	e001      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d033      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003604:	d01c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360a:	d816      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003610:	d003      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003616:	d007      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003618:	e00f      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361a:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3324      	adds	r3, #36	; 0x24
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fc6e 	bl	8003f10 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	493e      	ldr	r1, [pc, #248]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003658:	4313      	orrs	r3, r2
 800365a:	654b      	str	r3, [r1, #84]	; 0x54
 800365c:	e001      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d029      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d007      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800367c:	e00f      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	4a33      	ldr	r2, [pc, #204]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800368a:	e00b      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb8a 	bl	8003dac <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
      break;
 80036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	4926      	ldr	r1, [pc, #152]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036bc:	e001      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3324      	adds	r3, #36	; 0x24
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fc1b 	bl	8003f10 <RCCEx_PLL3_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d033      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f8:	d017      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80036fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fe:	d811      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d013      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370a:	d80b      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003714:	d106      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003722:	e007      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e004      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	4902      	ldr	r1, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003748:	4313      	orrs	r3, r2
 800374a:	654b      	str	r3, [r1, #84]	; 0x54
 800374c:	e004      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	492e      	ldr	r1, [pc, #184]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003772:	4313      	orrs	r3, r2
 8003774:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003790:	4926      	ldr	r1, [pc, #152]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003792:	4313      	orrs	r3, r2
 8003794:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ae:	491f      	ldr	r1, [pc, #124]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037ca:	6113      	str	r3, [r2, #16]
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037d6:	4915      	ldr	r1, [pc, #84]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da08      	bge.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	4906      	ldr	r1, [pc, #24]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003812:	4313      	orrs	r3, r2
 8003814:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003816:	7dbb      	ldrb	r3, [r7, #22]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400

08003830 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003834:	f7ff f85a 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4904      	ldr	r1, [pc, #16]	; (8003858 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	58024400 	.word	0x58024400
 8003858:	0800903c 	.word	0x0800903c

0800385c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003864:	4ba1      	ldr	r3, [pc, #644]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800386e:	4b9f      	ldr	r3, [pc, #636]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	0b1b      	lsrs	r3, r3, #12
 8003874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003878:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800387a:	4b9c      	ldr	r3, [pc, #624]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003886:	4b99      	ldr	r3, [pc, #612]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	08db      	lsrs	r3, r3, #3
 800388c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8111 	beq.w	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	f000 8083 	beq.w	80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f200 80a1 	bhi.w	80039fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d056      	beq.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038c6:	e099      	b.n	80039fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038c8:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02d      	beq.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038d4:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	4a84      	ldr	r2, [pc, #528]	; (8003af0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003912:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800392e:	e087      	b.n	8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003972:	e065      	b.n	8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	ed97 6a03 	vldr	s12, [r7, #12]
 800399a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039b6:	e043      	b.n	8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b48      	ldr	r3, [pc, #288]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039da:	ed97 6a03 	vldr	s12, [r7, #12]
 80039de:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039fa:	e021      	b.n	8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003a40:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a66:	ee17 2a90 	vmov	r2, s15
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a6e:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a94:	ee17 2a90 	vmov	r2, s15
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac2:	ee17 2a90 	vmov	r2, s15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
 8003af0:	03d09000 	.word	0x03d09000
 8003af4:	46000000 	.word	0x46000000
 8003af8:	4c742400 	.word	0x4c742400
 8003afc:	4a742400 	.word	0x4a742400
 8003b00:	4af42400 	.word	0x4af42400

08003b04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b0c:	4ba1      	ldr	r3, [pc, #644]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003b16:	4b9f      	ldr	r3, [pc, #636]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	0d1b      	lsrs	r3, r3, #20
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b22:	4b9c      	ldr	r3, [pc, #624]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003b2e:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8111 	beq.w	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	f000 8083 	beq.w	8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	f200 80a1 	bhi.w	8003ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d056      	beq.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b6e:	e099      	b.n	8003ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b70:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02d      	beq.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b7c:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	4a84      	ldr	r2, [pc, #528]	; (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bd6:	e087      	b.n	8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c1a:	e065      	b.n	8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c5e:	e043      	b.n	8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ca2:	e021      	b.n	8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ce6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	0a5b      	lsrs	r3, r3, #9
 8003cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0e:	ee17 2a90 	vmov	r2, s15
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3c:	ee17 2a90 	vmov	r2, s15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6a:	ee17 2a90 	vmov	r2, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
 8003d98:	03d09000 	.word	0x03d09000
 8003d9c:	46000000 	.word	0x46000000
 8003da0:	4c742400 	.word	0x4c742400
 8003da4:	4a742400 	.word	0x4a742400
 8003da8:	4af42400 	.word	0x4af42400

08003dac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dba:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d101      	bne.n	8003dca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e099      	b.n	8003efe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dca:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fab9 	bl	800134c <HAL_GetTick>
 8003dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003dde:	f7fd fab5 	bl	800134c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e086      	b.n	8003efe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003df0:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003dfc:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	031b      	lsls	r3, r3, #12
 8003e0a:	493f      	ldr	r1, [pc, #252]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	025b      	lsls	r3, r3, #9
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e40:	4931      	ldr	r1, [pc, #196]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f023 0220 	bic.w	r2, r3, #32
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4928      	ldr	r1, [pc, #160]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e70:	f023 0310 	bic.w	r3, r3, #16
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <RCCEx_PLL2_Config+0x160>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	69d2      	ldr	r2, [r2, #28]
 8003e82:	00d2      	lsls	r2, r2, #3
 8003e84:	4920      	ldr	r1, [pc, #128]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e8a:	4b1f      	ldr	r3, [pc, #124]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ea8:	e00f      	b.n	8003eca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ebc:	e005      	b.n	8003eca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd fa39 	bl	800134c <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003edc:	e008      	b.n	8003ef0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ede:	f7fd fa35 	bl	800134c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e006      	b.n	8003efe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	ffff0007 	.word	0xffff0007

08003f10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f1e:	4b53      	ldr	r3, [pc, #332]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d101      	bne.n	8003f2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e099      	b.n	8004062 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a4e      	ldr	r2, [pc, #312]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3a:	f7fd fa07 	bl	800134c <HAL_GetTick>
 8003f3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f42:	f7fd fa03 	bl	800134c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e086      	b.n	8004062 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f54:	4b45      	ldr	r3, [pc, #276]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	051b      	lsls	r3, r3, #20
 8003f6e:	493f      	ldr	r1, [pc, #252]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	628b      	str	r3, [r1, #40]	; 0x28
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	025b      	lsls	r3, r3, #9
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fa4:	4931      	ldr	r1, [pc, #196]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	492d      	ldr	r1, [pc, #180]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4928      	ldr	r1, [pc, #160]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <RCCEx_PLL3_Config+0x160>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	69d2      	ldr	r2, [r2, #28]
 8003fe6:	00d2      	lsls	r2, r2, #3
 8003fe8:	4920      	ldr	r1, [pc, #128]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fee:	4b1f      	ldr	r3, [pc, #124]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800400a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800400c:	e00f      	b.n	800402e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 800401a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004020:	e005      	b.n	800402e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	4a11      	ldr	r2, [pc, #68]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403a:	f7fd f987 	bl	800134c <HAL_GetTick>
 800403e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004040:	e008      	b.n	8004054 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004042:	f7fd f983 	bl	800134c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e006      	b.n	8004062 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <RCCEx_PLL3_Config+0x15c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	58024400 	.word	0x58024400
 8004070:	ffff0007 	.word	0xffff0007

08004074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e049      	b.n	800411a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc ff9a 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 fbb0 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e049      	b.n	80041c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f841 	bl	80041d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 fb59 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_TIM_PWM_Start+0x24>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e03c      	b.n	8004282 <HAL_TIM_PWM_Start+0x9e>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d109      	bne.n	8004222 <HAL_TIM_PWM_Start+0x3e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e02f      	b.n	8004282 <HAL_TIM_PWM_Start+0x9e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d109      	bne.n	800423c <HAL_TIM_PWM_Start+0x58>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e022      	b.n	8004282 <HAL_TIM_PWM_Start+0x9e>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d109      	bne.n	8004256 <HAL_TIM_PWM_Start+0x72>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e015      	b.n	8004282 <HAL_TIM_PWM_Start+0x9e>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b10      	cmp	r3, #16
 800425a:	d109      	bne.n	8004270 <HAL_TIM_PWM_Start+0x8c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e008      	b.n	8004282 <HAL_TIM_PWM_Start+0x9e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0a1      	b.n	80043ce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xb6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004298:	e023      	b.n	80042e2 <HAL_TIM_PWM_Start+0xfe>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d104      	bne.n	80042aa <HAL_TIM_PWM_Start+0xc6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	e01b      	b.n	80042e2 <HAL_TIM_PWM_Start+0xfe>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0xd6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	e013      	b.n	80042e2 <HAL_TIM_PWM_Start+0xfe>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0xe6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042c8:	e00b      	b.n	80042e2 <HAL_TIM_PWM_Start+0xfe>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xf6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d8:	e003      	b.n	80042e2 <HAL_TIM_PWM_Start+0xfe>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fea2 	bl	8005034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_TIM_PWM_Start+0x1f4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_TIM_PWM_Start+0x13e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_TIM_PWM_Start+0x1f8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_TIM_PWM_Start+0x13e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a35      	ldr	r2, [pc, #212]	; (80043e0 <HAL_TIM_PWM_Start+0x1fc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIM_PWM_Start+0x13e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a34      	ldr	r2, [pc, #208]	; (80043e4 <HAL_TIM_PWM_Start+0x200>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIM_PWM_Start+0x13e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a32      	ldr	r2, [pc, #200]	; (80043e8 <HAL_TIM_PWM_Start+0x204>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_TIM_PWM_Start+0x142>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_TIM_PWM_Start+0x144>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <HAL_TIM_PWM_Start+0x1f4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d01d      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a25      	ldr	r2, [pc, #148]	; (80043ec <HAL_TIM_PWM_Start+0x208>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <HAL_TIM_PWM_Start+0x20c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <HAL_TIM_PWM_Start+0x210>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <HAL_TIM_PWM_Start+0x1f8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <HAL_TIM_PWM_Start+0x214>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_TIM_PWM_Start+0x1a8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIM_PWM_Start+0x1fc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d115      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_TIM_PWM_Start+0x218>)
 8004394:	4013      	ands	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d015      	beq.n	80043ca <HAL_TIM_PWM_Start+0x1e6>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d011      	beq.n	80043ca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	e008      	b.n	80043ca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e000      	b.n	80043cc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40010400 	.word	0x40010400
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40001800 	.word	0x40001800
 80043fc:	00010007 	.word	0x00010007

08004400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800441a:	2302      	movs	r3, #2
 800441c:	e0ff      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b14      	cmp	r3, #20
 800442a:	f200 80f0 	bhi.w	800460e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004489 	.word	0x08004489
 8004438:	0800460f 	.word	0x0800460f
 800443c:	0800460f 	.word	0x0800460f
 8004440:	0800460f 	.word	0x0800460f
 8004444:	080044c9 	.word	0x080044c9
 8004448:	0800460f 	.word	0x0800460f
 800444c:	0800460f 	.word	0x0800460f
 8004450:	0800460f 	.word	0x0800460f
 8004454:	0800450b 	.word	0x0800450b
 8004458:	0800460f 	.word	0x0800460f
 800445c:	0800460f 	.word	0x0800460f
 8004460:	0800460f 	.word	0x0800460f
 8004464:	0800454b 	.word	0x0800454b
 8004468:	0800460f 	.word	0x0800460f
 800446c:	0800460f 	.word	0x0800460f
 8004470:	0800460f 	.word	0x0800460f
 8004474:	0800458d 	.word	0x0800458d
 8004478:	0800460f 	.word	0x0800460f
 800447c:	0800460f 	.word	0x0800460f
 8004480:	0800460f 	.word	0x0800460f
 8004484:	080045cd 	.word	0x080045cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fa5c 	bl	800494c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0208 	orr.w	r2, r2, #8
 80044a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0204 	bic.w	r2, r2, #4
 80044b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6999      	ldr	r1, [r3, #24]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	619a      	str	r2, [r3, #24]
      break;
 80044c6:	e0a5      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 facc 	bl	8004a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6999      	ldr	r1, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	619a      	str	r2, [r3, #24]
      break;
 8004508:	e084      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fb35 	bl	8004b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0208 	orr.w	r2, r2, #8
 8004524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0204 	bic.w	r2, r2, #4
 8004534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69d9      	ldr	r1, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	61da      	str	r2, [r3, #28]
      break;
 8004548:	e064      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fb9d 	bl	8004c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69d9      	ldr	r1, [r3, #28]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	021a      	lsls	r2, r3, #8
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	61da      	str	r2, [r3, #28]
      break;
 800458a:	e043      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fbe6 	bl	8004d64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0208 	orr.w	r2, r2, #8
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045ca:	e023      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fc2a 	bl	8004e2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800460c:	e002      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
      break;
 8004612:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop

08004628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIM_ConfigClockSource+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e0dc      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x1d6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004660:	4013      	ands	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a64      	ldr	r2, [pc, #400]	; (800480c <HAL_TIM_ConfigClockSource+0x1e4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f000 80a9 	beq.w	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004680:	4a62      	ldr	r2, [pc, #392]	; (800480c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f200 80ae 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004688:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_TIM_ConfigClockSource+0x1e8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	f000 80a1 	beq.w	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004690:	4a5f      	ldr	r2, [pc, #380]	; (8004810 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	f200 80a6 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004698:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_TIM_ConfigClockSource+0x1ec>)
 800469a:	4293      	cmp	r3, r2
 800469c:	f000 8099 	beq.w	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80046a0:	4a5c      	ldr	r2, [pc, #368]	; (8004814 <HAL_TIM_ConfigClockSource+0x1ec>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	f200 809e 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046ac:	f000 8091 	beq.w	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80046b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046b4:	f200 8096 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046bc:	f000 8089 	beq.w	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80046c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c4:	f200 808e 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d03e      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x124>
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	f200 8087 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	f000 8086 	beq.w	80047ea <HAL_TIM_ConfigClockSource+0x1c2>
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d87f      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046e4:	2b70      	cmp	r3, #112	; 0x70
 80046e6:	d01a      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xf6>
 80046e8:	2b70      	cmp	r3, #112	; 0x70
 80046ea:	d87b      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046ec:	2b60      	cmp	r3, #96	; 0x60
 80046ee:	d050      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x16a>
 80046f0:	2b60      	cmp	r3, #96	; 0x60
 80046f2:	d877      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046f4:	2b50      	cmp	r3, #80	; 0x50
 80046f6:	d03c      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x14a>
 80046f8:	2b50      	cmp	r3, #80	; 0x50
 80046fa:	d873      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d058      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x18a>
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d86f      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d064      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004708:	2b30      	cmp	r3, #48	; 0x30
 800470a:	d86b      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d060      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d867      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d05c      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004718:	2b10      	cmp	r3, #16
 800471a:	d05a      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800471c:	e062      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6899      	ldr	r1, [r3, #8]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f000 fc61 	bl	8004ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	609a      	str	r2, [r3, #8]
      break;
 800474a:	e04f      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6899      	ldr	r1, [r3, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f000 fc4a 	bl	8004ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476e:	609a      	str	r2, [r3, #8]
      break;
 8004770:	e03c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 fbba 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2150      	movs	r1, #80	; 0x50
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fc14 	bl	8004fb8 <TIM_ITRx_SetConfig>
      break;
 8004790:	e02c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 fbd9 	bl	8004f56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2160      	movs	r1, #96	; 0x60
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fc04 	bl	8004fb8 <TIM_ITRx_SetConfig>
      break;
 80047b0:	e01c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 fb9a 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2140      	movs	r1, #64	; 0x40
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fbf4 	bl	8004fb8 <TIM_ITRx_SetConfig>
      break;
 80047d0:	e00c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f000 fbeb 	bl	8004fb8 <TIM_ITRx_SetConfig>
      break;
 80047e2:	e003      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      break;
 80047e8:	e000      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80047ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	ffceff88 	.word	0xffceff88
 800480c:	00100040 	.word	0x00100040
 8004810:	00100030 	.word	0x00100030
 8004814:	00100020 	.word	0x00100020

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d00f      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3d      	ldr	r2, [pc, #244]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3a      	ldr	r2, [pc, #232]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <TIM_Base_SetConfig+0x114>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d01b      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d017      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a29      	ldr	r2, [pc, #164]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a28      	ldr	r2, [pc, #160]	; (8004940 <TIM_Base_SetConfig+0x128>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <TIM_Base_SetConfig+0x130>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <TIM_Base_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <TIM_Base_SetConfig+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <TIM_Base_SetConfig+0x130>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d103      	bne.n	8004918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	615a      	str	r2, [r3, #20]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <TIM_OC1_SetConfig+0x108>)
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f023 0302 	bic.w	r3, r3, #2
 8004994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2d      	ldr	r2, [pc, #180]	; (8004a58 <TIM_OC1_SetConfig+0x10c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_OC1_SetConfig+0x7c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <TIM_OC1_SetConfig+0x110>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_OC1_SetConfig+0x7c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <TIM_OC1_SetConfig+0x114>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_OC1_SetConfig+0x7c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <TIM_OC1_SetConfig+0x118>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_OC1_SetConfig+0x7c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a29      	ldr	r2, [pc, #164]	; (8004a68 <TIM_OC1_SetConfig+0x11c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10c      	bne.n	80049e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0308 	bic.w	r3, r3, #8
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <TIM_OC1_SetConfig+0x10c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_OC1_SetConfig+0xbe>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <TIM_OC1_SetConfig+0x110>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_OC1_SetConfig+0xbe>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <TIM_OC1_SetConfig+0x114>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_OC1_SetConfig+0xbe>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <TIM_OC1_SetConfig+0x118>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC1_SetConfig+0xbe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <TIM_OC1_SetConfig+0x11c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	fffeff8f 	.word	0xfffeff8f
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <TIM_OC2_SetConfig+0xfc>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <TIM_OC2_SetConfig+0x100>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_OC2_SetConfig+0x68>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a28      	ldr	r2, [pc, #160]	; (8004b70 <TIM_OC2_SetConfig+0x104>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <TIM_OC2_SetConfig+0x100>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_OC2_SetConfig+0xac>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <TIM_OC2_SetConfig+0x104>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_OC2_SetConfig+0xac>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <TIM_OC2_SetConfig+0x108>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_OC2_SetConfig+0xac>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <TIM_OC2_SetConfig+0x10c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC2_SetConfig+0xac>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <TIM_OC2_SetConfig+0x110>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d113      	bne.n	8004b40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	feff8fff 	.word	0xfeff8fff
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40010400 	.word	0x40010400
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800

08004b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <TIM_OC3_SetConfig+0xf8>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <TIM_OC3_SetConfig+0xfc>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_OC3_SetConfig+0x66>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <TIM_OC3_SetConfig+0x100>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10d      	bne.n	8004c02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <TIM_OC3_SetConfig+0xfc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00f      	beq.n	8004c2a <TIM_OC3_SetConfig+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <TIM_OC3_SetConfig+0x100>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00b      	beq.n	8004c2a <TIM_OC3_SetConfig+0xaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <TIM_OC3_SetConfig+0x104>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d007      	beq.n	8004c2a <TIM_OC3_SetConfig+0xaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <TIM_OC3_SetConfig+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_OC3_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <TIM_OC3_SetConfig+0x10c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	fffeff8f 	.word	0xfffeff8f
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800

08004c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <TIM_OC4_SetConfig+0xbc>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <TIM_OC4_SetConfig+0xc0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_OC4_SetConfig+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <TIM_OC4_SetConfig+0xc4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_OC4_SetConfig+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <TIM_OC4_SetConfig+0xc8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_OC4_SetConfig+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <TIM_OC4_SetConfig+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC4_SetConfig+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <TIM_OC4_SetConfig+0xd0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d109      	bne.n	8004d24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	feff8fff 	.word	0xfeff8fff
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40010400 	.word	0x40010400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <TIM_OC5_SetConfig+0xb0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <TIM_OC5_SetConfig+0xb4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_OC5_SetConfig+0x76>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <TIM_OC5_SetConfig+0xb8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_OC5_SetConfig+0x76>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <TIM_OC5_SetConfig+0xbc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_OC5_SetConfig+0x76>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <TIM_OC5_SetConfig+0xc0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC5_SetConfig+0x76>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a14      	ldr	r2, [pc, #80]	; (8004e28 <TIM_OC5_SetConfig+0xc4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d109      	bne.n	8004dee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	fffeff8f 	.word	0xfffeff8f
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <TIM_OC6_SetConfig+0xb4>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	051b      	lsls	r3, r3, #20
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <TIM_OC6_SetConfig+0xb8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x78>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <TIM_OC6_SetConfig+0xbc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x78>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <TIM_OC6_SetConfig+0xc0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x78>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <TIM_OC6_SetConfig+0xc4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x78>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <TIM_OC6_SetConfig+0xc8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d109      	bne.n	8004eb8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	029b      	lsls	r3, r3, #10
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	feff8fff 	.word	0xfeff8fff
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0210 	bic.w	r2, r3, #16
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <TIM_ITRx_SetConfig+0x38>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f043 0307 	orr.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	609a      	str	r2, [r3, #8]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	ffcfff8f 	.word	0xffcfff8f

08004ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	431a      	orrs	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	2201      	movs	r2, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	43db      	mvns	r3, r3
 8005056:	401a      	ands	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005094:	2302      	movs	r3, #2
 8005096:	e06d      	b.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a30      	ldr	r2, [pc, #192]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d108      	bne.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510a:	d01d      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a15      	ldr	r2, [pc, #84]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a16      	ldr	r2, [pc, #88]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a15      	ldr	r2, [pc, #84]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10c      	bne.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40010000 	.word	0x40010000
 8005184:	40010400 	.word	0x40010400
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40001800 	.word	0x40001800
 8005198:	40014000 	.word	0x40014000

0800519c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e042      	b.n	8005234 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fb ffad 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2224      	movs	r2, #36	; 0x24
 80051ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f996 	bl	8005510 <UART_SetConfig>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e022      	b.n	8005234 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fef2 	bl	8005fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800520a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 ff79 	bl	8006124 <UART_CheckIdleState>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005252:	2b20      	cmp	r3, #32
 8005254:	f040 8083 	bne.w	800535e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_UART_Transmit+0x28>
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e07b      	b.n	8005360 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_UART_Transmit+0x3a>
 8005272:	2302      	movs	r3, #2
 8005274:	e074      	b.n	8005360 <HAL_UART_Transmit+0x124>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2221      	movs	r2, #33	; 0x21
 800528a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800528e:	f7fc f85d 	bl	800134c <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	d108      	bne.n	80052c0 <HAL_UART_Transmit+0x84>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e003      	b.n	80052c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80052d0:	e02c      	b.n	800532c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 ff6c 	bl	80061ba <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e039      	b.n	8005360 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	3302      	adds	r3, #2
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e007      	b.n	800531a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	781a      	ldrb	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1cc      	bne.n	80052d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	2140      	movs	r1, #64	; 0x40
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 ff39 	bl	80061ba <UART_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e006      	b.n	8005360 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e000      	b.n	8005360 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
  }
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	2b20      	cmp	r3, #32
 8005380:	f040 80c0 	bne.w	8005504 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Receive+0x28>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0b8      	b.n	8005506 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Receive+0x3a>
 800539e:	2302      	movs	r3, #2
 80053a0:	e0b1      	b.n	8005506 <HAL_UART_Receive+0x19e>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2222      	movs	r2, #34	; 0x22
 80053b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c0:	f7fb ffc4 	bl	800134c <HAL_GetTick>
 80053c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d10e      	bne.n	80053fe <HAL_UART_Receive+0x96>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_UART_Receive+0x8c>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053f2:	e02d      	b.n	8005450 <HAL_UART_Receive+0xe8>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053fc:	e028      	b.n	8005450 <HAL_UART_Receive+0xe8>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_UART_Receive+0xba>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <HAL_UART_Receive+0xb0>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	22ff      	movs	r2, #255	; 0xff
 8005412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005416:	e01b      	b.n	8005450 <HAL_UART_Receive+0xe8>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	227f      	movs	r2, #127	; 0x7f
 800541c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005420:	e016      	b.n	8005450 <HAL_UART_Receive+0xe8>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542a:	d10d      	bne.n	8005448 <HAL_UART_Receive+0xe0>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_UART_Receive+0xd6>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	227f      	movs	r2, #127	; 0x7f
 8005438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800543c:	e008      	b.n	8005450 <HAL_UART_Receive+0xe8>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	223f      	movs	r2, #63	; 0x3f
 8005442:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005446:	e003      	b.n	8005450 <HAL_UART_Receive+0xe8>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005456:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005460:	d108      	bne.n	8005474 <HAL_UART_Receive+0x10c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e003      	b.n	800547c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005484:	e032      	b.n	80054ec <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	2120      	movs	r1, #32
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fe92 	bl	80061ba <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e032      	b.n	8005506 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10c      	bne.n	80054c0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	8a7b      	ldrh	r3, [r7, #18]
 80054b0:	4013      	ands	r3, r2
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3302      	adds	r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e00c      	b.n	80054da <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	8a7b      	ldrh	r3, [r7, #18]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4013      	ands	r3, r2
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1c6      	bne.n	8005486 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005514:	b092      	sub	sp, #72	; 0x48
 8005516:	af00      	add	r7, sp, #0
 8005518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	4313      	orrs	r3, r2
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4bbe      	ldr	r3, [pc, #760]	; (8005838 <UART_SetConfig+0x328>)
 8005540:	4013      	ands	r3, r2
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005548:	430b      	orrs	r3, r1
 800554a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4ab3      	ldr	r2, [pc, #716]	; (800583c <UART_SetConfig+0x32c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005578:	4313      	orrs	r3, r2
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	4baf      	ldr	r3, [pc, #700]	; (8005840 <UART_SetConfig+0x330>)
 8005584:	4013      	ands	r3, r2
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800558c:	430b      	orrs	r3, r1
 800558e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	f023 010f 	bic.w	r1, r3, #15
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4aa6      	ldr	r2, [pc, #664]	; (8005844 <UART_SetConfig+0x334>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d177      	bne.n	80056a0 <UART_SetConfig+0x190>
 80055b0:	4ba5      	ldr	r3, [pc, #660]	; (8005848 <UART_SetConfig+0x338>)
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b8:	2b28      	cmp	r3, #40	; 0x28
 80055ba:	d86d      	bhi.n	8005698 <UART_SetConfig+0x188>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0xb4>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	08005669 	.word	0x08005669
 80055c8:	08005699 	.word	0x08005699
 80055cc:	08005699 	.word	0x08005699
 80055d0:	08005699 	.word	0x08005699
 80055d4:	08005699 	.word	0x08005699
 80055d8:	08005699 	.word	0x08005699
 80055dc:	08005699 	.word	0x08005699
 80055e0:	08005699 	.word	0x08005699
 80055e4:	08005671 	.word	0x08005671
 80055e8:	08005699 	.word	0x08005699
 80055ec:	08005699 	.word	0x08005699
 80055f0:	08005699 	.word	0x08005699
 80055f4:	08005699 	.word	0x08005699
 80055f8:	08005699 	.word	0x08005699
 80055fc:	08005699 	.word	0x08005699
 8005600:	08005699 	.word	0x08005699
 8005604:	08005679 	.word	0x08005679
 8005608:	08005699 	.word	0x08005699
 800560c:	08005699 	.word	0x08005699
 8005610:	08005699 	.word	0x08005699
 8005614:	08005699 	.word	0x08005699
 8005618:	08005699 	.word	0x08005699
 800561c:	08005699 	.word	0x08005699
 8005620:	08005699 	.word	0x08005699
 8005624:	08005681 	.word	0x08005681
 8005628:	08005699 	.word	0x08005699
 800562c:	08005699 	.word	0x08005699
 8005630:	08005699 	.word	0x08005699
 8005634:	08005699 	.word	0x08005699
 8005638:	08005699 	.word	0x08005699
 800563c:	08005699 	.word	0x08005699
 8005640:	08005699 	.word	0x08005699
 8005644:	08005689 	.word	0x08005689
 8005648:	08005699 	.word	0x08005699
 800564c:	08005699 	.word	0x08005699
 8005650:	08005699 	.word	0x08005699
 8005654:	08005699 	.word	0x08005699
 8005658:	08005699 	.word	0x08005699
 800565c:	08005699 	.word	0x08005699
 8005660:	08005699 	.word	0x08005699
 8005664:	08005691 	.word	0x08005691
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e222      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e21e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e21a      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e216      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005688:	2320      	movs	r3, #32
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e212      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e20e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e20a      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a69      	ldr	r2, [pc, #420]	; (800584c <UART_SetConfig+0x33c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d130      	bne.n	800570c <UART_SetConfig+0x1fc>
 80056aa:	4b67      	ldr	r3, [pc, #412]	; (8005848 <UART_SetConfig+0x338>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d826      	bhi.n	8005704 <UART_SetConfig+0x1f4>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0x1ac>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056d5 	.word	0x080056d5
 80056c0:	080056dd 	.word	0x080056dd
 80056c4:	080056e5 	.word	0x080056e5
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e1ec      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e1e8      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e1e4      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e1e0      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80056f4:	2320      	movs	r3, #32
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e1dc      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e1d8      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e1d4      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a4f      	ldr	r2, [pc, #316]	; (8005850 <UART_SetConfig+0x340>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d130      	bne.n	8005778 <UART_SetConfig+0x268>
 8005716:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <UART_SetConfig+0x338>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	2b05      	cmp	r3, #5
 8005720:	d826      	bhi.n	8005770 <UART_SetConfig+0x260>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0x218>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005741 	.word	0x08005741
 800572c:	08005749 	.word	0x08005749
 8005730:	08005751 	.word	0x08005751
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e1b6      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005748:	2304      	movs	r3, #4
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e1b2      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005750:	2308      	movs	r3, #8
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e1ae      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005758:	2310      	movs	r3, #16
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e1aa      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005760:	2320      	movs	r3, #32
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e1a6      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005768:	2340      	movs	r3, #64	; 0x40
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e1a2      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e19e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a35      	ldr	r2, [pc, #212]	; (8005854 <UART_SetConfig+0x344>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d130      	bne.n	80057e4 <UART_SetConfig+0x2d4>
 8005782:	4b31      	ldr	r3, [pc, #196]	; (8005848 <UART_SetConfig+0x338>)
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b05      	cmp	r3, #5
 800578c:	d826      	bhi.n	80057dc <UART_SetConfig+0x2cc>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0x284>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057ad 	.word	0x080057ad
 8005798:	080057b5 	.word	0x080057b5
 800579c:	080057bd 	.word	0x080057bd
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057cd 	.word	0x080057cd
 80057a8:	080057d5 	.word	0x080057d5
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e180      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057b4:	2304      	movs	r3, #4
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ba:	e17c      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057bc:	2308      	movs	r3, #8
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e178      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057c4:	2310      	movs	r3, #16
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ca:	e174      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057cc:	2320      	movs	r3, #32
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e170      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057d4:	2340      	movs	r3, #64	; 0x40
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057da:	e16c      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e168      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <UART_SetConfig+0x348>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d142      	bne.n	8005874 <UART_SetConfig+0x364>
 80057ee:	4b16      	ldr	r3, [pc, #88]	; (8005848 <UART_SetConfig+0x338>)
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b05      	cmp	r3, #5
 80057f8:	d838      	bhi.n	800586c <UART_SetConfig+0x35c>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x2f0>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005819 	.word	0x08005819
 8005804:	08005821 	.word	0x08005821
 8005808:	08005829 	.word	0x08005829
 800580c:	08005831 	.word	0x08005831
 8005810:	0800585d 	.word	0x0800585d
 8005814:	08005865 	.word	0x08005865
 8005818:	2300      	movs	r3, #0
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e14a      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e146      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e142      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e13e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005838:	cfff69f3 	.word	0xcfff69f3
 800583c:	58000c00 	.word	0x58000c00
 8005840:	11fff4ff 	.word	0x11fff4ff
 8005844:	40011000 	.word	0x40011000
 8005848:	58024400 	.word	0x58024400
 800584c:	40004400 	.word	0x40004400
 8005850:	40004800 	.word	0x40004800
 8005854:	40004c00 	.word	0x40004c00
 8005858:	40005000 	.word	0x40005000
 800585c:	2320      	movs	r3, #32
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e128      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e124      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e120      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4acb      	ldr	r2, [pc, #812]	; (8005ba8 <UART_SetConfig+0x698>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d176      	bne.n	800596c <UART_SetConfig+0x45c>
 800587e:	4bcb      	ldr	r3, [pc, #812]	; (8005bac <UART_SetConfig+0x69c>)
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005886:	2b28      	cmp	r3, #40	; 0x28
 8005888:	d86c      	bhi.n	8005964 <UART_SetConfig+0x454>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x380>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	08005935 	.word	0x08005935
 8005894:	08005965 	.word	0x08005965
 8005898:	08005965 	.word	0x08005965
 800589c:	08005965 	.word	0x08005965
 80058a0:	08005965 	.word	0x08005965
 80058a4:	08005965 	.word	0x08005965
 80058a8:	08005965 	.word	0x08005965
 80058ac:	08005965 	.word	0x08005965
 80058b0:	0800593d 	.word	0x0800593d
 80058b4:	08005965 	.word	0x08005965
 80058b8:	08005965 	.word	0x08005965
 80058bc:	08005965 	.word	0x08005965
 80058c0:	08005965 	.word	0x08005965
 80058c4:	08005965 	.word	0x08005965
 80058c8:	08005965 	.word	0x08005965
 80058cc:	08005965 	.word	0x08005965
 80058d0:	08005945 	.word	0x08005945
 80058d4:	08005965 	.word	0x08005965
 80058d8:	08005965 	.word	0x08005965
 80058dc:	08005965 	.word	0x08005965
 80058e0:	08005965 	.word	0x08005965
 80058e4:	08005965 	.word	0x08005965
 80058e8:	08005965 	.word	0x08005965
 80058ec:	08005965 	.word	0x08005965
 80058f0:	0800594d 	.word	0x0800594d
 80058f4:	08005965 	.word	0x08005965
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005965 	.word	0x08005965
 8005900:	08005965 	.word	0x08005965
 8005904:	08005965 	.word	0x08005965
 8005908:	08005965 	.word	0x08005965
 800590c:	08005965 	.word	0x08005965
 8005910:	08005955 	.word	0x08005955
 8005914:	08005965 	.word	0x08005965
 8005918:	08005965 	.word	0x08005965
 800591c:	08005965 	.word	0x08005965
 8005920:	08005965 	.word	0x08005965
 8005924:	08005965 	.word	0x08005965
 8005928:	08005965 	.word	0x08005965
 800592c:	08005965 	.word	0x08005965
 8005930:	0800595d 	.word	0x0800595d
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e0bc      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e0b8      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e0b4      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e0b0      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005954:	2320      	movs	r3, #32
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e0ac      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e0a8      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e0a4      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a8f      	ldr	r2, [pc, #572]	; (8005bb0 <UART_SetConfig+0x6a0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d130      	bne.n	80059d8 <UART_SetConfig+0x4c8>
 8005976:	4b8d      	ldr	r3, [pc, #564]	; (8005bac <UART_SetConfig+0x69c>)
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b05      	cmp	r3, #5
 8005980:	d826      	bhi.n	80059d0 <UART_SetConfig+0x4c0>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x478>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059a1 	.word	0x080059a1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e086      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e082      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e07e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e07a      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059c0:	2320      	movs	r3, #32
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e076      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e072      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e06e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a75      	ldr	r2, [pc, #468]	; (8005bb4 <UART_SetConfig+0x6a4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d130      	bne.n	8005a44 <UART_SetConfig+0x534>
 80059e2:	4b72      	ldr	r3, [pc, #456]	; (8005bac <UART_SetConfig+0x69c>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d826      	bhi.n	8005a3c <UART_SetConfig+0x52c>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x4e4>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a1d 	.word	0x08005a1d
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a35 	.word	0x08005a35
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e050      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e04c      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e048      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e044      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e040      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e03c      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e038      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a5b      	ldr	r2, [pc, #364]	; (8005bb8 <UART_SetConfig+0x6a8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d130      	bne.n	8005ab0 <UART_SetConfig+0x5a0>
 8005a4e:	4b57      	ldr	r3, [pc, #348]	; (8005bac <UART_SetConfig+0x69c>)
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d826      	bhi.n	8005aa8 <UART_SetConfig+0x598>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x550>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a79 	.word	0x08005a79
 8005a64:	08005a81 	.word	0x08005a81
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e01a      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e016      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e012      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e00e      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005a98:	2320      	movs	r3, #32
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e00a      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa6:	e006      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e002      	b.n	8005ab6 <UART_SetConfig+0x5a6>
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a3f      	ldr	r2, [pc, #252]	; (8005bb8 <UART_SetConfig+0x6a8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	f040 80f8 	bne.w	8005cb2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	dc46      	bgt.n	8005b58 <UART_SetConfig+0x648>
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	f2c0 8082 	blt.w	8005bd4 <UART_SetConfig+0x6c4>
 8005ad0:	3b02      	subs	r3, #2
 8005ad2:	2b1e      	cmp	r3, #30
 8005ad4:	d87e      	bhi.n	8005bd4 <UART_SetConfig+0x6c4>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x5cc>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005b5f 	.word	0x08005b5f
 8005ae0:	08005bd5 	.word	0x08005bd5
 8005ae4:	08005b67 	.word	0x08005b67
 8005ae8:	08005bd5 	.word	0x08005bd5
 8005aec:	08005bd5 	.word	0x08005bd5
 8005af0:	08005bd5 	.word	0x08005bd5
 8005af4:	08005b77 	.word	0x08005b77
 8005af8:	08005bd5 	.word	0x08005bd5
 8005afc:	08005bd5 	.word	0x08005bd5
 8005b00:	08005bd5 	.word	0x08005bd5
 8005b04:	08005bd5 	.word	0x08005bd5
 8005b08:	08005bd5 	.word	0x08005bd5
 8005b0c:	08005bd5 	.word	0x08005bd5
 8005b10:	08005bd5 	.word	0x08005bd5
 8005b14:	08005b87 	.word	0x08005b87
 8005b18:	08005bd5 	.word	0x08005bd5
 8005b1c:	08005bd5 	.word	0x08005bd5
 8005b20:	08005bd5 	.word	0x08005bd5
 8005b24:	08005bd5 	.word	0x08005bd5
 8005b28:	08005bd5 	.word	0x08005bd5
 8005b2c:	08005bd5 	.word	0x08005bd5
 8005b30:	08005bd5 	.word	0x08005bd5
 8005b34:	08005bd5 	.word	0x08005bd5
 8005b38:	08005bd5 	.word	0x08005bd5
 8005b3c:	08005bd5 	.word	0x08005bd5
 8005b40:	08005bd5 	.word	0x08005bd5
 8005b44:	08005bd5 	.word	0x08005bd5
 8005b48:	08005bd5 	.word	0x08005bd5
 8005b4c:	08005bd5 	.word	0x08005bd5
 8005b50:	08005bd5 	.word	0x08005bd5
 8005b54:	08005bc7 	.word	0x08005bc7
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d037      	beq.n	8005bcc <UART_SetConfig+0x6bc>
 8005b5c:	e03a      	b.n	8005bd4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b5e:	f7fd fe67 	bl	8003830 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b64:	e03c      	b.n	8005be0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd fe76 	bl	800385c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b74:	e034      	b.n	8005be0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b76:	f107 0318 	add.w	r3, r7, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd ffc2 	bl	8003b04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b84:	e02c      	b.n	8005be0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <UART_SetConfig+0x69c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <UART_SetConfig+0x69c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	4a07      	ldr	r2, [pc, #28]	; (8005bbc <UART_SetConfig+0x6ac>)
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ba4:	e01c      	b.n	8005be0 <UART_SetConfig+0x6d0>
 8005ba6:	bf00      	nop
 8005ba8:	40011400 	.word	0x40011400
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	40007800 	.word	0x40007800
 8005bb4:	40007c00 	.word	0x40007c00
 8005bb8:	58000c00 	.word	0x58000c00
 8005bbc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005bc0:	4b9d      	ldr	r3, [pc, #628]	; (8005e38 <UART_SetConfig+0x928>)
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc4:	e00c      	b.n	8005be0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bc6:	4b9d      	ldr	r3, [pc, #628]	; (8005e3c <UART_SetConfig+0x92c>)
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bca:	e009      	b.n	8005be0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd2:	e005      	b.n	8005be0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 81de 	beq.w	8005fa4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	4a94      	ldr	r2, [pc, #592]	; (8005e40 <UART_SetConfig+0x930>)
 8005bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d305      	bcc.n	8005c18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c1e:	e1c1      	b.n	8005fa4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	2200      	movs	r2, #0
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	60fa      	str	r2, [r7, #12]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	4a84      	ldr	r2, [pc, #528]	; (8005e40 <UART_SetConfig+0x930>)
 8005c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2200      	movs	r2, #0
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c42:	f7fa fba5 	bl	8000390 <__aeabi_uldivmod>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	020b      	lsls	r3, r1, #8
 8005c58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c5c:	0202      	lsls	r2, r0, #8
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	6849      	ldr	r1, [r1, #4]
 8005c62:	0849      	lsrs	r1, r1, #1
 8005c64:	2000      	movs	r0, #0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4605      	mov	r5, r0
 8005c6a:	eb12 0804 	adds.w	r8, r2, r4
 8005c6e:	eb43 0905 	adc.w	r9, r3, r5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	469a      	mov	sl, r3
 8005c7a:	4693      	mov	fp, r2
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	465b      	mov	r3, fp
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa fb84 	bl	8000390 <__aeabi_uldivmod>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c96:	d308      	bcc.n	8005caa <UART_SetConfig+0x79a>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d204      	bcs.n	8005caa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	e17c      	b.n	8005fa4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005cb0:	e178      	b.n	8005fa4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	f040 80c5 	bne.w	8005e48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005cbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	dc48      	bgt.n	8005d58 <UART_SetConfig+0x848>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db7b      	blt.n	8005dc2 <UART_SetConfig+0x8b2>
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d879      	bhi.n	8005dc2 <UART_SetConfig+0x8b2>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0x7c4>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d5f 	.word	0x08005d5f
 8005cd8:	08005d67 	.word	0x08005d67
 8005cdc:	08005dc3 	.word	0x08005dc3
 8005ce0:	08005dc3 	.word	0x08005dc3
 8005ce4:	08005d6f 	.word	0x08005d6f
 8005ce8:	08005dc3 	.word	0x08005dc3
 8005cec:	08005dc3 	.word	0x08005dc3
 8005cf0:	08005dc3 	.word	0x08005dc3
 8005cf4:	08005d7f 	.word	0x08005d7f
 8005cf8:	08005dc3 	.word	0x08005dc3
 8005cfc:	08005dc3 	.word	0x08005dc3
 8005d00:	08005dc3 	.word	0x08005dc3
 8005d04:	08005dc3 	.word	0x08005dc3
 8005d08:	08005dc3 	.word	0x08005dc3
 8005d0c:	08005dc3 	.word	0x08005dc3
 8005d10:	08005dc3 	.word	0x08005dc3
 8005d14:	08005d8f 	.word	0x08005d8f
 8005d18:	08005dc3 	.word	0x08005dc3
 8005d1c:	08005dc3 	.word	0x08005dc3
 8005d20:	08005dc3 	.word	0x08005dc3
 8005d24:	08005dc3 	.word	0x08005dc3
 8005d28:	08005dc3 	.word	0x08005dc3
 8005d2c:	08005dc3 	.word	0x08005dc3
 8005d30:	08005dc3 	.word	0x08005dc3
 8005d34:	08005dc3 	.word	0x08005dc3
 8005d38:	08005dc3 	.word	0x08005dc3
 8005d3c:	08005dc3 	.word	0x08005dc3
 8005d40:	08005dc3 	.word	0x08005dc3
 8005d44:	08005dc3 	.word	0x08005dc3
 8005d48:	08005dc3 	.word	0x08005dc3
 8005d4c:	08005dc3 	.word	0x08005dc3
 8005d50:	08005dc3 	.word	0x08005dc3
 8005d54:	08005db5 	.word	0x08005db5
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	d02e      	beq.n	8005dba <UART_SetConfig+0x8aa>
 8005d5c:	e031      	b.n	8005dc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5e:	f7fc fdf5 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 8005d62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d64:	e033      	b.n	8005dce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d66:	f7fc fe07 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8005d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d6c:	e02f      	b.n	8005dce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd fd72 	bl	800385c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7c:	e027      	b.n	8005dce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d7e:	f107 0318 	add.w	r3, r7, #24
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd febe 	bl	8003b04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d8c:	e01f      	b.n	8005dce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d8e:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <UART_SetConfig+0x934>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d9a:	4b2a      	ldr	r3, [pc, #168]	; (8005e44 <UART_SetConfig+0x934>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <UART_SetConfig+0x928>)
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dac:	e00f      	b.n	8005dce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <UART_SetConfig+0x928>)
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005db2:	e00c      	b.n	8005dce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005db4:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <UART_SetConfig+0x92c>)
 8005db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005db8:	e009      	b.n	8005dce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc0:	e005      	b.n	8005dce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80e7 	beq.w	8005fa4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <UART_SetConfig+0x930>)
 8005ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de0:	461a      	mov	r2, r3
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de8:	005a      	lsls	r2, r3, #1
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	441a      	add	r2, r3
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	2b0f      	cmp	r3, #15
 8005e00:	d916      	bls.n	8005e30 <UART_SetConfig+0x920>
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d212      	bcs.n	8005e30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f023 030f 	bic.w	r3, r3, #15
 8005e12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e22:	4313      	orrs	r3, r2
 8005e24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	e0b9      	b.n	8005fa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e36:	e0b5      	b.n	8005fa4 <UART_SetConfig+0xa94>
 8005e38:	03d09000 	.word	0x03d09000
 8005e3c:	003d0900 	.word	0x003d0900
 8005e40:	0800904c 	.word	0x0800904c
 8005e44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	dc49      	bgt.n	8005ee4 <UART_SetConfig+0x9d4>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	db7c      	blt.n	8005f4e <UART_SetConfig+0xa3e>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d87a      	bhi.n	8005f4e <UART_SetConfig+0xa3e>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x950>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005eeb 	.word	0x08005eeb
 8005e64:	08005ef3 	.word	0x08005ef3
 8005e68:	08005f4f 	.word	0x08005f4f
 8005e6c:	08005f4f 	.word	0x08005f4f
 8005e70:	08005efb 	.word	0x08005efb
 8005e74:	08005f4f 	.word	0x08005f4f
 8005e78:	08005f4f 	.word	0x08005f4f
 8005e7c:	08005f4f 	.word	0x08005f4f
 8005e80:	08005f0b 	.word	0x08005f0b
 8005e84:	08005f4f 	.word	0x08005f4f
 8005e88:	08005f4f 	.word	0x08005f4f
 8005e8c:	08005f4f 	.word	0x08005f4f
 8005e90:	08005f4f 	.word	0x08005f4f
 8005e94:	08005f4f 	.word	0x08005f4f
 8005e98:	08005f4f 	.word	0x08005f4f
 8005e9c:	08005f4f 	.word	0x08005f4f
 8005ea0:	08005f1b 	.word	0x08005f1b
 8005ea4:	08005f4f 	.word	0x08005f4f
 8005ea8:	08005f4f 	.word	0x08005f4f
 8005eac:	08005f4f 	.word	0x08005f4f
 8005eb0:	08005f4f 	.word	0x08005f4f
 8005eb4:	08005f4f 	.word	0x08005f4f
 8005eb8:	08005f4f 	.word	0x08005f4f
 8005ebc:	08005f4f 	.word	0x08005f4f
 8005ec0:	08005f4f 	.word	0x08005f4f
 8005ec4:	08005f4f 	.word	0x08005f4f
 8005ec8:	08005f4f 	.word	0x08005f4f
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005f4f 	.word	0x08005f4f
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08005f4f 	.word	0x08005f4f
 8005edc:	08005f4f 	.word	0x08005f4f
 8005ee0:	08005f41 	.word	0x08005f41
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d02e      	beq.n	8005f46 <UART_SetConfig+0xa36>
 8005ee8:	e031      	b.n	8005f4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eea:	f7fc fd2f 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 8005eee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ef0:	e033      	b.n	8005f5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef2:	f7fc fd41 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8005ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ef8:	e02f      	b.n	8005f5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd fcac 	bl	800385c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f08:	e027      	b.n	8005f5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0a:	f107 0318 	add.w	r3, r7, #24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd fdf8 	bl	8003b04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f18:	e01f      	b.n	8005f5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <UART_SetConfig+0xac0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f26:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <UART_SetConfig+0xac0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	4a28      	ldr	r2, [pc, #160]	; (8005fd4 <UART_SetConfig+0xac4>)
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f38:	e00f      	b.n	8005f5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005f3a:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <UART_SetConfig+0xac4>)
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3e:	e00c      	b.n	8005f5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <UART_SetConfig+0xac8>)
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f58:	bf00      	nop
    }

    if (pclk != 0U)
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d021      	beq.n	8005fa4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <UART_SetConfig+0xacc>)
 8005f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	441a      	add	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d909      	bls.n	8005f9e <UART_SetConfig+0xa8e>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f90:	d205      	bcs.n	8005f9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	e002      	b.n	8005fa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005fc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3748      	adds	r7, #72	; 0x48
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fce:	bf00      	nop
 8005fd0:	58024400 	.word	0x58024400
 8005fd4:	03d09000 	.word	0x03d09000
 8005fd8:	003d0900 	.word	0x003d0900
 8005fdc:	0800904c 	.word	0x0800904c

08005fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01a      	beq.n	80060f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d10a      	bne.n	80060f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006134:	f7fb f90a 	bl	800134c <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d10e      	bne.n	8006166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f82f 	bl	80061ba <UART_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e025      	b.n	80061b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d10e      	bne.n	8006192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f819 	bl	80061ba <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e00f      	b.n	80061b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b09c      	sub	sp, #112	; 0x70
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ca:	e0a9      	b.n	8006320 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	f000 80a5 	beq.w	8006320 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d6:	f7fb f8b9 	bl	800134c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <UART_WaitOnFlagUntilTimeout+0x32>
 80061e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d140      	bne.n	800626e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006200:	667b      	str	r3, [r7, #100]	; 0x64
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800620a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800620c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	663b      	str	r3, [r7, #96]	; 0x60
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800623e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800624c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e5      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e069      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d051      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628a:	d149      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006294:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
 80062b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e6      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	613b      	str	r3, [r7, #16]
   return(result);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	66bb      	str	r3, [r7, #104]	; 0x68
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062e8:	623a      	str	r2, [r7, #32]
 80062ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	69f9      	ldr	r1, [r7, #28]
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e5      	bne.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e010      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4013      	ands	r3, r2
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	429a      	cmp	r2, r3
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	429a      	cmp	r2, r3
 800633c:	f43f af46 	beq.w	80061cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3770      	adds	r7, #112	; 0x70
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_UARTEx_DisableFifoMode+0x16>
 800635c:	2302      	movs	r3, #2
 800635e:	e027      	b.n	80063b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800638e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e02d      	b.n	8006430 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	; 0x24
 80063e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0201 	bic.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f84f 	bl	80064b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e02d      	b.n	80064ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	; 0x24
 800645c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f811 	bl	80064b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d108      	bne.n	80064d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064d4:	e031      	b.n	800653a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064d6:	2310      	movs	r3, #16
 80064d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064da:	2310      	movs	r3, #16
 80064dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	0e5b      	lsrs	r3, r3, #25
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	0f5b      	lsrs	r3, r3, #29
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	7b3a      	ldrb	r2, [r7, #12]
 8006502:	4911      	ldr	r1, [pc, #68]	; (8006548 <UARTEx_SetNbDataToProcess+0x94>)
 8006504:	5c8a      	ldrb	r2, [r1, r2]
 8006506:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800650a:	7b3a      	ldrb	r2, [r7, #12]
 800650c:	490f      	ldr	r1, [pc, #60]	; (800654c <UARTEx_SetNbDataToProcess+0x98>)
 800650e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006510:	fb93 f3f2 	sdiv	r3, r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	7b7a      	ldrb	r2, [r7, #13]
 8006520:	4909      	ldr	r1, [pc, #36]	; (8006548 <UARTEx_SetNbDataToProcess+0x94>)
 8006522:	5c8a      	ldrb	r2, [r1, r2]
 8006524:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006528:	7b7a      	ldrb	r2, [r7, #13]
 800652a:	4908      	ldr	r1, [pc, #32]	; (800654c <UARTEx_SetNbDataToProcess+0x98>)
 800652c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800652e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	08009064 	.word	0x08009064
 800654c:	0800906c 	.word	0x0800906c

08006550 <__errno>:
 8006550:	4b01      	ldr	r3, [pc, #4]	; (8006558 <__errno+0x8>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	24000010 	.word	0x24000010

0800655c <__libc_init_array>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4d0d      	ldr	r5, [pc, #52]	; (8006594 <__libc_init_array+0x38>)
 8006560:	4c0d      	ldr	r4, [pc, #52]	; (8006598 <__libc_init_array+0x3c>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	2600      	movs	r6, #0
 8006568:	42a6      	cmp	r6, r4
 800656a:	d109      	bne.n	8006580 <__libc_init_array+0x24>
 800656c:	4d0b      	ldr	r5, [pc, #44]	; (800659c <__libc_init_array+0x40>)
 800656e:	4c0c      	ldr	r4, [pc, #48]	; (80065a0 <__libc_init_array+0x44>)
 8006570:	f002 fd1c 	bl	8008fac <_init>
 8006574:	1b64      	subs	r4, r4, r5
 8006576:	10a4      	asrs	r4, r4, #2
 8006578:	2600      	movs	r6, #0
 800657a:	42a6      	cmp	r6, r4
 800657c:	d105      	bne.n	800658a <__libc_init_array+0x2e>
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	f855 3b04 	ldr.w	r3, [r5], #4
 8006584:	4798      	blx	r3
 8006586:	3601      	adds	r6, #1
 8006588:	e7ee      	b.n	8006568 <__libc_init_array+0xc>
 800658a:	f855 3b04 	ldr.w	r3, [r5], #4
 800658e:	4798      	blx	r3
 8006590:	3601      	adds	r6, #1
 8006592:	e7f2      	b.n	800657a <__libc_init_array+0x1e>
 8006594:	08009454 	.word	0x08009454
 8006598:	08009454 	.word	0x08009454
 800659c:	08009454 	.word	0x08009454
 80065a0:	08009458 	.word	0x08009458

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <__cvt>:
 80065b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b6:	ed2d 8b02 	vpush	{d8}
 80065ba:	eeb0 8b40 	vmov.f64	d8, d0
 80065be:	b085      	sub	sp, #20
 80065c0:	4617      	mov	r7, r2
 80065c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065c6:	ee18 2a90 	vmov	r2, s17
 80065ca:	f025 0520 	bic.w	r5, r5, #32
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	bfb6      	itet	lt
 80065d2:	222d      	movlt	r2, #45	; 0x2d
 80065d4:	2200      	movge	r2, #0
 80065d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80065da:	2d46      	cmp	r5, #70	; 0x46
 80065dc:	460c      	mov	r4, r1
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	d004      	beq.n	80065ec <__cvt+0x38>
 80065e2:	2d45      	cmp	r5, #69	; 0x45
 80065e4:	d100      	bne.n	80065e8 <__cvt+0x34>
 80065e6:	3401      	adds	r4, #1
 80065e8:	2102      	movs	r1, #2
 80065ea:	e000      	b.n	80065ee <__cvt+0x3a>
 80065ec:	2103      	movs	r1, #3
 80065ee:	ab03      	add	r3, sp, #12
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	ab02      	add	r3, sp, #8
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4622      	mov	r2, r4
 80065f8:	4633      	mov	r3, r6
 80065fa:	eeb0 0b48 	vmov.f64	d0, d8
 80065fe:	f000 fdf7 	bl	80071f0 <_dtoa_r>
 8006602:	2d47      	cmp	r5, #71	; 0x47
 8006604:	d101      	bne.n	800660a <__cvt+0x56>
 8006606:	07fb      	lsls	r3, r7, #31
 8006608:	d51a      	bpl.n	8006640 <__cvt+0x8c>
 800660a:	2d46      	cmp	r5, #70	; 0x46
 800660c:	eb00 0204 	add.w	r2, r0, r4
 8006610:	d10c      	bne.n	800662c <__cvt+0x78>
 8006612:	7803      	ldrb	r3, [r0, #0]
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d107      	bne.n	8006628 <__cvt+0x74>
 8006618:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006620:	bf1c      	itt	ne
 8006622:	f1c4 0401 	rsbne	r4, r4, #1
 8006626:	6034      	strne	r4, [r6, #0]
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	441a      	add	r2, r3
 800662c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006634:	bf08      	it	eq
 8006636:	9203      	streq	r2, [sp, #12]
 8006638:	2130      	movs	r1, #48	; 0x30
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	4293      	cmp	r3, r2
 800663e:	d307      	bcc.n	8006650 <__cvt+0x9c>
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006644:	1a1b      	subs	r3, r3, r0
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	b005      	add	sp, #20
 800664a:	ecbd 8b02 	vpop	{d8}
 800664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006650:	1c5c      	adds	r4, r3, #1
 8006652:	9403      	str	r4, [sp, #12]
 8006654:	7019      	strb	r1, [r3, #0]
 8006656:	e7f0      	b.n	800663a <__cvt+0x86>

08006658 <__exponent>:
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	4603      	mov	r3, r0
 800665c:	2900      	cmp	r1, #0
 800665e:	bfb8      	it	lt
 8006660:	4249      	neglt	r1, r1
 8006662:	f803 2b02 	strb.w	r2, [r3], #2
 8006666:	bfb4      	ite	lt
 8006668:	222d      	movlt	r2, #45	; 0x2d
 800666a:	222b      	movge	r2, #43	; 0x2b
 800666c:	2909      	cmp	r1, #9
 800666e:	7042      	strb	r2, [r0, #1]
 8006670:	dd2a      	ble.n	80066c8 <__exponent+0x70>
 8006672:	f10d 0407 	add.w	r4, sp, #7
 8006676:	46a4      	mov	ip, r4
 8006678:	270a      	movs	r7, #10
 800667a:	46a6      	mov	lr, r4
 800667c:	460a      	mov	r2, r1
 800667e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006682:	fb07 1516 	mls	r5, r7, r6, r1
 8006686:	3530      	adds	r5, #48	; 0x30
 8006688:	2a63      	cmp	r2, #99	; 0x63
 800668a:	f104 34ff 	add.w	r4, r4, #4294967295
 800668e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006692:	4631      	mov	r1, r6
 8006694:	dcf1      	bgt.n	800667a <__exponent+0x22>
 8006696:	3130      	adds	r1, #48	; 0x30
 8006698:	f1ae 0502 	sub.w	r5, lr, #2
 800669c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066a0:	1c44      	adds	r4, r0, #1
 80066a2:	4629      	mov	r1, r5
 80066a4:	4561      	cmp	r1, ip
 80066a6:	d30a      	bcc.n	80066be <__exponent+0x66>
 80066a8:	f10d 0209 	add.w	r2, sp, #9
 80066ac:	eba2 020e 	sub.w	r2, r2, lr
 80066b0:	4565      	cmp	r5, ip
 80066b2:	bf88      	it	hi
 80066b4:	2200      	movhi	r2, #0
 80066b6:	4413      	add	r3, r2
 80066b8:	1a18      	subs	r0, r3, r0
 80066ba:	b003      	add	sp, #12
 80066bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066c6:	e7ed      	b.n	80066a4 <__exponent+0x4c>
 80066c8:	2330      	movs	r3, #48	; 0x30
 80066ca:	3130      	adds	r1, #48	; 0x30
 80066cc:	7083      	strb	r3, [r0, #2]
 80066ce:	70c1      	strb	r1, [r0, #3]
 80066d0:	1d03      	adds	r3, r0, #4
 80066d2:	e7f1      	b.n	80066b8 <__exponent+0x60>
 80066d4:	0000      	movs	r0, r0
	...

080066d8 <_printf_float>:
 80066d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	b08b      	sub	sp, #44	; 0x2c
 80066de:	460c      	mov	r4, r1
 80066e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80066e4:	4616      	mov	r6, r2
 80066e6:	461f      	mov	r7, r3
 80066e8:	4605      	mov	r5, r0
 80066ea:	f001 fca7 	bl	800803c <_localeconv_r>
 80066ee:	f8d0 b000 	ldr.w	fp, [r0]
 80066f2:	4658      	mov	r0, fp
 80066f4:	f7f9 fdf4 	bl	80002e0 <strlen>
 80066f8:	2300      	movs	r3, #0
 80066fa:	9308      	str	r3, [sp, #32]
 80066fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006700:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	3307      	adds	r3, #7
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	f103 0108 	add.w	r1, r3, #8
 8006710:	f8c8 1000 	str.w	r1, [r8]
 8006714:	4682      	mov	sl, r0
 8006716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800671a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800671e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006980 <_printf_float+0x2a8>
 8006722:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006726:	eeb0 6bc0 	vabs.f64	d6, d0
 800672a:	eeb4 6b47 	vcmp.f64	d6, d7
 800672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006732:	dd24      	ble.n	800677e <_printf_float+0xa6>
 8006734:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	d502      	bpl.n	8006744 <_printf_float+0x6c>
 800673e:	232d      	movs	r3, #45	; 0x2d
 8006740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006744:	4b90      	ldr	r3, [pc, #576]	; (8006988 <_printf_float+0x2b0>)
 8006746:	4891      	ldr	r0, [pc, #580]	; (800698c <_printf_float+0x2b4>)
 8006748:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800674c:	bf94      	ite	ls
 800674e:	4698      	movls	r8, r3
 8006750:	4680      	movhi	r8, r0
 8006752:	2303      	movs	r3, #3
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	2300      	movs	r3, #0
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	9700      	str	r7, [sp, #0]
 8006762:	4633      	mov	r3, r6
 8006764:	aa09      	add	r2, sp, #36	; 0x24
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f9d3 	bl	8006b14 <_printf_common>
 800676e:	3001      	adds	r0, #1
 8006770:	f040 808a 	bne.w	8006888 <_printf_float+0x1b0>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b00b      	add	sp, #44	; 0x2c
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006786:	d709      	bvc.n	800679c <_printf_float+0xc4>
 8006788:	ee10 3a90 	vmov	r3, s1
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbc      	itt	lt
 8006790:	232d      	movlt	r3, #45	; 0x2d
 8006792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006796:	487e      	ldr	r0, [pc, #504]	; (8006990 <_printf_float+0x2b8>)
 8006798:	4b7e      	ldr	r3, [pc, #504]	; (8006994 <_printf_float+0x2bc>)
 800679a:	e7d5      	b.n	8006748 <_printf_float+0x70>
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067a2:	9104      	str	r1, [sp, #16]
 80067a4:	1c59      	adds	r1, r3, #1
 80067a6:	d13c      	bne.n	8006822 <_printf_float+0x14a>
 80067a8:	2306      	movs	r3, #6
 80067aa:	6063      	str	r3, [r4, #4]
 80067ac:	2300      	movs	r3, #0
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	ab08      	add	r3, sp, #32
 80067b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80067b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ba:	ab07      	add	r3, sp, #28
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	f10d 031b 	add.w	r3, sp, #27
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7ff fef4 	bl	80065b4 <__cvt>
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	9907      	ldr	r1, [sp, #28]
 80067d0:	2b47      	cmp	r3, #71	; 0x47
 80067d2:	4680      	mov	r8, r0
 80067d4:	d108      	bne.n	80067e8 <_printf_float+0x110>
 80067d6:	1cc8      	adds	r0, r1, #3
 80067d8:	db02      	blt.n	80067e0 <_printf_float+0x108>
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	4299      	cmp	r1, r3
 80067de:	dd41      	ble.n	8006864 <_printf_float+0x18c>
 80067e0:	f1a9 0902 	sub.w	r9, r9, #2
 80067e4:	fa5f f989 	uxtb.w	r9, r9
 80067e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067ec:	d820      	bhi.n	8006830 <_printf_float+0x158>
 80067ee:	3901      	subs	r1, #1
 80067f0:	464a      	mov	r2, r9
 80067f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067f6:	9107      	str	r1, [sp, #28]
 80067f8:	f7ff ff2e 	bl	8006658 <__exponent>
 80067fc:	9a08      	ldr	r2, [sp, #32]
 80067fe:	9004      	str	r0, [sp, #16]
 8006800:	1813      	adds	r3, r2, r0
 8006802:	2a01      	cmp	r2, #1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	dc02      	bgt.n	800680e <_printf_float+0x136>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	07d2      	lsls	r2, r2, #31
 800680c:	d501      	bpl.n	8006812 <_printf_float+0x13a>
 800680e:	3301      	adds	r3, #1
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0a2      	beq.n	8006760 <_printf_float+0x88>
 800681a:	232d      	movs	r3, #45	; 0x2d
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006820:	e79e      	b.n	8006760 <_printf_float+0x88>
 8006822:	9904      	ldr	r1, [sp, #16]
 8006824:	2947      	cmp	r1, #71	; 0x47
 8006826:	d1c1      	bne.n	80067ac <_printf_float+0xd4>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1bf      	bne.n	80067ac <_printf_float+0xd4>
 800682c:	2301      	movs	r3, #1
 800682e:	e7bc      	b.n	80067aa <_printf_float+0xd2>
 8006830:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006834:	d118      	bne.n	8006868 <_printf_float+0x190>
 8006836:	2900      	cmp	r1, #0
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	dd0b      	ble.n	8006854 <_printf_float+0x17c>
 800683c:	6121      	str	r1, [r4, #16]
 800683e:	b913      	cbnz	r3, 8006846 <_printf_float+0x16e>
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	07d0      	lsls	r0, r2, #31
 8006844:	d502      	bpl.n	800684c <_printf_float+0x174>
 8006846:	3301      	adds	r3, #1
 8006848:	440b      	add	r3, r1
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	2300      	movs	r3, #0
 800684e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	e7de      	b.n	8006812 <_printf_float+0x13a>
 8006854:	b913      	cbnz	r3, 800685c <_printf_float+0x184>
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	07d2      	lsls	r2, r2, #31
 800685a:	d501      	bpl.n	8006860 <_printf_float+0x188>
 800685c:	3302      	adds	r3, #2
 800685e:	e7f4      	b.n	800684a <_printf_float+0x172>
 8006860:	2301      	movs	r3, #1
 8006862:	e7f2      	b.n	800684a <_printf_float+0x172>
 8006864:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	4299      	cmp	r1, r3
 800686c:	db05      	blt.n	800687a <_printf_float+0x1a2>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6121      	str	r1, [r4, #16]
 8006872:	07d8      	lsls	r0, r3, #31
 8006874:	d5ea      	bpl.n	800684c <_printf_float+0x174>
 8006876:	1c4b      	adds	r3, r1, #1
 8006878:	e7e7      	b.n	800684a <_printf_float+0x172>
 800687a:	2900      	cmp	r1, #0
 800687c:	bfd4      	ite	le
 800687e:	f1c1 0202 	rsble	r2, r1, #2
 8006882:	2201      	movgt	r2, #1
 8006884:	4413      	add	r3, r2
 8006886:	e7e0      	b.n	800684a <_printf_float+0x172>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	055a      	lsls	r2, r3, #21
 800688c:	d407      	bmi.n	800689e <_printf_float+0x1c6>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	4642      	mov	r2, r8
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d12a      	bne.n	80068f2 <_printf_float+0x21a>
 800689c:	e76a      	b.n	8006774 <_printf_float+0x9c>
 800689e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068a2:	f240 80e2 	bls.w	8006a6a <_printf_float+0x392>
 80068a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80068aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	d133      	bne.n	800691c <_printf_float+0x244>
 80068b4:	4a38      	ldr	r2, [pc, #224]	; (8006998 <_printf_float+0x2c0>)
 80068b6:	2301      	movs	r3, #1
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af58 	beq.w	8006774 <_printf_float+0x9c>
 80068c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	db02      	blt.n	80068d2 <_printf_float+0x1fa>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	07d8      	lsls	r0, r3, #31
 80068d0:	d50f      	bpl.n	80068f2 <_printf_float+0x21a>
 80068d2:	4653      	mov	r3, sl
 80068d4:	465a      	mov	r2, fp
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f af49 	beq.w	8006774 <_printf_float+0x9c>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	f104 091a 	add.w	r9, r4, #26
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4543      	cmp	r3, r8
 80068f0:	dc09      	bgt.n	8006906 <_printf_float+0x22e>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	079b      	lsls	r3, r3, #30
 80068f6:	f100 8108 	bmi.w	8006b0a <_printf_float+0x432>
 80068fa:	68e0      	ldr	r0, [r4, #12]
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	4298      	cmp	r0, r3
 8006900:	bfb8      	it	lt
 8006902:	4618      	movlt	r0, r3
 8006904:	e738      	b.n	8006778 <_printf_float+0xa0>
 8006906:	2301      	movs	r3, #1
 8006908:	464a      	mov	r2, r9
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f af2f 	beq.w	8006774 <_printf_float+0x9c>
 8006916:	f108 0801 	add.w	r8, r8, #1
 800691a:	e7e6      	b.n	80068ea <_printf_float+0x212>
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dc3c      	bgt.n	800699c <_printf_float+0x2c4>
 8006922:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <_printf_float+0x2c0>)
 8006924:	2301      	movs	r3, #1
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f af21 	beq.w	8006774 <_printf_float+0x9c>
 8006932:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006936:	4313      	orrs	r3, r2
 8006938:	d102      	bne.n	8006940 <_printf_float+0x268>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d5d8      	bpl.n	80068f2 <_printf_float+0x21a>
 8006940:	4653      	mov	r3, sl
 8006942:	465a      	mov	r2, fp
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af12 	beq.w	8006774 <_printf_float+0x9c>
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	f104 0a1a 	add.w	sl, r4, #26
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	425b      	negs	r3, r3
 800695c:	454b      	cmp	r3, r9
 800695e:	dc01      	bgt.n	8006964 <_printf_float+0x28c>
 8006960:	9b08      	ldr	r3, [sp, #32]
 8006962:	e795      	b.n	8006890 <_printf_float+0x1b8>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af00 	beq.w	8006774 <_printf_float+0x9c>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	e7ee      	b.n	8006958 <_printf_float+0x280>
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w
 8006980:	ffffffff 	.word	0xffffffff
 8006984:	7fefffff 	.word	0x7fefffff
 8006988:	08009078 	.word	0x08009078
 800698c:	0800907c 	.word	0x0800907c
 8006990:	08009084 	.word	0x08009084
 8006994:	08009080 	.word	0x08009080
 8006998:	08009088 	.word	0x08009088
 800699c:	9a08      	ldr	r2, [sp, #32]
 800699e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a0:	429a      	cmp	r2, r3
 80069a2:	bfa8      	it	ge
 80069a4:	461a      	movge	r2, r3
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	4691      	mov	r9, r2
 80069aa:	dc38      	bgt.n	8006a1e <_printf_float+0x346>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069b4:	f104 021a 	add.w	r2, r4, #26
 80069b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ba:	9905      	ldr	r1, [sp, #20]
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	eba3 0309 	sub.w	r3, r3, r9
 80069c2:	428b      	cmp	r3, r1
 80069c4:	dc33      	bgt.n	8006a2e <_printf_float+0x356>
 80069c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	db3c      	blt.n	8006a48 <_printf_float+0x370>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	07da      	lsls	r2, r3, #31
 80069d2:	d439      	bmi.n	8006a48 <_printf_float+0x370>
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	9a04      	ldr	r2, [sp, #16]
 80069d8:	9907      	ldr	r1, [sp, #28]
 80069da:	1a9a      	subs	r2, r3, r2
 80069dc:	eba3 0901 	sub.w	r9, r3, r1
 80069e0:	4591      	cmp	r9, r2
 80069e2:	bfa8      	it	ge
 80069e4:	4691      	movge	r9, r2
 80069e6:	f1b9 0f00 	cmp.w	r9, #0
 80069ea:	dc35      	bgt.n	8006a58 <_printf_float+0x380>
 80069ec:	f04f 0800 	mov.w	r8, #0
 80069f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f4:	f104 0a1a 	add.w	sl, r4, #26
 80069f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	eba3 0309 	sub.w	r3, r3, r9
 8006a02:	4543      	cmp	r3, r8
 8006a04:	f77f af75 	ble.w	80068f2 <_printf_float+0x21a>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f aeae 	beq.w	8006774 <_printf_float+0x9c>
 8006a18:	f108 0801 	add.w	r8, r8, #1
 8006a1c:	e7ec      	b.n	80069f8 <_printf_float+0x320>
 8006a1e:	4613      	mov	r3, r2
 8006a20:	4631      	mov	r1, r6
 8006a22:	4642      	mov	r2, r8
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d1bf      	bne.n	80069ac <_printf_float+0x2d4>
 8006a2c:	e6a2      	b.n	8006774 <_printf_float+0x9c>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	9204      	str	r2, [sp, #16]
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae9b 	beq.w	8006774 <_printf_float+0x9c>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	9a04      	ldr	r2, [sp, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	9305      	str	r3, [sp, #20]
 8006a46:	e7b7      	b.n	80069b8 <_printf_float+0x2e0>
 8006a48:	4653      	mov	r3, sl
 8006a4a:	465a      	mov	r2, fp
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	d1be      	bne.n	80069d4 <_printf_float+0x2fc>
 8006a56:	e68d      	b.n	8006774 <_printf_float+0x9c>
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	4442      	add	r2, r8
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1c1      	bne.n	80069ec <_printf_float+0x314>
 8006a68:	e684      	b.n	8006774 <_printf_float+0x9c>
 8006a6a:	9a08      	ldr	r2, [sp, #32]
 8006a6c:	2a01      	cmp	r2, #1
 8006a6e:	dc01      	bgt.n	8006a74 <_printf_float+0x39c>
 8006a70:	07db      	lsls	r3, r3, #31
 8006a72:	d537      	bpl.n	8006ae4 <_printf_float+0x40c>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4642      	mov	r2, r8
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f ae78 	beq.w	8006774 <_printf_float+0x9c>
 8006a84:	4653      	mov	r3, sl
 8006a86:	465a      	mov	r2, fp
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	f43f ae70 	beq.w	8006774 <_printf_float+0x9c>
 8006a94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa0:	d01b      	beq.n	8006ada <_printf_float+0x402>
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	f108 0201 	add.w	r2, r8, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d10e      	bne.n	8006ad2 <_printf_float+0x3fa>
 8006ab4:	e65e      	b.n	8006774 <_printf_float+0x9c>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4631      	mov	r1, r6
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae57 	beq.w	8006774 <_printf_float+0x9c>
 8006ac6:	f108 0801 	add.w	r8, r8, #1
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4543      	cmp	r3, r8
 8006ad0:	dcf1      	bgt.n	8006ab6 <_printf_float+0x3de>
 8006ad2:	9b04      	ldr	r3, [sp, #16]
 8006ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ad8:	e6db      	b.n	8006892 <_printf_float+0x1ba>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	f104 091a 	add.w	r9, r4, #26
 8006ae2:	e7f2      	b.n	8006aca <_printf_float+0x3f2>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	e7df      	b.n	8006aaa <_printf_float+0x3d2>
 8006aea:	2301      	movs	r3, #1
 8006aec:	464a      	mov	r2, r9
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	f43f ae3d 	beq.w	8006774 <_printf_float+0x9c>
 8006afa:	f108 0801 	add.w	r8, r8, #1
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	4543      	cmp	r3, r8
 8006b06:	dcf0      	bgt.n	8006aea <_printf_float+0x412>
 8006b08:	e6f7      	b.n	80068fa <_printf_float+0x222>
 8006b0a:	f04f 0800 	mov.w	r8, #0
 8006b0e:	f104 0919 	add.w	r9, r4, #25
 8006b12:	e7f4      	b.n	8006afe <_printf_float+0x426>

08006b14 <_printf_common>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	4616      	mov	r6, r2
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	688a      	ldr	r2, [r1, #8]
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bfb8      	it	lt
 8006b28:	4613      	movlt	r3, r2
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b30:	4607      	mov	r7, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b10a      	cbz	r2, 8006b3a <_printf_common+0x26>
 8006b36:	3301      	adds	r3, #1
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	bf42      	ittt	mi
 8006b40:	6833      	ldrmi	r3, [r6, #0]
 8006b42:	3302      	addmi	r3, #2
 8006b44:	6033      	strmi	r3, [r6, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	f015 0506 	ands.w	r5, r5, #6
 8006b4c:	d106      	bne.n	8006b5c <_printf_common+0x48>
 8006b4e:	f104 0a19 	add.w	sl, r4, #25
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc26      	bgt.n	8006baa <_printf_common+0x96>
 8006b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b60:	1e13      	subs	r3, r2, #0
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	bf18      	it	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	0692      	lsls	r2, r2, #26
 8006b6a:	d42b      	bmi.n	8006bc4 <_printf_common+0xb0>
 8006b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b70:	4649      	mov	r1, r9
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	3001      	adds	r0, #1
 8006b78:	d01e      	beq.n	8006bb8 <_printf_common+0xa4>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	68e5      	ldr	r5, [r4, #12]
 8006b7e:	6832      	ldr	r2, [r6, #0]
 8006b80:	f003 0306 	and.w	r3, r3, #6
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	bf08      	it	eq
 8006b88:	1aad      	subeq	r5, r5, r2
 8006b8a:	68a3      	ldr	r3, [r4, #8]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	bf0c      	ite	eq
 8006b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b94:	2500      	movne	r5, #0
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bfc4      	itt	gt
 8006b9a:	1a9b      	subgt	r3, r3, r2
 8006b9c:	18ed      	addgt	r5, r5, r3
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	341a      	adds	r4, #26
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	d11a      	bne.n	8006bdc <_printf_common+0xc8>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e008      	b.n	8006bbc <_printf_common+0xa8>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4652      	mov	r2, sl
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	47c0      	blx	r8
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d103      	bne.n	8006bc0 <_printf_common+0xac>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7c6      	b.n	8006b52 <_printf_common+0x3e>
 8006bc4:	18e1      	adds	r1, r4, r3
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	2030      	movs	r0, #48	; 0x30
 8006bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bce:	4422      	add	r2, r4
 8006bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd8:	3302      	adds	r3, #2
 8006bda:	e7c7      	b.n	8006b6c <_printf_common+0x58>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4622      	mov	r2, r4
 8006be0:	4649      	mov	r1, r9
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0e6      	beq.n	8006bb8 <_printf_common+0xa4>
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7d9      	b.n	8006ba2 <_printf_common+0x8e>
	...

08006bf0 <_printf_i>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	7e0f      	ldrb	r7, [r1, #24]
 8006bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf8:	2f78      	cmp	r7, #120	; 0x78
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	469a      	mov	sl, r3
 8006c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c06:	d807      	bhi.n	8006c18 <_printf_i+0x28>
 8006c08:	2f62      	cmp	r7, #98	; 0x62
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x32>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f000 80d8 	beq.w	8006dc2 <_printf_i+0x1d2>
 8006c12:	2f58      	cmp	r7, #88	; 0x58
 8006c14:	f000 80a3 	beq.w	8006d5e <_printf_i+0x16e>
 8006c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c20:	e03a      	b.n	8006c98 <_printf_i+0xa8>
 8006c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c26:	2b15      	cmp	r3, #21
 8006c28:	d8f6      	bhi.n	8006c18 <_printf_i+0x28>
 8006c2a:	a101      	add	r1, pc, #4	; (adr r1, 8006c30 <_printf_i+0x40>)
 8006c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c19 	.word	0x08006c19
 8006c3c:	08006c19 	.word	0x08006c19
 8006c40:	08006c19 	.word	0x08006c19
 8006c44:	08006c19 	.word	0x08006c19
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c19 	.word	0x08006c19
 8006c50:	08006c19 	.word	0x08006c19
 8006c54:	08006c19 	.word	0x08006c19
 8006c58:	08006c19 	.word	0x08006c19
 8006c5c:	08006da9 	.word	0x08006da9
 8006c60:	08006ccd 	.word	0x08006ccd
 8006c64:	08006d8b 	.word	0x08006d8b
 8006c68:	08006c19 	.word	0x08006c19
 8006c6c:	08006c19 	.word	0x08006c19
 8006c70:	08006dcb 	.word	0x08006dcb
 8006c74:	08006c19 	.word	0x08006c19
 8006c78:	08006ccd 	.word	0x08006ccd
 8006c7c:	08006c19 	.word	0x08006c19
 8006c80:	08006c19 	.word	0x08006c19
 8006c84:	08006d93 	.word	0x08006d93
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0a3      	b.n	8006de4 <_printf_i+0x1f4>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	6829      	ldr	r1, [r5, #0]
 8006ca0:	0606      	lsls	r6, r0, #24
 8006ca2:	f101 0304 	add.w	r3, r1, #4
 8006ca6:	d50a      	bpl.n	8006cbe <_printf_i+0xce>
 8006ca8:	680e      	ldr	r6, [r1, #0]
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	da03      	bge.n	8006cb8 <_printf_i+0xc8>
 8006cb0:	232d      	movs	r3, #45	; 0x2d
 8006cb2:	4276      	negs	r6, r6
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb8:	485e      	ldr	r0, [pc, #376]	; (8006e34 <_printf_i+0x244>)
 8006cba:	230a      	movs	r3, #10
 8006cbc:	e019      	b.n	8006cf2 <_printf_i+0x102>
 8006cbe:	680e      	ldr	r6, [r1, #0]
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cc6:	bf18      	it	ne
 8006cc8:	b236      	sxthne	r6, r6
 8006cca:	e7ef      	b.n	8006cac <_printf_i+0xbc>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	1d19      	adds	r1, r3, #4
 8006cd2:	6029      	str	r1, [r5, #0]
 8006cd4:	0601      	lsls	r1, r0, #24
 8006cd6:	d501      	bpl.n	8006cdc <_printf_i+0xec>
 8006cd8:	681e      	ldr	r6, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <_printf_i+0xf2>
 8006cdc:	0646      	lsls	r6, r0, #25
 8006cde:	d5fb      	bpl.n	8006cd8 <_printf_i+0xe8>
 8006ce0:	881e      	ldrh	r6, [r3, #0]
 8006ce2:	4854      	ldr	r0, [pc, #336]	; (8006e34 <_printf_i+0x244>)
 8006ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ce6:	bf0c      	ite	eq
 8006ce8:	2308      	moveq	r3, #8
 8006cea:	230a      	movne	r3, #10
 8006cec:	2100      	movs	r1, #0
 8006cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cf2:	6865      	ldr	r5, [r4, #4]
 8006cf4:	60a5      	str	r5, [r4, #8]
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	bfa2      	ittt	ge
 8006cfa:	6821      	ldrge	r1, [r4, #0]
 8006cfc:	f021 0104 	bicge.w	r1, r1, #4
 8006d00:	6021      	strge	r1, [r4, #0]
 8006d02:	b90e      	cbnz	r6, 8006d08 <_printf_i+0x118>
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d04d      	beq.n	8006da4 <_printf_i+0x1b4>
 8006d08:	4615      	mov	r5, r2
 8006d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d12:	5dc7      	ldrb	r7, [r0, r7]
 8006d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d18:	4637      	mov	r7, r6
 8006d1a:	42bb      	cmp	r3, r7
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	d9f4      	bls.n	8006d0a <_printf_i+0x11a>
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d10b      	bne.n	8006d3c <_printf_i+0x14c>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07de      	lsls	r6, r3, #31
 8006d28:	d508      	bpl.n	8006d3c <_printf_i+0x14c>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	4299      	cmp	r1, r3
 8006d30:	bfde      	ittt	le
 8006d32:	2330      	movle	r3, #48	; 0x30
 8006d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d3c:	1b52      	subs	r2, r2, r5
 8006d3e:	6122      	str	r2, [r4, #16]
 8006d40:	f8cd a000 	str.w	sl, [sp]
 8006d44:	464b      	mov	r3, r9
 8006d46:	aa03      	add	r2, sp, #12
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7ff fee2 	bl	8006b14 <_printf_common>
 8006d50:	3001      	adds	r0, #1
 8006d52:	d14c      	bne.n	8006dee <_printf_i+0x1fe>
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	b004      	add	sp, #16
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	4835      	ldr	r0, [pc, #212]	; (8006e34 <_printf_i+0x244>)
 8006d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d6c:	6029      	str	r1, [r5, #0]
 8006d6e:	061d      	lsls	r5, r3, #24
 8006d70:	d514      	bpl.n	8006d9c <_printf_i+0x1ac>
 8006d72:	07df      	lsls	r7, r3, #31
 8006d74:	bf44      	itt	mi
 8006d76:	f043 0320 	orrmi.w	r3, r3, #32
 8006d7a:	6023      	strmi	r3, [r4, #0]
 8006d7c:	b91e      	cbnz	r6, 8006d86 <_printf_i+0x196>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f023 0320 	bic.w	r3, r3, #32
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	2310      	movs	r3, #16
 8006d88:	e7b0      	b.n	8006cec <_printf_i+0xfc>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f043 0320 	orr.w	r3, r3, #32
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	2378      	movs	r3, #120	; 0x78
 8006d94:	4828      	ldr	r0, [pc, #160]	; (8006e38 <_printf_i+0x248>)
 8006d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d9a:	e7e3      	b.n	8006d64 <_printf_i+0x174>
 8006d9c:	0659      	lsls	r1, r3, #25
 8006d9e:	bf48      	it	mi
 8006da0:	b2b6      	uxthmi	r6, r6
 8006da2:	e7e6      	b.n	8006d72 <_printf_i+0x182>
 8006da4:	4615      	mov	r5, r2
 8006da6:	e7bb      	b.n	8006d20 <_printf_i+0x130>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	6826      	ldr	r6, [r4, #0]
 8006dac:	6961      	ldr	r1, [r4, #20]
 8006dae:	1d18      	adds	r0, r3, #4
 8006db0:	6028      	str	r0, [r5, #0]
 8006db2:	0635      	lsls	r5, r6, #24
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	d501      	bpl.n	8006dbc <_printf_i+0x1cc>
 8006db8:	6019      	str	r1, [r3, #0]
 8006dba:	e002      	b.n	8006dc2 <_printf_i+0x1d2>
 8006dbc:	0670      	lsls	r0, r6, #25
 8006dbe:	d5fb      	bpl.n	8006db8 <_printf_i+0x1c8>
 8006dc0:	8019      	strh	r1, [r3, #0]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	4615      	mov	r5, r2
 8006dc8:	e7ba      	b.n	8006d40 <_printf_i+0x150>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	602a      	str	r2, [r5, #0]
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7f9 fa8a 	bl	80002f0 <memchr>
 8006ddc:	b108      	cbz	r0, 8006de2 <_printf_i+0x1f2>
 8006dde:	1b40      	subs	r0, r0, r5
 8006de0:	6060      	str	r0, [r4, #4]
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	2300      	movs	r3, #0
 8006de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dec:	e7a8      	b.n	8006d40 <_printf_i+0x150>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	462a      	mov	r2, r5
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0ab      	beq.n	8006d54 <_printf_i+0x164>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	079b      	lsls	r3, r3, #30
 8006e00:	d413      	bmi.n	8006e2a <_printf_i+0x23a>
 8006e02:	68e0      	ldr	r0, [r4, #12]
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	4298      	cmp	r0, r3
 8006e08:	bfb8      	it	lt
 8006e0a:	4618      	movlt	r0, r3
 8006e0c:	e7a4      	b.n	8006d58 <_printf_i+0x168>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4632      	mov	r2, r6
 8006e12:	4649      	mov	r1, r9
 8006e14:	4640      	mov	r0, r8
 8006e16:	47d0      	blx	sl
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d09b      	beq.n	8006d54 <_printf_i+0x164>
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	68e3      	ldr	r3, [r4, #12]
 8006e20:	9903      	ldr	r1, [sp, #12]
 8006e22:	1a5b      	subs	r3, r3, r1
 8006e24:	42ab      	cmp	r3, r5
 8006e26:	dcf2      	bgt.n	8006e0e <_printf_i+0x21e>
 8006e28:	e7eb      	b.n	8006e02 <_printf_i+0x212>
 8006e2a:	2500      	movs	r5, #0
 8006e2c:	f104 0619 	add.w	r6, r4, #25
 8006e30:	e7f5      	b.n	8006e1e <_printf_i+0x22e>
 8006e32:	bf00      	nop
 8006e34:	0800908a 	.word	0x0800908a
 8006e38:	0800909b 	.word	0x0800909b

08006e3c <iprintf>:
 8006e3c:	b40f      	push	{r0, r1, r2, r3}
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <iprintf+0x2c>)
 8006e40:	b513      	push	{r0, r1, r4, lr}
 8006e42:	681c      	ldr	r4, [r3, #0]
 8006e44:	b124      	cbz	r4, 8006e50 <iprintf+0x14>
 8006e46:	69a3      	ldr	r3, [r4, #24]
 8006e48:	b913      	cbnz	r3, 8006e50 <iprintf+0x14>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f001 f858 	bl	8007f00 <__sinit>
 8006e50:	ab05      	add	r3, sp, #20
 8006e52:	9a04      	ldr	r2, [sp, #16]
 8006e54:	68a1      	ldr	r1, [r4, #8]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f001 fe15 	bl	8008a88 <_vfiprintf_r>
 8006e5e:	b002      	add	sp, #8
 8006e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr
 8006e68:	24000010 	.word	0x24000010

08006e6c <_puts_r>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	460e      	mov	r6, r1
 8006e70:	4605      	mov	r5, r0
 8006e72:	b118      	cbz	r0, 8006e7c <_puts_r+0x10>
 8006e74:	6983      	ldr	r3, [r0, #24]
 8006e76:	b90b      	cbnz	r3, 8006e7c <_puts_r+0x10>
 8006e78:	f001 f842 	bl	8007f00 <__sinit>
 8006e7c:	69ab      	ldr	r3, [r5, #24]
 8006e7e:	68ac      	ldr	r4, [r5, #8]
 8006e80:	b913      	cbnz	r3, 8006e88 <_puts_r+0x1c>
 8006e82:	4628      	mov	r0, r5
 8006e84:	f001 f83c 	bl	8007f00 <__sinit>
 8006e88:	4b2c      	ldr	r3, [pc, #176]	; (8006f3c <_puts_r+0xd0>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d120      	bne.n	8006ed0 <_puts_r+0x64>
 8006e8e:	686c      	ldr	r4, [r5, #4]
 8006e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e92:	07db      	lsls	r3, r3, #31
 8006e94:	d405      	bmi.n	8006ea2 <_puts_r+0x36>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	0598      	lsls	r0, r3, #22
 8006e9a:	d402      	bmi.n	8006ea2 <_puts_r+0x36>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9e:	f001 f8d2 	bl	8008046 <__retarget_lock_acquire_recursive>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	0719      	lsls	r1, r3, #28
 8006ea6:	d51d      	bpl.n	8006ee4 <_puts_r+0x78>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b1db      	cbz	r3, 8006ee4 <_puts_r+0x78>
 8006eac:	3e01      	subs	r6, #1
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	60a3      	str	r3, [r4, #8]
 8006eb8:	bb39      	cbnz	r1, 8006f0a <_puts_r+0x9e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da38      	bge.n	8006f30 <_puts_r+0xc4>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	210a      	movs	r1, #10
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 f848 	bl	8006f58 <__swbuf_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d011      	beq.n	8006ef0 <_puts_r+0x84>
 8006ecc:	250a      	movs	r5, #10
 8006ece:	e011      	b.n	8006ef4 <_puts_r+0x88>
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <_puts_r+0xd4>)
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d101      	bne.n	8006eda <_puts_r+0x6e>
 8006ed6:	68ac      	ldr	r4, [r5, #8]
 8006ed8:	e7da      	b.n	8006e90 <_puts_r+0x24>
 8006eda:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <_puts_r+0xd8>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	bf08      	it	eq
 8006ee0:	68ec      	ldreq	r4, [r5, #12]
 8006ee2:	e7d5      	b.n	8006e90 <_puts_r+0x24>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f888 	bl	8006ffc <__swsetup_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d0dd      	beq.n	8006eac <_puts_r+0x40>
 8006ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef6:	07da      	lsls	r2, r3, #31
 8006ef8:	d405      	bmi.n	8006f06 <_puts_r+0x9a>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	059b      	lsls	r3, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_puts_r+0x9a>
 8006f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f02:	f001 f8a1 	bl	8008048 <__retarget_lock_release_recursive>
 8006f06:	4628      	mov	r0, r5
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da04      	bge.n	8006f18 <_puts_r+0xac>
 8006f0e:	69a2      	ldr	r2, [r4, #24]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	dc06      	bgt.n	8006f22 <_puts_r+0xb6>
 8006f14:	290a      	cmp	r1, #10
 8006f16:	d004      	beq.n	8006f22 <_puts_r+0xb6>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	6022      	str	r2, [r4, #0]
 8006f1e:	7019      	strb	r1, [r3, #0]
 8006f20:	e7c5      	b.n	8006eae <_puts_r+0x42>
 8006f22:	4622      	mov	r2, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 f817 	bl	8006f58 <__swbuf_r>
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d1bf      	bne.n	8006eae <_puts_r+0x42>
 8006f2e:	e7df      	b.n	8006ef0 <_puts_r+0x84>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	250a      	movs	r5, #10
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	6022      	str	r2, [r4, #0]
 8006f38:	701d      	strb	r5, [r3, #0]
 8006f3a:	e7db      	b.n	8006ef4 <_puts_r+0x88>
 8006f3c:	0800915c 	.word	0x0800915c
 8006f40:	0800917c 	.word	0x0800917c
 8006f44:	0800913c 	.word	0x0800913c

08006f48 <puts>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <puts+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f7ff bf8d 	b.w	8006e6c <_puts_r>
 8006f52:	bf00      	nop
 8006f54:	24000010 	.word	0x24000010

08006f58 <__swbuf_r>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	460e      	mov	r6, r1
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	4605      	mov	r5, r0
 8006f60:	b118      	cbz	r0, 8006f6a <__swbuf_r+0x12>
 8006f62:	6983      	ldr	r3, [r0, #24]
 8006f64:	b90b      	cbnz	r3, 8006f6a <__swbuf_r+0x12>
 8006f66:	f000 ffcb 	bl	8007f00 <__sinit>
 8006f6a:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <__swbuf_r+0x98>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	d12b      	bne.n	8006fc8 <__swbuf_r+0x70>
 8006f70:	686c      	ldr	r4, [r5, #4]
 8006f72:	69a3      	ldr	r3, [r4, #24]
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	071a      	lsls	r2, r3, #28
 8006f7a:	d52f      	bpl.n	8006fdc <__swbuf_r+0x84>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b36b      	cbz	r3, 8006fdc <__swbuf_r+0x84>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	1ac0      	subs	r0, r0, r3
 8006f86:	6963      	ldr	r3, [r4, #20]
 8006f88:	b2f6      	uxtb	r6, r6
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	dc04      	bgt.n	8006f9a <__swbuf_r+0x42>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 ff20 	bl	8007dd8 <_fflush_r>
 8006f98:	bb30      	cbnz	r0, 8006fe8 <__swbuf_r+0x90>
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	60a3      	str	r3, [r4, #8]
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	6022      	str	r2, [r4, #0]
 8006fa6:	701e      	strb	r6, [r3, #0]
 8006fa8:	6963      	ldr	r3, [r4, #20]
 8006faa:	3001      	adds	r0, #1
 8006fac:	4283      	cmp	r3, r0
 8006fae:	d004      	beq.n	8006fba <__swbuf_r+0x62>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	d506      	bpl.n	8006fc4 <__swbuf_r+0x6c>
 8006fb6:	2e0a      	cmp	r6, #10
 8006fb8:	d104      	bne.n	8006fc4 <__swbuf_r+0x6c>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 ff0b 	bl	8007dd8 <_fflush_r>
 8006fc2:	b988      	cbnz	r0, 8006fe8 <__swbuf_r+0x90>
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <__swbuf_r+0x9c>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d101      	bne.n	8006fd2 <__swbuf_r+0x7a>
 8006fce:	68ac      	ldr	r4, [r5, #8]
 8006fd0:	e7cf      	b.n	8006f72 <__swbuf_r+0x1a>
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <__swbuf_r+0xa0>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	bf08      	it	eq
 8006fd8:	68ec      	ldreq	r4, [r5, #12]
 8006fda:	e7ca      	b.n	8006f72 <__swbuf_r+0x1a>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 f80c 	bl	8006ffc <__swsetup_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0cb      	beq.n	8006f80 <__swbuf_r+0x28>
 8006fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fec:	e7ea      	b.n	8006fc4 <__swbuf_r+0x6c>
 8006fee:	bf00      	nop
 8006ff0:	0800915c 	.word	0x0800915c
 8006ff4:	0800917c 	.word	0x0800917c
 8006ff8:	0800913c 	.word	0x0800913c

08006ffc <__swsetup_r>:
 8006ffc:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <__swsetup_r+0xcc>)
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	4606      	mov	r6, r0
 8007004:	460c      	mov	r4, r1
 8007006:	b125      	cbz	r5, 8007012 <__swsetup_r+0x16>
 8007008:	69ab      	ldr	r3, [r5, #24]
 800700a:	b913      	cbnz	r3, 8007012 <__swsetup_r+0x16>
 800700c:	4628      	mov	r0, r5
 800700e:	f000 ff77 	bl	8007f00 <__sinit>
 8007012:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <__swsetup_r+0xd0>)
 8007014:	429c      	cmp	r4, r3
 8007016:	d10f      	bne.n	8007038 <__swsetup_r+0x3c>
 8007018:	686c      	ldr	r4, [r5, #4]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d42c      	bmi.n	800707e <__swsetup_r+0x82>
 8007024:	06dd      	lsls	r5, r3, #27
 8007026:	d411      	bmi.n	800704c <__swsetup_r+0x50>
 8007028:	2309      	movs	r3, #9
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	f04f 30ff 	mov.w	r0, #4294967295
 8007036:	e03e      	b.n	80070b6 <__swsetup_r+0xba>
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <__swsetup_r+0xd4>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d101      	bne.n	8007042 <__swsetup_r+0x46>
 800703e:	68ac      	ldr	r4, [r5, #8]
 8007040:	e7eb      	b.n	800701a <__swsetup_r+0x1e>
 8007042:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <__swsetup_r+0xd8>)
 8007044:	429c      	cmp	r4, r3
 8007046:	bf08      	it	eq
 8007048:	68ec      	ldreq	r4, [r5, #12]
 800704a:	e7e6      	b.n	800701a <__swsetup_r+0x1e>
 800704c:	0758      	lsls	r0, r3, #29
 800704e:	d512      	bpl.n	8007076 <__swsetup_r+0x7a>
 8007050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007052:	b141      	cbz	r1, 8007066 <__swsetup_r+0x6a>
 8007054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007058:	4299      	cmp	r1, r3
 800705a:	d002      	beq.n	8007062 <__swsetup_r+0x66>
 800705c:	4630      	mov	r0, r6
 800705e:	f001 fc09 	bl	8008874 <_free_r>
 8007062:	2300      	movs	r3, #0
 8007064:	6363      	str	r3, [r4, #52]	; 0x34
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	2300      	movs	r3, #0
 8007070:	6063      	str	r3, [r4, #4]
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f043 0308 	orr.w	r3, r3, #8
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	b94b      	cbnz	r3, 8007096 <__swsetup_r+0x9a>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800708c:	d003      	beq.n	8007096 <__swsetup_r+0x9a>
 800708e:	4621      	mov	r1, r4
 8007090:	4630      	mov	r0, r6
 8007092:	f000 ffff 	bl	8008094 <__smakebuf_r>
 8007096:	89a0      	ldrh	r0, [r4, #12]
 8007098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800709c:	f010 0301 	ands.w	r3, r0, #1
 80070a0:	d00a      	beq.n	80070b8 <__swsetup_r+0xbc>
 80070a2:	2300      	movs	r3, #0
 80070a4:	60a3      	str	r3, [r4, #8]
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	425b      	negs	r3, r3
 80070aa:	61a3      	str	r3, [r4, #24]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	b943      	cbnz	r3, 80070c2 <__swsetup_r+0xc6>
 80070b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070b4:	d1ba      	bne.n	800702c <__swsetup_r+0x30>
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	0781      	lsls	r1, r0, #30
 80070ba:	bf58      	it	pl
 80070bc:	6963      	ldrpl	r3, [r4, #20]
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	e7f4      	b.n	80070ac <__swsetup_r+0xb0>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e7f7      	b.n	80070b6 <__swsetup_r+0xba>
 80070c6:	bf00      	nop
 80070c8:	24000010 	.word	0x24000010
 80070cc:	0800915c 	.word	0x0800915c
 80070d0:	0800917c 	.word	0x0800917c
 80070d4:	0800913c 	.word	0x0800913c

080070d8 <quorem>:
 80070d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	6903      	ldr	r3, [r0, #16]
 80070de:	690c      	ldr	r4, [r1, #16]
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	4607      	mov	r7, r0
 80070e4:	f2c0 8081 	blt.w	80071ea <quorem+0x112>
 80070e8:	3c01      	subs	r4, #1
 80070ea:	f101 0814 	add.w	r8, r1, #20
 80070ee:	f100 0514 	add.w	r5, r0, #20
 80070f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007100:	3301      	adds	r3, #1
 8007102:	429a      	cmp	r2, r3
 8007104:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007108:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800710c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007110:	d331      	bcc.n	8007176 <quorem+0x9e>
 8007112:	f04f 0e00 	mov.w	lr, #0
 8007116:	4640      	mov	r0, r8
 8007118:	46ac      	mov	ip, r5
 800711a:	46f2      	mov	sl, lr
 800711c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007120:	b293      	uxth	r3, r2
 8007122:	fb06 e303 	mla	r3, r6, r3, lr
 8007126:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800712a:	b29b      	uxth	r3, r3
 800712c:	ebaa 0303 	sub.w	r3, sl, r3
 8007130:	f8dc a000 	ldr.w	sl, [ip]
 8007134:	0c12      	lsrs	r2, r2, #16
 8007136:	fa13 f38a 	uxtah	r3, r3, sl
 800713a:	fb06 e202 	mla	r2, r6, r2, lr
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007146:	b292      	uxth	r2, r2
 8007148:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800714c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007150:	f8bd 3000 	ldrh.w	r3, [sp]
 8007154:	4581      	cmp	r9, r0
 8007156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800715a:	f84c 3b04 	str.w	r3, [ip], #4
 800715e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007162:	d2db      	bcs.n	800711c <quorem+0x44>
 8007164:	f855 300b 	ldr.w	r3, [r5, fp]
 8007168:	b92b      	cbnz	r3, 8007176 <quorem+0x9e>
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	3b04      	subs	r3, #4
 800716e:	429d      	cmp	r5, r3
 8007170:	461a      	mov	r2, r3
 8007172:	d32e      	bcc.n	80071d2 <quorem+0xfa>
 8007174:	613c      	str	r4, [r7, #16]
 8007176:	4638      	mov	r0, r7
 8007178:	f001 fa64 	bl	8008644 <__mcmp>
 800717c:	2800      	cmp	r0, #0
 800717e:	db24      	blt.n	80071ca <quorem+0xf2>
 8007180:	3601      	adds	r6, #1
 8007182:	4628      	mov	r0, r5
 8007184:	f04f 0c00 	mov.w	ip, #0
 8007188:	f858 2b04 	ldr.w	r2, [r8], #4
 800718c:	f8d0 e000 	ldr.w	lr, [r0]
 8007190:	b293      	uxth	r3, r2
 8007192:	ebac 0303 	sub.w	r3, ip, r3
 8007196:	0c12      	lsrs	r2, r2, #16
 8007198:	fa13 f38e 	uxtah	r3, r3, lr
 800719c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071aa:	45c1      	cmp	r9, r8
 80071ac:	f840 3b04 	str.w	r3, [r0], #4
 80071b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071b4:	d2e8      	bcs.n	8007188 <quorem+0xb0>
 80071b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071be:	b922      	cbnz	r2, 80071ca <quorem+0xf2>
 80071c0:	3b04      	subs	r3, #4
 80071c2:	429d      	cmp	r5, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	d30a      	bcc.n	80071de <quorem+0x106>
 80071c8:	613c      	str	r4, [r7, #16]
 80071ca:	4630      	mov	r0, r6
 80071cc:	b003      	add	sp, #12
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	d1cc      	bne.n	8007174 <quorem+0x9c>
 80071da:	3c01      	subs	r4, #1
 80071dc:	e7c7      	b.n	800716e <quorem+0x96>
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	3b04      	subs	r3, #4
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	d1f0      	bne.n	80071c8 <quorem+0xf0>
 80071e6:	3c01      	subs	r4, #1
 80071e8:	e7eb      	b.n	80071c2 <quorem+0xea>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e7ee      	b.n	80071cc <quorem+0xf4>
	...

080071f0 <_dtoa_r>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	ed2d 8b02 	vpush	{d8}
 80071f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071fa:	b091      	sub	sp, #68	; 0x44
 80071fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007200:	ec59 8b10 	vmov	r8, r9, d0
 8007204:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007206:	9106      	str	r1, [sp, #24]
 8007208:	4606      	mov	r6, r0
 800720a:	9208      	str	r2, [sp, #32]
 800720c:	930c      	str	r3, [sp, #48]	; 0x30
 800720e:	b975      	cbnz	r5, 800722e <_dtoa_r+0x3e>
 8007210:	2010      	movs	r0, #16
 8007212:	f000 ff7f 	bl	8008114 <malloc>
 8007216:	4602      	mov	r2, r0
 8007218:	6270      	str	r0, [r6, #36]	; 0x24
 800721a:	b920      	cbnz	r0, 8007226 <_dtoa_r+0x36>
 800721c:	4baa      	ldr	r3, [pc, #680]	; (80074c8 <_dtoa_r+0x2d8>)
 800721e:	21ea      	movs	r1, #234	; 0xea
 8007220:	48aa      	ldr	r0, [pc, #680]	; (80074cc <_dtoa_r+0x2dc>)
 8007222:	f001 fdc7 	bl	8008db4 <__assert_func>
 8007226:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800722a:	6005      	str	r5, [r0, #0]
 800722c:	60c5      	str	r5, [r0, #12]
 800722e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007230:	6819      	ldr	r1, [r3, #0]
 8007232:	b151      	cbz	r1, 800724a <_dtoa_r+0x5a>
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	604a      	str	r2, [r1, #4]
 8007238:	2301      	movs	r3, #1
 800723a:	4093      	lsls	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
 800723e:	4630      	mov	r0, r6
 8007240:	f000 ffbe 	bl	80081c0 <_Bfree>
 8007244:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	f1b9 0300 	subs.w	r3, r9, #0
 800724e:	bfbb      	ittet	lt
 8007250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007254:	9303      	strlt	r3, [sp, #12]
 8007256:	2300      	movge	r3, #0
 8007258:	2201      	movlt	r2, #1
 800725a:	bfac      	ite	ge
 800725c:	6023      	strge	r3, [r4, #0]
 800725e:	6022      	strlt	r2, [r4, #0]
 8007260:	4b9b      	ldr	r3, [pc, #620]	; (80074d0 <_dtoa_r+0x2e0>)
 8007262:	9c03      	ldr	r4, [sp, #12]
 8007264:	43a3      	bics	r3, r4
 8007266:	d11c      	bne.n	80072a2 <_dtoa_r+0xb2>
 8007268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800726a:	f242 730f 	movw	r3, #9999	; 0x270f
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007274:	ea53 0308 	orrs.w	r3, r3, r8
 8007278:	f000 84fd 	beq.w	8007c76 <_dtoa_r+0xa86>
 800727c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800727e:	b963      	cbnz	r3, 800729a <_dtoa_r+0xaa>
 8007280:	4b94      	ldr	r3, [pc, #592]	; (80074d4 <_dtoa_r+0x2e4>)
 8007282:	e01f      	b.n	80072c4 <_dtoa_r+0xd4>
 8007284:	4b94      	ldr	r3, [pc, #592]	; (80074d8 <_dtoa_r+0x2e8>)
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	3308      	adds	r3, #8
 800728a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	9801      	ldr	r0, [sp, #4]
 8007290:	b011      	add	sp, #68	; 0x44
 8007292:	ecbd 8b02 	vpop	{d8}
 8007296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729a:	4b8e      	ldr	r3, [pc, #568]	; (80074d4 <_dtoa_r+0x2e4>)
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	3303      	adds	r3, #3
 80072a0:	e7f3      	b.n	800728a <_dtoa_r+0x9a>
 80072a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80072a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	d10b      	bne.n	80072c8 <_dtoa_r+0xd8>
 80072b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b2:	2301      	movs	r3, #1
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 84d9 	beq.w	8007c70 <_dtoa_r+0xa80>
 80072be:	4887      	ldr	r0, [pc, #540]	; (80074dc <_dtoa_r+0x2ec>)
 80072c0:	6018      	str	r0, [r3, #0]
 80072c2:	1e43      	subs	r3, r0, #1
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	e7e2      	b.n	800728e <_dtoa_r+0x9e>
 80072c8:	a90f      	add	r1, sp, #60	; 0x3c
 80072ca:	aa0e      	add	r2, sp, #56	; 0x38
 80072cc:	4630      	mov	r0, r6
 80072ce:	eeb0 0b48 	vmov.f64	d0, d8
 80072d2:	f001 fa5d 	bl	8008790 <__d2b>
 80072d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80072da:	4605      	mov	r5, r0
 80072dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072de:	2900      	cmp	r1, #0
 80072e0:	d046      	beq.n	8007370 <_dtoa_r+0x180>
 80072e2:	ee18 4a90 	vmov	r4, s17
 80072e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80072ea:	ec53 2b18 	vmov	r2, r3, d8
 80072ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80072f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80072fa:	2400      	movs	r4, #0
 80072fc:	ec43 2b16 	vmov	d6, r2, r3
 8007300:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007304:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80074b0 <_dtoa_r+0x2c0>
 8007308:	ee36 7b47 	vsub.f64	d7, d6, d7
 800730c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80074b8 <_dtoa_r+0x2c8>
 8007310:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007314:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80074c0 <_dtoa_r+0x2d0>
 8007318:	ee07 1a90 	vmov	s15, r1
 800731c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007320:	eeb0 7b46 	vmov.f64	d7, d6
 8007324:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007328:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800732c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007334:	ee16 ba90 	vmov	fp, s13
 8007338:	940a      	str	r4, [sp, #40]	; 0x28
 800733a:	d508      	bpl.n	800734e <_dtoa_r+0x15e>
 800733c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007340:	eeb4 6b47 	vcmp.f64	d6, d7
 8007344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007348:	bf18      	it	ne
 800734a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800734e:	f1bb 0f16 	cmp.w	fp, #22
 8007352:	d82f      	bhi.n	80073b4 <_dtoa_r+0x1c4>
 8007354:	4b62      	ldr	r3, [pc, #392]	; (80074e0 <_dtoa_r+0x2f0>)
 8007356:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800735a:	ed93 7b00 	vldr	d7, [r3]
 800735e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007366:	d501      	bpl.n	800736c <_dtoa_r+0x17c>
 8007368:	f10b 3bff 	add.w	fp, fp, #4294967295
 800736c:	2300      	movs	r3, #0
 800736e:	e022      	b.n	80073b6 <_dtoa_r+0x1c6>
 8007370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007372:	4401      	add	r1, r0
 8007374:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007378:	2b20      	cmp	r3, #32
 800737a:	bfc1      	itttt	gt
 800737c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007380:	fa04 f303 	lslgt.w	r3, r4, r3
 8007384:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007388:	fa28 f804 	lsrgt.w	r8, r8, r4
 800738c:	bfd6      	itet	le
 800738e:	f1c3 0320 	rsble	r3, r3, #32
 8007392:	ea43 0808 	orrgt.w	r8, r3, r8
 8007396:	fa08 f803 	lslle.w	r8, r8, r3
 800739a:	ee07 8a90 	vmov	s15, r8
 800739e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073a2:	3901      	subs	r1, #1
 80073a4:	ee17 4a90 	vmov	r4, s15
 80073a8:	ec53 2b17 	vmov	r2, r3, d7
 80073ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80073b0:	2401      	movs	r4, #1
 80073b2:	e7a3      	b.n	80072fc <_dtoa_r+0x10c>
 80073b4:	2301      	movs	r3, #1
 80073b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b8:	1a43      	subs	r3, r0, r1
 80073ba:	1e5a      	subs	r2, r3, #1
 80073bc:	bf45      	ittet	mi
 80073be:	f1c3 0301 	rsbmi	r3, r3, #1
 80073c2:	9304      	strmi	r3, [sp, #16]
 80073c4:	2300      	movpl	r3, #0
 80073c6:	2300      	movmi	r3, #0
 80073c8:	9205      	str	r2, [sp, #20]
 80073ca:	bf54      	ite	pl
 80073cc:	9304      	strpl	r3, [sp, #16]
 80073ce:	9305      	strmi	r3, [sp, #20]
 80073d0:	f1bb 0f00 	cmp.w	fp, #0
 80073d4:	db18      	blt.n	8007408 <_dtoa_r+0x218>
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80073dc:	445b      	add	r3, fp
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9a06      	ldr	r2, [sp, #24]
 80073e4:	2a09      	cmp	r2, #9
 80073e6:	d849      	bhi.n	800747c <_dtoa_r+0x28c>
 80073e8:	2a05      	cmp	r2, #5
 80073ea:	bfc4      	itt	gt
 80073ec:	3a04      	subgt	r2, #4
 80073ee:	9206      	strgt	r2, [sp, #24]
 80073f0:	9a06      	ldr	r2, [sp, #24]
 80073f2:	f1a2 0202 	sub.w	r2, r2, #2
 80073f6:	bfcc      	ite	gt
 80073f8:	2400      	movgt	r4, #0
 80073fa:	2401      	movle	r4, #1
 80073fc:	2a03      	cmp	r2, #3
 80073fe:	d848      	bhi.n	8007492 <_dtoa_r+0x2a2>
 8007400:	e8df f002 	tbb	[pc, r2]
 8007404:	3a2c2e0b 	.word	0x3a2c2e0b
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	2200      	movs	r2, #0
 800740c:	eba3 030b 	sub.w	r3, r3, fp
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	9209      	str	r2, [sp, #36]	; 0x24
 8007414:	f1cb 0300 	rsb	r3, fp, #0
 8007418:	e7e3      	b.n	80073e2 <_dtoa_r+0x1f2>
 800741a:	2200      	movs	r2, #0
 800741c:	9207      	str	r2, [sp, #28]
 800741e:	9a08      	ldr	r2, [sp, #32]
 8007420:	2a00      	cmp	r2, #0
 8007422:	dc39      	bgt.n	8007498 <_dtoa_r+0x2a8>
 8007424:	f04f 0a01 	mov.w	sl, #1
 8007428:	46d1      	mov	r9, sl
 800742a:	4652      	mov	r2, sl
 800742c:	f8cd a020 	str.w	sl, [sp, #32]
 8007430:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007432:	2100      	movs	r1, #0
 8007434:	6079      	str	r1, [r7, #4]
 8007436:	2004      	movs	r0, #4
 8007438:	f100 0c14 	add.w	ip, r0, #20
 800743c:	4594      	cmp	ip, r2
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	d92f      	bls.n	80074a2 <_dtoa_r+0x2b2>
 8007442:	4630      	mov	r0, r6
 8007444:	930d      	str	r3, [sp, #52]	; 0x34
 8007446:	f000 fe7b 	bl	8008140 <_Balloc>
 800744a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800744c:	9001      	str	r0, [sp, #4]
 800744e:	4602      	mov	r2, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d149      	bne.n	80074e8 <_dtoa_r+0x2f8>
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <_dtoa_r+0x2f4>)
 8007456:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800745a:	e6e1      	b.n	8007220 <_dtoa_r+0x30>
 800745c:	2201      	movs	r2, #1
 800745e:	e7dd      	b.n	800741c <_dtoa_r+0x22c>
 8007460:	2200      	movs	r2, #0
 8007462:	9207      	str	r2, [sp, #28]
 8007464:	9a08      	ldr	r2, [sp, #32]
 8007466:	eb0b 0a02 	add.w	sl, fp, r2
 800746a:	f10a 0901 	add.w	r9, sl, #1
 800746e:	464a      	mov	r2, r9
 8007470:	2a01      	cmp	r2, #1
 8007472:	bfb8      	it	lt
 8007474:	2201      	movlt	r2, #1
 8007476:	e7db      	b.n	8007430 <_dtoa_r+0x240>
 8007478:	2201      	movs	r2, #1
 800747a:	e7f2      	b.n	8007462 <_dtoa_r+0x272>
 800747c:	2401      	movs	r4, #1
 800747e:	2200      	movs	r2, #0
 8007480:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007484:	f04f 3aff 	mov.w	sl, #4294967295
 8007488:	2100      	movs	r1, #0
 800748a:	46d1      	mov	r9, sl
 800748c:	2212      	movs	r2, #18
 800748e:	9108      	str	r1, [sp, #32]
 8007490:	e7ce      	b.n	8007430 <_dtoa_r+0x240>
 8007492:	2201      	movs	r2, #1
 8007494:	9207      	str	r2, [sp, #28]
 8007496:	e7f5      	b.n	8007484 <_dtoa_r+0x294>
 8007498:	f8dd a020 	ldr.w	sl, [sp, #32]
 800749c:	46d1      	mov	r9, sl
 800749e:	4652      	mov	r2, sl
 80074a0:	e7c6      	b.n	8007430 <_dtoa_r+0x240>
 80074a2:	3101      	adds	r1, #1
 80074a4:	6079      	str	r1, [r7, #4]
 80074a6:	0040      	lsls	r0, r0, #1
 80074a8:	e7c6      	b.n	8007438 <_dtoa_r+0x248>
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w
 80074b0:	636f4361 	.word	0x636f4361
 80074b4:	3fd287a7 	.word	0x3fd287a7
 80074b8:	8b60c8b3 	.word	0x8b60c8b3
 80074bc:	3fc68a28 	.word	0x3fc68a28
 80074c0:	509f79fb 	.word	0x509f79fb
 80074c4:	3fd34413 	.word	0x3fd34413
 80074c8:	080090b9 	.word	0x080090b9
 80074cc:	080090d0 	.word	0x080090d0
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	080090b5 	.word	0x080090b5
 80074d8:	080090ac 	.word	0x080090ac
 80074dc:	08009089 	.word	0x08009089
 80074e0:	08009220 	.word	0x08009220
 80074e4:	0800912b 	.word	0x0800912b
 80074e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80074ea:	9901      	ldr	r1, [sp, #4]
 80074ec:	6011      	str	r1, [r2, #0]
 80074ee:	f1b9 0f0e 	cmp.w	r9, #14
 80074f2:	d86c      	bhi.n	80075ce <_dtoa_r+0x3de>
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	d06a      	beq.n	80075ce <_dtoa_r+0x3de>
 80074f8:	f1bb 0f00 	cmp.w	fp, #0
 80074fc:	f340 80a0 	ble.w	8007640 <_dtoa_r+0x450>
 8007500:	49c1      	ldr	r1, [pc, #772]	; (8007808 <_dtoa_r+0x618>)
 8007502:	f00b 020f 	and.w	r2, fp, #15
 8007506:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800750a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800750e:	ed92 7b00 	vldr	d7, [r2]
 8007512:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007516:	f000 8087 	beq.w	8007628 <_dtoa_r+0x438>
 800751a:	4abc      	ldr	r2, [pc, #752]	; (800780c <_dtoa_r+0x61c>)
 800751c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007520:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007524:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007528:	f001 010f 	and.w	r1, r1, #15
 800752c:	2203      	movs	r2, #3
 800752e:	48b7      	ldr	r0, [pc, #732]	; (800780c <_dtoa_r+0x61c>)
 8007530:	2900      	cmp	r1, #0
 8007532:	d17b      	bne.n	800762c <_dtoa_r+0x43c>
 8007534:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007538:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800753c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007542:	2900      	cmp	r1, #0
 8007544:	f000 80a2 	beq.w	800768c <_dtoa_r+0x49c>
 8007548:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800754c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007550:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007558:	f140 8098 	bpl.w	800768c <_dtoa_r+0x49c>
 800755c:	f1b9 0f00 	cmp.w	r9, #0
 8007560:	f000 8094 	beq.w	800768c <_dtoa_r+0x49c>
 8007564:	f1ba 0f00 	cmp.w	sl, #0
 8007568:	dd2f      	ble.n	80075ca <_dtoa_r+0x3da>
 800756a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800756e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007572:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007576:	f10b 37ff 	add.w	r7, fp, #4294967295
 800757a:	3201      	adds	r2, #1
 800757c:	4650      	mov	r0, sl
 800757e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007582:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007586:	ee07 2a90 	vmov	s15, r2
 800758a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800758e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007592:	ee15 4a90 	vmov	r4, s11
 8007596:	ec52 1b15 	vmov	r1, r2, d5
 800759a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800759e:	2800      	cmp	r0, #0
 80075a0:	d177      	bne.n	8007692 <_dtoa_r+0x4a2>
 80075a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80075a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80075aa:	ec42 1b17 	vmov	d7, r1, r2
 80075ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b6:	f300 8263 	bgt.w	8007a80 <_dtoa_r+0x890>
 80075ba:	eeb1 7b47 	vneg.f64	d7, d7
 80075be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	f100 8258 	bmi.w	8007a7a <_dtoa_r+0x88a>
 80075ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	f2c0 811d 	blt.w	8007810 <_dtoa_r+0x620>
 80075d6:	f1bb 0f0e 	cmp.w	fp, #14
 80075da:	f300 8119 	bgt.w	8007810 <_dtoa_r+0x620>
 80075de:	4b8a      	ldr	r3, [pc, #552]	; (8007808 <_dtoa_r+0x618>)
 80075e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075e4:	ed93 6b00 	vldr	d6, [r3]
 80075e8:	9b08      	ldr	r3, [sp, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f280 80b7 	bge.w	800775e <_dtoa_r+0x56e>
 80075f0:	f1b9 0f00 	cmp.w	r9, #0
 80075f4:	f300 80b3 	bgt.w	800775e <_dtoa_r+0x56e>
 80075f8:	f040 823f 	bne.w	8007a7a <_dtoa_r+0x88a>
 80075fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007600:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007608:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007610:	464c      	mov	r4, r9
 8007612:	464f      	mov	r7, r9
 8007614:	f280 8215 	bge.w	8007a42 <_dtoa_r+0x852>
 8007618:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800761c:	2331      	movs	r3, #49	; 0x31
 800761e:	f808 3b01 	strb.w	r3, [r8], #1
 8007622:	f10b 0b01 	add.w	fp, fp, #1
 8007626:	e211      	b.n	8007a4c <_dtoa_r+0x85c>
 8007628:	2202      	movs	r2, #2
 800762a:	e780      	b.n	800752e <_dtoa_r+0x33e>
 800762c:	07cc      	lsls	r4, r1, #31
 800762e:	d504      	bpl.n	800763a <_dtoa_r+0x44a>
 8007630:	ed90 6b00 	vldr	d6, [r0]
 8007634:	3201      	adds	r2, #1
 8007636:	ee27 7b06 	vmul.f64	d7, d7, d6
 800763a:	1049      	asrs	r1, r1, #1
 800763c:	3008      	adds	r0, #8
 800763e:	e777      	b.n	8007530 <_dtoa_r+0x340>
 8007640:	d022      	beq.n	8007688 <_dtoa_r+0x498>
 8007642:	f1cb 0100 	rsb	r1, fp, #0
 8007646:	4a70      	ldr	r2, [pc, #448]	; (8007808 <_dtoa_r+0x618>)
 8007648:	f001 000f 	and.w	r0, r1, #15
 800764c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007650:	ed92 7b00 	vldr	d7, [r2]
 8007654:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007658:	ed8d 7b02 	vstr	d7, [sp, #8]
 800765c:	486b      	ldr	r0, [pc, #428]	; (800780c <_dtoa_r+0x61c>)
 800765e:	1109      	asrs	r1, r1, #4
 8007660:	2400      	movs	r4, #0
 8007662:	2202      	movs	r2, #2
 8007664:	b929      	cbnz	r1, 8007672 <_dtoa_r+0x482>
 8007666:	2c00      	cmp	r4, #0
 8007668:	f43f af6a 	beq.w	8007540 <_dtoa_r+0x350>
 800766c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007670:	e766      	b.n	8007540 <_dtoa_r+0x350>
 8007672:	07cf      	lsls	r7, r1, #31
 8007674:	d505      	bpl.n	8007682 <_dtoa_r+0x492>
 8007676:	ed90 6b00 	vldr	d6, [r0]
 800767a:	3201      	adds	r2, #1
 800767c:	2401      	movs	r4, #1
 800767e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007682:	1049      	asrs	r1, r1, #1
 8007684:	3008      	adds	r0, #8
 8007686:	e7ed      	b.n	8007664 <_dtoa_r+0x474>
 8007688:	2202      	movs	r2, #2
 800768a:	e759      	b.n	8007540 <_dtoa_r+0x350>
 800768c:	465f      	mov	r7, fp
 800768e:	4648      	mov	r0, r9
 8007690:	e775      	b.n	800757e <_dtoa_r+0x38e>
 8007692:	ec42 1b17 	vmov	d7, r1, r2
 8007696:	4a5c      	ldr	r2, [pc, #368]	; (8007808 <_dtoa_r+0x618>)
 8007698:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800769c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80076a0:	9a01      	ldr	r2, [sp, #4]
 80076a2:	1814      	adds	r4, r2, r0
 80076a4:	9a07      	ldr	r2, [sp, #28]
 80076a6:	b352      	cbz	r2, 80076fe <_dtoa_r+0x50e>
 80076a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80076ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80076b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80076b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80076bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80076c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80076c4:	ee14 2a90 	vmov	r2, s9
 80076c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80076cc:	3230      	adds	r2, #48	; 0x30
 80076ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80076d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	f808 2b01 	strb.w	r2, [r8], #1
 80076de:	d439      	bmi.n	8007754 <_dtoa_r+0x564>
 80076e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80076e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80076e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ec:	d472      	bmi.n	80077d4 <_dtoa_r+0x5e4>
 80076ee:	45a0      	cmp	r8, r4
 80076f0:	f43f af6b 	beq.w	80075ca <_dtoa_r+0x3da>
 80076f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80076f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80076fc:	e7e0      	b.n	80076c0 <_dtoa_r+0x4d0>
 80076fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007702:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007706:	4621      	mov	r1, r4
 8007708:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800770c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007710:	ee14 2a90 	vmov	r2, s9
 8007714:	3230      	adds	r2, #48	; 0x30
 8007716:	f808 2b01 	strb.w	r2, [r8], #1
 800771a:	45a0      	cmp	r8, r4
 800771c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007720:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007724:	d118      	bne.n	8007758 <_dtoa_r+0x568>
 8007726:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800772a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800772e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	dc4d      	bgt.n	80077d4 <_dtoa_r+0x5e4>
 8007738:	ee35 7b47 	vsub.f64	d7, d5, d7
 800773c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007744:	f57f af41 	bpl.w	80075ca <_dtoa_r+0x3da>
 8007748:	4688      	mov	r8, r1
 800774a:	3901      	subs	r1, #1
 800774c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007750:	2b30      	cmp	r3, #48	; 0x30
 8007752:	d0f9      	beq.n	8007748 <_dtoa_r+0x558>
 8007754:	46bb      	mov	fp, r7
 8007756:	e02a      	b.n	80077ae <_dtoa_r+0x5be>
 8007758:	ee26 6b03 	vmul.f64	d6, d6, d3
 800775c:	e7d6      	b.n	800770c <_dtoa_r+0x51c>
 800775e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007762:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007766:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800776a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800776e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007772:	ee15 3a10 	vmov	r3, s10
 8007776:	3330      	adds	r3, #48	; 0x30
 8007778:	f808 3b01 	strb.w	r3, [r8], #1
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	eba8 0303 	sub.w	r3, r8, r3
 8007782:	4599      	cmp	r9, r3
 8007784:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007788:	eea3 7b46 	vfms.f64	d7, d3, d6
 800778c:	d133      	bne.n	80077f6 <_dtoa_r+0x606>
 800778e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	dc1a      	bgt.n	80077d2 <_dtoa_r+0x5e2>
 800779c:	eeb4 7b46 	vcmp.f64	d7, d6
 80077a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a4:	d103      	bne.n	80077ae <_dtoa_r+0x5be>
 80077a6:	ee15 3a10 	vmov	r3, s10
 80077aa:	07d9      	lsls	r1, r3, #31
 80077ac:	d411      	bmi.n	80077d2 <_dtoa_r+0x5e2>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4630      	mov	r0, r6
 80077b2:	f000 fd05 	bl	80081c0 <_Bfree>
 80077b6:	2300      	movs	r3, #0
 80077b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ba:	f888 3000 	strb.w	r3, [r8]
 80077be:	f10b 0301 	add.w	r3, fp, #1
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f43f ad61 	beq.w	800728e <_dtoa_r+0x9e>
 80077cc:	f8c3 8000 	str.w	r8, [r3]
 80077d0:	e55d      	b.n	800728e <_dtoa_r+0x9e>
 80077d2:	465f      	mov	r7, fp
 80077d4:	4643      	mov	r3, r8
 80077d6:	4698      	mov	r8, r3
 80077d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077dc:	2a39      	cmp	r2, #57	; 0x39
 80077de:	d106      	bne.n	80077ee <_dtoa_r+0x5fe>
 80077e0:	9a01      	ldr	r2, [sp, #4]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d1f7      	bne.n	80077d6 <_dtoa_r+0x5e6>
 80077e6:	9901      	ldr	r1, [sp, #4]
 80077e8:	2230      	movs	r2, #48	; 0x30
 80077ea:	3701      	adds	r7, #1
 80077ec:	700a      	strb	r2, [r1, #0]
 80077ee:	781a      	ldrb	r2, [r3, #0]
 80077f0:	3201      	adds	r2, #1
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	e7ae      	b.n	8007754 <_dtoa_r+0x564>
 80077f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007802:	d1b2      	bne.n	800776a <_dtoa_r+0x57a>
 8007804:	e7d3      	b.n	80077ae <_dtoa_r+0x5be>
 8007806:	bf00      	nop
 8007808:	08009220 	.word	0x08009220
 800780c:	080091f8 	.word	0x080091f8
 8007810:	9907      	ldr	r1, [sp, #28]
 8007812:	2900      	cmp	r1, #0
 8007814:	f000 80d0 	beq.w	80079b8 <_dtoa_r+0x7c8>
 8007818:	9906      	ldr	r1, [sp, #24]
 800781a:	2901      	cmp	r1, #1
 800781c:	f300 80b4 	bgt.w	8007988 <_dtoa_r+0x798>
 8007820:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007822:	2900      	cmp	r1, #0
 8007824:	f000 80ac 	beq.w	8007980 <_dtoa_r+0x790>
 8007828:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800782c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007830:	461c      	mov	r4, r3
 8007832:	930a      	str	r3, [sp, #40]	; 0x28
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	4413      	add	r3, r2
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	9b05      	ldr	r3, [sp, #20]
 800783c:	2101      	movs	r1, #1
 800783e:	4413      	add	r3, r2
 8007840:	4630      	mov	r0, r6
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f000 fd74 	bl	8008330 <__i2b>
 8007848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784a:	4607      	mov	r7, r0
 800784c:	f1b8 0f00 	cmp.w	r8, #0
 8007850:	dd0d      	ble.n	800786e <_dtoa_r+0x67e>
 8007852:	9a05      	ldr	r2, [sp, #20]
 8007854:	2a00      	cmp	r2, #0
 8007856:	dd0a      	ble.n	800786e <_dtoa_r+0x67e>
 8007858:	4542      	cmp	r2, r8
 800785a:	9904      	ldr	r1, [sp, #16]
 800785c:	bfa8      	it	ge
 800785e:	4642      	movge	r2, r8
 8007860:	1a89      	subs	r1, r1, r2
 8007862:	9104      	str	r1, [sp, #16]
 8007864:	9905      	ldr	r1, [sp, #20]
 8007866:	eba8 0802 	sub.w	r8, r8, r2
 800786a:	1a8a      	subs	r2, r1, r2
 800786c:	9205      	str	r2, [sp, #20]
 800786e:	b303      	cbz	r3, 80078b2 <_dtoa_r+0x6c2>
 8007870:	9a07      	ldr	r2, [sp, #28]
 8007872:	2a00      	cmp	r2, #0
 8007874:	f000 80a5 	beq.w	80079c2 <_dtoa_r+0x7d2>
 8007878:	2c00      	cmp	r4, #0
 800787a:	dd13      	ble.n	80078a4 <_dtoa_r+0x6b4>
 800787c:	4639      	mov	r1, r7
 800787e:	4622      	mov	r2, r4
 8007880:	4630      	mov	r0, r6
 8007882:	930d      	str	r3, [sp, #52]	; 0x34
 8007884:	f000 fe14 	bl	80084b0 <__pow5mult>
 8007888:	462a      	mov	r2, r5
 800788a:	4601      	mov	r1, r0
 800788c:	4607      	mov	r7, r0
 800788e:	4630      	mov	r0, r6
 8007890:	f000 fd64 	bl	800835c <__multiply>
 8007894:	4629      	mov	r1, r5
 8007896:	900a      	str	r0, [sp, #40]	; 0x28
 8007898:	4630      	mov	r0, r6
 800789a:	f000 fc91 	bl	80081c0 <_Bfree>
 800789e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a2:	4615      	mov	r5, r2
 80078a4:	1b1a      	subs	r2, r3, r4
 80078a6:	d004      	beq.n	80078b2 <_dtoa_r+0x6c2>
 80078a8:	4629      	mov	r1, r5
 80078aa:	4630      	mov	r0, r6
 80078ac:	f000 fe00 	bl	80084b0 <__pow5mult>
 80078b0:	4605      	mov	r5, r0
 80078b2:	2101      	movs	r1, #1
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 fd3b 	bl	8008330 <__i2b>
 80078ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	f340 8081 	ble.w	80079c6 <_dtoa_r+0x7d6>
 80078c4:	461a      	mov	r2, r3
 80078c6:	4601      	mov	r1, r0
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 fdf1 	bl	80084b0 <__pow5mult>
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	4604      	mov	r4, r0
 80078d4:	dd7a      	ble.n	80079cc <_dtoa_r+0x7dc>
 80078d6:	2300      	movs	r3, #0
 80078d8:	930a      	str	r3, [sp, #40]	; 0x28
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80078e0:	6910      	ldr	r0, [r2, #16]
 80078e2:	f000 fcd5 	bl	8008290 <__hi0bits>
 80078e6:	f1c0 0020 	rsb	r0, r0, #32
 80078ea:	9b05      	ldr	r3, [sp, #20]
 80078ec:	4418      	add	r0, r3
 80078ee:	f010 001f 	ands.w	r0, r0, #31
 80078f2:	f000 808c 	beq.w	8007a0e <_dtoa_r+0x81e>
 80078f6:	f1c0 0220 	rsb	r2, r0, #32
 80078fa:	2a04      	cmp	r2, #4
 80078fc:	f340 8085 	ble.w	8007a0a <_dtoa_r+0x81a>
 8007900:	f1c0 001c 	rsb	r0, r0, #28
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	4403      	add	r3, r0
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	4403      	add	r3, r0
 800790e:	4480      	add	r8, r0
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dd05      	ble.n	8007924 <_dtoa_r+0x734>
 8007918:	4629      	mov	r1, r5
 800791a:	461a      	mov	r2, r3
 800791c:	4630      	mov	r0, r6
 800791e:	f000 fe21 	bl	8008564 <__lshift>
 8007922:	4605      	mov	r5, r0
 8007924:	9b05      	ldr	r3, [sp, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd05      	ble.n	8007936 <_dtoa_r+0x746>
 800792a:	4621      	mov	r1, r4
 800792c:	461a      	mov	r2, r3
 800792e:	4630      	mov	r0, r6
 8007930:	f000 fe18 	bl	8008564 <__lshift>
 8007934:	4604      	mov	r4, r0
 8007936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d06a      	beq.n	8007a12 <_dtoa_r+0x822>
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fe80 	bl	8008644 <__mcmp>
 8007944:	2800      	cmp	r0, #0
 8007946:	da64      	bge.n	8007a12 <_dtoa_r+0x822>
 8007948:	2300      	movs	r3, #0
 800794a:	4629      	mov	r1, r5
 800794c:	220a      	movs	r2, #10
 800794e:	4630      	mov	r0, r6
 8007950:	f000 fc58 	bl	8008204 <__multadd>
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	f10b 3bff 	add.w	fp, fp, #4294967295
 800795a:	4605      	mov	r5, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8191 	beq.w	8007c84 <_dtoa_r+0xa94>
 8007962:	4639      	mov	r1, r7
 8007964:	2300      	movs	r3, #0
 8007966:	220a      	movs	r2, #10
 8007968:	4630      	mov	r0, r6
 800796a:	f000 fc4b 	bl	8008204 <__multadd>
 800796e:	f1ba 0f00 	cmp.w	sl, #0
 8007972:	4607      	mov	r7, r0
 8007974:	f300 808d 	bgt.w	8007a92 <_dtoa_r+0x8a2>
 8007978:	9b06      	ldr	r3, [sp, #24]
 800797a:	2b02      	cmp	r3, #2
 800797c:	dc50      	bgt.n	8007a20 <_dtoa_r+0x830>
 800797e:	e088      	b.n	8007a92 <_dtoa_r+0x8a2>
 8007980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007982:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007986:	e751      	b.n	800782c <_dtoa_r+0x63c>
 8007988:	f109 34ff 	add.w	r4, r9, #4294967295
 800798c:	42a3      	cmp	r3, r4
 800798e:	bfbf      	itttt	lt
 8007990:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007992:	1ae3      	sublt	r3, r4, r3
 8007994:	18d2      	addlt	r2, r2, r3
 8007996:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007998:	bfb6      	itet	lt
 800799a:	4623      	movlt	r3, r4
 800799c:	1b1c      	subge	r4, r3, r4
 800799e:	2400      	movlt	r4, #0
 80079a0:	f1b9 0f00 	cmp.w	r9, #0
 80079a4:	bfb5      	itete	lt
 80079a6:	9a04      	ldrlt	r2, [sp, #16]
 80079a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80079ac:	eba2 0809 	sublt.w	r8, r2, r9
 80079b0:	464a      	movge	r2, r9
 80079b2:	bfb8      	it	lt
 80079b4:	2200      	movlt	r2, #0
 80079b6:	e73c      	b.n	8007832 <_dtoa_r+0x642>
 80079b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80079bc:	9f07      	ldr	r7, [sp, #28]
 80079be:	461c      	mov	r4, r3
 80079c0:	e744      	b.n	800784c <_dtoa_r+0x65c>
 80079c2:	461a      	mov	r2, r3
 80079c4:	e770      	b.n	80078a8 <_dtoa_r+0x6b8>
 80079c6:	9b06      	ldr	r3, [sp, #24]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	dc18      	bgt.n	80079fe <_dtoa_r+0x80e>
 80079cc:	9b02      	ldr	r3, [sp, #8]
 80079ce:	b9b3      	cbnz	r3, 80079fe <_dtoa_r+0x80e>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80079d6:	b9a2      	cbnz	r2, 8007a02 <_dtoa_r+0x812>
 80079d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079dc:	0d12      	lsrs	r2, r2, #20
 80079de:	0512      	lsls	r2, r2, #20
 80079e0:	b18a      	cbz	r2, 8007a06 <_dtoa_r+0x816>
 80079e2:	9b04      	ldr	r3, [sp, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	2301      	movs	r3, #1
 80079f0:	930a      	str	r3, [sp, #40]	; 0x28
 80079f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f47f af70 	bne.w	80078da <_dtoa_r+0x6ea>
 80079fa:	2001      	movs	r0, #1
 80079fc:	e775      	b.n	80078ea <_dtoa_r+0x6fa>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e7f6      	b.n	80079f0 <_dtoa_r+0x800>
 8007a02:	9b02      	ldr	r3, [sp, #8]
 8007a04:	e7f4      	b.n	80079f0 <_dtoa_r+0x800>
 8007a06:	920a      	str	r2, [sp, #40]	; 0x28
 8007a08:	e7f3      	b.n	80079f2 <_dtoa_r+0x802>
 8007a0a:	d082      	beq.n	8007912 <_dtoa_r+0x722>
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	301c      	adds	r0, #28
 8007a10:	e778      	b.n	8007904 <_dtoa_r+0x714>
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	dc37      	bgt.n	8007a88 <_dtoa_r+0x898>
 8007a18:	9b06      	ldr	r3, [sp, #24]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	dd34      	ble.n	8007a88 <_dtoa_r+0x898>
 8007a1e:	46ca      	mov	sl, r9
 8007a20:	f1ba 0f00 	cmp.w	sl, #0
 8007a24:	d10d      	bne.n	8007a42 <_dtoa_r+0x852>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4653      	mov	r3, sl
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 fbe9 	bl	8008204 <__multadd>
 8007a32:	4601      	mov	r1, r0
 8007a34:	4604      	mov	r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fe04 	bl	8008644 <__mcmp>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f73f adeb 	bgt.w	8007618 <_dtoa_r+0x428>
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a48:	ea6f 0b03 	mvn.w	fp, r3
 8007a4c:	f04f 0900 	mov.w	r9, #0
 8007a50:	4621      	mov	r1, r4
 8007a52:	4630      	mov	r0, r6
 8007a54:	f000 fbb4 	bl	80081c0 <_Bfree>
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	f43f aea8 	beq.w	80077ae <_dtoa_r+0x5be>
 8007a5e:	f1b9 0f00 	cmp.w	r9, #0
 8007a62:	d005      	beq.n	8007a70 <_dtoa_r+0x880>
 8007a64:	45b9      	cmp	r9, r7
 8007a66:	d003      	beq.n	8007a70 <_dtoa_r+0x880>
 8007a68:	4649      	mov	r1, r9
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f000 fba8 	bl	80081c0 <_Bfree>
 8007a70:	4639      	mov	r1, r7
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 fba4 	bl	80081c0 <_Bfree>
 8007a78:	e699      	b.n	80077ae <_dtoa_r+0x5be>
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	4627      	mov	r7, r4
 8007a7e:	e7e0      	b.n	8007a42 <_dtoa_r+0x852>
 8007a80:	46bb      	mov	fp, r7
 8007a82:	4604      	mov	r4, r0
 8007a84:	4607      	mov	r7, r0
 8007a86:	e5c7      	b.n	8007618 <_dtoa_r+0x428>
 8007a88:	9b07      	ldr	r3, [sp, #28]
 8007a8a:	46ca      	mov	sl, r9
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8100 	beq.w	8007c92 <_dtoa_r+0xaa2>
 8007a92:	f1b8 0f00 	cmp.w	r8, #0
 8007a96:	dd05      	ble.n	8007aa4 <_dtoa_r+0x8b4>
 8007a98:	4639      	mov	r1, r7
 8007a9a:	4642      	mov	r2, r8
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fd61 	bl	8008564 <__lshift>
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d05d      	beq.n	8007b66 <_dtoa_r+0x976>
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4630      	mov	r0, r6
 8007aae:	f000 fb47 	bl	8008140 <_Balloc>
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	b928      	cbnz	r0, 8007ac2 <_dtoa_r+0x8d2>
 8007ab6:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <_dtoa_r+0xad0>)
 8007ab8:	4602      	mov	r2, r0
 8007aba:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007abe:	f7ff bbaf 	b.w	8007220 <_dtoa_r+0x30>
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	3202      	adds	r2, #2
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	f107 010c 	add.w	r1, r7, #12
 8007acc:	300c      	adds	r0, #12
 8007ace:	f000 fb29 	bl	8008124 <memcpy>
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f000 fd44 	bl	8008564 <__lshift>
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	4453      	add	r3, sl
 8007ae6:	9308      	str	r3, [sp, #32]
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	46b9      	mov	r9, r7
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	4607      	mov	r7, r0
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	4621      	mov	r1, r4
 8007af8:	3b01      	subs	r3, #1
 8007afa:	4628      	mov	r0, r5
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	f7ff faeb 	bl	80070d8 <quorem>
 8007b02:	4603      	mov	r3, r0
 8007b04:	3330      	adds	r3, #48	; 0x30
 8007b06:	9005      	str	r0, [sp, #20]
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0e:	f000 fd99 	bl	8008644 <__mcmp>
 8007b12:	463a      	mov	r2, r7
 8007b14:	4682      	mov	sl, r0
 8007b16:	4621      	mov	r1, r4
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 fdaf 	bl	800867c <__mdiff>
 8007b1e:	68c2      	ldr	r2, [r0, #12]
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	4680      	mov	r8, r0
 8007b24:	bb0a      	cbnz	r2, 8007b6a <_dtoa_r+0x97a>
 8007b26:	4601      	mov	r1, r0
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f000 fd8b 	bl	8008644 <__mcmp>
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	4602      	mov	r2, r0
 8007b32:	4641      	mov	r1, r8
 8007b34:	4630      	mov	r0, r6
 8007b36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007b3a:	f000 fb41 	bl	80081c0 <_Bfree>
 8007b3e:	9b06      	ldr	r3, [sp, #24]
 8007b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b46:	ea43 0102 	orr.w	r1, r3, r2
 8007b4a:	9b07      	ldr	r3, [sp, #28]
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	d10d      	bne.n	8007b6e <_dtoa_r+0x97e>
 8007b52:	2b39      	cmp	r3, #57	; 0x39
 8007b54:	d029      	beq.n	8007baa <_dtoa_r+0x9ba>
 8007b56:	f1ba 0f00 	cmp.w	sl, #0
 8007b5a:	dd01      	ble.n	8007b60 <_dtoa_r+0x970>
 8007b5c:	9b05      	ldr	r3, [sp, #20]
 8007b5e:	3331      	adds	r3, #49	; 0x31
 8007b60:	9a02      	ldr	r2, [sp, #8]
 8007b62:	7013      	strb	r3, [r2, #0]
 8007b64:	e774      	b.n	8007a50 <_dtoa_r+0x860>
 8007b66:	4638      	mov	r0, r7
 8007b68:	e7b8      	b.n	8007adc <_dtoa_r+0x8ec>
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	e7e1      	b.n	8007b32 <_dtoa_r+0x942>
 8007b6e:	f1ba 0f00 	cmp.w	sl, #0
 8007b72:	db06      	blt.n	8007b82 <_dtoa_r+0x992>
 8007b74:	9906      	ldr	r1, [sp, #24]
 8007b76:	ea41 0a0a 	orr.w	sl, r1, sl
 8007b7a:	9907      	ldr	r1, [sp, #28]
 8007b7c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007b80:	d120      	bne.n	8007bc4 <_dtoa_r+0x9d4>
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	ddec      	ble.n	8007b60 <_dtoa_r+0x970>
 8007b86:	4629      	mov	r1, r5
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	f000 fce9 	bl	8008564 <__lshift>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4605      	mov	r5, r0
 8007b96:	f000 fd55 	bl	8008644 <__mcmp>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	dc02      	bgt.n	8007ba6 <_dtoa_r+0x9b6>
 8007ba0:	d1de      	bne.n	8007b60 <_dtoa_r+0x970>
 8007ba2:	07da      	lsls	r2, r3, #31
 8007ba4:	d5dc      	bpl.n	8007b60 <_dtoa_r+0x970>
 8007ba6:	2b39      	cmp	r3, #57	; 0x39
 8007ba8:	d1d8      	bne.n	8007b5c <_dtoa_r+0x96c>
 8007baa:	9a02      	ldr	r2, [sp, #8]
 8007bac:	2339      	movs	r3, #57	; 0x39
 8007bae:	7013      	strb	r3, [r2, #0]
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	4698      	mov	r8, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007bba:	2a39      	cmp	r2, #57	; 0x39
 8007bbc:	d051      	beq.n	8007c62 <_dtoa_r+0xa72>
 8007bbe:	3201      	adds	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	e745      	b.n	8007a50 <_dtoa_r+0x860>
 8007bc4:	2a00      	cmp	r2, #0
 8007bc6:	dd03      	ble.n	8007bd0 <_dtoa_r+0x9e0>
 8007bc8:	2b39      	cmp	r3, #57	; 0x39
 8007bca:	d0ee      	beq.n	8007baa <_dtoa_r+0x9ba>
 8007bcc:	3301      	adds	r3, #1
 8007bce:	e7c7      	b.n	8007b60 <_dtoa_r+0x970>
 8007bd0:	9a04      	ldr	r2, [sp, #16]
 8007bd2:	9908      	ldr	r1, [sp, #32]
 8007bd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	d02b      	beq.n	8007c34 <_dtoa_r+0xa44>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	2300      	movs	r3, #0
 8007be0:	220a      	movs	r2, #10
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 fb0e 	bl	8008204 <__multadd>
 8007be8:	45b9      	cmp	r9, r7
 8007bea:	4605      	mov	r5, r0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	f04f 020a 	mov.w	r2, #10
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	d107      	bne.n	8007c0a <_dtoa_r+0xa1a>
 8007bfa:	f000 fb03 	bl	8008204 <__multadd>
 8007bfe:	4681      	mov	r9, r0
 8007c00:	4607      	mov	r7, r0
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	3301      	adds	r3, #1
 8007c06:	9304      	str	r3, [sp, #16]
 8007c08:	e774      	b.n	8007af4 <_dtoa_r+0x904>
 8007c0a:	f000 fafb 	bl	8008204 <__multadd>
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4681      	mov	r9, r0
 8007c12:	2300      	movs	r3, #0
 8007c14:	220a      	movs	r2, #10
 8007c16:	4630      	mov	r0, r6
 8007c18:	f000 faf4 	bl	8008204 <__multadd>
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	e7f0      	b.n	8007c02 <_dtoa_r+0xa12>
 8007c20:	f1ba 0f00 	cmp.w	sl, #0
 8007c24:	9a01      	ldr	r2, [sp, #4]
 8007c26:	bfcc      	ite	gt
 8007c28:	46d0      	movgt	r8, sl
 8007c2a:	f04f 0801 	movle.w	r8, #1
 8007c2e:	4490      	add	r8, r2
 8007c30:	f04f 0900 	mov.w	r9, #0
 8007c34:	4629      	mov	r1, r5
 8007c36:	2201      	movs	r2, #1
 8007c38:	4630      	mov	r0, r6
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	f000 fc92 	bl	8008564 <__lshift>
 8007c40:	4621      	mov	r1, r4
 8007c42:	4605      	mov	r5, r0
 8007c44:	f000 fcfe 	bl	8008644 <__mcmp>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	dcb1      	bgt.n	8007bb0 <_dtoa_r+0x9c0>
 8007c4c:	d102      	bne.n	8007c54 <_dtoa_r+0xa64>
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	07db      	lsls	r3, r3, #31
 8007c52:	d4ad      	bmi.n	8007bb0 <_dtoa_r+0x9c0>
 8007c54:	4643      	mov	r3, r8
 8007c56:	4698      	mov	r8, r3
 8007c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c5c:	2a30      	cmp	r2, #48	; 0x30
 8007c5e:	d0fa      	beq.n	8007c56 <_dtoa_r+0xa66>
 8007c60:	e6f6      	b.n	8007a50 <_dtoa_r+0x860>
 8007c62:	9a01      	ldr	r2, [sp, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d1a4      	bne.n	8007bb2 <_dtoa_r+0x9c2>
 8007c68:	f10b 0b01 	add.w	fp, fp, #1
 8007c6c:	2331      	movs	r3, #49	; 0x31
 8007c6e:	e778      	b.n	8007b62 <_dtoa_r+0x972>
 8007c70:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <_dtoa_r+0xad4>)
 8007c72:	f7ff bb27 	b.w	80072c4 <_dtoa_r+0xd4>
 8007c76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f47f ab03 	bne.w	8007284 <_dtoa_r+0x94>
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <_dtoa_r+0xad8>)
 8007c80:	f7ff bb20 	b.w	80072c4 <_dtoa_r+0xd4>
 8007c84:	f1ba 0f00 	cmp.w	sl, #0
 8007c88:	dc03      	bgt.n	8007c92 <_dtoa_r+0xaa2>
 8007c8a:	9b06      	ldr	r3, [sp, #24]
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	f73f aec7 	bgt.w	8007a20 <_dtoa_r+0x830>
 8007c92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c96:	4621      	mov	r1, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f7ff fa1d 	bl	80070d8 <quorem>
 8007c9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ca2:	f808 3b01 	strb.w	r3, [r8], #1
 8007ca6:	9a01      	ldr	r2, [sp, #4]
 8007ca8:	eba8 0202 	sub.w	r2, r8, r2
 8007cac:	4592      	cmp	sl, r2
 8007cae:	ddb7      	ble.n	8007c20 <_dtoa_r+0xa30>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 faa4 	bl	8008204 <__multadd>
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	e7ea      	b.n	8007c96 <_dtoa_r+0xaa6>
 8007cc0:	0800912b 	.word	0x0800912b
 8007cc4:	08009088 	.word	0x08009088
 8007cc8:	080090ac 	.word	0x080090ac

08007ccc <__sflush_r>:
 8007ccc:	898a      	ldrh	r2, [r1, #12]
 8007cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	0710      	lsls	r0, r2, #28
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	d458      	bmi.n	8007d8c <__sflush_r+0xc0>
 8007cda:	684b      	ldr	r3, [r1, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dc05      	bgt.n	8007cec <__sflush_r+0x20>
 8007ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dc02      	bgt.n	8007cec <__sflush_r+0x20>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d0f9      	beq.n	8007ce6 <__sflush_r+0x1a>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cf8:	682f      	ldr	r7, [r5, #0]
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	d032      	beq.n	8007d64 <__sflush_r+0x98>
 8007cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	075a      	lsls	r2, r3, #29
 8007d04:	d505      	bpl.n	8007d12 <__sflush_r+0x46>
 8007d06:	6863      	ldr	r3, [r4, #4]
 8007d08:	1ac0      	subs	r0, r0, r3
 8007d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d0c:	b10b      	cbz	r3, 8007d12 <__sflush_r+0x46>
 8007d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	4602      	mov	r2, r0
 8007d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d18:	6a21      	ldr	r1, [r4, #32]
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b0      	blx	r6
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	d106      	bne.n	8007d32 <__sflush_r+0x66>
 8007d24:	6829      	ldr	r1, [r5, #0]
 8007d26:	291d      	cmp	r1, #29
 8007d28:	d82c      	bhi.n	8007d84 <__sflush_r+0xb8>
 8007d2a:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <__sflush_r+0x108>)
 8007d2c:	40ca      	lsrs	r2, r1
 8007d2e:	07d6      	lsls	r6, r2, #31
 8007d30:	d528      	bpl.n	8007d84 <__sflush_r+0xb8>
 8007d32:	2200      	movs	r2, #0
 8007d34:	6062      	str	r2, [r4, #4]
 8007d36:	04d9      	lsls	r1, r3, #19
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	6022      	str	r2, [r4, #0]
 8007d3c:	d504      	bpl.n	8007d48 <__sflush_r+0x7c>
 8007d3e:	1c42      	adds	r2, r0, #1
 8007d40:	d101      	bne.n	8007d46 <__sflush_r+0x7a>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	b903      	cbnz	r3, 8007d48 <__sflush_r+0x7c>
 8007d46:	6560      	str	r0, [r4, #84]	; 0x54
 8007d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d0ca      	beq.n	8007ce6 <__sflush_r+0x1a>
 8007d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d002      	beq.n	8007d5e <__sflush_r+0x92>
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f000 fd8b 	bl	8008874 <_free_r>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	6360      	str	r0, [r4, #52]	; 0x34
 8007d62:	e7c1      	b.n	8007ce8 <__sflush_r+0x1c>
 8007d64:	6a21      	ldr	r1, [r4, #32]
 8007d66:	2301      	movs	r3, #1
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b0      	blx	r6
 8007d6c:	1c41      	adds	r1, r0, #1
 8007d6e:	d1c7      	bne.n	8007d00 <__sflush_r+0x34>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0c4      	beq.n	8007d00 <__sflush_r+0x34>
 8007d76:	2b1d      	cmp	r3, #29
 8007d78:	d001      	beq.n	8007d7e <__sflush_r+0xb2>
 8007d7a:	2b16      	cmp	r3, #22
 8007d7c:	d101      	bne.n	8007d82 <__sflush_r+0xb6>
 8007d7e:	602f      	str	r7, [r5, #0]
 8007d80:	e7b1      	b.n	8007ce6 <__sflush_r+0x1a>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	e7ad      	b.n	8007ce8 <__sflush_r+0x1c>
 8007d8c:	690f      	ldr	r7, [r1, #16]
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	d0a9      	beq.n	8007ce6 <__sflush_r+0x1a>
 8007d92:	0793      	lsls	r3, r2, #30
 8007d94:	680e      	ldr	r6, [r1, #0]
 8007d96:	bf08      	it	eq
 8007d98:	694b      	ldreq	r3, [r1, #20]
 8007d9a:	600f      	str	r7, [r1, #0]
 8007d9c:	bf18      	it	ne
 8007d9e:	2300      	movne	r3, #0
 8007da0:	eba6 0807 	sub.w	r8, r6, r7
 8007da4:	608b      	str	r3, [r1, #8]
 8007da6:	f1b8 0f00 	cmp.w	r8, #0
 8007daa:	dd9c      	ble.n	8007ce6 <__sflush_r+0x1a>
 8007dac:	6a21      	ldr	r1, [r4, #32]
 8007dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007db0:	4643      	mov	r3, r8
 8007db2:	463a      	mov	r2, r7
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b0      	blx	r6
 8007db8:	2800      	cmp	r0, #0
 8007dba:	dc06      	bgt.n	8007dca <__sflush_r+0xfe>
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	e78e      	b.n	8007ce8 <__sflush_r+0x1c>
 8007dca:	4407      	add	r7, r0
 8007dcc:	eba8 0800 	sub.w	r8, r8, r0
 8007dd0:	e7e9      	b.n	8007da6 <__sflush_r+0xda>
 8007dd2:	bf00      	nop
 8007dd4:	20400001 	.word	0x20400001

08007dd8 <_fflush_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	690b      	ldr	r3, [r1, #16]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	b913      	cbnz	r3, 8007de8 <_fflush_r+0x10>
 8007de2:	2500      	movs	r5, #0
 8007de4:	4628      	mov	r0, r5
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	b118      	cbz	r0, 8007df2 <_fflush_r+0x1a>
 8007dea:	6983      	ldr	r3, [r0, #24]
 8007dec:	b90b      	cbnz	r3, 8007df2 <_fflush_r+0x1a>
 8007dee:	f000 f887 	bl	8007f00 <__sinit>
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <_fflush_r+0x6c>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d11b      	bne.n	8007e30 <_fflush_r+0x58>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0ef      	beq.n	8007de2 <_fflush_r+0xa>
 8007e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e04:	07d0      	lsls	r0, r2, #31
 8007e06:	d404      	bmi.n	8007e12 <_fflush_r+0x3a>
 8007e08:	0599      	lsls	r1, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_fflush_r+0x3a>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0e:	f000 f91a 	bl	8008046 <__retarget_lock_acquire_recursive>
 8007e12:	4628      	mov	r0, r5
 8007e14:	4621      	mov	r1, r4
 8007e16:	f7ff ff59 	bl	8007ccc <__sflush_r>
 8007e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e1c:	07da      	lsls	r2, r3, #31
 8007e1e:	4605      	mov	r5, r0
 8007e20:	d4e0      	bmi.n	8007de4 <_fflush_r+0xc>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	059b      	lsls	r3, r3, #22
 8007e26:	d4dd      	bmi.n	8007de4 <_fflush_r+0xc>
 8007e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2a:	f000 f90d 	bl	8008048 <__retarget_lock_release_recursive>
 8007e2e:	e7d9      	b.n	8007de4 <_fflush_r+0xc>
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <_fflush_r+0x70>)
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d101      	bne.n	8007e3a <_fflush_r+0x62>
 8007e36:	68ac      	ldr	r4, [r5, #8]
 8007e38:	e7df      	b.n	8007dfa <_fflush_r+0x22>
 8007e3a:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <_fflush_r+0x74>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	bf08      	it	eq
 8007e40:	68ec      	ldreq	r4, [r5, #12]
 8007e42:	e7da      	b.n	8007dfa <_fflush_r+0x22>
 8007e44:	0800915c 	.word	0x0800915c
 8007e48:	0800917c 	.word	0x0800917c
 8007e4c:	0800913c 	.word	0x0800913c

08007e50 <std>:
 8007e50:	2300      	movs	r3, #0
 8007e52:	b510      	push	{r4, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	e9c0 3300 	strd	r3, r3, [r0]
 8007e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e5e:	6083      	str	r3, [r0, #8]
 8007e60:	8181      	strh	r1, [r0, #12]
 8007e62:	6643      	str	r3, [r0, #100]	; 0x64
 8007e64:	81c2      	strh	r2, [r0, #14]
 8007e66:	6183      	str	r3, [r0, #24]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	305c      	adds	r0, #92	; 0x5c
 8007e6e:	f7fe fb99 	bl	80065a4 <memset>
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <std+0x38>)
 8007e74:	6263      	str	r3, [r4, #36]	; 0x24
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <std+0x3c>)
 8007e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <std+0x40>)
 8007e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <std+0x44>)
 8007e80:	6224      	str	r4, [r4, #32]
 8007e82:	6323      	str	r3, [r4, #48]	; 0x30
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	bf00      	nop
 8007e88:	08008d09 	.word	0x08008d09
 8007e8c:	08008d2b 	.word	0x08008d2b
 8007e90:	08008d63 	.word	0x08008d63
 8007e94:	08008d87 	.word	0x08008d87

08007e98 <_cleanup_r>:
 8007e98:	4901      	ldr	r1, [pc, #4]	; (8007ea0 <_cleanup_r+0x8>)
 8007e9a:	f000 b8af 	b.w	8007ffc <_fwalk_reent>
 8007e9e:	bf00      	nop
 8007ea0:	08007dd9 	.word	0x08007dd9

08007ea4 <__sfmoreglue>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	2268      	movs	r2, #104	; 0x68
 8007ea8:	1e4d      	subs	r5, r1, #1
 8007eaa:	4355      	muls	r5, r2
 8007eac:	460e      	mov	r6, r1
 8007eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eb2:	f000 fd4b 	bl	800894c <_malloc_r>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	b140      	cbz	r0, 8007ecc <__sfmoreglue+0x28>
 8007eba:	2100      	movs	r1, #0
 8007ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8007ec0:	300c      	adds	r0, #12
 8007ec2:	60a0      	str	r0, [r4, #8]
 8007ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ec8:	f7fe fb6c 	bl	80065a4 <memset>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	bd70      	pop	{r4, r5, r6, pc}

08007ed0 <__sfp_lock_acquire>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	; (8007ed8 <__sfp_lock_acquire+0x8>)
 8007ed2:	f000 b8b8 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	240002e1 	.word	0x240002e1

08007edc <__sfp_lock_release>:
 8007edc:	4801      	ldr	r0, [pc, #4]	; (8007ee4 <__sfp_lock_release+0x8>)
 8007ede:	f000 b8b3 	b.w	8008048 <__retarget_lock_release_recursive>
 8007ee2:	bf00      	nop
 8007ee4:	240002e1 	.word	0x240002e1

08007ee8 <__sinit_lock_acquire>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__sinit_lock_acquire+0x8>)
 8007eea:	f000 b8ac 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8007eee:	bf00      	nop
 8007ef0:	240002e2 	.word	0x240002e2

08007ef4 <__sinit_lock_release>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sinit_lock_release+0x8>)
 8007ef6:	f000 b8a7 	b.w	8008048 <__retarget_lock_release_recursive>
 8007efa:	bf00      	nop
 8007efc:	240002e2 	.word	0x240002e2

08007f00 <__sinit>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	4604      	mov	r4, r0
 8007f04:	f7ff fff0 	bl	8007ee8 <__sinit_lock_acquire>
 8007f08:	69a3      	ldr	r3, [r4, #24]
 8007f0a:	b11b      	cbz	r3, 8007f14 <__sinit+0x14>
 8007f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f10:	f7ff bff0 	b.w	8007ef4 <__sinit_lock_release>
 8007f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f18:	6523      	str	r3, [r4, #80]	; 0x50
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <__sinit+0x68>)
 8007f1c:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <__sinit+0x6c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	bf04      	itt	eq
 8007f26:	2301      	moveq	r3, #1
 8007f28:	61a3      	streq	r3, [r4, #24]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 f820 	bl	8007f70 <__sfp>
 8007f30:	6060      	str	r0, [r4, #4]
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f81c 	bl	8007f70 <__sfp>
 8007f38:	60a0      	str	r0, [r4, #8]
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f818 	bl	8007f70 <__sfp>
 8007f40:	2200      	movs	r2, #0
 8007f42:	60e0      	str	r0, [r4, #12]
 8007f44:	2104      	movs	r1, #4
 8007f46:	6860      	ldr	r0, [r4, #4]
 8007f48:	f7ff ff82 	bl	8007e50 <std>
 8007f4c:	68a0      	ldr	r0, [r4, #8]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	2109      	movs	r1, #9
 8007f52:	f7ff ff7d 	bl	8007e50 <std>
 8007f56:	68e0      	ldr	r0, [r4, #12]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	2112      	movs	r1, #18
 8007f5c:	f7ff ff78 	bl	8007e50 <std>
 8007f60:	2301      	movs	r3, #1
 8007f62:	61a3      	str	r3, [r4, #24]
 8007f64:	e7d2      	b.n	8007f0c <__sinit+0xc>
 8007f66:	bf00      	nop
 8007f68:	08009074 	.word	0x08009074
 8007f6c:	08007e99 	.word	0x08007e99

08007f70 <__sfp>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	4607      	mov	r7, r0
 8007f74:	f7ff ffac 	bl	8007ed0 <__sfp_lock_acquire>
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <__sfp+0x84>)
 8007f7a:	681e      	ldr	r6, [r3, #0]
 8007f7c:	69b3      	ldr	r3, [r6, #24]
 8007f7e:	b913      	cbnz	r3, 8007f86 <__sfp+0x16>
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffbd 	bl	8007f00 <__sinit>
 8007f86:	3648      	adds	r6, #72	; 0x48
 8007f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	d503      	bpl.n	8007f98 <__sfp+0x28>
 8007f90:	6833      	ldr	r3, [r6, #0]
 8007f92:	b30b      	cbz	r3, 8007fd8 <__sfp+0x68>
 8007f94:	6836      	ldr	r6, [r6, #0]
 8007f96:	e7f7      	b.n	8007f88 <__sfp+0x18>
 8007f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f9c:	b9d5      	cbnz	r5, 8007fd4 <__sfp+0x64>
 8007f9e:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <__sfp+0x88>)
 8007fa0:	60e3      	str	r3, [r4, #12]
 8007fa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8007fa8:	f000 f84c 	bl	8008044 <__retarget_lock_init_recursive>
 8007fac:	f7ff ff96 	bl	8007edc <__sfp_lock_release>
 8007fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fb8:	6025      	str	r5, [r4, #0]
 8007fba:	61a5      	str	r5, [r4, #24]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fc4:	f7fe faee 	bl	80065a4 <memset>
 8007fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd4:	3468      	adds	r4, #104	; 0x68
 8007fd6:	e7d9      	b.n	8007f8c <__sfp+0x1c>
 8007fd8:	2104      	movs	r1, #4
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff ff62 	bl	8007ea4 <__sfmoreglue>
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	6030      	str	r0, [r6, #0]
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d1d5      	bne.n	8007f94 <__sfp+0x24>
 8007fe8:	f7ff ff78 	bl	8007edc <__sfp_lock_release>
 8007fec:	230c      	movs	r3, #12
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	e7ee      	b.n	8007fd0 <__sfp+0x60>
 8007ff2:	bf00      	nop
 8007ff4:	08009074 	.word	0x08009074
 8007ff8:	ffff0001 	.word	0xffff0001

08007ffc <_fwalk_reent>:
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008000:	4606      	mov	r6, r0
 8008002:	4688      	mov	r8, r1
 8008004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008008:	2700      	movs	r7, #0
 800800a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800800e:	f1b9 0901 	subs.w	r9, r9, #1
 8008012:	d505      	bpl.n	8008020 <_fwalk_reent+0x24>
 8008014:	6824      	ldr	r4, [r4, #0]
 8008016:	2c00      	cmp	r4, #0
 8008018:	d1f7      	bne.n	800800a <_fwalk_reent+0xe>
 800801a:	4638      	mov	r0, r7
 800801c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008020:	89ab      	ldrh	r3, [r5, #12]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d907      	bls.n	8008036 <_fwalk_reent+0x3a>
 8008026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800802a:	3301      	adds	r3, #1
 800802c:	d003      	beq.n	8008036 <_fwalk_reent+0x3a>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	47c0      	blx	r8
 8008034:	4307      	orrs	r7, r0
 8008036:	3568      	adds	r5, #104	; 0x68
 8008038:	e7e9      	b.n	800800e <_fwalk_reent+0x12>
	...

0800803c <_localeconv_r>:
 800803c:	4800      	ldr	r0, [pc, #0]	; (8008040 <_localeconv_r+0x4>)
 800803e:	4770      	bx	lr
 8008040:	24000164 	.word	0x24000164

08008044 <__retarget_lock_init_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_acquire_recursive>:
 8008046:	4770      	bx	lr

08008048 <__retarget_lock_release_recursive>:
 8008048:	4770      	bx	lr

0800804a <__swhatbuf_r>:
 800804a:	b570      	push	{r4, r5, r6, lr}
 800804c:	460e      	mov	r6, r1
 800804e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008052:	2900      	cmp	r1, #0
 8008054:	b096      	sub	sp, #88	; 0x58
 8008056:	4614      	mov	r4, r2
 8008058:	461d      	mov	r5, r3
 800805a:	da08      	bge.n	800806e <__swhatbuf_r+0x24>
 800805c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	602a      	str	r2, [r5, #0]
 8008064:	061a      	lsls	r2, r3, #24
 8008066:	d410      	bmi.n	800808a <__swhatbuf_r+0x40>
 8008068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806c:	e00e      	b.n	800808c <__swhatbuf_r+0x42>
 800806e:	466a      	mov	r2, sp
 8008070:	f000 fee0 	bl	8008e34 <_fstat_r>
 8008074:	2800      	cmp	r0, #0
 8008076:	dbf1      	blt.n	800805c <__swhatbuf_r+0x12>
 8008078:	9a01      	ldr	r2, [sp, #4]
 800807a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800807e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008082:	425a      	negs	r2, r3
 8008084:	415a      	adcs	r2, r3
 8008086:	602a      	str	r2, [r5, #0]
 8008088:	e7ee      	b.n	8008068 <__swhatbuf_r+0x1e>
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	2000      	movs	r0, #0
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	b016      	add	sp, #88	; 0x58
 8008092:	bd70      	pop	{r4, r5, r6, pc}

08008094 <__smakebuf_r>:
 8008094:	898b      	ldrh	r3, [r1, #12]
 8008096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008098:	079d      	lsls	r5, r3, #30
 800809a:	4606      	mov	r6, r0
 800809c:	460c      	mov	r4, r1
 800809e:	d507      	bpl.n	80080b0 <__smakebuf_r+0x1c>
 80080a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	2301      	movs	r3, #1
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	b002      	add	sp, #8
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	ab01      	add	r3, sp, #4
 80080b2:	466a      	mov	r2, sp
 80080b4:	f7ff ffc9 	bl	800804a <__swhatbuf_r>
 80080b8:	9900      	ldr	r1, [sp, #0]
 80080ba:	4605      	mov	r5, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 fc45 	bl	800894c <_malloc_r>
 80080c2:	b948      	cbnz	r0, 80080d8 <__smakebuf_r+0x44>
 80080c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c8:	059a      	lsls	r2, r3, #22
 80080ca:	d4ef      	bmi.n	80080ac <__smakebuf_r+0x18>
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	e7e3      	b.n	80080a0 <__smakebuf_r+0xc>
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <__smakebuf_r+0x7c>)
 80080da:	62b3      	str	r3, [r6, #40]	; 0x28
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	6020      	str	r0, [r4, #0]
 80080e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	9b00      	ldr	r3, [sp, #0]
 80080e8:	6163      	str	r3, [r4, #20]
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	6120      	str	r0, [r4, #16]
 80080ee:	b15b      	cbz	r3, 8008108 <__smakebuf_r+0x74>
 80080f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 feaf 	bl	8008e58 <_isatty_r>
 80080fa:	b128      	cbz	r0, 8008108 <__smakebuf_r+0x74>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	89a0      	ldrh	r0, [r4, #12]
 800810a:	4305      	orrs	r5, r0
 800810c:	81a5      	strh	r5, [r4, #12]
 800810e:	e7cd      	b.n	80080ac <__smakebuf_r+0x18>
 8008110:	08007e99 	.word	0x08007e99

08008114 <malloc>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <malloc+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f000 bc17 	b.w	800894c <_malloc_r>
 800811e:	bf00      	nop
 8008120:	24000010 	.word	0x24000010

08008124 <memcpy>:
 8008124:	440a      	add	r2, r1
 8008126:	4291      	cmp	r1, r2
 8008128:	f100 33ff 	add.w	r3, r0, #4294967295
 800812c:	d100      	bne.n	8008130 <memcpy+0xc>
 800812e:	4770      	bx	lr
 8008130:	b510      	push	{r4, lr}
 8008132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800813a:	4291      	cmp	r1, r2
 800813c:	d1f9      	bne.n	8008132 <memcpy+0xe>
 800813e:	bd10      	pop	{r4, pc}

08008140 <_Balloc>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	b976      	cbnz	r6, 8008168 <_Balloc+0x28>
 800814a:	2010      	movs	r0, #16
 800814c:	f7ff ffe2 	bl	8008114 <malloc>
 8008150:	4602      	mov	r2, r0
 8008152:	6260      	str	r0, [r4, #36]	; 0x24
 8008154:	b920      	cbnz	r0, 8008160 <_Balloc+0x20>
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <_Balloc+0x78>)
 8008158:	4818      	ldr	r0, [pc, #96]	; (80081bc <_Balloc+0x7c>)
 800815a:	2166      	movs	r1, #102	; 0x66
 800815c:	f000 fe2a 	bl	8008db4 <__assert_func>
 8008160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008164:	6006      	str	r6, [r0, #0]
 8008166:	60c6      	str	r6, [r0, #12]
 8008168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800816a:	68f3      	ldr	r3, [r6, #12]
 800816c:	b183      	cbz	r3, 8008190 <_Balloc+0x50>
 800816e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008176:	b9b8      	cbnz	r0, 80081a8 <_Balloc+0x68>
 8008178:	2101      	movs	r1, #1
 800817a:	fa01 f605 	lsl.w	r6, r1, r5
 800817e:	1d72      	adds	r2, r6, #5
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fb60 	bl	8008848 <_calloc_r>
 8008188:	b160      	cbz	r0, 80081a4 <_Balloc+0x64>
 800818a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800818e:	e00e      	b.n	80081ae <_Balloc+0x6e>
 8008190:	2221      	movs	r2, #33	; 0x21
 8008192:	2104      	movs	r1, #4
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fb57 	bl	8008848 <_calloc_r>
 800819a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800819c:	60f0      	str	r0, [r6, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e4      	bne.n	800816e <_Balloc+0x2e>
 80081a4:	2000      	movs	r0, #0
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	6802      	ldr	r2, [r0, #0]
 80081aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081ae:	2300      	movs	r3, #0
 80081b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081b4:	e7f7      	b.n	80081a6 <_Balloc+0x66>
 80081b6:	bf00      	nop
 80081b8:	080090b9 	.word	0x080090b9
 80081bc:	0800919c 	.word	0x0800919c

080081c0 <_Bfree>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081c4:	4605      	mov	r5, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	b976      	cbnz	r6, 80081e8 <_Bfree+0x28>
 80081ca:	2010      	movs	r0, #16
 80081cc:	f7ff ffa2 	bl	8008114 <malloc>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6268      	str	r0, [r5, #36]	; 0x24
 80081d4:	b920      	cbnz	r0, 80081e0 <_Bfree+0x20>
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <_Bfree+0x3c>)
 80081d8:	4809      	ldr	r0, [pc, #36]	; (8008200 <_Bfree+0x40>)
 80081da:	218a      	movs	r1, #138	; 0x8a
 80081dc:	f000 fdea 	bl	8008db4 <__assert_func>
 80081e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e4:	6006      	str	r6, [r0, #0]
 80081e6:	60c6      	str	r6, [r0, #12]
 80081e8:	b13c      	cbz	r4, 80081fa <_Bfree+0x3a>
 80081ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081ec:	6862      	ldr	r2, [r4, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f4:	6021      	str	r1, [r4, #0]
 80081f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	080090b9 	.word	0x080090b9
 8008200:	0800919c 	.word	0x0800919c

08008204 <__multadd>:
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	690d      	ldr	r5, [r1, #16]
 800820a:	4607      	mov	r7, r0
 800820c:	460c      	mov	r4, r1
 800820e:	461e      	mov	r6, r3
 8008210:	f101 0c14 	add.w	ip, r1, #20
 8008214:	2000      	movs	r0, #0
 8008216:	f8dc 3000 	ldr.w	r3, [ip]
 800821a:	b299      	uxth	r1, r3
 800821c:	fb02 6101 	mla	r1, r2, r1, r6
 8008220:	0c1e      	lsrs	r6, r3, #16
 8008222:	0c0b      	lsrs	r3, r1, #16
 8008224:	fb02 3306 	mla	r3, r2, r6, r3
 8008228:	b289      	uxth	r1, r1
 800822a:	3001      	adds	r0, #1
 800822c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008230:	4285      	cmp	r5, r0
 8008232:	f84c 1b04 	str.w	r1, [ip], #4
 8008236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800823a:	dcec      	bgt.n	8008216 <__multadd+0x12>
 800823c:	b30e      	cbz	r6, 8008282 <__multadd+0x7e>
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc19      	bgt.n	8008278 <__multadd+0x74>
 8008244:	6861      	ldr	r1, [r4, #4]
 8008246:	4638      	mov	r0, r7
 8008248:	3101      	adds	r1, #1
 800824a:	f7ff ff79 	bl	8008140 <_Balloc>
 800824e:	4680      	mov	r8, r0
 8008250:	b928      	cbnz	r0, 800825e <__multadd+0x5a>
 8008252:	4602      	mov	r2, r0
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <__multadd+0x84>)
 8008256:	480d      	ldr	r0, [pc, #52]	; (800828c <__multadd+0x88>)
 8008258:	21b5      	movs	r1, #181	; 0xb5
 800825a:	f000 fdab 	bl	8008db4 <__assert_func>
 800825e:	6922      	ldr	r2, [r4, #16]
 8008260:	3202      	adds	r2, #2
 8008262:	f104 010c 	add.w	r1, r4, #12
 8008266:	0092      	lsls	r2, r2, #2
 8008268:	300c      	adds	r0, #12
 800826a:	f7ff ff5b 	bl	8008124 <memcpy>
 800826e:	4621      	mov	r1, r4
 8008270:	4638      	mov	r0, r7
 8008272:	f7ff ffa5 	bl	80081c0 <_Bfree>
 8008276:	4644      	mov	r4, r8
 8008278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800827c:	3501      	adds	r5, #1
 800827e:	615e      	str	r6, [r3, #20]
 8008280:	6125      	str	r5, [r4, #16]
 8008282:	4620      	mov	r0, r4
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	0800912b 	.word	0x0800912b
 800828c:	0800919c 	.word	0x0800919c

08008290 <__hi0bits>:
 8008290:	0c03      	lsrs	r3, r0, #16
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	b9d3      	cbnz	r3, 80082cc <__hi0bits+0x3c>
 8008296:	0400      	lsls	r0, r0, #16
 8008298:	2310      	movs	r3, #16
 800829a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800829e:	bf04      	itt	eq
 80082a0:	0200      	lsleq	r0, r0, #8
 80082a2:	3308      	addeq	r3, #8
 80082a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082a8:	bf04      	itt	eq
 80082aa:	0100      	lsleq	r0, r0, #4
 80082ac:	3304      	addeq	r3, #4
 80082ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082b2:	bf04      	itt	eq
 80082b4:	0080      	lsleq	r0, r0, #2
 80082b6:	3302      	addeq	r3, #2
 80082b8:	2800      	cmp	r0, #0
 80082ba:	db05      	blt.n	80082c8 <__hi0bits+0x38>
 80082bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082c0:	f103 0301 	add.w	r3, r3, #1
 80082c4:	bf08      	it	eq
 80082c6:	2320      	moveq	r3, #32
 80082c8:	4618      	mov	r0, r3
 80082ca:	4770      	bx	lr
 80082cc:	2300      	movs	r3, #0
 80082ce:	e7e4      	b.n	800829a <__hi0bits+0xa>

080082d0 <__lo0bits>:
 80082d0:	6803      	ldr	r3, [r0, #0]
 80082d2:	f013 0207 	ands.w	r2, r3, #7
 80082d6:	4601      	mov	r1, r0
 80082d8:	d00b      	beq.n	80082f2 <__lo0bits+0x22>
 80082da:	07da      	lsls	r2, r3, #31
 80082dc:	d423      	bmi.n	8008326 <__lo0bits+0x56>
 80082de:	0798      	lsls	r0, r3, #30
 80082e0:	bf49      	itett	mi
 80082e2:	085b      	lsrmi	r3, r3, #1
 80082e4:	089b      	lsrpl	r3, r3, #2
 80082e6:	2001      	movmi	r0, #1
 80082e8:	600b      	strmi	r3, [r1, #0]
 80082ea:	bf5c      	itt	pl
 80082ec:	600b      	strpl	r3, [r1, #0]
 80082ee:	2002      	movpl	r0, #2
 80082f0:	4770      	bx	lr
 80082f2:	b298      	uxth	r0, r3
 80082f4:	b9a8      	cbnz	r0, 8008322 <__lo0bits+0x52>
 80082f6:	0c1b      	lsrs	r3, r3, #16
 80082f8:	2010      	movs	r0, #16
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	b90a      	cbnz	r2, 8008302 <__lo0bits+0x32>
 80082fe:	3008      	adds	r0, #8
 8008300:	0a1b      	lsrs	r3, r3, #8
 8008302:	071a      	lsls	r2, r3, #28
 8008304:	bf04      	itt	eq
 8008306:	091b      	lsreq	r3, r3, #4
 8008308:	3004      	addeq	r0, #4
 800830a:	079a      	lsls	r2, r3, #30
 800830c:	bf04      	itt	eq
 800830e:	089b      	lsreq	r3, r3, #2
 8008310:	3002      	addeq	r0, #2
 8008312:	07da      	lsls	r2, r3, #31
 8008314:	d403      	bmi.n	800831e <__lo0bits+0x4e>
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	f100 0001 	add.w	r0, r0, #1
 800831c:	d005      	beq.n	800832a <__lo0bits+0x5a>
 800831e:	600b      	str	r3, [r1, #0]
 8008320:	4770      	bx	lr
 8008322:	4610      	mov	r0, r2
 8008324:	e7e9      	b.n	80082fa <__lo0bits+0x2a>
 8008326:	2000      	movs	r0, #0
 8008328:	4770      	bx	lr
 800832a:	2020      	movs	r0, #32
 800832c:	4770      	bx	lr
	...

08008330 <__i2b>:
 8008330:	b510      	push	{r4, lr}
 8008332:	460c      	mov	r4, r1
 8008334:	2101      	movs	r1, #1
 8008336:	f7ff ff03 	bl	8008140 <_Balloc>
 800833a:	4602      	mov	r2, r0
 800833c:	b928      	cbnz	r0, 800834a <__i2b+0x1a>
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <__i2b+0x24>)
 8008340:	4805      	ldr	r0, [pc, #20]	; (8008358 <__i2b+0x28>)
 8008342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008346:	f000 fd35 	bl	8008db4 <__assert_func>
 800834a:	2301      	movs	r3, #1
 800834c:	6144      	str	r4, [r0, #20]
 800834e:	6103      	str	r3, [r0, #16]
 8008350:	bd10      	pop	{r4, pc}
 8008352:	bf00      	nop
 8008354:	0800912b 	.word	0x0800912b
 8008358:	0800919c 	.word	0x0800919c

0800835c <__multiply>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	4691      	mov	r9, r2
 8008362:	690a      	ldr	r2, [r1, #16]
 8008364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008368:	429a      	cmp	r2, r3
 800836a:	bfb8      	it	lt
 800836c:	460b      	movlt	r3, r1
 800836e:	460c      	mov	r4, r1
 8008370:	bfbc      	itt	lt
 8008372:	464c      	movlt	r4, r9
 8008374:	4699      	movlt	r9, r3
 8008376:	6927      	ldr	r7, [r4, #16]
 8008378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	6861      	ldr	r1, [r4, #4]
 8008380:	eb07 060a 	add.w	r6, r7, sl
 8008384:	42b3      	cmp	r3, r6
 8008386:	b085      	sub	sp, #20
 8008388:	bfb8      	it	lt
 800838a:	3101      	addlt	r1, #1
 800838c:	f7ff fed8 	bl	8008140 <_Balloc>
 8008390:	b930      	cbnz	r0, 80083a0 <__multiply+0x44>
 8008392:	4602      	mov	r2, r0
 8008394:	4b44      	ldr	r3, [pc, #272]	; (80084a8 <__multiply+0x14c>)
 8008396:	4845      	ldr	r0, [pc, #276]	; (80084ac <__multiply+0x150>)
 8008398:	f240 115d 	movw	r1, #349	; 0x15d
 800839c:	f000 fd0a 	bl	8008db4 <__assert_func>
 80083a0:	f100 0514 	add.w	r5, r0, #20
 80083a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083a8:	462b      	mov	r3, r5
 80083aa:	2200      	movs	r2, #0
 80083ac:	4543      	cmp	r3, r8
 80083ae:	d321      	bcc.n	80083f4 <__multiply+0x98>
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083b8:	f109 0314 	add.w	r3, r9, #20
 80083bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083c0:	9202      	str	r2, [sp, #8]
 80083c2:	1b3a      	subs	r2, r7, r4
 80083c4:	3a15      	subs	r2, #21
 80083c6:	f022 0203 	bic.w	r2, r2, #3
 80083ca:	3204      	adds	r2, #4
 80083cc:	f104 0115 	add.w	r1, r4, #21
 80083d0:	428f      	cmp	r7, r1
 80083d2:	bf38      	it	cc
 80083d4:	2204      	movcc	r2, #4
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9a02      	ldr	r2, [sp, #8]
 80083da:	9303      	str	r3, [sp, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d80c      	bhi.n	80083fa <__multiply+0x9e>
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	dd03      	ble.n	80083ec <__multiply+0x90>
 80083e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d05a      	beq.n	80084a2 <__multiply+0x146>
 80083ec:	6106      	str	r6, [r0, #16]
 80083ee:	b005      	add	sp, #20
 80083f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f4:	f843 2b04 	str.w	r2, [r3], #4
 80083f8:	e7d8      	b.n	80083ac <__multiply+0x50>
 80083fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80083fe:	f1ba 0f00 	cmp.w	sl, #0
 8008402:	d024      	beq.n	800844e <__multiply+0xf2>
 8008404:	f104 0e14 	add.w	lr, r4, #20
 8008408:	46a9      	mov	r9, r5
 800840a:	f04f 0c00 	mov.w	ip, #0
 800840e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008412:	f8d9 1000 	ldr.w	r1, [r9]
 8008416:	fa1f fb82 	uxth.w	fp, r2
 800841a:	b289      	uxth	r1, r1
 800841c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008424:	f8d9 2000 	ldr.w	r2, [r9]
 8008428:	4461      	add	r1, ip
 800842a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800842e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008436:	b289      	uxth	r1, r1
 8008438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800843c:	4577      	cmp	r7, lr
 800843e:	f849 1b04 	str.w	r1, [r9], #4
 8008442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008446:	d8e2      	bhi.n	800840e <__multiply+0xb2>
 8008448:	9a01      	ldr	r2, [sp, #4]
 800844a:	f845 c002 	str.w	ip, [r5, r2]
 800844e:	9a03      	ldr	r2, [sp, #12]
 8008450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008454:	3304      	adds	r3, #4
 8008456:	f1b9 0f00 	cmp.w	r9, #0
 800845a:	d020      	beq.n	800849e <__multiply+0x142>
 800845c:	6829      	ldr	r1, [r5, #0]
 800845e:	f104 0c14 	add.w	ip, r4, #20
 8008462:	46ae      	mov	lr, r5
 8008464:	f04f 0a00 	mov.w	sl, #0
 8008468:	f8bc b000 	ldrh.w	fp, [ip]
 800846c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008470:	fb09 220b 	mla	r2, r9, fp, r2
 8008474:	4492      	add	sl, r2
 8008476:	b289      	uxth	r1, r1
 8008478:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800847c:	f84e 1b04 	str.w	r1, [lr], #4
 8008480:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008484:	f8be 1000 	ldrh.w	r1, [lr]
 8008488:	0c12      	lsrs	r2, r2, #16
 800848a:	fb09 1102 	mla	r1, r9, r2, r1
 800848e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008492:	4567      	cmp	r7, ip
 8008494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008498:	d8e6      	bhi.n	8008468 <__multiply+0x10c>
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	50a9      	str	r1, [r5, r2]
 800849e:	3504      	adds	r5, #4
 80084a0:	e79a      	b.n	80083d8 <__multiply+0x7c>
 80084a2:	3e01      	subs	r6, #1
 80084a4:	e79c      	b.n	80083e0 <__multiply+0x84>
 80084a6:	bf00      	nop
 80084a8:	0800912b 	.word	0x0800912b
 80084ac:	0800919c 	.word	0x0800919c

080084b0 <__pow5mult>:
 80084b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b4:	4615      	mov	r5, r2
 80084b6:	f012 0203 	ands.w	r2, r2, #3
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	d007      	beq.n	80084d0 <__pow5mult+0x20>
 80084c0:	4c25      	ldr	r4, [pc, #148]	; (8008558 <__pow5mult+0xa8>)
 80084c2:	3a01      	subs	r2, #1
 80084c4:	2300      	movs	r3, #0
 80084c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ca:	f7ff fe9b 	bl	8008204 <__multadd>
 80084ce:	4607      	mov	r7, r0
 80084d0:	10ad      	asrs	r5, r5, #2
 80084d2:	d03d      	beq.n	8008550 <__pow5mult+0xa0>
 80084d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084d6:	b97c      	cbnz	r4, 80084f8 <__pow5mult+0x48>
 80084d8:	2010      	movs	r0, #16
 80084da:	f7ff fe1b 	bl	8008114 <malloc>
 80084de:	4602      	mov	r2, r0
 80084e0:	6270      	str	r0, [r6, #36]	; 0x24
 80084e2:	b928      	cbnz	r0, 80084f0 <__pow5mult+0x40>
 80084e4:	4b1d      	ldr	r3, [pc, #116]	; (800855c <__pow5mult+0xac>)
 80084e6:	481e      	ldr	r0, [pc, #120]	; (8008560 <__pow5mult+0xb0>)
 80084e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084ec:	f000 fc62 	bl	8008db4 <__assert_func>
 80084f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f4:	6004      	str	r4, [r0, #0]
 80084f6:	60c4      	str	r4, [r0, #12]
 80084f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008500:	b94c      	cbnz	r4, 8008516 <__pow5mult+0x66>
 8008502:	f240 2171 	movw	r1, #625	; 0x271
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff12 	bl	8008330 <__i2b>
 800850c:	2300      	movs	r3, #0
 800850e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008512:	4604      	mov	r4, r0
 8008514:	6003      	str	r3, [r0, #0]
 8008516:	f04f 0900 	mov.w	r9, #0
 800851a:	07eb      	lsls	r3, r5, #31
 800851c:	d50a      	bpl.n	8008534 <__pow5mult+0x84>
 800851e:	4639      	mov	r1, r7
 8008520:	4622      	mov	r2, r4
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff ff1a 	bl	800835c <__multiply>
 8008528:	4639      	mov	r1, r7
 800852a:	4680      	mov	r8, r0
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff fe47 	bl	80081c0 <_Bfree>
 8008532:	4647      	mov	r7, r8
 8008534:	106d      	asrs	r5, r5, #1
 8008536:	d00b      	beq.n	8008550 <__pow5mult+0xa0>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	b938      	cbnz	r0, 800854c <__pow5mult+0x9c>
 800853c:	4622      	mov	r2, r4
 800853e:	4621      	mov	r1, r4
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff ff0b 	bl	800835c <__multiply>
 8008546:	6020      	str	r0, [r4, #0]
 8008548:	f8c0 9000 	str.w	r9, [r0]
 800854c:	4604      	mov	r4, r0
 800854e:	e7e4      	b.n	800851a <__pow5mult+0x6a>
 8008550:	4638      	mov	r0, r7
 8008552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008556:	bf00      	nop
 8008558:	080092e8 	.word	0x080092e8
 800855c:	080090b9 	.word	0x080090b9
 8008560:	0800919c 	.word	0x0800919c

08008564 <__lshift>:
 8008564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	460c      	mov	r4, r1
 800856a:	6849      	ldr	r1, [r1, #4]
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	4607      	mov	r7, r0
 8008576:	4691      	mov	r9, r2
 8008578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800857c:	f108 0601 	add.w	r6, r8, #1
 8008580:	42b3      	cmp	r3, r6
 8008582:	db0b      	blt.n	800859c <__lshift+0x38>
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff fddb 	bl	8008140 <_Balloc>
 800858a:	4605      	mov	r5, r0
 800858c:	b948      	cbnz	r0, 80085a2 <__lshift+0x3e>
 800858e:	4602      	mov	r2, r0
 8008590:	4b2a      	ldr	r3, [pc, #168]	; (800863c <__lshift+0xd8>)
 8008592:	482b      	ldr	r0, [pc, #172]	; (8008640 <__lshift+0xdc>)
 8008594:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008598:	f000 fc0c 	bl	8008db4 <__assert_func>
 800859c:	3101      	adds	r1, #1
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	e7ee      	b.n	8008580 <__lshift+0x1c>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f100 0114 	add.w	r1, r0, #20
 80085a8:	f100 0210 	add.w	r2, r0, #16
 80085ac:	4618      	mov	r0, r3
 80085ae:	4553      	cmp	r3, sl
 80085b0:	db37      	blt.n	8008622 <__lshift+0xbe>
 80085b2:	6920      	ldr	r0, [r4, #16]
 80085b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b8:	f104 0314 	add.w	r3, r4, #20
 80085bc:	f019 091f 	ands.w	r9, r9, #31
 80085c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085c8:	d02f      	beq.n	800862a <__lshift+0xc6>
 80085ca:	f1c9 0e20 	rsb	lr, r9, #32
 80085ce:	468a      	mov	sl, r1
 80085d0:	f04f 0c00 	mov.w	ip, #0
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	fa02 f209 	lsl.w	r2, r2, r9
 80085da:	ea42 020c 	orr.w	r2, r2, ip
 80085de:	f84a 2b04 	str.w	r2, [sl], #4
 80085e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e6:	4298      	cmp	r0, r3
 80085e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085ec:	d8f2      	bhi.n	80085d4 <__lshift+0x70>
 80085ee:	1b03      	subs	r3, r0, r4
 80085f0:	3b15      	subs	r3, #21
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	3304      	adds	r3, #4
 80085f8:	f104 0215 	add.w	r2, r4, #21
 80085fc:	4290      	cmp	r0, r2
 80085fe:	bf38      	it	cc
 8008600:	2304      	movcc	r3, #4
 8008602:	f841 c003 	str.w	ip, [r1, r3]
 8008606:	f1bc 0f00 	cmp.w	ip, #0
 800860a:	d001      	beq.n	8008610 <__lshift+0xac>
 800860c:	f108 0602 	add.w	r6, r8, #2
 8008610:	3e01      	subs	r6, #1
 8008612:	4638      	mov	r0, r7
 8008614:	612e      	str	r6, [r5, #16]
 8008616:	4621      	mov	r1, r4
 8008618:	f7ff fdd2 	bl	80081c0 <_Bfree>
 800861c:	4628      	mov	r0, r5
 800861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008622:	f842 0f04 	str.w	r0, [r2, #4]!
 8008626:	3301      	adds	r3, #1
 8008628:	e7c1      	b.n	80085ae <__lshift+0x4a>
 800862a:	3904      	subs	r1, #4
 800862c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008630:	f841 2f04 	str.w	r2, [r1, #4]!
 8008634:	4298      	cmp	r0, r3
 8008636:	d8f9      	bhi.n	800862c <__lshift+0xc8>
 8008638:	e7ea      	b.n	8008610 <__lshift+0xac>
 800863a:	bf00      	nop
 800863c:	0800912b 	.word	0x0800912b
 8008640:	0800919c 	.word	0x0800919c

08008644 <__mcmp>:
 8008644:	b530      	push	{r4, r5, lr}
 8008646:	6902      	ldr	r2, [r0, #16]
 8008648:	690c      	ldr	r4, [r1, #16]
 800864a:	1b12      	subs	r2, r2, r4
 800864c:	d10e      	bne.n	800866c <__mcmp+0x28>
 800864e:	f100 0314 	add.w	r3, r0, #20
 8008652:	3114      	adds	r1, #20
 8008654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800865c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008664:	42a5      	cmp	r5, r4
 8008666:	d003      	beq.n	8008670 <__mcmp+0x2c>
 8008668:	d305      	bcc.n	8008676 <__mcmp+0x32>
 800866a:	2201      	movs	r2, #1
 800866c:	4610      	mov	r0, r2
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	4283      	cmp	r3, r0
 8008672:	d3f3      	bcc.n	800865c <__mcmp+0x18>
 8008674:	e7fa      	b.n	800866c <__mcmp+0x28>
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	e7f7      	b.n	800866c <__mcmp+0x28>

0800867c <__mdiff>:
 800867c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	4606      	mov	r6, r0
 8008684:	4611      	mov	r1, r2
 8008686:	4620      	mov	r0, r4
 8008688:	4690      	mov	r8, r2
 800868a:	f7ff ffdb 	bl	8008644 <__mcmp>
 800868e:	1e05      	subs	r5, r0, #0
 8008690:	d110      	bne.n	80086b4 <__mdiff+0x38>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff fd53 	bl	8008140 <_Balloc>
 800869a:	b930      	cbnz	r0, 80086aa <__mdiff+0x2e>
 800869c:	4b3a      	ldr	r3, [pc, #232]	; (8008788 <__mdiff+0x10c>)
 800869e:	4602      	mov	r2, r0
 80086a0:	f240 2132 	movw	r1, #562	; 0x232
 80086a4:	4839      	ldr	r0, [pc, #228]	; (800878c <__mdiff+0x110>)
 80086a6:	f000 fb85 	bl	8008db4 <__assert_func>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	bfa4      	itt	ge
 80086b6:	4643      	movge	r3, r8
 80086b8:	46a0      	movge	r8, r4
 80086ba:	4630      	mov	r0, r6
 80086bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086c0:	bfa6      	itte	ge
 80086c2:	461c      	movge	r4, r3
 80086c4:	2500      	movge	r5, #0
 80086c6:	2501      	movlt	r5, #1
 80086c8:	f7ff fd3a 	bl	8008140 <_Balloc>
 80086cc:	b920      	cbnz	r0, 80086d8 <__mdiff+0x5c>
 80086ce:	4b2e      	ldr	r3, [pc, #184]	; (8008788 <__mdiff+0x10c>)
 80086d0:	4602      	mov	r2, r0
 80086d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086d6:	e7e5      	b.n	80086a4 <__mdiff+0x28>
 80086d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086dc:	6926      	ldr	r6, [r4, #16]
 80086de:	60c5      	str	r5, [r0, #12]
 80086e0:	f104 0914 	add.w	r9, r4, #20
 80086e4:	f108 0514 	add.w	r5, r8, #20
 80086e8:	f100 0e14 	add.w	lr, r0, #20
 80086ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086f4:	f108 0210 	add.w	r2, r8, #16
 80086f8:	46f2      	mov	sl, lr
 80086fa:	2100      	movs	r1, #0
 80086fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008704:	fa1f f883 	uxth.w	r8, r3
 8008708:	fa11 f18b 	uxtah	r1, r1, fp
 800870c:	0c1b      	lsrs	r3, r3, #16
 800870e:	eba1 0808 	sub.w	r8, r1, r8
 8008712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800871a:	fa1f f888 	uxth.w	r8, r8
 800871e:	1419      	asrs	r1, r3, #16
 8008720:	454e      	cmp	r6, r9
 8008722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008726:	f84a 3b04 	str.w	r3, [sl], #4
 800872a:	d8e7      	bhi.n	80086fc <__mdiff+0x80>
 800872c:	1b33      	subs	r3, r6, r4
 800872e:	3b15      	subs	r3, #21
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	3304      	adds	r3, #4
 8008736:	3415      	adds	r4, #21
 8008738:	42a6      	cmp	r6, r4
 800873a:	bf38      	it	cc
 800873c:	2304      	movcc	r3, #4
 800873e:	441d      	add	r5, r3
 8008740:	4473      	add	r3, lr
 8008742:	469e      	mov	lr, r3
 8008744:	462e      	mov	r6, r5
 8008746:	4566      	cmp	r6, ip
 8008748:	d30e      	bcc.n	8008768 <__mdiff+0xec>
 800874a:	f10c 0203 	add.w	r2, ip, #3
 800874e:	1b52      	subs	r2, r2, r5
 8008750:	f022 0203 	bic.w	r2, r2, #3
 8008754:	3d03      	subs	r5, #3
 8008756:	45ac      	cmp	ip, r5
 8008758:	bf38      	it	cc
 800875a:	2200      	movcc	r2, #0
 800875c:	441a      	add	r2, r3
 800875e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008762:	b17b      	cbz	r3, 8008784 <__mdiff+0x108>
 8008764:	6107      	str	r7, [r0, #16]
 8008766:	e7a3      	b.n	80086b0 <__mdiff+0x34>
 8008768:	f856 8b04 	ldr.w	r8, [r6], #4
 800876c:	fa11 f288 	uxtah	r2, r1, r8
 8008770:	1414      	asrs	r4, r2, #16
 8008772:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008776:	b292      	uxth	r2, r2
 8008778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800877c:	f84e 2b04 	str.w	r2, [lr], #4
 8008780:	1421      	asrs	r1, r4, #16
 8008782:	e7e0      	b.n	8008746 <__mdiff+0xca>
 8008784:	3f01      	subs	r7, #1
 8008786:	e7ea      	b.n	800875e <__mdiff+0xe2>
 8008788:	0800912b 	.word	0x0800912b
 800878c:	0800919c 	.word	0x0800919c

08008790 <__d2b>:
 8008790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008794:	4689      	mov	r9, r1
 8008796:	2101      	movs	r1, #1
 8008798:	ec57 6b10 	vmov	r6, r7, d0
 800879c:	4690      	mov	r8, r2
 800879e:	f7ff fccf 	bl	8008140 <_Balloc>
 80087a2:	4604      	mov	r4, r0
 80087a4:	b930      	cbnz	r0, 80087b4 <__d2b+0x24>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <__d2b+0xb0>)
 80087aa:	4826      	ldr	r0, [pc, #152]	; (8008844 <__d2b+0xb4>)
 80087ac:	f240 310a 	movw	r1, #778	; 0x30a
 80087b0:	f000 fb00 	bl	8008db4 <__assert_func>
 80087b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087bc:	bb35      	cbnz	r5, 800880c <__d2b+0x7c>
 80087be:	2e00      	cmp	r6, #0
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	d028      	beq.n	8008816 <__d2b+0x86>
 80087c4:	4668      	mov	r0, sp
 80087c6:	9600      	str	r6, [sp, #0]
 80087c8:	f7ff fd82 	bl	80082d0 <__lo0bits>
 80087cc:	9900      	ldr	r1, [sp, #0]
 80087ce:	b300      	cbz	r0, 8008812 <__d2b+0x82>
 80087d0:	9a01      	ldr	r2, [sp, #4]
 80087d2:	f1c0 0320 	rsb	r3, r0, #32
 80087d6:	fa02 f303 	lsl.w	r3, r2, r3
 80087da:	430b      	orrs	r3, r1
 80087dc:	40c2      	lsrs	r2, r0
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	9201      	str	r2, [sp, #4]
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	61a3      	str	r3, [r4, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bf14      	ite	ne
 80087ea:	2202      	movne	r2, #2
 80087ec:	2201      	moveq	r2, #1
 80087ee:	6122      	str	r2, [r4, #16]
 80087f0:	b1d5      	cbz	r5, 8008828 <__d2b+0x98>
 80087f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087f6:	4405      	add	r5, r0
 80087f8:	f8c9 5000 	str.w	r5, [r9]
 80087fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008800:	f8c8 0000 	str.w	r0, [r8]
 8008804:	4620      	mov	r0, r4
 8008806:	b003      	add	sp, #12
 8008808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008810:	e7d5      	b.n	80087be <__d2b+0x2e>
 8008812:	6161      	str	r1, [r4, #20]
 8008814:	e7e5      	b.n	80087e2 <__d2b+0x52>
 8008816:	a801      	add	r0, sp, #4
 8008818:	f7ff fd5a 	bl	80082d0 <__lo0bits>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	6163      	str	r3, [r4, #20]
 8008820:	2201      	movs	r2, #1
 8008822:	6122      	str	r2, [r4, #16]
 8008824:	3020      	adds	r0, #32
 8008826:	e7e3      	b.n	80087f0 <__d2b+0x60>
 8008828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800882c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008830:	f8c9 0000 	str.w	r0, [r9]
 8008834:	6918      	ldr	r0, [r3, #16]
 8008836:	f7ff fd2b 	bl	8008290 <__hi0bits>
 800883a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800883e:	e7df      	b.n	8008800 <__d2b+0x70>
 8008840:	0800912b 	.word	0x0800912b
 8008844:	0800919c 	.word	0x0800919c

08008848 <_calloc_r>:
 8008848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884a:	fba1 2402 	umull	r2, r4, r1, r2
 800884e:	b94c      	cbnz	r4, 8008864 <_calloc_r+0x1c>
 8008850:	4611      	mov	r1, r2
 8008852:	9201      	str	r2, [sp, #4]
 8008854:	f000 f87a 	bl	800894c <_malloc_r>
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	4605      	mov	r5, r0
 800885c:	b930      	cbnz	r0, 800886c <_calloc_r+0x24>
 800885e:	4628      	mov	r0, r5
 8008860:	b003      	add	sp, #12
 8008862:	bd30      	pop	{r4, r5, pc}
 8008864:	220c      	movs	r2, #12
 8008866:	6002      	str	r2, [r0, #0]
 8008868:	2500      	movs	r5, #0
 800886a:	e7f8      	b.n	800885e <_calloc_r+0x16>
 800886c:	4621      	mov	r1, r4
 800886e:	f7fd fe99 	bl	80065a4 <memset>
 8008872:	e7f4      	b.n	800885e <_calloc_r+0x16>

08008874 <_free_r>:
 8008874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008876:	2900      	cmp	r1, #0
 8008878:	d044      	beq.n	8008904 <_free_r+0x90>
 800887a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887e:	9001      	str	r0, [sp, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f1a1 0404 	sub.w	r4, r1, #4
 8008886:	bfb8      	it	lt
 8008888:	18e4      	addlt	r4, r4, r3
 800888a:	f000 fb19 	bl	8008ec0 <__malloc_lock>
 800888e:	4a1e      	ldr	r2, [pc, #120]	; (8008908 <_free_r+0x94>)
 8008890:	9801      	ldr	r0, [sp, #4]
 8008892:	6813      	ldr	r3, [r2, #0]
 8008894:	b933      	cbnz	r3, 80088a4 <_free_r+0x30>
 8008896:	6063      	str	r3, [r4, #4]
 8008898:	6014      	str	r4, [r2, #0]
 800889a:	b003      	add	sp, #12
 800889c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a0:	f000 bb14 	b.w	8008ecc <__malloc_unlock>
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d908      	bls.n	80088ba <_free_r+0x46>
 80088a8:	6825      	ldr	r5, [r4, #0]
 80088aa:	1961      	adds	r1, r4, r5
 80088ac:	428b      	cmp	r3, r1
 80088ae:	bf01      	itttt	eq
 80088b0:	6819      	ldreq	r1, [r3, #0]
 80088b2:	685b      	ldreq	r3, [r3, #4]
 80088b4:	1949      	addeq	r1, r1, r5
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	e7ed      	b.n	8008896 <_free_r+0x22>
 80088ba:	461a      	mov	r2, r3
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b10b      	cbz	r3, 80088c4 <_free_r+0x50>
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d9fa      	bls.n	80088ba <_free_r+0x46>
 80088c4:	6811      	ldr	r1, [r2, #0]
 80088c6:	1855      	adds	r5, r2, r1
 80088c8:	42a5      	cmp	r5, r4
 80088ca:	d10b      	bne.n	80088e4 <_free_r+0x70>
 80088cc:	6824      	ldr	r4, [r4, #0]
 80088ce:	4421      	add	r1, r4
 80088d0:	1854      	adds	r4, r2, r1
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	6011      	str	r1, [r2, #0]
 80088d6:	d1e0      	bne.n	800889a <_free_r+0x26>
 80088d8:	681c      	ldr	r4, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	6053      	str	r3, [r2, #4]
 80088de:	4421      	add	r1, r4
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	e7da      	b.n	800889a <_free_r+0x26>
 80088e4:	d902      	bls.n	80088ec <_free_r+0x78>
 80088e6:	230c      	movs	r3, #12
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	e7d6      	b.n	800889a <_free_r+0x26>
 80088ec:	6825      	ldr	r5, [r4, #0]
 80088ee:	1961      	adds	r1, r4, r5
 80088f0:	428b      	cmp	r3, r1
 80088f2:	bf04      	itt	eq
 80088f4:	6819      	ldreq	r1, [r3, #0]
 80088f6:	685b      	ldreq	r3, [r3, #4]
 80088f8:	6063      	str	r3, [r4, #4]
 80088fa:	bf04      	itt	eq
 80088fc:	1949      	addeq	r1, r1, r5
 80088fe:	6021      	streq	r1, [r4, #0]
 8008900:	6054      	str	r4, [r2, #4]
 8008902:	e7ca      	b.n	800889a <_free_r+0x26>
 8008904:	b003      	add	sp, #12
 8008906:	bd30      	pop	{r4, r5, pc}
 8008908:	240002e4 	.word	0x240002e4

0800890c <sbrk_aligned>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4e0e      	ldr	r6, [pc, #56]	; (8008948 <sbrk_aligned+0x3c>)
 8008910:	460c      	mov	r4, r1
 8008912:	6831      	ldr	r1, [r6, #0]
 8008914:	4605      	mov	r5, r0
 8008916:	b911      	cbnz	r1, 800891e <sbrk_aligned+0x12>
 8008918:	f000 f9e6 	bl	8008ce8 <_sbrk_r>
 800891c:	6030      	str	r0, [r6, #0]
 800891e:	4621      	mov	r1, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f000 f9e1 	bl	8008ce8 <_sbrk_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d00a      	beq.n	8008940 <sbrk_aligned+0x34>
 800892a:	1cc4      	adds	r4, r0, #3
 800892c:	f024 0403 	bic.w	r4, r4, #3
 8008930:	42a0      	cmp	r0, r4
 8008932:	d007      	beq.n	8008944 <sbrk_aligned+0x38>
 8008934:	1a21      	subs	r1, r4, r0
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f9d6 	bl	8008ce8 <_sbrk_r>
 800893c:	3001      	adds	r0, #1
 800893e:	d101      	bne.n	8008944 <sbrk_aligned+0x38>
 8008940:	f04f 34ff 	mov.w	r4, #4294967295
 8008944:	4620      	mov	r0, r4
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	240002e8 	.word	0x240002e8

0800894c <_malloc_r>:
 800894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008950:	1ccd      	adds	r5, r1, #3
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	2d00      	cmp	r5, #0
 8008960:	4607      	mov	r7, r0
 8008962:	db01      	blt.n	8008968 <_malloc_r+0x1c>
 8008964:	42a9      	cmp	r1, r5
 8008966:	d905      	bls.n	8008974 <_malloc_r+0x28>
 8008968:	230c      	movs	r3, #12
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	2600      	movs	r6, #0
 800896e:	4630      	mov	r0, r6
 8008970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008974:	4e2e      	ldr	r6, [pc, #184]	; (8008a30 <_malloc_r+0xe4>)
 8008976:	f000 faa3 	bl	8008ec0 <__malloc_lock>
 800897a:	6833      	ldr	r3, [r6, #0]
 800897c:	461c      	mov	r4, r3
 800897e:	bb34      	cbnz	r4, 80089ce <_malloc_r+0x82>
 8008980:	4629      	mov	r1, r5
 8008982:	4638      	mov	r0, r7
 8008984:	f7ff ffc2 	bl	800890c <sbrk_aligned>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	4604      	mov	r4, r0
 800898c:	d14d      	bne.n	8008a2a <_malloc_r+0xde>
 800898e:	6834      	ldr	r4, [r6, #0]
 8008990:	4626      	mov	r6, r4
 8008992:	2e00      	cmp	r6, #0
 8008994:	d140      	bne.n	8008a18 <_malloc_r+0xcc>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	4631      	mov	r1, r6
 800899a:	4638      	mov	r0, r7
 800899c:	eb04 0803 	add.w	r8, r4, r3
 80089a0:	f000 f9a2 	bl	8008ce8 <_sbrk_r>
 80089a4:	4580      	cmp	r8, r0
 80089a6:	d13a      	bne.n	8008a1e <_malloc_r+0xd2>
 80089a8:	6821      	ldr	r1, [r4, #0]
 80089aa:	3503      	adds	r5, #3
 80089ac:	1a6d      	subs	r5, r5, r1
 80089ae:	f025 0503 	bic.w	r5, r5, #3
 80089b2:	3508      	adds	r5, #8
 80089b4:	2d0c      	cmp	r5, #12
 80089b6:	bf38      	it	cc
 80089b8:	250c      	movcc	r5, #12
 80089ba:	4629      	mov	r1, r5
 80089bc:	4638      	mov	r0, r7
 80089be:	f7ff ffa5 	bl	800890c <sbrk_aligned>
 80089c2:	3001      	adds	r0, #1
 80089c4:	d02b      	beq.n	8008a1e <_malloc_r+0xd2>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	442b      	add	r3, r5
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	e00e      	b.n	80089ec <_malloc_r+0xa0>
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	1b52      	subs	r2, r2, r5
 80089d2:	d41e      	bmi.n	8008a12 <_malloc_r+0xc6>
 80089d4:	2a0b      	cmp	r2, #11
 80089d6:	d916      	bls.n	8008a06 <_malloc_r+0xba>
 80089d8:	1961      	adds	r1, r4, r5
 80089da:	42a3      	cmp	r3, r4
 80089dc:	6025      	str	r5, [r4, #0]
 80089de:	bf18      	it	ne
 80089e0:	6059      	strne	r1, [r3, #4]
 80089e2:	6863      	ldr	r3, [r4, #4]
 80089e4:	bf08      	it	eq
 80089e6:	6031      	streq	r1, [r6, #0]
 80089e8:	5162      	str	r2, [r4, r5]
 80089ea:	604b      	str	r3, [r1, #4]
 80089ec:	4638      	mov	r0, r7
 80089ee:	f104 060b 	add.w	r6, r4, #11
 80089f2:	f000 fa6b 	bl	8008ecc <__malloc_unlock>
 80089f6:	f026 0607 	bic.w	r6, r6, #7
 80089fa:	1d23      	adds	r3, r4, #4
 80089fc:	1af2      	subs	r2, r6, r3
 80089fe:	d0b6      	beq.n	800896e <_malloc_r+0x22>
 8008a00:	1b9b      	subs	r3, r3, r6
 8008a02:	50a3      	str	r3, [r4, r2]
 8008a04:	e7b3      	b.n	800896e <_malloc_r+0x22>
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	bf0c      	ite	eq
 8008a0c:	6032      	streq	r2, [r6, #0]
 8008a0e:	605a      	strne	r2, [r3, #4]
 8008a10:	e7ec      	b.n	80089ec <_malloc_r+0xa0>
 8008a12:	4623      	mov	r3, r4
 8008a14:	6864      	ldr	r4, [r4, #4]
 8008a16:	e7b2      	b.n	800897e <_malloc_r+0x32>
 8008a18:	4634      	mov	r4, r6
 8008a1a:	6876      	ldr	r6, [r6, #4]
 8008a1c:	e7b9      	b.n	8008992 <_malloc_r+0x46>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	603b      	str	r3, [r7, #0]
 8008a22:	4638      	mov	r0, r7
 8008a24:	f000 fa52 	bl	8008ecc <__malloc_unlock>
 8008a28:	e7a1      	b.n	800896e <_malloc_r+0x22>
 8008a2a:	6025      	str	r5, [r4, #0]
 8008a2c:	e7de      	b.n	80089ec <_malloc_r+0xa0>
 8008a2e:	bf00      	nop
 8008a30:	240002e4 	.word	0x240002e4

08008a34 <__sfputc_r>:
 8008a34:	6893      	ldr	r3, [r2, #8]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	b410      	push	{r4}
 8008a3c:	6093      	str	r3, [r2, #8]
 8008a3e:	da08      	bge.n	8008a52 <__sfputc_r+0x1e>
 8008a40:	6994      	ldr	r4, [r2, #24]
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	db01      	blt.n	8008a4a <__sfputc_r+0x16>
 8008a46:	290a      	cmp	r1, #10
 8008a48:	d103      	bne.n	8008a52 <__sfputc_r+0x1e>
 8008a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4e:	f7fe ba83 	b.w	8006f58 <__swbuf_r>
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	1c58      	adds	r0, r3, #1
 8008a56:	6010      	str	r0, [r2, #0]
 8008a58:	7019      	strb	r1, [r3, #0]
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <__sfputs_r>:
 8008a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	4614      	mov	r4, r2
 8008a6a:	18d5      	adds	r5, r2, r3
 8008a6c:	42ac      	cmp	r4, r5
 8008a6e:	d101      	bne.n	8008a74 <__sfputs_r+0x12>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e007      	b.n	8008a84 <__sfputs_r+0x22>
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	463a      	mov	r2, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffda 	bl	8008a34 <__sfputc_r>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d1f3      	bne.n	8008a6c <__sfputs_r+0xa>
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a88 <_vfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	b09d      	sub	sp, #116	; 0x74
 8008a90:	4614      	mov	r4, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	4606      	mov	r6, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_vfiprintf_r+0x18>
 8008a98:	6983      	ldr	r3, [r0, #24]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x18>
 8008a9c:	f7ff fa30 	bl	8007f00 <__sinit>
 8008aa0:	4b89      	ldr	r3, [pc, #548]	; (8008cc8 <_vfiprintf_r+0x240>)
 8008aa2:	429d      	cmp	r5, r3
 8008aa4:	d11b      	bne.n	8008ade <_vfiprintf_r+0x56>
 8008aa6:	6875      	ldr	r5, [r6, #4]
 8008aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aaa:	07d9      	lsls	r1, r3, #31
 8008aac:	d405      	bmi.n	8008aba <_vfiprintf_r+0x32>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	059a      	lsls	r2, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_vfiprintf_r+0x32>
 8008ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ab6:	f7ff fac6 	bl	8008046 <__retarget_lock_acquire_recursive>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	071b      	lsls	r3, r3, #28
 8008abe:	d501      	bpl.n	8008ac4 <_vfiprintf_r+0x3c>
 8008ac0:	692b      	ldr	r3, [r5, #16]
 8008ac2:	b9eb      	cbnz	r3, 8008b00 <_vfiprintf_r+0x78>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7fe fa98 	bl	8006ffc <__swsetup_r>
 8008acc:	b1c0      	cbz	r0, 8008b00 <_vfiprintf_r+0x78>
 8008ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad0:	07dc      	lsls	r4, r3, #31
 8008ad2:	d50e      	bpl.n	8008af2 <_vfiprintf_r+0x6a>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	b01d      	add	sp, #116	; 0x74
 8008ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ade:	4b7b      	ldr	r3, [pc, #492]	; (8008ccc <_vfiprintf_r+0x244>)
 8008ae0:	429d      	cmp	r5, r3
 8008ae2:	d101      	bne.n	8008ae8 <_vfiprintf_r+0x60>
 8008ae4:	68b5      	ldr	r5, [r6, #8]
 8008ae6:	e7df      	b.n	8008aa8 <_vfiprintf_r+0x20>
 8008ae8:	4b79      	ldr	r3, [pc, #484]	; (8008cd0 <_vfiprintf_r+0x248>)
 8008aea:	429d      	cmp	r5, r3
 8008aec:	bf08      	it	eq
 8008aee:	68f5      	ldreq	r5, [r6, #12]
 8008af0:	e7da      	b.n	8008aa8 <_vfiprintf_r+0x20>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	0598      	lsls	r0, r3, #22
 8008af6:	d4ed      	bmi.n	8008ad4 <_vfiprintf_r+0x4c>
 8008af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008afa:	f7ff faa5 	bl	8008048 <__retarget_lock_release_recursive>
 8008afe:	e7e9      	b.n	8008ad4 <_vfiprintf_r+0x4c>
 8008b00:	2300      	movs	r3, #0
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	2320      	movs	r3, #32
 8008b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b0e:	2330      	movs	r3, #48	; 0x30
 8008b10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cd4 <_vfiprintf_r+0x24c>
 8008b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b18:	f04f 0901 	mov.w	r9, #1
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	469a      	mov	sl, r3
 8008b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b24:	b10a      	cbz	r2, 8008b2a <_vfiprintf_r+0xa2>
 8008b26:	2a25      	cmp	r2, #37	; 0x25
 8008b28:	d1f9      	bne.n	8008b1e <_vfiprintf_r+0x96>
 8008b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b2e:	d00b      	beq.n	8008b48 <_vfiprintf_r+0xc0>
 8008b30:	465b      	mov	r3, fp
 8008b32:	4622      	mov	r2, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ff93 	bl	8008a62 <__sfputs_r>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f000 80aa 	beq.w	8008c96 <_vfiprintf_r+0x20e>
 8008b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b44:	445a      	add	r2, fp
 8008b46:	9209      	str	r2, [sp, #36]	; 0x24
 8008b48:	f89a 3000 	ldrb.w	r3, [sl]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 80a2 	beq.w	8008c96 <_vfiprintf_r+0x20e>
 8008b52:	2300      	movs	r3, #0
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b5c:	f10a 0a01 	add.w	sl, sl, #1
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b68:	931a      	str	r3, [sp, #104]	; 0x68
 8008b6a:	4654      	mov	r4, sl
 8008b6c:	2205      	movs	r2, #5
 8008b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b72:	4858      	ldr	r0, [pc, #352]	; (8008cd4 <_vfiprintf_r+0x24c>)
 8008b74:	f7f7 fbbc 	bl	80002f0 <memchr>
 8008b78:	9a04      	ldr	r2, [sp, #16]
 8008b7a:	b9d8      	cbnz	r0, 8008bb4 <_vfiprintf_r+0x12c>
 8008b7c:	06d1      	lsls	r1, r2, #27
 8008b7e:	bf44      	itt	mi
 8008b80:	2320      	movmi	r3, #32
 8008b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b86:	0713      	lsls	r3, r2, #28
 8008b88:	bf44      	itt	mi
 8008b8a:	232b      	movmi	r3, #43	; 0x2b
 8008b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b90:	f89a 3000 	ldrb.w	r3, [sl]
 8008b94:	2b2a      	cmp	r3, #42	; 0x2a
 8008b96:	d015      	beq.n	8008bc4 <_vfiprintf_r+0x13c>
 8008b98:	9a07      	ldr	r2, [sp, #28]
 8008b9a:	4654      	mov	r4, sl
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f04f 0c0a 	mov.w	ip, #10
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ba8:	3b30      	subs	r3, #48	; 0x30
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d94e      	bls.n	8008c4c <_vfiprintf_r+0x1c4>
 8008bae:	b1b0      	cbz	r0, 8008bde <_vfiprintf_r+0x156>
 8008bb0:	9207      	str	r2, [sp, #28]
 8008bb2:	e014      	b.n	8008bde <_vfiprintf_r+0x156>
 8008bb4:	eba0 0308 	sub.w	r3, r0, r8
 8008bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	46a2      	mov	sl, r4
 8008bc2:	e7d2      	b.n	8008b6a <_vfiprintf_r+0xe2>
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	1d19      	adds	r1, r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	9103      	str	r1, [sp, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfbb      	ittet	lt
 8008bd0:	425b      	neglt	r3, r3
 8008bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bd6:	9307      	strge	r3, [sp, #28]
 8008bd8:	9307      	strlt	r3, [sp, #28]
 8008bda:	bfb8      	it	lt
 8008bdc:	9204      	strlt	r2, [sp, #16]
 8008bde:	7823      	ldrb	r3, [r4, #0]
 8008be0:	2b2e      	cmp	r3, #46	; 0x2e
 8008be2:	d10c      	bne.n	8008bfe <_vfiprintf_r+0x176>
 8008be4:	7863      	ldrb	r3, [r4, #1]
 8008be6:	2b2a      	cmp	r3, #42	; 0x2a
 8008be8:	d135      	bne.n	8008c56 <_vfiprintf_r+0x1ce>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	1d1a      	adds	r2, r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	9203      	str	r2, [sp, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfb8      	it	lt
 8008bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bfa:	3402      	adds	r4, #2
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ce4 <_vfiprintf_r+0x25c>
 8008c02:	7821      	ldrb	r1, [r4, #0]
 8008c04:	2203      	movs	r2, #3
 8008c06:	4650      	mov	r0, sl
 8008c08:	f7f7 fb72 	bl	80002f0 <memchr>
 8008c0c:	b140      	cbz	r0, 8008c20 <_vfiprintf_r+0x198>
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	eba0 000a 	sub.w	r0, r0, sl
 8008c14:	fa03 f000 	lsl.w	r0, r3, r0
 8008c18:	9b04      	ldr	r3, [sp, #16]
 8008c1a:	4303      	orrs	r3, r0
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c24:	482c      	ldr	r0, [pc, #176]	; (8008cd8 <_vfiprintf_r+0x250>)
 8008c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c2a:	2206      	movs	r2, #6
 8008c2c:	f7f7 fb60 	bl	80002f0 <memchr>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d03f      	beq.n	8008cb4 <_vfiprintf_r+0x22c>
 8008c34:	4b29      	ldr	r3, [pc, #164]	; (8008cdc <_vfiprintf_r+0x254>)
 8008c36:	bb1b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x1f8>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	3307      	adds	r3, #7
 8008c3c:	f023 0307 	bic.w	r3, r3, #7
 8008c40:	3308      	adds	r3, #8
 8008c42:	9303      	str	r3, [sp, #12]
 8008c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c46:	443b      	add	r3, r7
 8008c48:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4a:	e767      	b.n	8008b1c <_vfiprintf_r+0x94>
 8008c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c50:	460c      	mov	r4, r1
 8008c52:	2001      	movs	r0, #1
 8008c54:	e7a5      	b.n	8008ba2 <_vfiprintf_r+0x11a>
 8008c56:	2300      	movs	r3, #0
 8008c58:	3401      	adds	r4, #1
 8008c5a:	9305      	str	r3, [sp, #20]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f04f 0c0a 	mov.w	ip, #10
 8008c62:	4620      	mov	r0, r4
 8008c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c68:	3a30      	subs	r2, #48	; 0x30
 8008c6a:	2a09      	cmp	r2, #9
 8008c6c:	d903      	bls.n	8008c76 <_vfiprintf_r+0x1ee>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0c5      	beq.n	8008bfe <_vfiprintf_r+0x176>
 8008c72:	9105      	str	r1, [sp, #20]
 8008c74:	e7c3      	b.n	8008bfe <_vfiprintf_r+0x176>
 8008c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e7f0      	b.n	8008c62 <_vfiprintf_r+0x1da>
 8008c80:	ab03      	add	r3, sp, #12
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	462a      	mov	r2, r5
 8008c86:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <_vfiprintf_r+0x258>)
 8008c88:	a904      	add	r1, sp, #16
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7fd fd24 	bl	80066d8 <_printf_float>
 8008c90:	4607      	mov	r7, r0
 8008c92:	1c78      	adds	r0, r7, #1
 8008c94:	d1d6      	bne.n	8008c44 <_vfiprintf_r+0x1bc>
 8008c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c98:	07d9      	lsls	r1, r3, #31
 8008c9a:	d405      	bmi.n	8008ca8 <_vfiprintf_r+0x220>
 8008c9c:	89ab      	ldrh	r3, [r5, #12]
 8008c9e:	059a      	lsls	r2, r3, #22
 8008ca0:	d402      	bmi.n	8008ca8 <_vfiprintf_r+0x220>
 8008ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ca4:	f7ff f9d0 	bl	8008048 <__retarget_lock_release_recursive>
 8008ca8:	89ab      	ldrh	r3, [r5, #12]
 8008caa:	065b      	lsls	r3, r3, #25
 8008cac:	f53f af12 	bmi.w	8008ad4 <_vfiprintf_r+0x4c>
 8008cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb2:	e711      	b.n	8008ad8 <_vfiprintf_r+0x50>
 8008cb4:	ab03      	add	r3, sp, #12
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	462a      	mov	r2, r5
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <_vfiprintf_r+0x258>)
 8008cbc:	a904      	add	r1, sp, #16
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7fd ff96 	bl	8006bf0 <_printf_i>
 8008cc4:	e7e4      	b.n	8008c90 <_vfiprintf_r+0x208>
 8008cc6:	bf00      	nop
 8008cc8:	0800915c 	.word	0x0800915c
 8008ccc:	0800917c 	.word	0x0800917c
 8008cd0:	0800913c 	.word	0x0800913c
 8008cd4:	080092f4 	.word	0x080092f4
 8008cd8:	080092fe 	.word	0x080092fe
 8008cdc:	080066d9 	.word	0x080066d9
 8008ce0:	08008a63 	.word	0x08008a63
 8008ce4:	080092fa 	.word	0x080092fa

08008ce8 <_sbrk_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_sbrk_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f8 f8c2 	bl	8000e7c <_sbrk>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_sbrk_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_sbrk_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	240002ec 	.word	0x240002ec

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f8e2 	bl	8008ed8 <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__swrite>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	461f      	mov	r7, r3
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	05db      	lsls	r3, r3, #23
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d505      	bpl.n	8008d48 <__swrite+0x1e>
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f000 f898 	bl	8008e78 <_lseek_r>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	f000 b817 	b.w	8008d90 <_write_r>

08008d62 <__sseek>:
 8008d62:	b510      	push	{r4, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 f885 	bl	8008e78 <_lseek_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	bf15      	itete	ne
 8008d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d7e:	81a3      	strheq	r3, [r4, #12]
 8008d80:	bf18      	it	ne
 8008d82:	81a3      	strhne	r3, [r4, #12]
 8008d84:	bd10      	pop	{r4, pc}

08008d86 <__sclose>:
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 b831 	b.w	8008df0 <_close_r>
	...

08008d90 <_write_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_write_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f8 f81b 	bl	8000dda <_write>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_write_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_write_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	240002ec 	.word	0x240002ec

08008db4 <__assert_func>:
 8008db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008db6:	4614      	mov	r4, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <__assert_func+0x2c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	68d8      	ldr	r0, [r3, #12]
 8008dc2:	b14c      	cbz	r4, 8008dd8 <__assert_func+0x24>
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <__assert_func+0x30>)
 8008dc6:	9100      	str	r1, [sp, #0]
 8008dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dcc:	4906      	ldr	r1, [pc, #24]	; (8008de8 <__assert_func+0x34>)
 8008dce:	462b      	mov	r3, r5
 8008dd0:	f000 f81e 	bl	8008e10 <fiprintf>
 8008dd4:	f000 f89f 	bl	8008f16 <abort>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <__assert_func+0x38>)
 8008dda:	461c      	mov	r4, r3
 8008ddc:	e7f3      	b.n	8008dc6 <__assert_func+0x12>
 8008dde:	bf00      	nop
 8008de0:	24000010 	.word	0x24000010
 8008de4:	08009305 	.word	0x08009305
 8008de8:	08009312 	.word	0x08009312
 8008dec:	08009340 	.word	0x08009340

08008df0 <_close_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d06      	ldr	r5, [pc, #24]	; (8008e0c <_close_r+0x1c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7f8 f809 	bl	8000e12 <_close>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_close_r+0x1a>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_close_r+0x1a>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	240002ec 	.word	0x240002ec

08008e10 <fiprintf>:
 8008e10:	b40e      	push	{r1, r2, r3}
 8008e12:	b503      	push	{r0, r1, lr}
 8008e14:	4601      	mov	r1, r0
 8008e16:	ab03      	add	r3, sp, #12
 8008e18:	4805      	ldr	r0, [pc, #20]	; (8008e30 <fiprintf+0x20>)
 8008e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e1e:	6800      	ldr	r0, [r0, #0]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	f7ff fe31 	bl	8008a88 <_vfiprintf_r>
 8008e26:	b002      	add	sp, #8
 8008e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e2c:	b003      	add	sp, #12
 8008e2e:	4770      	bx	lr
 8008e30:	24000010 	.word	0x24000010

08008e34 <_fstat_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4d07      	ldr	r5, [pc, #28]	; (8008e54 <_fstat_r+0x20>)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	4611      	mov	r1, r2
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	f7f7 fff2 	bl	8000e2a <_fstat>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	d102      	bne.n	8008e50 <_fstat_r+0x1c>
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	b103      	cbz	r3, 8008e50 <_fstat_r+0x1c>
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	bd38      	pop	{r3, r4, r5, pc}
 8008e52:	bf00      	nop
 8008e54:	240002ec 	.word	0x240002ec

08008e58 <_isatty_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d06      	ldr	r5, [pc, #24]	; (8008e74 <_isatty_r+0x1c>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	f7f7 fff1 	bl	8000e4a <_isatty>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_isatty_r+0x1a>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_isatty_r+0x1a>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	240002ec 	.word	0x240002ec

08008e78 <_lseek_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	; (8008e98 <_lseek_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7f7 ffea 	bl	8000e60 <_lseek>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_lseek_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_lseek_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	240002ec 	.word	0x240002ec

08008e9c <__ascii_mbtowc>:
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	b901      	cbnz	r1, 8008ea2 <__ascii_mbtowc+0x6>
 8008ea0:	a901      	add	r1, sp, #4
 8008ea2:	b142      	cbz	r2, 8008eb6 <__ascii_mbtowc+0x1a>
 8008ea4:	b14b      	cbz	r3, 8008eba <__ascii_mbtowc+0x1e>
 8008ea6:	7813      	ldrb	r3, [r2, #0]
 8008ea8:	600b      	str	r3, [r1, #0]
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	1e10      	subs	r0, r2, #0
 8008eae:	bf18      	it	ne
 8008eb0:	2001      	movne	r0, #1
 8008eb2:	b002      	add	sp, #8
 8008eb4:	4770      	bx	lr
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	e7fb      	b.n	8008eb2 <__ascii_mbtowc+0x16>
 8008eba:	f06f 0001 	mvn.w	r0, #1
 8008ebe:	e7f8      	b.n	8008eb2 <__ascii_mbtowc+0x16>

08008ec0 <__malloc_lock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__malloc_lock+0x8>)
 8008ec2:	f7ff b8c0 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	240002e0 	.word	0x240002e0

08008ecc <__malloc_unlock>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	; (8008ed4 <__malloc_unlock+0x8>)
 8008ece:	f7ff b8bb 	b.w	8008048 <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	240002e0 	.word	0x240002e0

08008ed8 <_read_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_read_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f7 ff5a 	bl	8000da0 <_read>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_read_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_read_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	240002ec 	.word	0x240002ec

08008efc <__ascii_wctomb>:
 8008efc:	b149      	cbz	r1, 8008f12 <__ascii_wctomb+0x16>
 8008efe:	2aff      	cmp	r2, #255	; 0xff
 8008f00:	bf85      	ittet	hi
 8008f02:	238a      	movhi	r3, #138	; 0x8a
 8008f04:	6003      	strhi	r3, [r0, #0]
 8008f06:	700a      	strbls	r2, [r1, #0]
 8008f08:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f0c:	bf98      	it	ls
 8008f0e:	2001      	movls	r0, #1
 8008f10:	4770      	bx	lr
 8008f12:	4608      	mov	r0, r1
 8008f14:	4770      	bx	lr

08008f16 <abort>:
 8008f16:	b508      	push	{r3, lr}
 8008f18:	2006      	movs	r0, #6
 8008f1a:	f000 f82b 	bl	8008f74 <raise>
 8008f1e:	2001      	movs	r0, #1
 8008f20:	f7f7 ff34 	bl	8000d8c <_exit>

08008f24 <_raise_r>:
 8008f24:	291f      	cmp	r1, #31
 8008f26:	b538      	push	{r3, r4, r5, lr}
 8008f28:	4604      	mov	r4, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	d904      	bls.n	8008f38 <_raise_r+0x14>
 8008f2e:	2316      	movs	r3, #22
 8008f30:	6003      	str	r3, [r0, #0]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f3a:	b112      	cbz	r2, 8008f42 <_raise_r+0x1e>
 8008f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f40:	b94b      	cbnz	r3, 8008f56 <_raise_r+0x32>
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f830 	bl	8008fa8 <_getpid_r>
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f52:	f000 b817 	b.w	8008f84 <_kill_r>
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d00a      	beq.n	8008f70 <_raise_r+0x4c>
 8008f5a:	1c59      	adds	r1, r3, #1
 8008f5c:	d103      	bne.n	8008f66 <_raise_r+0x42>
 8008f5e:	2316      	movs	r3, #22
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	2001      	movs	r0, #1
 8008f64:	e7e7      	b.n	8008f36 <_raise_r+0x12>
 8008f66:	2400      	movs	r4, #0
 8008f68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	4798      	blx	r3
 8008f70:	2000      	movs	r0, #0
 8008f72:	e7e0      	b.n	8008f36 <_raise_r+0x12>

08008f74 <raise>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <raise+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f7ff bfd3 	b.w	8008f24 <_raise_r>
 8008f7e:	bf00      	nop
 8008f80:	24000010 	.word	0x24000010

08008f84 <_kill_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d07      	ldr	r5, [pc, #28]	; (8008fa4 <_kill_r+0x20>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	f7f7 feeb 	bl	8000d6c <_kill>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d102      	bne.n	8008fa0 <_kill_r+0x1c>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b103      	cbz	r3, 8008fa0 <_kill_r+0x1c>
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	bf00      	nop
 8008fa4:	240002ec 	.word	0x240002ec

08008fa8 <_getpid_r>:
 8008fa8:	f7f7 bed8 	b.w	8000d5c <_getpid>

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
