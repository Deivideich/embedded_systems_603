
STM32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08008fb0  08008fb0  00018fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009424  08009424  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800942c  0800942c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800942c  0800942c  0001942c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009430  08009430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  08009434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  240001e0  08009614  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002f0  08009614  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f2d  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c42  00000000  00000000  0003813b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0003ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c2d5  00000000  00000000  0003cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d02  00000000  00000000  000792ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018868b  00000000  00000000  00092faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021b63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000588c  00000000  00000000  0021b68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f98 	.word	0x08008f98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08008f98 	.word	0x08008f98

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <setPwmS>:
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007d0:	429a      	cmp	r2, r3
 80007d2:	bf28      	it	cs
 80007d4:	461a      	movcs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007e2:	429a      	cmp	r2, r3
 80007e4:	bf28      	it	cs
 80007e6:	461a      	movcs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f4:	429a      	cmp	r2, r3
 80007f6:	bf28      	it	cs
 80007f8:	461a      	movcs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000814:	fb03 f202 	mul.w	r2, r3, r2
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4413      	add	r3, r2
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8000832:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000898 <setPwmS+0xd8>
 8000836:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800084c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000898 <setPwmS+0xd8>
 8000850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000854:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800086a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800086e:	ed97 6b04 	vldr	d6, [r7, #16]
 8000872:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000876:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000882:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000886:	ee17 2a90 	vmov	r2, s15
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800088c:	bf00      	nop
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	00000000 	.word	0x00000000
 800089c:	412e8480 	.word	0x412e8480

080008a0 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	4a36      	ldr	r2, [pc, #216]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a27      	ldr	r2, [pc, #156]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a18      	ldr	r2, [pc, #96]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0xfc>)
 8000954:	f000 ffc2 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x100>)
 800096e:	f000 fe05 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000972:	f244 0301 	movw	r3, #16385	; 0x4001
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_GPIO_Init+0xfc>)
 800098c:	f000 fdf6 	bl	800157c <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400
 800099c:	58020400 	.word	0x58020400
 80009a0:	58020800 	.word	0x58020800

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0a6      	sub	sp, #152	; 0x98
 80009a8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009b2:	bf00      	nop
 80009b4:	4b73      	ldr	r3, [pc, #460]	; (8000b84 <main+0x1e0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <main+0x2a>
 80009c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dcf2      	bgt.n	80009b4 <main+0x10>
  if ( timeout < 0 )
 80009ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da01      	bge.n	80009da <main+0x36>
  {
  Error_Handler();
 80009d6:	f000 f95d 	bl	8000c94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fc29 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f8df 	bl	8000ba0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009e2:	4b68      	ldr	r3, [pc, #416]	; (8000b84 <main+0x1e0>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	4a66      	ldr	r2, [pc, #408]	; (8000b84 <main+0x1e0>)
 80009ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f2:	4b64      	ldr	r3, [pc, #400]	; (8000b84 <main+0x1e0>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 ff85 	bl	8001910 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 ff9b 	bl	8001944 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a16:	bf00      	nop
 8000a18:	4b5a      	ldr	r3, [pc, #360]	; (8000b84 <main+0x1e0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <main+0x8e>
 8000a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	dcf2      	bgt.n	8000a18 <main+0x74>
if ( timeout < 0 )
 8000a32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da01      	bge.n	8000a3e <main+0x9a>
{
Error_Handler();
 8000a3a:	f000 f92b 	bl	8000c94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f7ff ff2f 	bl	80008a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a42:	f000 fb19 	bl	8001078 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a46:	f000 fa47 	bl	8000ed8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Starting Timer
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	484e      	ldr	r0, [pc, #312]	; (8000b88 <main+0x1e4>)
 8000a4e:	f003 fbc1 	bl	80041d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int minPulseWidth = 1000; //Variables for PWM
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int maxPulseWidth = 1500;
 8000a5a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  unsigned int pwmPeriod = 20000;
 8000a62:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int resolution = 100;
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	67fb      	str	r3, [r7, #124]	; 0x7c

  struct escValues escValues = {htim2, minPulseWidth, //Struct Containing all
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	2268      	movs	r2, #104	; 0x68
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 fd9a 	bl	80065b0 <memset>
 8000a7c:	4a42      	ldr	r2, [pc, #264]	; (8000b88 <main+0x1e4>)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4611      	mov	r1, r2
 8000a84:	224c      	movs	r2, #76	; 0x4c
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fd84 	bl	8006594 <memcpy>
 8000a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a90:	657b      	str	r3, [r7, #84]	; 0x54
 8000a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aa0:	663b      	str	r3, [r7, #96]	; 0x60
		  maxPulseWidth, pwmPeriod, resolution};	  //PWM Variables

  printf("Starting Setup...\r\n"); // Setup
 8000aa2:	483a      	ldr	r0, [pc, #232]	; (8000b8c <main+0x1e8>)
 8000aa4:	f006 fa54 	bl	8006f50 <puts>

  int i = 100;
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int dt = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	67bb      	str	r3, [r7, #120]	; 0x78
  do{
//	  setPwm(htim2, minPulseWidth, maxPulseWidth, pwmPeriod, resolution, i);
	  setPwmS(&escValues);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fe82 	bl	80007c0 <setPwmS>
	  escValues.percentage=(unsigned int)i;
 8000abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ac0:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_Delay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f000 fc46 	bl	8001354 <HAL_Delay>
	  i=i-dt;
 8000ac8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  }while(i > 50);
 8000ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ad8:	2b32      	cmp	r3, #50	; 0x32
 8000ada:	dcea      	bgt.n	8000ab2 <main+0x10e>


  printf("End Setup\r\n");
 8000adc:	482c      	ldr	r0, [pc, #176]	; (8000b90 <main+0x1ec>)
 8000ade:	f006 fa37 	bl	8006f50 <puts>

  while (1)
  {

	  //Receiving from UART
	  while(HAL_UART_Receive(&huart3, input, 3, HAL_MAX_DELAY));
 8000ae2:	bf00      	nop
 8000ae4:	1d39      	adds	r1, r7, #4
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2203      	movs	r2, #3
 8000aec:	4829      	ldr	r0, [pc, #164]	; (8000b94 <main+0x1f0>)
 8000aee:	f004 fc33 	bl	8005358 <HAL_UART_Receive>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1f5      	bne.n	8000ae4 <main+0x140>
	  printf("Receive from UART {%c%c%c} \r\n",input[0],input[1],input[2]);
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	4619      	mov	r1, r3
 8000afc:	797b      	ldrb	r3, [r7, #5]
 8000afe:	461a      	mov	r2, r3
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <main+0x1f4>)
 8000b04:	f006 f99e 	bl	8006e44 <iprintf>

	  for(int i = 0 ; i < 4 ; i++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000b0e:	e011      	b.n	8000b34 <main+0x190>
		  input[i]-='0';
 8000b10:	1d3a      	adds	r2, r7, #4
 8000b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3b30      	subs	r3, #48	; 0x30
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	1d3a      	adds	r2, r7, #4
 8000b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b24:	4413      	add	r3, r2
 8000b26:	460a      	mov	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
	  for(int i = 0 ; i < 4 ; i++){
 8000b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b2e:	3301      	adds	r3, #1
 8000b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	dde9      	ble.n	8000b10 <main+0x16c>
	  }

	  inputInt = (input[0]*100 + input[1]*10 + input[2]);
 8000b3c:	793b      	ldrb	r3, [r7, #4]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	fb03 f202 	mul.w	r2, r3, r2
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	79ba      	ldrb	r2, [r7, #6]
 8000b56:	4413      	add	r3, r2
 8000b58:	677b      	str	r3, [r7, #116]	; 0x74

	  if(inputInt < 101 && inputInt >= 0){
 8000b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b5c:	2b64      	cmp	r3, #100	; 0x64
 8000b5e:	dc04      	bgt.n	8000b6a <main+0x1c6>
 8000b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db01      	blt.n	8000b6a <main+0x1c6>
		  escValues.percentage = inputInt;
 8000b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b68:	667b      	str	r3, [r7, #100]	; 0x64
	  }

	  //Setting PWM value
//	  setPwm(htim2, minPulseWidth, maxPulseWidth, pwmPeriod, resolution, percentage);
	  setPwmS(&escValues);
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe26 	bl	80007c0 <setPwmS>

	  //Printing Values
	  printf("Percentage{%d} PulseWidth{%.5f}\r\n",escValues.percentage,escValues.pulseWidth);
 8000b74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000b76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <main+0x1f8>)
 8000b7c:	f006 f962 	bl	8006e44 <iprintf>
	  while(HAL_UART_Receive(&huart3, input, 3, HAL_MAX_DELAY));
 8000b80:	e7af      	b.n	8000ae2 <main+0x13e>
 8000b82:	bf00      	nop
 8000b84:	58024400 	.word	0x58024400
 8000b88:	24000200 	.word	0x24000200
 8000b8c:	08008fb0 	.word	0x08008fb0
 8000b90:	08008fc4 	.word	0x08008fc4
 8000b94:	2400024c 	.word	0x2400024c
 8000b98:	08008fd0 	.word	0x08008fd0
 8000b9c:	08008ff0 	.word	0x08008ff0

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09c      	sub	sp, #112	; 0x70
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	224c      	movs	r2, #76	; 0x4c
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 fcfe 	bl	80065b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fcf8 	bl	80065b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f000 fed3 	bl	800196c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <SystemClock_Config+0xec>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <SystemClock_Config+0xec>)
 8000bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <SystemClock_Config+0xec>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <SystemClock_Config+0xf0>)
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <SystemClock_Config+0xf0>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <SystemClock_Config+0xf0>)
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bf8:	bf00      	nop
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <SystemClock_Config+0xec>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c06:	d1f8      	bne.n	8000bfa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000c1e:	23f0      	movs	r3, #240	; 0xf0
 8000c20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 feee 	bl	8001a20 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4a:	f000 f823 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	233f      	movs	r3, #63	; 0x3f
 8000c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2303      	movs	r3, #3
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c6c:	2340      	movs	r3, #64	; 0x40
 8000c6e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2104      	movs	r1, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fb01 	bl	800227c <HAL_RCC_ClockConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c80:	f000 f808 	bl	8000c94 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3770      	adds	r7, #112	; 0x70
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58024800 	.word	0x58024800
 8000c90:	58000400 	.word	0x58000400

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ca8:	1d39      	adds	r1, r7, #4
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <__io_putchar+0x20>)
 8000cb2:	f004 fabb 	bl	800522c <HAL_UART_Transmit>
  return ch;
 8000cb6:	687b      	ldr	r3, [r7, #4]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2400024c 	.word	0x2400024c

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_MspInit+0x30>)
 8000ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd0:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x30>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	58024400 	.word	0x58024400

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 fae6 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_kill>:

int _kill(int pid, int sig)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d66:	f005 fbeb 	bl	8006540 <__errno>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2216      	movs	r2, #22
 8000d6e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_exit>:

void _exit (int status)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ffe7 	bl	8000d5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d8e:	e7fe      	b.n	8000d8e <_exit+0x12>

08000d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da2:	f3af 8000 	nop.w
 8000da6:	4601      	mov	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
	}

return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5b 	bl	8000ca0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf1      	blt.n	8000ddc <_write+0x12>
	}
	return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:

int _close(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f005 fb50 	bl	8006540 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	24080000 	.word	0x24080000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	240001fc 	.word	0x240001fc
 8000ed4:	240002f0 	.word	0x240002f0

08000ed8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f14:	2248      	movs	r2, #72	; 0x48
 8000f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f32:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f34:	f003 f896 	bl	8004064 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f7ff fea9 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f50:	f003 fb62 	bl	8004618 <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f5a:	f7ff fe9b 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f60:	f003 f8d7 	bl	8004112 <HAL_TIM_PWM_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f6a:	f7ff fe93 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f7e:	f004 f877 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f88:	f7ff fe84 	bl	8000c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8c:	2360      	movs	r3, #96	; 0x60
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000fa4:	f003 fa24 	bl	80043f0 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fae:	f7ff fe71 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000fb4:	f000 f826 	bl	8001004 <HAL_TIM_MspPostInit>

}
 8000fb8:	bf00      	nop
 8000fba:	3738      	adds	r7, #56	; 0x38
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	24000200 	.word	0x24000200

08000fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_TIM_Base_MspInit+0x3c>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58024400 	.word	0x58024400

08001004 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001024:	d11f      	bne.n	8001066 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_TIM_MspPostInit+0x6c>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_TIM_MspPostInit+0x6c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_TIM_MspPostInit+0x6c>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001056:	2301      	movs	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <HAL_TIM_MspPostInit+0x70>)
 8001062:	f000 fa8b 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58020000 	.word	0x58020000

08001078 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_USART3_UART_Init+0x90>)
 800107e:	4a23      	ldr	r2, [pc, #140]	; (800110c <MX_USART3_UART_Init+0x94>)
 8001080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_USART3_UART_Init+0x90>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_USART3_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_USART3_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_USART3_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_USART3_UART_Init+0x90>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010c2:	f004 f863 	bl	800518c <HAL_UART_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010cc:	f7ff fde2 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010d4:	f005 f96a 	bl	80063ac <HAL_UARTEx_SetTxFifoThreshold>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010de:	f7ff fdd9 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010e6:	f005 f99f 	bl	8006428 <HAL_UARTEx_SetRxFifoThreshold>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f7ff fdd0 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010f6:	f005 f920 	bl	800633a <HAL_UARTEx_DisableFifoMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001100:	f7ff fdc8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2400024c 	.word	0x2400024c
 800110c:	40004800 	.word	0x40004800

08001110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b8      	sub	sp, #224	; 0xe0
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	22bc      	movs	r2, #188	; 0xbc
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f005 fa3d 	bl	80065b0 <memset>
  if(uartHandle->Instance==USART3)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a25      	ldr	r2, [pc, #148]	; (80011d0 <HAL_UART_MspInit+0xc0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d142      	bne.n	80011c6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fc20 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800115a:	f7ff fd9b 	bl	8000c94 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_UART_MspInit+0xc4>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_UART_MspInit+0xc4>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0xc4>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_UART_MspInit+0xc4>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0xc4>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0xc4>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b4:	2307      	movs	r3, #7
 80011b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0xc8>)
 80011c2:	f000 f9db 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	37e0      	adds	r7, #224	; 0xe0
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40004800 	.word	0x40004800
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020c00 	.word	0x58020c00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e0:	f7ff fa58 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f005 f99f 	bl	800654c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fbc9 	bl	80009a4 <main>
  bx  lr
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001218:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800121c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001220:	08009434 	.word	0x08009434
  ldr r2, =_sbss
 8001224:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001228:	240002f0 	.word	0x240002f0

0800122c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC3_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 f96e 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800123c:	f001 f9d4 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8001240:	4602      	mov	r2, r0
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	4913      	ldr	r1, [pc, #76]	; (800129c <HAL_Init+0x6c>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_Init+0x68>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_Init+0x6c>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_Init+0x70>)
 8001272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_Init+0x74>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f814 	bl	80012a8 <HAL_InitTick>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e002      	b.n	8001290 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800128a:	f7ff fd1b 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58024400 	.word	0x58024400
 800129c:	08009014 	.word	0x08009014
 80012a0:	24000004 	.word	0x24000004
 80012a4:	24000000 	.word	0x24000000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_InitTick+0x60>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e021      	b.n	8001300 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_InitTick+0x64>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_InitTick+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f945 	bl	8001562 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f91d 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x68>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2400000c 	.word	0x2400000c
 800130c:	24000000 	.word	0x24000000
 8001310:	24000008 	.word	0x24000008

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2400000c 	.word	0x2400000c
 8001338:	240002dc 	.word	0x240002dc

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	240002dc 	.word	0x240002dc

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c

0800139c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetREVID+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0c1b      	lsrs	r3, r3, #16
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	5c001000 	.word	0x5c001000

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <__NVIC_SetPriorityGrouping+0x40>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x40>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	05fa0000 	.word	0x05fa0000

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff47 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff5e 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffb2 	bl	80014d4 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800158a:	4b89      	ldr	r3, [pc, #548]	; (80017b0 <HAL_GPIO_Init+0x234>)
 800158c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800158e:	e194      	b.n	80018ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8186 	beq.w	80018b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x44>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 0201 	and.w	r2, r3, #1
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b03      	cmp	r3, #3
 800162c:	d017      	beq.n	800165e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d123      	bne.n	80016b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	69b9      	ldr	r1, [r7, #24]
 80016ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0203 	and.w	r2, r3, #3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80e0 	beq.w	80018b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_GPIO_Init+0x238>)
 80016f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <HAL_GPIO_Init+0x238>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_GPIO_Init+0x238>)
 8001706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <HAL_GPIO_Init+0x23c>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a20      	ldr	r2, [pc, #128]	; (80017bc <HAL_GPIO_Init+0x240>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d052      	beq.n	80017e4 <HAL_GPIO_Init+0x268>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HAL_GPIO_Init+0x244>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d031      	beq.n	80017aa <HAL_GPIO_Init+0x22e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_GPIO_Init+0x248>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d02b      	beq.n	80017a6 <HAL_GPIO_Init+0x22a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x24c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x226>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <HAL_GPIO_Init+0x250>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x222>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_GPIO_Init+0x254>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x21e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_GPIO_Init+0x258>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x21a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x25c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x216>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_GPIO_Init+0x260>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x212>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_GPIO_Init+0x264>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x20e>
 8001786:	2309      	movs	r3, #9
 8001788:	e02d      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 800178a:	230a      	movs	r3, #10
 800178c:	e02b      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 800178e:	2308      	movs	r3, #8
 8001790:	e029      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 8001792:	2307      	movs	r3, #7
 8001794:	e027      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 8001796:	2306      	movs	r3, #6
 8001798:	e025      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 800179a:	2305      	movs	r3, #5
 800179c:	e023      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 800179e:	2304      	movs	r3, #4
 80017a0:	e021      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e01f      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e01d      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e01b      	b.n	80017e6 <HAL_GPIO_Init+0x26a>
 80017ae:	bf00      	nop
 80017b0:	58000080 	.word	0x58000080
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58000400 	.word	0x58000400
 80017bc:	58020000 	.word	0x58020000
 80017c0:	58020400 	.word	0x58020400
 80017c4:	58020800 	.word	0x58020800
 80017c8:	58020c00 	.word	0x58020c00
 80017cc:	58021000 	.word	0x58021000
 80017d0:	58021400 	.word	0x58021400
 80017d4:	58021800 	.word	0x58021800
 80017d8:	58021c00 	.word	0x58021c00
 80017dc:	58022000 	.word	0x58022000
 80017e0:	58022400 	.word	0x58022400
 80017e4:	2300      	movs	r3, #0
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f6:	4938      	ldr	r1, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x35c>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800182a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	3301      	adds	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f ae63 	bne.w	8001590 <HAL_GPIO_Init+0x14>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	3724      	adds	r7, #36	; 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	58000400 	.word	0x58000400

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_HSEM_FastTake+0x2c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3320      	adds	r3, #32
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_HSEM_FastTake+0x30>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	58026400 	.word	0x58026400
 8001940:	80000300 	.word	0x80000300

08001944 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800194e:	4906      	ldr	r1, [pc, #24]	; (8001968 <HAL_HSEM_Release+0x24>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	58026400 	.word	0x58026400

0800196c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	2b06      	cmp	r3, #6
 800197e:	d00a      	beq.n	8001996 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e040      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e03e      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800199e:	491f      	ldr	r1, [pc, #124]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019a6:	f7ff fcc9 	bl	800133c <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019ac:	e009      	b.n	80019c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019ae:	f7ff fcc5 	bl	800133c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019bc:	d901      	bls.n	80019c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e028      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d1ee      	bne.n	80019ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b1e      	cmp	r3, #30
 80019d4:	d008      	beq.n	80019e8 <HAL_PWREx_ConfigSupply+0x7c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b2e      	cmp	r3, #46	; 0x2e
 80019da:	d005      	beq.n	80019e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b1d      	cmp	r3, #29
 80019e0:	d002      	beq.n	80019e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b2d      	cmp	r3, #45	; 0x2d
 80019e6:	d114      	bne.n	8001a12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80019e8:	f7ff fca8 	bl	800133c <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019ee:	e009      	b.n	8001a04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019f0:	f7ff fca4 	bl	800133c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019fe:	d901      	bls.n	8001a04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e007      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d1ee      	bne.n	80019f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	58024800 	.word	0x58024800

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 bc1d 	b.w	800226e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8087 	beq.w	8001b50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_OscConfig+0x48>
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	2b18      	cmp	r3, #24
 8001a5c:	d110      	bne.n	8001a80 <HAL_RCC_OscConfig+0x60>
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x12e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d168      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e3f6      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x78>
 8001a8a:	4b87      	ldr	r3, [pc, #540]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a86      	ldr	r2, [pc, #536]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e02e      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x9a>
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b7e      	ldr	r3, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7d      	ldr	r2, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e01d      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0xbe>
 8001ac4:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a74      	ldr	r2, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001ade:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a71      	ldr	r2, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d013      	beq.n	8001b26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fc1d 	bl	800133c <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff fc19 	bl	800133c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e3aa      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b18:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0xe6>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff fc09 	bl	800133c <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2e:	f7ff fc05 	bl	800133c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e396      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x10e>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80cb 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b68:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x164>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d156      	bne.n	8001c28 <HAL_RCC_OscConfig+0x208>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d151      	bne.n	8001c28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e368      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0219 	bic.w	r2, r3, #25
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	493f      	ldr	r1, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bae:	f7ff fbc5 	bl	800133c <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fbc1 	bl	800133c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e352      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc8:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	f7ff fbe2 	bl	800139c <HAL_GetREVID>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d817      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x1f2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d108      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1dc>
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfa:	e07b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	4927      	ldr	r1, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	e070      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	4921      	ldr	r1, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c26:	e065      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d048      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 0219 	bic.w	r2, r3, #25
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	491a      	ldr	r1, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb7b 	bl	800133c <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fb77 	bl	800133c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e308      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	f7ff fb98 	bl	800139c <HAL_GetREVID>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d81a      	bhi.n	8001cac <HAL_RCC_OscConfig+0x28c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_OscConfig+0x270>
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	6053      	str	r3, [r2, #4]
 8001c8e:	e031      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	031b      	lsls	r3, r3, #12
 8001c9e:	4902      	ldr	r1, [pc, #8]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
 8001ca4:	e026      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	4b9a      	ldr	r3, [pc, #616]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	4997      	ldr	r1, [pc, #604]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	e018      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a94      	ldr	r2, [pc, #592]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff fb35 	bl	800133c <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fb31 	bl	800133c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e2c2      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce8:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a9 	beq.w	8001e54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d007      	beq.n	8001d28 <HAL_RCC_OscConfig+0x308>
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	d13a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x374>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d135      	bne.n	8001d94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x320>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e296      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d40:	f7ff fb2c 	bl	800139c <HAL_GetREVID>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d817      	bhi.n	8001d7e <HAL_RCC_OscConfig+0x35e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0x348>
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d66:	e075      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d68:	4b6b      	ldr	r3, [pc, #428]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	069b      	lsls	r3, r3, #26
 8001d76:	4968      	ldr	r1, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7c:	e06a      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7e:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	061b      	lsls	r3, r3, #24
 8001d8c:	4962      	ldr	r1, [pc, #392]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d92:	e05f      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d042      	beq.n	8001e22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fac8 	bl	800133c <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001db0:	f7ff fac4 	bl	800133c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e255      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dce:	f7ff fae5 	bl	800139c <HAL_GetREVID>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d817      	bhi.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d108      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3d6>
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	e02e      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
 8001df6:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	4944      	ldr	r1, [pc, #272]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
 8001e0a:	e023      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
 8001e0c:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	493f      	ldr	r1, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fa85 	bl	800133c <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e36:	f7ff fa81 	bl	800133c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e212      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d036      	beq.n	8001ece <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff fa62 	bl	800133c <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fa5e 	bl	800133c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1ef      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x45c>
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fa48 	bl	800133c <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fa44 	bl	800133c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1d5      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d039      	beq.n	8001f4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fa25 	bl	800133c <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ef6:	f7ff fa21 	bl	800133c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1b2      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4d6>
 8001f14:	e01b      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1c:	4b9b      	ldr	r3, [pc, #620]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a9a      	ldr	r2, [pc, #616]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fa08 	bl	800133c <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f30:	f7ff fa04 	bl	800133c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e195      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f42:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8081 	beq.w	800205e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f5c:	4b8c      	ldr	r3, [pc, #560]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a8b      	ldr	r2, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f68:	f7ff f9e8 	bl	800133c <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7ff f9e4 	bl	800133c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e175      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f82:	4b83      	ldr	r3, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x584>
 8001f96:	4b7d      	ldr	r3, [pc, #500]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a7c      	ldr	r2, [pc, #496]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	e02d      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5a6>
 8001fac:	4b77      	ldr	r3, [pc, #476]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a76      	ldr	r2, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	4b74      	ldr	r3, [pc, #464]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a73      	ldr	r2, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c8>
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a6b      	ldr	r2, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a64      	ldr	r2, [pc, #400]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	f023 0304 	bic.w	r3, r3, #4
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f998 	bl	800133c <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f994 	bl	800133c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e123      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ee      	beq.n	8002010 <HAL_RCC_OscConfig+0x5f0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f982 	bl	800133c <HAL_GetTick>
 8002038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f97e 	bl	800133c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e10d      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ee      	bne.n	800203c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8102 	beq.w	800226c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002070:	2b18      	cmp	r3, #24
 8002072:	f000 80bd 	beq.w	80021f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b02      	cmp	r3, #2
 800207c:	f040 809e 	bne.w	80021bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b42      	ldr	r3, [pc, #264]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f956 	bl	800133c <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f952 	bl	800133c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0e3      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x774>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	430a      	orrs	r2, r1
 80020c6:	4931      	ldr	r1, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	628b      	str	r3, [r1, #40]	; 0x28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	3b01      	subs	r3, #1
 80020d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	3b01      	subs	r3, #1
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	b29b      	uxth	r3, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	3b01      	subs	r3, #1
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800211a:	00d2      	lsls	r2, r2, #3
 800211c:	491b      	ldr	r1, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4917      	ldr	r1, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f023 0202 	bic.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	4912      	ldr	r1, [pc, #72]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002142:	4313      	orrs	r3, r2
 8002144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f8db 	bl	800133c <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002188:	e011      	b.n	80021ae <HAL_RCC_OscConfig+0x78e>
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	58024800 	.word	0x58024800
 8002194:	fffffc0c 	.word	0xfffffc0c
 8002198:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f8ce 	bl	800133c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e05f      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x77c>
 80021ba:	e057      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f8b8 	bl	800133c <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff f8b4 	bl	800133c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e045      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x7b0>
 80021ee:	e03d      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d031      	beq.n	8002268 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d12a      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d122      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11a      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0a5b      	lsrs	r3, r3, #9
 8002236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d111      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0e1b      	lsrs	r3, r3, #24
 800225a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3730      	adds	r7, #48	; 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400

0800227c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e19c      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	4985      	ldr	r1, [pc, #532]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e184      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d010      	beq.n	80022ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	4b7b      	ldr	r3, [pc, #492]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d8:	429a      	cmp	r2, r3
 80022da:	d908      	bls.n	80022ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022dc:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4975      	ldr	r1, [pc, #468]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d010      	beq.n	800231c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	4b70      	ldr	r3, [pc, #448]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002306:	429a      	cmp	r2, r3
 8002308:	d908      	bls.n	800231c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	496a      	ldr	r1, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002318:	4313      	orrs	r3, r2
 800231a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d010      	beq.n	800234a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	4b64      	ldr	r3, [pc, #400]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002334:	429a      	cmp	r2, r3
 8002336:	d908      	bls.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	495e      	ldr	r1, [pc, #376]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002346:	4313      	orrs	r3, r2
 8002348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002362:	429a      	cmp	r2, r3
 8002364:	d908      	bls.n	8002378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002366:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4953      	ldr	r1, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002374:	4313      	orrs	r3, r2
 8002376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	429a      	cmp	r2, r3
 8002392:	d908      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f023 020f 	bic.w	r2, r3, #15
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4947      	ldr	r1, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d055      	beq.n	800245e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023b2:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4940      	ldr	r1, [pc, #256]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d121      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0f6      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d115      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0ea      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0de      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240c:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0d6      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f023 0207 	bic.w	r2, r3, #7
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4925      	ldr	r1, [pc, #148]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800242a:	4313      	orrs	r3, r2
 800242c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe ff85 	bl	800133c <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002434:	e00a      	b.n	800244c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002436:	f7fe ff81 	bl	800133c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0be      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	429a      	cmp	r2, r3
 800245c:	d1eb      	bne.n	8002436 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	429a      	cmp	r2, r3
 8002478:	d208      	bcs.n	800248c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002488:	4313      	orrs	r3, r2
 800248a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d214      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 020f 	bic.w	r2, r3, #15
 80024a2:	4906      	ldr	r1, [pc, #24]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e086      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
 80024bc:	52002000 	.word	0x52002000
 80024c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024dc:	429a      	cmp	r2, r3
 80024de:	d208      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024e0:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4939      	ldr	r1, [pc, #228]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800250a:	429a      	cmp	r2, r3
 800250c:	d208      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	492e      	ldr	r1, [pc, #184]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800251c:	4313      	orrs	r3, r2
 800251e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002538:	429a      	cmp	r2, r3
 800253a:	d208      	bcs.n	800254e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4922      	ldr	r1, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800254a:	4313      	orrs	r3, r2
 800254c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002566:	429a      	cmp	r2, r3
 8002568:	d208      	bcs.n	800257c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4917      	ldr	r1, [pc, #92]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002578:	4313      	orrs	r3, r2
 800257a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800257c:	f000 f834 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	4912      	ldr	r1, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x35c>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_RCC_ClockConfig+0x35c>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x360>)
 80025b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x364>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x368>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fe72 	bl	80012a8 <HAL_InitTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400
 80025d8:	08009014 	.word	0x08009014
 80025dc:	24000004 	.word	0x24000004
 80025e0:	24000000 	.word	0x24000000
 80025e4:	24000008 	.word	0x24000008

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ee:	4bb3      	ldr	r3, [pc, #716]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	f200 8155 	bhi.w	80028a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002669 	.word	0x08002669
 8002608:	080028a7 	.word	0x080028a7
 800260c:	080028a7 	.word	0x080028a7
 8002610:	080028a7 	.word	0x080028a7
 8002614:	080028a7 	.word	0x080028a7
 8002618:	080028a7 	.word	0x080028a7
 800261c:	080028a7 	.word	0x080028a7
 8002620:	080028a7 	.word	0x080028a7
 8002624:	0800268f 	.word	0x0800268f
 8002628:	080028a7 	.word	0x080028a7
 800262c:	080028a7 	.word	0x080028a7
 8002630:	080028a7 	.word	0x080028a7
 8002634:	080028a7 	.word	0x080028a7
 8002638:	080028a7 	.word	0x080028a7
 800263c:	080028a7 	.word	0x080028a7
 8002640:	080028a7 	.word	0x080028a7
 8002644:	08002695 	.word	0x08002695
 8002648:	080028a7 	.word	0x080028a7
 800264c:	080028a7 	.word	0x080028a7
 8002650:	080028a7 	.word	0x080028a7
 8002654:	080028a7 	.word	0x080028a7
 8002658:	080028a7 	.word	0x080028a7
 800265c:	080028a7 	.word	0x080028a7
 8002660:	080028a7 	.word	0x080028a7
 8002664:	0800269b 	.word	0x0800269b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002668:	4b94      	ldr	r3, [pc, #592]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002674:	4b91      	ldr	r3, [pc, #580]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002686:	e111      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002688:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800268a:	61bb      	str	r3, [r7, #24]
    break;
 800268c:	e10e      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800268e:	4b8d      	ldr	r3, [pc, #564]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002690:	61bb      	str	r3, [r7, #24]
    break;
 8002692:	e10b      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002696:	61bb      	str	r3, [r7, #24]
    break;
 8002698:	e108      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026a4:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026b0:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026ba:	4b80      	ldr	r3, [pc, #512]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	08db      	lsrs	r3, r3, #3
 80026c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80e1 	beq.w	80028a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	f000 8083 	beq.w	80027ec <HAL_RCC_GetSysClockFreq+0x204>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f200 80a1 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x248>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x114>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d056      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026fa:	e099      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02d      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002742:	ed97 6a02 	vldr	s12, [r7, #8]
 8002746:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800274a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800275a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002762:	e087      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002786:	ed97 6a02 	vldr	s12, [r7, #8]
 800278a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800278e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800279a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027a6:	e065      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80027d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027ea:	e043      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800282e:	e021      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800283e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002852:	ed97 6a02 	vldr	s12, [r7, #8]
 8002856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800285a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002872:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	0a5b      	lsrs	r3, r3, #9
 800287a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287e:	3301      	adds	r3, #1
 8002880:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800288c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002898:	ee17 3a90 	vmov	r3, s15
 800289c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800289e:	e005      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    break;
 80028a4:	e002      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a8:	61bb      	str	r3, [r7, #24]
    break;
 80028aa:	bf00      	nop
  }

  return sysclockfreq;
 80028ac:	69bb      	ldr	r3, [r7, #24]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	58024400 	.word	0x58024400
 80028c0:	03d09000 	.word	0x03d09000
 80028c4:	003d0900 	.word	0x003d0900
 80028c8:	007a1200 	.word	0x007a1200
 80028cc:	46000000 	.word	0x46000000
 80028d0:	4c742400 	.word	0x4c742400
 80028d4:	4a742400 	.word	0x4a742400
 80028d8:	4af42400 	.word	0x4af42400

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028e2:	f7ff fe81 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_GetHCLKFreq+0x50>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	490f      	ldr	r1, [pc, #60]	; (8002930 <HAL_RCC_GetHCLKFreq+0x54>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_GetHCLKFreq+0x50>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_GetHCLKFreq+0x54>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_RCC_GetHCLKFreq+0x58>)
 8002918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_GetHCLKFreq+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	58024400 	.word	0x58024400
 8002930:	08009014 	.word	0x08009014
 8002934:	24000004 	.word	0x24000004
 8002938:	24000000 	.word	0x24000000

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002940:	f7ff ffcc 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58024400 	.word	0x58024400
 8002964:	08009014 	.word	0x08009014

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800296c:	f7ff ffb6 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08009014 	.word	0x08009014

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800299c:	2300      	movs	r3, #0
 800299e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029b8:	d02a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029be:	d824      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c4:	d018      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ca:	d81e      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d4:	d007      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029d6:	e018      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d8:	4ba3      	ldr	r3, [pc, #652]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4aa2      	ldr	r2, [pc, #648]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029e4:	e015      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f9d5 	bl	8003d9c <RCCEx_PLL2_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029f6:	e00c      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3324      	adds	r3, #36	; 0x24
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fa7e 	bl	8003f00 <RCCEx_PLL3_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a08:	e003      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0e:	e000      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a18:	4b93      	ldr	r3, [pc, #588]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a24:	4990      	ldr	r1, [pc, #576]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	650b      	str	r3, [r1, #80]	; 0x50
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03d      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d826      	bhi.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a61 	.word	0x08002a61
 8002a50:	08002a6f 	.word	0x08002a6f
 8002a54:	08002a81 	.word	0x08002a81
 8002a58:	08002a99 	.word	0x08002a99
 8002a5c:	08002a99 	.word	0x08002a99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a60:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	4a80      	ldr	r2, [pc, #512]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a6c:	e015      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f991 	bl	8003d9c <RCCEx_PLL2_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a7e:	e00c      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3324      	adds	r3, #36	; 0x24
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fa3a 	bl	8003f00 <RCCEx_PLL3_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a90:	e003      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
      break;
 8002a96:	e000      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa0:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	f023 0207 	bic.w	r2, r3, #7
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	496e      	ldr	r1, [pc, #440]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d042      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002acc:	d02b      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d825      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ad4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8002ada:	d821      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d016      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d81d      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d007      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002aec:	e018      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aee:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	4a5d      	ldr	r2, [pc, #372]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002afa:	e017      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f94a 	bl	8003d9c <RCCEx_PLL2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b0c:	e00e      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3324      	adds	r3, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 f9f3 	bl	8003f00 <RCCEx_PLL3_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b1e:	e005      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	75fb      	strb	r3, [r7, #23]
      break;
 8002b24:	e002      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	494a      	ldr	r1, [pc, #296]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	650b      	str	r3, [r1, #80]	; 0x50
 8002b44:	e001      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d049      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b60:	d030      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b66:	d82a      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b6c:	d02c      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b72:	d824      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b78:	d018      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b88:	d007      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	4a35      	ldr	r2, [pc, #212]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b98:	e017      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f8fb 	bl	8003d9c <RCCEx_PLL2_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002baa:	e00e      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3324      	adds	r3, #36	; 0x24
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f9a4 	bl	8003f00 <RCCEx_PLL3_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bbc:	e005      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bde:	4922      	ldr	r1, [pc, #136]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	658b      	str	r3, [r1, #88]	; 0x58
 8002be4:	e001      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d04b      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c00:	d030      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c06:	d82a      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c0c:	d02e      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c12:	d824      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c18:	d018      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c1e:	d81e      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c28:	d007      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c2a:	e018      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c38:	e019      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f8ab 	bl	8003d9c <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c4a:	e010      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3324      	adds	r3, #36	; 0x24
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f954 	bl	8003f00 <RCCEx_PLL3_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c5c:	e007      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
      break;
 8002c62:	e004      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c64:	bf00      	nop
 8002c66:	e002      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c68:	58024400 	.word	0x58024400
      break;
 8002c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c74:	4b99      	ldr	r3, [pc, #612]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c82:	4996      	ldr	r1, [pc, #600]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	658b      	str	r3, [r1, #88]	; 0x58
 8002c88:	e001      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d032      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	2b30      	cmp	r3, #48	; 0x30
 8002ca0:	d01c      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d817      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d813      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb6:	4b89      	ldr	r3, [pc, #548]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	4a88      	ldr	r2, [pc, #544]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cc2:	e00e      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f866 	bl	8003d9c <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cd4:	e005      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	4979      	ldr	r1, [pc, #484]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cfa:	e001      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d047      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d14:	d030      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1a:	d82a      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d20:	d02c      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d26:	d824      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2c:	d018      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d32:	d81e      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d007      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d3e:	e018      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d4c:	e017      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f821 	bl	8003d9c <RCCEx_PLL2_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d5e:	e00e      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 f8ca 	bl	8003f00 <RCCEx_PLL3_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d70:	e005      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	4952      	ldr	r1, [pc, #328]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	650b      	str	r3, [r1, #80]	; 0x50
 8002d96:	e001      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d049      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db0:	d02e      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db6:	d828      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dbc:	d02a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dc2:	d822      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc8:	d026      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002dca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dce:	d81c      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dda:	d816      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01d      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d111      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2101      	movs	r1, #1
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 ffd5 	bl	8003d9c <RCCEx_PLL2_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002df6:	e012      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 f87e 	bl	8003f00 <RCCEx_PLL3_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e08:	e009      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	e006      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e10:	bf00      	nop
 8002e12:	e004      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e14:	bf00      	nop
 8002e16:	e002      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e24:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e30:	492a      	ldr	r1, [pc, #168]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	650b      	str	r3, [r1, #80]	; 0x50
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d04d      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e52:	d02e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e58:	d828      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5e:	d02a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d822      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e6a:	d026      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e70:	d81c      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e76:	d010      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7c:	d816      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01d      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e86:	d111      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 ff84 	bl	8003d9c <RCCEx_PLL2_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e98:	e012      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3324      	adds	r3, #36	; 0x24
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f82d 	bl	8003f00 <RCCEx_PLL3_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb0:	e006      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e004      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ed4:	4901      	ldr	r1, [pc, #4]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8002eda:	e003      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02f      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef8:	d00e      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002efe:	d814      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f08:	d10f      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0a:	4baf      	ldr	r3, [pc, #700]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4aae      	ldr	r2, [pc, #696]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f16:	e00c      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ff3c 	bl	8003d9c <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f28:	e003      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2e:	e000      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f38:	4ba3      	ldr	r3, [pc, #652]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f44:	49a0      	ldr	r1, [pc, #640]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	650b      	str	r3, [r1, #80]	; 0x50
 8002f4a:	e001      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d032      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d81b      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002fa3 	.word	0x08002fa3
 8002f70:	08002f7d 	.word	0x08002f7d
 8002f74:	08002f8b 	.word	0x08002f8b
 8002f78:	08002fa3 	.word	0x08002fa3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7c:	4b92      	ldr	r3, [pc, #584]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4a91      	ldr	r2, [pc, #580]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f88:	e00c      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 ff03 	bl	8003d9c <RCCEx_PLL2_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f9a:	e003      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002faa:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4984      	ldr	r1, [pc, #528]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fbc:	e001      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8086 	beq.w	80030dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd0:	4b7e      	ldr	r3, [pc, #504]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a7d      	ldr	r2, [pc, #500]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fdc:	f7fe f9ae 	bl	800133c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fe2:	e009      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7fe f9aa 	bl	800133c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d902      	bls.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	75fb      	strb	r3, [r7, #23]
        break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff8:	4b74      	ldr	r3, [pc, #464]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ef      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d166      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800300a:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800300c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003014:	4053      	eors	r3, r2
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d013      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800301e:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003026:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003028:	4b67      	ldr	r3, [pc, #412]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a66      	ldr	r2, [pc, #408]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a63      	ldr	r2, [pc, #396]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003040:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800304c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003050:	d115      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe f973 	bl	800133c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003058:	e00b      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe f96f 	bl	800133c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d902      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	75fb      	strb	r3, [r7, #23]
            break;
 8003070:	e005      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003072:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0ed      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d126      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800308a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003092:	d10d      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003094:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030a2:	0919      	lsrs	r1, r3, #4
 80030a4:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80030a6:	400b      	ands	r3, r1
 80030a8:	4947      	ldr	r1, [pc, #284]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4a44      	ldr	r2, [pc, #272]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030ba:	6113      	str	r3, [r2, #16]
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	493f      	ldr	r1, [pc, #252]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	670b      	str	r3, [r1, #112]	; 0x70
 80030d0:	e004      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	75bb      	strb	r3, [r7, #22]
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8085 	beq.w	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ee:	2b28      	cmp	r3, #40	; 0x28
 80030f0:	d866      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	080031d5 	.word	0x080031d5
 80030fc:	080031c1 	.word	0x080031c1
 8003100:	080031c1 	.word	0x080031c1
 8003104:	080031c1 	.word	0x080031c1
 8003108:	080031c1 	.word	0x080031c1
 800310c:	080031c1 	.word	0x080031c1
 8003110:	080031c1 	.word	0x080031c1
 8003114:	080031c1 	.word	0x080031c1
 8003118:	0800319d 	.word	0x0800319d
 800311c:	080031c1 	.word	0x080031c1
 8003120:	080031c1 	.word	0x080031c1
 8003124:	080031c1 	.word	0x080031c1
 8003128:	080031c1 	.word	0x080031c1
 800312c:	080031c1 	.word	0x080031c1
 8003130:	080031c1 	.word	0x080031c1
 8003134:	080031c1 	.word	0x080031c1
 8003138:	080031af 	.word	0x080031af
 800313c:	080031c1 	.word	0x080031c1
 8003140:	080031c1 	.word	0x080031c1
 8003144:	080031c1 	.word	0x080031c1
 8003148:	080031c1 	.word	0x080031c1
 800314c:	080031c1 	.word	0x080031c1
 8003150:	080031c1 	.word	0x080031c1
 8003154:	080031c1 	.word	0x080031c1
 8003158:	080031d5 	.word	0x080031d5
 800315c:	080031c1 	.word	0x080031c1
 8003160:	080031c1 	.word	0x080031c1
 8003164:	080031c1 	.word	0x080031c1
 8003168:	080031c1 	.word	0x080031c1
 800316c:	080031c1 	.word	0x080031c1
 8003170:	080031c1 	.word	0x080031c1
 8003174:	080031c1 	.word	0x080031c1
 8003178:	080031d5 	.word	0x080031d5
 800317c:	080031c1 	.word	0x080031c1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031c1 	.word	0x080031c1
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031c1 	.word	0x080031c1
 8003194:	080031c1 	.word	0x080031c1
 8003198:	080031d5 	.word	0x080031d5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fdfa 	bl	8003d9c <RCCEx_PLL2_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031ac:	e013      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3324      	adds	r3, #36	; 0x24
 80031b2:	2101      	movs	r1, #1
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fea3 	bl	8003f00 <RCCEx_PLL3_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031be:	e00a      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
      break;
 80031c4:	e007      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031c6:	bf00      	nop
 80031c8:	58024400 	.word	0x58024400
 80031cc:	58024800 	.word	0x58024800
 80031d0:	00ffffcf 	.word	0x00ffffcf
      break;
 80031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031dc:	4b96      	ldr	r3, [pc, #600]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e8:	4993      	ldr	r1, [pc, #588]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	654b      	str	r3, [r1, #84]	; 0x54
 80031ee:	e001      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d038      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	2b05      	cmp	r3, #5
 8003206:	d821      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003253 	.word	0x08003253
 8003214:	08003229 	.word	0x08003229
 8003218:	0800323b 	.word	0x0800323b
 800321c:	08003253 	.word	0x08003253
 8003220:	08003253 	.word	0x08003253
 8003224:	08003253 	.word	0x08003253
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fdb4 	bl	8003d9c <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003238:	e00c      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3324      	adds	r3, #36	; 0x24
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fe5d 	bl	8003f00 <RCCEx_PLL3_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800324a:	e003      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
      break;
 8003250:	e000      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800325a:	4b77      	ldr	r3, [pc, #476]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	4974      	ldr	r1, [pc, #464]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	654b      	str	r3, [r1, #84]	; 0x54
 800326c:	e001      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d03a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	2b05      	cmp	r3, #5
 8003286:	d821      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032d3 	.word	0x080032d3
 8003294:	080032a9 	.word	0x080032a9
 8003298:	080032bb 	.word	0x080032bb
 800329c:	080032d3 	.word	0x080032d3
 80032a0:	080032d3 	.word	0x080032d3
 80032a4:	080032d3 	.word	0x080032d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fd74 	bl	8003d9c <RCCEx_PLL2_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032b8:	e00c      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	; 0x24
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fe1d 	bl	8003f00 <RCCEx_PLL3_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
      break;
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80032d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f023 0207 	bic.w	r2, r3, #7
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	4953      	ldr	r1, [pc, #332]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	658b      	str	r3, [r1, #88]	; 0x58
 80032ee:	e001      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d04b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330a:	d02e      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800330c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003310:	d828      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d02a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d822      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800331e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003322:	d026      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003324:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003328:	d81c      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800332a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332e:	d010      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d816      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01d      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800333a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800333e:	d111      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fd28 	bl	8003d9c <RCCEx_PLL2_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003350:	e012      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3324      	adds	r3, #36	; 0x24
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fdd1 	bl	8003f00 <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003362:	e009      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      break;
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800337e:	4b2e      	ldr	r3, [pc, #184]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338c:	492a      	ldr	r1, [pc, #168]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	654b      	str	r3, [r1, #84]	; 0x54
 8003392:	e001      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d04d      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033ae:	d02e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80033b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033b4:	d828      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d02a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d822      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033c6:	d026      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80033c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033cc:	d81c      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d2:	d010      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80033d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d8:	d816      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01d      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d111      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fcd6 	bl	8003d9c <RCCEx_PLL2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033f4:	e012      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3324      	adds	r3, #36	; 0x24
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fd7f 	bl	8003f00 <RCCEx_PLL3_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003406:	e009      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
      break;
 800340c:	e006      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800340e:	bf00      	nop
 8003410:	e004      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003430:	4901      	ldr	r1, [pc, #4]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	658b      	str	r3, [r1, #88]	; 0x58
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d04b      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003452:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003456:	d02e      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003458:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800345c:	d828      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003462:	d02a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003468:	d822      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800346a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800346e:	d026      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003470:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003474:	d81c      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347a:	d010      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800347c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003480:	d816      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01d      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	d111      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fc82 	bl	8003d9c <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800349c:	e012      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3324      	adds	r3, #36	; 0x24
 80034a2:	2102      	movs	r1, #2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fd2b 	bl	8003f00 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034ae:	e009      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	75fb      	strb	r3, [r7, #23]
      break;
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034b6:	bf00      	nop
 80034b8:	e004      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ba:	bf00      	nop
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034ca:	4b9d      	ldr	r3, [pc, #628]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d8:	4999      	ldr	r1, [pc, #612]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	658b      	str	r3, [r1, #88]	; 0x58
 80034de:	e001      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d10a      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3324      	adds	r3, #36	; 0x24
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fcfc 	bl	8003f00 <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003512:	4b8b      	ldr	r3, [pc, #556]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003520:	4987      	ldr	r1, [pc, #540]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003522:	4313      	orrs	r3, r2
 8003524:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353c:	d10a      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3324      	adds	r3, #36	; 0x24
 8003542:	2102      	movs	r1, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fcdb 	bl	8003f00 <RCCEx_PLL3_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003554:	4b7a      	ldr	r3, [pc, #488]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	4977      	ldr	r1, [pc, #476]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003564:	4313      	orrs	r3, r2
 8003566:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d034      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357e:	d01d      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003584:	d817      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d009      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003590:	e011      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fbff 	bl	8003d9c <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035a2:	e00c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fca8 	bl	8003f00 <RCCEx_PLL3_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035b4:	e003      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c4:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035d2:	495b      	ldr	r1, [pc, #364]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	658b      	str	r3, [r1, #88]	; 0x58
 80035d8:	e001      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d033      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035f4:	d01c      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80035f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035fa:	d816      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003606:	d007      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003616:	e00c      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fc6e 	bl	8003f00 <RCCEx_PLL3_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
      break;
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003638:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003646:	493e      	ldr	r1, [pc, #248]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003648:	4313      	orrs	r3, r2
 800364a:	654b      	str	r3, [r1, #84]	; 0x54
 800364c:	e001      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d029      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d007      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800366c:	e00f      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800367a:	e00b      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fb8a 	bl	8003d9c <RCCEx_PLL2_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800368c:	e002      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
      break;
 8003692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	4926      	ldr	r1, [pc, #152]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036ac:	e001      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3324      	adds	r3, #36	; 0x24
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fc1b 	bl	8003f00 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d033      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80036ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ee:	d811      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d013      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80036f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fa:	d80b      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003704:	d106      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800370c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003710:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003712:	e007      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
      break;
 8003718:	e004      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10c      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003736:	4902      	ldr	r1, [pc, #8]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003738:	4313      	orrs	r3, r2
 800373a:	654b      	str	r3, [r1, #84]	; 0x54
 800373c:	e004      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800373e:	bf00      	nop
 8003740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	492e      	ldr	r1, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003762:	4313      	orrs	r3, r2
 8003764:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003780:	4926      	ldr	r1, [pc, #152]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800379e:	491f      	ldr	r1, [pc, #124]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037ba:	6113      	str	r3, [r2, #16]
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037c6:	4915      	ldr	r1, [pc, #84]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da08      	bge.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	490e      	ldr	r1, [pc, #56]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	4906      	ldr	r1, [pc, #24]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003802:	4313      	orrs	r3, r2
 8003804:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003806:	7dbb      	ldrb	r3, [r7, #22]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	58024400 	.word	0x58024400

08003820 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003824:	f7ff f85a 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4904      	ldr	r1, [pc, #16]	; (8003848 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	58024400 	.word	0x58024400
 8003848:	08009014 	.word	0x08009014

0800384c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003854:	4ba1      	ldr	r3, [pc, #644]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800385e:	4b9f      	ldr	r3, [pc, #636]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	0b1b      	lsrs	r3, r3, #12
 8003864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003868:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800386a:	4b9c      	ldr	r3, [pc, #624]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003876:	4b99      	ldr	r3, [pc, #612]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	08db      	lsrs	r3, r3, #3
 800387c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8111 	beq.w	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b02      	cmp	r3, #2
 800389e:	f000 8083 	beq.w	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	f200 80a1 	bhi.w	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d056      	beq.n	8003964 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038b6:	e099      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b8:	4b88      	ldr	r3, [pc, #544]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02d      	beq.n	8003920 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038c4:	4b85      	ldr	r3, [pc, #532]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	4a84      	ldr	r2, [pc, #528]	; (8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
 80038d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003902:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800391e:	e087      	b.n	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a03 	vldr	s12, [r7, #12]
 8003946:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003962:	e065      	b.n	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a03 	vldr	s12, [r7, #12]
 800398a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a6:	e043      	b.n	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b48      	ldr	r3, [pc, #288]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ea:	e021      	b.n	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	0a5b      	lsrs	r3, r3, #9
 8003a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a56:	ee17 2a90 	vmov	r2, s15
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a5e:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a84:	ee17 2a90 	vmov	r2, s15
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	0e1b      	lsrs	r3, r3, #24
 8003a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab2:	ee17 2a90 	vmov	r2, s15
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003aba:	e008      	b.n	8003ace <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
}
 8003ace:	bf00      	nop
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	03d09000 	.word	0x03d09000
 8003ae4:	46000000 	.word	0x46000000
 8003ae8:	4c742400 	.word	0x4c742400
 8003aec:	4a742400 	.word	0x4a742400
 8003af0:	4af42400 	.word	0x4af42400

08003af4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b089      	sub	sp, #36	; 0x24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003afc:	4ba1      	ldr	r3, [pc, #644]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003b06:	4b9f      	ldr	r3, [pc, #636]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	0d1b      	lsrs	r3, r3, #20
 8003b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b12:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003b1e:	4b99      	ldr	r3, [pc, #612]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	08db      	lsrs	r3, r3, #3
 8003b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8111 	beq.w	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f000 8083 	beq.w	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	f200 80a1 	bhi.w	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d056      	beq.n	8003c0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b5e:	e099      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02d      	beq.n	8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b6c:	4b85      	ldr	r3, [pc, #532]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	4a84      	ldr	r2, [pc, #528]	; (8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b96:	4b7b      	ldr	r3, [pc, #492]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003baa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bc6:	e087      	b.n	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c0a:	e065      	b.n	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c4e:	e043      	b.n	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b48      	ldr	r3, [pc, #288]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c92:	e021      	b.n	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	0a5b      	lsrs	r3, r3, #9
 8003cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfe:	ee17 2a90 	vmov	r2, s15
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003d06:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2c:	ee17 2a90 	vmov	r2, s15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	0e1b      	lsrs	r3, r3, #24
 8003d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5a:	ee17 2a90 	vmov	r2, s15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	58024400 	.word	0x58024400
 8003d88:	03d09000 	.word	0x03d09000
 8003d8c:	46000000 	.word	0x46000000
 8003d90:	4c742400 	.word	0x4c742400
 8003d94:	4a742400 	.word	0x4a742400
 8003d98:	4af42400 	.word	0x4af42400

08003d9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d101      	bne.n	8003dba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e099      	b.n	8003eee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4e      	ldr	r2, [pc, #312]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fab9 	bl	800133c <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003dce:	f7fd fab5 	bl	800133c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e086      	b.n	8003eee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003de0:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003dec:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	493f      	ldr	r1, [pc, #252]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	025b      	lsls	r3, r3, #9
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e30:	4931      	ldr	r1, [pc, #196]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e36:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	492d      	ldr	r1, [pc, #180]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f023 0220 	bic.w	r2, r3, #32
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4928      	ldr	r1, [pc, #160]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	f023 0310 	bic.w	r3, r3, #16
 8003e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <RCCEx_PLL2_Config+0x160>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	69d2      	ldr	r2, [r2, #28]
 8003e72:	00d2      	lsls	r2, r2, #3
 8003e74:	4920      	ldr	r1, [pc, #128]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e80:	f043 0310 	orr.w	r3, r3, #16
 8003e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e98:	e00f      	b.n	8003eba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003eac:	e005      	b.n	8003eba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec6:	f7fd fa39 	bl	800133c <HAL_GetTick>
 8003eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ecc:	e008      	b.n	8003ee0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ece:	f7fd fa35 	bl	800133c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e006      	b.n	8003eee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <RCCEx_PLL2_Config+0x15c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	ffff0007 	.word	0xffff0007

08003f00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f0e:	4b53      	ldr	r3, [pc, #332]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d101      	bne.n	8003f1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e099      	b.n	8004052 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f1e:	4b4f      	ldr	r3, [pc, #316]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a4e      	ldr	r2, [pc, #312]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2a:	f7fd fa07 	bl	800133c <HAL_GetTick>
 8003f2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f32:	f7fd fa03 	bl	800133c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e086      	b.n	8004052 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f44:	4b45      	ldr	r3, [pc, #276]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	051b      	lsls	r3, r3, #20
 8003f5e:	493f      	ldr	r1, [pc, #252]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	628b      	str	r3, [r1, #40]	; 0x28
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	025b      	lsls	r3, r3, #9
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	061b      	lsls	r3, r3, #24
 8003f90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f94:	4931      	ldr	r1, [pc, #196]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f9a:	4b30      	ldr	r3, [pc, #192]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	492d      	ldr	r1, [pc, #180]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	4928      	ldr	r1, [pc, #160]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fbe:	4b27      	ldr	r3, [pc, #156]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a26      	ldr	r2, [pc, #152]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <RCCEx_PLL3_Config+0x160>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	69d2      	ldr	r2, [r2, #28]
 8003fd6:	00d2      	lsls	r2, r2, #3
 8003fd8:	4920      	ldr	r1, [pc, #128]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fde:	4b1f      	ldr	r3, [pc, #124]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4a19      	ldr	r2, [pc, #100]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8003ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ffc:	e00f      	b.n	800401e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 800400a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800400e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004010:	e005      	b.n	800401e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	4a11      	ldr	r2, [pc, #68]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402a:	f7fd f987 	bl	800133c <HAL_GetTick>
 800402e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004030:	e008      	b.n	8004044 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004032:	f7fd f983 	bl	800133c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e006      	b.n	8004052 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <RCCEx_PLL3_Config+0x15c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	58024400 	.word	0x58024400
 8004060:	ffff0007 	.word	0xffff0007

08004064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e049      	b.n	800410a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc ff9a 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 fbb0 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e049      	b.n	80041b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f841 	bl	80041c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f000 fb59 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x24>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e03c      	b.n	8004272 <HAL_TIM_PWM_Start+0x9e>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d109      	bne.n	8004212 <HAL_TIM_PWM_Start+0x3e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e02f      	b.n	8004272 <HAL_TIM_PWM_Start+0x9e>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d109      	bne.n	800422c <HAL_TIM_PWM_Start+0x58>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e022      	b.n	8004272 <HAL_TIM_PWM_Start+0x9e>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d109      	bne.n	8004246 <HAL_TIM_PWM_Start+0x72>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e015      	b.n	8004272 <HAL_TIM_PWM_Start+0x9e>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b10      	cmp	r3, #16
 800424a:	d109      	bne.n	8004260 <HAL_TIM_PWM_Start+0x8c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e008      	b.n	8004272 <HAL_TIM_PWM_Start+0x9e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0a1      	b.n	80043be <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0xb6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004288:	e023      	b.n	80042d2 <HAL_TIM_PWM_Start+0xfe>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xc6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004298:	e01b      	b.n	80042d2 <HAL_TIM_PWM_Start+0xfe>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d104      	bne.n	80042aa <HAL_TIM_PWM_Start+0xd6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	e013      	b.n	80042d2 <HAL_TIM_PWM_Start+0xfe>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0xe6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b8:	e00b      	b.n	80042d2 <HAL_TIM_PWM_Start+0xfe>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0xf6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	e003      	b.n	80042d2 <HAL_TIM_PWM_Start+0xfe>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fea2 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a38      	ldr	r2, [pc, #224]	; (80043c8 <HAL_TIM_PWM_Start+0x1f4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_TIM_PWM_Start+0x13e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a37      	ldr	r2, [pc, #220]	; (80043cc <HAL_TIM_PWM_Start+0x1f8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_TIM_PWM_Start+0x13e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <HAL_TIM_PWM_Start+0x1fc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_TIM_PWM_Start+0x13e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <HAL_TIM_PWM_Start+0x200>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIM_PWM_Start+0x13e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a32      	ldr	r2, [pc, #200]	; (80043d8 <HAL_TIM_PWM_Start+0x204>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_TIM_PWM_Start+0x142>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_TIM_PWM_Start+0x144>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_TIM_PWM_Start+0x1f4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d01d      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a25      	ldr	r2, [pc, #148]	; (80043dc <HAL_TIM_PWM_Start+0x208>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_TIM_PWM_Start+0x20c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <HAL_TIM_PWM_Start+0x210>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_TIM_PWM_Start+0x1f8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <HAL_TIM_PWM_Start+0x214>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_PWM_Start+0x1a8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <HAL_TIM_PWM_Start+0x1fc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d115      	bne.n	80043a8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_TIM_PWM_Start+0x218>)
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d015      	beq.n	80043ba <HAL_TIM_PWM_Start+0x1e6>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d011      	beq.n	80043ba <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	e008      	b.n	80043ba <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40014000 	.word	0x40014000
 80043d4:	40014400 	.word	0x40014400
 80043d8:	40014800 	.word	0x40014800
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40001800 	.word	0x40001800
 80043ec:	00010007 	.word	0x00010007

080043f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800440a:	2302      	movs	r3, #2
 800440c:	e0ff      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b14      	cmp	r3, #20
 800441a:	f200 80f0 	bhi.w	80045fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004479 	.word	0x08004479
 8004428:	080045ff 	.word	0x080045ff
 800442c:	080045ff 	.word	0x080045ff
 8004430:	080045ff 	.word	0x080045ff
 8004434:	080044b9 	.word	0x080044b9
 8004438:	080045ff 	.word	0x080045ff
 800443c:	080045ff 	.word	0x080045ff
 8004440:	080045ff 	.word	0x080045ff
 8004444:	080044fb 	.word	0x080044fb
 8004448:	080045ff 	.word	0x080045ff
 800444c:	080045ff 	.word	0x080045ff
 8004450:	080045ff 	.word	0x080045ff
 8004454:	0800453b 	.word	0x0800453b
 8004458:	080045ff 	.word	0x080045ff
 800445c:	080045ff 	.word	0x080045ff
 8004460:	080045ff 	.word	0x080045ff
 8004464:	0800457d 	.word	0x0800457d
 8004468:	080045ff 	.word	0x080045ff
 800446c:	080045ff 	.word	0x080045ff
 8004470:	080045ff 	.word	0x080045ff
 8004474:	080045bd 	.word	0x080045bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fa5c 	bl	800493c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0208 	orr.w	r2, r2, #8
 8004492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0204 	bic.w	r2, r2, #4
 80044a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6999      	ldr	r1, [r3, #24]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	619a      	str	r2, [r3, #24]
      break;
 80044b6:	e0a5      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 facc 	bl	8004a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6999      	ldr	r1, [r3, #24]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	021a      	lsls	r2, r3, #8
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	619a      	str	r2, [r3, #24]
      break;
 80044f8:	e084      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fb35 	bl	8004b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0208 	orr.w	r2, r2, #8
 8004514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0204 	bic.w	r2, r2, #4
 8004524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69d9      	ldr	r1, [r3, #28]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	61da      	str	r2, [r3, #28]
      break;
 8004538:	e064      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fb9d 	bl	8004c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69d9      	ldr	r1, [r3, #28]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	021a      	lsls	r2, r3, #8
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	61da      	str	r2, [r3, #28]
      break;
 800457a:	e043      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fbe6 	bl	8004d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0208 	orr.w	r2, r2, #8
 8004596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0204 	bic.w	r2, r2, #4
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045ba:	e023      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fc2a 	bl	8004e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045fc:	e002      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
      break;
 8004602:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop

08004618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIM_ConfigClockSource+0x1c>
 8004630:	2302      	movs	r3, #2
 8004632:	e0dc      	b.n	80047ee <HAL_TIM_ConfigClockSource+0x1d6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004650:	4013      	ands	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a64      	ldr	r2, [pc, #400]	; (80047fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	f000 80a9 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004670:	4a62      	ldr	r2, [pc, #392]	; (80047fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	f200 80ae 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004678:	4a61      	ldr	r2, [pc, #388]	; (8004800 <HAL_TIM_ConfigClockSource+0x1e8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f000 80a1 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004680:	4a5f      	ldr	r2, [pc, #380]	; (8004800 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f200 80a6 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004688:	4a5e      	ldr	r2, [pc, #376]	; (8004804 <HAL_TIM_ConfigClockSource+0x1ec>)
 800468a:	4293      	cmp	r3, r2
 800468c:	f000 8099 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004690:	4a5c      	ldr	r2, [pc, #368]	; (8004804 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	f200 809e 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004698:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800469c:	f000 8091 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80046a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046a4:	f200 8096 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ac:	f000 8089 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	f200 808e 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046bc:	d03e      	beq.n	800473c <HAL_TIM_ConfigClockSource+0x124>
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	f200 8087 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	f000 8086 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x1c2>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	d87f      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d01a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0xf6>
 80046d8:	2b70      	cmp	r3, #112	; 0x70
 80046da:	d87b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d050      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x16a>
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d877      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d03c      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x14a>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d873      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d058      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x18a>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d86f      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d064      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d86b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d060      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d867      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05c      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d05a      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800470c:	e062      	b.n	80047d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f000 fc61 	bl	8004fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]
      break;
 800473a:	e04f      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f000 fc4a 	bl	8004fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475e:	609a      	str	r2, [r3, #8]
      break;
 8004760:	e03c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	461a      	mov	r2, r3
 8004770:	f000 fbba 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2150      	movs	r1, #80	; 0x50
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fc14 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 8004780:	e02c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fbd9 	bl	8004f46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2160      	movs	r1, #96	; 0x60
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fc04 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 80047a0:	e01c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 fb9a 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fbf4 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fbeb 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 80047d2:	e003      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e000      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80047da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	ffceff88 	.word	0xffceff88
 80047fc:	00100040 	.word	0x00100040
 8004800:	00100030 	.word	0x00100030
 8004804:	00100020 	.word	0x00100020

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a40      	ldr	r2, [pc, #256]	; (800491c <TIM_Base_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <TIM_Base_SetConfig+0x118>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <TIM_Base_SetConfig+0x11c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <TIM_Base_SetConfig+0x120>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3a      	ldr	r2, [pc, #232]	; (800492c <TIM_Base_SetConfig+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2f      	ldr	r2, [pc, #188]	; (800491c <TIM_Base_SetConfig+0x114>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d01b      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <TIM_Base_SetConfig+0x118>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d017      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2b      	ldr	r2, [pc, #172]	; (8004924 <TIM_Base_SetConfig+0x11c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <TIM_Base_SetConfig+0x120>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <TIM_Base_SetConfig+0x124>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a28      	ldr	r2, [pc, #160]	; (8004930 <TIM_Base_SetConfig+0x128>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <TIM_Base_SetConfig+0x12c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <TIM_Base_SetConfig+0x130>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a10      	ldr	r2, [pc, #64]	; (800491c <TIM_Base_SetConfig+0x114>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00f      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <TIM_Base_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00b      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <TIM_Base_SetConfig+0x128>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <TIM_Base_SetConfig+0x12c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <TIM_Base_SetConfig+0x130>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40010400 	.word	0x40010400
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800

0800493c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <TIM_OC1_SetConfig+0x108>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0302 	bic.w	r3, r3, #2
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <TIM_OC1_SetConfig+0x10c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00f      	beq.n	80049b8 <TIM_OC1_SetConfig+0x7c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <TIM_OC1_SetConfig+0x110>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_OC1_SetConfig+0x7c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <TIM_OC1_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_OC1_SetConfig+0x7c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <TIM_OC1_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_OC1_SetConfig+0x7c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <TIM_OC1_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d10c      	bne.n	80049d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0308 	bic.w	r3, r3, #8
 80049be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 0304 	bic.w	r3, r3, #4
 80049d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <TIM_OC1_SetConfig+0x10c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_OC1_SetConfig+0xbe>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <TIM_OC1_SetConfig+0x110>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_OC1_SetConfig+0xbe>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <TIM_OC1_SetConfig+0x114>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_OC1_SetConfig+0xbe>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a19      	ldr	r2, [pc, #100]	; (8004a54 <TIM_OC1_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_OC1_SetConfig+0xbe>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <TIM_OC1_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d111      	bne.n	8004a1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	fffeff8f 	.word	0xfffeff8f
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800

08004a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0210 	bic.w	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <TIM_OC2_SetConfig+0xfc>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0320 	bic.w	r3, r3, #32
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	; (8004b5c <TIM_OC2_SetConfig+0x100>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC2_SetConfig+0x68>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <TIM_OC2_SetConfig+0x104>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10d      	bne.n	8004ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <TIM_OC2_SetConfig+0x100>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00f      	beq.n	8004b08 <TIM_OC2_SetConfig+0xac>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <TIM_OC2_SetConfig+0x104>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <TIM_OC2_SetConfig+0xac>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <TIM_OC2_SetConfig+0x108>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_OC2_SetConfig+0xac>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <TIM_OC2_SetConfig+0x10c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC2_SetConfig+0xac>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <TIM_OC2_SetConfig+0x110>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d113      	bne.n	8004b30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	feff8fff 	.word	0xfeff8fff
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40010400 	.word	0x40010400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	40014800 	.word	0x40014800

08004b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <TIM_OC3_SetConfig+0xf8>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <TIM_OC3_SetConfig+0xfc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_OC3_SetConfig+0x66>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <TIM_OC3_SetConfig+0x100>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10d      	bne.n	8004bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <TIM_OC3_SetConfig+0xfc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_OC3_SetConfig+0xaa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <TIM_OC3_SetConfig+0x100>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_OC3_SetConfig+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <TIM_OC3_SetConfig+0x104>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_OC3_SetConfig+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <TIM_OC3_SetConfig+0x108>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0xaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <TIM_OC3_SetConfig+0x10c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	fffeff8f 	.word	0xfffeff8f
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800

08004c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <TIM_OC4_SetConfig+0xbc>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <TIM_OC4_SetConfig+0xc0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <TIM_OC4_SetConfig+0x80>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <TIM_OC4_SetConfig+0xc4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_OC4_SetConfig+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <TIM_OC4_SetConfig+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_OC4_SetConfig+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <TIM_OC4_SetConfig+0xcc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC4_SetConfig+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <TIM_OC4_SetConfig+0xd0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	feff8fff 	.word	0xfeff8fff
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <TIM_OC5_SetConfig+0xb0>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <TIM_OC5_SetConfig+0xb4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <TIM_OC5_SetConfig+0x76>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <TIM_OC5_SetConfig+0xb8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_OC5_SetConfig+0x76>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <TIM_OC5_SetConfig+0xbc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_OC5_SetConfig+0x76>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <TIM_OC5_SetConfig+0xc0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC5_SetConfig+0x76>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <TIM_OC5_SetConfig+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d109      	bne.n	8004dde <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	fffeff8f 	.word	0xfffeff8f
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <TIM_OC6_SetConfig+0xb4>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	051b      	lsls	r3, r3, #20
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <TIM_OC6_SetConfig+0xb8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_OC6_SetConfig+0x78>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <TIM_OC6_SetConfig+0xbc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_OC6_SetConfig+0x78>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <TIM_OC6_SetConfig+0xc0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_OC6_SetConfig+0x78>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC6_SetConfig+0xc4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC6_SetConfig+0x78>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC6_SetConfig+0xc8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d109      	bne.n	8004ea8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	feff8fff 	.word	0xfeff8fff
 8004ed4:	40010000 	.word	0x40010000
 8004ed8:	40010400 	.word	0x40010400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <TIM_ITRx_SetConfig+0x38>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f043 0307 	orr.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	609a      	str	r2, [r3, #8]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	ffcfff8f 	.word	0xffcfff8f

08004fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	431a      	orrs	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e06d      	b.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a30      	ldr	r2, [pc, #192]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d108      	bne.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d01d      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10c      	bne.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40001800 	.word	0x40001800
 8005188:	40014000 	.word	0x40014000

0800518c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e042      	b.n	8005224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fb ffad 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2224      	movs	r2, #36	; 0x24
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f996 	bl	8005500 <UART_SetConfig>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e022      	b.n	8005224 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fef2 	bl	8005fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 ff79 	bl	8006114 <UART_CheckIdleState>
 8005222:	4603      	mov	r3, r0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005242:	2b20      	cmp	r3, #32
 8005244:	f040 8083 	bne.w	800534e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_UART_Transmit+0x28>
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e07b      	b.n	8005350 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_UART_Transmit+0x3a>
 8005262:	2302      	movs	r3, #2
 8005264:	e074      	b.n	8005350 <HAL_UART_Transmit+0x124>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2221      	movs	r2, #33	; 0x21
 800527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800527e:	f7fc f85d 	bl	800133c <HAL_GetTick>
 8005282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d108      	bne.n	80052b0 <HAL_UART_Transmit+0x84>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e003      	b.n	80052b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80052c0:	e02c      	b.n	800531c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 ff6c 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e039      	b.n	8005350 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3302      	adds	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e007      	b.n	800530a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1cc      	bne.n	80052c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	2140      	movs	r1, #64	; 0x40
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 ff39 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e006      	b.n	8005350 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	2b20      	cmp	r3, #32
 8005370:	f040 80c0 	bne.w	80054f4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Receive+0x28>
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0b8      	b.n	80054f6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UART_Receive+0x3a>
 800538e:	2302      	movs	r3, #2
 8005390:	e0b1      	b.n	80054f6 <HAL_UART_Receive+0x19e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2222      	movs	r2, #34	; 0x22
 80053a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b0:	f7fb ffc4 	bl	800133c <HAL_GetTick>
 80053b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ce:	d10e      	bne.n	80053ee <HAL_UART_Receive+0x96>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <HAL_UART_Receive+0x8c>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053e2:	e02d      	b.n	8005440 <HAL_UART_Receive+0xe8>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	22ff      	movs	r2, #255	; 0xff
 80053e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053ec:	e028      	b.n	8005440 <HAL_UART_Receive+0xe8>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10d      	bne.n	8005412 <HAL_UART_Receive+0xba>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <HAL_UART_Receive+0xb0>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	22ff      	movs	r2, #255	; 0xff
 8005402:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005406:	e01b      	b.n	8005440 <HAL_UART_Receive+0xe8>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	227f      	movs	r2, #127	; 0x7f
 800540c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005410:	e016      	b.n	8005440 <HAL_UART_Receive+0xe8>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541a:	d10d      	bne.n	8005438 <HAL_UART_Receive+0xe0>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <HAL_UART_Receive+0xd6>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	227f      	movs	r2, #127	; 0x7f
 8005428:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800542c:	e008      	b.n	8005440 <HAL_UART_Receive+0xe8>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	223f      	movs	r2, #63	; 0x3f
 8005432:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005436:	e003      	b.n	8005440 <HAL_UART_Receive+0xe8>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005446:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	d108      	bne.n	8005464 <HAL_UART_Receive+0x10c>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e003      	b.n	800546c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005474:	e032      	b.n	80054dc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	2120      	movs	r1, #32
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fe92 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e032      	b.n	80054f6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	b29a      	uxth	r2, r3
 800549e:	8a7b      	ldrh	r3, [r7, #18]
 80054a0:	4013      	ands	r3, r2
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	3302      	adds	r3, #2
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	e00c      	b.n	80054ca <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	8a7b      	ldrh	r3, [r7, #18]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4013      	ands	r3, r2
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1c6      	bne.n	8005476 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005504:	b092      	sub	sp, #72	; 0x48
 8005506:	af00      	add	r7, sp, #0
 8005508:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	431a      	orrs	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4313      	orrs	r3, r2
 8005526:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4bbe      	ldr	r3, [pc, #760]	; (8005828 <UART_SetConfig+0x328>)
 8005530:	4013      	ands	r3, r2
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005538:	430b      	orrs	r3, r1
 800553a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4ab3      	ldr	r2, [pc, #716]	; (800582c <UART_SetConfig+0x32c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005568:	4313      	orrs	r3, r2
 800556a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	4baf      	ldr	r3, [pc, #700]	; (8005830 <UART_SetConfig+0x330>)
 8005574:	4013      	ands	r3, r2
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800557c:	430b      	orrs	r3, r1
 800557e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f023 010f 	bic.w	r1, r3, #15
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4aa6      	ldr	r2, [pc, #664]	; (8005834 <UART_SetConfig+0x334>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d177      	bne.n	8005690 <UART_SetConfig+0x190>
 80055a0:	4ba5      	ldr	r3, [pc, #660]	; (8005838 <UART_SetConfig+0x338>)
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a8:	2b28      	cmp	r3, #40	; 0x28
 80055aa:	d86d      	bhi.n	8005688 <UART_SetConfig+0x188>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0xb4>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	08005659 	.word	0x08005659
 80055b8:	08005689 	.word	0x08005689
 80055bc:	08005689 	.word	0x08005689
 80055c0:	08005689 	.word	0x08005689
 80055c4:	08005689 	.word	0x08005689
 80055c8:	08005689 	.word	0x08005689
 80055cc:	08005689 	.word	0x08005689
 80055d0:	08005689 	.word	0x08005689
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005689 	.word	0x08005689
 80055dc:	08005689 	.word	0x08005689
 80055e0:	08005689 	.word	0x08005689
 80055e4:	08005689 	.word	0x08005689
 80055e8:	08005689 	.word	0x08005689
 80055ec:	08005689 	.word	0x08005689
 80055f0:	08005689 	.word	0x08005689
 80055f4:	08005669 	.word	0x08005669
 80055f8:	08005689 	.word	0x08005689
 80055fc:	08005689 	.word	0x08005689
 8005600:	08005689 	.word	0x08005689
 8005604:	08005689 	.word	0x08005689
 8005608:	08005689 	.word	0x08005689
 800560c:	08005689 	.word	0x08005689
 8005610:	08005689 	.word	0x08005689
 8005614:	08005671 	.word	0x08005671
 8005618:	08005689 	.word	0x08005689
 800561c:	08005689 	.word	0x08005689
 8005620:	08005689 	.word	0x08005689
 8005624:	08005689 	.word	0x08005689
 8005628:	08005689 	.word	0x08005689
 800562c:	08005689 	.word	0x08005689
 8005630:	08005689 	.word	0x08005689
 8005634:	08005679 	.word	0x08005679
 8005638:	08005689 	.word	0x08005689
 800563c:	08005689 	.word	0x08005689
 8005640:	08005689 	.word	0x08005689
 8005644:	08005689 	.word	0x08005689
 8005648:	08005689 	.word	0x08005689
 800564c:	08005689 	.word	0x08005689
 8005650:	08005689 	.word	0x08005689
 8005654:	08005681 	.word	0x08005681
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e222      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e21e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e21a      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e216      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005678:	2320      	movs	r3, #32
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e212      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e20e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e20a      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a69      	ldr	r2, [pc, #420]	; (800583c <UART_SetConfig+0x33c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d130      	bne.n	80056fc <UART_SetConfig+0x1fc>
 800569a:	4b67      	ldr	r3, [pc, #412]	; (8005838 <UART_SetConfig+0x338>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d826      	bhi.n	80056f4 <UART_SetConfig+0x1f4>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x1ac>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056c5 	.word	0x080056c5
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056ed 	.word	0x080056ed
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e1ec      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e1e8      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e1e4      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e1e0      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056e4:	2320      	movs	r3, #32
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e1dc      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e1d8      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e1d4      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a4f      	ldr	r2, [pc, #316]	; (8005840 <UART_SetConfig+0x340>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d130      	bne.n	8005768 <UART_SetConfig+0x268>
 8005706:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <UART_SetConfig+0x338>)
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b05      	cmp	r3, #5
 8005710:	d826      	bhi.n	8005760 <UART_SetConfig+0x260>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <UART_SetConfig+0x218>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005731 	.word	0x08005731
 800571c:	08005739 	.word	0x08005739
 8005720:	08005741 	.word	0x08005741
 8005724:	08005749 	.word	0x08005749
 8005728:	08005751 	.word	0x08005751
 800572c:	08005759 	.word	0x08005759
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e1b6      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e1b2      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e1ae      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e1aa      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005750:	2320      	movs	r3, #32
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e1a6      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e1a2      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e19e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a35      	ldr	r2, [pc, #212]	; (8005844 <UART_SetConfig+0x344>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d130      	bne.n	80057d4 <UART_SetConfig+0x2d4>
 8005772:	4b31      	ldr	r3, [pc, #196]	; (8005838 <UART_SetConfig+0x338>)
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b05      	cmp	r3, #5
 800577c:	d826      	bhi.n	80057cc <UART_SetConfig+0x2cc>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <UART_SetConfig+0x284>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	0800579d 	.word	0x0800579d
 8005788:	080057a5 	.word	0x080057a5
 800578c:	080057ad 	.word	0x080057ad
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057c5 	.word	0x080057c5
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e180      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057a4:	2304      	movs	r3, #4
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e17c      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e178      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ba:	e174      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057bc:	2320      	movs	r3, #32
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e170      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ca:	e16c      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e168      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <UART_SetConfig+0x348>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d142      	bne.n	8005864 <UART_SetConfig+0x364>
 80057de:	4b16      	ldr	r3, [pc, #88]	; (8005838 <UART_SetConfig+0x338>)
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d838      	bhi.n	800585c <UART_SetConfig+0x35c>
 80057ea:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <UART_SetConfig+0x2f0>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005811 	.word	0x08005811
 80057f8:	08005819 	.word	0x08005819
 80057fc:	08005821 	.word	0x08005821
 8005800:	0800584d 	.word	0x0800584d
 8005804:	08005855 	.word	0x08005855
 8005808:	2300      	movs	r3, #0
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e14a      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005810:	2304      	movs	r3, #4
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e146      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005818:	2308      	movs	r3, #8
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e142      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005820:	2310      	movs	r3, #16
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e13e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005828:	cfff69f3 	.word	0xcfff69f3
 800582c:	58000c00 	.word	0x58000c00
 8005830:	11fff4ff 	.word	0x11fff4ff
 8005834:	40011000 	.word	0x40011000
 8005838:	58024400 	.word	0x58024400
 800583c:	40004400 	.word	0x40004400
 8005840:	40004800 	.word	0x40004800
 8005844:	40004c00 	.word	0x40004c00
 8005848:	40005000 	.word	0x40005000
 800584c:	2320      	movs	r3, #32
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e128      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e124      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e120      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4acb      	ldr	r2, [pc, #812]	; (8005b98 <UART_SetConfig+0x698>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d176      	bne.n	800595c <UART_SetConfig+0x45c>
 800586e:	4bcb      	ldr	r3, [pc, #812]	; (8005b9c <UART_SetConfig+0x69c>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005876:	2b28      	cmp	r3, #40	; 0x28
 8005878:	d86c      	bhi.n	8005954 <UART_SetConfig+0x454>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x380>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005925 	.word	0x08005925
 8005884:	08005955 	.word	0x08005955
 8005888:	08005955 	.word	0x08005955
 800588c:	08005955 	.word	0x08005955
 8005890:	08005955 	.word	0x08005955
 8005894:	08005955 	.word	0x08005955
 8005898:	08005955 	.word	0x08005955
 800589c:	08005955 	.word	0x08005955
 80058a0:	0800592d 	.word	0x0800592d
 80058a4:	08005955 	.word	0x08005955
 80058a8:	08005955 	.word	0x08005955
 80058ac:	08005955 	.word	0x08005955
 80058b0:	08005955 	.word	0x08005955
 80058b4:	08005955 	.word	0x08005955
 80058b8:	08005955 	.word	0x08005955
 80058bc:	08005955 	.word	0x08005955
 80058c0:	08005935 	.word	0x08005935
 80058c4:	08005955 	.word	0x08005955
 80058c8:	08005955 	.word	0x08005955
 80058cc:	08005955 	.word	0x08005955
 80058d0:	08005955 	.word	0x08005955
 80058d4:	08005955 	.word	0x08005955
 80058d8:	08005955 	.word	0x08005955
 80058dc:	08005955 	.word	0x08005955
 80058e0:	0800593d 	.word	0x0800593d
 80058e4:	08005955 	.word	0x08005955
 80058e8:	08005955 	.word	0x08005955
 80058ec:	08005955 	.word	0x08005955
 80058f0:	08005955 	.word	0x08005955
 80058f4:	08005955 	.word	0x08005955
 80058f8:	08005955 	.word	0x08005955
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005945 	.word	0x08005945
 8005904:	08005955 	.word	0x08005955
 8005908:	08005955 	.word	0x08005955
 800590c:	08005955 	.word	0x08005955
 8005910:	08005955 	.word	0x08005955
 8005914:	08005955 	.word	0x08005955
 8005918:	08005955 	.word	0x08005955
 800591c:	08005955 	.word	0x08005955
 8005920:	0800594d 	.word	0x0800594d
 8005924:	2301      	movs	r3, #1
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e0bc      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e0b8      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e0b4      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e0b0      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005944:	2320      	movs	r3, #32
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e0ac      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 800594c:	2340      	movs	r3, #64	; 0x40
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e0a8      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e0a4      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a8f      	ldr	r2, [pc, #572]	; (8005ba0 <UART_SetConfig+0x6a0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d130      	bne.n	80059c8 <UART_SetConfig+0x4c8>
 8005966:	4b8d      	ldr	r3, [pc, #564]	; (8005b9c <UART_SetConfig+0x69c>)
 8005968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b05      	cmp	r3, #5
 8005970:	d826      	bhi.n	80059c0 <UART_SetConfig+0x4c0>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0x478>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005991 	.word	0x08005991
 800597c:	08005999 	.word	0x08005999
 8005980:	080059a1 	.word	0x080059a1
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059b9 	.word	0x080059b9
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e086      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e082      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e07e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e07a      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80059b0:	2320      	movs	r3, #32
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e076      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80059b8:	2340      	movs	r3, #64	; 0x40
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e072      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e06e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a75      	ldr	r2, [pc, #468]	; (8005ba4 <UART_SetConfig+0x6a4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d130      	bne.n	8005a34 <UART_SetConfig+0x534>
 80059d2:	4b72      	ldr	r3, [pc, #456]	; (8005b9c <UART_SetConfig+0x69c>)
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d826      	bhi.n	8005a2c <UART_SetConfig+0x52c>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0x4e4>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	080059fd 	.word	0x080059fd
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	08005a0d 	.word	0x08005a0d
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e050      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e04c      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e048      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e044      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e040      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e03c      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e038      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5b      	ldr	r2, [pc, #364]	; (8005ba8 <UART_SetConfig+0x6a8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d130      	bne.n	8005aa0 <UART_SetConfig+0x5a0>
 8005a3e:	4b57      	ldr	r3, [pc, #348]	; (8005b9c <UART_SetConfig+0x69c>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d826      	bhi.n	8005a98 <UART_SetConfig+0x598>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x550>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a69 	.word	0x08005a69
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	08005a79 	.word	0x08005a79
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	2302      	movs	r3, #2
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e01a      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a70:	2304      	movs	r3, #4
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e016      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e012      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a80:	2310      	movs	r3, #16
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e00e      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e00a      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e006      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e002      	b.n	8005aa6 <UART_SetConfig+0x5a6>
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3f      	ldr	r2, [pc, #252]	; (8005ba8 <UART_SetConfig+0x6a8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	f040 80f8 	bne.w	8005ca2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ab2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	dc46      	bgt.n	8005b48 <UART_SetConfig+0x648>
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	f2c0 8082 	blt.w	8005bc4 <UART_SetConfig+0x6c4>
 8005ac0:	3b02      	subs	r3, #2
 8005ac2:	2b1e      	cmp	r3, #30
 8005ac4:	d87e      	bhi.n	8005bc4 <UART_SetConfig+0x6c4>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x5cc>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005bc5 	.word	0x08005bc5
 8005ad4:	08005b57 	.word	0x08005b57
 8005ad8:	08005bc5 	.word	0x08005bc5
 8005adc:	08005bc5 	.word	0x08005bc5
 8005ae0:	08005bc5 	.word	0x08005bc5
 8005ae4:	08005b67 	.word	0x08005b67
 8005ae8:	08005bc5 	.word	0x08005bc5
 8005aec:	08005bc5 	.word	0x08005bc5
 8005af0:	08005bc5 	.word	0x08005bc5
 8005af4:	08005bc5 	.word	0x08005bc5
 8005af8:	08005bc5 	.word	0x08005bc5
 8005afc:	08005bc5 	.word	0x08005bc5
 8005b00:	08005bc5 	.word	0x08005bc5
 8005b04:	08005b77 	.word	0x08005b77
 8005b08:	08005bc5 	.word	0x08005bc5
 8005b0c:	08005bc5 	.word	0x08005bc5
 8005b10:	08005bc5 	.word	0x08005bc5
 8005b14:	08005bc5 	.word	0x08005bc5
 8005b18:	08005bc5 	.word	0x08005bc5
 8005b1c:	08005bc5 	.word	0x08005bc5
 8005b20:	08005bc5 	.word	0x08005bc5
 8005b24:	08005bc5 	.word	0x08005bc5
 8005b28:	08005bc5 	.word	0x08005bc5
 8005b2c:	08005bc5 	.word	0x08005bc5
 8005b30:	08005bc5 	.word	0x08005bc5
 8005b34:	08005bc5 	.word	0x08005bc5
 8005b38:	08005bc5 	.word	0x08005bc5
 8005b3c:	08005bc5 	.word	0x08005bc5
 8005b40:	08005bc5 	.word	0x08005bc5
 8005b44:	08005bb7 	.word	0x08005bb7
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d037      	beq.n	8005bbc <UART_SetConfig+0x6bc>
 8005b4c:	e03a      	b.n	8005bc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b4e:	f7fd fe67 	bl	8003820 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b54:	e03c      	b.n	8005bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd fe76 	bl	800384c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b64:	e034      	b.n	8005bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b66:	f107 0318 	add.w	r3, r7, #24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd ffc2 	bl	8003af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b74:	e02c      	b.n	8005bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <UART_SetConfig+0x69c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <UART_SetConfig+0x69c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	08db      	lsrs	r3, r3, #3
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	4a07      	ldr	r2, [pc, #28]	; (8005bac <UART_SetConfig+0x6ac>)
 8005b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b94:	e01c      	b.n	8005bd0 <UART_SetConfig+0x6d0>
 8005b96:	bf00      	nop
 8005b98:	40011400 	.word	0x40011400
 8005b9c:	58024400 	.word	0x58024400
 8005ba0:	40007800 	.word	0x40007800
 8005ba4:	40007c00 	.word	0x40007c00
 8005ba8:	58000c00 	.word	0x58000c00
 8005bac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005bb0:	4b9d      	ldr	r3, [pc, #628]	; (8005e28 <UART_SetConfig+0x928>)
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb4:	e00c      	b.n	8005bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bb6:	4b9d      	ldr	r3, [pc, #628]	; (8005e2c <UART_SetConfig+0x92c>)
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bba:	e009      	b.n	8005bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc2:	e005      	b.n	8005bd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 81de 	beq.w	8005f94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	4a94      	ldr	r2, [pc, #592]	; (8005e30 <UART_SetConfig+0x930>)
 8005bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	4413      	add	r3, r2
 8005bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d305      	bcc.n	8005c08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d903      	bls.n	8005c10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c0e:	e1c1      	b.n	8005f94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c12:	2200      	movs	r2, #0
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	60fa      	str	r2, [r7, #12]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	4a84      	ldr	r2, [pc, #528]	; (8005e30 <UART_SetConfig+0x930>)
 8005c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2200      	movs	r2, #0
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c32:	f7fa fbad 	bl	8000390 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	020b      	lsls	r3, r1, #8
 8005c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c4c:	0202      	lsls	r2, r0, #8
 8005c4e:	6979      	ldr	r1, [r7, #20]
 8005c50:	6849      	ldr	r1, [r1, #4]
 8005c52:	0849      	lsrs	r1, r1, #1
 8005c54:	2000      	movs	r0, #0
 8005c56:	460c      	mov	r4, r1
 8005c58:	4605      	mov	r5, r0
 8005c5a:	eb12 0804 	adds.w	r8, r2, r4
 8005c5e:	eb43 0905 	adc.w	r9, r3, r5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	469a      	mov	sl, r3
 8005c6a:	4693      	mov	fp, r2
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	465b      	mov	r3, fp
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	f7fa fb8c 	bl	8000390 <__aeabi_uldivmod>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c86:	d308      	bcc.n	8005c9a <UART_SetConfig+0x79a>
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8e:	d204      	bcs.n	8005c9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e17c      	b.n	8005f94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ca0:	e178      	b.n	8005f94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005caa:	f040 80c5 	bne.w	8005e38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005cae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	dc48      	bgt.n	8005d48 <UART_SetConfig+0x848>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	db7b      	blt.n	8005db2 <UART_SetConfig+0x8b2>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d879      	bhi.n	8005db2 <UART_SetConfig+0x8b2>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x7c4>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d4f 	.word	0x08005d4f
 8005cc8:	08005d57 	.word	0x08005d57
 8005ccc:	08005db3 	.word	0x08005db3
 8005cd0:	08005db3 	.word	0x08005db3
 8005cd4:	08005d5f 	.word	0x08005d5f
 8005cd8:	08005db3 	.word	0x08005db3
 8005cdc:	08005db3 	.word	0x08005db3
 8005ce0:	08005db3 	.word	0x08005db3
 8005ce4:	08005d6f 	.word	0x08005d6f
 8005ce8:	08005db3 	.word	0x08005db3
 8005cec:	08005db3 	.word	0x08005db3
 8005cf0:	08005db3 	.word	0x08005db3
 8005cf4:	08005db3 	.word	0x08005db3
 8005cf8:	08005db3 	.word	0x08005db3
 8005cfc:	08005db3 	.word	0x08005db3
 8005d00:	08005db3 	.word	0x08005db3
 8005d04:	08005d7f 	.word	0x08005d7f
 8005d08:	08005db3 	.word	0x08005db3
 8005d0c:	08005db3 	.word	0x08005db3
 8005d10:	08005db3 	.word	0x08005db3
 8005d14:	08005db3 	.word	0x08005db3
 8005d18:	08005db3 	.word	0x08005db3
 8005d1c:	08005db3 	.word	0x08005db3
 8005d20:	08005db3 	.word	0x08005db3
 8005d24:	08005db3 	.word	0x08005db3
 8005d28:	08005db3 	.word	0x08005db3
 8005d2c:	08005db3 	.word	0x08005db3
 8005d30:	08005db3 	.word	0x08005db3
 8005d34:	08005db3 	.word	0x08005db3
 8005d38:	08005db3 	.word	0x08005db3
 8005d3c:	08005db3 	.word	0x08005db3
 8005d40:	08005db3 	.word	0x08005db3
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d02e      	beq.n	8005daa <UART_SetConfig+0x8aa>
 8005d4c:	e031      	b.n	8005db2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d4e:	f7fc fdf5 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005d52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d54:	e033      	b.n	8005dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d56:	f7fc fe07 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8005d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d5c:	e02f      	b.n	8005dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fd72 	bl	800384c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d6c:	e027      	b.n	8005dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d6e:	f107 0318 	add.w	r3, r7, #24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd febe 	bl	8003af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7c:	e01f      	b.n	8005dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7e:	4b2d      	ldr	r3, [pc, #180]	; (8005e34 <UART_SetConfig+0x934>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d8a:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <UART_SetConfig+0x934>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	08db      	lsrs	r3, r3, #3
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	4a24      	ldr	r2, [pc, #144]	; (8005e28 <UART_SetConfig+0x928>)
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d9c:	e00f      	b.n	8005dbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <UART_SetConfig+0x928>)
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da2:	e00c      	b.n	8005dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005da4:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <UART_SetConfig+0x92c>)
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da8:	e009      	b.n	8005dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005db0:	e005      	b.n	8005dbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80e7 	beq.w	8005f94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <UART_SetConfig+0x930>)
 8005dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd8:	005a      	lsls	r2, r3, #1
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	441a      	add	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	2b0f      	cmp	r3, #15
 8005df0:	d916      	bls.n	8005e20 <UART_SetConfig+0x920>
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d212      	bcs.n	8005e20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f023 030f 	bic.w	r3, r3, #15
 8005e02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e12:	4313      	orrs	r3, r2
 8005e14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	e0b9      	b.n	8005f94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e26:	e0b5      	b.n	8005f94 <UART_SetConfig+0xa94>
 8005e28:	03d09000 	.word	0x03d09000
 8005e2c:	003d0900 	.word	0x003d0900
 8005e30:	08009024 	.word	0x08009024
 8005e34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	dc49      	bgt.n	8005ed4 <UART_SetConfig+0x9d4>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db7c      	blt.n	8005f3e <UART_SetConfig+0xa3e>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d87a      	bhi.n	8005f3e <UART_SetConfig+0xa3e>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x950>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005edb 	.word	0x08005edb
 8005e54:	08005ee3 	.word	0x08005ee3
 8005e58:	08005f3f 	.word	0x08005f3f
 8005e5c:	08005f3f 	.word	0x08005f3f
 8005e60:	08005eeb 	.word	0x08005eeb
 8005e64:	08005f3f 	.word	0x08005f3f
 8005e68:	08005f3f 	.word	0x08005f3f
 8005e6c:	08005f3f 	.word	0x08005f3f
 8005e70:	08005efb 	.word	0x08005efb
 8005e74:	08005f3f 	.word	0x08005f3f
 8005e78:	08005f3f 	.word	0x08005f3f
 8005e7c:	08005f3f 	.word	0x08005f3f
 8005e80:	08005f3f 	.word	0x08005f3f
 8005e84:	08005f3f 	.word	0x08005f3f
 8005e88:	08005f3f 	.word	0x08005f3f
 8005e8c:	08005f3f 	.word	0x08005f3f
 8005e90:	08005f0b 	.word	0x08005f0b
 8005e94:	08005f3f 	.word	0x08005f3f
 8005e98:	08005f3f 	.word	0x08005f3f
 8005e9c:	08005f3f 	.word	0x08005f3f
 8005ea0:	08005f3f 	.word	0x08005f3f
 8005ea4:	08005f3f 	.word	0x08005f3f
 8005ea8:	08005f3f 	.word	0x08005f3f
 8005eac:	08005f3f 	.word	0x08005f3f
 8005eb0:	08005f3f 	.word	0x08005f3f
 8005eb4:	08005f3f 	.word	0x08005f3f
 8005eb8:	08005f3f 	.word	0x08005f3f
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005f3f 	.word	0x08005f3f
 8005ec4:	08005f3f 	.word	0x08005f3f
 8005ec8:	08005f3f 	.word	0x08005f3f
 8005ecc:	08005f3f 	.word	0x08005f3f
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d02e      	beq.n	8005f36 <UART_SetConfig+0xa36>
 8005ed8:	e031      	b.n	8005f3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eda:	f7fc fd2f 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005ede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ee0:	e033      	b.n	8005f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee2:	f7fc fd41 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8005ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ee8:	e02f      	b.n	8005f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd fcac 	bl	800384c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef8:	e027      	b.n	8005f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005efa:	f107 0318 	add.w	r3, r7, #24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd fdf8 	bl	8003af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f08:	e01f      	b.n	8005f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f0a:	4b2d      	ldr	r3, [pc, #180]	; (8005fc0 <UART_SetConfig+0xac0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f16:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <UART_SetConfig+0xac0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	4a28      	ldr	r2, [pc, #160]	; (8005fc4 <UART_SetConfig+0xac4>)
 8005f22:	fa22 f303 	lsr.w	r3, r2, r3
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f28:	e00f      	b.n	8005f4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005f2a:	4b26      	ldr	r3, [pc, #152]	; (8005fc4 <UART_SetConfig+0xac4>)
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f2e:	e00c      	b.n	8005f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <UART_SetConfig+0xac8>)
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3c:	e005      	b.n	8005f4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f48:	bf00      	nop
    }

    if (pclk != 0U)
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d021      	beq.n	8005f94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <UART_SetConfig+0xacc>)
 8005f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	441a      	add	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	d909      	bls.n	8005f8e <UART_SetConfig+0xa8e>
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d205      	bcs.n	8005f8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60da      	str	r2, [r3, #12]
 8005f8c:	e002      	b.n	8005f94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2200      	movs	r2, #0
 8005fae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005fb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3748      	adds	r7, #72	; 0x48
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fbe:	bf00      	nop
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	03d09000 	.word	0x03d09000
 8005fc8:	003d0900 	.word	0x003d0900
 8005fcc:	08009024 	.word	0x08009024

08005fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ce:	d10a      	bne.n	80060e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af02      	add	r7, sp, #8
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006124:	f7fb f90a 	bl	800133c <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10e      	bne.n	8006156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f82f 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e025      	b.n	80061a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d10e      	bne.n	8006182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f819 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00f      	b.n	80061a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b09c      	sub	sp, #112	; 0x70
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	e0a9      	b.n	8006310 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	f000 80a5 	beq.w	8006310 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fb f8b9 	bl	800133c <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <UART_WaitOnFlagUntilTimeout+0x32>
 80061d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d140      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061f0:	667b      	str	r3, [r7, #100]	; 0x64
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e6      	bne.n	80061dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	663b      	str	r3, [r7, #96]	; 0x60
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3308      	adds	r3, #8
 800622c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800622e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800623c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e069      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d051      	beq.n	8006310 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800627a:	d149      	bne.n	8006310 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006284:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800629a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
 80062a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e6      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062d8:	623a      	str	r2, [r7, #32]
 80062da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e010      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	429a      	cmp	r2, r3
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	429a      	cmp	r2, r3
 800632c:	f43f af46 	beq.w	80061bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3770      	adds	r7, #112	; 0x70
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_UARTEx_DisableFifoMode+0x16>
 800634c:	2302      	movs	r3, #2
 800634e:	e027      	b.n	80063a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2224      	movs	r2, #36	; 0x24
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800637e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e02d      	b.n	8006420 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f84f 	bl	80064a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800643c:	2302      	movs	r3, #2
 800643e:	e02d      	b.n	800649c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	; 0x24
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f811 	bl	80064a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d108      	bne.n	80064c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064c4:	e031      	b.n	800652a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064c6:	2310      	movs	r3, #16
 80064c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ca:	2310      	movs	r3, #16
 80064cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	0e5b      	lsrs	r3, r3, #25
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	0f5b      	lsrs	r3, r3, #29
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	7b3a      	ldrb	r2, [r7, #12]
 80064f2:	4911      	ldr	r1, [pc, #68]	; (8006538 <UARTEx_SetNbDataToProcess+0x94>)
 80064f4:	5c8a      	ldrb	r2, [r1, r2]
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064fa:	7b3a      	ldrb	r2, [r7, #12]
 80064fc:	490f      	ldr	r1, [pc, #60]	; (800653c <UARTEx_SetNbDataToProcess+0x98>)
 80064fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006500:	fb93 f3f2 	sdiv	r3, r3, r2
 8006504:	b29a      	uxth	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	7b7a      	ldrb	r2, [r7, #13]
 8006510:	4909      	ldr	r1, [pc, #36]	; (8006538 <UARTEx_SetNbDataToProcess+0x94>)
 8006512:	5c8a      	ldrb	r2, [r1, r2]
 8006514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006518:	7b7a      	ldrb	r2, [r7, #13]
 800651a:	4908      	ldr	r1, [pc, #32]	; (800653c <UARTEx_SetNbDataToProcess+0x98>)
 800651c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800651e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	0800903c 	.word	0x0800903c
 800653c:	08009044 	.word	0x08009044

08006540 <__errno>:
 8006540:	4b01      	ldr	r3, [pc, #4]	; (8006548 <__errno+0x8>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	24000010 	.word	0x24000010

0800654c <__libc_init_array>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	4d0d      	ldr	r5, [pc, #52]	; (8006584 <__libc_init_array+0x38>)
 8006550:	4c0d      	ldr	r4, [pc, #52]	; (8006588 <__libc_init_array+0x3c>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	2600      	movs	r6, #0
 8006558:	42a6      	cmp	r6, r4
 800655a:	d109      	bne.n	8006570 <__libc_init_array+0x24>
 800655c:	4d0b      	ldr	r5, [pc, #44]	; (800658c <__libc_init_array+0x40>)
 800655e:	4c0c      	ldr	r4, [pc, #48]	; (8006590 <__libc_init_array+0x44>)
 8006560:	f002 fd1a 	bl	8008f98 <_init>
 8006564:	1b64      	subs	r4, r4, r5
 8006566:	10a4      	asrs	r4, r4, #2
 8006568:	2600      	movs	r6, #0
 800656a:	42a6      	cmp	r6, r4
 800656c:	d105      	bne.n	800657a <__libc_init_array+0x2e>
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	f855 3b04 	ldr.w	r3, [r5], #4
 8006574:	4798      	blx	r3
 8006576:	3601      	adds	r6, #1
 8006578:	e7ee      	b.n	8006558 <__libc_init_array+0xc>
 800657a:	f855 3b04 	ldr.w	r3, [r5], #4
 800657e:	4798      	blx	r3
 8006580:	3601      	adds	r6, #1
 8006582:	e7f2      	b.n	800656a <__libc_init_array+0x1e>
 8006584:	0800942c 	.word	0x0800942c
 8006588:	0800942c 	.word	0x0800942c
 800658c:	0800942c 	.word	0x0800942c
 8006590:	08009430 	.word	0x08009430

08006594 <memcpy>:
 8006594:	440a      	add	r2, r1
 8006596:	4291      	cmp	r1, r2
 8006598:	f100 33ff 	add.w	r3, r0, #4294967295
 800659c:	d100      	bne.n	80065a0 <memcpy+0xc>
 800659e:	4770      	bx	lr
 80065a0:	b510      	push	{r4, lr}
 80065a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065aa:	4291      	cmp	r1, r2
 80065ac:	d1f9      	bne.n	80065a2 <memcpy+0xe>
 80065ae:	bd10      	pop	{r4, pc}

080065b0 <memset>:
 80065b0:	4402      	add	r2, r0
 80065b2:	4603      	mov	r3, r0
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d100      	bne.n	80065ba <memset+0xa>
 80065b8:	4770      	bx	lr
 80065ba:	f803 1b01 	strb.w	r1, [r3], #1
 80065be:	e7f9      	b.n	80065b4 <memset+0x4>

080065c0 <__cvt>:
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	ed2d 8b02 	vpush	{d8}
 80065c6:	eeb0 8b40 	vmov.f64	d8, d0
 80065ca:	b085      	sub	sp, #20
 80065cc:	4617      	mov	r7, r2
 80065ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065d2:	ee18 2a90 	vmov	r2, s17
 80065d6:	f025 0520 	bic.w	r5, r5, #32
 80065da:	2a00      	cmp	r2, #0
 80065dc:	bfb6      	itet	lt
 80065de:	222d      	movlt	r2, #45	; 0x2d
 80065e0:	2200      	movge	r2, #0
 80065e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80065e6:	2d46      	cmp	r5, #70	; 0x46
 80065e8:	460c      	mov	r4, r1
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	d004      	beq.n	80065f8 <__cvt+0x38>
 80065ee:	2d45      	cmp	r5, #69	; 0x45
 80065f0:	d100      	bne.n	80065f4 <__cvt+0x34>
 80065f2:	3401      	adds	r4, #1
 80065f4:	2102      	movs	r1, #2
 80065f6:	e000      	b.n	80065fa <__cvt+0x3a>
 80065f8:	2103      	movs	r1, #3
 80065fa:	ab03      	add	r3, sp, #12
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	ab02      	add	r3, sp, #8
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	4622      	mov	r2, r4
 8006604:	4633      	mov	r3, r6
 8006606:	eeb0 0b48 	vmov.f64	d0, d8
 800660a:	f000 fdf5 	bl	80071f8 <_dtoa_r>
 800660e:	2d47      	cmp	r5, #71	; 0x47
 8006610:	d101      	bne.n	8006616 <__cvt+0x56>
 8006612:	07fb      	lsls	r3, r7, #31
 8006614:	d51a      	bpl.n	800664c <__cvt+0x8c>
 8006616:	2d46      	cmp	r5, #70	; 0x46
 8006618:	eb00 0204 	add.w	r2, r0, r4
 800661c:	d10c      	bne.n	8006638 <__cvt+0x78>
 800661e:	7803      	ldrb	r3, [r0, #0]
 8006620:	2b30      	cmp	r3, #48	; 0x30
 8006622:	d107      	bne.n	8006634 <__cvt+0x74>
 8006624:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662c:	bf1c      	itt	ne
 800662e:	f1c4 0401 	rsbne	r4, r4, #1
 8006632:	6034      	strne	r4, [r6, #0]
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	441a      	add	r2, r3
 8006638:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	bf08      	it	eq
 8006642:	9203      	streq	r2, [sp, #12]
 8006644:	2130      	movs	r1, #48	; 0x30
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	4293      	cmp	r3, r2
 800664a:	d307      	bcc.n	800665c <__cvt+0x9c>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006650:	1a1b      	subs	r3, r3, r0
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	b005      	add	sp, #20
 8006656:	ecbd 8b02 	vpop	{d8}
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665c:	1c5c      	adds	r4, r3, #1
 800665e:	9403      	str	r4, [sp, #12]
 8006660:	7019      	strb	r1, [r3, #0]
 8006662:	e7f0      	b.n	8006646 <__cvt+0x86>

08006664 <__exponent>:
 8006664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006666:	4603      	mov	r3, r0
 8006668:	2900      	cmp	r1, #0
 800666a:	bfb8      	it	lt
 800666c:	4249      	neglt	r1, r1
 800666e:	f803 2b02 	strb.w	r2, [r3], #2
 8006672:	bfb4      	ite	lt
 8006674:	222d      	movlt	r2, #45	; 0x2d
 8006676:	222b      	movge	r2, #43	; 0x2b
 8006678:	2909      	cmp	r1, #9
 800667a:	7042      	strb	r2, [r0, #1]
 800667c:	dd2a      	ble.n	80066d4 <__exponent+0x70>
 800667e:	f10d 0407 	add.w	r4, sp, #7
 8006682:	46a4      	mov	ip, r4
 8006684:	270a      	movs	r7, #10
 8006686:	46a6      	mov	lr, r4
 8006688:	460a      	mov	r2, r1
 800668a:	fb91 f6f7 	sdiv	r6, r1, r7
 800668e:	fb07 1516 	mls	r5, r7, r6, r1
 8006692:	3530      	adds	r5, #48	; 0x30
 8006694:	2a63      	cmp	r2, #99	; 0x63
 8006696:	f104 34ff 	add.w	r4, r4, #4294967295
 800669a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800669e:	4631      	mov	r1, r6
 80066a0:	dcf1      	bgt.n	8006686 <__exponent+0x22>
 80066a2:	3130      	adds	r1, #48	; 0x30
 80066a4:	f1ae 0502 	sub.w	r5, lr, #2
 80066a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066ac:	1c44      	adds	r4, r0, #1
 80066ae:	4629      	mov	r1, r5
 80066b0:	4561      	cmp	r1, ip
 80066b2:	d30a      	bcc.n	80066ca <__exponent+0x66>
 80066b4:	f10d 0209 	add.w	r2, sp, #9
 80066b8:	eba2 020e 	sub.w	r2, r2, lr
 80066bc:	4565      	cmp	r5, ip
 80066be:	bf88      	it	hi
 80066c0:	2200      	movhi	r2, #0
 80066c2:	4413      	add	r3, r2
 80066c4:	1a18      	subs	r0, r3, r0
 80066c6:	b003      	add	sp, #12
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066d2:	e7ed      	b.n	80066b0 <__exponent+0x4c>
 80066d4:	2330      	movs	r3, #48	; 0x30
 80066d6:	3130      	adds	r1, #48	; 0x30
 80066d8:	7083      	strb	r3, [r0, #2]
 80066da:	70c1      	strb	r1, [r0, #3]
 80066dc:	1d03      	adds	r3, r0, #4
 80066de:	e7f1      	b.n	80066c4 <__exponent+0x60>

080066e0 <_printf_float>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	b08b      	sub	sp, #44	; 0x2c
 80066e6:	460c      	mov	r4, r1
 80066e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80066ec:	4616      	mov	r6, r2
 80066ee:	461f      	mov	r7, r3
 80066f0:	4605      	mov	r5, r0
 80066f2:	f001 fca7 	bl	8008044 <_localeconv_r>
 80066f6:	f8d0 b000 	ldr.w	fp, [r0]
 80066fa:	4658      	mov	r0, fp
 80066fc:	f7f9 fdf0 	bl	80002e0 <strlen>
 8006700:	2300      	movs	r3, #0
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	f8d8 3000 	ldr.w	r3, [r8]
 8006708:	f894 9018 	ldrb.w	r9, [r4, #24]
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	3307      	adds	r3, #7
 8006710:	f023 0307 	bic.w	r3, r3, #7
 8006714:	f103 0108 	add.w	r1, r3, #8
 8006718:	f8c8 1000 	str.w	r1, [r8]
 800671c:	4682      	mov	sl, r0
 800671e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006722:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006726:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006988 <_printf_float+0x2a8>
 800672a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800672e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006732:	eeb4 6b47 	vcmp.f64	d6, d7
 8006736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673a:	dd24      	ble.n	8006786 <_printf_float+0xa6>
 800673c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006744:	d502      	bpl.n	800674c <_printf_float+0x6c>
 8006746:	232d      	movs	r3, #45	; 0x2d
 8006748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674c:	4b90      	ldr	r3, [pc, #576]	; (8006990 <_printf_float+0x2b0>)
 800674e:	4891      	ldr	r0, [pc, #580]	; (8006994 <_printf_float+0x2b4>)
 8006750:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006754:	bf94      	ite	ls
 8006756:	4698      	movls	r8, r3
 8006758:	4680      	movhi	r8, r0
 800675a:	2303      	movs	r3, #3
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	f022 0204 	bic.w	r2, r2, #4
 8006762:	2300      	movs	r3, #0
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9700      	str	r7, [sp, #0]
 800676a:	4633      	mov	r3, r6
 800676c:	aa09      	add	r2, sp, #36	; 0x24
 800676e:	4621      	mov	r1, r4
 8006770:	4628      	mov	r0, r5
 8006772:	f000 f9d3 	bl	8006b1c <_printf_common>
 8006776:	3001      	adds	r0, #1
 8006778:	f040 808a 	bne.w	8006890 <_printf_float+0x1b0>
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	b00b      	add	sp, #44	; 0x2c
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	eeb4 0b40 	vcmp.f64	d0, d0
 800678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678e:	d709      	bvc.n	80067a4 <_printf_float+0xc4>
 8006790:	ee10 3a90 	vmov	r3, s1
 8006794:	2b00      	cmp	r3, #0
 8006796:	bfbc      	itt	lt
 8006798:	232d      	movlt	r3, #45	; 0x2d
 800679a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800679e:	487e      	ldr	r0, [pc, #504]	; (8006998 <_printf_float+0x2b8>)
 80067a0:	4b7e      	ldr	r3, [pc, #504]	; (800699c <_printf_float+0x2bc>)
 80067a2:	e7d5      	b.n	8006750 <_printf_float+0x70>
 80067a4:	6863      	ldr	r3, [r4, #4]
 80067a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067aa:	9104      	str	r1, [sp, #16]
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	d13c      	bne.n	800682a <_printf_float+0x14a>
 80067b0:	2306      	movs	r3, #6
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	2300      	movs	r3, #0
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	ab08      	add	r3, sp, #32
 80067ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80067be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067c2:	ab07      	add	r3, sp, #28
 80067c4:	6861      	ldr	r1, [r4, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	f10d 031b 	add.w	r3, sp, #27
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7ff fef6 	bl	80065c0 <__cvt>
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	9907      	ldr	r1, [sp, #28]
 80067d8:	2b47      	cmp	r3, #71	; 0x47
 80067da:	4680      	mov	r8, r0
 80067dc:	d108      	bne.n	80067f0 <_printf_float+0x110>
 80067de:	1cc8      	adds	r0, r1, #3
 80067e0:	db02      	blt.n	80067e8 <_printf_float+0x108>
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	4299      	cmp	r1, r3
 80067e6:	dd41      	ble.n	800686c <_printf_float+0x18c>
 80067e8:	f1a9 0902 	sub.w	r9, r9, #2
 80067ec:	fa5f f989 	uxtb.w	r9, r9
 80067f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067f4:	d820      	bhi.n	8006838 <_printf_float+0x158>
 80067f6:	3901      	subs	r1, #1
 80067f8:	464a      	mov	r2, r9
 80067fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067fe:	9107      	str	r1, [sp, #28]
 8006800:	f7ff ff30 	bl	8006664 <__exponent>
 8006804:	9a08      	ldr	r2, [sp, #32]
 8006806:	9004      	str	r0, [sp, #16]
 8006808:	1813      	adds	r3, r2, r0
 800680a:	2a01      	cmp	r2, #1
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	dc02      	bgt.n	8006816 <_printf_float+0x136>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	07d2      	lsls	r2, r2, #31
 8006814:	d501      	bpl.n	800681a <_printf_float+0x13a>
 8006816:	3301      	adds	r3, #1
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0a2      	beq.n	8006768 <_printf_float+0x88>
 8006822:	232d      	movs	r3, #45	; 0x2d
 8006824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006828:	e79e      	b.n	8006768 <_printf_float+0x88>
 800682a:	9904      	ldr	r1, [sp, #16]
 800682c:	2947      	cmp	r1, #71	; 0x47
 800682e:	d1c1      	bne.n	80067b4 <_printf_float+0xd4>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1bf      	bne.n	80067b4 <_printf_float+0xd4>
 8006834:	2301      	movs	r3, #1
 8006836:	e7bc      	b.n	80067b2 <_printf_float+0xd2>
 8006838:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800683c:	d118      	bne.n	8006870 <_printf_float+0x190>
 800683e:	2900      	cmp	r1, #0
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	dd0b      	ble.n	800685c <_printf_float+0x17c>
 8006844:	6121      	str	r1, [r4, #16]
 8006846:	b913      	cbnz	r3, 800684e <_printf_float+0x16e>
 8006848:	6822      	ldr	r2, [r4, #0]
 800684a:	07d0      	lsls	r0, r2, #31
 800684c:	d502      	bpl.n	8006854 <_printf_float+0x174>
 800684e:	3301      	adds	r3, #1
 8006850:	440b      	add	r3, r1
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	2300      	movs	r3, #0
 8006856:	65a1      	str	r1, [r4, #88]	; 0x58
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	e7de      	b.n	800681a <_printf_float+0x13a>
 800685c:	b913      	cbnz	r3, 8006864 <_printf_float+0x184>
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	07d2      	lsls	r2, r2, #31
 8006862:	d501      	bpl.n	8006868 <_printf_float+0x188>
 8006864:	3302      	adds	r3, #2
 8006866:	e7f4      	b.n	8006852 <_printf_float+0x172>
 8006868:	2301      	movs	r3, #1
 800686a:	e7f2      	b.n	8006852 <_printf_float+0x172>
 800686c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006870:	9b08      	ldr	r3, [sp, #32]
 8006872:	4299      	cmp	r1, r3
 8006874:	db05      	blt.n	8006882 <_printf_float+0x1a2>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	6121      	str	r1, [r4, #16]
 800687a:	07d8      	lsls	r0, r3, #31
 800687c:	d5ea      	bpl.n	8006854 <_printf_float+0x174>
 800687e:	1c4b      	adds	r3, r1, #1
 8006880:	e7e7      	b.n	8006852 <_printf_float+0x172>
 8006882:	2900      	cmp	r1, #0
 8006884:	bfd4      	ite	le
 8006886:	f1c1 0202 	rsble	r2, r1, #2
 800688a:	2201      	movgt	r2, #1
 800688c:	4413      	add	r3, r2
 800688e:	e7e0      	b.n	8006852 <_printf_float+0x172>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	055a      	lsls	r2, r3, #21
 8006894:	d407      	bmi.n	80068a6 <_printf_float+0x1c6>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	4642      	mov	r2, r8
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	d12a      	bne.n	80068fa <_printf_float+0x21a>
 80068a4:	e76a      	b.n	800677c <_printf_float+0x9c>
 80068a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068aa:	f240 80e2 	bls.w	8006a72 <_printf_float+0x392>
 80068ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80068b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ba:	d133      	bne.n	8006924 <_printf_float+0x244>
 80068bc:	4a38      	ldr	r2, [pc, #224]	; (80069a0 <_printf_float+0x2c0>)
 80068be:	2301      	movs	r3, #1
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af58 	beq.w	800677c <_printf_float+0x9c>
 80068cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	db02      	blt.n	80068da <_printf_float+0x1fa>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	07d8      	lsls	r0, r3, #31
 80068d8:	d50f      	bpl.n	80068fa <_printf_float+0x21a>
 80068da:	4653      	mov	r3, sl
 80068dc:	465a      	mov	r2, fp
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f af49 	beq.w	800677c <_printf_float+0x9c>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 091a 	add.w	r9, r4, #26
 80068f2:	9b08      	ldr	r3, [sp, #32]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	4543      	cmp	r3, r8
 80068f8:	dc09      	bgt.n	800690e <_printf_float+0x22e>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	079b      	lsls	r3, r3, #30
 80068fe:	f100 8108 	bmi.w	8006b12 <_printf_float+0x432>
 8006902:	68e0      	ldr	r0, [r4, #12]
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	4298      	cmp	r0, r3
 8006908:	bfb8      	it	lt
 800690a:	4618      	movlt	r0, r3
 800690c:	e738      	b.n	8006780 <_printf_float+0xa0>
 800690e:	2301      	movs	r3, #1
 8006910:	464a      	mov	r2, r9
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f af2f 	beq.w	800677c <_printf_float+0x9c>
 800691e:	f108 0801 	add.w	r8, r8, #1
 8006922:	e7e6      	b.n	80068f2 <_printf_float+0x212>
 8006924:	9b07      	ldr	r3, [sp, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	dc3c      	bgt.n	80069a4 <_printf_float+0x2c4>
 800692a:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <_printf_float+0x2c0>)
 800692c:	2301      	movs	r3, #1
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	f43f af21 	beq.w	800677c <_printf_float+0x9c>
 800693a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800693e:	4313      	orrs	r3, r2
 8006940:	d102      	bne.n	8006948 <_printf_float+0x268>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	07d9      	lsls	r1, r3, #31
 8006946:	d5d8      	bpl.n	80068fa <_printf_float+0x21a>
 8006948:	4653      	mov	r3, sl
 800694a:	465a      	mov	r2, fp
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	f43f af12 	beq.w	800677c <_printf_float+0x9c>
 8006958:	f04f 0900 	mov.w	r9, #0
 800695c:	f104 0a1a 	add.w	sl, r4, #26
 8006960:	9b07      	ldr	r3, [sp, #28]
 8006962:	425b      	negs	r3, r3
 8006964:	454b      	cmp	r3, r9
 8006966:	dc01      	bgt.n	800696c <_printf_float+0x28c>
 8006968:	9b08      	ldr	r3, [sp, #32]
 800696a:	e795      	b.n	8006898 <_printf_float+0x1b8>
 800696c:	2301      	movs	r3, #1
 800696e:	4652      	mov	r2, sl
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f af00 	beq.w	800677c <_printf_float+0x9c>
 800697c:	f109 0901 	add.w	r9, r9, #1
 8006980:	e7ee      	b.n	8006960 <_printf_float+0x280>
 8006982:	bf00      	nop
 8006984:	f3af 8000 	nop.w
 8006988:	ffffffff 	.word	0xffffffff
 800698c:	7fefffff 	.word	0x7fefffff
 8006990:	08009050 	.word	0x08009050
 8006994:	08009054 	.word	0x08009054
 8006998:	0800905c 	.word	0x0800905c
 800699c:	08009058 	.word	0x08009058
 80069a0:	08009060 	.word	0x08009060
 80069a4:	9a08      	ldr	r2, [sp, #32]
 80069a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bfa8      	it	ge
 80069ac:	461a      	movge	r2, r3
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	4691      	mov	r9, r2
 80069b2:	dc38      	bgt.n	8006a26 <_printf_float+0x346>
 80069b4:	2300      	movs	r3, #0
 80069b6:	9305      	str	r3, [sp, #20]
 80069b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069bc:	f104 021a 	add.w	r2, r4, #26
 80069c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c2:	9905      	ldr	r1, [sp, #20]
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	eba3 0309 	sub.w	r3, r3, r9
 80069ca:	428b      	cmp	r3, r1
 80069cc:	dc33      	bgt.n	8006a36 <_printf_float+0x356>
 80069ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	db3c      	blt.n	8006a50 <_printf_float+0x370>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	07da      	lsls	r2, r3, #31
 80069da:	d439      	bmi.n	8006a50 <_printf_float+0x370>
 80069dc:	9b08      	ldr	r3, [sp, #32]
 80069de:	9a04      	ldr	r2, [sp, #16]
 80069e0:	9907      	ldr	r1, [sp, #28]
 80069e2:	1a9a      	subs	r2, r3, r2
 80069e4:	eba3 0901 	sub.w	r9, r3, r1
 80069e8:	4591      	cmp	r9, r2
 80069ea:	bfa8      	it	ge
 80069ec:	4691      	movge	r9, r2
 80069ee:	f1b9 0f00 	cmp.w	r9, #0
 80069f2:	dc35      	bgt.n	8006a60 <_printf_float+0x380>
 80069f4:	f04f 0800 	mov.w	r8, #0
 80069f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fc:	f104 0a1a 	add.w	sl, r4, #26
 8006a00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	eba3 0309 	sub.w	r3, r3, r9
 8006a0a:	4543      	cmp	r3, r8
 8006a0c:	f77f af75 	ble.w	80068fa <_printf_float+0x21a>
 8006a10:	2301      	movs	r3, #1
 8006a12:	4652      	mov	r2, sl
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f43f aeae 	beq.w	800677c <_printf_float+0x9c>
 8006a20:	f108 0801 	add.w	r8, r8, #1
 8006a24:	e7ec      	b.n	8006a00 <_printf_float+0x320>
 8006a26:	4613      	mov	r3, r2
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1bf      	bne.n	80069b4 <_printf_float+0x2d4>
 8006a34:	e6a2      	b.n	800677c <_printf_float+0x9c>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	9204      	str	r2, [sp, #16]
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f ae9b 	beq.w	800677c <_printf_float+0x9c>
 8006a46:	9b05      	ldr	r3, [sp, #20]
 8006a48:	9a04      	ldr	r2, [sp, #16]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	e7b7      	b.n	80069c0 <_printf_float+0x2e0>
 8006a50:	4653      	mov	r3, sl
 8006a52:	465a      	mov	r2, fp
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d1be      	bne.n	80069dc <_printf_float+0x2fc>
 8006a5e:	e68d      	b.n	800677c <_printf_float+0x9c>
 8006a60:	9a04      	ldr	r2, [sp, #16]
 8006a62:	464b      	mov	r3, r9
 8006a64:	4442      	add	r2, r8
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d1c1      	bne.n	80069f4 <_printf_float+0x314>
 8006a70:	e684      	b.n	800677c <_printf_float+0x9c>
 8006a72:	9a08      	ldr	r2, [sp, #32]
 8006a74:	2a01      	cmp	r2, #1
 8006a76:	dc01      	bgt.n	8006a7c <_printf_float+0x39c>
 8006a78:	07db      	lsls	r3, r3, #31
 8006a7a:	d537      	bpl.n	8006aec <_printf_float+0x40c>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4642      	mov	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f ae78 	beq.w	800677c <_printf_float+0x9c>
 8006a8c:	4653      	mov	r3, sl
 8006a8e:	465a      	mov	r2, fp
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae70 	beq.w	800677c <_printf_float+0x9c>
 8006a9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006aa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa8:	d01b      	beq.n	8006ae2 <_printf_float+0x402>
 8006aaa:	9b08      	ldr	r3, [sp, #32]
 8006aac:	f108 0201 	add.w	r2, r8, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d10e      	bne.n	8006ada <_printf_float+0x3fa>
 8006abc:	e65e      	b.n	800677c <_printf_float+0x9c>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae57 	beq.w	800677c <_printf_float+0x9c>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4543      	cmp	r3, r8
 8006ad8:	dcf1      	bgt.n	8006abe <_printf_float+0x3de>
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ae0:	e6db      	b.n	800689a <_printf_float+0x1ba>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 091a 	add.w	r9, r4, #26
 8006aea:	e7f2      	b.n	8006ad2 <_printf_float+0x3f2>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4642      	mov	r2, r8
 8006af0:	e7df      	b.n	8006ab2 <_printf_float+0x3d2>
 8006af2:	2301      	movs	r3, #1
 8006af4:	464a      	mov	r2, r9
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae3d 	beq.w	800677c <_printf_float+0x9c>
 8006b02:	f108 0801 	add.w	r8, r8, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	4543      	cmp	r3, r8
 8006b0e:	dcf0      	bgt.n	8006af2 <_printf_float+0x412>
 8006b10:	e6f7      	b.n	8006902 <_printf_float+0x222>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	f104 0919 	add.w	r9, r4, #25
 8006b1a:	e7f4      	b.n	8006b06 <_printf_float+0x426>

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfb8      	it	lt
 8006b30:	4613      	movlt	r3, r2
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc26      	bgt.n	8006bb2 <_printf_common+0x96>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42b      	bmi.n	8006bcc <_printf_common+0xb0>
 8006b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d01e      	beq.n	8006bc0 <_printf_common+0xa4>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	6832      	ldr	r2, [r6, #0]
 8006b88:	f003 0306 	and.w	r3, r3, #6
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	341a      	adds	r4, #26
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	d11a      	bne.n	8006be4 <_printf_common+0xc8>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e008      	b.n	8006bc4 <_printf_common+0xa8>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4638      	mov	r0, r7
 8006bba:	47c0      	blx	r8
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d103      	bne.n	8006bc8 <_printf_common+0xac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7c6      	b.n	8006b5a <_printf_common+0x3e>
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd6:	4422      	add	r2, r4
 8006bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be0:	3302      	adds	r3, #2
 8006be2:	e7c7      	b.n	8006b74 <_printf_common+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4622      	mov	r2, r4
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa4>
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7d9      	b.n	8006baa <_printf_common+0x8e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	7e0f      	ldrb	r7, [r1, #24]
 8006bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c00:	2f78      	cmp	r7, #120	; 0x78
 8006c02:	4691      	mov	r9, r2
 8006c04:	4680      	mov	r8, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c0e:	d807      	bhi.n	8006c20 <_printf_i+0x28>
 8006c10:	2f62      	cmp	r7, #98	; 0x62
 8006c12:	d80a      	bhi.n	8006c2a <_printf_i+0x32>
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	f000 80d8 	beq.w	8006dca <_printf_i+0x1d2>
 8006c1a:	2f58      	cmp	r7, #88	; 0x58
 8006c1c:	f000 80a3 	beq.w	8006d66 <_printf_i+0x16e>
 8006c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c28:	e03a      	b.n	8006ca0 <_printf_i+0xa8>
 8006c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c2e:	2b15      	cmp	r3, #21
 8006c30:	d8f6      	bhi.n	8006c20 <_printf_i+0x28>
 8006c32:	a101      	add	r1, pc, #4	; (adr r1, 8006c38 <_printf_i+0x40>)
 8006c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006c21 	.word	0x08006c21
 8006c44:	08006c21 	.word	0x08006c21
 8006c48:	08006c21 	.word	0x08006c21
 8006c4c:	08006c21 	.word	0x08006c21
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006c21 	.word	0x08006c21
 8006c58:	08006c21 	.word	0x08006c21
 8006c5c:	08006c21 	.word	0x08006c21
 8006c60:	08006c21 	.word	0x08006c21
 8006c64:	08006db1 	.word	0x08006db1
 8006c68:	08006cd5 	.word	0x08006cd5
 8006c6c:	08006d93 	.word	0x08006d93
 8006c70:	08006c21 	.word	0x08006c21
 8006c74:	08006c21 	.word	0x08006c21
 8006c78:	08006dd3 	.word	0x08006dd3
 8006c7c:	08006c21 	.word	0x08006c21
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c21 	.word	0x08006c21
 8006c88:	08006c21 	.word	0x08006c21
 8006c8c:	08006d9b 	.word	0x08006d9b
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	602a      	str	r2, [r5, #0]
 8006c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0a3      	b.n	8006dec <_printf_i+0x1f4>
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	6829      	ldr	r1, [r5, #0]
 8006ca8:	0606      	lsls	r6, r0, #24
 8006caa:	f101 0304 	add.w	r3, r1, #4
 8006cae:	d50a      	bpl.n	8006cc6 <_printf_i+0xce>
 8006cb0:	680e      	ldr	r6, [r1, #0]
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xc8>
 8006cb8:	232d      	movs	r3, #45	; 0x2d
 8006cba:	4276      	negs	r6, r6
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	485e      	ldr	r0, [pc, #376]	; (8006e3c <_printf_i+0x244>)
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	e019      	b.n	8006cfa <_printf_i+0x102>
 8006cc6:	680e      	ldr	r6, [r1, #0]
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cce:	bf18      	it	ne
 8006cd0:	b236      	sxthne	r6, r6
 8006cd2:	e7ef      	b.n	8006cb4 <_printf_i+0xbc>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	1d19      	adds	r1, r3, #4
 8006cda:	6029      	str	r1, [r5, #0]
 8006cdc:	0601      	lsls	r1, r0, #24
 8006cde:	d501      	bpl.n	8006ce4 <_printf_i+0xec>
 8006ce0:	681e      	ldr	r6, [r3, #0]
 8006ce2:	e002      	b.n	8006cea <_printf_i+0xf2>
 8006ce4:	0646      	lsls	r6, r0, #25
 8006ce6:	d5fb      	bpl.n	8006ce0 <_printf_i+0xe8>
 8006ce8:	881e      	ldrh	r6, [r3, #0]
 8006cea:	4854      	ldr	r0, [pc, #336]	; (8006e3c <_printf_i+0x244>)
 8006cec:	2f6f      	cmp	r7, #111	; 0x6f
 8006cee:	bf0c      	ite	eq
 8006cf0:	2308      	moveq	r3, #8
 8006cf2:	230a      	movne	r3, #10
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfa:	6865      	ldr	r5, [r4, #4]
 8006cfc:	60a5      	str	r5, [r4, #8]
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	bfa2      	ittt	ge
 8006d02:	6821      	ldrge	r1, [r4, #0]
 8006d04:	f021 0104 	bicge.w	r1, r1, #4
 8006d08:	6021      	strge	r1, [r4, #0]
 8006d0a:	b90e      	cbnz	r6, 8006d10 <_printf_i+0x118>
 8006d0c:	2d00      	cmp	r5, #0
 8006d0e:	d04d      	beq.n	8006dac <_printf_i+0x1b4>
 8006d10:	4615      	mov	r5, r2
 8006d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d16:	fb03 6711 	mls	r7, r3, r1, r6
 8006d1a:	5dc7      	ldrb	r7, [r0, r7]
 8006d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d20:	4637      	mov	r7, r6
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	460e      	mov	r6, r1
 8006d26:	d9f4      	bls.n	8006d12 <_printf_i+0x11a>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <_printf_i+0x14c>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07de      	lsls	r6, r3, #31
 8006d30:	d508      	bpl.n	8006d44 <_printf_i+0x14c>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6861      	ldr	r1, [r4, #4]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	bfde      	ittt	le
 8006d3a:	2330      	movle	r3, #48	; 0x30
 8006d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d44:	1b52      	subs	r2, r2, r5
 8006d46:	6122      	str	r2, [r4, #16]
 8006d48:	f8cd a000 	str.w	sl, [sp]
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	aa03      	add	r2, sp, #12
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fee2 	bl	8006b1c <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d14c      	bne.n	8006df6 <_printf_i+0x1fe>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b004      	add	sp, #16
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	4835      	ldr	r0, [pc, #212]	; (8006e3c <_printf_i+0x244>)
 8006d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d6c:	6829      	ldr	r1, [r5, #0]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d74:	6029      	str	r1, [r5, #0]
 8006d76:	061d      	lsls	r5, r3, #24
 8006d78:	d514      	bpl.n	8006da4 <_printf_i+0x1ac>
 8006d7a:	07df      	lsls	r7, r3, #31
 8006d7c:	bf44      	itt	mi
 8006d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d82:	6023      	strmi	r3, [r4, #0]
 8006d84:	b91e      	cbnz	r6, 8006d8e <_printf_i+0x196>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f023 0320 	bic.w	r3, r3, #32
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	2310      	movs	r3, #16
 8006d90:	e7b0      	b.n	8006cf4 <_printf_i+0xfc>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f043 0320 	orr.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <_printf_i+0x248>)
 8006d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da2:	e7e3      	b.n	8006d6c <_printf_i+0x174>
 8006da4:	0659      	lsls	r1, r3, #25
 8006da6:	bf48      	it	mi
 8006da8:	b2b6      	uxthmi	r6, r6
 8006daa:	e7e6      	b.n	8006d7a <_printf_i+0x182>
 8006dac:	4615      	mov	r5, r2
 8006dae:	e7bb      	b.n	8006d28 <_printf_i+0x130>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	6826      	ldr	r6, [r4, #0]
 8006db4:	6961      	ldr	r1, [r4, #20]
 8006db6:	1d18      	adds	r0, r3, #4
 8006db8:	6028      	str	r0, [r5, #0]
 8006dba:	0635      	lsls	r5, r6, #24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0x1cc>
 8006dc0:	6019      	str	r1, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0x1d2>
 8006dc4:	0670      	lsls	r0, r6, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0x1c8>
 8006dc8:	8019      	strh	r1, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	4615      	mov	r5, r2
 8006dd0:	e7ba      	b.n	8006d48 <_printf_i+0x150>
 8006dd2:	682b      	ldr	r3, [r5, #0]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	602a      	str	r2, [r5, #0]
 8006dd8:	681d      	ldr	r5, [r3, #0]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4628      	mov	r0, r5
 8006de0:	f7f9 fa86 	bl	80002f0 <memchr>
 8006de4:	b108      	cbz	r0, 8006dea <_printf_i+0x1f2>
 8006de6:	1b40      	subs	r0, r0, r5
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	e7a8      	b.n	8006d48 <_printf_i+0x150>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	462a      	mov	r2, r5
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0ab      	beq.n	8006d5c <_printf_i+0x164>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d413      	bmi.n	8006e32 <_printf_i+0x23a>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	4298      	cmp	r0, r3
 8006e10:	bfb8      	it	lt
 8006e12:	4618      	movlt	r0, r3
 8006e14:	e7a4      	b.n	8006d60 <_printf_i+0x168>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d09b      	beq.n	8006d5c <_printf_i+0x164>
 8006e24:	3501      	adds	r5, #1
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	9903      	ldr	r1, [sp, #12]
 8006e2a:	1a5b      	subs	r3, r3, r1
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dcf2      	bgt.n	8006e16 <_printf_i+0x21e>
 8006e30:	e7eb      	b.n	8006e0a <_printf_i+0x212>
 8006e32:	2500      	movs	r5, #0
 8006e34:	f104 0619 	add.w	r6, r4, #25
 8006e38:	e7f5      	b.n	8006e26 <_printf_i+0x22e>
 8006e3a:	bf00      	nop
 8006e3c:	08009062 	.word	0x08009062
 8006e40:	08009073 	.word	0x08009073

08006e44 <iprintf>:
 8006e44:	b40f      	push	{r0, r1, r2, r3}
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <iprintf+0x2c>)
 8006e48:	b513      	push	{r0, r1, r4, lr}
 8006e4a:	681c      	ldr	r4, [r3, #0]
 8006e4c:	b124      	cbz	r4, 8006e58 <iprintf+0x14>
 8006e4e:	69a3      	ldr	r3, [r4, #24]
 8006e50:	b913      	cbnz	r3, 8006e58 <iprintf+0x14>
 8006e52:	4620      	mov	r0, r4
 8006e54:	f001 f858 	bl	8007f08 <__sinit>
 8006e58:	ab05      	add	r3, sp, #20
 8006e5a:	9a04      	ldr	r2, [sp, #16]
 8006e5c:	68a1      	ldr	r1, [r4, #8]
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f001 fe07 	bl	8008a74 <_vfiprintf_r>
 8006e66:	b002      	add	sp, #8
 8006e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6c:	b004      	add	sp, #16
 8006e6e:	4770      	bx	lr
 8006e70:	24000010 	.word	0x24000010

08006e74 <_puts_r>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	460e      	mov	r6, r1
 8006e78:	4605      	mov	r5, r0
 8006e7a:	b118      	cbz	r0, 8006e84 <_puts_r+0x10>
 8006e7c:	6983      	ldr	r3, [r0, #24]
 8006e7e:	b90b      	cbnz	r3, 8006e84 <_puts_r+0x10>
 8006e80:	f001 f842 	bl	8007f08 <__sinit>
 8006e84:	69ab      	ldr	r3, [r5, #24]
 8006e86:	68ac      	ldr	r4, [r5, #8]
 8006e88:	b913      	cbnz	r3, 8006e90 <_puts_r+0x1c>
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f001 f83c 	bl	8007f08 <__sinit>
 8006e90:	4b2c      	ldr	r3, [pc, #176]	; (8006f44 <_puts_r+0xd0>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	d120      	bne.n	8006ed8 <_puts_r+0x64>
 8006e96:	686c      	ldr	r4, [r5, #4]
 8006e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e9a:	07db      	lsls	r3, r3, #31
 8006e9c:	d405      	bmi.n	8006eaa <_puts_r+0x36>
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	0598      	lsls	r0, r3, #22
 8006ea2:	d402      	bmi.n	8006eaa <_puts_r+0x36>
 8006ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea6:	f001 f8d2 	bl	800804e <__retarget_lock_acquire_recursive>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	0719      	lsls	r1, r3, #28
 8006eae:	d51d      	bpl.n	8006eec <_puts_r+0x78>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b1db      	cbz	r3, 8006eec <_puts_r+0x78>
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	bb39      	cbnz	r1, 8006f12 <_puts_r+0x9e>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da38      	bge.n	8006f38 <_puts_r+0xc4>
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	210a      	movs	r1, #10
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f848 	bl	8006f60 <__swbuf_r>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d011      	beq.n	8006ef8 <_puts_r+0x84>
 8006ed4:	250a      	movs	r5, #10
 8006ed6:	e011      	b.n	8006efc <_puts_r+0x88>
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <_puts_r+0xd4>)
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d101      	bne.n	8006ee2 <_puts_r+0x6e>
 8006ede:	68ac      	ldr	r4, [r5, #8]
 8006ee0:	e7da      	b.n	8006e98 <_puts_r+0x24>
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <_puts_r+0xd8>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	bf08      	it	eq
 8006ee8:	68ec      	ldreq	r4, [r5, #12]
 8006eea:	e7d5      	b.n	8006e98 <_puts_r+0x24>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f888 	bl	8007004 <__swsetup_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0dd      	beq.n	8006eb4 <_puts_r+0x40>
 8006ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8006efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006efe:	07da      	lsls	r2, r3, #31
 8006f00:	d405      	bmi.n	8006f0e <_puts_r+0x9a>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	059b      	lsls	r3, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_puts_r+0x9a>
 8006f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0a:	f001 f8a1 	bl	8008050 <__retarget_lock_release_recursive>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da04      	bge.n	8006f20 <_puts_r+0xac>
 8006f16:	69a2      	ldr	r2, [r4, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	dc06      	bgt.n	8006f2a <_puts_r+0xb6>
 8006f1c:	290a      	cmp	r1, #10
 8006f1e:	d004      	beq.n	8006f2a <_puts_r+0xb6>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	7019      	strb	r1, [r3, #0]
 8006f28:	e7c5      	b.n	8006eb6 <_puts_r+0x42>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 f817 	bl	8006f60 <__swbuf_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	d1bf      	bne.n	8006eb6 <_puts_r+0x42>
 8006f36:	e7df      	b.n	8006ef8 <_puts_r+0x84>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	250a      	movs	r5, #10
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	701d      	strb	r5, [r3, #0]
 8006f42:	e7db      	b.n	8006efc <_puts_r+0x88>
 8006f44:	08009134 	.word	0x08009134
 8006f48:	08009154 	.word	0x08009154
 8006f4c:	08009114 	.word	0x08009114

08006f50 <puts>:
 8006f50:	4b02      	ldr	r3, [pc, #8]	; (8006f5c <puts+0xc>)
 8006f52:	4601      	mov	r1, r0
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	f7ff bf8d 	b.w	8006e74 <_puts_r>
 8006f5a:	bf00      	nop
 8006f5c:	24000010 	.word	0x24000010

08006f60 <__swbuf_r>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	460e      	mov	r6, r1
 8006f64:	4614      	mov	r4, r2
 8006f66:	4605      	mov	r5, r0
 8006f68:	b118      	cbz	r0, 8006f72 <__swbuf_r+0x12>
 8006f6a:	6983      	ldr	r3, [r0, #24]
 8006f6c:	b90b      	cbnz	r3, 8006f72 <__swbuf_r+0x12>
 8006f6e:	f000 ffcb 	bl	8007f08 <__sinit>
 8006f72:	4b21      	ldr	r3, [pc, #132]	; (8006ff8 <__swbuf_r+0x98>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	d12b      	bne.n	8006fd0 <__swbuf_r+0x70>
 8006f78:	686c      	ldr	r4, [r5, #4]
 8006f7a:	69a3      	ldr	r3, [r4, #24]
 8006f7c:	60a3      	str	r3, [r4, #8]
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	071a      	lsls	r2, r3, #28
 8006f82:	d52f      	bpl.n	8006fe4 <__swbuf_r+0x84>
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	b36b      	cbz	r3, 8006fe4 <__swbuf_r+0x84>
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	6820      	ldr	r0, [r4, #0]
 8006f8c:	1ac0      	subs	r0, r0, r3
 8006f8e:	6963      	ldr	r3, [r4, #20]
 8006f90:	b2f6      	uxtb	r6, r6
 8006f92:	4283      	cmp	r3, r0
 8006f94:	4637      	mov	r7, r6
 8006f96:	dc04      	bgt.n	8006fa2 <__swbuf_r+0x42>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 ff20 	bl	8007de0 <_fflush_r>
 8006fa0:	bb30      	cbnz	r0, 8006ff0 <__swbuf_r+0x90>
 8006fa2:	68a3      	ldr	r3, [r4, #8]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	60a3      	str	r3, [r4, #8]
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	701e      	strb	r6, [r3, #0]
 8006fb0:	6963      	ldr	r3, [r4, #20]
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	4283      	cmp	r3, r0
 8006fb6:	d004      	beq.n	8006fc2 <__swbuf_r+0x62>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	07db      	lsls	r3, r3, #31
 8006fbc:	d506      	bpl.n	8006fcc <__swbuf_r+0x6c>
 8006fbe:	2e0a      	cmp	r6, #10
 8006fc0:	d104      	bne.n	8006fcc <__swbuf_r+0x6c>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 ff0b 	bl	8007de0 <_fflush_r>
 8006fca:	b988      	cbnz	r0, 8006ff0 <__swbuf_r+0x90>
 8006fcc:	4638      	mov	r0, r7
 8006fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <__swbuf_r+0x9c>)
 8006fd2:	429c      	cmp	r4, r3
 8006fd4:	d101      	bne.n	8006fda <__swbuf_r+0x7a>
 8006fd6:	68ac      	ldr	r4, [r5, #8]
 8006fd8:	e7cf      	b.n	8006f7a <__swbuf_r+0x1a>
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <__swbuf_r+0xa0>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	bf08      	it	eq
 8006fe0:	68ec      	ldreq	r4, [r5, #12]
 8006fe2:	e7ca      	b.n	8006f7a <__swbuf_r+0x1a>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f80c 	bl	8007004 <__swsetup_r>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d0cb      	beq.n	8006f88 <__swbuf_r+0x28>
 8006ff0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ff4:	e7ea      	b.n	8006fcc <__swbuf_r+0x6c>
 8006ff6:	bf00      	nop
 8006ff8:	08009134 	.word	0x08009134
 8006ffc:	08009154 	.word	0x08009154
 8007000:	08009114 	.word	0x08009114

08007004 <__swsetup_r>:
 8007004:	4b32      	ldr	r3, [pc, #200]	; (80070d0 <__swsetup_r+0xcc>)
 8007006:	b570      	push	{r4, r5, r6, lr}
 8007008:	681d      	ldr	r5, [r3, #0]
 800700a:	4606      	mov	r6, r0
 800700c:	460c      	mov	r4, r1
 800700e:	b125      	cbz	r5, 800701a <__swsetup_r+0x16>
 8007010:	69ab      	ldr	r3, [r5, #24]
 8007012:	b913      	cbnz	r3, 800701a <__swsetup_r+0x16>
 8007014:	4628      	mov	r0, r5
 8007016:	f000 ff77 	bl	8007f08 <__sinit>
 800701a:	4b2e      	ldr	r3, [pc, #184]	; (80070d4 <__swsetup_r+0xd0>)
 800701c:	429c      	cmp	r4, r3
 800701e:	d10f      	bne.n	8007040 <__swsetup_r+0x3c>
 8007020:	686c      	ldr	r4, [r5, #4]
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007028:	0719      	lsls	r1, r3, #28
 800702a:	d42c      	bmi.n	8007086 <__swsetup_r+0x82>
 800702c:	06dd      	lsls	r5, r3, #27
 800702e:	d411      	bmi.n	8007054 <__swsetup_r+0x50>
 8007030:	2309      	movs	r3, #9
 8007032:	6033      	str	r3, [r6, #0]
 8007034:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	f04f 30ff 	mov.w	r0, #4294967295
 800703e:	e03e      	b.n	80070be <__swsetup_r+0xba>
 8007040:	4b25      	ldr	r3, [pc, #148]	; (80070d8 <__swsetup_r+0xd4>)
 8007042:	429c      	cmp	r4, r3
 8007044:	d101      	bne.n	800704a <__swsetup_r+0x46>
 8007046:	68ac      	ldr	r4, [r5, #8]
 8007048:	e7eb      	b.n	8007022 <__swsetup_r+0x1e>
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <__swsetup_r+0xd8>)
 800704c:	429c      	cmp	r4, r3
 800704e:	bf08      	it	eq
 8007050:	68ec      	ldreq	r4, [r5, #12]
 8007052:	e7e6      	b.n	8007022 <__swsetup_r+0x1e>
 8007054:	0758      	lsls	r0, r3, #29
 8007056:	d512      	bpl.n	800707e <__swsetup_r+0x7a>
 8007058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800705a:	b141      	cbz	r1, 800706e <__swsetup_r+0x6a>
 800705c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <__swsetup_r+0x66>
 8007064:	4630      	mov	r0, r6
 8007066:	f001 fbfb 	bl	8008860 <_free_r>
 800706a:	2300      	movs	r3, #0
 800706c:	6363      	str	r3, [r4, #52]	; 0x34
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	2300      	movs	r3, #0
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	b94b      	cbnz	r3, 800709e <__swsetup_r+0x9a>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d003      	beq.n	800709e <__swsetup_r+0x9a>
 8007096:	4621      	mov	r1, r4
 8007098:	4630      	mov	r0, r6
 800709a:	f000 ffff 	bl	800809c <__smakebuf_r>
 800709e:	89a0      	ldrh	r0, [r4, #12]
 80070a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a4:	f010 0301 	ands.w	r3, r0, #1
 80070a8:	d00a      	beq.n	80070c0 <__swsetup_r+0xbc>
 80070aa:	2300      	movs	r3, #0
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6963      	ldr	r3, [r4, #20]
 80070b0:	425b      	negs	r3, r3
 80070b2:	61a3      	str	r3, [r4, #24]
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	b943      	cbnz	r3, 80070ca <__swsetup_r+0xc6>
 80070b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070bc:	d1ba      	bne.n	8007034 <__swsetup_r+0x30>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	0781      	lsls	r1, r0, #30
 80070c2:	bf58      	it	pl
 80070c4:	6963      	ldrpl	r3, [r4, #20]
 80070c6:	60a3      	str	r3, [r4, #8]
 80070c8:	e7f4      	b.n	80070b4 <__swsetup_r+0xb0>
 80070ca:	2000      	movs	r0, #0
 80070cc:	e7f7      	b.n	80070be <__swsetup_r+0xba>
 80070ce:	bf00      	nop
 80070d0:	24000010 	.word	0x24000010
 80070d4:	08009134 	.word	0x08009134
 80070d8:	08009154 	.word	0x08009154
 80070dc:	08009114 	.word	0x08009114

080070e0 <quorem>:
 80070e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	6903      	ldr	r3, [r0, #16]
 80070e6:	690c      	ldr	r4, [r1, #16]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	4607      	mov	r7, r0
 80070ec:	f2c0 8081 	blt.w	80071f2 <quorem+0x112>
 80070f0:	3c01      	subs	r4, #1
 80070f2:	f101 0814 	add.w	r8, r1, #20
 80070f6:	f100 0514 	add.w	r5, r0, #20
 80070fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007108:	3301      	adds	r3, #1
 800710a:	429a      	cmp	r2, r3
 800710c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007110:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007114:	fbb2 f6f3 	udiv	r6, r2, r3
 8007118:	d331      	bcc.n	800717e <quorem+0x9e>
 800711a:	f04f 0e00 	mov.w	lr, #0
 800711e:	4640      	mov	r0, r8
 8007120:	46ac      	mov	ip, r5
 8007122:	46f2      	mov	sl, lr
 8007124:	f850 2b04 	ldr.w	r2, [r0], #4
 8007128:	b293      	uxth	r3, r2
 800712a:	fb06 e303 	mla	r3, r6, r3, lr
 800712e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007132:	b29b      	uxth	r3, r3
 8007134:	ebaa 0303 	sub.w	r3, sl, r3
 8007138:	f8dc a000 	ldr.w	sl, [ip]
 800713c:	0c12      	lsrs	r2, r2, #16
 800713e:	fa13 f38a 	uxtah	r3, r3, sl
 8007142:	fb06 e202 	mla	r2, r6, r2, lr
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800714e:	b292      	uxth	r2, r2
 8007150:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007158:	f8bd 3000 	ldrh.w	r3, [sp]
 800715c:	4581      	cmp	r9, r0
 800715e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007162:	f84c 3b04 	str.w	r3, [ip], #4
 8007166:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800716a:	d2db      	bcs.n	8007124 <quorem+0x44>
 800716c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007170:	b92b      	cbnz	r3, 800717e <quorem+0x9e>
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	3b04      	subs	r3, #4
 8007176:	429d      	cmp	r5, r3
 8007178:	461a      	mov	r2, r3
 800717a:	d32e      	bcc.n	80071da <quorem+0xfa>
 800717c:	613c      	str	r4, [r7, #16]
 800717e:	4638      	mov	r0, r7
 8007180:	f001 fa56 	bl	8008630 <__mcmp>
 8007184:	2800      	cmp	r0, #0
 8007186:	db24      	blt.n	80071d2 <quorem+0xf2>
 8007188:	3601      	adds	r6, #1
 800718a:	4628      	mov	r0, r5
 800718c:	f04f 0c00 	mov.w	ip, #0
 8007190:	f858 2b04 	ldr.w	r2, [r8], #4
 8007194:	f8d0 e000 	ldr.w	lr, [r0]
 8007198:	b293      	uxth	r3, r2
 800719a:	ebac 0303 	sub.w	r3, ip, r3
 800719e:	0c12      	lsrs	r2, r2, #16
 80071a0:	fa13 f38e 	uxtah	r3, r3, lr
 80071a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b2:	45c1      	cmp	r9, r8
 80071b4:	f840 3b04 	str.w	r3, [r0], #4
 80071b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071bc:	d2e8      	bcs.n	8007190 <quorem+0xb0>
 80071be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c6:	b922      	cbnz	r2, 80071d2 <quorem+0xf2>
 80071c8:	3b04      	subs	r3, #4
 80071ca:	429d      	cmp	r5, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	d30a      	bcc.n	80071e6 <quorem+0x106>
 80071d0:	613c      	str	r4, [r7, #16]
 80071d2:	4630      	mov	r0, r6
 80071d4:	b003      	add	sp, #12
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	3b04      	subs	r3, #4
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d1cc      	bne.n	800717c <quorem+0x9c>
 80071e2:	3c01      	subs	r4, #1
 80071e4:	e7c7      	b.n	8007176 <quorem+0x96>
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d1f0      	bne.n	80071d0 <quorem+0xf0>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	e7eb      	b.n	80071ca <quorem+0xea>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7ee      	b.n	80071d4 <quorem+0xf4>
	...

080071f8 <_dtoa_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	ed2d 8b02 	vpush	{d8}
 8007200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007202:	b091      	sub	sp, #68	; 0x44
 8007204:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007208:	ec59 8b10 	vmov	r8, r9, d0
 800720c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800720e:	9106      	str	r1, [sp, #24]
 8007210:	4606      	mov	r6, r0
 8007212:	9208      	str	r2, [sp, #32]
 8007214:	930c      	str	r3, [sp, #48]	; 0x30
 8007216:	b975      	cbnz	r5, 8007236 <_dtoa_r+0x3e>
 8007218:	2010      	movs	r0, #16
 800721a:	f000 ff7f 	bl	800811c <malloc>
 800721e:	4602      	mov	r2, r0
 8007220:	6270      	str	r0, [r6, #36]	; 0x24
 8007222:	b920      	cbnz	r0, 800722e <_dtoa_r+0x36>
 8007224:	4baa      	ldr	r3, [pc, #680]	; (80074d0 <_dtoa_r+0x2d8>)
 8007226:	21ea      	movs	r1, #234	; 0xea
 8007228:	48aa      	ldr	r0, [pc, #680]	; (80074d4 <_dtoa_r+0x2dc>)
 800722a:	f001 fdb9 	bl	8008da0 <__assert_func>
 800722e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007232:	6005      	str	r5, [r0, #0]
 8007234:	60c5      	str	r5, [r0, #12]
 8007236:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	b151      	cbz	r1, 8007252 <_dtoa_r+0x5a>
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	604a      	str	r2, [r1, #4]
 8007240:	2301      	movs	r3, #1
 8007242:	4093      	lsls	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	4630      	mov	r0, r6
 8007248:	f000 ffb0 	bl	80081ac <_Bfree>
 800724c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	f1b9 0300 	subs.w	r3, r9, #0
 8007256:	bfbb      	ittet	lt
 8007258:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800725c:	9303      	strlt	r3, [sp, #12]
 800725e:	2300      	movge	r3, #0
 8007260:	2201      	movlt	r2, #1
 8007262:	bfac      	ite	ge
 8007264:	6023      	strge	r3, [r4, #0]
 8007266:	6022      	strlt	r2, [r4, #0]
 8007268:	4b9b      	ldr	r3, [pc, #620]	; (80074d8 <_dtoa_r+0x2e0>)
 800726a:	9c03      	ldr	r4, [sp, #12]
 800726c:	43a3      	bics	r3, r4
 800726e:	d11c      	bne.n	80072aa <_dtoa_r+0xb2>
 8007270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007272:	f242 730f 	movw	r3, #9999	; 0x270f
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800727c:	ea53 0308 	orrs.w	r3, r3, r8
 8007280:	f000 84fd 	beq.w	8007c7e <_dtoa_r+0xa86>
 8007284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007286:	b963      	cbnz	r3, 80072a2 <_dtoa_r+0xaa>
 8007288:	4b94      	ldr	r3, [pc, #592]	; (80074dc <_dtoa_r+0x2e4>)
 800728a:	e01f      	b.n	80072cc <_dtoa_r+0xd4>
 800728c:	4b94      	ldr	r3, [pc, #592]	; (80074e0 <_dtoa_r+0x2e8>)
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	3308      	adds	r3, #8
 8007292:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	9801      	ldr	r0, [sp, #4]
 8007298:	b011      	add	sp, #68	; 0x44
 800729a:	ecbd 8b02 	vpop	{d8}
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	4b8e      	ldr	r3, [pc, #568]	; (80074dc <_dtoa_r+0x2e4>)
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	3303      	adds	r3, #3
 80072a8:	e7f3      	b.n	8007292 <_dtoa_r+0x9a>
 80072aa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80072ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b6:	d10b      	bne.n	80072d0 <_dtoa_r+0xd8>
 80072b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ba:	2301      	movs	r3, #1
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 84d9 	beq.w	8007c78 <_dtoa_r+0xa80>
 80072c6:	4887      	ldr	r0, [pc, #540]	; (80074e4 <_dtoa_r+0x2ec>)
 80072c8:	6018      	str	r0, [r3, #0]
 80072ca:	1e43      	subs	r3, r0, #1
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	e7e2      	b.n	8007296 <_dtoa_r+0x9e>
 80072d0:	a90f      	add	r1, sp, #60	; 0x3c
 80072d2:	aa0e      	add	r2, sp, #56	; 0x38
 80072d4:	4630      	mov	r0, r6
 80072d6:	eeb0 0b48 	vmov.f64	d0, d8
 80072da:	f001 fa4f 	bl	800877c <__d2b>
 80072de:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80072e2:	4605      	mov	r5, r0
 80072e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072e6:	2900      	cmp	r1, #0
 80072e8:	d046      	beq.n	8007378 <_dtoa_r+0x180>
 80072ea:	ee18 4a90 	vmov	r4, s17
 80072ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80072f2:	ec53 2b18 	vmov	r2, r3, d8
 80072f6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80072fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007302:	2400      	movs	r4, #0
 8007304:	ec43 2b16 	vmov	d6, r2, r3
 8007308:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800730c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80074b8 <_dtoa_r+0x2c0>
 8007310:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007314:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80074c0 <_dtoa_r+0x2c8>
 8007318:	eea7 6b05 	vfma.f64	d6, d7, d5
 800731c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80074c8 <_dtoa_r+0x2d0>
 8007320:	ee07 1a90 	vmov	s15, r1
 8007324:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007328:	eeb0 7b46 	vmov.f64	d7, d6
 800732c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007330:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007334:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	ee16 ba90 	vmov	fp, s13
 8007340:	940a      	str	r4, [sp, #40]	; 0x28
 8007342:	d508      	bpl.n	8007356 <_dtoa_r+0x15e>
 8007344:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007348:	eeb4 6b47 	vcmp.f64	d6, d7
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	bf18      	it	ne
 8007352:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007356:	f1bb 0f16 	cmp.w	fp, #22
 800735a:	d82f      	bhi.n	80073bc <_dtoa_r+0x1c4>
 800735c:	4b62      	ldr	r3, [pc, #392]	; (80074e8 <_dtoa_r+0x2f0>)
 800735e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007362:	ed93 7b00 	vldr	d7, [r3]
 8007366:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736e:	d501      	bpl.n	8007374 <_dtoa_r+0x17c>
 8007370:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007374:	2300      	movs	r3, #0
 8007376:	e022      	b.n	80073be <_dtoa_r+0x1c6>
 8007378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800737a:	4401      	add	r1, r0
 800737c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007380:	2b20      	cmp	r3, #32
 8007382:	bfc1      	itttt	gt
 8007384:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007388:	fa04 f303 	lslgt.w	r3, r4, r3
 800738c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007390:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007394:	bfd6      	itet	le
 8007396:	f1c3 0320 	rsble	r3, r3, #32
 800739a:	ea43 0808 	orrgt.w	r8, r3, r8
 800739e:	fa08 f803 	lslle.w	r8, r8, r3
 80073a2:	ee07 8a90 	vmov	s15, r8
 80073a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073aa:	3901      	subs	r1, #1
 80073ac:	ee17 4a90 	vmov	r4, s15
 80073b0:	ec53 2b17 	vmov	r2, r3, d7
 80073b4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80073b8:	2401      	movs	r4, #1
 80073ba:	e7a3      	b.n	8007304 <_dtoa_r+0x10c>
 80073bc:	2301      	movs	r3, #1
 80073be:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c0:	1a43      	subs	r3, r0, r1
 80073c2:	1e5a      	subs	r2, r3, #1
 80073c4:	bf45      	ittet	mi
 80073c6:	f1c3 0301 	rsbmi	r3, r3, #1
 80073ca:	9304      	strmi	r3, [sp, #16]
 80073cc:	2300      	movpl	r3, #0
 80073ce:	2300      	movmi	r3, #0
 80073d0:	9205      	str	r2, [sp, #20]
 80073d2:	bf54      	ite	pl
 80073d4:	9304      	strpl	r3, [sp, #16]
 80073d6:	9305      	strmi	r3, [sp, #20]
 80073d8:	f1bb 0f00 	cmp.w	fp, #0
 80073dc:	db18      	blt.n	8007410 <_dtoa_r+0x218>
 80073de:	9b05      	ldr	r3, [sp, #20]
 80073e0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80073e4:	445b      	add	r3, fp
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	2300      	movs	r3, #0
 80073ea:	9a06      	ldr	r2, [sp, #24]
 80073ec:	2a09      	cmp	r2, #9
 80073ee:	d849      	bhi.n	8007484 <_dtoa_r+0x28c>
 80073f0:	2a05      	cmp	r2, #5
 80073f2:	bfc4      	itt	gt
 80073f4:	3a04      	subgt	r2, #4
 80073f6:	9206      	strgt	r2, [sp, #24]
 80073f8:	9a06      	ldr	r2, [sp, #24]
 80073fa:	f1a2 0202 	sub.w	r2, r2, #2
 80073fe:	bfcc      	ite	gt
 8007400:	2400      	movgt	r4, #0
 8007402:	2401      	movle	r4, #1
 8007404:	2a03      	cmp	r2, #3
 8007406:	d848      	bhi.n	800749a <_dtoa_r+0x2a2>
 8007408:	e8df f002 	tbb	[pc, r2]
 800740c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	2200      	movs	r2, #0
 8007414:	eba3 030b 	sub.w	r3, r3, fp
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	9209      	str	r2, [sp, #36]	; 0x24
 800741c:	f1cb 0300 	rsb	r3, fp, #0
 8007420:	e7e3      	b.n	80073ea <_dtoa_r+0x1f2>
 8007422:	2200      	movs	r2, #0
 8007424:	9207      	str	r2, [sp, #28]
 8007426:	9a08      	ldr	r2, [sp, #32]
 8007428:	2a00      	cmp	r2, #0
 800742a:	dc39      	bgt.n	80074a0 <_dtoa_r+0x2a8>
 800742c:	f04f 0a01 	mov.w	sl, #1
 8007430:	46d1      	mov	r9, sl
 8007432:	4652      	mov	r2, sl
 8007434:	f8cd a020 	str.w	sl, [sp, #32]
 8007438:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800743a:	2100      	movs	r1, #0
 800743c:	6079      	str	r1, [r7, #4]
 800743e:	2004      	movs	r0, #4
 8007440:	f100 0c14 	add.w	ip, r0, #20
 8007444:	4594      	cmp	ip, r2
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	d92f      	bls.n	80074aa <_dtoa_r+0x2b2>
 800744a:	4630      	mov	r0, r6
 800744c:	930d      	str	r3, [sp, #52]	; 0x34
 800744e:	f000 fe6d 	bl	800812c <_Balloc>
 8007452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007454:	9001      	str	r0, [sp, #4]
 8007456:	4602      	mov	r2, r0
 8007458:	2800      	cmp	r0, #0
 800745a:	d149      	bne.n	80074f0 <_dtoa_r+0x2f8>
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <_dtoa_r+0x2f4>)
 800745e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007462:	e6e1      	b.n	8007228 <_dtoa_r+0x30>
 8007464:	2201      	movs	r2, #1
 8007466:	e7dd      	b.n	8007424 <_dtoa_r+0x22c>
 8007468:	2200      	movs	r2, #0
 800746a:	9207      	str	r2, [sp, #28]
 800746c:	9a08      	ldr	r2, [sp, #32]
 800746e:	eb0b 0a02 	add.w	sl, fp, r2
 8007472:	f10a 0901 	add.w	r9, sl, #1
 8007476:	464a      	mov	r2, r9
 8007478:	2a01      	cmp	r2, #1
 800747a:	bfb8      	it	lt
 800747c:	2201      	movlt	r2, #1
 800747e:	e7db      	b.n	8007438 <_dtoa_r+0x240>
 8007480:	2201      	movs	r2, #1
 8007482:	e7f2      	b.n	800746a <_dtoa_r+0x272>
 8007484:	2401      	movs	r4, #1
 8007486:	2200      	movs	r2, #0
 8007488:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800748c:	f04f 3aff 	mov.w	sl, #4294967295
 8007490:	2100      	movs	r1, #0
 8007492:	46d1      	mov	r9, sl
 8007494:	2212      	movs	r2, #18
 8007496:	9108      	str	r1, [sp, #32]
 8007498:	e7ce      	b.n	8007438 <_dtoa_r+0x240>
 800749a:	2201      	movs	r2, #1
 800749c:	9207      	str	r2, [sp, #28]
 800749e:	e7f5      	b.n	800748c <_dtoa_r+0x294>
 80074a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80074a4:	46d1      	mov	r9, sl
 80074a6:	4652      	mov	r2, sl
 80074a8:	e7c6      	b.n	8007438 <_dtoa_r+0x240>
 80074aa:	3101      	adds	r1, #1
 80074ac:	6079      	str	r1, [r7, #4]
 80074ae:	0040      	lsls	r0, r0, #1
 80074b0:	e7c6      	b.n	8007440 <_dtoa_r+0x248>
 80074b2:	bf00      	nop
 80074b4:	f3af 8000 	nop.w
 80074b8:	636f4361 	.word	0x636f4361
 80074bc:	3fd287a7 	.word	0x3fd287a7
 80074c0:	8b60c8b3 	.word	0x8b60c8b3
 80074c4:	3fc68a28 	.word	0x3fc68a28
 80074c8:	509f79fb 	.word	0x509f79fb
 80074cc:	3fd34413 	.word	0x3fd34413
 80074d0:	08009091 	.word	0x08009091
 80074d4:	080090a8 	.word	0x080090a8
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	0800908d 	.word	0x0800908d
 80074e0:	08009084 	.word	0x08009084
 80074e4:	08009061 	.word	0x08009061
 80074e8:	080091f8 	.word	0x080091f8
 80074ec:	08009103 	.word	0x08009103
 80074f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80074f2:	9901      	ldr	r1, [sp, #4]
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	f1b9 0f0e 	cmp.w	r9, #14
 80074fa:	d86c      	bhi.n	80075d6 <_dtoa_r+0x3de>
 80074fc:	2c00      	cmp	r4, #0
 80074fe:	d06a      	beq.n	80075d6 <_dtoa_r+0x3de>
 8007500:	f1bb 0f00 	cmp.w	fp, #0
 8007504:	f340 80a0 	ble.w	8007648 <_dtoa_r+0x450>
 8007508:	49c1      	ldr	r1, [pc, #772]	; (8007810 <_dtoa_r+0x618>)
 800750a:	f00b 020f 	and.w	r2, fp, #15
 800750e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007512:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007516:	ed92 7b00 	vldr	d7, [r2]
 800751a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800751e:	f000 8087 	beq.w	8007630 <_dtoa_r+0x438>
 8007522:	4abc      	ldr	r2, [pc, #752]	; (8007814 <_dtoa_r+0x61c>)
 8007524:	ed92 6b08 	vldr	d6, [r2, #32]
 8007528:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800752c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007530:	f001 010f 	and.w	r1, r1, #15
 8007534:	2203      	movs	r2, #3
 8007536:	48b7      	ldr	r0, [pc, #732]	; (8007814 <_dtoa_r+0x61c>)
 8007538:	2900      	cmp	r1, #0
 800753a:	d17b      	bne.n	8007634 <_dtoa_r+0x43c>
 800753c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007540:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007544:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800754a:	2900      	cmp	r1, #0
 800754c:	f000 80a2 	beq.w	8007694 <_dtoa_r+0x49c>
 8007550:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007554:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007558:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	f140 8098 	bpl.w	8007694 <_dtoa_r+0x49c>
 8007564:	f1b9 0f00 	cmp.w	r9, #0
 8007568:	f000 8094 	beq.w	8007694 <_dtoa_r+0x49c>
 800756c:	f1ba 0f00 	cmp.w	sl, #0
 8007570:	dd2f      	ble.n	80075d2 <_dtoa_r+0x3da>
 8007572:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007576:	ee27 7b06 	vmul.f64	d7, d7, d6
 800757a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800757e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007582:	3201      	adds	r2, #1
 8007584:	4650      	mov	r0, sl
 8007586:	ed9d 6b02 	vldr	d6, [sp, #8]
 800758a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800758e:	ee07 2a90 	vmov	s15, r2
 8007592:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007596:	eea7 5b06 	vfma.f64	d5, d7, d6
 800759a:	ee15 4a90 	vmov	r4, s11
 800759e:	ec52 1b15 	vmov	r1, r2, d5
 80075a2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d177      	bne.n	800769a <_dtoa_r+0x4a2>
 80075aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80075ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80075b2:	ec42 1b17 	vmov	d7, r1, r2
 80075b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075be:	f300 8263 	bgt.w	8007a88 <_dtoa_r+0x890>
 80075c2:	eeb1 7b47 	vneg.f64	d7, d7
 80075c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ce:	f100 8258 	bmi.w	8007a82 <_dtoa_r+0x88a>
 80075d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075d8:	2a00      	cmp	r2, #0
 80075da:	f2c0 811d 	blt.w	8007818 <_dtoa_r+0x620>
 80075de:	f1bb 0f0e 	cmp.w	fp, #14
 80075e2:	f300 8119 	bgt.w	8007818 <_dtoa_r+0x620>
 80075e6:	4b8a      	ldr	r3, [pc, #552]	; (8007810 <_dtoa_r+0x618>)
 80075e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075ec:	ed93 6b00 	vldr	d6, [r3]
 80075f0:	9b08      	ldr	r3, [sp, #32]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f280 80b7 	bge.w	8007766 <_dtoa_r+0x56e>
 80075f8:	f1b9 0f00 	cmp.w	r9, #0
 80075fc:	f300 80b3 	bgt.w	8007766 <_dtoa_r+0x56e>
 8007600:	f040 823f 	bne.w	8007a82 <_dtoa_r+0x88a>
 8007604:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007608:	ee26 6b07 	vmul.f64	d6, d6, d7
 800760c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007610:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007618:	464c      	mov	r4, r9
 800761a:	464f      	mov	r7, r9
 800761c:	f280 8215 	bge.w	8007a4a <_dtoa_r+0x852>
 8007620:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007624:	2331      	movs	r3, #49	; 0x31
 8007626:	f808 3b01 	strb.w	r3, [r8], #1
 800762a:	f10b 0b01 	add.w	fp, fp, #1
 800762e:	e211      	b.n	8007a54 <_dtoa_r+0x85c>
 8007630:	2202      	movs	r2, #2
 8007632:	e780      	b.n	8007536 <_dtoa_r+0x33e>
 8007634:	07cc      	lsls	r4, r1, #31
 8007636:	d504      	bpl.n	8007642 <_dtoa_r+0x44a>
 8007638:	ed90 6b00 	vldr	d6, [r0]
 800763c:	3201      	adds	r2, #1
 800763e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007642:	1049      	asrs	r1, r1, #1
 8007644:	3008      	adds	r0, #8
 8007646:	e777      	b.n	8007538 <_dtoa_r+0x340>
 8007648:	d022      	beq.n	8007690 <_dtoa_r+0x498>
 800764a:	f1cb 0100 	rsb	r1, fp, #0
 800764e:	4a70      	ldr	r2, [pc, #448]	; (8007810 <_dtoa_r+0x618>)
 8007650:	f001 000f 	and.w	r0, r1, #15
 8007654:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007658:	ed92 7b00 	vldr	d7, [r2]
 800765c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007660:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007664:	486b      	ldr	r0, [pc, #428]	; (8007814 <_dtoa_r+0x61c>)
 8007666:	1109      	asrs	r1, r1, #4
 8007668:	2400      	movs	r4, #0
 800766a:	2202      	movs	r2, #2
 800766c:	b929      	cbnz	r1, 800767a <_dtoa_r+0x482>
 800766e:	2c00      	cmp	r4, #0
 8007670:	f43f af6a 	beq.w	8007548 <_dtoa_r+0x350>
 8007674:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007678:	e766      	b.n	8007548 <_dtoa_r+0x350>
 800767a:	07cf      	lsls	r7, r1, #31
 800767c:	d505      	bpl.n	800768a <_dtoa_r+0x492>
 800767e:	ed90 6b00 	vldr	d6, [r0]
 8007682:	3201      	adds	r2, #1
 8007684:	2401      	movs	r4, #1
 8007686:	ee27 7b06 	vmul.f64	d7, d7, d6
 800768a:	1049      	asrs	r1, r1, #1
 800768c:	3008      	adds	r0, #8
 800768e:	e7ed      	b.n	800766c <_dtoa_r+0x474>
 8007690:	2202      	movs	r2, #2
 8007692:	e759      	b.n	8007548 <_dtoa_r+0x350>
 8007694:	465f      	mov	r7, fp
 8007696:	4648      	mov	r0, r9
 8007698:	e775      	b.n	8007586 <_dtoa_r+0x38e>
 800769a:	ec42 1b17 	vmov	d7, r1, r2
 800769e:	4a5c      	ldr	r2, [pc, #368]	; (8007810 <_dtoa_r+0x618>)
 80076a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80076a4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80076a8:	9a01      	ldr	r2, [sp, #4]
 80076aa:	1814      	adds	r4, r2, r0
 80076ac:	9a07      	ldr	r2, [sp, #28]
 80076ae:	b352      	cbz	r2, 8007706 <_dtoa_r+0x50e>
 80076b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80076b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80076b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076bc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80076c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80076c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80076c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80076cc:	ee14 2a90 	vmov	r2, s9
 80076d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80076d4:	3230      	adds	r2, #48	; 0x30
 80076d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80076da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e2:	f808 2b01 	strb.w	r2, [r8], #1
 80076e6:	d439      	bmi.n	800775c <_dtoa_r+0x564>
 80076e8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80076ec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	d472      	bmi.n	80077dc <_dtoa_r+0x5e4>
 80076f6:	45a0      	cmp	r8, r4
 80076f8:	f43f af6b 	beq.w	80075d2 <_dtoa_r+0x3da>
 80076fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007700:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007704:	e7e0      	b.n	80076c8 <_dtoa_r+0x4d0>
 8007706:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800770a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800770e:	4621      	mov	r1, r4
 8007710:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007714:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007718:	ee14 2a90 	vmov	r2, s9
 800771c:	3230      	adds	r2, #48	; 0x30
 800771e:	f808 2b01 	strb.w	r2, [r8], #1
 8007722:	45a0      	cmp	r8, r4
 8007724:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007728:	ee36 6b45 	vsub.f64	d6, d6, d5
 800772c:	d118      	bne.n	8007760 <_dtoa_r+0x568>
 800772e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007732:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007736:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773e:	dc4d      	bgt.n	80077dc <_dtoa_r+0x5e4>
 8007740:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007744:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774c:	f57f af41 	bpl.w	80075d2 <_dtoa_r+0x3da>
 8007750:	4688      	mov	r8, r1
 8007752:	3901      	subs	r1, #1
 8007754:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007758:	2b30      	cmp	r3, #48	; 0x30
 800775a:	d0f9      	beq.n	8007750 <_dtoa_r+0x558>
 800775c:	46bb      	mov	fp, r7
 800775e:	e02a      	b.n	80077b6 <_dtoa_r+0x5be>
 8007760:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007764:	e7d6      	b.n	8007714 <_dtoa_r+0x51c>
 8007766:	ed9d 7b02 	vldr	d7, [sp, #8]
 800776a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800776e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007772:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007776:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800777a:	ee15 3a10 	vmov	r3, s10
 800777e:	3330      	adds	r3, #48	; 0x30
 8007780:	f808 3b01 	strb.w	r3, [r8], #1
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	eba8 0303 	sub.w	r3, r8, r3
 800778a:	4599      	cmp	r9, r3
 800778c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007790:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007794:	d133      	bne.n	80077fe <_dtoa_r+0x606>
 8007796:	ee37 7b07 	vadd.f64	d7, d7, d7
 800779a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a2:	dc1a      	bgt.n	80077da <_dtoa_r+0x5e2>
 80077a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	d103      	bne.n	80077b6 <_dtoa_r+0x5be>
 80077ae:	ee15 3a10 	vmov	r3, s10
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	d411      	bmi.n	80077da <_dtoa_r+0x5e2>
 80077b6:	4629      	mov	r1, r5
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 fcf7 	bl	80081ac <_Bfree>
 80077be:	2300      	movs	r3, #0
 80077c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c2:	f888 3000 	strb.w	r3, [r8]
 80077c6:	f10b 0301 	add.w	r3, fp, #1
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f43f ad61 	beq.w	8007296 <_dtoa_r+0x9e>
 80077d4:	f8c3 8000 	str.w	r8, [r3]
 80077d8:	e55d      	b.n	8007296 <_dtoa_r+0x9e>
 80077da:	465f      	mov	r7, fp
 80077dc:	4643      	mov	r3, r8
 80077de:	4698      	mov	r8, r3
 80077e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e4:	2a39      	cmp	r2, #57	; 0x39
 80077e6:	d106      	bne.n	80077f6 <_dtoa_r+0x5fe>
 80077e8:	9a01      	ldr	r2, [sp, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1f7      	bne.n	80077de <_dtoa_r+0x5e6>
 80077ee:	9901      	ldr	r1, [sp, #4]
 80077f0:	2230      	movs	r2, #48	; 0x30
 80077f2:	3701      	adds	r7, #1
 80077f4:	700a      	strb	r2, [r1, #0]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	3201      	adds	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e7ae      	b.n	800775c <_dtoa_r+0x564>
 80077fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780a:	d1b2      	bne.n	8007772 <_dtoa_r+0x57a>
 800780c:	e7d3      	b.n	80077b6 <_dtoa_r+0x5be>
 800780e:	bf00      	nop
 8007810:	080091f8 	.word	0x080091f8
 8007814:	080091d0 	.word	0x080091d0
 8007818:	9907      	ldr	r1, [sp, #28]
 800781a:	2900      	cmp	r1, #0
 800781c:	f000 80d0 	beq.w	80079c0 <_dtoa_r+0x7c8>
 8007820:	9906      	ldr	r1, [sp, #24]
 8007822:	2901      	cmp	r1, #1
 8007824:	f300 80b4 	bgt.w	8007990 <_dtoa_r+0x798>
 8007828:	990a      	ldr	r1, [sp, #40]	; 0x28
 800782a:	2900      	cmp	r1, #0
 800782c:	f000 80ac 	beq.w	8007988 <_dtoa_r+0x790>
 8007830:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007834:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007838:	461c      	mov	r4, r3
 800783a:	930a      	str	r3, [sp, #40]	; 0x28
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	4413      	add	r3, r2
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	2101      	movs	r1, #1
 8007846:	4413      	add	r3, r2
 8007848:	4630      	mov	r0, r6
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	f000 fd66 	bl	800831c <__i2b>
 8007850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007852:	4607      	mov	r7, r0
 8007854:	f1b8 0f00 	cmp.w	r8, #0
 8007858:	dd0d      	ble.n	8007876 <_dtoa_r+0x67e>
 800785a:	9a05      	ldr	r2, [sp, #20]
 800785c:	2a00      	cmp	r2, #0
 800785e:	dd0a      	ble.n	8007876 <_dtoa_r+0x67e>
 8007860:	4542      	cmp	r2, r8
 8007862:	9904      	ldr	r1, [sp, #16]
 8007864:	bfa8      	it	ge
 8007866:	4642      	movge	r2, r8
 8007868:	1a89      	subs	r1, r1, r2
 800786a:	9104      	str	r1, [sp, #16]
 800786c:	9905      	ldr	r1, [sp, #20]
 800786e:	eba8 0802 	sub.w	r8, r8, r2
 8007872:	1a8a      	subs	r2, r1, r2
 8007874:	9205      	str	r2, [sp, #20]
 8007876:	b303      	cbz	r3, 80078ba <_dtoa_r+0x6c2>
 8007878:	9a07      	ldr	r2, [sp, #28]
 800787a:	2a00      	cmp	r2, #0
 800787c:	f000 80a5 	beq.w	80079ca <_dtoa_r+0x7d2>
 8007880:	2c00      	cmp	r4, #0
 8007882:	dd13      	ble.n	80078ac <_dtoa_r+0x6b4>
 8007884:	4639      	mov	r1, r7
 8007886:	4622      	mov	r2, r4
 8007888:	4630      	mov	r0, r6
 800788a:	930d      	str	r3, [sp, #52]	; 0x34
 800788c:	f000 fe06 	bl	800849c <__pow5mult>
 8007890:	462a      	mov	r2, r5
 8007892:	4601      	mov	r1, r0
 8007894:	4607      	mov	r7, r0
 8007896:	4630      	mov	r0, r6
 8007898:	f000 fd56 	bl	8008348 <__multiply>
 800789c:	4629      	mov	r1, r5
 800789e:	900a      	str	r0, [sp, #40]	; 0x28
 80078a0:	4630      	mov	r0, r6
 80078a2:	f000 fc83 	bl	80081ac <_Bfree>
 80078a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078aa:	4615      	mov	r5, r2
 80078ac:	1b1a      	subs	r2, r3, r4
 80078ae:	d004      	beq.n	80078ba <_dtoa_r+0x6c2>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 fdf2 	bl	800849c <__pow5mult>
 80078b8:	4605      	mov	r5, r0
 80078ba:	2101      	movs	r1, #1
 80078bc:	4630      	mov	r0, r6
 80078be:	f000 fd2d 	bl	800831c <__i2b>
 80078c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	4604      	mov	r4, r0
 80078c8:	f340 8081 	ble.w	80079ce <_dtoa_r+0x7d6>
 80078cc:	461a      	mov	r2, r3
 80078ce:	4601      	mov	r1, r0
 80078d0:	4630      	mov	r0, r6
 80078d2:	f000 fde3 	bl	800849c <__pow5mult>
 80078d6:	9b06      	ldr	r3, [sp, #24]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	4604      	mov	r4, r0
 80078dc:	dd7a      	ble.n	80079d4 <_dtoa_r+0x7dc>
 80078de:	2300      	movs	r3, #0
 80078e0:	930a      	str	r3, [sp, #40]	; 0x28
 80078e2:	6922      	ldr	r2, [r4, #16]
 80078e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80078e8:	6910      	ldr	r0, [r2, #16]
 80078ea:	f000 fcc7 	bl	800827c <__hi0bits>
 80078ee:	f1c0 0020 	rsb	r0, r0, #32
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	4418      	add	r0, r3
 80078f6:	f010 001f 	ands.w	r0, r0, #31
 80078fa:	f000 808c 	beq.w	8007a16 <_dtoa_r+0x81e>
 80078fe:	f1c0 0220 	rsb	r2, r0, #32
 8007902:	2a04      	cmp	r2, #4
 8007904:	f340 8085 	ble.w	8007a12 <_dtoa_r+0x81a>
 8007908:	f1c0 001c 	rsb	r0, r0, #28
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	4403      	add	r3, r0
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	4403      	add	r3, r0
 8007916:	4480      	add	r8, r0
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd05      	ble.n	800792c <_dtoa_r+0x734>
 8007920:	4629      	mov	r1, r5
 8007922:	461a      	mov	r2, r3
 8007924:	4630      	mov	r0, r6
 8007926:	f000 fe13 	bl	8008550 <__lshift>
 800792a:	4605      	mov	r5, r0
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd05      	ble.n	800793e <_dtoa_r+0x746>
 8007932:	4621      	mov	r1, r4
 8007934:	461a      	mov	r2, r3
 8007936:	4630      	mov	r0, r6
 8007938:	f000 fe0a 	bl	8008550 <__lshift>
 800793c:	4604      	mov	r4, r0
 800793e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d06a      	beq.n	8007a1a <_dtoa_r+0x822>
 8007944:	4621      	mov	r1, r4
 8007946:	4628      	mov	r0, r5
 8007948:	f000 fe72 	bl	8008630 <__mcmp>
 800794c:	2800      	cmp	r0, #0
 800794e:	da64      	bge.n	8007a1a <_dtoa_r+0x822>
 8007950:	2300      	movs	r3, #0
 8007952:	4629      	mov	r1, r5
 8007954:	220a      	movs	r2, #10
 8007956:	4630      	mov	r0, r6
 8007958:	f000 fc4a 	bl	80081f0 <__multadd>
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007962:	4605      	mov	r5, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8191 	beq.w	8007c8c <_dtoa_r+0xa94>
 800796a:	4639      	mov	r1, r7
 800796c:	2300      	movs	r3, #0
 800796e:	220a      	movs	r2, #10
 8007970:	4630      	mov	r0, r6
 8007972:	f000 fc3d 	bl	80081f0 <__multadd>
 8007976:	f1ba 0f00 	cmp.w	sl, #0
 800797a:	4607      	mov	r7, r0
 800797c:	f300 808d 	bgt.w	8007a9a <_dtoa_r+0x8a2>
 8007980:	9b06      	ldr	r3, [sp, #24]
 8007982:	2b02      	cmp	r3, #2
 8007984:	dc50      	bgt.n	8007a28 <_dtoa_r+0x830>
 8007986:	e088      	b.n	8007a9a <_dtoa_r+0x8a2>
 8007988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800798a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800798e:	e751      	b.n	8007834 <_dtoa_r+0x63c>
 8007990:	f109 34ff 	add.w	r4, r9, #4294967295
 8007994:	42a3      	cmp	r3, r4
 8007996:	bfbf      	itttt	lt
 8007998:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800799a:	1ae3      	sublt	r3, r4, r3
 800799c:	18d2      	addlt	r2, r2, r3
 800799e:	9209      	strlt	r2, [sp, #36]	; 0x24
 80079a0:	bfb6      	itet	lt
 80079a2:	4623      	movlt	r3, r4
 80079a4:	1b1c      	subge	r4, r3, r4
 80079a6:	2400      	movlt	r4, #0
 80079a8:	f1b9 0f00 	cmp.w	r9, #0
 80079ac:	bfb5      	itete	lt
 80079ae:	9a04      	ldrlt	r2, [sp, #16]
 80079b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80079b4:	eba2 0809 	sublt.w	r8, r2, r9
 80079b8:	464a      	movge	r2, r9
 80079ba:	bfb8      	it	lt
 80079bc:	2200      	movlt	r2, #0
 80079be:	e73c      	b.n	800783a <_dtoa_r+0x642>
 80079c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80079c4:	9f07      	ldr	r7, [sp, #28]
 80079c6:	461c      	mov	r4, r3
 80079c8:	e744      	b.n	8007854 <_dtoa_r+0x65c>
 80079ca:	461a      	mov	r2, r3
 80079cc:	e770      	b.n	80078b0 <_dtoa_r+0x6b8>
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	dc18      	bgt.n	8007a06 <_dtoa_r+0x80e>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	b9b3      	cbnz	r3, 8007a06 <_dtoa_r+0x80e>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80079de:	b9a2      	cbnz	r2, 8007a0a <_dtoa_r+0x812>
 80079e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079e4:	0d12      	lsrs	r2, r2, #20
 80079e6:	0512      	lsls	r2, r2, #20
 80079e8:	b18a      	cbz	r2, 8007a0e <_dtoa_r+0x816>
 80079ea:	9b04      	ldr	r3, [sp, #16]
 80079ec:	3301      	adds	r3, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	9b05      	ldr	r3, [sp, #20]
 80079f2:	3301      	adds	r3, #1
 80079f4:	9305      	str	r3, [sp, #20]
 80079f6:	2301      	movs	r3, #1
 80079f8:	930a      	str	r3, [sp, #40]	; 0x28
 80079fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f af70 	bne.w	80078e2 <_dtoa_r+0x6ea>
 8007a02:	2001      	movs	r0, #1
 8007a04:	e775      	b.n	80078f2 <_dtoa_r+0x6fa>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e7f6      	b.n	80079f8 <_dtoa_r+0x800>
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	e7f4      	b.n	80079f8 <_dtoa_r+0x800>
 8007a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a10:	e7f3      	b.n	80079fa <_dtoa_r+0x802>
 8007a12:	d082      	beq.n	800791a <_dtoa_r+0x722>
 8007a14:	4610      	mov	r0, r2
 8007a16:	301c      	adds	r0, #28
 8007a18:	e778      	b.n	800790c <_dtoa_r+0x714>
 8007a1a:	f1b9 0f00 	cmp.w	r9, #0
 8007a1e:	dc37      	bgt.n	8007a90 <_dtoa_r+0x898>
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	dd34      	ble.n	8007a90 <_dtoa_r+0x898>
 8007a26:	46ca      	mov	sl, r9
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	d10d      	bne.n	8007a4a <_dtoa_r+0x852>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4653      	mov	r3, sl
 8007a32:	2205      	movs	r2, #5
 8007a34:	4630      	mov	r0, r6
 8007a36:	f000 fbdb 	bl	80081f0 <__multadd>
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 fdf6 	bl	8008630 <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f73f adeb 	bgt.w	8007620 <_dtoa_r+0x428>
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a50:	ea6f 0b03 	mvn.w	fp, r3
 8007a54:	f04f 0900 	mov.w	r9, #0
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f000 fba6 	bl	80081ac <_Bfree>
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	f43f aea8 	beq.w	80077b6 <_dtoa_r+0x5be>
 8007a66:	f1b9 0f00 	cmp.w	r9, #0
 8007a6a:	d005      	beq.n	8007a78 <_dtoa_r+0x880>
 8007a6c:	45b9      	cmp	r9, r7
 8007a6e:	d003      	beq.n	8007a78 <_dtoa_r+0x880>
 8007a70:	4649      	mov	r1, r9
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 fb9a 	bl	80081ac <_Bfree>
 8007a78:	4639      	mov	r1, r7
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 fb96 	bl	80081ac <_Bfree>
 8007a80:	e699      	b.n	80077b6 <_dtoa_r+0x5be>
 8007a82:	2400      	movs	r4, #0
 8007a84:	4627      	mov	r7, r4
 8007a86:	e7e0      	b.n	8007a4a <_dtoa_r+0x852>
 8007a88:	46bb      	mov	fp, r7
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	e5c7      	b.n	8007620 <_dtoa_r+0x428>
 8007a90:	9b07      	ldr	r3, [sp, #28]
 8007a92:	46ca      	mov	sl, r9
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8100 	beq.w	8007c9a <_dtoa_r+0xaa2>
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	dd05      	ble.n	8007aac <_dtoa_r+0x8b4>
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 fd53 	bl	8008550 <__lshift>
 8007aaa:	4607      	mov	r7, r0
 8007aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d05d      	beq.n	8007b6e <_dtoa_r+0x976>
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 fb39 	bl	800812c <_Balloc>
 8007aba:	4680      	mov	r8, r0
 8007abc:	b928      	cbnz	r0, 8007aca <_dtoa_r+0x8d2>
 8007abe:	4b82      	ldr	r3, [pc, #520]	; (8007cc8 <_dtoa_r+0xad0>)
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ac6:	f7ff bbaf 	b.w	8007228 <_dtoa_r+0x30>
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	3202      	adds	r2, #2
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	f107 010c 	add.w	r1, r7, #12
 8007ad4:	300c      	adds	r0, #12
 8007ad6:	f7fe fd5d 	bl	8006594 <memcpy>
 8007ada:	2201      	movs	r2, #1
 8007adc:	4641      	mov	r1, r8
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f000 fd36 	bl	8008550 <__lshift>
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	4453      	add	r3, sl
 8007aee:	9308      	str	r3, [sp, #32]
 8007af0:	9b02      	ldr	r3, [sp, #8]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	46b9      	mov	r9, r7
 8007af8:	9307      	str	r3, [sp, #28]
 8007afa:	4607      	mov	r7, r0
 8007afc:	9b04      	ldr	r3, [sp, #16]
 8007afe:	4621      	mov	r1, r4
 8007b00:	3b01      	subs	r3, #1
 8007b02:	4628      	mov	r0, r5
 8007b04:	9302      	str	r3, [sp, #8]
 8007b06:	f7ff faeb 	bl	80070e0 <quorem>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	3330      	adds	r3, #48	; 0x30
 8007b0e:	9005      	str	r0, [sp, #20]
 8007b10:	4649      	mov	r1, r9
 8007b12:	4628      	mov	r0, r5
 8007b14:	9309      	str	r3, [sp, #36]	; 0x24
 8007b16:	f000 fd8b 	bl	8008630 <__mcmp>
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4630      	mov	r0, r6
 8007b22:	f000 fda1 	bl	8008668 <__mdiff>
 8007b26:	68c2      	ldr	r2, [r0, #12]
 8007b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	bb0a      	cbnz	r2, 8007b72 <_dtoa_r+0x97a>
 8007b2e:	4601      	mov	r1, r0
 8007b30:	4628      	mov	r0, r5
 8007b32:	f000 fd7d 	bl	8008630 <__mcmp>
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007b42:	f000 fb33 	bl	80081ac <_Bfree>
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b4a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b4e:	ea43 0102 	orr.w	r1, r3, r2
 8007b52:	9b07      	ldr	r3, [sp, #28]
 8007b54:	430b      	orrs	r3, r1
 8007b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b58:	d10d      	bne.n	8007b76 <_dtoa_r+0x97e>
 8007b5a:	2b39      	cmp	r3, #57	; 0x39
 8007b5c:	d029      	beq.n	8007bb2 <_dtoa_r+0x9ba>
 8007b5e:	f1ba 0f00 	cmp.w	sl, #0
 8007b62:	dd01      	ble.n	8007b68 <_dtoa_r+0x970>
 8007b64:	9b05      	ldr	r3, [sp, #20]
 8007b66:	3331      	adds	r3, #49	; 0x31
 8007b68:	9a02      	ldr	r2, [sp, #8]
 8007b6a:	7013      	strb	r3, [r2, #0]
 8007b6c:	e774      	b.n	8007a58 <_dtoa_r+0x860>
 8007b6e:	4638      	mov	r0, r7
 8007b70:	e7b8      	b.n	8007ae4 <_dtoa_r+0x8ec>
 8007b72:	2201      	movs	r2, #1
 8007b74:	e7e1      	b.n	8007b3a <_dtoa_r+0x942>
 8007b76:	f1ba 0f00 	cmp.w	sl, #0
 8007b7a:	db06      	blt.n	8007b8a <_dtoa_r+0x992>
 8007b7c:	9906      	ldr	r1, [sp, #24]
 8007b7e:	ea41 0a0a 	orr.w	sl, r1, sl
 8007b82:	9907      	ldr	r1, [sp, #28]
 8007b84:	ea5a 0101 	orrs.w	r1, sl, r1
 8007b88:	d120      	bne.n	8007bcc <_dtoa_r+0x9d4>
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	ddec      	ble.n	8007b68 <_dtoa_r+0x970>
 8007b8e:	4629      	mov	r1, r5
 8007b90:	2201      	movs	r2, #1
 8007b92:	4630      	mov	r0, r6
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	f000 fcdb 	bl	8008550 <__lshift>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	f000 fd47 	bl	8008630 <__mcmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	dc02      	bgt.n	8007bae <_dtoa_r+0x9b6>
 8007ba8:	d1de      	bne.n	8007b68 <_dtoa_r+0x970>
 8007baa:	07da      	lsls	r2, r3, #31
 8007bac:	d5dc      	bpl.n	8007b68 <_dtoa_r+0x970>
 8007bae:	2b39      	cmp	r3, #57	; 0x39
 8007bb0:	d1d8      	bne.n	8007b64 <_dtoa_r+0x96c>
 8007bb2:	9a02      	ldr	r2, [sp, #8]
 8007bb4:	2339      	movs	r3, #57	; 0x39
 8007bb6:	7013      	strb	r3, [r2, #0]
 8007bb8:	4643      	mov	r3, r8
 8007bba:	4698      	mov	r8, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007bc2:	2a39      	cmp	r2, #57	; 0x39
 8007bc4:	d051      	beq.n	8007c6a <_dtoa_r+0xa72>
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e745      	b.n	8007a58 <_dtoa_r+0x860>
 8007bcc:	2a00      	cmp	r2, #0
 8007bce:	dd03      	ble.n	8007bd8 <_dtoa_r+0x9e0>
 8007bd0:	2b39      	cmp	r3, #57	; 0x39
 8007bd2:	d0ee      	beq.n	8007bb2 <_dtoa_r+0x9ba>
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	e7c7      	b.n	8007b68 <_dtoa_r+0x970>
 8007bd8:	9a04      	ldr	r2, [sp, #16]
 8007bda:	9908      	ldr	r1, [sp, #32]
 8007bdc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007be0:	428a      	cmp	r2, r1
 8007be2:	d02b      	beq.n	8007c3c <_dtoa_r+0xa44>
 8007be4:	4629      	mov	r1, r5
 8007be6:	2300      	movs	r3, #0
 8007be8:	220a      	movs	r2, #10
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 fb00 	bl	80081f0 <__multadd>
 8007bf0:	45b9      	cmp	r9, r7
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	f04f 020a 	mov.w	r2, #10
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4630      	mov	r0, r6
 8007c00:	d107      	bne.n	8007c12 <_dtoa_r+0xa1a>
 8007c02:	f000 faf5 	bl	80081f0 <__multadd>
 8007c06:	4681      	mov	r9, r0
 8007c08:	4607      	mov	r7, r0
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	9304      	str	r3, [sp, #16]
 8007c10:	e774      	b.n	8007afc <_dtoa_r+0x904>
 8007c12:	f000 faed 	bl	80081f0 <__multadd>
 8007c16:	4639      	mov	r1, r7
 8007c18:	4681      	mov	r9, r0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f000 fae6 	bl	80081f0 <__multadd>
 8007c24:	4607      	mov	r7, r0
 8007c26:	e7f0      	b.n	8007c0a <_dtoa_r+0xa12>
 8007c28:	f1ba 0f00 	cmp.w	sl, #0
 8007c2c:	9a01      	ldr	r2, [sp, #4]
 8007c2e:	bfcc      	ite	gt
 8007c30:	46d0      	movgt	r8, sl
 8007c32:	f04f 0801 	movle.w	r8, #1
 8007c36:	4490      	add	r8, r2
 8007c38:	f04f 0900 	mov.w	r9, #0
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	2201      	movs	r2, #1
 8007c40:	4630      	mov	r0, r6
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	f000 fc84 	bl	8008550 <__lshift>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	f000 fcf0 	bl	8008630 <__mcmp>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	dcb1      	bgt.n	8007bb8 <_dtoa_r+0x9c0>
 8007c54:	d102      	bne.n	8007c5c <_dtoa_r+0xa64>
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	07db      	lsls	r3, r3, #31
 8007c5a:	d4ad      	bmi.n	8007bb8 <_dtoa_r+0x9c0>
 8007c5c:	4643      	mov	r3, r8
 8007c5e:	4698      	mov	r8, r3
 8007c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c64:	2a30      	cmp	r2, #48	; 0x30
 8007c66:	d0fa      	beq.n	8007c5e <_dtoa_r+0xa66>
 8007c68:	e6f6      	b.n	8007a58 <_dtoa_r+0x860>
 8007c6a:	9a01      	ldr	r2, [sp, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d1a4      	bne.n	8007bba <_dtoa_r+0x9c2>
 8007c70:	f10b 0b01 	add.w	fp, fp, #1
 8007c74:	2331      	movs	r3, #49	; 0x31
 8007c76:	e778      	b.n	8007b6a <_dtoa_r+0x972>
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <_dtoa_r+0xad4>)
 8007c7a:	f7ff bb27 	b.w	80072cc <_dtoa_r+0xd4>
 8007c7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f47f ab03 	bne.w	800728c <_dtoa_r+0x94>
 8007c86:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <_dtoa_r+0xad8>)
 8007c88:	f7ff bb20 	b.w	80072cc <_dtoa_r+0xd4>
 8007c8c:	f1ba 0f00 	cmp.w	sl, #0
 8007c90:	dc03      	bgt.n	8007c9a <_dtoa_r+0xaa2>
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	f73f aec7 	bgt.w	8007a28 <_dtoa_r+0x830>
 8007c9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f7ff fa1d 	bl	80070e0 <quorem>
 8007ca6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007caa:	f808 3b01 	strb.w	r3, [r8], #1
 8007cae:	9a01      	ldr	r2, [sp, #4]
 8007cb0:	eba8 0202 	sub.w	r2, r8, r2
 8007cb4:	4592      	cmp	sl, r2
 8007cb6:	ddb7      	ble.n	8007c28 <_dtoa_r+0xa30>
 8007cb8:	4629      	mov	r1, r5
 8007cba:	2300      	movs	r3, #0
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 fa96 	bl	80081f0 <__multadd>
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	e7ea      	b.n	8007c9e <_dtoa_r+0xaa6>
 8007cc8:	08009103 	.word	0x08009103
 8007ccc:	08009060 	.word	0x08009060
 8007cd0:	08009084 	.word	0x08009084

08007cd4 <__sflush_r>:
 8007cd4:	898a      	ldrh	r2, [r1, #12]
 8007cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cda:	4605      	mov	r5, r0
 8007cdc:	0710      	lsls	r0, r2, #28
 8007cde:	460c      	mov	r4, r1
 8007ce0:	d458      	bmi.n	8007d94 <__sflush_r+0xc0>
 8007ce2:	684b      	ldr	r3, [r1, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dc05      	bgt.n	8007cf4 <__sflush_r+0x20>
 8007ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc02      	bgt.n	8007cf4 <__sflush_r+0x20>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d0f9      	beq.n	8007cee <__sflush_r+0x1a>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d00:	682f      	ldr	r7, [r5, #0]
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	d032      	beq.n	8007d6c <__sflush_r+0x98>
 8007d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	075a      	lsls	r2, r3, #29
 8007d0c:	d505      	bpl.n	8007d1a <__sflush_r+0x46>
 8007d0e:	6863      	ldr	r3, [r4, #4]
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d14:	b10b      	cbz	r3, 8007d1a <__sflush_r+0x46>
 8007d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d18:	1ac0      	subs	r0, r0, r3
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b0      	blx	r6
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	d106      	bne.n	8007d3a <__sflush_r+0x66>
 8007d2c:	6829      	ldr	r1, [r5, #0]
 8007d2e:	291d      	cmp	r1, #29
 8007d30:	d82c      	bhi.n	8007d8c <__sflush_r+0xb8>
 8007d32:	4a2a      	ldr	r2, [pc, #168]	; (8007ddc <__sflush_r+0x108>)
 8007d34:	40ca      	lsrs	r2, r1
 8007d36:	07d6      	lsls	r6, r2, #31
 8007d38:	d528      	bpl.n	8007d8c <__sflush_r+0xb8>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	6062      	str	r2, [r4, #4]
 8007d3e:	04d9      	lsls	r1, r3, #19
 8007d40:	6922      	ldr	r2, [r4, #16]
 8007d42:	6022      	str	r2, [r4, #0]
 8007d44:	d504      	bpl.n	8007d50 <__sflush_r+0x7c>
 8007d46:	1c42      	adds	r2, r0, #1
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0x7a>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	b903      	cbnz	r3, 8007d50 <__sflush_r+0x7c>
 8007d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d52:	602f      	str	r7, [r5, #0]
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d0ca      	beq.n	8007cee <__sflush_r+0x1a>
 8007d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	d002      	beq.n	8007d66 <__sflush_r+0x92>
 8007d60:	4628      	mov	r0, r5
 8007d62:	f000 fd7d 	bl	8008860 <_free_r>
 8007d66:	2000      	movs	r0, #0
 8007d68:	6360      	str	r0, [r4, #52]	; 0x34
 8007d6a:	e7c1      	b.n	8007cf0 <__sflush_r+0x1c>
 8007d6c:	6a21      	ldr	r1, [r4, #32]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b0      	blx	r6
 8007d74:	1c41      	adds	r1, r0, #1
 8007d76:	d1c7      	bne.n	8007d08 <__sflush_r+0x34>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0c4      	beq.n	8007d08 <__sflush_r+0x34>
 8007d7e:	2b1d      	cmp	r3, #29
 8007d80:	d001      	beq.n	8007d86 <__sflush_r+0xb2>
 8007d82:	2b16      	cmp	r3, #22
 8007d84:	d101      	bne.n	8007d8a <__sflush_r+0xb6>
 8007d86:	602f      	str	r7, [r5, #0]
 8007d88:	e7b1      	b.n	8007cee <__sflush_r+0x1a>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	e7ad      	b.n	8007cf0 <__sflush_r+0x1c>
 8007d94:	690f      	ldr	r7, [r1, #16]
 8007d96:	2f00      	cmp	r7, #0
 8007d98:	d0a9      	beq.n	8007cee <__sflush_r+0x1a>
 8007d9a:	0793      	lsls	r3, r2, #30
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	bf08      	it	eq
 8007da0:	694b      	ldreq	r3, [r1, #20]
 8007da2:	600f      	str	r7, [r1, #0]
 8007da4:	bf18      	it	ne
 8007da6:	2300      	movne	r3, #0
 8007da8:	eba6 0807 	sub.w	r8, r6, r7
 8007dac:	608b      	str	r3, [r1, #8]
 8007dae:	f1b8 0f00 	cmp.w	r8, #0
 8007db2:	dd9c      	ble.n	8007cee <__sflush_r+0x1a>
 8007db4:	6a21      	ldr	r1, [r4, #32]
 8007db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007db8:	4643      	mov	r3, r8
 8007dba:	463a      	mov	r2, r7
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b0      	blx	r6
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dc06      	bgt.n	8007dd2 <__sflush_r+0xfe>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e78e      	b.n	8007cf0 <__sflush_r+0x1c>
 8007dd2:	4407      	add	r7, r0
 8007dd4:	eba8 0800 	sub.w	r8, r8, r0
 8007dd8:	e7e9      	b.n	8007dae <__sflush_r+0xda>
 8007dda:	bf00      	nop
 8007ddc:	20400001 	.word	0x20400001

08007de0 <_fflush_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b913      	cbnz	r3, 8007df0 <_fflush_r+0x10>
 8007dea:	2500      	movs	r5, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	b118      	cbz	r0, 8007dfa <_fflush_r+0x1a>
 8007df2:	6983      	ldr	r3, [r0, #24]
 8007df4:	b90b      	cbnz	r3, 8007dfa <_fflush_r+0x1a>
 8007df6:	f000 f887 	bl	8007f08 <__sinit>
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <_fflush_r+0x6c>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d11b      	bne.n	8007e38 <_fflush_r+0x58>
 8007e00:	686c      	ldr	r4, [r5, #4]
 8007e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ef      	beq.n	8007dea <_fflush_r+0xa>
 8007e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e0c:	07d0      	lsls	r0, r2, #31
 8007e0e:	d404      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e10:	0599      	lsls	r1, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f000 f91a 	bl	800804e <__retarget_lock_acquire_recursive>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f7ff ff59 	bl	8007cd4 <__sflush_r>
 8007e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e24:	07da      	lsls	r2, r3, #31
 8007e26:	4605      	mov	r5, r0
 8007e28:	d4e0      	bmi.n	8007dec <_fflush_r+0xc>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4dd      	bmi.n	8007dec <_fflush_r+0xc>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f000 f90d 	bl	8008050 <__retarget_lock_release_recursive>
 8007e36:	e7d9      	b.n	8007dec <_fflush_r+0xc>
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <_fflush_r+0x70>)
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d101      	bne.n	8007e42 <_fflush_r+0x62>
 8007e3e:	68ac      	ldr	r4, [r5, #8]
 8007e40:	e7df      	b.n	8007e02 <_fflush_r+0x22>
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <_fflush_r+0x74>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	bf08      	it	eq
 8007e48:	68ec      	ldreq	r4, [r5, #12]
 8007e4a:	e7da      	b.n	8007e02 <_fflush_r+0x22>
 8007e4c:	08009134 	.word	0x08009134
 8007e50:	08009154 	.word	0x08009154
 8007e54:	08009114 	.word	0x08009114

08007e58 <std>:
 8007e58:	2300      	movs	r3, #0
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e66:	6083      	str	r3, [r0, #8]
 8007e68:	8181      	strh	r1, [r0, #12]
 8007e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e6c:	81c2      	strh	r2, [r0, #14]
 8007e6e:	6183      	str	r3, [r0, #24]
 8007e70:	4619      	mov	r1, r3
 8007e72:	2208      	movs	r2, #8
 8007e74:	305c      	adds	r0, #92	; 0x5c
 8007e76:	f7fe fb9b 	bl	80065b0 <memset>
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <std+0x38>)
 8007e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <std+0x3c>)
 8007e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <std+0x40>)
 8007e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <std+0x44>)
 8007e88:	6224      	str	r4, [r4, #32]
 8007e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	08008cf5 	.word	0x08008cf5
 8007e94:	08008d17 	.word	0x08008d17
 8007e98:	08008d4f 	.word	0x08008d4f
 8007e9c:	08008d73 	.word	0x08008d73

08007ea0 <_cleanup_r>:
 8007ea0:	4901      	ldr	r1, [pc, #4]	; (8007ea8 <_cleanup_r+0x8>)
 8007ea2:	f000 b8af 	b.w	8008004 <_fwalk_reent>
 8007ea6:	bf00      	nop
 8007ea8:	08007de1 	.word	0x08007de1

08007eac <__sfmoreglue>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	2268      	movs	r2, #104	; 0x68
 8007eb0:	1e4d      	subs	r5, r1, #1
 8007eb2:	4355      	muls	r5, r2
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eba:	f000 fd3d 	bl	8008938 <_malloc_r>
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	b140      	cbz	r0, 8007ed4 <__sfmoreglue+0x28>
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ec8:	300c      	adds	r0, #12
 8007eca:	60a0      	str	r0, [r4, #8]
 8007ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ed0:	f7fe fb6e 	bl	80065b0 <memset>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}

08007ed8 <__sfp_lock_acquire>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__sfp_lock_acquire+0x8>)
 8007eda:	f000 b8b8 	b.w	800804e <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	240002e1 	.word	0x240002e1

08007ee4 <__sfp_lock_release>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__sfp_lock_release+0x8>)
 8007ee6:	f000 b8b3 	b.w	8008050 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	240002e1 	.word	0x240002e1

08007ef0 <__sinit_lock_acquire>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	; (8007ef8 <__sinit_lock_acquire+0x8>)
 8007ef2:	f000 b8ac 	b.w	800804e <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	240002e2 	.word	0x240002e2

08007efc <__sinit_lock_release>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__sinit_lock_release+0x8>)
 8007efe:	f000 b8a7 	b.w	8008050 <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	240002e2 	.word	0x240002e2

08007f08 <__sinit>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7ff fff0 	bl	8007ef0 <__sinit_lock_acquire>
 8007f10:	69a3      	ldr	r3, [r4, #24]
 8007f12:	b11b      	cbz	r3, 8007f1c <__sinit+0x14>
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f7ff bff0 	b.w	8007efc <__sinit_lock_release>
 8007f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f20:	6523      	str	r3, [r4, #80]	; 0x50
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <__sinit+0x68>)
 8007f24:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <__sinit+0x6c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	bf04      	itt	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	61a3      	streq	r3, [r4, #24]
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f820 	bl	8007f78 <__sfp>
 8007f38:	6060      	str	r0, [r4, #4]
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f81c 	bl	8007f78 <__sfp>
 8007f40:	60a0      	str	r0, [r4, #8]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f818 	bl	8007f78 <__sfp>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	60e0      	str	r0, [r4, #12]
 8007f4c:	2104      	movs	r1, #4
 8007f4e:	6860      	ldr	r0, [r4, #4]
 8007f50:	f7ff ff82 	bl	8007e58 <std>
 8007f54:	68a0      	ldr	r0, [r4, #8]
 8007f56:	2201      	movs	r2, #1
 8007f58:	2109      	movs	r1, #9
 8007f5a:	f7ff ff7d 	bl	8007e58 <std>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	2202      	movs	r2, #2
 8007f62:	2112      	movs	r1, #18
 8007f64:	f7ff ff78 	bl	8007e58 <std>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	61a3      	str	r3, [r4, #24]
 8007f6c:	e7d2      	b.n	8007f14 <__sinit+0xc>
 8007f6e:	bf00      	nop
 8007f70:	0800904c 	.word	0x0800904c
 8007f74:	08007ea1 	.word	0x08007ea1

08007f78 <__sfp>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	f7ff ffac 	bl	8007ed8 <__sfp_lock_acquire>
 8007f80:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <__sfp+0x84>)
 8007f82:	681e      	ldr	r6, [r3, #0]
 8007f84:	69b3      	ldr	r3, [r6, #24]
 8007f86:	b913      	cbnz	r3, 8007f8e <__sfp+0x16>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7ff ffbd 	bl	8007f08 <__sinit>
 8007f8e:	3648      	adds	r6, #72	; 0x48
 8007f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	d503      	bpl.n	8007fa0 <__sfp+0x28>
 8007f98:	6833      	ldr	r3, [r6, #0]
 8007f9a:	b30b      	cbz	r3, 8007fe0 <__sfp+0x68>
 8007f9c:	6836      	ldr	r6, [r6, #0]
 8007f9e:	e7f7      	b.n	8007f90 <__sfp+0x18>
 8007fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fa4:	b9d5      	cbnz	r5, 8007fdc <__sfp+0x64>
 8007fa6:	4b16      	ldr	r3, [pc, #88]	; (8008000 <__sfp+0x88>)
 8007fa8:	60e3      	str	r3, [r4, #12]
 8007faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fae:	6665      	str	r5, [r4, #100]	; 0x64
 8007fb0:	f000 f84c 	bl	800804c <__retarget_lock_init_recursive>
 8007fb4:	f7ff ff96 	bl	8007ee4 <__sfp_lock_release>
 8007fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fc0:	6025      	str	r5, [r4, #0]
 8007fc2:	61a5      	str	r5, [r4, #24]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fcc:	f7fe faf0 	bl	80065b0 <memset>
 8007fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	3468      	adds	r4, #104	; 0x68
 8007fde:	e7d9      	b.n	8007f94 <__sfp+0x1c>
 8007fe0:	2104      	movs	r1, #4
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff ff62 	bl	8007eac <__sfmoreglue>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	6030      	str	r0, [r6, #0]
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1d5      	bne.n	8007f9c <__sfp+0x24>
 8007ff0:	f7ff ff78 	bl	8007ee4 <__sfp_lock_release>
 8007ff4:	230c      	movs	r3, #12
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	e7ee      	b.n	8007fd8 <__sfp+0x60>
 8007ffa:	bf00      	nop
 8007ffc:	0800904c 	.word	0x0800904c
 8008000:	ffff0001 	.word	0xffff0001

08008004 <_fwalk_reent>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	4606      	mov	r6, r0
 800800a:	4688      	mov	r8, r1
 800800c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008010:	2700      	movs	r7, #0
 8008012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008016:	f1b9 0901 	subs.w	r9, r9, #1
 800801a:	d505      	bpl.n	8008028 <_fwalk_reent+0x24>
 800801c:	6824      	ldr	r4, [r4, #0]
 800801e:	2c00      	cmp	r4, #0
 8008020:	d1f7      	bne.n	8008012 <_fwalk_reent+0xe>
 8008022:	4638      	mov	r0, r7
 8008024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008028:	89ab      	ldrh	r3, [r5, #12]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d907      	bls.n	800803e <_fwalk_reent+0x3a>
 800802e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008032:	3301      	adds	r3, #1
 8008034:	d003      	beq.n	800803e <_fwalk_reent+0x3a>
 8008036:	4629      	mov	r1, r5
 8008038:	4630      	mov	r0, r6
 800803a:	47c0      	blx	r8
 800803c:	4307      	orrs	r7, r0
 800803e:	3568      	adds	r5, #104	; 0x68
 8008040:	e7e9      	b.n	8008016 <_fwalk_reent+0x12>
	...

08008044 <_localeconv_r>:
 8008044:	4800      	ldr	r0, [pc, #0]	; (8008048 <_localeconv_r+0x4>)
 8008046:	4770      	bx	lr
 8008048:	24000164 	.word	0x24000164

0800804c <__retarget_lock_init_recursive>:
 800804c:	4770      	bx	lr

0800804e <__retarget_lock_acquire_recursive>:
 800804e:	4770      	bx	lr

08008050 <__retarget_lock_release_recursive>:
 8008050:	4770      	bx	lr

08008052 <__swhatbuf_r>:
 8008052:	b570      	push	{r4, r5, r6, lr}
 8008054:	460e      	mov	r6, r1
 8008056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805a:	2900      	cmp	r1, #0
 800805c:	b096      	sub	sp, #88	; 0x58
 800805e:	4614      	mov	r4, r2
 8008060:	461d      	mov	r5, r3
 8008062:	da08      	bge.n	8008076 <__swhatbuf_r+0x24>
 8008064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	602a      	str	r2, [r5, #0]
 800806c:	061a      	lsls	r2, r3, #24
 800806e:	d410      	bmi.n	8008092 <__swhatbuf_r+0x40>
 8008070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008074:	e00e      	b.n	8008094 <__swhatbuf_r+0x42>
 8008076:	466a      	mov	r2, sp
 8008078:	f000 fed2 	bl	8008e20 <_fstat_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	dbf1      	blt.n	8008064 <__swhatbuf_r+0x12>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800808a:	425a      	negs	r2, r3
 800808c:	415a      	adcs	r2, r3
 800808e:	602a      	str	r2, [r5, #0]
 8008090:	e7ee      	b.n	8008070 <__swhatbuf_r+0x1e>
 8008092:	2340      	movs	r3, #64	; 0x40
 8008094:	2000      	movs	r0, #0
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	b016      	add	sp, #88	; 0x58
 800809a:	bd70      	pop	{r4, r5, r6, pc}

0800809c <__smakebuf_r>:
 800809c:	898b      	ldrh	r3, [r1, #12]
 800809e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080a0:	079d      	lsls	r5, r3, #30
 80080a2:	4606      	mov	r6, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	d507      	bpl.n	80080b8 <__smakebuf_r+0x1c>
 80080a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	2301      	movs	r3, #1
 80080b2:	6163      	str	r3, [r4, #20]
 80080b4:	b002      	add	sp, #8
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	ab01      	add	r3, sp, #4
 80080ba:	466a      	mov	r2, sp
 80080bc:	f7ff ffc9 	bl	8008052 <__swhatbuf_r>
 80080c0:	9900      	ldr	r1, [sp, #0]
 80080c2:	4605      	mov	r5, r0
 80080c4:	4630      	mov	r0, r6
 80080c6:	f000 fc37 	bl	8008938 <_malloc_r>
 80080ca:	b948      	cbnz	r0, 80080e0 <__smakebuf_r+0x44>
 80080cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d4ef      	bmi.n	80080b4 <__smakebuf_r+0x18>
 80080d4:	f023 0303 	bic.w	r3, r3, #3
 80080d8:	f043 0302 	orr.w	r3, r3, #2
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	e7e3      	b.n	80080a8 <__smakebuf_r+0xc>
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <__smakebuf_r+0x7c>)
 80080e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	6020      	str	r0, [r4, #0]
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	9b00      	ldr	r3, [sp, #0]
 80080f0:	6163      	str	r3, [r4, #20]
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	6120      	str	r0, [r4, #16]
 80080f6:	b15b      	cbz	r3, 8008110 <__smakebuf_r+0x74>
 80080f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 fea1 	bl	8008e44 <_isatty_r>
 8008102:	b128      	cbz	r0, 8008110 <__smakebuf_r+0x74>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	89a0      	ldrh	r0, [r4, #12]
 8008112:	4305      	orrs	r5, r0
 8008114:	81a5      	strh	r5, [r4, #12]
 8008116:	e7cd      	b.n	80080b4 <__smakebuf_r+0x18>
 8008118:	08007ea1 	.word	0x08007ea1

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 bc09 	b.w	8008938 <_malloc_r>
 8008126:	bf00      	nop
 8008128:	24000010 	.word	0x24000010

0800812c <_Balloc>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	b976      	cbnz	r6, 8008154 <_Balloc+0x28>
 8008136:	2010      	movs	r0, #16
 8008138:	f7ff fff0 	bl	800811c <malloc>
 800813c:	4602      	mov	r2, r0
 800813e:	6260      	str	r0, [r4, #36]	; 0x24
 8008140:	b920      	cbnz	r0, 800814c <_Balloc+0x20>
 8008142:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <_Balloc+0x78>)
 8008144:	4818      	ldr	r0, [pc, #96]	; (80081a8 <_Balloc+0x7c>)
 8008146:	2166      	movs	r1, #102	; 0x66
 8008148:	f000 fe2a 	bl	8008da0 <__assert_func>
 800814c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008150:	6006      	str	r6, [r0, #0]
 8008152:	60c6      	str	r6, [r0, #12]
 8008154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008156:	68f3      	ldr	r3, [r6, #12]
 8008158:	b183      	cbz	r3, 800817c <_Balloc+0x50>
 800815a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008162:	b9b8      	cbnz	r0, 8008194 <_Balloc+0x68>
 8008164:	2101      	movs	r1, #1
 8008166:	fa01 f605 	lsl.w	r6, r1, r5
 800816a:	1d72      	adds	r2, r6, #5
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fb60 	bl	8008834 <_calloc_r>
 8008174:	b160      	cbz	r0, 8008190 <_Balloc+0x64>
 8008176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800817a:	e00e      	b.n	800819a <_Balloc+0x6e>
 800817c:	2221      	movs	r2, #33	; 0x21
 800817e:	2104      	movs	r1, #4
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fb57 	bl	8008834 <_calloc_r>
 8008186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008188:	60f0      	str	r0, [r6, #12]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e4      	bne.n	800815a <_Balloc+0x2e>
 8008190:	2000      	movs	r0, #0
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	6802      	ldr	r2, [r0, #0]
 8008196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800819a:	2300      	movs	r3, #0
 800819c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081a0:	e7f7      	b.n	8008192 <_Balloc+0x66>
 80081a2:	bf00      	nop
 80081a4:	08009091 	.word	0x08009091
 80081a8:	08009174 	.word	0x08009174

080081ac <_Bfree>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b976      	cbnz	r6, 80081d4 <_Bfree+0x28>
 80081b6:	2010      	movs	r0, #16
 80081b8:	f7ff ffb0 	bl	800811c <malloc>
 80081bc:	4602      	mov	r2, r0
 80081be:	6268      	str	r0, [r5, #36]	; 0x24
 80081c0:	b920      	cbnz	r0, 80081cc <_Bfree+0x20>
 80081c2:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <_Bfree+0x3c>)
 80081c4:	4809      	ldr	r0, [pc, #36]	; (80081ec <_Bfree+0x40>)
 80081c6:	218a      	movs	r1, #138	; 0x8a
 80081c8:	f000 fdea 	bl	8008da0 <__assert_func>
 80081cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d0:	6006      	str	r6, [r0, #0]
 80081d2:	60c6      	str	r6, [r0, #12]
 80081d4:	b13c      	cbz	r4, 80081e6 <_Bfree+0x3a>
 80081d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081d8:	6862      	ldr	r2, [r4, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e0:	6021      	str	r1, [r4, #0]
 80081e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	08009091 	.word	0x08009091
 80081ec:	08009174 	.word	0x08009174

080081f0 <__multadd>:
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	690d      	ldr	r5, [r1, #16]
 80081f6:	4607      	mov	r7, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	461e      	mov	r6, r3
 80081fc:	f101 0c14 	add.w	ip, r1, #20
 8008200:	2000      	movs	r0, #0
 8008202:	f8dc 3000 	ldr.w	r3, [ip]
 8008206:	b299      	uxth	r1, r3
 8008208:	fb02 6101 	mla	r1, r2, r1, r6
 800820c:	0c1e      	lsrs	r6, r3, #16
 800820e:	0c0b      	lsrs	r3, r1, #16
 8008210:	fb02 3306 	mla	r3, r2, r6, r3
 8008214:	b289      	uxth	r1, r1
 8008216:	3001      	adds	r0, #1
 8008218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800821c:	4285      	cmp	r5, r0
 800821e:	f84c 1b04 	str.w	r1, [ip], #4
 8008222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008226:	dcec      	bgt.n	8008202 <__multadd+0x12>
 8008228:	b30e      	cbz	r6, 800826e <__multadd+0x7e>
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc19      	bgt.n	8008264 <__multadd+0x74>
 8008230:	6861      	ldr	r1, [r4, #4]
 8008232:	4638      	mov	r0, r7
 8008234:	3101      	adds	r1, #1
 8008236:	f7ff ff79 	bl	800812c <_Balloc>
 800823a:	4680      	mov	r8, r0
 800823c:	b928      	cbnz	r0, 800824a <__multadd+0x5a>
 800823e:	4602      	mov	r2, r0
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <__multadd+0x84>)
 8008242:	480d      	ldr	r0, [pc, #52]	; (8008278 <__multadd+0x88>)
 8008244:	21b5      	movs	r1, #181	; 0xb5
 8008246:	f000 fdab 	bl	8008da0 <__assert_func>
 800824a:	6922      	ldr	r2, [r4, #16]
 800824c:	3202      	adds	r2, #2
 800824e:	f104 010c 	add.w	r1, r4, #12
 8008252:	0092      	lsls	r2, r2, #2
 8008254:	300c      	adds	r0, #12
 8008256:	f7fe f99d 	bl	8006594 <memcpy>
 800825a:	4621      	mov	r1, r4
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff ffa5 	bl	80081ac <_Bfree>
 8008262:	4644      	mov	r4, r8
 8008264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008268:	3501      	adds	r5, #1
 800826a:	615e      	str	r6, [r3, #20]
 800826c:	6125      	str	r5, [r4, #16]
 800826e:	4620      	mov	r0, r4
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008274:	08009103 	.word	0x08009103
 8008278:	08009174 	.word	0x08009174

0800827c <__hi0bits>:
 800827c:	0c03      	lsrs	r3, r0, #16
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	b9d3      	cbnz	r3, 80082b8 <__hi0bits+0x3c>
 8008282:	0400      	lsls	r0, r0, #16
 8008284:	2310      	movs	r3, #16
 8008286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800828a:	bf04      	itt	eq
 800828c:	0200      	lsleq	r0, r0, #8
 800828e:	3308      	addeq	r3, #8
 8008290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008294:	bf04      	itt	eq
 8008296:	0100      	lsleq	r0, r0, #4
 8008298:	3304      	addeq	r3, #4
 800829a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800829e:	bf04      	itt	eq
 80082a0:	0080      	lsleq	r0, r0, #2
 80082a2:	3302      	addeq	r3, #2
 80082a4:	2800      	cmp	r0, #0
 80082a6:	db05      	blt.n	80082b4 <__hi0bits+0x38>
 80082a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082ac:	f103 0301 	add.w	r3, r3, #1
 80082b0:	bf08      	it	eq
 80082b2:	2320      	moveq	r3, #32
 80082b4:	4618      	mov	r0, r3
 80082b6:	4770      	bx	lr
 80082b8:	2300      	movs	r3, #0
 80082ba:	e7e4      	b.n	8008286 <__hi0bits+0xa>

080082bc <__lo0bits>:
 80082bc:	6803      	ldr	r3, [r0, #0]
 80082be:	f013 0207 	ands.w	r2, r3, #7
 80082c2:	4601      	mov	r1, r0
 80082c4:	d00b      	beq.n	80082de <__lo0bits+0x22>
 80082c6:	07da      	lsls	r2, r3, #31
 80082c8:	d423      	bmi.n	8008312 <__lo0bits+0x56>
 80082ca:	0798      	lsls	r0, r3, #30
 80082cc:	bf49      	itett	mi
 80082ce:	085b      	lsrmi	r3, r3, #1
 80082d0:	089b      	lsrpl	r3, r3, #2
 80082d2:	2001      	movmi	r0, #1
 80082d4:	600b      	strmi	r3, [r1, #0]
 80082d6:	bf5c      	itt	pl
 80082d8:	600b      	strpl	r3, [r1, #0]
 80082da:	2002      	movpl	r0, #2
 80082dc:	4770      	bx	lr
 80082de:	b298      	uxth	r0, r3
 80082e0:	b9a8      	cbnz	r0, 800830e <__lo0bits+0x52>
 80082e2:	0c1b      	lsrs	r3, r3, #16
 80082e4:	2010      	movs	r0, #16
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	b90a      	cbnz	r2, 80082ee <__lo0bits+0x32>
 80082ea:	3008      	adds	r0, #8
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	071a      	lsls	r2, r3, #28
 80082f0:	bf04      	itt	eq
 80082f2:	091b      	lsreq	r3, r3, #4
 80082f4:	3004      	addeq	r0, #4
 80082f6:	079a      	lsls	r2, r3, #30
 80082f8:	bf04      	itt	eq
 80082fa:	089b      	lsreq	r3, r3, #2
 80082fc:	3002      	addeq	r0, #2
 80082fe:	07da      	lsls	r2, r3, #31
 8008300:	d403      	bmi.n	800830a <__lo0bits+0x4e>
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	f100 0001 	add.w	r0, r0, #1
 8008308:	d005      	beq.n	8008316 <__lo0bits+0x5a>
 800830a:	600b      	str	r3, [r1, #0]
 800830c:	4770      	bx	lr
 800830e:	4610      	mov	r0, r2
 8008310:	e7e9      	b.n	80082e6 <__lo0bits+0x2a>
 8008312:	2000      	movs	r0, #0
 8008314:	4770      	bx	lr
 8008316:	2020      	movs	r0, #32
 8008318:	4770      	bx	lr
	...

0800831c <__i2b>:
 800831c:	b510      	push	{r4, lr}
 800831e:	460c      	mov	r4, r1
 8008320:	2101      	movs	r1, #1
 8008322:	f7ff ff03 	bl	800812c <_Balloc>
 8008326:	4602      	mov	r2, r0
 8008328:	b928      	cbnz	r0, 8008336 <__i2b+0x1a>
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <__i2b+0x24>)
 800832c:	4805      	ldr	r0, [pc, #20]	; (8008344 <__i2b+0x28>)
 800832e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008332:	f000 fd35 	bl	8008da0 <__assert_func>
 8008336:	2301      	movs	r3, #1
 8008338:	6144      	str	r4, [r0, #20]
 800833a:	6103      	str	r3, [r0, #16]
 800833c:	bd10      	pop	{r4, pc}
 800833e:	bf00      	nop
 8008340:	08009103 	.word	0x08009103
 8008344:	08009174 	.word	0x08009174

08008348 <__multiply>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	4691      	mov	r9, r2
 800834e:	690a      	ldr	r2, [r1, #16]
 8008350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008354:	429a      	cmp	r2, r3
 8008356:	bfb8      	it	lt
 8008358:	460b      	movlt	r3, r1
 800835a:	460c      	mov	r4, r1
 800835c:	bfbc      	itt	lt
 800835e:	464c      	movlt	r4, r9
 8008360:	4699      	movlt	r9, r3
 8008362:	6927      	ldr	r7, [r4, #16]
 8008364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	6861      	ldr	r1, [r4, #4]
 800836c:	eb07 060a 	add.w	r6, r7, sl
 8008370:	42b3      	cmp	r3, r6
 8008372:	b085      	sub	sp, #20
 8008374:	bfb8      	it	lt
 8008376:	3101      	addlt	r1, #1
 8008378:	f7ff fed8 	bl	800812c <_Balloc>
 800837c:	b930      	cbnz	r0, 800838c <__multiply+0x44>
 800837e:	4602      	mov	r2, r0
 8008380:	4b44      	ldr	r3, [pc, #272]	; (8008494 <__multiply+0x14c>)
 8008382:	4845      	ldr	r0, [pc, #276]	; (8008498 <__multiply+0x150>)
 8008384:	f240 115d 	movw	r1, #349	; 0x15d
 8008388:	f000 fd0a 	bl	8008da0 <__assert_func>
 800838c:	f100 0514 	add.w	r5, r0, #20
 8008390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008394:	462b      	mov	r3, r5
 8008396:	2200      	movs	r2, #0
 8008398:	4543      	cmp	r3, r8
 800839a:	d321      	bcc.n	80083e0 <__multiply+0x98>
 800839c:	f104 0314 	add.w	r3, r4, #20
 80083a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083a4:	f109 0314 	add.w	r3, r9, #20
 80083a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083ac:	9202      	str	r2, [sp, #8]
 80083ae:	1b3a      	subs	r2, r7, r4
 80083b0:	3a15      	subs	r2, #21
 80083b2:	f022 0203 	bic.w	r2, r2, #3
 80083b6:	3204      	adds	r2, #4
 80083b8:	f104 0115 	add.w	r1, r4, #21
 80083bc:	428f      	cmp	r7, r1
 80083be:	bf38      	it	cc
 80083c0:	2204      	movcc	r2, #4
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	9a02      	ldr	r2, [sp, #8]
 80083c6:	9303      	str	r3, [sp, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d80c      	bhi.n	80083e6 <__multiply+0x9e>
 80083cc:	2e00      	cmp	r6, #0
 80083ce:	dd03      	ble.n	80083d8 <__multiply+0x90>
 80083d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d05a      	beq.n	800848e <__multiply+0x146>
 80083d8:	6106      	str	r6, [r0, #16]
 80083da:	b005      	add	sp, #20
 80083dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e0:	f843 2b04 	str.w	r2, [r3], #4
 80083e4:	e7d8      	b.n	8008398 <__multiply+0x50>
 80083e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80083ea:	f1ba 0f00 	cmp.w	sl, #0
 80083ee:	d024      	beq.n	800843a <__multiply+0xf2>
 80083f0:	f104 0e14 	add.w	lr, r4, #20
 80083f4:	46a9      	mov	r9, r5
 80083f6:	f04f 0c00 	mov.w	ip, #0
 80083fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083fe:	f8d9 1000 	ldr.w	r1, [r9]
 8008402:	fa1f fb82 	uxth.w	fp, r2
 8008406:	b289      	uxth	r1, r1
 8008408:	fb0a 110b 	mla	r1, sl, fp, r1
 800840c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008410:	f8d9 2000 	ldr.w	r2, [r9]
 8008414:	4461      	add	r1, ip
 8008416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800841a:	fb0a c20b 	mla	r2, sl, fp, ip
 800841e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008422:	b289      	uxth	r1, r1
 8008424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008428:	4577      	cmp	r7, lr
 800842a:	f849 1b04 	str.w	r1, [r9], #4
 800842e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008432:	d8e2      	bhi.n	80083fa <__multiply+0xb2>
 8008434:	9a01      	ldr	r2, [sp, #4]
 8008436:	f845 c002 	str.w	ip, [r5, r2]
 800843a:	9a03      	ldr	r2, [sp, #12]
 800843c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008440:	3304      	adds	r3, #4
 8008442:	f1b9 0f00 	cmp.w	r9, #0
 8008446:	d020      	beq.n	800848a <__multiply+0x142>
 8008448:	6829      	ldr	r1, [r5, #0]
 800844a:	f104 0c14 	add.w	ip, r4, #20
 800844e:	46ae      	mov	lr, r5
 8008450:	f04f 0a00 	mov.w	sl, #0
 8008454:	f8bc b000 	ldrh.w	fp, [ip]
 8008458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800845c:	fb09 220b 	mla	r2, r9, fp, r2
 8008460:	4492      	add	sl, r2
 8008462:	b289      	uxth	r1, r1
 8008464:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008468:	f84e 1b04 	str.w	r1, [lr], #4
 800846c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008470:	f8be 1000 	ldrh.w	r1, [lr]
 8008474:	0c12      	lsrs	r2, r2, #16
 8008476:	fb09 1102 	mla	r1, r9, r2, r1
 800847a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800847e:	4567      	cmp	r7, ip
 8008480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008484:	d8e6      	bhi.n	8008454 <__multiply+0x10c>
 8008486:	9a01      	ldr	r2, [sp, #4]
 8008488:	50a9      	str	r1, [r5, r2]
 800848a:	3504      	adds	r5, #4
 800848c:	e79a      	b.n	80083c4 <__multiply+0x7c>
 800848e:	3e01      	subs	r6, #1
 8008490:	e79c      	b.n	80083cc <__multiply+0x84>
 8008492:	bf00      	nop
 8008494:	08009103 	.word	0x08009103
 8008498:	08009174 	.word	0x08009174

0800849c <__pow5mult>:
 800849c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a0:	4615      	mov	r5, r2
 80084a2:	f012 0203 	ands.w	r2, r2, #3
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	d007      	beq.n	80084bc <__pow5mult+0x20>
 80084ac:	4c25      	ldr	r4, [pc, #148]	; (8008544 <__pow5mult+0xa8>)
 80084ae:	3a01      	subs	r2, #1
 80084b0:	2300      	movs	r3, #0
 80084b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084b6:	f7ff fe9b 	bl	80081f0 <__multadd>
 80084ba:	4607      	mov	r7, r0
 80084bc:	10ad      	asrs	r5, r5, #2
 80084be:	d03d      	beq.n	800853c <__pow5mult+0xa0>
 80084c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084c2:	b97c      	cbnz	r4, 80084e4 <__pow5mult+0x48>
 80084c4:	2010      	movs	r0, #16
 80084c6:	f7ff fe29 	bl	800811c <malloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6270      	str	r0, [r6, #36]	; 0x24
 80084ce:	b928      	cbnz	r0, 80084dc <__pow5mult+0x40>
 80084d0:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <__pow5mult+0xac>)
 80084d2:	481e      	ldr	r0, [pc, #120]	; (800854c <__pow5mult+0xb0>)
 80084d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084d8:	f000 fc62 	bl	8008da0 <__assert_func>
 80084dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084e0:	6004      	str	r4, [r0, #0]
 80084e2:	60c4      	str	r4, [r0, #12]
 80084e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084ec:	b94c      	cbnz	r4, 8008502 <__pow5mult+0x66>
 80084ee:	f240 2171 	movw	r1, #625	; 0x271
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7ff ff12 	bl	800831c <__i2b>
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80084fe:	4604      	mov	r4, r0
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	f04f 0900 	mov.w	r9, #0
 8008506:	07eb      	lsls	r3, r5, #31
 8008508:	d50a      	bpl.n	8008520 <__pow5mult+0x84>
 800850a:	4639      	mov	r1, r7
 800850c:	4622      	mov	r2, r4
 800850e:	4630      	mov	r0, r6
 8008510:	f7ff ff1a 	bl	8008348 <__multiply>
 8008514:	4639      	mov	r1, r7
 8008516:	4680      	mov	r8, r0
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff fe47 	bl	80081ac <_Bfree>
 800851e:	4647      	mov	r7, r8
 8008520:	106d      	asrs	r5, r5, #1
 8008522:	d00b      	beq.n	800853c <__pow5mult+0xa0>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	b938      	cbnz	r0, 8008538 <__pow5mult+0x9c>
 8008528:	4622      	mov	r2, r4
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ff0b 	bl	8008348 <__multiply>
 8008532:	6020      	str	r0, [r4, #0]
 8008534:	f8c0 9000 	str.w	r9, [r0]
 8008538:	4604      	mov	r4, r0
 800853a:	e7e4      	b.n	8008506 <__pow5mult+0x6a>
 800853c:	4638      	mov	r0, r7
 800853e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008542:	bf00      	nop
 8008544:	080092c0 	.word	0x080092c0
 8008548:	08009091 	.word	0x08009091
 800854c:	08009174 	.word	0x08009174

08008550 <__lshift>:
 8008550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	460c      	mov	r4, r1
 8008556:	6849      	ldr	r1, [r1, #4]
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	4607      	mov	r7, r0
 8008562:	4691      	mov	r9, r2
 8008564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008568:	f108 0601 	add.w	r6, r8, #1
 800856c:	42b3      	cmp	r3, r6
 800856e:	db0b      	blt.n	8008588 <__lshift+0x38>
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff fddb 	bl	800812c <_Balloc>
 8008576:	4605      	mov	r5, r0
 8008578:	b948      	cbnz	r0, 800858e <__lshift+0x3e>
 800857a:	4602      	mov	r2, r0
 800857c:	4b2a      	ldr	r3, [pc, #168]	; (8008628 <__lshift+0xd8>)
 800857e:	482b      	ldr	r0, [pc, #172]	; (800862c <__lshift+0xdc>)
 8008580:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008584:	f000 fc0c 	bl	8008da0 <__assert_func>
 8008588:	3101      	adds	r1, #1
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	e7ee      	b.n	800856c <__lshift+0x1c>
 800858e:	2300      	movs	r3, #0
 8008590:	f100 0114 	add.w	r1, r0, #20
 8008594:	f100 0210 	add.w	r2, r0, #16
 8008598:	4618      	mov	r0, r3
 800859a:	4553      	cmp	r3, sl
 800859c:	db37      	blt.n	800860e <__lshift+0xbe>
 800859e:	6920      	ldr	r0, [r4, #16]
 80085a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085a4:	f104 0314 	add.w	r3, r4, #20
 80085a8:	f019 091f 	ands.w	r9, r9, #31
 80085ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085b4:	d02f      	beq.n	8008616 <__lshift+0xc6>
 80085b6:	f1c9 0e20 	rsb	lr, r9, #32
 80085ba:	468a      	mov	sl, r1
 80085bc:	f04f 0c00 	mov.w	ip, #0
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	fa02 f209 	lsl.w	r2, r2, r9
 80085c6:	ea42 020c 	orr.w	r2, r2, ip
 80085ca:	f84a 2b04 	str.w	r2, [sl], #4
 80085ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d2:	4298      	cmp	r0, r3
 80085d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085d8:	d8f2      	bhi.n	80085c0 <__lshift+0x70>
 80085da:	1b03      	subs	r3, r0, r4
 80085dc:	3b15      	subs	r3, #21
 80085de:	f023 0303 	bic.w	r3, r3, #3
 80085e2:	3304      	adds	r3, #4
 80085e4:	f104 0215 	add.w	r2, r4, #21
 80085e8:	4290      	cmp	r0, r2
 80085ea:	bf38      	it	cc
 80085ec:	2304      	movcc	r3, #4
 80085ee:	f841 c003 	str.w	ip, [r1, r3]
 80085f2:	f1bc 0f00 	cmp.w	ip, #0
 80085f6:	d001      	beq.n	80085fc <__lshift+0xac>
 80085f8:	f108 0602 	add.w	r6, r8, #2
 80085fc:	3e01      	subs	r6, #1
 80085fe:	4638      	mov	r0, r7
 8008600:	612e      	str	r6, [r5, #16]
 8008602:	4621      	mov	r1, r4
 8008604:	f7ff fdd2 	bl	80081ac <_Bfree>
 8008608:	4628      	mov	r0, r5
 800860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008612:	3301      	adds	r3, #1
 8008614:	e7c1      	b.n	800859a <__lshift+0x4a>
 8008616:	3904      	subs	r1, #4
 8008618:	f853 2b04 	ldr.w	r2, [r3], #4
 800861c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008620:	4298      	cmp	r0, r3
 8008622:	d8f9      	bhi.n	8008618 <__lshift+0xc8>
 8008624:	e7ea      	b.n	80085fc <__lshift+0xac>
 8008626:	bf00      	nop
 8008628:	08009103 	.word	0x08009103
 800862c:	08009174 	.word	0x08009174

08008630 <__mcmp>:
 8008630:	b530      	push	{r4, r5, lr}
 8008632:	6902      	ldr	r2, [r0, #16]
 8008634:	690c      	ldr	r4, [r1, #16]
 8008636:	1b12      	subs	r2, r2, r4
 8008638:	d10e      	bne.n	8008658 <__mcmp+0x28>
 800863a:	f100 0314 	add.w	r3, r0, #20
 800863e:	3114      	adds	r1, #20
 8008640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800864c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008650:	42a5      	cmp	r5, r4
 8008652:	d003      	beq.n	800865c <__mcmp+0x2c>
 8008654:	d305      	bcc.n	8008662 <__mcmp+0x32>
 8008656:	2201      	movs	r2, #1
 8008658:	4610      	mov	r0, r2
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	4283      	cmp	r3, r0
 800865e:	d3f3      	bcc.n	8008648 <__mcmp+0x18>
 8008660:	e7fa      	b.n	8008658 <__mcmp+0x28>
 8008662:	f04f 32ff 	mov.w	r2, #4294967295
 8008666:	e7f7      	b.n	8008658 <__mcmp+0x28>

08008668 <__mdiff>:
 8008668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	4606      	mov	r6, r0
 8008670:	4611      	mov	r1, r2
 8008672:	4620      	mov	r0, r4
 8008674:	4690      	mov	r8, r2
 8008676:	f7ff ffdb 	bl	8008630 <__mcmp>
 800867a:	1e05      	subs	r5, r0, #0
 800867c:	d110      	bne.n	80086a0 <__mdiff+0x38>
 800867e:	4629      	mov	r1, r5
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff fd53 	bl	800812c <_Balloc>
 8008686:	b930      	cbnz	r0, 8008696 <__mdiff+0x2e>
 8008688:	4b3a      	ldr	r3, [pc, #232]	; (8008774 <__mdiff+0x10c>)
 800868a:	4602      	mov	r2, r0
 800868c:	f240 2132 	movw	r1, #562	; 0x232
 8008690:	4839      	ldr	r0, [pc, #228]	; (8008778 <__mdiff+0x110>)
 8008692:	f000 fb85 	bl	8008da0 <__assert_func>
 8008696:	2301      	movs	r3, #1
 8008698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800869c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	bfa4      	itt	ge
 80086a2:	4643      	movge	r3, r8
 80086a4:	46a0      	movge	r8, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086ac:	bfa6      	itte	ge
 80086ae:	461c      	movge	r4, r3
 80086b0:	2500      	movge	r5, #0
 80086b2:	2501      	movlt	r5, #1
 80086b4:	f7ff fd3a 	bl	800812c <_Balloc>
 80086b8:	b920      	cbnz	r0, 80086c4 <__mdiff+0x5c>
 80086ba:	4b2e      	ldr	r3, [pc, #184]	; (8008774 <__mdiff+0x10c>)
 80086bc:	4602      	mov	r2, r0
 80086be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086c2:	e7e5      	b.n	8008690 <__mdiff+0x28>
 80086c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086c8:	6926      	ldr	r6, [r4, #16]
 80086ca:	60c5      	str	r5, [r0, #12]
 80086cc:	f104 0914 	add.w	r9, r4, #20
 80086d0:	f108 0514 	add.w	r5, r8, #20
 80086d4:	f100 0e14 	add.w	lr, r0, #20
 80086d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086e0:	f108 0210 	add.w	r2, r8, #16
 80086e4:	46f2      	mov	sl, lr
 80086e6:	2100      	movs	r1, #0
 80086e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80086ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086f0:	fa1f f883 	uxth.w	r8, r3
 80086f4:	fa11 f18b 	uxtah	r1, r1, fp
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	eba1 0808 	sub.w	r8, r1, r8
 80086fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008706:	fa1f f888 	uxth.w	r8, r8
 800870a:	1419      	asrs	r1, r3, #16
 800870c:	454e      	cmp	r6, r9
 800870e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008712:	f84a 3b04 	str.w	r3, [sl], #4
 8008716:	d8e7      	bhi.n	80086e8 <__mdiff+0x80>
 8008718:	1b33      	subs	r3, r6, r4
 800871a:	3b15      	subs	r3, #21
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	3304      	adds	r3, #4
 8008722:	3415      	adds	r4, #21
 8008724:	42a6      	cmp	r6, r4
 8008726:	bf38      	it	cc
 8008728:	2304      	movcc	r3, #4
 800872a:	441d      	add	r5, r3
 800872c:	4473      	add	r3, lr
 800872e:	469e      	mov	lr, r3
 8008730:	462e      	mov	r6, r5
 8008732:	4566      	cmp	r6, ip
 8008734:	d30e      	bcc.n	8008754 <__mdiff+0xec>
 8008736:	f10c 0203 	add.w	r2, ip, #3
 800873a:	1b52      	subs	r2, r2, r5
 800873c:	f022 0203 	bic.w	r2, r2, #3
 8008740:	3d03      	subs	r5, #3
 8008742:	45ac      	cmp	ip, r5
 8008744:	bf38      	it	cc
 8008746:	2200      	movcc	r2, #0
 8008748:	441a      	add	r2, r3
 800874a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800874e:	b17b      	cbz	r3, 8008770 <__mdiff+0x108>
 8008750:	6107      	str	r7, [r0, #16]
 8008752:	e7a3      	b.n	800869c <__mdiff+0x34>
 8008754:	f856 8b04 	ldr.w	r8, [r6], #4
 8008758:	fa11 f288 	uxtah	r2, r1, r8
 800875c:	1414      	asrs	r4, r2, #16
 800875e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008762:	b292      	uxth	r2, r2
 8008764:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008768:	f84e 2b04 	str.w	r2, [lr], #4
 800876c:	1421      	asrs	r1, r4, #16
 800876e:	e7e0      	b.n	8008732 <__mdiff+0xca>
 8008770:	3f01      	subs	r7, #1
 8008772:	e7ea      	b.n	800874a <__mdiff+0xe2>
 8008774:	08009103 	.word	0x08009103
 8008778:	08009174 	.word	0x08009174

0800877c <__d2b>:
 800877c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008780:	4689      	mov	r9, r1
 8008782:	2101      	movs	r1, #1
 8008784:	ec57 6b10 	vmov	r6, r7, d0
 8008788:	4690      	mov	r8, r2
 800878a:	f7ff fccf 	bl	800812c <_Balloc>
 800878e:	4604      	mov	r4, r0
 8008790:	b930      	cbnz	r0, 80087a0 <__d2b+0x24>
 8008792:	4602      	mov	r2, r0
 8008794:	4b25      	ldr	r3, [pc, #148]	; (800882c <__d2b+0xb0>)
 8008796:	4826      	ldr	r0, [pc, #152]	; (8008830 <__d2b+0xb4>)
 8008798:	f240 310a 	movw	r1, #778	; 0x30a
 800879c:	f000 fb00 	bl	8008da0 <__assert_func>
 80087a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087a8:	bb35      	cbnz	r5, 80087f8 <__d2b+0x7c>
 80087aa:	2e00      	cmp	r6, #0
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	d028      	beq.n	8008802 <__d2b+0x86>
 80087b0:	4668      	mov	r0, sp
 80087b2:	9600      	str	r6, [sp, #0]
 80087b4:	f7ff fd82 	bl	80082bc <__lo0bits>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	b300      	cbz	r0, 80087fe <__d2b+0x82>
 80087bc:	9a01      	ldr	r2, [sp, #4]
 80087be:	f1c0 0320 	rsb	r3, r0, #32
 80087c2:	fa02 f303 	lsl.w	r3, r2, r3
 80087c6:	430b      	orrs	r3, r1
 80087c8:	40c2      	lsrs	r2, r0
 80087ca:	6163      	str	r3, [r4, #20]
 80087cc:	9201      	str	r2, [sp, #4]
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	61a3      	str	r3, [r4, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2202      	movne	r2, #2
 80087d8:	2201      	moveq	r2, #1
 80087da:	6122      	str	r2, [r4, #16]
 80087dc:	b1d5      	cbz	r5, 8008814 <__d2b+0x98>
 80087de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087e2:	4405      	add	r5, r0
 80087e4:	f8c9 5000 	str.w	r5, [r9]
 80087e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087ec:	f8c8 0000 	str.w	r0, [r8]
 80087f0:	4620      	mov	r0, r4
 80087f2:	b003      	add	sp, #12
 80087f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087fc:	e7d5      	b.n	80087aa <__d2b+0x2e>
 80087fe:	6161      	str	r1, [r4, #20]
 8008800:	e7e5      	b.n	80087ce <__d2b+0x52>
 8008802:	a801      	add	r0, sp, #4
 8008804:	f7ff fd5a 	bl	80082bc <__lo0bits>
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	6163      	str	r3, [r4, #20]
 800880c:	2201      	movs	r2, #1
 800880e:	6122      	str	r2, [r4, #16]
 8008810:	3020      	adds	r0, #32
 8008812:	e7e3      	b.n	80087dc <__d2b+0x60>
 8008814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800881c:	f8c9 0000 	str.w	r0, [r9]
 8008820:	6918      	ldr	r0, [r3, #16]
 8008822:	f7ff fd2b 	bl	800827c <__hi0bits>
 8008826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800882a:	e7df      	b.n	80087ec <__d2b+0x70>
 800882c:	08009103 	.word	0x08009103
 8008830:	08009174 	.word	0x08009174

08008834 <_calloc_r>:
 8008834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008836:	fba1 2402 	umull	r2, r4, r1, r2
 800883a:	b94c      	cbnz	r4, 8008850 <_calloc_r+0x1c>
 800883c:	4611      	mov	r1, r2
 800883e:	9201      	str	r2, [sp, #4]
 8008840:	f000 f87a 	bl	8008938 <_malloc_r>
 8008844:	9a01      	ldr	r2, [sp, #4]
 8008846:	4605      	mov	r5, r0
 8008848:	b930      	cbnz	r0, 8008858 <_calloc_r+0x24>
 800884a:	4628      	mov	r0, r5
 800884c:	b003      	add	sp, #12
 800884e:	bd30      	pop	{r4, r5, pc}
 8008850:	220c      	movs	r2, #12
 8008852:	6002      	str	r2, [r0, #0]
 8008854:	2500      	movs	r5, #0
 8008856:	e7f8      	b.n	800884a <_calloc_r+0x16>
 8008858:	4621      	mov	r1, r4
 800885a:	f7fd fea9 	bl	80065b0 <memset>
 800885e:	e7f4      	b.n	800884a <_calloc_r+0x16>

08008860 <_free_r>:
 8008860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008862:	2900      	cmp	r1, #0
 8008864:	d044      	beq.n	80088f0 <_free_r+0x90>
 8008866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800886a:	9001      	str	r0, [sp, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f1a1 0404 	sub.w	r4, r1, #4
 8008872:	bfb8      	it	lt
 8008874:	18e4      	addlt	r4, r4, r3
 8008876:	f000 fb19 	bl	8008eac <__malloc_lock>
 800887a:	4a1e      	ldr	r2, [pc, #120]	; (80088f4 <_free_r+0x94>)
 800887c:	9801      	ldr	r0, [sp, #4]
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	b933      	cbnz	r3, 8008890 <_free_r+0x30>
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	6014      	str	r4, [r2, #0]
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800888c:	f000 bb14 	b.w	8008eb8 <__malloc_unlock>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d908      	bls.n	80088a6 <_free_r+0x46>
 8008894:	6825      	ldr	r5, [r4, #0]
 8008896:	1961      	adds	r1, r4, r5
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	e7ed      	b.n	8008882 <_free_r+0x22>
 80088a6:	461a      	mov	r2, r3
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b10b      	cbz	r3, 80088b0 <_free_r+0x50>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d9fa      	bls.n	80088a6 <_free_r+0x46>
 80088b0:	6811      	ldr	r1, [r2, #0]
 80088b2:	1855      	adds	r5, r2, r1
 80088b4:	42a5      	cmp	r5, r4
 80088b6:	d10b      	bne.n	80088d0 <_free_r+0x70>
 80088b8:	6824      	ldr	r4, [r4, #0]
 80088ba:	4421      	add	r1, r4
 80088bc:	1854      	adds	r4, r2, r1
 80088be:	42a3      	cmp	r3, r4
 80088c0:	6011      	str	r1, [r2, #0]
 80088c2:	d1e0      	bne.n	8008886 <_free_r+0x26>
 80088c4:	681c      	ldr	r4, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	6053      	str	r3, [r2, #4]
 80088ca:	4421      	add	r1, r4
 80088cc:	6011      	str	r1, [r2, #0]
 80088ce:	e7da      	b.n	8008886 <_free_r+0x26>
 80088d0:	d902      	bls.n	80088d8 <_free_r+0x78>
 80088d2:	230c      	movs	r3, #12
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	e7d6      	b.n	8008886 <_free_r+0x26>
 80088d8:	6825      	ldr	r5, [r4, #0]
 80088da:	1961      	adds	r1, r4, r5
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf04      	itt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	6063      	str	r3, [r4, #4]
 80088e6:	bf04      	itt	eq
 80088e8:	1949      	addeq	r1, r1, r5
 80088ea:	6021      	streq	r1, [r4, #0]
 80088ec:	6054      	str	r4, [r2, #4]
 80088ee:	e7ca      	b.n	8008886 <_free_r+0x26>
 80088f0:	b003      	add	sp, #12
 80088f2:	bd30      	pop	{r4, r5, pc}
 80088f4:	240002e4 	.word	0x240002e4

080088f8 <sbrk_aligned>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4e0e      	ldr	r6, [pc, #56]	; (8008934 <sbrk_aligned+0x3c>)
 80088fc:	460c      	mov	r4, r1
 80088fe:	6831      	ldr	r1, [r6, #0]
 8008900:	4605      	mov	r5, r0
 8008902:	b911      	cbnz	r1, 800890a <sbrk_aligned+0x12>
 8008904:	f000 f9e6 	bl	8008cd4 <_sbrk_r>
 8008908:	6030      	str	r0, [r6, #0]
 800890a:	4621      	mov	r1, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f000 f9e1 	bl	8008cd4 <_sbrk_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d00a      	beq.n	800892c <sbrk_aligned+0x34>
 8008916:	1cc4      	adds	r4, r0, #3
 8008918:	f024 0403 	bic.w	r4, r4, #3
 800891c:	42a0      	cmp	r0, r4
 800891e:	d007      	beq.n	8008930 <sbrk_aligned+0x38>
 8008920:	1a21      	subs	r1, r4, r0
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f9d6 	bl	8008cd4 <_sbrk_r>
 8008928:	3001      	adds	r0, #1
 800892a:	d101      	bne.n	8008930 <sbrk_aligned+0x38>
 800892c:	f04f 34ff 	mov.w	r4, #4294967295
 8008930:	4620      	mov	r0, r4
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	240002e8 	.word	0x240002e8

08008938 <_malloc_r>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	1ccd      	adds	r5, r1, #3
 800893e:	f025 0503 	bic.w	r5, r5, #3
 8008942:	3508      	adds	r5, #8
 8008944:	2d0c      	cmp	r5, #12
 8008946:	bf38      	it	cc
 8008948:	250c      	movcc	r5, #12
 800894a:	2d00      	cmp	r5, #0
 800894c:	4607      	mov	r7, r0
 800894e:	db01      	blt.n	8008954 <_malloc_r+0x1c>
 8008950:	42a9      	cmp	r1, r5
 8008952:	d905      	bls.n	8008960 <_malloc_r+0x28>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	2600      	movs	r6, #0
 800895a:	4630      	mov	r0, r6
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	4e2e      	ldr	r6, [pc, #184]	; (8008a1c <_malloc_r+0xe4>)
 8008962:	f000 faa3 	bl	8008eac <__malloc_lock>
 8008966:	6833      	ldr	r3, [r6, #0]
 8008968:	461c      	mov	r4, r3
 800896a:	bb34      	cbnz	r4, 80089ba <_malloc_r+0x82>
 800896c:	4629      	mov	r1, r5
 800896e:	4638      	mov	r0, r7
 8008970:	f7ff ffc2 	bl	80088f8 <sbrk_aligned>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	4604      	mov	r4, r0
 8008978:	d14d      	bne.n	8008a16 <_malloc_r+0xde>
 800897a:	6834      	ldr	r4, [r6, #0]
 800897c:	4626      	mov	r6, r4
 800897e:	2e00      	cmp	r6, #0
 8008980:	d140      	bne.n	8008a04 <_malloc_r+0xcc>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	4631      	mov	r1, r6
 8008986:	4638      	mov	r0, r7
 8008988:	eb04 0803 	add.w	r8, r4, r3
 800898c:	f000 f9a2 	bl	8008cd4 <_sbrk_r>
 8008990:	4580      	cmp	r8, r0
 8008992:	d13a      	bne.n	8008a0a <_malloc_r+0xd2>
 8008994:	6821      	ldr	r1, [r4, #0]
 8008996:	3503      	adds	r5, #3
 8008998:	1a6d      	subs	r5, r5, r1
 800899a:	f025 0503 	bic.w	r5, r5, #3
 800899e:	3508      	adds	r5, #8
 80089a0:	2d0c      	cmp	r5, #12
 80089a2:	bf38      	it	cc
 80089a4:	250c      	movcc	r5, #12
 80089a6:	4629      	mov	r1, r5
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff ffa5 	bl	80088f8 <sbrk_aligned>
 80089ae:	3001      	adds	r0, #1
 80089b0:	d02b      	beq.n	8008a0a <_malloc_r+0xd2>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	442b      	add	r3, r5
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	e00e      	b.n	80089d8 <_malloc_r+0xa0>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	1b52      	subs	r2, r2, r5
 80089be:	d41e      	bmi.n	80089fe <_malloc_r+0xc6>
 80089c0:	2a0b      	cmp	r2, #11
 80089c2:	d916      	bls.n	80089f2 <_malloc_r+0xba>
 80089c4:	1961      	adds	r1, r4, r5
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	6025      	str	r5, [r4, #0]
 80089ca:	bf18      	it	ne
 80089cc:	6059      	strne	r1, [r3, #4]
 80089ce:	6863      	ldr	r3, [r4, #4]
 80089d0:	bf08      	it	eq
 80089d2:	6031      	streq	r1, [r6, #0]
 80089d4:	5162      	str	r2, [r4, r5]
 80089d6:	604b      	str	r3, [r1, #4]
 80089d8:	4638      	mov	r0, r7
 80089da:	f104 060b 	add.w	r6, r4, #11
 80089de:	f000 fa6b 	bl	8008eb8 <__malloc_unlock>
 80089e2:	f026 0607 	bic.w	r6, r6, #7
 80089e6:	1d23      	adds	r3, r4, #4
 80089e8:	1af2      	subs	r2, r6, r3
 80089ea:	d0b6      	beq.n	800895a <_malloc_r+0x22>
 80089ec:	1b9b      	subs	r3, r3, r6
 80089ee:	50a3      	str	r3, [r4, r2]
 80089f0:	e7b3      	b.n	800895a <_malloc_r+0x22>
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	bf0c      	ite	eq
 80089f8:	6032      	streq	r2, [r6, #0]
 80089fa:	605a      	strne	r2, [r3, #4]
 80089fc:	e7ec      	b.n	80089d8 <_malloc_r+0xa0>
 80089fe:	4623      	mov	r3, r4
 8008a00:	6864      	ldr	r4, [r4, #4]
 8008a02:	e7b2      	b.n	800896a <_malloc_r+0x32>
 8008a04:	4634      	mov	r4, r6
 8008a06:	6876      	ldr	r6, [r6, #4]
 8008a08:	e7b9      	b.n	800897e <_malloc_r+0x46>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f000 fa52 	bl	8008eb8 <__malloc_unlock>
 8008a14:	e7a1      	b.n	800895a <_malloc_r+0x22>
 8008a16:	6025      	str	r5, [r4, #0]
 8008a18:	e7de      	b.n	80089d8 <_malloc_r+0xa0>
 8008a1a:	bf00      	nop
 8008a1c:	240002e4 	.word	0x240002e4

08008a20 <__sfputc_r>:
 8008a20:	6893      	ldr	r3, [r2, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	b410      	push	{r4}
 8008a28:	6093      	str	r3, [r2, #8]
 8008a2a:	da08      	bge.n	8008a3e <__sfputc_r+0x1e>
 8008a2c:	6994      	ldr	r4, [r2, #24]
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	db01      	blt.n	8008a36 <__sfputc_r+0x16>
 8008a32:	290a      	cmp	r1, #10
 8008a34:	d103      	bne.n	8008a3e <__sfputc_r+0x1e>
 8008a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a3a:	f7fe ba91 	b.w	8006f60 <__swbuf_r>
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	1c58      	adds	r0, r3, #1
 8008a42:	6010      	str	r0, [r2, #0]
 8008a44:	7019      	strb	r1, [r3, #0]
 8008a46:	4608      	mov	r0, r1
 8008a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <__sfputs_r>:
 8008a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a50:	4606      	mov	r6, r0
 8008a52:	460f      	mov	r7, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	18d5      	adds	r5, r2, r3
 8008a58:	42ac      	cmp	r4, r5
 8008a5a:	d101      	bne.n	8008a60 <__sfputs_r+0x12>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e007      	b.n	8008a70 <__sfputs_r+0x22>
 8008a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a64:	463a      	mov	r2, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff ffda 	bl	8008a20 <__sfputc_r>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d1f3      	bne.n	8008a58 <__sfputs_r+0xa>
 8008a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a74 <_vfiprintf_r>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	460d      	mov	r5, r1
 8008a7a:	b09d      	sub	sp, #116	; 0x74
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	4698      	mov	r8, r3
 8008a80:	4606      	mov	r6, r0
 8008a82:	b118      	cbz	r0, 8008a8c <_vfiprintf_r+0x18>
 8008a84:	6983      	ldr	r3, [r0, #24]
 8008a86:	b90b      	cbnz	r3, 8008a8c <_vfiprintf_r+0x18>
 8008a88:	f7ff fa3e 	bl	8007f08 <__sinit>
 8008a8c:	4b89      	ldr	r3, [pc, #548]	; (8008cb4 <_vfiprintf_r+0x240>)
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	d11b      	bne.n	8008aca <_vfiprintf_r+0x56>
 8008a92:	6875      	ldr	r5, [r6, #4]
 8008a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_vfiprintf_r+0x32>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_vfiprintf_r+0x32>
 8008aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aa2:	f7ff fad4 	bl	800804e <__retarget_lock_acquire_recursive>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	071b      	lsls	r3, r3, #28
 8008aaa:	d501      	bpl.n	8008ab0 <_vfiprintf_r+0x3c>
 8008aac:	692b      	ldr	r3, [r5, #16]
 8008aae:	b9eb      	cbnz	r3, 8008aec <_vfiprintf_r+0x78>
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7fe faa6 	bl	8007004 <__swsetup_r>
 8008ab8:	b1c0      	cbz	r0, 8008aec <_vfiprintf_r+0x78>
 8008aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008abc:	07dc      	lsls	r4, r3, #31
 8008abe:	d50e      	bpl.n	8008ade <_vfiprintf_r+0x6a>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	b01d      	add	sp, #116	; 0x74
 8008ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aca:	4b7b      	ldr	r3, [pc, #492]	; (8008cb8 <_vfiprintf_r+0x244>)
 8008acc:	429d      	cmp	r5, r3
 8008ace:	d101      	bne.n	8008ad4 <_vfiprintf_r+0x60>
 8008ad0:	68b5      	ldr	r5, [r6, #8]
 8008ad2:	e7df      	b.n	8008a94 <_vfiprintf_r+0x20>
 8008ad4:	4b79      	ldr	r3, [pc, #484]	; (8008cbc <_vfiprintf_r+0x248>)
 8008ad6:	429d      	cmp	r5, r3
 8008ad8:	bf08      	it	eq
 8008ada:	68f5      	ldreq	r5, [r6, #12]
 8008adc:	e7da      	b.n	8008a94 <_vfiprintf_r+0x20>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	0598      	lsls	r0, r3, #22
 8008ae2:	d4ed      	bmi.n	8008ac0 <_vfiprintf_r+0x4c>
 8008ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ae6:	f7ff fab3 	bl	8008050 <__retarget_lock_release_recursive>
 8008aea:	e7e9      	b.n	8008ac0 <_vfiprintf_r+0x4c>
 8008aec:	2300      	movs	r3, #0
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
 8008af0:	2320      	movs	r3, #32
 8008af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008afa:	2330      	movs	r3, #48	; 0x30
 8008afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cc0 <_vfiprintf_r+0x24c>
 8008b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b04:	f04f 0901 	mov.w	r9, #1
 8008b08:	4623      	mov	r3, r4
 8008b0a:	469a      	mov	sl, r3
 8008b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b10:	b10a      	cbz	r2, 8008b16 <_vfiprintf_r+0xa2>
 8008b12:	2a25      	cmp	r2, #37	; 0x25
 8008b14:	d1f9      	bne.n	8008b0a <_vfiprintf_r+0x96>
 8008b16:	ebba 0b04 	subs.w	fp, sl, r4
 8008b1a:	d00b      	beq.n	8008b34 <_vfiprintf_r+0xc0>
 8008b1c:	465b      	mov	r3, fp
 8008b1e:	4622      	mov	r2, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff ff93 	bl	8008a4e <__sfputs_r>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f000 80aa 	beq.w	8008c82 <_vfiprintf_r+0x20e>
 8008b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b30:	445a      	add	r2, fp
 8008b32:	9209      	str	r2, [sp, #36]	; 0x24
 8008b34:	f89a 3000 	ldrb.w	r3, [sl]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a2 	beq.w	8008c82 <_vfiprintf_r+0x20e>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295
 8008b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b48:	f10a 0a01 	add.w	sl, sl, #1
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b54:	931a      	str	r3, [sp, #104]	; 0x68
 8008b56:	4654      	mov	r4, sl
 8008b58:	2205      	movs	r2, #5
 8008b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5e:	4858      	ldr	r0, [pc, #352]	; (8008cc0 <_vfiprintf_r+0x24c>)
 8008b60:	f7f7 fbc6 	bl	80002f0 <memchr>
 8008b64:	9a04      	ldr	r2, [sp, #16]
 8008b66:	b9d8      	cbnz	r0, 8008ba0 <_vfiprintf_r+0x12c>
 8008b68:	06d1      	lsls	r1, r2, #27
 8008b6a:	bf44      	itt	mi
 8008b6c:	2320      	movmi	r3, #32
 8008b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b72:	0713      	lsls	r3, r2, #28
 8008b74:	bf44      	itt	mi
 8008b76:	232b      	movmi	r3, #43	; 0x2b
 8008b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d015      	beq.n	8008bb0 <_vfiprintf_r+0x13c>
 8008b84:	9a07      	ldr	r2, [sp, #28]
 8008b86:	4654      	mov	r4, sl
 8008b88:	2000      	movs	r0, #0
 8008b8a:	f04f 0c0a 	mov.w	ip, #10
 8008b8e:	4621      	mov	r1, r4
 8008b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b94:	3b30      	subs	r3, #48	; 0x30
 8008b96:	2b09      	cmp	r3, #9
 8008b98:	d94e      	bls.n	8008c38 <_vfiprintf_r+0x1c4>
 8008b9a:	b1b0      	cbz	r0, 8008bca <_vfiprintf_r+0x156>
 8008b9c:	9207      	str	r2, [sp, #28]
 8008b9e:	e014      	b.n	8008bca <_vfiprintf_r+0x156>
 8008ba0:	eba0 0308 	sub.w	r3, r0, r8
 8008ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	46a2      	mov	sl, r4
 8008bae:	e7d2      	b.n	8008b56 <_vfiprintf_r+0xe2>
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	1d19      	adds	r1, r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	9103      	str	r1, [sp, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bfbb      	ittet	lt
 8008bbc:	425b      	neglt	r3, r3
 8008bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc2:	9307      	strge	r3, [sp, #28]
 8008bc4:	9307      	strlt	r3, [sp, #28]
 8008bc6:	bfb8      	it	lt
 8008bc8:	9204      	strlt	r2, [sp, #16]
 8008bca:	7823      	ldrb	r3, [r4, #0]
 8008bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8008bce:	d10c      	bne.n	8008bea <_vfiprintf_r+0x176>
 8008bd0:	7863      	ldrb	r3, [r4, #1]
 8008bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd4:	d135      	bne.n	8008c42 <_vfiprintf_r+0x1ce>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	1d1a      	adds	r2, r3, #4
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	9203      	str	r2, [sp, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfb8      	it	lt
 8008be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008be6:	3402      	adds	r4, #2
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cd0 <_vfiprintf_r+0x25c>
 8008bee:	7821      	ldrb	r1, [r4, #0]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	f7f7 fb7c 	bl	80002f0 <memchr>
 8008bf8:	b140      	cbz	r0, 8008c0c <_vfiprintf_r+0x198>
 8008bfa:	2340      	movs	r3, #64	; 0x40
 8008bfc:	eba0 000a 	sub.w	r0, r0, sl
 8008c00:	fa03 f000 	lsl.w	r0, r3, r0
 8008c04:	9b04      	ldr	r3, [sp, #16]
 8008c06:	4303      	orrs	r3, r0
 8008c08:	3401      	adds	r4, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c10:	482c      	ldr	r0, [pc, #176]	; (8008cc4 <_vfiprintf_r+0x250>)
 8008c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c16:	2206      	movs	r2, #6
 8008c18:	f7f7 fb6a 	bl	80002f0 <memchr>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d03f      	beq.n	8008ca0 <_vfiprintf_r+0x22c>
 8008c20:	4b29      	ldr	r3, [pc, #164]	; (8008cc8 <_vfiprintf_r+0x254>)
 8008c22:	bb1b      	cbnz	r3, 8008c6c <_vfiprintf_r+0x1f8>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	3307      	adds	r3, #7
 8008c28:	f023 0307 	bic.w	r3, r3, #7
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c32:	443b      	add	r3, r7
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	e767      	b.n	8008b08 <_vfiprintf_r+0x94>
 8008c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	2001      	movs	r0, #1
 8008c40:	e7a5      	b.n	8008b8e <_vfiprintf_r+0x11a>
 8008c42:	2300      	movs	r3, #0
 8008c44:	3401      	adds	r4, #1
 8008c46:	9305      	str	r3, [sp, #20]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f04f 0c0a 	mov.w	ip, #10
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c54:	3a30      	subs	r2, #48	; 0x30
 8008c56:	2a09      	cmp	r2, #9
 8008c58:	d903      	bls.n	8008c62 <_vfiprintf_r+0x1ee>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0c5      	beq.n	8008bea <_vfiprintf_r+0x176>
 8008c5e:	9105      	str	r1, [sp, #20]
 8008c60:	e7c3      	b.n	8008bea <_vfiprintf_r+0x176>
 8008c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c66:	4604      	mov	r4, r0
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e7f0      	b.n	8008c4e <_vfiprintf_r+0x1da>
 8008c6c:	ab03      	add	r3, sp, #12
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	462a      	mov	r2, r5
 8008c72:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <_vfiprintf_r+0x258>)
 8008c74:	a904      	add	r1, sp, #16
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7fd fd32 	bl	80066e0 <_printf_float>
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	1c78      	adds	r0, r7, #1
 8008c80:	d1d6      	bne.n	8008c30 <_vfiprintf_r+0x1bc>
 8008c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c84:	07d9      	lsls	r1, r3, #31
 8008c86:	d405      	bmi.n	8008c94 <_vfiprintf_r+0x220>
 8008c88:	89ab      	ldrh	r3, [r5, #12]
 8008c8a:	059a      	lsls	r2, r3, #22
 8008c8c:	d402      	bmi.n	8008c94 <_vfiprintf_r+0x220>
 8008c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c90:	f7ff f9de 	bl	8008050 <__retarget_lock_release_recursive>
 8008c94:	89ab      	ldrh	r3, [r5, #12]
 8008c96:	065b      	lsls	r3, r3, #25
 8008c98:	f53f af12 	bmi.w	8008ac0 <_vfiprintf_r+0x4c>
 8008c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c9e:	e711      	b.n	8008ac4 <_vfiprintf_r+0x50>
 8008ca0:	ab03      	add	r3, sp, #12
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <_vfiprintf_r+0x258>)
 8008ca8:	a904      	add	r1, sp, #16
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7fd ffa4 	bl	8006bf8 <_printf_i>
 8008cb0:	e7e4      	b.n	8008c7c <_vfiprintf_r+0x208>
 8008cb2:	bf00      	nop
 8008cb4:	08009134 	.word	0x08009134
 8008cb8:	08009154 	.word	0x08009154
 8008cbc:	08009114 	.word	0x08009114
 8008cc0:	080092cc 	.word	0x080092cc
 8008cc4:	080092d6 	.word	0x080092d6
 8008cc8:	080066e1 	.word	0x080066e1
 8008ccc:	08008a4f 	.word	0x08008a4f
 8008cd0:	080092d2 	.word	0x080092d2

08008cd4 <_sbrk_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d06      	ldr	r5, [pc, #24]	; (8008cf0 <_sbrk_r+0x1c>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f7f8 f8c4 	bl	8000e6c <_sbrk>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_sbrk_r+0x1a>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_sbrk_r+0x1a>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	240002ec 	.word	0x240002ec

08008cf4 <__sread>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 f8e2 	bl	8008ec4 <_read_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bfab      	itete	ge
 8008d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d06:	89a3      	ldrhlt	r3, [r4, #12]
 8008d08:	181b      	addge	r3, r3, r0
 8008d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d0e:	bfac      	ite	ge
 8008d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d12:	81a3      	strhlt	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__swrite>:
 8008d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	05db      	lsls	r3, r3, #23
 8008d20:	4605      	mov	r5, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	4616      	mov	r6, r2
 8008d26:	d505      	bpl.n	8008d34 <__swrite+0x1e>
 8008d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f000 f898 	bl	8008e64 <_lseek_r>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	4628      	mov	r0, r5
 8008d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	f000 b817 	b.w	8008d7c <_write_r>

08008d4e <__sseek>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 f885 	bl	8008e64 <_lseek_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	bf15      	itete	ne
 8008d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d6a:	81a3      	strheq	r3, [r4, #12]
 8008d6c:	bf18      	it	ne
 8008d6e:	81a3      	strhne	r3, [r4, #12]
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <__sclose>:
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 b831 	b.w	8008ddc <_close_r>
	...

08008d7c <_write_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_write_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f8 f81d 	bl	8000dca <_write>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_write_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_write_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	240002ec 	.word	0x240002ec

08008da0 <__assert_func>:
 8008da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008da2:	4614      	mov	r4, r2
 8008da4:	461a      	mov	r2, r3
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <__assert_func+0x2c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4605      	mov	r5, r0
 8008dac:	68d8      	ldr	r0, [r3, #12]
 8008dae:	b14c      	cbz	r4, 8008dc4 <__assert_func+0x24>
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <__assert_func+0x30>)
 8008db2:	9100      	str	r1, [sp, #0]
 8008db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008db8:	4906      	ldr	r1, [pc, #24]	; (8008dd4 <__assert_func+0x34>)
 8008dba:	462b      	mov	r3, r5
 8008dbc:	f000 f81e 	bl	8008dfc <fiprintf>
 8008dc0:	f000 f89f 	bl	8008f02 <abort>
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <__assert_func+0x38>)
 8008dc6:	461c      	mov	r4, r3
 8008dc8:	e7f3      	b.n	8008db2 <__assert_func+0x12>
 8008dca:	bf00      	nop
 8008dcc:	24000010 	.word	0x24000010
 8008dd0:	080092dd 	.word	0x080092dd
 8008dd4:	080092ea 	.word	0x080092ea
 8008dd8:	08009318 	.word	0x08009318

08008ddc <_close_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d06      	ldr	r5, [pc, #24]	; (8008df8 <_close_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7f8 f80b 	bl	8000e02 <_close>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_close_r+0x1a>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_close_r+0x1a>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	240002ec 	.word	0x240002ec

08008dfc <fiprintf>:
 8008dfc:	b40e      	push	{r1, r2, r3}
 8008dfe:	b503      	push	{r0, r1, lr}
 8008e00:	4601      	mov	r1, r0
 8008e02:	ab03      	add	r3, sp, #12
 8008e04:	4805      	ldr	r0, [pc, #20]	; (8008e1c <fiprintf+0x20>)
 8008e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	f7ff fe31 	bl	8008a74 <_vfiprintf_r>
 8008e12:	b002      	add	sp, #8
 8008e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e18:	b003      	add	sp, #12
 8008e1a:	4770      	bx	lr
 8008e1c:	24000010 	.word	0x24000010

08008e20 <_fstat_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	; (8008e40 <_fstat_r+0x20>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	f7f7 fff4 	bl	8000e1a <_fstat>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d102      	bne.n	8008e3c <_fstat_r+0x1c>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	b103      	cbz	r3, 8008e3c <_fstat_r+0x1c>
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	bf00      	nop
 8008e40:	240002ec 	.word	0x240002ec

08008e44 <_isatty_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	; (8008e60 <_isatty_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f7 fff3 	bl	8000e3a <_isatty>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_isatty_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_isatty_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	240002ec 	.word	0x240002ec

08008e64 <_lseek_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4d07      	ldr	r5, [pc, #28]	; (8008e84 <_lseek_r+0x20>)
 8008e68:	4604      	mov	r4, r0
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	602a      	str	r2, [r5, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	f7f7 ffec 	bl	8000e50 <_lseek>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_lseek_r+0x1e>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_lseek_r+0x1e>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	240002ec 	.word	0x240002ec

08008e88 <__ascii_mbtowc>:
 8008e88:	b082      	sub	sp, #8
 8008e8a:	b901      	cbnz	r1, 8008e8e <__ascii_mbtowc+0x6>
 8008e8c:	a901      	add	r1, sp, #4
 8008e8e:	b142      	cbz	r2, 8008ea2 <__ascii_mbtowc+0x1a>
 8008e90:	b14b      	cbz	r3, 8008ea6 <__ascii_mbtowc+0x1e>
 8008e92:	7813      	ldrb	r3, [r2, #0]
 8008e94:	600b      	str	r3, [r1, #0]
 8008e96:	7812      	ldrb	r2, [r2, #0]
 8008e98:	1e10      	subs	r0, r2, #0
 8008e9a:	bf18      	it	ne
 8008e9c:	2001      	movne	r0, #1
 8008e9e:	b002      	add	sp, #8
 8008ea0:	4770      	bx	lr
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	e7fb      	b.n	8008e9e <__ascii_mbtowc+0x16>
 8008ea6:	f06f 0001 	mvn.w	r0, #1
 8008eaa:	e7f8      	b.n	8008e9e <__ascii_mbtowc+0x16>

08008eac <__malloc_lock>:
 8008eac:	4801      	ldr	r0, [pc, #4]	; (8008eb4 <__malloc_lock+0x8>)
 8008eae:	f7ff b8ce 	b.w	800804e <__retarget_lock_acquire_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	240002e0 	.word	0x240002e0

08008eb8 <__malloc_unlock>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	; (8008ec0 <__malloc_unlock+0x8>)
 8008eba:	f7ff b8c9 	b.w	8008050 <__retarget_lock_release_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	240002e0 	.word	0x240002e0

08008ec4 <_read_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	; (8008ee4 <_read_r+0x20>)
 8008ec8:	4604      	mov	r4, r0
 8008eca:	4608      	mov	r0, r1
 8008ecc:	4611      	mov	r1, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	602a      	str	r2, [r5, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f7f7 ff5c 	bl	8000d90 <_read>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_read_r+0x1e>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_read_r+0x1e>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	240002ec 	.word	0x240002ec

08008ee8 <__ascii_wctomb>:
 8008ee8:	b149      	cbz	r1, 8008efe <__ascii_wctomb+0x16>
 8008eea:	2aff      	cmp	r2, #255	; 0xff
 8008eec:	bf85      	ittet	hi
 8008eee:	238a      	movhi	r3, #138	; 0x8a
 8008ef0:	6003      	strhi	r3, [r0, #0]
 8008ef2:	700a      	strbls	r2, [r1, #0]
 8008ef4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ef8:	bf98      	it	ls
 8008efa:	2001      	movls	r0, #1
 8008efc:	4770      	bx	lr
 8008efe:	4608      	mov	r0, r1
 8008f00:	4770      	bx	lr

08008f02 <abort>:
 8008f02:	b508      	push	{r3, lr}
 8008f04:	2006      	movs	r0, #6
 8008f06:	f000 f82b 	bl	8008f60 <raise>
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	f7f7 ff36 	bl	8000d7c <_exit>

08008f10 <_raise_r>:
 8008f10:	291f      	cmp	r1, #31
 8008f12:	b538      	push	{r3, r4, r5, lr}
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	d904      	bls.n	8008f24 <_raise_r+0x14>
 8008f1a:	2316      	movs	r3, #22
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f26:	b112      	cbz	r2, 8008f2e <_raise_r+0x1e>
 8008f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f2c:	b94b      	cbnz	r3, 8008f42 <_raise_r+0x32>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 f830 	bl	8008f94 <_getpid_r>
 8008f34:	462a      	mov	r2, r5
 8008f36:	4601      	mov	r1, r0
 8008f38:	4620      	mov	r0, r4
 8008f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f3e:	f000 b817 	b.w	8008f70 <_kill_r>
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d00a      	beq.n	8008f5c <_raise_r+0x4c>
 8008f46:	1c59      	adds	r1, r3, #1
 8008f48:	d103      	bne.n	8008f52 <_raise_r+0x42>
 8008f4a:	2316      	movs	r3, #22
 8008f4c:	6003      	str	r3, [r0, #0]
 8008f4e:	2001      	movs	r0, #1
 8008f50:	e7e7      	b.n	8008f22 <_raise_r+0x12>
 8008f52:	2400      	movs	r4, #0
 8008f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f58:	4628      	mov	r0, r5
 8008f5a:	4798      	blx	r3
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e7e0      	b.n	8008f22 <_raise_r+0x12>

08008f60 <raise>:
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <raise+0xc>)
 8008f62:	4601      	mov	r1, r0
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f7ff bfd3 	b.w	8008f10 <_raise_r>
 8008f6a:	bf00      	nop
 8008f6c:	24000010 	.word	0x24000010

08008f70 <_kill_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	; (8008f90 <_kill_r+0x20>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	f7f7 feed 	bl	8000d5c <_kill>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d102      	bne.n	8008f8c <_kill_r+0x1c>
 8008f86:	682b      	ldr	r3, [r5, #0]
 8008f88:	b103      	cbz	r3, 8008f8c <_kill_r+0x1c>
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	240002ec 	.word	0x240002ec

08008f94 <_getpid_r>:
 8008f94:	f7f7 beda 	b.w	8000d4c <_getpid>

08008f98 <_init>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr

08008fa4 <_fini>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr
