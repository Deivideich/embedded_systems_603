
STM32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08009398  08009398  00019398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800985c  0800985c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009864  08009864  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800986c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  240001e0  08009a4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400033c  08009a4c  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018026  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  00038234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0003ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c2d5  00000000  00000000  0003d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e33  00000000  00000000  000793c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188711  00000000  00000000  000931f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021b909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b0  00000000  00000000  0021b95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009380 	.word	0x08009380

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08009380 	.word	0x08009380

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <setPwmS>:
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007d0:	429a      	cmp	r2, r3
 80007d2:	bf28      	it	cs
 80007d4:	461a      	movcs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007e2:	429a      	cmp	r2, r3
 80007e4:	bf28      	it	cs
 80007e6:	461a      	movcs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f4:	429a      	cmp	r2, r3
 80007f6:	bf28      	it	cs
 80007f8:	461a      	movcs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000814:	fb03 f202 	mul.w	r2, r3, r2
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4413      	add	r3, r2
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8000832:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000898 <setPwmS+0xd8>
 8000836:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800084c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000898 <setPwmS+0xd8>
 8000850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000854:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800086a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800086e:	ed97 6b04 	vldr	d6, [r7, #16]
 8000872:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000876:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000882:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000886:	ee17 2a90 	vmov	r2, s15
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800088c:	bf00      	nop
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	00000000 	.word	0x00000000
 800089c:	412e8480 	.word	0x412e8480

080008a0 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	4a36      	ldr	r2, [pc, #216]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a27      	ldr	r2, [pc, #156]	; (8000998 <MX_GPIO_Init+0xf8>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a18      	ldr	r2, [pc, #96]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0xfc>)
 8000954:	f001 f9b4 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x100>)
 800096e:	f000 fff7 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000972:	f244 0301 	movw	r3, #16385	; 0x4001
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_GPIO_Init+0xfc>)
 800098c:	f000 ffe8 	bl	8001960 <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400
 800099c:	58020400 	.word	0x58020400
 80009a0:	58020800 	.word	0x58020800
 80009a4:	00000000 	.word	0x00000000

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0c8      	sub	sp, #288	; 0x120
 80009ac:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009b6:	bf00      	nop
 80009b8:	4b9c      	ldr	r3, [pc, #624]	; (8000c2c <main+0x284>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d006      	beq.n	80009d2 <main+0x2a>
 80009c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dcf2      	bgt.n	80009b8 <main+0x10>
  if ( timeout < 0 )
 80009d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da01      	bge.n	80009de <main+0x36>
  {
  Error_Handler();
 80009da:	f000 fa97 	bl	8000f0c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fe19 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 fa19 	bl	8000e18 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009e6:	4b91      	ldr	r3, [pc, #580]	; (8000c2c <main+0x284>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a8f      	ldr	r2, [pc, #572]	; (8000c2c <main+0x284>)
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b8d      	ldr	r3, [pc, #564]	; (8000c2c <main+0x284>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a12:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 f96d 	bl	8001cf4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f001 f983 	bl	8001d28 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a2a:	bf00      	nop
 8000a2c:	4b7f      	ldr	r3, [pc, #508]	; (8000c2c <main+0x284>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d106      	bne.n	8000a46 <main+0x9e>
 8000a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dcf2      	bgt.n	8000a2c <main+0x84>
if ( timeout < 0 )
 8000a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da01      	bge.n	8000a52 <main+0xaa>
{
Error_Handler();
 8000a4e:	f000 fa5d 	bl	8000f0c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a52:	f7ff ff25 	bl	80008a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a56:	f000 fd01 	bl	800145c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a5a:	f000 fb79 	bl	8001150 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a5e:	f000 fbed 	bl	800123c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Starting Timer 2
 8000a62:	2100      	movs	r1, #0
 8000a64:	4872      	ldr	r0, [pc, #456]	; (8000c30 <main+0x288>)
 8000a66:	f003 fda7 	bl	80045b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4871      	ldr	r0, [pc, #452]	; (8000c34 <main+0x28c>)
 8000a6e:	f003 fda3 	bl	80045b8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //@notes: Variables for Pulse Width Modulatio for ESC (motor) and servo.
  //Esc variables are set for backwards motion (depending on polarity).
  int minPulseWidthESC = 1000; //Variables for PWM (ESC - backwards)
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  int maxPulseWidthESC = 1500;
 8000a7a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  int minPulseWidthServo = 1000;
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  int maxPulseWidthServo = 2000;
 8000a8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  unsigned int pwmPeriod = 20000;
 8000a92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  int resolution = 100;
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



  struct escValues escValues = {htim2, minPulseWidthESC, //Struct Containing all
 8000aa0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000aa4:	2268      	movs	r2, #104	; 0x68
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 ff73 	bl	8006994 <memset>
 8000aae:	4a60      	ldr	r2, [pc, #384]	; (8000c30 <main+0x288>)
 8000ab0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	224c      	movs	r2, #76	; 0x4c
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 ff5d 	bl	8006978 <memcpy>
 8000abe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000ace:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000ad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		  maxPulseWidthESC, pwmPeriod, resolution};	  		//PWM Variables for ESC

  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 8000ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	2368      	movs	r3, #104	; 0x68
 8000aea:	461a      	mov	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f005 ff51 	bl	8006994 <memset>
 8000af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000af6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <main+0x28c>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	4611      	mov	r1, r2
 8000b00:	234c      	movs	r3, #76	; 0x4c
 8000b02:	461a      	mov	r2, r3
 8000b04:	f005 ff38 	bl	8006978 <memcpy>
 8000b08:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b14:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b16:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b22:	651a      	str	r2, [r3, #80]	; 0x50
 8000b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b2c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000b30:	655a      	str	r2, [r3, #84]	; 0x54
 8000b32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b3e:	659a      	str	r2, [r3, #88]	; 0x58
		  maxPulseWidthServo, pwmPeriod, resolution};	  	 //PWM Variables for Servo

  //@notes: ESC needs to start gradually
  //after starting gradually, it will respond to pwm. If given a pwm
  //without this setup, it doesn't respond.
  printf("Starting Setup...\r\n"); // Setup
 8000b40:	483d      	ldr	r0, [pc, #244]	; (8000c38 <main+0x290>)
 8000b42:	f006 fbf9 	bl	8007338 <puts>
  int i = 100;
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  int dt = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  do{
	  //setPwm(htim2, minPulseWidth, maxPulseWidth, pwmPeriod, resolution, i);
	  setPwmS(&escValues);
 8000b52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fe32 	bl	80007c0 <setPwmS>
	  escValues.percentage=(unsigned int)i;
 8000b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  HAL_Delay(10);
 8000b64:	200a      	movs	r0, #10
 8000b66:	f000 fde7 	bl	8001738 <HAL_Delay>
	  i=i-dt;
 8000b6a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000b6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  }while(i > 50);
 8000b78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b7c:	2b32      	cmp	r3, #50	; 0x32
 8000b7e:	dce8      	bgt.n	8000b52 <main+0x1aa>
  printf("End Setup\r\n");
 8000b80:	482e      	ldr	r0, [pc, #184]	; (8000c3c <main+0x294>)
 8000b82:	f006 fbd9 	bl	8007338 <puts>

  escValues.percentage = 50;
 8000b86:	2332      	movs	r3, #50	; 0x32
 8000b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  setPwmS(&escValues);
 8000b8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe15 	bl	80007c0 <setPwmS>

	  //@note: Test for checking motor with ESC. Receiving from UART
	  //values from 000 to 100. Change minPulseWidth, maxPulseWidth
	  //pwmPeriod, resoution and escValues.percentage accordingly to
	  //your needs.
	  printf("PWM: ");
 8000b96:	482a      	ldr	r0, [pc, #168]	; (8000c40 <main+0x298>)
 8000b98:	f006 fb48 	bl	800722c <iprintf>
	  while(HAL_UART_Receive(&huart3, inputESC, 3, HAL_MAX_DELAY)); //Receiving from UART
 8000b9c:	bf00      	nop
 8000b9e:	f107 010c 	add.w	r1, r7, #12
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4826      	ldr	r0, [pc, #152]	; (8000c44 <main+0x29c>)
 8000baa:	f004 fdc7 	bl	800573c <HAL_UART_Receive>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f4      	bne.n	8000b9e <main+0x1f6>
	  printf("Received PWM: {%c%c%c} \r\n",inputESC[0],inputESC[1],inputESC[2]);
 8000bb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	481c      	ldr	r0, [pc, #112]	; (8000c48 <main+0x2a0>)
 8000bd8:	f006 fb28 	bl	800722c <iprintf>
	  printf("\nServo: ");
 8000bdc:	481b      	ldr	r0, [pc, #108]	; (8000c4c <main+0x2a4>)
 8000bde:	f006 fb25 	bl	800722c <iprintf>
	  while(HAL_UART_Receive(&huart3, inputServo, 3, HAL_MAX_DELAY)); //Receiving from UART
 8000be2:	bf00      	nop
 8000be4:	f107 0108 	add.w	r1, r7, #8
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	2203      	movs	r2, #3
 8000bee:	4815      	ldr	r0, [pc, #84]	; (8000c44 <main+0x29c>)
 8000bf0:	f004 fda4 	bl	800573c <HAL_UART_Receive>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f4      	bne.n	8000be4 <main+0x23c>
	  printf("Received PWM: {%c%c%c} \r\n",inputServo[0],inputServo[1],inputServo[2]);
 8000bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	461a      	mov	r2, r3
 8000c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <main+0x2a0>)
 8000c1e:	f006 fb05 	bl	800722c <iprintf>

	  for(int i = 0 ; i < 4 ; i++){//Deleting 0 to convert from ASCII to DEC
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000c28:	e03d      	b.n	8000ca6 <main+0x2fe>
 8000c2a:	bf00      	nop
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	24000200 	.word	0x24000200
 8000c34:	2400024c 	.word	0x2400024c
 8000c38:	08009398 	.word	0x08009398
 8000c3c:	080093ac 	.word	0x080093ac
 8000c40:	080093b8 	.word	0x080093b8
 8000c44:	24000298 	.word	0x24000298
 8000c48:	080093c0 	.word	0x080093c0
 8000c4c:	080093dc 	.word	0x080093dc
		  inputESC[i]-='0';
 8000c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c54:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8000c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	3b30      	subs	r3, #48	; 0x30
 8000c62:	b2d9      	uxtb	r1, r3
 8000c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c68:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8000c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c70:	4413      	add	r3, r2
 8000c72:	460a      	mov	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
		  inputServo[i]-='0';
 8000c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c7a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c82:	4413      	add	r3, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b30      	subs	r3, #48	; 0x30
 8000c88:	b2d9      	uxtb	r1, r3
 8000c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c8e:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c96:	4413      	add	r3, r2
 8000c98:	460a      	mov	r2, r1
 8000c9a:	701a      	strb	r2, [r3, #0]
	  for(int i = 0 ; i < 4 ; i++){//Deleting 0 to convert from ASCII to DEC
 8000c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	ddd0      	ble.n	8000c50 <main+0x2a8>
	  }

	  inputIntESC = (inputESC[0]*100 + inputESC[1]*10 + inputESC[2]);//Converting to INT ESC
 8000cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2364      	movs	r3, #100	; 0x64
 8000cbc:	fb03 f202 	mul.w	r2, r3, r2
 8000cc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	460b      	mov	r3, r1
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cda:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000cde:	7892      	ldrb	r2, [r2, #2]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  inputIntServo = (inputServo[0]*100 + inputServo[1]*10 + inputServo[2]);//Converting to INT Servo
 8000ce6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	fb03 f202 	mul.w	r2, r3, r2
 8000cf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d00:	785b      	ldrb	r3, [r3, #1]
 8000d02:	4619      	mov	r1, r3
 8000d04:	460b      	mov	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d12:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000d16:	7892      	ldrb	r2, [r2, #2]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	  if(inputIntESC < 101 && inputIntESC >= 0){//Limiting input ESC
 8000d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000d22:	2b64      	cmp	r3, #100	; 0x64
 8000d24:	dc07      	bgt.n	8000d36 <main+0x38e>
 8000d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db03      	blt.n	8000d36 <main+0x38e>
		  escValues.percentage = inputIntESC;
 8000d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  }
	  if(inputIntServo < 101 && inputIntServo >= 0){//Limiting input Servo
 8000d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d3a:	2b64      	cmp	r3, #100	; 0x64
 8000d3c:	dc0a      	bgt.n	8000d54 <main+0x3ac>
 8000d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db06      	blt.n	8000d54 <main+0x3ac>
		  servoValues.percentage = inputIntServo;
 8000d46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d52:	65da      	str	r2, [r3, #92]	; 0x5c
	  }


	  //Setting PWM value
	  //setPwm(htim2, minPulseWidth, maxPulseWidth, pwmPeriod, resolution, percentage);
	  setPwmS(&escValues);
 8000d54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd31 	bl	80007c0 <setPwmS>
	  HAL_Delay(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f000 fcea 	bl	8001738 <HAL_Delay>
	  setPwmS(&servoValues);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd29 	bl	80007c0 <setPwmS>

	  //@note: Printing percentage, pulse width, set min and set max
	  printf("ESC   - P: %3d PW: %.5f (min: %.5f max: %.5f)\r\n",escValues.percentage,escValues.pulseWidth,escValues.minPulseWidth/1e6,escValues.maxPulseWidth/1e6);
 8000d6e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000d72:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8000d76:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000d7a:	ee07 0a90 	vmov	s15, r0
 8000d7e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000d82:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000e08 <main+0x460>
 8000d86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d8a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8000d8e:	ee06 0a90 	vmov	s13, r0
 8000d92:	eeb8 5b66 	vcvt.f64.u32	d5, s13
 8000d96:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 8000e08 <main+0x460>
 8000d9a:	ee85 6b04 	vdiv.f64	d6, d5, d4
 8000d9e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000da2:	ed8d 7b00 	vstr	d7, [sp]
 8000da6:	481a      	ldr	r0, [pc, #104]	; (8000e10 <main+0x468>)
 8000da8:	f006 fa40 	bl	800722c <iprintf>
	  printf("Servo - P: %3d PW: %.5f (min: %.5f max: %.5f)\r\n",servoValues.percentage,servoValues.pulseWidth,servoValues.minPulseWidth/1e6,servoValues.maxPulseWidth/1e6);
 8000dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000db0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000db4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8000db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dbe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000dc2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000dc6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000dca:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000dcc:	ee07 1a90 	vmov	s15, r1
 8000dd0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000dd4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000e08 <main+0x460>
 8000dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ddc:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000de0:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000de4:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8000de6:	ee06 1a90 	vmov	s13, r1
 8000dea:	eeb8 5b66 	vcvt.f64.u32	d5, s13
 8000dee:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8000e08 <main+0x460>
 8000df2:	ee85 6b04 	vdiv.f64	d6, d5, d4
 8000df6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000dfa:	ed8d 7b00 	vstr	d7, [sp]
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <main+0x46c>)
 8000e02:	f006 fa13 	bl	800722c <iprintf>
	  printf("PWM: ");
 8000e06:	e6c6      	b.n	8000b96 <main+0x1ee>
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	412e8480 	.word	0x412e8480
 8000e10:	080093e8 	.word	0x080093e8
 8000e14:	08009418 	.word	0x08009418

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09c      	sub	sp, #112	; 0x70
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	224c      	movs	r2, #76	; 0x4c
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 fdb4 	bl	8006994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2220      	movs	r2, #32
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 fdae 	bl	8006994 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f000 ff89 	bl	8001d50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <SystemClock_Config+0xec>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <SystemClock_Config+0xec>)
 8000e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <SystemClock_Config+0xec>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <SystemClock_Config+0xf0>)
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <SystemClock_Config+0xf0>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <SystemClock_Config+0xf0>)
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e70:	bf00      	nop
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <SystemClock_Config+0xec>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7e:	d1f8      	bne.n	8000e72 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000e96:	23f0      	movs	r3, #240	; 0xf0
 8000e98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 ffa4 	bl	8001e04 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ec2:	f000 f823 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	233f      	movs	r3, #63	; 0x3f
 8000ec8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ed6:	2340      	movs	r3, #64	; 0x40
 8000ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eda:	2340      	movs	r3, #64	; 0x40
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ee4:	2340      	movs	r3, #64	; 0x40
 8000ee6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2104      	movs	r1, #4
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fbb7 	bl	8002660 <HAL_RCC_ClockConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ef8:	f000 f808 	bl	8000f0c <Error_Handler>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3770      	adds	r7, #112	; 0x70
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024800 	.word	0x58024800
 8000f08:	58000400 	.word	0x58000400

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f004 fb71 	bl	8005610 <HAL_UART_Transmit>
  return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24000298 	.word	0x24000298

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x30>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x30>)
 8000f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	58024400 	.word	0x58024400

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 fb9c 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_kill>:

int _kill(int pid, int sig)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fde:	f005 fca1 	bl	8006924 <__errno>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2216      	movs	r2, #22
 8000fe6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_exit>:

void _exit (int status)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffe7 	bl	8000fd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001006:	e7fe      	b.n	8001006 <_exit+0x12>

08001008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e00a      	b.n	8001030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101a:	f3af 8000 	nop.w
 800101e:	4601      	mov	r1, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf0      	blt.n	800101a <_read+0x12>
	}

return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5b 	bl	8000f18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x12>
	}
	return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f005 fc06 	bl	8006924 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	24080000 	.word	0x24080000
 8001144:	00000400 	.word	0x00000400
 8001148:	240001fc 	.word	0x240001fc
 800114c:	24000340 	.word	0x24000340

08001150 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_TIM2_Init+0xe8>)
 8001184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001188:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_TIM2_Init+0xe8>)
 800118c:	2248      	movs	r2, #72	; 0x48
 800118e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_TIM2_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_TIM2_Init+0xe8>)
 8001198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_TIM2_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_TIM2_Init+0xe8>)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <MX_TIM2_Init+0xe8>)
 80011ac:	f003 f94c 	bl	8004448 <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011b6:	f7ff fea9 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c4:	4619      	mov	r1, r3
 80011c6:	481c      	ldr	r0, [pc, #112]	; (8001238 <MX_TIM2_Init+0xe8>)
 80011c8:	f003 fc18 	bl	80049fc <HAL_TIM_ConfigClockSource>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011d2:	f7ff fe9b 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <MX_TIM2_Init+0xe8>)
 80011d8:	f003 f98d 	bl	80044f6 <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011e2:	f7ff fe93 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4810      	ldr	r0, [pc, #64]	; (8001238 <MX_TIM2_Init+0xe8>)
 80011f6:	f004 f92d 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001200:	f7ff fe84 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001204:	2360      	movs	r3, #96	; 0x60
 8001206:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <MX_TIM2_Init+0xe8>)
 800121c:	f003 fada 	bl	80047d4 <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001226:	f7ff fe71 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <MX_TIM2_Init+0xe8>)
 800122c:	f000 f8b6 	bl	800139c <HAL_TIM_MspPostInit>

}
 8001230:	bf00      	nop
 8001232:	3738      	adds	r7, #56	; 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	24000200 	.word	0x24000200

0800123c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <MX_TIM3_Init+0xec>)
 8001272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001276:	2248      	movs	r2, #72	; 0x48
 8001278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_TIM3_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_TIM3_Init+0xe8>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001294:	4823      	ldr	r0, [pc, #140]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001296:	f003 f8d7 	bl	8004448 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012a0:	f7ff fe34 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	4619      	mov	r1, r3
 80012b0:	481c      	ldr	r0, [pc, #112]	; (8001324 <MX_TIM3_Init+0xe8>)
 80012b2:	f003 fba3 	bl	80049fc <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012bc:	f7ff fe26 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <MX_TIM3_Init+0xe8>)
 80012c2:	f003 f918 	bl	80044f6 <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012cc:	f7ff fe1e 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4811      	ldr	r0, [pc, #68]	; (8001324 <MX_TIM3_Init+0xe8>)
 80012e0:	f004 f8b8 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012ea:	f7ff fe0f 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	; 0x60
 80012f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001306:	f003 fa65 	bl	80047d4 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001310:	f7ff fdfc 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM3_Init+0xe8>)
 8001316:	f000 f841 	bl	800139c <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400024c 	.word	0x2400024c
 8001328:	40000400 	.word	0x40000400

0800132c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d10f      	bne.n	800135e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800135c:	e013      	b.n	8001386 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_TIM_Base_MspInit+0x6c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d10e      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 800136a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 800137a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	58024400 	.word	0x58024400
 8001398:	40000400 	.word	0x40000400

0800139c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013bc:	d120      	bne.n	8001400 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_TIM_MspPostInit+0xb4>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_TIM_MspPostInit+0xb4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_TIM_MspPostInit+0xb4>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ee:	2301      	movs	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4816      	ldr	r0, [pc, #88]	; (8001454 <HAL_TIM_MspPostInit+0xb8>)
 80013fa:	f000 fab1 	bl	8001960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013fe:	e023      	b.n	8001448 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11e      	bne.n	8001448 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_TIM_MspPostInit+0xb4>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_TIM_MspPostInit+0xb4>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_TIM_MspPostInit+0xb4>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001438:	2302      	movs	r3, #2
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <HAL_TIM_MspPostInit+0xb8>)
 8001444:	f000 fa8c 	bl	8001960 <HAL_GPIO_Init>
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58024400 	.word	0x58024400
 8001454:	58020000 	.word	0x58020000
 8001458:	40000400 	.word	0x40000400

0800145c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001462:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <MX_USART3_UART_Init+0x94>)
 8001464:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014a6:	f004 f863 	bl	8005570 <HAL_UART_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014b0:	f7ff fd2c 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014b8:	f005 f96a 	bl	8006790 <HAL_UARTEx_SetTxFifoThreshold>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014c2:	f7ff fd23 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c6:	2100      	movs	r1, #0
 80014c8:	4808      	ldr	r0, [pc, #32]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014ca:	f005 f99f 	bl	800680c <HAL_UARTEx_SetRxFifoThreshold>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014d4:	f7ff fd1a 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014da:	f005 f920 	bl	800671e <HAL_UARTEx_DisableFifoMode>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014e4:	f7ff fd12 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24000298 	.word	0x24000298
 80014f0:	40004800 	.word	0x40004800

080014f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0b8      	sub	sp, #224	; 0xe0
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	22bc      	movs	r2, #188	; 0xbc
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fa3d 	bl	8006994 <memset>
  if(uartHandle->Instance==USART3)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_UART_MspInit+0xc0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d142      	bne.n	80015aa <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fc20 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153e:	f7ff fce5 	bl	8000f0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_UART_MspInit+0xc4>)
 8001544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_UART_MspInit+0xc4>)
 800154a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_UART_MspInit+0xc4>)
 8001554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0xc4>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_UART_MspInit+0xc4>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0xc4>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001582:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001598:	2307      	movs	r3, #7
 800159a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0xc8>)
 80015a6:	f000 f9db 	bl	8001960 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	37e0      	adds	r7, #224	; 0xe0
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004800 	.word	0x40004800
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020c00 	.word	0x58020c00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c4:	f7ff f866 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f005 f99f 	bl	8006930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff f9d9 	bl	80009a8 <main>
  bx  lr
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001600:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001604:	0800986c 	.word	0x0800986c
  ldr r2, =_sbss
 8001608:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 800160c:	2400033c 	.word	0x2400033c

08001610 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC3_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161a:	2003      	movs	r0, #3
 800161c:	f000 f96e 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001620:	f001 f9d4 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_Init+0x68>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	4913      	ldr	r1, [pc, #76]	; (8001680 <HAL_Init+0x6c>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_Init+0x68>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_Init+0x6c>)
 8001648:	5cd3      	ldrb	r3, [r2, r3]
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x70>)
 8001656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_Init+0x74>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165e:	200f      	movs	r0, #15
 8001660:	f000 f814 	bl	800168c <HAL_InitTick>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e002      	b.n	8001674 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800166e:	f7ff fc65 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	58024400 	.word	0x58024400
 8001680:	08009448 	.word	0x08009448
 8001684:	24000004 	.word	0x24000004
 8001688:	24000000 	.word	0x24000000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_InitTick+0x60>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e021      	b.n	80016e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_InitTick+0x64>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_InitTick+0x60>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f945 	bl	8001946 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f91d 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x68>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2400000c 	.word	0x2400000c
 80016f0:	24000000 	.word	0x24000000
 80016f4:	24000008 	.word	0x24000008

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2400000c 	.word	0x2400000c
 800171c:	24000328 	.word	0x24000328

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	24000328 	.word	0x24000328

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2400000c 	.word	0x2400000c

08001780 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetREVID+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0c1b      	lsrs	r3, r3, #16
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	5c001000 	.word	0x5c001000

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	05fa0000 	.word	0x05fa0000

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff47 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb2 	bl	80018b8 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_GPIO_Init+0x234>)
 8001970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001972:	e194      	b.n	8001c9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8186 	beq.w	8001c98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d005      	beq.n	80019a4 <HAL_GPIO_Init+0x44>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d130      	bne.n	8001a06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019da:	2201      	movs	r2, #1
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 0201 	and.w	r2, r3, #1
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d017      	beq.n	8001a42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d123      	bne.n	8001a96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0203 	and.w	r2, r3, #3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80e0 	beq.w	8001c98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_GPIO_Init+0x238>)
 8001ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ade:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <HAL_GPIO_Init+0x238>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_GPIO_Init+0x238>)
 8001aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_GPIO_Init+0x23c>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_GPIO_Init+0x240>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d052      	beq.n	8001bc8 <HAL_GPIO_Init+0x268>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_GPIO_Init+0x244>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d031      	beq.n	8001b8e <HAL_GPIO_Init+0x22e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_GPIO_Init+0x248>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x22a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_GPIO_Init+0x24c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x226>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_GPIO_Init+0x250>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x222>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <HAL_GPIO_Init+0x254>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x21e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <HAL_GPIO_Init+0x258>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x21a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x25c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x216>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x260>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x212>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_GPIO_Init+0x264>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x20e>
 8001b6a:	2309      	movs	r3, #9
 8001b6c:	e02d      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e02b      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e029      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e027      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e025      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e023      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e021      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e01f      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e01d      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e01b      	b.n	8001bca <HAL_GPIO_Init+0x26a>
 8001b92:	bf00      	nop
 8001b94:	58000080 	.word	0x58000080
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58000400 	.word	0x58000400
 8001ba0:	58020000 	.word	0x58020000
 8001ba4:	58020400 	.word	0x58020400
 8001ba8:	58020800 	.word	0x58020800
 8001bac:	58020c00 	.word	0x58020c00
 8001bb0:	58021000 	.word	0x58021000
 8001bb4:	58021400 	.word	0x58021400
 8001bb8:	58021800 	.word	0x58021800
 8001bbc:	58021c00 	.word	0x58021c00
 8001bc0:	58022000 	.word	0x58022000
 8001bc4:	58022400 	.word	0x58022400
 8001bc8:	2300      	movs	r3, #0
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	f002 0203 	and.w	r2, r2, #3
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bda:	4938      	ldr	r1, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x35c>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f ae63 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	58000400 	.word	0x58000400

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_HSEM_FastTake+0x2c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3320      	adds	r3, #32
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_HSEM_FastTake+0x30>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	58026400 	.word	0x58026400
 8001d24:	80000300 	.word	0x80000300

08001d28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001d32:	4906      	ldr	r1, [pc, #24]	; (8001d4c <HAL_HSEM_Release+0x24>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	58026400 	.word	0x58026400

08001d50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d00a      	beq.n	8001d7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e040      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e03e      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d82:	491f      	ldr	r1, [pc, #124]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d8a:	f7ff fcc9 	bl	8001720 <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d90:	e009      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d92:	f7ff fcc5 	bl	8001720 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da0:	d901      	bls.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e028      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d1ee      	bne.n	8001d92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b1e      	cmp	r3, #30
 8001db8:	d008      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8001dbe:	d005      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b1d      	cmp	r3, #29
 8001dc4:	d002      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b2d      	cmp	r3, #45	; 0x2d
 8001dca:	d114      	bne.n	8001df6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001dcc:	f7ff fca8 	bl	8001720 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dd2:	e009      	b.n	8001de8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dd4:	f7ff fca4 	bl	8001720 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de2:	d901      	bls.n	8001de8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	58024800 	.word	0x58024800

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f000 bc1d 	b.w	8002652 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8087 	beq.w	8001f34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b99      	ldr	r3, [pc, #612]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e30:	4b96      	ldr	r3, [pc, #600]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d007      	beq.n	8001e4c <HAL_RCC_OscConfig+0x48>
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	2b18      	cmp	r3, #24
 8001e40:	d110      	bne.n	8001e64 <HAL_RCC_OscConfig+0x60>
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x12e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d168      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e3f6      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x78>
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a86      	ldr	r2, [pc, #536]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e02e      	b.n	8001eda <HAL_RCC_OscConfig+0xd6>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x9a>
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a80      	ldr	r2, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b7e      	ldr	r3, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7d      	ldr	r2, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e01d      	b.n	8001eda <HAL_RCC_OscConfig+0xd6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xbe>
 8001ea8:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a77      	ldr	r2, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a74      	ldr	r2, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0xd6>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fc1d 	bl	8001720 <HAL_GetTick>
 8001ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7ff fc19 	bl	8001720 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e3aa      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0xe6>
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fc09 	bl	8001720 <HAL_GetTick>
 8001f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f12:	f7ff fc05 	bl	8001720 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e396      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x10e>
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80cb 	beq.w	80020d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_RCC_OscConfig+0x164>
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b18      	cmp	r3, #24
 8001f5c:	d156      	bne.n	800200c <HAL_RCC_OscConfig+0x208>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d151      	bne.n	800200c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_OscConfig+0x17c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e368      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 0219 	bic.w	r2, r3, #25
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	493f      	ldr	r1, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f92:	f7ff fbc5 	bl	8001720 <HAL_GetTick>
 8001f96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fbc1 	bl	8001720 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e352      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	f7ff fbe2 	bl	8001780 <HAL_GetREVID>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d817      	bhi.n	8001ff6 <HAL_RCC_OscConfig+0x1f2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1dc>
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fde:	e07b      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	031b      	lsls	r3, r3, #12
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff4:	e070      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	061b      	lsls	r3, r3, #24
 8002004:	4921      	ldr	r1, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800200a:	e065      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d048      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 0219 	bic.w	r2, r3, #25
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	491a      	ldr	r1, [pc, #104]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fb7b 	bl	8001720 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff fb77 	bl	8001720 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e308      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	f7ff fb98 	bl	8001780 <HAL_GetREVID>
 8002050:	4603      	mov	r3, r0
 8002052:	f241 0203 	movw	r2, #4099	; 0x1003
 8002056:	4293      	cmp	r3, r2
 8002058:	d81a      	bhi.n	8002090 <HAL_RCC_OscConfig+0x28c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b40      	cmp	r3, #64	; 0x40
 8002060:	d108      	bne.n	8002074 <HAL_RCC_OscConfig+0x270>
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x288>)
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	6053      	str	r3, [r2, #4]
 8002072:	e031      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	031b      	lsls	r3, r3, #12
 8002082:	4902      	ldr	r1, [pc, #8]	; (800208c <HAL_RCC_OscConfig+0x288>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
 800208a:	bf00      	nop
 800208c:	58024400 	.word	0x58024400
 8002090:	4b9a      	ldr	r3, [pc, #616]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	4997      	ldr	r1, [pc, #604]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e018      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b95      	ldr	r3, [pc, #596]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fb35 	bl	8001720 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fb31 	bl	8001720 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e2c2      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020cc:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a9 	beq.w	8002238 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	4b85      	ldr	r3, [pc, #532]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d007      	beq.n	800210c <HAL_RCC_OscConfig+0x308>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b18      	cmp	r3, #24
 8002100:	d13a      	bne.n	8002178 <HAL_RCC_OscConfig+0x374>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d135      	bne.n	8002178 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800210c:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e296      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002124:	f7ff fb2c 	bl	8001780 <HAL_GetREVID>
 8002128:	4603      	mov	r3, r0
 800212a:	f241 0203 	movw	r2, #4099	; 0x1003
 800212e:	4293      	cmp	r3, r2
 8002130:	d817      	bhi.n	8002162 <HAL_RCC_OscConfig+0x35e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d108      	bne.n	800214c <HAL_RCC_OscConfig+0x348>
 800213a:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002148:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214a:	e075      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	4968      	ldr	r1, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002160:	e06a      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002162:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	4962      	ldr	r1, [pc, #392]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002176:	e05f      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d042      	beq.n	8002206 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fac8 	bl	8001720 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002194:	f7ff fac4 	bl	8001720 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e255      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a6:	4b55      	ldr	r3, [pc, #340]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021b2:	f7ff fae5 	bl	8001780 <HAL_GetREVID>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80021bc:	4293      	cmp	r3, r2
 80021be:	d817      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x3ec>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d108      	bne.n	80021da <HAL_RCC_OscConfig+0x3d6>
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80021d0:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021d6:	6053      	str	r3, [r2, #4]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	4944      	ldr	r1, [pc, #272]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
 80021ee:	e023      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	493f      	ldr	r1, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e018      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3c      	ldr	r2, [pc, #240]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800220c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff fa85 	bl	8001720 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800221a:	f7ff fa81 	bl	8001720 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e212      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fa62 	bl	8001720 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa5e 	bl	8001720 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1ef      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x45c>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7ff fa48 	bl	8001720 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fa44 	bl	8001720 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1d5      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d039      	beq.n	8002332 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022d2:	f7ff fa25 	bl	8001720 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022da:	f7ff fa21 	bl	8001720 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1b2      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x4d6>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002300:	4b9b      	ldr	r3, [pc, #620]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9a      	ldr	r2, [pc, #616]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800230a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230c:	f7ff fa08 	bl	8001720 <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002314:	f7ff fa04 	bl	8001720 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e195      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002326:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8081 	beq.w	8002442 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x770>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8b      	ldr	r2, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x770>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800234c:	f7ff f9e8 	bl	8001720 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7ff f9e4 	bl	8001720 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e175      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	4b83      	ldr	r3, [pc, #524]	; (8002574 <HAL_RCC_OscConfig+0x770>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x584>
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	e02d      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x5a6>
 8002390:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	4b74      	ldr	r3, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a73      	ldr	r2, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c8>
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a6b      	ldr	r2, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a64      	ldr	r2, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f998 	bl	8001720 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7ff f994 	bl	8001720 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e123      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <HAL_RCC_OscConfig+0x5f0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff f982 	bl	8001720 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7ff f97e 	bl	8001720 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e10d      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002436:	4b4e      	ldr	r3, [pc, #312]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ee      	bne.n	8002420 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8102 	beq.w	8002650 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800244c:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002454:	2b18      	cmp	r3, #24
 8002456:	f000 80bd 	beq.w	80025d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 809e 	bne.w	80025a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a41      	ldr	r2, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f956 	bl	8001720 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f952 	bl	8001720 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0e3      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x774>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	4931      	ldr	r1, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	628b      	str	r3, [r1, #40]	; 0x28
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	3b01      	subs	r3, #1
 80024b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	3b01      	subs	r3, #1
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	3b01      	subs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	3b01      	subs	r3, #1
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80024e0:	4923      	ldr	r1, [pc, #140]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x778>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024fe:	00d2      	lsls	r2, r2, #3
 8002500:	491b      	ldr	r1, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f023 020c 	bic.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4917      	ldr	r1, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f023 0202 	bic.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f8db 	bl	8001720 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800256c:	e011      	b.n	8002592 <HAL_RCC_OscConfig+0x78e>
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	58024800 	.word	0x58024800
 8002578:	fffffc0c 	.word	0xfffffc0c
 800257c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f8ce 	bl	8001720 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e05f      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002592:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x858>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x77c>
 800259e:	e057      	b.n	8002650 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f8b8 	bl	8001720 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff f8b4 	bl	8001720 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e045      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x7b0>
 80025d2:	e03d      	b.n	8002650 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_OscConfig+0x858>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d031      	beq.n	800264c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d12a      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d122      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0a5b      	lsrs	r3, r3, #9
 800261a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d111      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3730      	adds	r7, #48	; 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	58024400 	.word	0x58024400

08002660 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e19c      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b8a      	ldr	r3, [pc, #552]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b87      	ldr	r3, [pc, #540]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 020f 	bic.w	r2, r3, #15
 800268a:	4985      	ldr	r1, [pc, #532]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b83      	ldr	r3, [pc, #524]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e184      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026bc:	429a      	cmp	r2, r3
 80026be:	d908      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026c0:	4b78      	ldr	r3, [pc, #480]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4975      	ldr	r1, [pc, #468]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d908      	bls.n	8002700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ee:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	496a      	ldr	r1, [pc, #424]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002718:	429a      	cmp	r2, r3
 800271a:	d908      	bls.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800271c:	4b61      	ldr	r3, [pc, #388]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	495e      	ldr	r1, [pc, #376]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800272a:	4313      	orrs	r3, r2
 800272c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002746:	429a      	cmp	r2, r3
 8002748:	d908      	bls.n	800275c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800274a:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4953      	ldr	r1, [pc, #332]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002758:	4313      	orrs	r3, r2
 800275a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	429a      	cmp	r2, r3
 8002776:	d908      	bls.n	800278a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f023 020f 	bic.w	r2, r3, #15
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4947      	ldr	r1, [pc, #284]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002786:	4313      	orrs	r3, r2
 8002788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d055      	beq.n	8002842 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4940      	ldr	r1, [pc, #256]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b0:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d121      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0f6      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d115      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0ea      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0de      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f0:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0d6      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f023 0207 	bic.w	r2, r3, #7
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4925      	ldr	r1, [pc, #148]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800280e:	4313      	orrs	r3, r2
 8002810:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe ff85 	bl	8001720 <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002818:	e00a      	b.n	8002830 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281a:	f7fe ff81 	bl	8001720 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0be      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	429a      	cmp	r2, r3
 8002840:	d1eb      	bne.n	800281a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	429a      	cmp	r2, r3
 800285c:	d208      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f023 020f 	bic.w	r2, r3, #15
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	490e      	ldr	r1, [pc, #56]	; (80028a4 <HAL_RCC_ClockConfig+0x244>)
 800286c:	4313      	orrs	r3, r2
 800286e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d214      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 020f 	bic.w	r2, r3, #15
 8002886:	4906      	ldr	r1, [pc, #24]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_RCC_ClockConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e086      	b.n	80029ae <HAL_RCC_ClockConfig+0x34e>
 80028a0:	52002000 	.word	0x52002000
 80028a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d208      	bcs.n	80028d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028c4:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	4939      	ldr	r1, [pc, #228]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d010      	beq.n	8002904 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d208      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	492e      	ldr	r1, [pc, #184]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002900:	4313      	orrs	r3, r2
 8002902:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800291c:	429a      	cmp	r2, r3
 800291e:	d208      	bcs.n	8002932 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 800292e:	4313      	orrs	r3, r2
 8002930:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800294a:	429a      	cmp	r2, r3
 800294c:	d208      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4917      	ldr	r1, [pc, #92]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 800295c:	4313      	orrs	r3, r2
 800295e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002960:	f000 f834 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4912      	ldr	r1, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x35c>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x358>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_RCC_ClockConfig+0x35c>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x360>)
 8002996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x364>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x368>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fe72 	bl	800168c <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	58024400 	.word	0x58024400
 80029bc:	08009448 	.word	0x08009448
 80029c0:	24000004 	.word	0x24000004
 80029c4:	24000000 	.word	0x24000000
 80029c8:	24000008 	.word	0x24000008

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d2:	4bb3      	ldr	r3, [pc, #716]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029da:	2b18      	cmp	r3, #24
 80029dc:	f200 8155 	bhi.w	8002c8a <HAL_RCC_GetSysClockFreq+0x2be>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a4d 	.word	0x08002a4d
 80029ec:	08002c8b 	.word	0x08002c8b
 80029f0:	08002c8b 	.word	0x08002c8b
 80029f4:	08002c8b 	.word	0x08002c8b
 80029f8:	08002c8b 	.word	0x08002c8b
 80029fc:	08002c8b 	.word	0x08002c8b
 8002a00:	08002c8b 	.word	0x08002c8b
 8002a04:	08002c8b 	.word	0x08002c8b
 8002a08:	08002a73 	.word	0x08002a73
 8002a0c:	08002c8b 	.word	0x08002c8b
 8002a10:	08002c8b 	.word	0x08002c8b
 8002a14:	08002c8b 	.word	0x08002c8b
 8002a18:	08002c8b 	.word	0x08002c8b
 8002a1c:	08002c8b 	.word	0x08002c8b
 8002a20:	08002c8b 	.word	0x08002c8b
 8002a24:	08002c8b 	.word	0x08002c8b
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002c8b 	.word	0x08002c8b
 8002a30:	08002c8b 	.word	0x08002c8b
 8002a34:	08002c8b 	.word	0x08002c8b
 8002a38:	08002c8b 	.word	0x08002c8b
 8002a3c:	08002c8b 	.word	0x08002c8b
 8002a40:	08002c8b 	.word	0x08002c8b
 8002a44:	08002c8b 	.word	0x08002c8b
 8002a48:	08002a7f 	.word	0x08002a7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a58:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	4a90      	ldr	r2, [pc, #576]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
 8002a68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a6a:	e111      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a6c:	4b8d      	ldr	r3, [pc, #564]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a6e:	61bb      	str	r3, [r7, #24]
    break;
 8002a70:	e10e      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a72:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a74:	61bb      	str	r3, [r7, #24]
    break;
 8002a76:	e10b      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a78:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a7a:	61bb      	str	r3, [r7, #24]
    break;
 8002a7c:	e108      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a88:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a94:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a9e:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	08db      	lsrs	r3, r3, #3
 8002aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80e1 	beq.w	8002c84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f000 8083 	beq.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x204>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f200 80a1 	bhi.w	8002c14 <HAL_RCC_GetSysClockFreq+0x248>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d056      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ade:	e099      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae0:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02d      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aec:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b16:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b46:	e087      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002cb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5a:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b8a:	e065      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9e:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bce:	e043      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002cbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bf6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c12:	e021      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c62:	3301      	adds	r3, #1
 8002c64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c7c:	ee17 3a90 	vmov	r3, s15
 8002c80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    break;
 8002c88:	e002      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c8c:	61bb      	str	r3, [r7, #24]
    break;
 8002c8e:	bf00      	nop
  }

  return sysclockfreq;
 8002c90:	69bb      	ldr	r3, [r7, #24]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	03d09000 	.word	0x03d09000
 8002ca8:	003d0900 	.word	0x003d0900
 8002cac:	007a1200 	.word	0x007a1200
 8002cb0:	46000000 	.word	0x46000000
 8002cb4:	4c742400 	.word	0x4c742400
 8002cb8:	4a742400 	.word	0x4a742400
 8002cbc:	4af42400 	.word	0x4af42400

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cc6:	f7ff fe81 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490f      	ldr	r1, [pc, #60]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	58024400 	.word	0x58024400
 8002d14:	08009448 	.word	0x08009448
 8002d18:	24000004 	.word	0x24000004
 8002d1c:	24000000 	.word	0x24000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d24:	f7ff ffcc 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4904      	ldr	r1, [pc, #16]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	58024400 	.word	0x58024400
 8002d48:	08009448 	.word	0x08009448

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d50:	f7ff ffb6 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	58024400 	.word	0x58024400
 8002d74:	08009448 	.word	0x08009448

08002d78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d80:	2300      	movs	r3, #0
 8002d82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d03f      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d9c:	d02a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002da2:	d824      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da8:	d018      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dae:	d81e      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db8:	d007      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dba:	e018      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dbc:	4ba3      	ldr	r3, [pc, #652]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	4aa2      	ldr	r2, [pc, #648]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002dc8:	e015      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 f9d5 	bl	8004180 <RCCEx_PLL2_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002dda:	e00c      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3324      	adds	r3, #36	; 0x24
 8002de0:	2102      	movs	r1, #2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 fa7e 	bl	80042e4 <RCCEx_PLL3_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
      break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e08:	4990      	ldr	r1, [pc, #576]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e0e:	e001      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d03d      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d826      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e53 	.word	0x08002e53
 8002e38:	08002e65 	.word	0x08002e65
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e7d 	.word	0x08002e7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e44:	4b81      	ldr	r3, [pc, #516]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4a80      	ldr	r2, [pc, #512]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e50:	e015      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f991 	bl	8004180 <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e62:	e00c      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fa3a 	bl	80042e4 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e84:	4b71      	ldr	r3, [pc, #452]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	f023 0207 	bic.w	r2, r3, #7
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	496e      	ldr	r1, [pc, #440]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	650b      	str	r3, [r1, #80]	; 0x50
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d042      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d02b      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d825      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8002eba:	d028      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ebc:	2bc0      	cmp	r3, #192	; 0xc0
 8002ebe:	d821      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d016      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d81d      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d007      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002ed0:	e018      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed2:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ede:	e017      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f94a 	bl	8004180 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f9f3 	bl	80042e4 <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002f02:	e005      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f16:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	494a      	ldr	r1, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	650b      	str	r3, [r1, #80]	; 0x50
 8002f28:	e001      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d049      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f44:	d030      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002f46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f4a:	d82a      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f50:	d02c      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002f52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f56:	d824      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d018      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4a35      	ldr	r2, [pc, #212]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f7c:	e017      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f8fb 	bl	8004180 <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f8e:	e00e      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3324      	adds	r3, #36	; 0x24
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f9a4 	bl	80042e4 <RCCEx_PLL3_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fa0:	e005      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fc2:	4922      	ldr	r1, [pc, #136]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	658b      	str	r3, [r1, #88]	; 0x58
 8002fc8:	e001      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04b      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe4:	d030      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fea:	d82a      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002fec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002ff2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff6:	d824      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ffc:	d018      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003002:	d81e      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300c:	d007      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800300e:	e018      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800301c:	e019      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f8ab 	bl	8004180 <RCCEx_PLL2_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800302e:	e010      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3324      	adds	r3, #36	; 0x24
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f001 f954 	bl	80042e4 <RCCEx_PLL3_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003040:	e007      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
      break;
 8003046:	e004      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800304c:	58024400 	.word	0x58024400
      break;
 8003050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003058:	4b99      	ldr	r3, [pc, #612]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003066:	4996      	ldr	r1, [pc, #600]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003068:	4313      	orrs	r3, r2
 800306a:	658b      	str	r3, [r1, #88]	; 0x58
 800306c:	e001      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d032      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003082:	2b30      	cmp	r3, #48	; 0x30
 8003084:	d01c      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d817      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 800308a:	2b20      	cmp	r3, #32
 800308c:	d00c      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800308e:	2b20      	cmp	r3, #32
 8003090:	d813      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003096:	2b10      	cmp	r3, #16
 8003098:	d10f      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	4a88      	ldr	r2, [pc, #544]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80030a6:	e00e      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f866 	bl	8004180 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80030b8:	e005      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80030c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030cc:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	4979      	ldr	r1, [pc, #484]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d047      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f8:	d030      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fe:	d82a      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003104:	d02c      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003106:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800310a:	d824      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003110:	d018      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	d81e      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d007      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003122:	e018      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003124:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800312a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003130:	e017      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f821 	bl	8004180 <RCCEx_PLL2_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003142:	e00e      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3324      	adds	r3, #36	; 0x24
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f001 f8ca 	bl	80042e4 <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003154:	e005      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003168:	4b55      	ldr	r3, [pc, #340]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	4952      	ldr	r1, [pc, #328]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003176:	4313      	orrs	r3, r2
 8003178:	650b      	str	r3, [r1, #80]	; 0x50
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d049      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003194:	d02e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319a:	d828      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 800319c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a0:	d02a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80031a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a6:	d822      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031ac:	d026      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80031ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031b2:	d81c      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b8:	d010      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80031ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031be:	d816      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01d      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d111      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 ffd5 	bl	8004180 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031da:	e012      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 f87e 	bl	80042e4 <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031ec:	e009      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
      break;
 80031f2:	e006      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80031f4:	bf00      	nop
 80031f6:	e004      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80031f8:	bf00      	nop
 80031fa:	e002      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	492a      	ldr	r1, [pc, #168]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003216:	4313      	orrs	r3, r2
 8003218:	650b      	str	r3, [r1, #80]	; 0x50
 800321a:	e001      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003236:	d02e      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323c:	d828      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d02a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d822      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800324a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800324e:	d026      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003250:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003254:	d81c      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325a:	d010      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800325c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003260:	d816      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01d      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326a:	d111      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff84 	bl	8004180 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800327c:	e012      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3324      	adds	r3, #36	; 0x24
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f82d 	bl	80042e4 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800328e:	e009      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80032a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032b8:	4901      	ldr	r1, [pc, #4]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	658b      	str	r3, [r1, #88]	; 0x58
 80032be:	e003      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80032c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02f      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d00e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80032de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e2:	d814      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80032e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ec:	d10f      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ee:	4baf      	ldr	r3, [pc, #700]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	4aae      	ldr	r2, [pc, #696]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80032fa:	e00c      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f000 ff3c 	bl	8004180 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
      break;
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800331c:	4ba3      	ldr	r3, [pc, #652]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800331e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003320:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003328:	49a0      	ldr	r1, [pc, #640]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800332a:	4313      	orrs	r3, r2
 800332c:	650b      	str	r3, [r1, #80]	; 0x50
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d032      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	2b03      	cmp	r3, #3
 8003346:	d81b      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003387 	.word	0x08003387
 8003354:	08003361 	.word	0x08003361
 8003358:	0800336f 	.word	0x0800336f
 800335c:	08003387 	.word	0x08003387
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	4a91      	ldr	r2, [pc, #580]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800336c:	e00c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f000 ff03 	bl	8004180 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800337e:	e003      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800338e:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4984      	ldr	r1, [pc, #528]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800339c:	4313      	orrs	r3, r2
 800339e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8086 	beq.w	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b4:	4b7e      	ldr	r3, [pc, #504]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7d      	ldr	r2, [pc, #500]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c0:	f7fe f9ae 	bl	8001720 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fe f9aa 	bl	8001720 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d902      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	75fb      	strb	r3, [r7, #23]
        break;
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033dc:	4b74      	ldr	r3, [pc, #464]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ef      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d166      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033f8:	4053      	eors	r3, r2
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800340c:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003424:	4a61      	ldr	r2, [pc, #388]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003434:	d115      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe f973 	bl	8001720 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800343c:	e00b      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe f96f 	bl	8001720 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d902      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	75fb      	strb	r3, [r7, #23]
            break;
 8003454:	e005      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ed      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d126      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003476:	d10d      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003486:	0919      	lsrs	r1, r3, #4
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800348a:	400b      	ands	r3, r1
 800348c:	4947      	ldr	r1, [pc, #284]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003494:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a44      	ldr	r2, [pc, #272]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800349a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800349e:	6113      	str	r3, [r2, #16]
 80034a0:	4b42      	ldr	r3, [pc, #264]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	493f      	ldr	r1, [pc, #252]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	670b      	str	r3, [r1, #112]	; 0x70
 80034b4:	e004      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	75bb      	strb	r3, [r7, #22]
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8085 	beq.w	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d2:	2b28      	cmp	r3, #40	; 0x28
 80034d4:	d866      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	080035b9 	.word	0x080035b9
 80034e0:	080035a5 	.word	0x080035a5
 80034e4:	080035a5 	.word	0x080035a5
 80034e8:	080035a5 	.word	0x080035a5
 80034ec:	080035a5 	.word	0x080035a5
 80034f0:	080035a5 	.word	0x080035a5
 80034f4:	080035a5 	.word	0x080035a5
 80034f8:	080035a5 	.word	0x080035a5
 80034fc:	08003581 	.word	0x08003581
 8003500:	080035a5 	.word	0x080035a5
 8003504:	080035a5 	.word	0x080035a5
 8003508:	080035a5 	.word	0x080035a5
 800350c:	080035a5 	.word	0x080035a5
 8003510:	080035a5 	.word	0x080035a5
 8003514:	080035a5 	.word	0x080035a5
 8003518:	080035a5 	.word	0x080035a5
 800351c:	08003593 	.word	0x08003593
 8003520:	080035a5 	.word	0x080035a5
 8003524:	080035a5 	.word	0x080035a5
 8003528:	080035a5 	.word	0x080035a5
 800352c:	080035a5 	.word	0x080035a5
 8003530:	080035a5 	.word	0x080035a5
 8003534:	080035a5 	.word	0x080035a5
 8003538:	080035a5 	.word	0x080035a5
 800353c:	080035b9 	.word	0x080035b9
 8003540:	080035a5 	.word	0x080035a5
 8003544:	080035a5 	.word	0x080035a5
 8003548:	080035a5 	.word	0x080035a5
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035a5 	.word	0x080035a5
 8003554:	080035a5 	.word	0x080035a5
 8003558:	080035a5 	.word	0x080035a5
 800355c:	080035b9 	.word	0x080035b9
 8003560:	080035a5 	.word	0x080035a5
 8003564:	080035a5 	.word	0x080035a5
 8003568:	080035a5 	.word	0x080035a5
 800356c:	080035a5 	.word	0x080035a5
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035a5 	.word	0x080035a5
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035b9 	.word	0x080035b9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fdfa 	bl	8004180 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003590:	e013      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fea3 	bl	80042e4 <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80035a2:	e00a      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e007      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035aa:	bf00      	nop
 80035ac:	58024400 	.word	0x58024400
 80035b0:	58024800 	.word	0x58024800
 80035b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80035b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035c0:	4b96      	ldr	r3, [pc, #600]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035cc:	4993      	ldr	r1, [pc, #588]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	654b      	str	r3, [r1, #84]	; 0x54
 80035d2:	e001      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d038      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d821      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003637 	.word	0x08003637
 80035f8:	0800360d 	.word	0x0800360d
 80035fc:	0800361f 	.word	0x0800361f
 8003600:	08003637 	.word	0x08003637
 8003604:	08003637 	.word	0x08003637
 8003608:	08003637 	.word	0x08003637
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fdb4 	bl	8004180 <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800361c:	e00c      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3324      	adds	r3, #36	; 0x24
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fe5d 	bl	80042e4 <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800362e:	e003      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
      break;
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800363e:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4974      	ldr	r1, [pc, #464]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	654b      	str	r3, [r1, #84]	; 0x54
 8003650:	e001      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d03a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	2b05      	cmp	r3, #5
 800366a:	d821      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036b7 	.word	0x080036b7
 8003678:	0800368d 	.word	0x0800368d
 800367c:	0800369f 	.word	0x0800369f
 8003680:	080036b7 	.word	0x080036b7
 8003684:	080036b7 	.word	0x080036b7
 8003688:	080036b7 	.word	0x080036b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fd74 	bl	8004180 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800369c:	e00c      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3324      	adds	r3, #36	; 0x24
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fe1d 	bl	80042e4 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036be:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	4953      	ldr	r1, [pc, #332]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	658b      	str	r3, [r1, #88]	; 0x58
 80036d2:	e001      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ee:	d02e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d828      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d02a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d822      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003706:	d026      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800370c:	d81c      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800370e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003712:	d010      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d816      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01d      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d111      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fd28 	bl	8004180 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003734:	e012      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3324      	adds	r3, #36	; 0x24
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fdd1 	bl	80042e4 <RCCEx_PLL3_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003746:	e009      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
      break;
 800374c:	e006      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800375a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003770:	492a      	ldr	r1, [pc, #168]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	654b      	str	r3, [r1, #84]	; 0x54
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003792:	d02e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003794:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003798:	d828      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d02a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a4:	d822      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80037a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037aa:	d026      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80037ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b0:	d81c      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80037b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b6:	d010      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d816      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01d      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d111      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fcd6 	bl	8004180 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037d8:	e012      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3324      	adds	r3, #36	; 0x24
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fd7f 	bl	80042e4 <RCCEx_PLL3_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037ea:	e009      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]
      break;
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037f2:	bf00      	nop
 80037f4:	e004      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80037fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003814:	4901      	ldr	r1, [pc, #4]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	658b      	str	r3, [r1, #88]	; 0x58
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800381c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d04b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003836:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800383a:	d02e      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800383c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003840:	d828      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003846:	d02a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d822      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800384e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003852:	d026      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003854:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003858:	d81c      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800385a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385e:	d010      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003864:	d816      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01d      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386e:	d111      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fc82 	bl	8004180 <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003880:	e012      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fd2b 	bl	80042e4 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003892:	e009      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	75fb      	strb	r3, [r7, #23]
      break;
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80038a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038ae:	4b9d      	ldr	r3, [pc, #628]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038bc:	4999      	ldr	r1, [pc, #612]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	658b      	str	r3, [r1, #88]	; 0x58
 80038c2:	e001      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d10a      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3324      	adds	r3, #36	; 0x24
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fcfc 	bl	80042e4 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038f6:	4b8b      	ldr	r3, [pc, #556]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003904:	4987      	ldr	r1, [pc, #540]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003906:	4313      	orrs	r3, r2
 8003908:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3324      	adds	r3, #36	; 0x24
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fcdb 	bl	80042e4 <RCCEx_PLL3_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003938:	4b7a      	ldr	r3, [pc, #488]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	4977      	ldr	r1, [pc, #476]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d034      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800395e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003962:	d01d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003968:	d817      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003974:	e011      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fbff 	bl	8004180 <RCCEx_PLL2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003986:	e00c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fca8 	bl	80042e4 <RCCEx_PLL3_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
      break;
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80039a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a8:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039b6:	495b      	ldr	r1, [pc, #364]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	658b      	str	r3, [r1, #88]	; 0x58
 80039bc:	e001      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d033      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039d8:	d01c      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80039da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039de:	d816      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80039e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e4:	d003      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80039e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ea:	d007      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80039ec:	e00f      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ee:	4b4d      	ldr	r3, [pc, #308]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80039fa:	e00c      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fc6e 	bl	80042e4 <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
      break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2a:	493e      	ldr	r1, [pc, #248]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	654b      	str	r3, [r1, #84]	; 0x54
 8003a30:	e001      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d029      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d007      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	2102      	movs	r1, #2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fb8a 	bl	8004180 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a70:	e002      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a7e:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	4926      	ldr	r1, [pc, #152]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fc1b 	bl	80042e4 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d033      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003acc:	d017      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad2:	d811      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d013      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ade:	d80b      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003af6:	e007      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1a:	4902      	ldr	r1, [pc, #8]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003b20:	e004      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003b22:	bf00      	nop
 8003b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	492e      	ldr	r1, [pc, #184]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b56:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b64:	4926      	ldr	r1, [pc, #152]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b82:	491f      	ldr	r1, [pc, #124]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b9e:	6113      	str	r3, [r2, #16]
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003baa:	4915      	ldr	r1, [pc, #84]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	da08      	bge.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	4906      	ldr	r1, [pc, #24]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003bea:	7dbb      	ldrb	r3, [r7, #22]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	58024400 	.word	0x58024400

08003c04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c08:	f7ff f85a 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4904      	ldr	r1, [pc, #16]	; (8003c2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	08009448 	.word	0x08009448

08003c30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c38:	4ba1      	ldr	r3, [pc, #644]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c42:	4b9f      	ldr	r3, [pc, #636]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	0b1b      	lsrs	r3, r3, #12
 8003c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c4e:	4b9c      	ldr	r3, [pc, #624]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c5a:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8111 	beq.w	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	f000 8083 	beq.w	8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	f200 80a1 	bhi.w	8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d056      	beq.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c9a:	e099      	b.n	8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c9c:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02d      	beq.n	8003d04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ca8:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	4a84      	ldr	r2, [pc, #528]	; (8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b7b      	ldr	r3, [pc, #492]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d02:	e087      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d46:	e065      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d8a:	e043      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9e:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dce:	e021      	b.n	8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	0a5b      	lsrs	r3, r3, #9
 8003e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3a:	ee17 2a90 	vmov	r2, s15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e68:	ee17 2a90 	vmov	r2, s15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	ee17 2a90 	vmov	r2, s15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	03d09000 	.word	0x03d09000
 8003ec8:	46000000 	.word	0x46000000
 8003ecc:	4c742400 	.word	0x4c742400
 8003ed0:	4a742400 	.word	0x4a742400
 8003ed4:	4af42400 	.word	0x4af42400

08003ed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ee0:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003eea:	4b9f      	ldr	r3, [pc, #636]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	0d1b      	lsrs	r3, r3, #20
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ef6:	4b9c      	ldr	r3, [pc, #624]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003f02:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	08db      	lsrs	r3, r3, #3
 8003f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8111 	beq.w	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f000 8083 	beq.w	8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f200 80a1 	bhi.w	8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d056      	beq.n	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f42:	e099      	b.n	8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f44:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02d      	beq.n	8003fac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f50:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	4a84      	ldr	r2, [pc, #528]	; (800416c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b7b      	ldr	r3, [pc, #492]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003faa:	e087      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fee:	e065      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004002:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a03 	vldr	s12, [r7, #12]
 8004016:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004032:	e043      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004046:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004056:	ed97 6a03 	vldr	s12, [r7, #12]
 800405a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800405e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800406a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004076:	e021      	b.n	80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a03 	vldr	s12, [r7, #12]
 800409e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	0a5b      	lsrs	r3, r3, #9
 80040c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004104:	edd7 6a07 	vldr	s13, [r7, #28]
 8004108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004110:	ee17 2a90 	vmov	r2, s15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	0e1b      	lsrs	r3, r3, #24
 800411e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004132:	edd7 6a07 	vldr	s13, [r7, #28]
 8004136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 2a90 	vmov	r2, s15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004146:	e008      	b.n	800415a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	bf00      	nop
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	58024400 	.word	0x58024400
 800416c:	03d09000 	.word	0x03d09000
 8004170:	46000000 	.word	0x46000000
 8004174:	4c742400 	.word	0x4c742400
 8004178:	4a742400 	.word	0x4a742400
 800417c:	4af42400 	.word	0x4af42400

08004180 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800418e:	4b53      	ldr	r3, [pc, #332]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b03      	cmp	r3, #3
 8004198:	d101      	bne.n	800419e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e099      	b.n	80042d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800419e:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a4e      	ldr	r2, [pc, #312]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041aa:	f7fd fab9 	bl	8001720 <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041b0:	e008      	b.n	80041c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041b2:	f7fd fab5 	bl	8001720 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e086      	b.n	80042d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041c4:	4b45      	ldr	r3, [pc, #276]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041d0:	4b42      	ldr	r3, [pc, #264]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	031b      	lsls	r3, r3, #12
 80041de:	493f      	ldr	r1, [pc, #252]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	628b      	str	r3, [r1, #40]	; 0x28
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	025b      	lsls	r3, r3, #9
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	3b01      	subs	r3, #1
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004214:	4931      	ldr	r1, [pc, #196]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	492d      	ldr	r1, [pc, #180]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f023 0220 	bic.w	r2, r3, #32
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	4928      	ldr	r1, [pc, #160]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004244:	f023 0310 	bic.w	r3, r3, #16
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800424c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <RCCEx_PLL2_Config+0x160>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	69d2      	ldr	r2, [r2, #28]
 8004256:	00d2      	lsls	r2, r2, #3
 8004258:	4920      	ldr	r1, [pc, #128]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800427a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800427c:	e00f      	b.n	800429e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004290:	e005      	b.n	800429e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 8004298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80042a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042aa:	f7fd fa39 	bl	8001720 <HAL_GetTick>
 80042ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042b0:	e008      	b.n	80042c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042b2:	f7fd fa35 	bl	8001720 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e006      	b.n	80042d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <RCCEx_PLL2_Config+0x15c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
 80042e0:	ffff0007 	.word	0xffff0007

080042e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042f2:	4b53      	ldr	r3, [pc, #332]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d101      	bne.n	8004302 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e099      	b.n	8004436 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004302:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4e      	ldr	r2, [pc, #312]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fd fa07 	bl	8001720 <HAL_GetTick>
 8004312:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004314:	e008      	b.n	8004328 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004316:	f7fd fa03 	bl	8001720 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e086      	b.n	8004436 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	051b      	lsls	r3, r3, #20
 8004342:	493f      	ldr	r1, [pc, #252]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	628b      	str	r3, [r1, #40]	; 0x28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	3b01      	subs	r3, #1
 800434e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	025b      	lsls	r3, r3, #9
 800435a:	b29b      	uxth	r3, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	3b01      	subs	r3, #1
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004378:	4931      	ldr	r1, [pc, #196]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800437e:	4b30      	ldr	r3, [pc, #192]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	492d      	ldr	r1, [pc, #180]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004390:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4928      	ldr	r1, [pc, #160]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043a2:	4b27      	ldr	r3, [pc, #156]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a26      	ldr	r2, [pc, #152]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <RCCEx_PLL3_Config+0x160>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	69d2      	ldr	r2, [r2, #28]
 80043ba:	00d2      	lsls	r2, r2, #3
 80043bc:	4920      	ldr	r1, [pc, #128]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043c2:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043e0:	e00f      	b.n	8004402 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043f4:	e005      	b.n	8004402 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	4a11      	ldr	r2, [pc, #68]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 80043fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004402:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440e:	f7fd f987 	bl	8001720 <HAL_GetTick>
 8004412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004414:	e008      	b.n	8004428 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004416:	f7fd f983 	bl	8001720 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e006      	b.n	8004436 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <RCCEx_PLL3_Config+0x15c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
 8004444:	ffff0007 	.word	0xffff0007

08004448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e049      	b.n	80044ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc ff5c 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f000 fbb0 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e049      	b.n	800459c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f841 	bl	80045a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f000 fb59 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_PWM_Start+0x24>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e03c      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d109      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x3e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e02f      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d109      	bne.n	8004610 <HAL_TIM_PWM_Start+0x58>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e022      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d109      	bne.n	800462a <HAL_TIM_PWM_Start+0x72>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e015      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b10      	cmp	r3, #16
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start+0x8c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e008      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0a1      	b.n	80047a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xb6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466c:	e023      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xc6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800467c:	e01b      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0xd6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800468c:	e013      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xe6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800469c:	e00b      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xf6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ac:	e003      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2201      	movs	r2, #1
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fea2 	bl	8005408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_TIM_PWM_Start+0x1f4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x13e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <HAL_TIM_PWM_Start+0x1f8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x13e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a35      	ldr	r2, [pc, #212]	; (80047b4 <HAL_TIM_PWM_Start+0x1fc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x13e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a34      	ldr	r2, [pc, #208]	; (80047b8 <HAL_TIM_PWM_Start+0x200>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x13e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a32      	ldr	r2, [pc, #200]	; (80047bc <HAL_TIM_PWM_Start+0x204>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_PWM_Start+0x142>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_TIM_PWM_Start+0x144>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_TIM_PWM_Start+0x1f4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d022      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004722:	d01d      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <HAL_TIM_PWM_Start+0x208>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d018      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <HAL_TIM_PWM_Start+0x20c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_TIM_PWM_Start+0x210>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_TIM_PWM_Start+0x1f8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_TIM_PWM_Start+0x214>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1a8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_TIM_PWM_Start+0x1fc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d115      	bne.n	800478c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_TIM_PWM_Start+0x218>)
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b06      	cmp	r3, #6
 8004770:	d015      	beq.n	800479e <HAL_TIM_PWM_Start+0x1e6>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d011      	beq.n	800479e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	e008      	b.n	800479e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e000      	b.n	80047a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40010400 	.word	0x40010400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40001800 	.word	0x40001800
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e0ff      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b14      	cmp	r3, #20
 80047fe:	f200 80f0 	bhi.w	80049e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800485d 	.word	0x0800485d
 800480c:	080049e3 	.word	0x080049e3
 8004810:	080049e3 	.word	0x080049e3
 8004814:	080049e3 	.word	0x080049e3
 8004818:	0800489d 	.word	0x0800489d
 800481c:	080049e3 	.word	0x080049e3
 8004820:	080049e3 	.word	0x080049e3
 8004824:	080049e3 	.word	0x080049e3
 8004828:	080048df 	.word	0x080048df
 800482c:	080049e3 	.word	0x080049e3
 8004830:	080049e3 	.word	0x080049e3
 8004834:	080049e3 	.word	0x080049e3
 8004838:	0800491f 	.word	0x0800491f
 800483c:	080049e3 	.word	0x080049e3
 8004840:	080049e3 	.word	0x080049e3
 8004844:	080049e3 	.word	0x080049e3
 8004848:	08004961 	.word	0x08004961
 800484c:	080049e3 	.word	0x080049e3
 8004850:	080049e3 	.word	0x080049e3
 8004854:	080049e3 	.word	0x080049e3
 8004858:	080049a1 	.word	0x080049a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fa5c 	bl	8004d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0208 	orr.w	r2, r2, #8
 8004876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0204 	bic.w	r2, r2, #4
 8004886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6999      	ldr	r1, [r3, #24]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	619a      	str	r2, [r3, #24]
      break;
 800489a:	e0a5      	b.n	80049e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 facc 	bl	8004e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6999      	ldr	r1, [r3, #24]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]
      break;
 80048dc:	e084      	b.n	80049e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fb35 	bl	8004f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0208 	orr.w	r2, r2, #8
 80048f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0204 	bic.w	r2, r2, #4
 8004908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69d9      	ldr	r1, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	61da      	str	r2, [r3, #28]
      break;
 800491c:	e064      	b.n	80049e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fb9d 	bl	8005064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69d9      	ldr	r1, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	021a      	lsls	r2, r3, #8
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	61da      	str	r2, [r3, #28]
      break;
 800495e:	e043      	b.n	80049e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fbe6 	bl	8005138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800499e:	e023      	b.n	80049e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fc2a 	bl	8005200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	021a      	lsls	r2, r3, #8
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049e0:	e002      	b.n	80049e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
      break;
 80049e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop

080049fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e0dc      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	4b6a      	ldr	r3, [pc, #424]	; (8004bdc <HAL_TIM_ConfigClockSource+0x1e0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a64      	ldr	r2, [pc, #400]	; (8004be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f000 80a9 	beq.w	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a54:	4a62      	ldr	r2, [pc, #392]	; (8004be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	f200 80ae 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a5c:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	f000 80a1 	beq.w	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a64:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f200 80a6 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a6c:	4a5e      	ldr	r2, [pc, #376]	; (8004be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f000 8099 	beq.w	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a74:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	f200 809e 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a80:	f000 8091 	beq.w	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a88:	f200 8096 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a90:	f000 8089 	beq.w	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a98:	f200 808e 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d03e      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0x124>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	f200 8087 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aae:	f000 8086 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x1c2>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d87f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ab8:	2b70      	cmp	r3, #112	; 0x70
 8004aba:	d01a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xf6>
 8004abc:	2b70      	cmp	r3, #112	; 0x70
 8004abe:	d87b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ac0:	2b60      	cmp	r3, #96	; 0x60
 8004ac2:	d050      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x16a>
 8004ac4:	2b60      	cmp	r3, #96	; 0x60
 8004ac6:	d877      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d03c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x14a>
 8004acc:	2b50      	cmp	r3, #80	; 0x50
 8004ace:	d873      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d058      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x18a>
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d86f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ad8:	2b30      	cmp	r3, #48	; 0x30
 8004ada:	d064      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d86b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d060      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d867      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d05a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004af0:	e062      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 fc61 	bl	80053c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
      break;
 8004b1e:	e04f      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 fc4a 	bl	80053c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b42:	609a      	str	r2, [r3, #8]
      break;
 8004b44:	e03c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fbba 	bl	80052cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2150      	movs	r1, #80	; 0x50
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fc14 	bl	800538c <TIM_ITRx_SetConfig>
      break;
 8004b64:	e02c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 fbd9 	bl	800532a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2160      	movs	r1, #96	; 0x60
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fc04 	bl	800538c <TIM_ITRx_SetConfig>
      break;
 8004b84:	e01c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 fb9a 	bl	80052cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2140      	movs	r1, #64	; 0x40
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fbf4 	bl	800538c <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e00c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fbeb 	bl	800538c <TIM_ITRx_SetConfig>
      break;
 8004bb6:	e003      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	ffceff88 	.word	0xffceff88
 8004be0:	00100040 	.word	0x00100040
 8004be4:	00100030 	.word	0x00100030
 8004be8:	00100020 	.word	0x00100020

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01f      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d01b      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d017      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800

08004d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f023 0201 	bic.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <TIM_OC1_SetConfig+0x108>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 0302 	bic.w	r3, r3, #2
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <TIM_OC1_SetConfig+0x10c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_OC1_SetConfig+0x7c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_OC1_SetConfig+0x110>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_OC1_SetConfig+0x7c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_OC1_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC1_SetConfig+0x7c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_OC1_SetConfig+0x118>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC1_SetConfig+0x7c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_OC1_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10c      	bne.n	8004db6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0308 	bic.w	r3, r3, #8
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_OC1_SetConfig+0x10c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_OC1_SetConfig+0xbe>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <TIM_OC1_SetConfig+0x110>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_OC1_SetConfig+0xbe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1a      	ldr	r2, [pc, #104]	; (8004e34 <TIM_OC1_SetConfig+0x114>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_OC1_SetConfig+0xbe>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <TIM_OC1_SetConfig+0x118>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC1_SetConfig+0xbe>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <TIM_OC1_SetConfig+0x11c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d111      	bne.n	8004e02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	fffeff8f 	.word	0xfffeff8f
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40010400 	.word	0x40010400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	40014800 	.word	0x40014800

08004e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0210 	bic.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <TIM_OC2_SetConfig+0xfc>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0320 	bic.w	r3, r3, #32
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <TIM_OC2_SetConfig+0x100>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC2_SetConfig+0x68>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a28      	ldr	r2, [pc, #160]	; (8004f44 <TIM_OC2_SetConfig+0x104>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <TIM_OC2_SetConfig+0x100>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_OC2_SetConfig+0xac>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <TIM_OC2_SetConfig+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_OC2_SetConfig+0xac>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <TIM_OC2_SetConfig+0x108>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_OC2_SetConfig+0xac>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <TIM_OC2_SetConfig+0x10c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_OC2_SetConfig+0xac>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <TIM_OC2_SetConfig+0x110>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d113      	bne.n	8004f14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	feff8fff 	.word	0xfeff8fff
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800

08004f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4b33      	ldr	r3, [pc, #204]	; (800504c <TIM_OC3_SetConfig+0xf8>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a28      	ldr	r2, [pc, #160]	; (8005050 <TIM_OC3_SetConfig+0xfc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC3_SetConfig+0x66>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a27      	ldr	r2, [pc, #156]	; (8005054 <TIM_OC3_SetConfig+0x100>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10d      	bne.n	8004fd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <TIM_OC3_SetConfig+0xfc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_OC3_SetConfig+0xaa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <TIM_OC3_SetConfig+0x100>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_OC3_SetConfig+0xaa>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <TIM_OC3_SetConfig+0x104>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_OC3_SetConfig+0xaa>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1a      	ldr	r2, [pc, #104]	; (800505c <TIM_OC3_SetConfig+0x108>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0xaa>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a19      	ldr	r2, [pc, #100]	; (8005060 <TIM_OC3_SetConfig+0x10c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	fffeff8f 	.word	0xfffeff8f
 8005050:	40010000 	.word	0x40010000
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <TIM_OC4_SetConfig+0xbc>)
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <TIM_OC4_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00f      	beq.n	80050e4 <TIM_OC4_SetConfig+0x80>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <TIM_OC4_SetConfig+0xc4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_OC4_SetConfig+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <TIM_OC4_SetConfig+0xc8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_OC4_SetConfig+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <TIM_OC4_SetConfig+0xcc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC4_SetConfig+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <TIM_OC4_SetConfig+0xd0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d109      	bne.n	80050f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	feff8fff 	.word	0xfeff8fff
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800

08005138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4b21      	ldr	r3, [pc, #132]	; (80051e8 <TIM_OC5_SetConfig+0xb0>)
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <TIM_OC5_SetConfig+0xb4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00f      	beq.n	80051ae <TIM_OC5_SetConfig+0x76>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <TIM_OC5_SetConfig+0xb8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_OC5_SetConfig+0x76>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <TIM_OC5_SetConfig+0xbc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC5_SetConfig+0x76>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <TIM_OC5_SetConfig+0xc0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC5_SetConfig+0x76>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <TIM_OC5_SetConfig+0xc4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d109      	bne.n	80051c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	fffeff8f 	.word	0xfffeff8f
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <TIM_OC6_SetConfig+0xb4>)
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_OC6_SetConfig+0xb8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00f      	beq.n	8005278 <TIM_OC6_SetConfig+0x78>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_OC6_SetConfig+0xbc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_OC6_SetConfig+0x78>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC6_SetConfig+0xc0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC6_SetConfig+0x78>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC6_SetConfig+0xc4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC6_SetConfig+0x78>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <TIM_OC6_SetConfig+0xc8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d109      	bne.n	800528c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	feff8fff 	.word	0xfeff8fff
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40010400 	.word	0x40010400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 030a 	bic.w	r3, r3, #10
 8005308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	031b      	lsls	r3, r3, #12
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <TIM_ITRx_SetConfig+0x38>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f043 0307 	orr.w	r3, r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	609a      	str	r2, [r3, #8]
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	ffcfff8f 	.word	0xffcfff8f

080053c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e06d      	b.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d108      	bne.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a20      	ldr	r2, [pc, #128]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d022      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054de:	d01d      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d013      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a15      	ldr	r2, [pc, #84]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a16      	ldr	r2, [pc, #88]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10c      	bne.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005522:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40001800 	.word	0x40001800
 800556c:	40014000 	.word	0x40014000

08005570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e042      	b.n	8005608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fb ffad 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	; 0x24
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f996 	bl	80058e4 <UART_SetConfig>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e022      	b.n	8005608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fef2 	bl	80063b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 ff79 	bl	80064f8 <UART_CheckIdleState>
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005626:	2b20      	cmp	r3, #32
 8005628:	f040 8083 	bne.w	8005732 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_UART_Transmit+0x28>
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e07b      	b.n	8005734 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_UART_Transmit+0x3a>
 8005646:	2302      	movs	r3, #2
 8005648:	e074      	b.n	8005734 <HAL_UART_Transmit+0x124>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2221      	movs	r2, #33	; 0x21
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005662:	f7fc f85d 	bl	8001720 <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005680:	d108      	bne.n	8005694 <HAL_UART_Transmit+0x84>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e003      	b.n	800569c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056a4:	e02c      	b.n	8005700 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 ff6c 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e039      	b.n	8005734 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	3302      	adds	r3, #2
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e007      	b.n	80056ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1cc      	bne.n	80056a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	2140      	movs	r1, #64	; 0x40
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 ff39 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e006      	b.n	8005734 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
  }
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	2b20      	cmp	r3, #32
 8005754:	f040 80c0 	bne.w	80058d8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Receive+0x28>
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0b8      	b.n	80058da <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_UART_Receive+0x3a>
 8005772:	2302      	movs	r3, #2
 8005774:	e0b1      	b.n	80058da <HAL_UART_Receive+0x19e>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2222      	movs	r2, #34	; 0x22
 800578a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005794:	f7fb ffc4 	bl	8001720 <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	88fa      	ldrh	r2, [r7, #6]
 800579e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d10e      	bne.n	80057d2 <HAL_UART_Receive+0x96>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_UART_Receive+0x8c>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c6:	e02d      	b.n	8005824 <HAL_UART_Receive+0xe8>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	22ff      	movs	r2, #255	; 0xff
 80057cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057d0:	e028      	b.n	8005824 <HAL_UART_Receive+0xe8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10d      	bne.n	80057f6 <HAL_UART_Receive+0xba>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <HAL_UART_Receive+0xb0>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ea:	e01b      	b.n	8005824 <HAL_UART_Receive+0xe8>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	227f      	movs	r2, #127	; 0x7f
 80057f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057f4:	e016      	b.n	8005824 <HAL_UART_Receive+0xe8>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fe:	d10d      	bne.n	800581c <HAL_UART_Receive+0xe0>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_UART_Receive+0xd6>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	227f      	movs	r2, #127	; 0x7f
 800580c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005810:	e008      	b.n	8005824 <HAL_UART_Receive+0xe8>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	223f      	movs	r2, #63	; 0x3f
 8005816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800581a:	e003      	b.n	8005824 <HAL_UART_Receive+0xe8>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800582a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005834:	d108      	bne.n	8005848 <HAL_UART_Receive+0x10c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e003      	b.n	8005850 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005858:	e032      	b.n	80058c0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	2120      	movs	r1, #32
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fe92 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e032      	b.n	80058da <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10c      	bne.n	8005894 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	b29a      	uxth	r2, r3
 8005882:	8a7b      	ldrh	r3, [r7, #18]
 8005884:	4013      	ands	r3, r2
 8005886:	b29a      	uxth	r2, r3
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	3302      	adds	r3, #2
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e00c      	b.n	80058ae <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	b2da      	uxtb	r2, r3
 800589c:	8a7b      	ldrh	r3, [r7, #18]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	4013      	ands	r3, r2
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	3301      	adds	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1c6      	bne.n	800585a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e8:	b092      	sub	sp, #72	; 0x48
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	431a      	orrs	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	4313      	orrs	r3, r2
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4bbe      	ldr	r3, [pc, #760]	; (8005c0c <UART_SetConfig+0x328>)
 8005914:	4013      	ands	r3, r2
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800591c:	430b      	orrs	r3, r1
 800591e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4ab3      	ldr	r2, [pc, #716]	; (8005c10 <UART_SetConfig+0x32c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594c:	4313      	orrs	r3, r2
 800594e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	4baf      	ldr	r3, [pc, #700]	; (8005c14 <UART_SetConfig+0x330>)
 8005958:	4013      	ands	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005960:	430b      	orrs	r3, r1
 8005962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	f023 010f 	bic.w	r1, r3, #15
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4aa6      	ldr	r2, [pc, #664]	; (8005c18 <UART_SetConfig+0x334>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d177      	bne.n	8005a74 <UART_SetConfig+0x190>
 8005984:	4ba5      	ldr	r3, [pc, #660]	; (8005c1c <UART_SetConfig+0x338>)
 8005986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005988:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800598c:	2b28      	cmp	r3, #40	; 0x28
 800598e:	d86d      	bhi.n	8005a6c <UART_SetConfig+0x188>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0xb4>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	08005a3d 	.word	0x08005a3d
 800599c:	08005a6d 	.word	0x08005a6d
 80059a0:	08005a6d 	.word	0x08005a6d
 80059a4:	08005a6d 	.word	0x08005a6d
 80059a8:	08005a6d 	.word	0x08005a6d
 80059ac:	08005a6d 	.word	0x08005a6d
 80059b0:	08005a6d 	.word	0x08005a6d
 80059b4:	08005a6d 	.word	0x08005a6d
 80059b8:	08005a45 	.word	0x08005a45
 80059bc:	08005a6d 	.word	0x08005a6d
 80059c0:	08005a6d 	.word	0x08005a6d
 80059c4:	08005a6d 	.word	0x08005a6d
 80059c8:	08005a6d 	.word	0x08005a6d
 80059cc:	08005a6d 	.word	0x08005a6d
 80059d0:	08005a6d 	.word	0x08005a6d
 80059d4:	08005a6d 	.word	0x08005a6d
 80059d8:	08005a4d 	.word	0x08005a4d
 80059dc:	08005a6d 	.word	0x08005a6d
 80059e0:	08005a6d 	.word	0x08005a6d
 80059e4:	08005a6d 	.word	0x08005a6d
 80059e8:	08005a6d 	.word	0x08005a6d
 80059ec:	08005a6d 	.word	0x08005a6d
 80059f0:	08005a6d 	.word	0x08005a6d
 80059f4:	08005a6d 	.word	0x08005a6d
 80059f8:	08005a55 	.word	0x08005a55
 80059fc:	08005a6d 	.word	0x08005a6d
 8005a00:	08005a6d 	.word	0x08005a6d
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005a6d 	.word	0x08005a6d
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a6d 	.word	0x08005a6d
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a6d 	.word	0x08005a6d
 8005a28:	08005a6d 	.word	0x08005a6d
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005a6d 	.word	0x08005a6d
 8005a34:	08005a6d 	.word	0x08005a6d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e222      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e21e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a52:	e21a      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e216      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e212      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e20e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e20a      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a69      	ldr	r2, [pc, #420]	; (8005c20 <UART_SetConfig+0x33c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d130      	bne.n	8005ae0 <UART_SetConfig+0x1fc>
 8005a7e:	4b67      	ldr	r3, [pc, #412]	; (8005c1c <UART_SetConfig+0x338>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d826      	bhi.n	8005ad8 <UART_SetConfig+0x1f4>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x1ac>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa9 	.word	0x08005aa9
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ad1 	.word	0x08005ad1
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e1ec      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e1e8      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e1e4      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e1e0      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ac8:	2320      	movs	r3, #32
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e1dc      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e1d8      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e1d4      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a4f      	ldr	r2, [pc, #316]	; (8005c24 <UART_SetConfig+0x340>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d130      	bne.n	8005b4c <UART_SetConfig+0x268>
 8005aea:	4b4c      	ldr	r3, [pc, #304]	; (8005c1c <UART_SetConfig+0x338>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	d826      	bhi.n	8005b44 <UART_SetConfig+0x260>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <UART_SetConfig+0x218>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b15 	.word	0x08005b15
 8005b00:	08005b1d 	.word	0x08005b1d
 8005b04:	08005b25 	.word	0x08005b25
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e1b6      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e1b2      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b24:	2308      	movs	r3, #8
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e1ae      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e1aa      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b34:	2320      	movs	r3, #32
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e1a6      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e1a2      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e19e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a35      	ldr	r2, [pc, #212]	; (8005c28 <UART_SetConfig+0x344>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d130      	bne.n	8005bb8 <UART_SetConfig+0x2d4>
 8005b56:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <UART_SetConfig+0x338>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d826      	bhi.n	8005bb0 <UART_SetConfig+0x2cc>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0x284>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b81 	.word	0x08005b81
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	08005b91 	.word	0x08005b91
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e180      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e17c      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e178      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e174      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e170      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e16c      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e168      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <UART_SetConfig+0x348>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d142      	bne.n	8005c48 <UART_SetConfig+0x364>
 8005bc2:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <UART_SetConfig+0x338>)
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d838      	bhi.n	8005c40 <UART_SetConfig+0x35c>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <UART_SetConfig+0x2f0>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005bed 	.word	0x08005bed
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	08005bfd 	.word	0x08005bfd
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c31 	.word	0x08005c31
 8005be8:	08005c39 	.word	0x08005c39
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e14a      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e146      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e142      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e13e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005c0c:	cfff69f3 	.word	0xcfff69f3
 8005c10:	58000c00 	.word	0x58000c00
 8005c14:	11fff4ff 	.word	0x11fff4ff
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	40004400 	.word	0x40004400
 8005c24:	40004800 	.word	0x40004800
 8005c28:	40004c00 	.word	0x40004c00
 8005c2c:	40005000 	.word	0x40005000
 8005c30:	2320      	movs	r3, #32
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c36:	e128      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005c38:	2340      	movs	r3, #64	; 0x40
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3e:	e124      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c46:	e120      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4acb      	ldr	r2, [pc, #812]	; (8005f7c <UART_SetConfig+0x698>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d176      	bne.n	8005d40 <UART_SetConfig+0x45c>
 8005c52:	4bcb      	ldr	r3, [pc, #812]	; (8005f80 <UART_SetConfig+0x69c>)
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c5a:	2b28      	cmp	r3, #40	; 0x28
 8005c5c:	d86c      	bhi.n	8005d38 <UART_SetConfig+0x454>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0x380>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005d09 	.word	0x08005d09
 8005c68:	08005d39 	.word	0x08005d39
 8005c6c:	08005d39 	.word	0x08005d39
 8005c70:	08005d39 	.word	0x08005d39
 8005c74:	08005d39 	.word	0x08005d39
 8005c78:	08005d39 	.word	0x08005d39
 8005c7c:	08005d39 	.word	0x08005d39
 8005c80:	08005d39 	.word	0x08005d39
 8005c84:	08005d11 	.word	0x08005d11
 8005c88:	08005d39 	.word	0x08005d39
 8005c8c:	08005d39 	.word	0x08005d39
 8005c90:	08005d39 	.word	0x08005d39
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d39 	.word	0x08005d39
 8005c9c:	08005d39 	.word	0x08005d39
 8005ca0:	08005d39 	.word	0x08005d39
 8005ca4:	08005d19 	.word	0x08005d19
 8005ca8:	08005d39 	.word	0x08005d39
 8005cac:	08005d39 	.word	0x08005d39
 8005cb0:	08005d39 	.word	0x08005d39
 8005cb4:	08005d39 	.word	0x08005d39
 8005cb8:	08005d39 	.word	0x08005d39
 8005cbc:	08005d39 	.word	0x08005d39
 8005cc0:	08005d39 	.word	0x08005d39
 8005cc4:	08005d21 	.word	0x08005d21
 8005cc8:	08005d39 	.word	0x08005d39
 8005ccc:	08005d39 	.word	0x08005d39
 8005cd0:	08005d39 	.word	0x08005d39
 8005cd4:	08005d39 	.word	0x08005d39
 8005cd8:	08005d39 	.word	0x08005d39
 8005cdc:	08005d39 	.word	0x08005d39
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d39 	.word	0x08005d39
 8005cec:	08005d39 	.word	0x08005d39
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d39 	.word	0x08005d39
 8005cf8:	08005d39 	.word	0x08005d39
 8005cfc:	08005d39 	.word	0x08005d39
 8005d00:	08005d39 	.word	0x08005d39
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e0bc      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e0b8      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e0b4      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e0b0      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e0ac      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e0a8      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e0a4      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a8f      	ldr	r2, [pc, #572]	; (8005f84 <UART_SetConfig+0x6a0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d130      	bne.n	8005dac <UART_SetConfig+0x4c8>
 8005d4a:	4b8d      	ldr	r3, [pc, #564]	; (8005f80 <UART_SetConfig+0x69c>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d826      	bhi.n	8005da4 <UART_SetConfig+0x4c0>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x478>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d75 	.word	0x08005d75
 8005d60:	08005d7d 	.word	0x08005d7d
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e086      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e082      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e07e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e07a      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d94:	2320      	movs	r3, #32
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e076      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e072      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e06e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a75      	ldr	r2, [pc, #468]	; (8005f88 <UART_SetConfig+0x6a4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d130      	bne.n	8005e18 <UART_SetConfig+0x534>
 8005db6:	4b72      	ldr	r3, [pc, #456]	; (8005f80 <UART_SetConfig+0x69c>)
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d826      	bhi.n	8005e10 <UART_SetConfig+0x52c>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x4e4>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005de1 	.word	0x08005de1
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	08005df1 	.word	0x08005df1
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e050      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e04c      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e048      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e044      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e040      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e03c      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e038      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5b      	ldr	r2, [pc, #364]	; (8005f8c <UART_SetConfig+0x6a8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d130      	bne.n	8005e84 <UART_SetConfig+0x5a0>
 8005e22:	4b57      	ldr	r3, [pc, #348]	; (8005f80 <UART_SetConfig+0x69c>)
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d826      	bhi.n	8005e7c <UART_SetConfig+0x598>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x550>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e4d 	.word	0x08005e4d
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e01a      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e016      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e012      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e00e      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e00a      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e74:	2340      	movs	r3, #64	; 0x40
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e006      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e002      	b.n	8005e8a <UART_SetConfig+0x5a6>
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a3f      	ldr	r2, [pc, #252]	; (8005f8c <UART_SetConfig+0x6a8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	f040 80f8 	bne.w	8006086 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	dc46      	bgt.n	8005f2c <UART_SetConfig+0x648>
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	f2c0 8082 	blt.w	8005fa8 <UART_SetConfig+0x6c4>
 8005ea4:	3b02      	subs	r3, #2
 8005ea6:	2b1e      	cmp	r3, #30
 8005ea8:	d87e      	bhi.n	8005fa8 <UART_SetConfig+0x6c4>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <UART_SetConfig+0x5cc>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005f33 	.word	0x08005f33
 8005eb4:	08005fa9 	.word	0x08005fa9
 8005eb8:	08005f3b 	.word	0x08005f3b
 8005ebc:	08005fa9 	.word	0x08005fa9
 8005ec0:	08005fa9 	.word	0x08005fa9
 8005ec4:	08005fa9 	.word	0x08005fa9
 8005ec8:	08005f4b 	.word	0x08005f4b
 8005ecc:	08005fa9 	.word	0x08005fa9
 8005ed0:	08005fa9 	.word	0x08005fa9
 8005ed4:	08005fa9 	.word	0x08005fa9
 8005ed8:	08005fa9 	.word	0x08005fa9
 8005edc:	08005fa9 	.word	0x08005fa9
 8005ee0:	08005fa9 	.word	0x08005fa9
 8005ee4:	08005fa9 	.word	0x08005fa9
 8005ee8:	08005f5b 	.word	0x08005f5b
 8005eec:	08005fa9 	.word	0x08005fa9
 8005ef0:	08005fa9 	.word	0x08005fa9
 8005ef4:	08005fa9 	.word	0x08005fa9
 8005ef8:	08005fa9 	.word	0x08005fa9
 8005efc:	08005fa9 	.word	0x08005fa9
 8005f00:	08005fa9 	.word	0x08005fa9
 8005f04:	08005fa9 	.word	0x08005fa9
 8005f08:	08005fa9 	.word	0x08005fa9
 8005f0c:	08005fa9 	.word	0x08005fa9
 8005f10:	08005fa9 	.word	0x08005fa9
 8005f14:	08005fa9 	.word	0x08005fa9
 8005f18:	08005fa9 	.word	0x08005fa9
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fa9 	.word	0x08005fa9
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005f9b 	.word	0x08005f9b
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d037      	beq.n	8005fa0 <UART_SetConfig+0x6bc>
 8005f30:	e03a      	b.n	8005fa8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f32:	f7fd fe67 	bl	8003c04 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f38:	e03c      	b.n	8005fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fd fe76 	bl	8003c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f48:	e034      	b.n	8005fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4a:	f107 0318 	add.w	r3, r7, #24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd ffc2 	bl	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f58:	e02c      	b.n	8005fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <UART_SetConfig+0x69c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <UART_SetConfig+0x69c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	08db      	lsrs	r3, r3, #3
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <UART_SetConfig+0x6ac>)
 8005f72:	fa22 f303 	lsr.w	r3, r2, r3
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f78:	e01c      	b.n	8005fb4 <UART_SetConfig+0x6d0>
 8005f7a:	bf00      	nop
 8005f7c:	40011400 	.word	0x40011400
 8005f80:	58024400 	.word	0x58024400
 8005f84:	40007800 	.word	0x40007800
 8005f88:	40007c00 	.word	0x40007c00
 8005f8c:	58000c00 	.word	0x58000c00
 8005f90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005f94:	4b9d      	ldr	r3, [pc, #628]	; (800620c <UART_SetConfig+0x928>)
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f98:	e00c      	b.n	8005fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f9a:	4b9d      	ldr	r3, [pc, #628]	; (8006210 <UART_SetConfig+0x92c>)
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f9e:	e009      	b.n	8005fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fa6:	e005      	b.n	8005fb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 81de 	beq.w	8006378 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	4a94      	ldr	r2, [pc, #592]	; (8006214 <UART_SetConfig+0x930>)
 8005fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	4413      	add	r3, r2
 8005fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d305      	bcc.n	8005fec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d903      	bls.n	8005ff4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ff2:	e1c1      	b.n	8006378 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	60fa      	str	r2, [r7, #12]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	4a84      	ldr	r2, [pc, #528]	; (8006214 <UART_SetConfig+0x930>)
 8006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006006:	b29b      	uxth	r3, r3
 8006008:	2200      	movs	r2, #0
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006016:	f7fa f9bb 	bl	8000390 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	020b      	lsls	r3, r1, #8
 800602c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006030:	0202      	lsls	r2, r0, #8
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	6849      	ldr	r1, [r1, #4]
 8006036:	0849      	lsrs	r1, r1, #1
 8006038:	2000      	movs	r0, #0
 800603a:	460c      	mov	r4, r1
 800603c:	4605      	mov	r5, r0
 800603e:	eb12 0804 	adds.w	r8, r2, r4
 8006042:	eb43 0905 	adc.w	r9, r3, r5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	469a      	mov	sl, r3
 800604e:	4693      	mov	fp, r2
 8006050:	4652      	mov	r2, sl
 8006052:	465b      	mov	r3, fp
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	f7fa f99a 	bl	8000390 <__aeabi_uldivmod>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4613      	mov	r3, r2
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606a:	d308      	bcc.n	800607e <UART_SetConfig+0x79a>
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006072:	d204      	bcs.n	800607e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607a:	60da      	str	r2, [r3, #12]
 800607c:	e17c      	b.n	8006378 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006084:	e178      	b.n	8006378 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608e:	f040 80c5 	bne.w	800621c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006092:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006096:	2b20      	cmp	r3, #32
 8006098:	dc48      	bgt.n	800612c <UART_SetConfig+0x848>
 800609a:	2b00      	cmp	r3, #0
 800609c:	db7b      	blt.n	8006196 <UART_SetConfig+0x8b2>
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d879      	bhi.n	8006196 <UART_SetConfig+0x8b2>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x7c4>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	08006133 	.word	0x08006133
 80060ac:	0800613b 	.word	0x0800613b
 80060b0:	08006197 	.word	0x08006197
 80060b4:	08006197 	.word	0x08006197
 80060b8:	08006143 	.word	0x08006143
 80060bc:	08006197 	.word	0x08006197
 80060c0:	08006197 	.word	0x08006197
 80060c4:	08006197 	.word	0x08006197
 80060c8:	08006153 	.word	0x08006153
 80060cc:	08006197 	.word	0x08006197
 80060d0:	08006197 	.word	0x08006197
 80060d4:	08006197 	.word	0x08006197
 80060d8:	08006197 	.word	0x08006197
 80060dc:	08006197 	.word	0x08006197
 80060e0:	08006197 	.word	0x08006197
 80060e4:	08006197 	.word	0x08006197
 80060e8:	08006163 	.word	0x08006163
 80060ec:	08006197 	.word	0x08006197
 80060f0:	08006197 	.word	0x08006197
 80060f4:	08006197 	.word	0x08006197
 80060f8:	08006197 	.word	0x08006197
 80060fc:	08006197 	.word	0x08006197
 8006100:	08006197 	.word	0x08006197
 8006104:	08006197 	.word	0x08006197
 8006108:	08006197 	.word	0x08006197
 800610c:	08006197 	.word	0x08006197
 8006110:	08006197 	.word	0x08006197
 8006114:	08006197 	.word	0x08006197
 8006118:	08006197 	.word	0x08006197
 800611c:	08006197 	.word	0x08006197
 8006120:	08006197 	.word	0x08006197
 8006124:	08006197 	.word	0x08006197
 8006128:	08006189 	.word	0x08006189
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d02e      	beq.n	800618e <UART_SetConfig+0x8aa>
 8006130:	e031      	b.n	8006196 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006132:	f7fc fdf5 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8006136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006138:	e033      	b.n	80061a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613a:	f7fc fe07 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 800613e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006140:	e02f      	b.n	80061a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006146:	4618      	mov	r0, r3
 8006148:	f7fd fd72 	bl	8003c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006150:	e027      	b.n	80061a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006152:	f107 0318 	add.w	r3, r7, #24
 8006156:	4618      	mov	r0, r3
 8006158:	f7fd febe 	bl	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006160:	e01f      	b.n	80061a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006162:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <UART_SetConfig+0x934>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800616e:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <UART_SetConfig+0x934>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	08db      	lsrs	r3, r3, #3
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	4a24      	ldr	r2, [pc, #144]	; (800620c <UART_SetConfig+0x928>)
 800617a:	fa22 f303 	lsr.w	r3, r2, r3
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006180:	e00f      	b.n	80061a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006182:	4b22      	ldr	r3, [pc, #136]	; (800620c <UART_SetConfig+0x928>)
 8006184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006186:	e00c      	b.n	80061a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006188:	4b21      	ldr	r3, [pc, #132]	; (8006210 <UART_SetConfig+0x92c>)
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800618c:	e009      	b.n	80061a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006194:	e005      	b.n	80061a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80061a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80e7 	beq.w	8006378 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	4a19      	ldr	r2, [pc, #100]	; (8006214 <UART_SetConfig+0x930>)
 80061b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061bc:	005a      	lsls	r2, r3, #1
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	441a      	add	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	d916      	bls.n	8006204 <UART_SetConfig+0x920>
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061dc:	d212      	bcs.n	8006204 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f023 030f 	bic.w	r3, r3, #15
 80061e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061f6:	4313      	orrs	r3, r2
 80061f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e0b9      	b.n	8006378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800620a:	e0b5      	b.n	8006378 <UART_SetConfig+0xa94>
 800620c:	03d09000 	.word	0x03d09000
 8006210:	003d0900 	.word	0x003d0900
 8006214:	08009458 	.word	0x08009458
 8006218:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800621c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006220:	2b20      	cmp	r3, #32
 8006222:	dc49      	bgt.n	80062b8 <UART_SetConfig+0x9d4>
 8006224:	2b00      	cmp	r3, #0
 8006226:	db7c      	blt.n	8006322 <UART_SetConfig+0xa3e>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d87a      	bhi.n	8006322 <UART_SetConfig+0xa3e>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0x950>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	080062bf 	.word	0x080062bf
 8006238:	080062c7 	.word	0x080062c7
 800623c:	08006323 	.word	0x08006323
 8006240:	08006323 	.word	0x08006323
 8006244:	080062cf 	.word	0x080062cf
 8006248:	08006323 	.word	0x08006323
 800624c:	08006323 	.word	0x08006323
 8006250:	08006323 	.word	0x08006323
 8006254:	080062df 	.word	0x080062df
 8006258:	08006323 	.word	0x08006323
 800625c:	08006323 	.word	0x08006323
 8006260:	08006323 	.word	0x08006323
 8006264:	08006323 	.word	0x08006323
 8006268:	08006323 	.word	0x08006323
 800626c:	08006323 	.word	0x08006323
 8006270:	08006323 	.word	0x08006323
 8006274:	080062ef 	.word	0x080062ef
 8006278:	08006323 	.word	0x08006323
 800627c:	08006323 	.word	0x08006323
 8006280:	08006323 	.word	0x08006323
 8006284:	08006323 	.word	0x08006323
 8006288:	08006323 	.word	0x08006323
 800628c:	08006323 	.word	0x08006323
 8006290:	08006323 	.word	0x08006323
 8006294:	08006323 	.word	0x08006323
 8006298:	08006323 	.word	0x08006323
 800629c:	08006323 	.word	0x08006323
 80062a0:	08006323 	.word	0x08006323
 80062a4:	08006323 	.word	0x08006323
 80062a8:	08006323 	.word	0x08006323
 80062ac:	08006323 	.word	0x08006323
 80062b0:	08006323 	.word	0x08006323
 80062b4:	08006315 	.word	0x08006315
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d02e      	beq.n	800631a <UART_SetConfig+0xa36>
 80062bc:	e031      	b.n	8006322 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062be:	f7fc fd2f 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80062c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062c4:	e033      	b.n	800632e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c6:	f7fc fd41 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 80062ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062cc:	e02f      	b.n	800632e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fd fcac 	bl	8003c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062dc:	e027      	b.n	800632e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062de:	f107 0318 	add.w	r3, r7, #24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fdf8 	bl	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ec:	e01f      	b.n	800632e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ee:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <UART_SetConfig+0xac0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062fa:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <UART_SetConfig+0xac0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	4a28      	ldr	r2, [pc, #160]	; (80063a8 <UART_SetConfig+0xac4>)
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800630c:	e00f      	b.n	800632e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800630e:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <UART_SetConfig+0xac4>)
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006312:	e00c      	b.n	800632e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <UART_SetConfig+0xac8>)
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006318:	e009      	b.n	800632e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006320:	e005      	b.n	800632e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800632c:	bf00      	nop
    }

    if (pclk != 0U)
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d021      	beq.n	8006378 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	4a1d      	ldr	r2, [pc, #116]	; (80063b0 <UART_SetConfig+0xacc>)
 800633a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633e:	461a      	mov	r2, r3
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	fbb3 f2f2 	udiv	r2, r3, r2
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	441a      	add	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	2b0f      	cmp	r3, #15
 800635c:	d909      	bls.n	8006372 <UART_SetConfig+0xa8e>
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006364:	d205      	bcs.n	8006372 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	b29a      	uxth	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60da      	str	r2, [r3, #12]
 8006370:	e002      	b.n	8006378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2201      	movs	r2, #1
 800637c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2201      	movs	r2, #1
 8006384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2200      	movs	r2, #0
 800638c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2200      	movs	r2, #0
 8006392:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006394:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006398:	4618      	mov	r0, r3
 800639a:	3748      	adds	r7, #72	; 0x48
 800639c:	46bd      	mov	sp, r7
 800639e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063a2:	bf00      	nop
 80063a4:	58024400 	.word	0x58024400
 80063a8:	03d09000 	.word	0x03d09000
 80063ac:	003d0900 	.word	0x003d0900
 80063b0:	08009458 	.word	0x08009458

080063b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01a      	beq.n	80064ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b2:	d10a      	bne.n	80064ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006508:	f7fb f90a 	bl	8001720 <HAL_GetTick>
 800650c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b08      	cmp	r3, #8
 800651a:	d10e      	bne.n	800653a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800651c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f82f 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e025      	b.n	8006586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d10e      	bne.n	8006566 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f819 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e00f      	b.n	8006586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b09c      	sub	sp, #112	; 0x70
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659e:	e0a9      	b.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	f000 80a5 	beq.w	80066f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fb f8b9 	bl	8001720 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80065ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d140      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065d4:	667b      	str	r3, [r7, #100]	; 0x64
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e6      	bne.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	663b      	str	r3, [r7, #96]	; 0x60
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006612:	64ba      	str	r2, [r7, #72]	; 0x48
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e069      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d051      	beq.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800665a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665e:	d149      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006668:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800667e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800668e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e6      	bne.n	800666a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	613b      	str	r3, [r7, #16]
   return(result);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066bc:	623a      	str	r2, [r7, #32]
 80066be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	69f9      	ldr	r1, [r7, #28]
 80066c2:	6a3a      	ldr	r2, [r7, #32]
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e5      	bne.n	800669c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e010      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4013      	ands	r3, r2
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	429a      	cmp	r2, r3
 8006710:	f43f af46 	beq.w	80065a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3770      	adds	r7, #112	; 0x70
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_UARTEx_DisableFifoMode+0x16>
 8006730:	2302      	movs	r3, #2
 8006732:	e027      	b.n	8006784 <HAL_UARTEx_DisableFifoMode+0x66>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2224      	movs	r2, #36	; 0x24
 8006740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006762:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e02d      	b.n	8006804 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	; 0x24
 80067b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f84f 	bl	8006888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e02d      	b.n	8006880 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	; 0x24
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f811 	bl	8006888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006894:	2b00      	cmp	r3, #0
 8006896:	d108      	bne.n	80068aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068a8:	e031      	b.n	800690e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068aa:	2310      	movs	r3, #16
 80068ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ae:	2310      	movs	r3, #16
 80068b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	0e5b      	lsrs	r3, r3, #25
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	0f5b      	lsrs	r3, r3, #29
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068d2:	7bbb      	ldrb	r3, [r7, #14]
 80068d4:	7b3a      	ldrb	r2, [r7, #12]
 80068d6:	4911      	ldr	r1, [pc, #68]	; (800691c <UARTEx_SetNbDataToProcess+0x94>)
 80068d8:	5c8a      	ldrb	r2, [r1, r2]
 80068da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068de:	7b3a      	ldrb	r2, [r7, #12]
 80068e0:	490f      	ldr	r1, [pc, #60]	; (8006920 <UARTEx_SetNbDataToProcess+0x98>)
 80068e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	7b7a      	ldrb	r2, [r7, #13]
 80068f4:	4909      	ldr	r1, [pc, #36]	; (800691c <UARTEx_SetNbDataToProcess+0x94>)
 80068f6:	5c8a      	ldrb	r2, [r1, r2]
 80068f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068fc:	7b7a      	ldrb	r2, [r7, #13]
 80068fe:	4908      	ldr	r1, [pc, #32]	; (8006920 <UARTEx_SetNbDataToProcess+0x98>)
 8006900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006902:	fb93 f3f2 	sdiv	r3, r3, r2
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800690e:	bf00      	nop
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	08009470 	.word	0x08009470
 8006920:	08009478 	.word	0x08009478

08006924 <__errno>:
 8006924:	4b01      	ldr	r3, [pc, #4]	; (800692c <__errno+0x8>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	24000010 	.word	0x24000010

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f002 fd1c 	bl	8009380 <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	08009864 	.word	0x08009864
 800696c:	08009864 	.word	0x08009864
 8006970:	08009864 	.word	0x08009864
 8006974:	08009868 	.word	0x08009868

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <memset>:
 8006994:	4402      	add	r2, r0
 8006996:	4603      	mov	r3, r0
 8006998:	4293      	cmp	r3, r2
 800699a:	d100      	bne.n	800699e <memset+0xa>
 800699c:	4770      	bx	lr
 800699e:	f803 1b01 	strb.w	r1, [r3], #1
 80069a2:	e7f9      	b.n	8006998 <memset+0x4>

080069a4 <__cvt>:
 80069a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069a6:	ed2d 8b02 	vpush	{d8}
 80069aa:	eeb0 8b40 	vmov.f64	d8, d0
 80069ae:	b085      	sub	sp, #20
 80069b0:	4617      	mov	r7, r2
 80069b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80069b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069b6:	ee18 2a90 	vmov	r2, s17
 80069ba:	f025 0520 	bic.w	r5, r5, #32
 80069be:	2a00      	cmp	r2, #0
 80069c0:	bfb6      	itet	lt
 80069c2:	222d      	movlt	r2, #45	; 0x2d
 80069c4:	2200      	movge	r2, #0
 80069c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80069ca:	2d46      	cmp	r5, #70	; 0x46
 80069cc:	460c      	mov	r4, r1
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	d004      	beq.n	80069dc <__cvt+0x38>
 80069d2:	2d45      	cmp	r5, #69	; 0x45
 80069d4:	d100      	bne.n	80069d8 <__cvt+0x34>
 80069d6:	3401      	adds	r4, #1
 80069d8:	2102      	movs	r1, #2
 80069da:	e000      	b.n	80069de <__cvt+0x3a>
 80069dc:	2103      	movs	r1, #3
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	ab02      	add	r3, sp, #8
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4622      	mov	r2, r4
 80069e8:	4633      	mov	r3, r6
 80069ea:	eeb0 0b48 	vmov.f64	d0, d8
 80069ee:	f000 fdf7 	bl	80075e0 <_dtoa_r>
 80069f2:	2d47      	cmp	r5, #71	; 0x47
 80069f4:	d101      	bne.n	80069fa <__cvt+0x56>
 80069f6:	07fb      	lsls	r3, r7, #31
 80069f8:	d51a      	bpl.n	8006a30 <__cvt+0x8c>
 80069fa:	2d46      	cmp	r5, #70	; 0x46
 80069fc:	eb00 0204 	add.w	r2, r0, r4
 8006a00:	d10c      	bne.n	8006a1c <__cvt+0x78>
 8006a02:	7803      	ldrb	r3, [r0, #0]
 8006a04:	2b30      	cmp	r3, #48	; 0x30
 8006a06:	d107      	bne.n	8006a18 <__cvt+0x74>
 8006a08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a10:	bf1c      	itt	ne
 8006a12:	f1c4 0401 	rsbne	r4, r4, #1
 8006a16:	6034      	strne	r4, [r6, #0]
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a24:	bf08      	it	eq
 8006a26:	9203      	streq	r2, [sp, #12]
 8006a28:	2130      	movs	r1, #48	; 0x30
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d307      	bcc.n	8006a40 <__cvt+0x9c>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a34:	1a1b      	subs	r3, r3, r0
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	b005      	add	sp, #20
 8006a3a:	ecbd 8b02 	vpop	{d8}
 8006a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a40:	1c5c      	adds	r4, r3, #1
 8006a42:	9403      	str	r4, [sp, #12]
 8006a44:	7019      	strb	r1, [r3, #0]
 8006a46:	e7f0      	b.n	8006a2a <__cvt+0x86>

08006a48 <__exponent>:
 8006a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	bfb8      	it	lt
 8006a50:	4249      	neglt	r1, r1
 8006a52:	f803 2b02 	strb.w	r2, [r3], #2
 8006a56:	bfb4      	ite	lt
 8006a58:	222d      	movlt	r2, #45	; 0x2d
 8006a5a:	222b      	movge	r2, #43	; 0x2b
 8006a5c:	2909      	cmp	r1, #9
 8006a5e:	7042      	strb	r2, [r0, #1]
 8006a60:	dd2a      	ble.n	8006ab8 <__exponent+0x70>
 8006a62:	f10d 0407 	add.w	r4, sp, #7
 8006a66:	46a4      	mov	ip, r4
 8006a68:	270a      	movs	r7, #10
 8006a6a:	46a6      	mov	lr, r4
 8006a6c:	460a      	mov	r2, r1
 8006a6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a72:	fb07 1516 	mls	r5, r7, r6, r1
 8006a76:	3530      	adds	r5, #48	; 0x30
 8006a78:	2a63      	cmp	r2, #99	; 0x63
 8006a7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a82:	4631      	mov	r1, r6
 8006a84:	dcf1      	bgt.n	8006a6a <__exponent+0x22>
 8006a86:	3130      	adds	r1, #48	; 0x30
 8006a88:	f1ae 0502 	sub.w	r5, lr, #2
 8006a8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a90:	1c44      	adds	r4, r0, #1
 8006a92:	4629      	mov	r1, r5
 8006a94:	4561      	cmp	r1, ip
 8006a96:	d30a      	bcc.n	8006aae <__exponent+0x66>
 8006a98:	f10d 0209 	add.w	r2, sp, #9
 8006a9c:	eba2 020e 	sub.w	r2, r2, lr
 8006aa0:	4565      	cmp	r5, ip
 8006aa2:	bf88      	it	hi
 8006aa4:	2200      	movhi	r2, #0
 8006aa6:	4413      	add	r3, r2
 8006aa8:	1a18      	subs	r0, r3, r0
 8006aaa:	b003      	add	sp, #12
 8006aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ab2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ab6:	e7ed      	b.n	8006a94 <__exponent+0x4c>
 8006ab8:	2330      	movs	r3, #48	; 0x30
 8006aba:	3130      	adds	r1, #48	; 0x30
 8006abc:	7083      	strb	r3, [r0, #2]
 8006abe:	70c1      	strb	r1, [r0, #3]
 8006ac0:	1d03      	adds	r3, r0, #4
 8006ac2:	e7f1      	b.n	8006aa8 <__exponent+0x60>
 8006ac4:	0000      	movs	r0, r0
	...

08006ac8 <_printf_float>:
 8006ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	b08b      	sub	sp, #44	; 0x2c
 8006ace:	460c      	mov	r4, r1
 8006ad0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	461f      	mov	r7, r3
 8006ad8:	4605      	mov	r5, r0
 8006ada:	f001 fca7 	bl	800842c <_localeconv_r>
 8006ade:	f8d0 b000 	ldr.w	fp, [r0]
 8006ae2:	4658      	mov	r0, fp
 8006ae4:	f7f9 fbfc 	bl	80002e0 <strlen>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9308      	str	r3, [sp, #32]
 8006aec:	f8d8 3000 	ldr.w	r3, [r8]
 8006af0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	3307      	adds	r3, #7
 8006af8:	f023 0307 	bic.w	r3, r3, #7
 8006afc:	f103 0108 	add.w	r1, r3, #8
 8006b00:	f8c8 1000 	str.w	r1, [r8]
 8006b04:	4682      	mov	sl, r0
 8006b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006b0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006d70 <_printf_float+0x2a8>
 8006b12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006b16:	eeb0 6bc0 	vabs.f64	d6, d0
 8006b1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8006b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b22:	dd24      	ble.n	8006b6e <_printf_float+0xa6>
 8006b24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2c:	d502      	bpl.n	8006b34 <_printf_float+0x6c>
 8006b2e:	232d      	movs	r3, #45	; 0x2d
 8006b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b34:	4b90      	ldr	r3, [pc, #576]	; (8006d78 <_printf_float+0x2b0>)
 8006b36:	4891      	ldr	r0, [pc, #580]	; (8006d7c <_printf_float+0x2b4>)
 8006b38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b3c:	bf94      	ite	ls
 8006b3e:	4698      	movls	r8, r3
 8006b40:	4680      	movhi	r8, r0
 8006b42:	2303      	movs	r3, #3
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	f022 0204 	bic.w	r2, r2, #4
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6022      	str	r2, [r4, #0]
 8006b4e:	9304      	str	r3, [sp, #16]
 8006b50:	9700      	str	r7, [sp, #0]
 8006b52:	4633      	mov	r3, r6
 8006b54:	aa09      	add	r2, sp, #36	; 0x24
 8006b56:	4621      	mov	r1, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 f9d3 	bl	8006f04 <_printf_common>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f040 808a 	bne.w	8006c78 <_printf_float+0x1b0>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	b00b      	add	sp, #44	; 0x2c
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b76:	d709      	bvc.n	8006b8c <_printf_float+0xc4>
 8006b78:	ee10 3a90 	vmov	r3, s1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfbc      	itt	lt
 8006b80:	232d      	movlt	r3, #45	; 0x2d
 8006b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b86:	487e      	ldr	r0, [pc, #504]	; (8006d80 <_printf_float+0x2b8>)
 8006b88:	4b7e      	ldr	r3, [pc, #504]	; (8006d84 <_printf_float+0x2bc>)
 8006b8a:	e7d5      	b.n	8006b38 <_printf_float+0x70>
 8006b8c:	6863      	ldr	r3, [r4, #4]
 8006b8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006b92:	9104      	str	r1, [sp, #16]
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	d13c      	bne.n	8006c12 <_printf_float+0x14a>
 8006b98:	2306      	movs	r3, #6
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	ab08      	add	r3, sp, #32
 8006ba2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006baa:	ab07      	add	r3, sp, #28
 8006bac:	6861      	ldr	r1, [r4, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	f10d 031b 	add.w	r3, sp, #27
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f7ff fef4 	bl	80069a4 <__cvt>
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	9907      	ldr	r1, [sp, #28]
 8006bc0:	2b47      	cmp	r3, #71	; 0x47
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	d108      	bne.n	8006bd8 <_printf_float+0x110>
 8006bc6:	1cc8      	adds	r0, r1, #3
 8006bc8:	db02      	blt.n	8006bd0 <_printf_float+0x108>
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	dd41      	ble.n	8006c54 <_printf_float+0x18c>
 8006bd0:	f1a9 0902 	sub.w	r9, r9, #2
 8006bd4:	fa5f f989 	uxtb.w	r9, r9
 8006bd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bdc:	d820      	bhi.n	8006c20 <_printf_float+0x158>
 8006bde:	3901      	subs	r1, #1
 8006be0:	464a      	mov	r2, r9
 8006be2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006be6:	9107      	str	r1, [sp, #28]
 8006be8:	f7ff ff2e 	bl	8006a48 <__exponent>
 8006bec:	9a08      	ldr	r2, [sp, #32]
 8006bee:	9004      	str	r0, [sp, #16]
 8006bf0:	1813      	adds	r3, r2, r0
 8006bf2:	2a01      	cmp	r2, #1
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	dc02      	bgt.n	8006bfe <_printf_float+0x136>
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	07d2      	lsls	r2, r2, #31
 8006bfc:	d501      	bpl.n	8006c02 <_printf_float+0x13a>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0a2      	beq.n	8006b50 <_printf_float+0x88>
 8006c0a:	232d      	movs	r3, #45	; 0x2d
 8006c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c10:	e79e      	b.n	8006b50 <_printf_float+0x88>
 8006c12:	9904      	ldr	r1, [sp, #16]
 8006c14:	2947      	cmp	r1, #71	; 0x47
 8006c16:	d1c1      	bne.n	8006b9c <_printf_float+0xd4>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1bf      	bne.n	8006b9c <_printf_float+0xd4>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e7bc      	b.n	8006b9a <_printf_float+0xd2>
 8006c20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c24:	d118      	bne.n	8006c58 <_printf_float+0x190>
 8006c26:	2900      	cmp	r1, #0
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	dd0b      	ble.n	8006c44 <_printf_float+0x17c>
 8006c2c:	6121      	str	r1, [r4, #16]
 8006c2e:	b913      	cbnz	r3, 8006c36 <_printf_float+0x16e>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	07d0      	lsls	r0, r2, #31
 8006c34:	d502      	bpl.n	8006c3c <_printf_float+0x174>
 8006c36:	3301      	adds	r3, #1
 8006c38:	440b      	add	r3, r1
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	e7de      	b.n	8006c02 <_printf_float+0x13a>
 8006c44:	b913      	cbnz	r3, 8006c4c <_printf_float+0x184>
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	07d2      	lsls	r2, r2, #31
 8006c4a:	d501      	bpl.n	8006c50 <_printf_float+0x188>
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	e7f4      	b.n	8006c3a <_printf_float+0x172>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7f2      	b.n	8006c3a <_printf_float+0x172>
 8006c54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c58:	9b08      	ldr	r3, [sp, #32]
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	db05      	blt.n	8006c6a <_printf_float+0x1a2>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	6121      	str	r1, [r4, #16]
 8006c62:	07d8      	lsls	r0, r3, #31
 8006c64:	d5ea      	bpl.n	8006c3c <_printf_float+0x174>
 8006c66:	1c4b      	adds	r3, r1, #1
 8006c68:	e7e7      	b.n	8006c3a <_printf_float+0x172>
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	bfd4      	ite	le
 8006c6e:	f1c1 0202 	rsble	r2, r1, #2
 8006c72:	2201      	movgt	r2, #1
 8006c74:	4413      	add	r3, r2
 8006c76:	e7e0      	b.n	8006c3a <_printf_float+0x172>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	055a      	lsls	r2, r3, #21
 8006c7c:	d407      	bmi.n	8006c8e <_printf_float+0x1c6>
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	4642      	mov	r2, r8
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d12a      	bne.n	8006ce2 <_printf_float+0x21a>
 8006c8c:	e76a      	b.n	8006b64 <_printf_float+0x9c>
 8006c8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c92:	f240 80e2 	bls.w	8006e5a <_printf_float+0x392>
 8006c96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca2:	d133      	bne.n	8006d0c <_printf_float+0x244>
 8006ca4:	4a38      	ldr	r2, [pc, #224]	; (8006d88 <_printf_float+0x2c0>)
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f af58 	beq.w	8006b64 <_printf_float+0x9c>
 8006cb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	db02      	blt.n	8006cc2 <_printf_float+0x1fa>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07d8      	lsls	r0, r3, #31
 8006cc0:	d50f      	bpl.n	8006ce2 <_printf_float+0x21a>
 8006cc2:	4653      	mov	r3, sl
 8006cc4:	465a      	mov	r2, fp
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f af49 	beq.w	8006b64 <_printf_float+0x9c>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	f104 091a 	add.w	r9, r4, #26
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	4543      	cmp	r3, r8
 8006ce0:	dc09      	bgt.n	8006cf6 <_printf_float+0x22e>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	079b      	lsls	r3, r3, #30
 8006ce6:	f100 8108 	bmi.w	8006efa <_printf_float+0x432>
 8006cea:	68e0      	ldr	r0, [r4, #12]
 8006cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	bfb8      	it	lt
 8006cf2:	4618      	movlt	r0, r3
 8006cf4:	e738      	b.n	8006b68 <_printf_float+0xa0>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	464a      	mov	r2, r9
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f af2f 	beq.w	8006b64 <_printf_float+0x9c>
 8006d06:	f108 0801 	add.w	r8, r8, #1
 8006d0a:	e7e6      	b.n	8006cda <_printf_float+0x212>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dc3c      	bgt.n	8006d8c <_printf_float+0x2c4>
 8006d12:	4a1d      	ldr	r2, [pc, #116]	; (8006d88 <_printf_float+0x2c0>)
 8006d14:	2301      	movs	r3, #1
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f43f af21 	beq.w	8006b64 <_printf_float+0x9c>
 8006d22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d102      	bne.n	8006d30 <_printf_float+0x268>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	07d9      	lsls	r1, r3, #31
 8006d2e:	d5d8      	bpl.n	8006ce2 <_printf_float+0x21a>
 8006d30:	4653      	mov	r3, sl
 8006d32:	465a      	mov	r2, fp
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af12 	beq.w	8006b64 <_printf_float+0x9c>
 8006d40:	f04f 0900 	mov.w	r9, #0
 8006d44:	f104 0a1a 	add.w	sl, r4, #26
 8006d48:	9b07      	ldr	r3, [sp, #28]
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	454b      	cmp	r3, r9
 8006d4e:	dc01      	bgt.n	8006d54 <_printf_float+0x28c>
 8006d50:	9b08      	ldr	r3, [sp, #32]
 8006d52:	e795      	b.n	8006c80 <_printf_float+0x1b8>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4652      	mov	r2, sl
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f43f af00 	beq.w	8006b64 <_printf_float+0x9c>
 8006d64:	f109 0901 	add.w	r9, r9, #1
 8006d68:	e7ee      	b.n	8006d48 <_printf_float+0x280>
 8006d6a:	bf00      	nop
 8006d6c:	f3af 8000 	nop.w
 8006d70:	ffffffff 	.word	0xffffffff
 8006d74:	7fefffff 	.word	0x7fefffff
 8006d78:	08009484 	.word	0x08009484
 8006d7c:	08009488 	.word	0x08009488
 8006d80:	08009490 	.word	0x08009490
 8006d84:	0800948c 	.word	0x0800948c
 8006d88:	08009494 	.word	0x08009494
 8006d8c:	9a08      	ldr	r2, [sp, #32]
 8006d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d90:	429a      	cmp	r2, r3
 8006d92:	bfa8      	it	ge
 8006d94:	461a      	movge	r2, r3
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	4691      	mov	r9, r2
 8006d9a:	dc38      	bgt.n	8006e0e <_printf_float+0x346>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da4:	f104 021a 	add.w	r2, r4, #26
 8006da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006daa:	9905      	ldr	r1, [sp, #20]
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	eba3 0309 	sub.w	r3, r3, r9
 8006db2:	428b      	cmp	r3, r1
 8006db4:	dc33      	bgt.n	8006e1e <_printf_float+0x356>
 8006db6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	db3c      	blt.n	8006e38 <_printf_float+0x370>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	07da      	lsls	r2, r3, #31
 8006dc2:	d439      	bmi.n	8006e38 <_printf_float+0x370>
 8006dc4:	9b08      	ldr	r3, [sp, #32]
 8006dc6:	9a04      	ldr	r2, [sp, #16]
 8006dc8:	9907      	ldr	r1, [sp, #28]
 8006dca:	1a9a      	subs	r2, r3, r2
 8006dcc:	eba3 0901 	sub.w	r9, r3, r1
 8006dd0:	4591      	cmp	r9, r2
 8006dd2:	bfa8      	it	ge
 8006dd4:	4691      	movge	r9, r2
 8006dd6:	f1b9 0f00 	cmp.w	r9, #0
 8006dda:	dc35      	bgt.n	8006e48 <_printf_float+0x380>
 8006ddc:	f04f 0800 	mov.w	r8, #0
 8006de0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de4:	f104 0a1a 	add.w	sl, r4, #26
 8006de8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	eba3 0309 	sub.w	r3, r3, r9
 8006df2:	4543      	cmp	r3, r8
 8006df4:	f77f af75 	ble.w	8006ce2 <_printf_float+0x21a>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f aeae 	beq.w	8006b64 <_printf_float+0x9c>
 8006e08:	f108 0801 	add.w	r8, r8, #1
 8006e0c:	e7ec      	b.n	8006de8 <_printf_float+0x320>
 8006e0e:	4613      	mov	r3, r2
 8006e10:	4631      	mov	r1, r6
 8006e12:	4642      	mov	r2, r8
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d1bf      	bne.n	8006d9c <_printf_float+0x2d4>
 8006e1c:	e6a2      	b.n	8006b64 <_printf_float+0x9c>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	9204      	str	r2, [sp, #16]
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f ae9b 	beq.w	8006b64 <_printf_float+0x9c>
 8006e2e:	9b05      	ldr	r3, [sp, #20]
 8006e30:	9a04      	ldr	r2, [sp, #16]
 8006e32:	3301      	adds	r3, #1
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	e7b7      	b.n	8006da8 <_printf_float+0x2e0>
 8006e38:	4653      	mov	r3, sl
 8006e3a:	465a      	mov	r2, fp
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	d1be      	bne.n	8006dc4 <_printf_float+0x2fc>
 8006e46:	e68d      	b.n	8006b64 <_printf_float+0x9c>
 8006e48:	9a04      	ldr	r2, [sp, #16]
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	4442      	add	r2, r8
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d1c1      	bne.n	8006ddc <_printf_float+0x314>
 8006e58:	e684      	b.n	8006b64 <_printf_float+0x9c>
 8006e5a:	9a08      	ldr	r2, [sp, #32]
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	dc01      	bgt.n	8006e64 <_printf_float+0x39c>
 8006e60:	07db      	lsls	r3, r3, #31
 8006e62:	d537      	bpl.n	8006ed4 <_printf_float+0x40c>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4642      	mov	r2, r8
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f ae78 	beq.w	8006b64 <_printf_float+0x9c>
 8006e74:	4653      	mov	r3, sl
 8006e76:	465a      	mov	r2, fp
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f ae70 	beq.w	8006b64 <_printf_float+0x9c>
 8006e84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e90:	d01b      	beq.n	8006eca <_printf_float+0x402>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	f108 0201 	add.w	r2, r8, #1
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d10e      	bne.n	8006ec2 <_printf_float+0x3fa>
 8006ea4:	e65e      	b.n	8006b64 <_printf_float+0x9c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	464a      	mov	r2, r9
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae57 	beq.w	8006b64 <_printf_float+0x9c>
 8006eb6:	f108 0801 	add.w	r8, r8, #1
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	4543      	cmp	r3, r8
 8006ec0:	dcf1      	bgt.n	8006ea6 <_printf_float+0x3de>
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ec8:	e6db      	b.n	8006c82 <_printf_float+0x1ba>
 8006eca:	f04f 0800 	mov.w	r8, #0
 8006ece:	f104 091a 	add.w	r9, r4, #26
 8006ed2:	e7f2      	b.n	8006eba <_printf_float+0x3f2>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	e7df      	b.n	8006e9a <_printf_float+0x3d2>
 8006eda:	2301      	movs	r3, #1
 8006edc:	464a      	mov	r2, r9
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f43f ae3d 	beq.w	8006b64 <_printf_float+0x9c>
 8006eea:	f108 0801 	add.w	r8, r8, #1
 8006eee:	68e3      	ldr	r3, [r4, #12]
 8006ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef2:	1a5b      	subs	r3, r3, r1
 8006ef4:	4543      	cmp	r3, r8
 8006ef6:	dcf0      	bgt.n	8006eda <_printf_float+0x412>
 8006ef8:	e6f7      	b.n	8006cea <_printf_float+0x222>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	f104 0919 	add.w	r9, r4, #25
 8006f02:	e7f4      	b.n	8006eee <_printf_float+0x426>

08006f04 <_printf_common>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	4616      	mov	r6, r2
 8006f0a:	4699      	mov	r9, r3
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	bfb8      	it	lt
 8006f18:	4613      	movlt	r3, r2
 8006f1a:	6033      	str	r3, [r6, #0]
 8006f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f20:	4607      	mov	r7, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	b10a      	cbz	r2, 8006f2a <_printf_common+0x26>
 8006f26:	3301      	adds	r3, #1
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	0699      	lsls	r1, r3, #26
 8006f2e:	bf42      	ittt	mi
 8006f30:	6833      	ldrmi	r3, [r6, #0]
 8006f32:	3302      	addmi	r3, #2
 8006f34:	6033      	strmi	r3, [r6, #0]
 8006f36:	6825      	ldr	r5, [r4, #0]
 8006f38:	f015 0506 	ands.w	r5, r5, #6
 8006f3c:	d106      	bne.n	8006f4c <_printf_common+0x48>
 8006f3e:	f104 0a19 	add.w	sl, r4, #25
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	6832      	ldr	r2, [r6, #0]
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	dc26      	bgt.n	8006f9a <_printf_common+0x96>
 8006f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f50:	1e13      	subs	r3, r2, #0
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	bf18      	it	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	0692      	lsls	r2, r2, #26
 8006f5a:	d42b      	bmi.n	8006fb4 <_printf_common+0xb0>
 8006f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f60:	4649      	mov	r1, r9
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c0      	blx	r8
 8006f66:	3001      	adds	r0, #1
 8006f68:	d01e      	beq.n	8006fa8 <_printf_common+0xa4>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	68e5      	ldr	r5, [r4, #12]
 8006f6e:	6832      	ldr	r2, [r6, #0]
 8006f70:	f003 0306 	and.w	r3, r3, #6
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	bf08      	it	eq
 8006f78:	1aad      	subeq	r5, r5, r2
 8006f7a:	68a3      	ldr	r3, [r4, #8]
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	bf0c      	ite	eq
 8006f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f84:	2500      	movne	r5, #0
 8006f86:	4293      	cmp	r3, r2
 8006f88:	bfc4      	itt	gt
 8006f8a:	1a9b      	subgt	r3, r3, r2
 8006f8c:	18ed      	addgt	r5, r5, r3
 8006f8e:	2600      	movs	r6, #0
 8006f90:	341a      	adds	r4, #26
 8006f92:	42b5      	cmp	r5, r6
 8006f94:	d11a      	bne.n	8006fcc <_printf_common+0xc8>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e008      	b.n	8006fac <_printf_common+0xa8>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	47c0      	blx	r8
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d103      	bne.n	8006fb0 <_printf_common+0xac>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	e7c6      	b.n	8006f42 <_printf_common+0x3e>
 8006fb4:	18e1      	adds	r1, r4, r3
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	2030      	movs	r0, #48	; 0x30
 8006fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fbe:	4422      	add	r2, r4
 8006fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fc8:	3302      	adds	r3, #2
 8006fca:	e7c7      	b.n	8006f5c <_printf_common+0x58>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4622      	mov	r2, r4
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	47c0      	blx	r8
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d0e6      	beq.n	8006fa8 <_printf_common+0xa4>
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7d9      	b.n	8006f92 <_printf_common+0x8e>
	...

08006fe0 <_printf_i>:
 8006fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	7e0f      	ldrb	r7, [r1, #24]
 8006fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fe8:	2f78      	cmp	r7, #120	; 0x78
 8006fea:	4691      	mov	r9, r2
 8006fec:	4680      	mov	r8, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ff6:	d807      	bhi.n	8007008 <_printf_i+0x28>
 8006ff8:	2f62      	cmp	r7, #98	; 0x62
 8006ffa:	d80a      	bhi.n	8007012 <_printf_i+0x32>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	f000 80d8 	beq.w	80071b2 <_printf_i+0x1d2>
 8007002:	2f58      	cmp	r7, #88	; 0x58
 8007004:	f000 80a3 	beq.w	800714e <_printf_i+0x16e>
 8007008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800700c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007010:	e03a      	b.n	8007088 <_printf_i+0xa8>
 8007012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007016:	2b15      	cmp	r3, #21
 8007018:	d8f6      	bhi.n	8007008 <_printf_i+0x28>
 800701a:	a101      	add	r1, pc, #4	; (adr r1, 8007020 <_printf_i+0x40>)
 800701c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007020:	08007079 	.word	0x08007079
 8007024:	0800708d 	.word	0x0800708d
 8007028:	08007009 	.word	0x08007009
 800702c:	08007009 	.word	0x08007009
 8007030:	08007009 	.word	0x08007009
 8007034:	08007009 	.word	0x08007009
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007009 	.word	0x08007009
 8007040:	08007009 	.word	0x08007009
 8007044:	08007009 	.word	0x08007009
 8007048:	08007009 	.word	0x08007009
 800704c:	08007199 	.word	0x08007199
 8007050:	080070bd 	.word	0x080070bd
 8007054:	0800717b 	.word	0x0800717b
 8007058:	08007009 	.word	0x08007009
 800705c:	08007009 	.word	0x08007009
 8007060:	080071bb 	.word	0x080071bb
 8007064:	08007009 	.word	0x08007009
 8007068:	080070bd 	.word	0x080070bd
 800706c:	08007009 	.word	0x08007009
 8007070:	08007009 	.word	0x08007009
 8007074:	08007183 	.word	0x08007183
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	602a      	str	r2, [r5, #0]
 8007080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007088:	2301      	movs	r3, #1
 800708a:	e0a3      	b.n	80071d4 <_printf_i+0x1f4>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	6829      	ldr	r1, [r5, #0]
 8007090:	0606      	lsls	r6, r0, #24
 8007092:	f101 0304 	add.w	r3, r1, #4
 8007096:	d50a      	bpl.n	80070ae <_printf_i+0xce>
 8007098:	680e      	ldr	r6, [r1, #0]
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	2e00      	cmp	r6, #0
 800709e:	da03      	bge.n	80070a8 <_printf_i+0xc8>
 80070a0:	232d      	movs	r3, #45	; 0x2d
 80070a2:	4276      	negs	r6, r6
 80070a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a8:	485e      	ldr	r0, [pc, #376]	; (8007224 <_printf_i+0x244>)
 80070aa:	230a      	movs	r3, #10
 80070ac:	e019      	b.n	80070e2 <_printf_i+0x102>
 80070ae:	680e      	ldr	r6, [r1, #0]
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070b6:	bf18      	it	ne
 80070b8:	b236      	sxthne	r6, r6
 80070ba:	e7ef      	b.n	800709c <_printf_i+0xbc>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	6029      	str	r1, [r5, #0]
 80070c4:	0601      	lsls	r1, r0, #24
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0xec>
 80070c8:	681e      	ldr	r6, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <_printf_i+0xf2>
 80070cc:	0646      	lsls	r6, r0, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0xe8>
 80070d0:	881e      	ldrh	r6, [r3, #0]
 80070d2:	4854      	ldr	r0, [pc, #336]	; (8007224 <_printf_i+0x244>)
 80070d4:	2f6f      	cmp	r7, #111	; 0x6f
 80070d6:	bf0c      	ite	eq
 80070d8:	2308      	moveq	r3, #8
 80070da:	230a      	movne	r3, #10
 80070dc:	2100      	movs	r1, #0
 80070de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070e2:	6865      	ldr	r5, [r4, #4]
 80070e4:	60a5      	str	r5, [r4, #8]
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	bfa2      	ittt	ge
 80070ea:	6821      	ldrge	r1, [r4, #0]
 80070ec:	f021 0104 	bicge.w	r1, r1, #4
 80070f0:	6021      	strge	r1, [r4, #0]
 80070f2:	b90e      	cbnz	r6, 80070f8 <_printf_i+0x118>
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	d04d      	beq.n	8007194 <_printf_i+0x1b4>
 80070f8:	4615      	mov	r5, r2
 80070fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80070fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007102:	5dc7      	ldrb	r7, [r0, r7]
 8007104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007108:	4637      	mov	r7, r6
 800710a:	42bb      	cmp	r3, r7
 800710c:	460e      	mov	r6, r1
 800710e:	d9f4      	bls.n	80070fa <_printf_i+0x11a>
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10b      	bne.n	800712c <_printf_i+0x14c>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	07de      	lsls	r6, r3, #31
 8007118:	d508      	bpl.n	800712c <_printf_i+0x14c>
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	6861      	ldr	r1, [r4, #4]
 800711e:	4299      	cmp	r1, r3
 8007120:	bfde      	ittt	le
 8007122:	2330      	movle	r3, #48	; 0x30
 8007124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800712c:	1b52      	subs	r2, r2, r5
 800712e:	6122      	str	r2, [r4, #16]
 8007130:	f8cd a000 	str.w	sl, [sp]
 8007134:	464b      	mov	r3, r9
 8007136:	aa03      	add	r2, sp, #12
 8007138:	4621      	mov	r1, r4
 800713a:	4640      	mov	r0, r8
 800713c:	f7ff fee2 	bl	8006f04 <_printf_common>
 8007140:	3001      	adds	r0, #1
 8007142:	d14c      	bne.n	80071de <_printf_i+0x1fe>
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	b004      	add	sp, #16
 800714a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714e:	4835      	ldr	r0, [pc, #212]	; (8007224 <_printf_i+0x244>)
 8007150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007154:	6829      	ldr	r1, [r5, #0]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	f851 6b04 	ldr.w	r6, [r1], #4
 800715c:	6029      	str	r1, [r5, #0]
 800715e:	061d      	lsls	r5, r3, #24
 8007160:	d514      	bpl.n	800718c <_printf_i+0x1ac>
 8007162:	07df      	lsls	r7, r3, #31
 8007164:	bf44      	itt	mi
 8007166:	f043 0320 	orrmi.w	r3, r3, #32
 800716a:	6023      	strmi	r3, [r4, #0]
 800716c:	b91e      	cbnz	r6, 8007176 <_printf_i+0x196>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f023 0320 	bic.w	r3, r3, #32
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	2310      	movs	r3, #16
 8007178:	e7b0      	b.n	80070dc <_printf_i+0xfc>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f043 0320 	orr.w	r3, r3, #32
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	2378      	movs	r3, #120	; 0x78
 8007184:	4828      	ldr	r0, [pc, #160]	; (8007228 <_printf_i+0x248>)
 8007186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800718a:	e7e3      	b.n	8007154 <_printf_i+0x174>
 800718c:	0659      	lsls	r1, r3, #25
 800718e:	bf48      	it	mi
 8007190:	b2b6      	uxthmi	r6, r6
 8007192:	e7e6      	b.n	8007162 <_printf_i+0x182>
 8007194:	4615      	mov	r5, r2
 8007196:	e7bb      	b.n	8007110 <_printf_i+0x130>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6826      	ldr	r6, [r4, #0]
 800719c:	6961      	ldr	r1, [r4, #20]
 800719e:	1d18      	adds	r0, r3, #4
 80071a0:	6028      	str	r0, [r5, #0]
 80071a2:	0635      	lsls	r5, r6, #24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0x1cc>
 80071a8:	6019      	str	r1, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <_printf_i+0x1d2>
 80071ac:	0670      	lsls	r0, r6, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0x1c8>
 80071b0:	8019      	strh	r1, [r3, #0]
 80071b2:	2300      	movs	r3, #0
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	4615      	mov	r5, r2
 80071b8:	e7ba      	b.n	8007130 <_printf_i+0x150>
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	1d1a      	adds	r2, r3, #4
 80071be:	602a      	str	r2, [r5, #0]
 80071c0:	681d      	ldr	r5, [r3, #0]
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	2100      	movs	r1, #0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7f9 f892 	bl	80002f0 <memchr>
 80071cc:	b108      	cbz	r0, 80071d2 <_printf_i+0x1f2>
 80071ce:	1b40      	subs	r0, r0, r5
 80071d0:	6060      	str	r0, [r4, #4]
 80071d2:	6863      	ldr	r3, [r4, #4]
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	2300      	movs	r3, #0
 80071d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071dc:	e7a8      	b.n	8007130 <_printf_i+0x150>
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4649      	mov	r1, r9
 80071e4:	4640      	mov	r0, r8
 80071e6:	47d0      	blx	sl
 80071e8:	3001      	adds	r0, #1
 80071ea:	d0ab      	beq.n	8007144 <_printf_i+0x164>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	079b      	lsls	r3, r3, #30
 80071f0:	d413      	bmi.n	800721a <_printf_i+0x23a>
 80071f2:	68e0      	ldr	r0, [r4, #12]
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	4298      	cmp	r0, r3
 80071f8:	bfb8      	it	lt
 80071fa:	4618      	movlt	r0, r3
 80071fc:	e7a4      	b.n	8007148 <_printf_i+0x168>
 80071fe:	2301      	movs	r3, #1
 8007200:	4632      	mov	r2, r6
 8007202:	4649      	mov	r1, r9
 8007204:	4640      	mov	r0, r8
 8007206:	47d0      	blx	sl
 8007208:	3001      	adds	r0, #1
 800720a:	d09b      	beq.n	8007144 <_printf_i+0x164>
 800720c:	3501      	adds	r5, #1
 800720e:	68e3      	ldr	r3, [r4, #12]
 8007210:	9903      	ldr	r1, [sp, #12]
 8007212:	1a5b      	subs	r3, r3, r1
 8007214:	42ab      	cmp	r3, r5
 8007216:	dcf2      	bgt.n	80071fe <_printf_i+0x21e>
 8007218:	e7eb      	b.n	80071f2 <_printf_i+0x212>
 800721a:	2500      	movs	r5, #0
 800721c:	f104 0619 	add.w	r6, r4, #25
 8007220:	e7f5      	b.n	800720e <_printf_i+0x22e>
 8007222:	bf00      	nop
 8007224:	08009496 	.word	0x08009496
 8007228:	080094a7 	.word	0x080094a7

0800722c <iprintf>:
 800722c:	b40f      	push	{r0, r1, r2, r3}
 800722e:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <iprintf+0x2c>)
 8007230:	b513      	push	{r0, r1, r4, lr}
 8007232:	681c      	ldr	r4, [r3, #0]
 8007234:	b124      	cbz	r4, 8007240 <iprintf+0x14>
 8007236:	69a3      	ldr	r3, [r4, #24]
 8007238:	b913      	cbnz	r3, 8007240 <iprintf+0x14>
 800723a:	4620      	mov	r0, r4
 800723c:	f001 f858 	bl	80082f0 <__sinit>
 8007240:	ab05      	add	r3, sp, #20
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	68a1      	ldr	r1, [r4, #8]
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	4620      	mov	r0, r4
 800724a:	f001 fe07 	bl	8008e5c <_vfiprintf_r>
 800724e:	b002      	add	sp, #8
 8007250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007254:	b004      	add	sp, #16
 8007256:	4770      	bx	lr
 8007258:	24000010 	.word	0x24000010

0800725c <_puts_r>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	460e      	mov	r6, r1
 8007260:	4605      	mov	r5, r0
 8007262:	b118      	cbz	r0, 800726c <_puts_r+0x10>
 8007264:	6983      	ldr	r3, [r0, #24]
 8007266:	b90b      	cbnz	r3, 800726c <_puts_r+0x10>
 8007268:	f001 f842 	bl	80082f0 <__sinit>
 800726c:	69ab      	ldr	r3, [r5, #24]
 800726e:	68ac      	ldr	r4, [r5, #8]
 8007270:	b913      	cbnz	r3, 8007278 <_puts_r+0x1c>
 8007272:	4628      	mov	r0, r5
 8007274:	f001 f83c 	bl	80082f0 <__sinit>
 8007278:	4b2c      	ldr	r3, [pc, #176]	; (800732c <_puts_r+0xd0>)
 800727a:	429c      	cmp	r4, r3
 800727c:	d120      	bne.n	80072c0 <_puts_r+0x64>
 800727e:	686c      	ldr	r4, [r5, #4]
 8007280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007282:	07db      	lsls	r3, r3, #31
 8007284:	d405      	bmi.n	8007292 <_puts_r+0x36>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	0598      	lsls	r0, r3, #22
 800728a:	d402      	bmi.n	8007292 <_puts_r+0x36>
 800728c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728e:	f001 f8d2 	bl	8008436 <__retarget_lock_acquire_recursive>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	0719      	lsls	r1, r3, #28
 8007296:	d51d      	bpl.n	80072d4 <_puts_r+0x78>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b1db      	cbz	r3, 80072d4 <_puts_r+0x78>
 800729c:	3e01      	subs	r6, #1
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	bb39      	cbnz	r1, 80072fa <_puts_r+0x9e>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da38      	bge.n	8007320 <_puts_r+0xc4>
 80072ae:	4622      	mov	r2, r4
 80072b0:	210a      	movs	r1, #10
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 f848 	bl	8007348 <__swbuf_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d011      	beq.n	80072e0 <_puts_r+0x84>
 80072bc:	250a      	movs	r5, #10
 80072be:	e011      	b.n	80072e4 <_puts_r+0x88>
 80072c0:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <_puts_r+0xd4>)
 80072c2:	429c      	cmp	r4, r3
 80072c4:	d101      	bne.n	80072ca <_puts_r+0x6e>
 80072c6:	68ac      	ldr	r4, [r5, #8]
 80072c8:	e7da      	b.n	8007280 <_puts_r+0x24>
 80072ca:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <_puts_r+0xd8>)
 80072cc:	429c      	cmp	r4, r3
 80072ce:	bf08      	it	eq
 80072d0:	68ec      	ldreq	r4, [r5, #12]
 80072d2:	e7d5      	b.n	8007280 <_puts_r+0x24>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 f888 	bl	80073ec <__swsetup_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d0dd      	beq.n	800729c <_puts_r+0x40>
 80072e0:	f04f 35ff 	mov.w	r5, #4294967295
 80072e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072e6:	07da      	lsls	r2, r3, #31
 80072e8:	d405      	bmi.n	80072f6 <_puts_r+0x9a>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	059b      	lsls	r3, r3, #22
 80072ee:	d402      	bmi.n	80072f6 <_puts_r+0x9a>
 80072f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072f2:	f001 f8a1 	bl	8008438 <__retarget_lock_release_recursive>
 80072f6:	4628      	mov	r0, r5
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da04      	bge.n	8007308 <_puts_r+0xac>
 80072fe:	69a2      	ldr	r2, [r4, #24]
 8007300:	429a      	cmp	r2, r3
 8007302:	dc06      	bgt.n	8007312 <_puts_r+0xb6>
 8007304:	290a      	cmp	r1, #10
 8007306:	d004      	beq.n	8007312 <_puts_r+0xb6>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	7019      	strb	r1, [r3, #0]
 8007310:	e7c5      	b.n	800729e <_puts_r+0x42>
 8007312:	4622      	mov	r2, r4
 8007314:	4628      	mov	r0, r5
 8007316:	f000 f817 	bl	8007348 <__swbuf_r>
 800731a:	3001      	adds	r0, #1
 800731c:	d1bf      	bne.n	800729e <_puts_r+0x42>
 800731e:	e7df      	b.n	80072e0 <_puts_r+0x84>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	250a      	movs	r5, #10
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	6022      	str	r2, [r4, #0]
 8007328:	701d      	strb	r5, [r3, #0]
 800732a:	e7db      	b.n	80072e4 <_puts_r+0x88>
 800732c:	08009568 	.word	0x08009568
 8007330:	08009588 	.word	0x08009588
 8007334:	08009548 	.word	0x08009548

08007338 <puts>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <puts+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f7ff bf8d 	b.w	800725c <_puts_r>
 8007342:	bf00      	nop
 8007344:	24000010 	.word	0x24000010

08007348 <__swbuf_r>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	460e      	mov	r6, r1
 800734c:	4614      	mov	r4, r2
 800734e:	4605      	mov	r5, r0
 8007350:	b118      	cbz	r0, 800735a <__swbuf_r+0x12>
 8007352:	6983      	ldr	r3, [r0, #24]
 8007354:	b90b      	cbnz	r3, 800735a <__swbuf_r+0x12>
 8007356:	f000 ffcb 	bl	80082f0 <__sinit>
 800735a:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <__swbuf_r+0x98>)
 800735c:	429c      	cmp	r4, r3
 800735e:	d12b      	bne.n	80073b8 <__swbuf_r+0x70>
 8007360:	686c      	ldr	r4, [r5, #4]
 8007362:	69a3      	ldr	r3, [r4, #24]
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	071a      	lsls	r2, r3, #28
 800736a:	d52f      	bpl.n	80073cc <__swbuf_r+0x84>
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	b36b      	cbz	r3, 80073cc <__swbuf_r+0x84>
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	1ac0      	subs	r0, r0, r3
 8007376:	6963      	ldr	r3, [r4, #20]
 8007378:	b2f6      	uxtb	r6, r6
 800737a:	4283      	cmp	r3, r0
 800737c:	4637      	mov	r7, r6
 800737e:	dc04      	bgt.n	800738a <__swbuf_r+0x42>
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f000 ff20 	bl	80081c8 <_fflush_r>
 8007388:	bb30      	cbnz	r0, 80073d8 <__swbuf_r+0x90>
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	3b01      	subs	r3, #1
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	6022      	str	r2, [r4, #0]
 8007396:	701e      	strb	r6, [r3, #0]
 8007398:	6963      	ldr	r3, [r4, #20]
 800739a:	3001      	adds	r0, #1
 800739c:	4283      	cmp	r3, r0
 800739e:	d004      	beq.n	80073aa <__swbuf_r+0x62>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	07db      	lsls	r3, r3, #31
 80073a4:	d506      	bpl.n	80073b4 <__swbuf_r+0x6c>
 80073a6:	2e0a      	cmp	r6, #10
 80073a8:	d104      	bne.n	80073b4 <__swbuf_r+0x6c>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4628      	mov	r0, r5
 80073ae:	f000 ff0b 	bl	80081c8 <_fflush_r>
 80073b2:	b988      	cbnz	r0, 80073d8 <__swbuf_r+0x90>
 80073b4:	4638      	mov	r0, r7
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <__swbuf_r+0x9c>)
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d101      	bne.n	80073c2 <__swbuf_r+0x7a>
 80073be:	68ac      	ldr	r4, [r5, #8]
 80073c0:	e7cf      	b.n	8007362 <__swbuf_r+0x1a>
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <__swbuf_r+0xa0>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	bf08      	it	eq
 80073c8:	68ec      	ldreq	r4, [r5, #12]
 80073ca:	e7ca      	b.n	8007362 <__swbuf_r+0x1a>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f80c 	bl	80073ec <__swsetup_r>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d0cb      	beq.n	8007370 <__swbuf_r+0x28>
 80073d8:	f04f 37ff 	mov.w	r7, #4294967295
 80073dc:	e7ea      	b.n	80073b4 <__swbuf_r+0x6c>
 80073de:	bf00      	nop
 80073e0:	08009568 	.word	0x08009568
 80073e4:	08009588 	.word	0x08009588
 80073e8:	08009548 	.word	0x08009548

080073ec <__swsetup_r>:
 80073ec:	4b32      	ldr	r3, [pc, #200]	; (80074b8 <__swsetup_r+0xcc>)
 80073ee:	b570      	push	{r4, r5, r6, lr}
 80073f0:	681d      	ldr	r5, [r3, #0]
 80073f2:	4606      	mov	r6, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	b125      	cbz	r5, 8007402 <__swsetup_r+0x16>
 80073f8:	69ab      	ldr	r3, [r5, #24]
 80073fa:	b913      	cbnz	r3, 8007402 <__swsetup_r+0x16>
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 ff77 	bl	80082f0 <__sinit>
 8007402:	4b2e      	ldr	r3, [pc, #184]	; (80074bc <__swsetup_r+0xd0>)
 8007404:	429c      	cmp	r4, r3
 8007406:	d10f      	bne.n	8007428 <__swsetup_r+0x3c>
 8007408:	686c      	ldr	r4, [r5, #4]
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007410:	0719      	lsls	r1, r3, #28
 8007412:	d42c      	bmi.n	800746e <__swsetup_r+0x82>
 8007414:	06dd      	lsls	r5, r3, #27
 8007416:	d411      	bmi.n	800743c <__swsetup_r+0x50>
 8007418:	2309      	movs	r3, #9
 800741a:	6033      	str	r3, [r6, #0]
 800741c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	e03e      	b.n	80074a6 <__swsetup_r+0xba>
 8007428:	4b25      	ldr	r3, [pc, #148]	; (80074c0 <__swsetup_r+0xd4>)
 800742a:	429c      	cmp	r4, r3
 800742c:	d101      	bne.n	8007432 <__swsetup_r+0x46>
 800742e:	68ac      	ldr	r4, [r5, #8]
 8007430:	e7eb      	b.n	800740a <__swsetup_r+0x1e>
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <__swsetup_r+0xd8>)
 8007434:	429c      	cmp	r4, r3
 8007436:	bf08      	it	eq
 8007438:	68ec      	ldreq	r4, [r5, #12]
 800743a:	e7e6      	b.n	800740a <__swsetup_r+0x1e>
 800743c:	0758      	lsls	r0, r3, #29
 800743e:	d512      	bpl.n	8007466 <__swsetup_r+0x7a>
 8007440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007442:	b141      	cbz	r1, 8007456 <__swsetup_r+0x6a>
 8007444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007448:	4299      	cmp	r1, r3
 800744a:	d002      	beq.n	8007452 <__swsetup_r+0x66>
 800744c:	4630      	mov	r0, r6
 800744e:	f001 fbfb 	bl	8008c48 <_free_r>
 8007452:	2300      	movs	r3, #0
 8007454:	6363      	str	r3, [r4, #52]	; 0x34
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	2300      	movs	r3, #0
 8007460:	6063      	str	r3, [r4, #4]
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f043 0308 	orr.w	r3, r3, #8
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	b94b      	cbnz	r3, 8007486 <__swsetup_r+0x9a>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800747c:	d003      	beq.n	8007486 <__swsetup_r+0x9a>
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	f000 ffff 	bl	8008484 <__smakebuf_r>
 8007486:	89a0      	ldrh	r0, [r4, #12]
 8007488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800748c:	f010 0301 	ands.w	r3, r0, #1
 8007490:	d00a      	beq.n	80074a8 <__swsetup_r+0xbc>
 8007492:	2300      	movs	r3, #0
 8007494:	60a3      	str	r3, [r4, #8]
 8007496:	6963      	ldr	r3, [r4, #20]
 8007498:	425b      	negs	r3, r3
 800749a:	61a3      	str	r3, [r4, #24]
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	b943      	cbnz	r3, 80074b2 <__swsetup_r+0xc6>
 80074a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074a4:	d1ba      	bne.n	800741c <__swsetup_r+0x30>
 80074a6:	bd70      	pop	{r4, r5, r6, pc}
 80074a8:	0781      	lsls	r1, r0, #30
 80074aa:	bf58      	it	pl
 80074ac:	6963      	ldrpl	r3, [r4, #20]
 80074ae:	60a3      	str	r3, [r4, #8]
 80074b0:	e7f4      	b.n	800749c <__swsetup_r+0xb0>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e7f7      	b.n	80074a6 <__swsetup_r+0xba>
 80074b6:	bf00      	nop
 80074b8:	24000010 	.word	0x24000010
 80074bc:	08009568 	.word	0x08009568
 80074c0:	08009588 	.word	0x08009588
 80074c4:	08009548 	.word	0x08009548

080074c8 <quorem>:
 80074c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	6903      	ldr	r3, [r0, #16]
 80074ce:	690c      	ldr	r4, [r1, #16]
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	4607      	mov	r7, r0
 80074d4:	f2c0 8081 	blt.w	80075da <quorem+0x112>
 80074d8:	3c01      	subs	r4, #1
 80074da:	f101 0814 	add.w	r8, r1, #20
 80074de:	f100 0514 	add.w	r5, r0, #20
 80074e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074f0:	3301      	adds	r3, #1
 80074f2:	429a      	cmp	r2, r3
 80074f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007500:	d331      	bcc.n	8007566 <quorem+0x9e>
 8007502:	f04f 0e00 	mov.w	lr, #0
 8007506:	4640      	mov	r0, r8
 8007508:	46ac      	mov	ip, r5
 800750a:	46f2      	mov	sl, lr
 800750c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007510:	b293      	uxth	r3, r2
 8007512:	fb06 e303 	mla	r3, r6, r3, lr
 8007516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800751a:	b29b      	uxth	r3, r3
 800751c:	ebaa 0303 	sub.w	r3, sl, r3
 8007520:	f8dc a000 	ldr.w	sl, [ip]
 8007524:	0c12      	lsrs	r2, r2, #16
 8007526:	fa13 f38a 	uxtah	r3, r3, sl
 800752a:	fb06 e202 	mla	r2, r6, r2, lr
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	9b00      	ldr	r3, [sp, #0]
 8007532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007536:	b292      	uxth	r2, r2
 8007538:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800753c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007540:	f8bd 3000 	ldrh.w	r3, [sp]
 8007544:	4581      	cmp	r9, r0
 8007546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800754a:	f84c 3b04 	str.w	r3, [ip], #4
 800754e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007552:	d2db      	bcs.n	800750c <quorem+0x44>
 8007554:	f855 300b 	ldr.w	r3, [r5, fp]
 8007558:	b92b      	cbnz	r3, 8007566 <quorem+0x9e>
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	3b04      	subs	r3, #4
 800755e:	429d      	cmp	r5, r3
 8007560:	461a      	mov	r2, r3
 8007562:	d32e      	bcc.n	80075c2 <quorem+0xfa>
 8007564:	613c      	str	r4, [r7, #16]
 8007566:	4638      	mov	r0, r7
 8007568:	f001 fa56 	bl	8008a18 <__mcmp>
 800756c:	2800      	cmp	r0, #0
 800756e:	db24      	blt.n	80075ba <quorem+0xf2>
 8007570:	3601      	adds	r6, #1
 8007572:	4628      	mov	r0, r5
 8007574:	f04f 0c00 	mov.w	ip, #0
 8007578:	f858 2b04 	ldr.w	r2, [r8], #4
 800757c:	f8d0 e000 	ldr.w	lr, [r0]
 8007580:	b293      	uxth	r3, r2
 8007582:	ebac 0303 	sub.w	r3, ip, r3
 8007586:	0c12      	lsrs	r2, r2, #16
 8007588:	fa13 f38e 	uxtah	r3, r3, lr
 800758c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800759a:	45c1      	cmp	r9, r8
 800759c:	f840 3b04 	str.w	r3, [r0], #4
 80075a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075a4:	d2e8      	bcs.n	8007578 <quorem+0xb0>
 80075a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ae:	b922      	cbnz	r2, 80075ba <quorem+0xf2>
 80075b0:	3b04      	subs	r3, #4
 80075b2:	429d      	cmp	r5, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	d30a      	bcc.n	80075ce <quorem+0x106>
 80075b8:	613c      	str	r4, [r7, #16]
 80075ba:	4630      	mov	r0, r6
 80075bc:	b003      	add	sp, #12
 80075be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	3b04      	subs	r3, #4
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	d1cc      	bne.n	8007564 <quorem+0x9c>
 80075ca:	3c01      	subs	r4, #1
 80075cc:	e7c7      	b.n	800755e <quorem+0x96>
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	3b04      	subs	r3, #4
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	d1f0      	bne.n	80075b8 <quorem+0xf0>
 80075d6:	3c01      	subs	r4, #1
 80075d8:	e7eb      	b.n	80075b2 <quorem+0xea>
 80075da:	2000      	movs	r0, #0
 80075dc:	e7ee      	b.n	80075bc <quorem+0xf4>
	...

080075e0 <_dtoa_r>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	ed2d 8b02 	vpush	{d8}
 80075e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075ea:	b091      	sub	sp, #68	; 0x44
 80075ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075f0:	ec59 8b10 	vmov	r8, r9, d0
 80075f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80075f6:	9106      	str	r1, [sp, #24]
 80075f8:	4606      	mov	r6, r0
 80075fa:	9208      	str	r2, [sp, #32]
 80075fc:	930c      	str	r3, [sp, #48]	; 0x30
 80075fe:	b975      	cbnz	r5, 800761e <_dtoa_r+0x3e>
 8007600:	2010      	movs	r0, #16
 8007602:	f000 ff7f 	bl	8008504 <malloc>
 8007606:	4602      	mov	r2, r0
 8007608:	6270      	str	r0, [r6, #36]	; 0x24
 800760a:	b920      	cbnz	r0, 8007616 <_dtoa_r+0x36>
 800760c:	4baa      	ldr	r3, [pc, #680]	; (80078b8 <_dtoa_r+0x2d8>)
 800760e:	21ea      	movs	r1, #234	; 0xea
 8007610:	48aa      	ldr	r0, [pc, #680]	; (80078bc <_dtoa_r+0x2dc>)
 8007612:	f001 fdb9 	bl	8009188 <__assert_func>
 8007616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800761a:	6005      	str	r5, [r0, #0]
 800761c:	60c5      	str	r5, [r0, #12]
 800761e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	b151      	cbz	r1, 800763a <_dtoa_r+0x5a>
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	604a      	str	r2, [r1, #4]
 8007628:	2301      	movs	r3, #1
 800762a:	4093      	lsls	r3, r2
 800762c:	608b      	str	r3, [r1, #8]
 800762e:	4630      	mov	r0, r6
 8007630:	f000 ffb0 	bl	8008594 <_Bfree>
 8007634:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	f1b9 0300 	subs.w	r3, r9, #0
 800763e:	bfbb      	ittet	lt
 8007640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007644:	9303      	strlt	r3, [sp, #12]
 8007646:	2300      	movge	r3, #0
 8007648:	2201      	movlt	r2, #1
 800764a:	bfac      	ite	ge
 800764c:	6023      	strge	r3, [r4, #0]
 800764e:	6022      	strlt	r2, [r4, #0]
 8007650:	4b9b      	ldr	r3, [pc, #620]	; (80078c0 <_dtoa_r+0x2e0>)
 8007652:	9c03      	ldr	r4, [sp, #12]
 8007654:	43a3      	bics	r3, r4
 8007656:	d11c      	bne.n	8007692 <_dtoa_r+0xb2>
 8007658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800765a:	f242 730f 	movw	r3, #9999	; 0x270f
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007664:	ea53 0308 	orrs.w	r3, r3, r8
 8007668:	f000 84fd 	beq.w	8008066 <_dtoa_r+0xa86>
 800766c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800766e:	b963      	cbnz	r3, 800768a <_dtoa_r+0xaa>
 8007670:	4b94      	ldr	r3, [pc, #592]	; (80078c4 <_dtoa_r+0x2e4>)
 8007672:	e01f      	b.n	80076b4 <_dtoa_r+0xd4>
 8007674:	4b94      	ldr	r3, [pc, #592]	; (80078c8 <_dtoa_r+0x2e8>)
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	3308      	adds	r3, #8
 800767a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	9801      	ldr	r0, [sp, #4]
 8007680:	b011      	add	sp, #68	; 0x44
 8007682:	ecbd 8b02 	vpop	{d8}
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	4b8e      	ldr	r3, [pc, #568]	; (80078c4 <_dtoa_r+0x2e4>)
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	3303      	adds	r3, #3
 8007690:	e7f3      	b.n	800767a <_dtoa_r+0x9a>
 8007692:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007696:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	d10b      	bne.n	80076b8 <_dtoa_r+0xd8>
 80076a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a2:	2301      	movs	r3, #1
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 84d9 	beq.w	8008060 <_dtoa_r+0xa80>
 80076ae:	4887      	ldr	r0, [pc, #540]	; (80078cc <_dtoa_r+0x2ec>)
 80076b0:	6018      	str	r0, [r3, #0]
 80076b2:	1e43      	subs	r3, r0, #1
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	e7e2      	b.n	800767e <_dtoa_r+0x9e>
 80076b8:	a90f      	add	r1, sp, #60	; 0x3c
 80076ba:	aa0e      	add	r2, sp, #56	; 0x38
 80076bc:	4630      	mov	r0, r6
 80076be:	eeb0 0b48 	vmov.f64	d0, d8
 80076c2:	f001 fa4f 	bl	8008b64 <__d2b>
 80076c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80076ca:	4605      	mov	r5, r0
 80076cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80076ce:	2900      	cmp	r1, #0
 80076d0:	d046      	beq.n	8007760 <_dtoa_r+0x180>
 80076d2:	ee18 4a90 	vmov	r4, s17
 80076d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80076da:	ec53 2b18 	vmov	r2, r3, d8
 80076de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80076e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80076e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80076ea:	2400      	movs	r4, #0
 80076ec:	ec43 2b16 	vmov	d6, r2, r3
 80076f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80076f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80078a0 <_dtoa_r+0x2c0>
 80076f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80076fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80078a8 <_dtoa_r+0x2c8>
 8007700:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007704:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80078b0 <_dtoa_r+0x2d0>
 8007708:	ee07 1a90 	vmov	s15, r1
 800770c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007710:	eeb0 7b46 	vmov.f64	d7, d6
 8007714:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007718:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800771c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007724:	ee16 ba90 	vmov	fp, s13
 8007728:	940a      	str	r4, [sp, #40]	; 0x28
 800772a:	d508      	bpl.n	800773e <_dtoa_r+0x15e>
 800772c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007730:	eeb4 6b47 	vcmp.f64	d6, d7
 8007734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007738:	bf18      	it	ne
 800773a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800773e:	f1bb 0f16 	cmp.w	fp, #22
 8007742:	d82f      	bhi.n	80077a4 <_dtoa_r+0x1c4>
 8007744:	4b62      	ldr	r3, [pc, #392]	; (80078d0 <_dtoa_r+0x2f0>)
 8007746:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800774a:	ed93 7b00 	vldr	d7, [r3]
 800774e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007756:	d501      	bpl.n	800775c <_dtoa_r+0x17c>
 8007758:	f10b 3bff 	add.w	fp, fp, #4294967295
 800775c:	2300      	movs	r3, #0
 800775e:	e022      	b.n	80077a6 <_dtoa_r+0x1c6>
 8007760:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007762:	4401      	add	r1, r0
 8007764:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007768:	2b20      	cmp	r3, #32
 800776a:	bfc1      	itttt	gt
 800776c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007770:	fa04 f303 	lslgt.w	r3, r4, r3
 8007774:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007778:	fa28 f804 	lsrgt.w	r8, r8, r4
 800777c:	bfd6      	itet	le
 800777e:	f1c3 0320 	rsble	r3, r3, #32
 8007782:	ea43 0808 	orrgt.w	r8, r3, r8
 8007786:	fa08 f803 	lslle.w	r8, r8, r3
 800778a:	ee07 8a90 	vmov	s15, r8
 800778e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007792:	3901      	subs	r1, #1
 8007794:	ee17 4a90 	vmov	r4, s15
 8007798:	ec53 2b17 	vmov	r2, r3, d7
 800779c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80077a0:	2401      	movs	r4, #1
 80077a2:	e7a3      	b.n	80076ec <_dtoa_r+0x10c>
 80077a4:	2301      	movs	r3, #1
 80077a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a8:	1a43      	subs	r3, r0, r1
 80077aa:	1e5a      	subs	r2, r3, #1
 80077ac:	bf45      	ittet	mi
 80077ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80077b2:	9304      	strmi	r3, [sp, #16]
 80077b4:	2300      	movpl	r3, #0
 80077b6:	2300      	movmi	r3, #0
 80077b8:	9205      	str	r2, [sp, #20]
 80077ba:	bf54      	ite	pl
 80077bc:	9304      	strpl	r3, [sp, #16]
 80077be:	9305      	strmi	r3, [sp, #20]
 80077c0:	f1bb 0f00 	cmp.w	fp, #0
 80077c4:	db18      	blt.n	80077f8 <_dtoa_r+0x218>
 80077c6:	9b05      	ldr	r3, [sp, #20]
 80077c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80077cc:	445b      	add	r3, fp
 80077ce:	9305      	str	r3, [sp, #20]
 80077d0:	2300      	movs	r3, #0
 80077d2:	9a06      	ldr	r2, [sp, #24]
 80077d4:	2a09      	cmp	r2, #9
 80077d6:	d849      	bhi.n	800786c <_dtoa_r+0x28c>
 80077d8:	2a05      	cmp	r2, #5
 80077da:	bfc4      	itt	gt
 80077dc:	3a04      	subgt	r2, #4
 80077de:	9206      	strgt	r2, [sp, #24]
 80077e0:	9a06      	ldr	r2, [sp, #24]
 80077e2:	f1a2 0202 	sub.w	r2, r2, #2
 80077e6:	bfcc      	ite	gt
 80077e8:	2400      	movgt	r4, #0
 80077ea:	2401      	movle	r4, #1
 80077ec:	2a03      	cmp	r2, #3
 80077ee:	d848      	bhi.n	8007882 <_dtoa_r+0x2a2>
 80077f0:	e8df f002 	tbb	[pc, r2]
 80077f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	2200      	movs	r2, #0
 80077fc:	eba3 030b 	sub.w	r3, r3, fp
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	9209      	str	r2, [sp, #36]	; 0x24
 8007804:	f1cb 0300 	rsb	r3, fp, #0
 8007808:	e7e3      	b.n	80077d2 <_dtoa_r+0x1f2>
 800780a:	2200      	movs	r2, #0
 800780c:	9207      	str	r2, [sp, #28]
 800780e:	9a08      	ldr	r2, [sp, #32]
 8007810:	2a00      	cmp	r2, #0
 8007812:	dc39      	bgt.n	8007888 <_dtoa_r+0x2a8>
 8007814:	f04f 0a01 	mov.w	sl, #1
 8007818:	46d1      	mov	r9, sl
 800781a:	4652      	mov	r2, sl
 800781c:	f8cd a020 	str.w	sl, [sp, #32]
 8007820:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007822:	2100      	movs	r1, #0
 8007824:	6079      	str	r1, [r7, #4]
 8007826:	2004      	movs	r0, #4
 8007828:	f100 0c14 	add.w	ip, r0, #20
 800782c:	4594      	cmp	ip, r2
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	d92f      	bls.n	8007892 <_dtoa_r+0x2b2>
 8007832:	4630      	mov	r0, r6
 8007834:	930d      	str	r3, [sp, #52]	; 0x34
 8007836:	f000 fe6d 	bl	8008514 <_Balloc>
 800783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783c:	9001      	str	r0, [sp, #4]
 800783e:	4602      	mov	r2, r0
 8007840:	2800      	cmp	r0, #0
 8007842:	d149      	bne.n	80078d8 <_dtoa_r+0x2f8>
 8007844:	4b23      	ldr	r3, [pc, #140]	; (80078d4 <_dtoa_r+0x2f4>)
 8007846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800784a:	e6e1      	b.n	8007610 <_dtoa_r+0x30>
 800784c:	2201      	movs	r2, #1
 800784e:	e7dd      	b.n	800780c <_dtoa_r+0x22c>
 8007850:	2200      	movs	r2, #0
 8007852:	9207      	str	r2, [sp, #28]
 8007854:	9a08      	ldr	r2, [sp, #32]
 8007856:	eb0b 0a02 	add.w	sl, fp, r2
 800785a:	f10a 0901 	add.w	r9, sl, #1
 800785e:	464a      	mov	r2, r9
 8007860:	2a01      	cmp	r2, #1
 8007862:	bfb8      	it	lt
 8007864:	2201      	movlt	r2, #1
 8007866:	e7db      	b.n	8007820 <_dtoa_r+0x240>
 8007868:	2201      	movs	r2, #1
 800786a:	e7f2      	b.n	8007852 <_dtoa_r+0x272>
 800786c:	2401      	movs	r4, #1
 800786e:	2200      	movs	r2, #0
 8007870:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007874:	f04f 3aff 	mov.w	sl, #4294967295
 8007878:	2100      	movs	r1, #0
 800787a:	46d1      	mov	r9, sl
 800787c:	2212      	movs	r2, #18
 800787e:	9108      	str	r1, [sp, #32]
 8007880:	e7ce      	b.n	8007820 <_dtoa_r+0x240>
 8007882:	2201      	movs	r2, #1
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	e7f5      	b.n	8007874 <_dtoa_r+0x294>
 8007888:	f8dd a020 	ldr.w	sl, [sp, #32]
 800788c:	46d1      	mov	r9, sl
 800788e:	4652      	mov	r2, sl
 8007890:	e7c6      	b.n	8007820 <_dtoa_r+0x240>
 8007892:	3101      	adds	r1, #1
 8007894:	6079      	str	r1, [r7, #4]
 8007896:	0040      	lsls	r0, r0, #1
 8007898:	e7c6      	b.n	8007828 <_dtoa_r+0x248>
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w
 80078a0:	636f4361 	.word	0x636f4361
 80078a4:	3fd287a7 	.word	0x3fd287a7
 80078a8:	8b60c8b3 	.word	0x8b60c8b3
 80078ac:	3fc68a28 	.word	0x3fc68a28
 80078b0:	509f79fb 	.word	0x509f79fb
 80078b4:	3fd34413 	.word	0x3fd34413
 80078b8:	080094c5 	.word	0x080094c5
 80078bc:	080094dc 	.word	0x080094dc
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	080094c1 	.word	0x080094c1
 80078c8:	080094b8 	.word	0x080094b8
 80078cc:	08009495 	.word	0x08009495
 80078d0:	08009630 	.word	0x08009630
 80078d4:	08009537 	.word	0x08009537
 80078d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80078da:	9901      	ldr	r1, [sp, #4]
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	f1b9 0f0e 	cmp.w	r9, #14
 80078e2:	d86c      	bhi.n	80079be <_dtoa_r+0x3de>
 80078e4:	2c00      	cmp	r4, #0
 80078e6:	d06a      	beq.n	80079be <_dtoa_r+0x3de>
 80078e8:	f1bb 0f00 	cmp.w	fp, #0
 80078ec:	f340 80a0 	ble.w	8007a30 <_dtoa_r+0x450>
 80078f0:	49c1      	ldr	r1, [pc, #772]	; (8007bf8 <_dtoa_r+0x618>)
 80078f2:	f00b 020f 	and.w	r2, fp, #15
 80078f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80078fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80078fe:	ed92 7b00 	vldr	d7, [r2]
 8007902:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007906:	f000 8087 	beq.w	8007a18 <_dtoa_r+0x438>
 800790a:	4abc      	ldr	r2, [pc, #752]	; (8007bfc <_dtoa_r+0x61c>)
 800790c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007910:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007914:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007918:	f001 010f 	and.w	r1, r1, #15
 800791c:	2203      	movs	r2, #3
 800791e:	48b7      	ldr	r0, [pc, #732]	; (8007bfc <_dtoa_r+0x61c>)
 8007920:	2900      	cmp	r1, #0
 8007922:	d17b      	bne.n	8007a1c <_dtoa_r+0x43c>
 8007924:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007928:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800792c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007932:	2900      	cmp	r1, #0
 8007934:	f000 80a2 	beq.w	8007a7c <_dtoa_r+0x49c>
 8007938:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800793c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007940:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007948:	f140 8098 	bpl.w	8007a7c <_dtoa_r+0x49c>
 800794c:	f1b9 0f00 	cmp.w	r9, #0
 8007950:	f000 8094 	beq.w	8007a7c <_dtoa_r+0x49c>
 8007954:	f1ba 0f00 	cmp.w	sl, #0
 8007958:	dd2f      	ble.n	80079ba <_dtoa_r+0x3da>
 800795a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800795e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007962:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007966:	f10b 37ff 	add.w	r7, fp, #4294967295
 800796a:	3201      	adds	r2, #1
 800796c:	4650      	mov	r0, sl
 800796e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007972:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007976:	ee07 2a90 	vmov	s15, r2
 800797a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800797e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007982:	ee15 4a90 	vmov	r4, s11
 8007986:	ec52 1b15 	vmov	r1, r2, d5
 800798a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800798e:	2800      	cmp	r0, #0
 8007990:	d177      	bne.n	8007a82 <_dtoa_r+0x4a2>
 8007992:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007996:	ee36 6b47 	vsub.f64	d6, d6, d7
 800799a:	ec42 1b17 	vmov	d7, r1, r2
 800799e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	f300 8263 	bgt.w	8007e70 <_dtoa_r+0x890>
 80079aa:	eeb1 7b47 	vneg.f64	d7, d7
 80079ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b6:	f100 8258 	bmi.w	8007e6a <_dtoa_r+0x88a>
 80079ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80079be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	f2c0 811d 	blt.w	8007c00 <_dtoa_r+0x620>
 80079c6:	f1bb 0f0e 	cmp.w	fp, #14
 80079ca:	f300 8119 	bgt.w	8007c00 <_dtoa_r+0x620>
 80079ce:	4b8a      	ldr	r3, [pc, #552]	; (8007bf8 <_dtoa_r+0x618>)
 80079d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079d4:	ed93 6b00 	vldr	d6, [r3]
 80079d8:	9b08      	ldr	r3, [sp, #32]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f280 80b7 	bge.w	8007b4e <_dtoa_r+0x56e>
 80079e0:	f1b9 0f00 	cmp.w	r9, #0
 80079e4:	f300 80b3 	bgt.w	8007b4e <_dtoa_r+0x56e>
 80079e8:	f040 823f 	bne.w	8007e6a <_dtoa_r+0x88a>
 80079ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80079f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80079f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a00:	464c      	mov	r4, r9
 8007a02:	464f      	mov	r7, r9
 8007a04:	f280 8215 	bge.w	8007e32 <_dtoa_r+0x852>
 8007a08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a0c:	2331      	movs	r3, #49	; 0x31
 8007a0e:	f808 3b01 	strb.w	r3, [r8], #1
 8007a12:	f10b 0b01 	add.w	fp, fp, #1
 8007a16:	e211      	b.n	8007e3c <_dtoa_r+0x85c>
 8007a18:	2202      	movs	r2, #2
 8007a1a:	e780      	b.n	800791e <_dtoa_r+0x33e>
 8007a1c:	07cc      	lsls	r4, r1, #31
 8007a1e:	d504      	bpl.n	8007a2a <_dtoa_r+0x44a>
 8007a20:	ed90 6b00 	vldr	d6, [r0]
 8007a24:	3201      	adds	r2, #1
 8007a26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a2a:	1049      	asrs	r1, r1, #1
 8007a2c:	3008      	adds	r0, #8
 8007a2e:	e777      	b.n	8007920 <_dtoa_r+0x340>
 8007a30:	d022      	beq.n	8007a78 <_dtoa_r+0x498>
 8007a32:	f1cb 0100 	rsb	r1, fp, #0
 8007a36:	4a70      	ldr	r2, [pc, #448]	; (8007bf8 <_dtoa_r+0x618>)
 8007a38:	f001 000f 	and.w	r0, r1, #15
 8007a3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007a40:	ed92 7b00 	vldr	d7, [r2]
 8007a44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007a48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a4c:	486b      	ldr	r0, [pc, #428]	; (8007bfc <_dtoa_r+0x61c>)
 8007a4e:	1109      	asrs	r1, r1, #4
 8007a50:	2400      	movs	r4, #0
 8007a52:	2202      	movs	r2, #2
 8007a54:	b929      	cbnz	r1, 8007a62 <_dtoa_r+0x482>
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	f43f af6a 	beq.w	8007930 <_dtoa_r+0x350>
 8007a5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a60:	e766      	b.n	8007930 <_dtoa_r+0x350>
 8007a62:	07cf      	lsls	r7, r1, #31
 8007a64:	d505      	bpl.n	8007a72 <_dtoa_r+0x492>
 8007a66:	ed90 6b00 	vldr	d6, [r0]
 8007a6a:	3201      	adds	r2, #1
 8007a6c:	2401      	movs	r4, #1
 8007a6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a72:	1049      	asrs	r1, r1, #1
 8007a74:	3008      	adds	r0, #8
 8007a76:	e7ed      	b.n	8007a54 <_dtoa_r+0x474>
 8007a78:	2202      	movs	r2, #2
 8007a7a:	e759      	b.n	8007930 <_dtoa_r+0x350>
 8007a7c:	465f      	mov	r7, fp
 8007a7e:	4648      	mov	r0, r9
 8007a80:	e775      	b.n	800796e <_dtoa_r+0x38e>
 8007a82:	ec42 1b17 	vmov	d7, r1, r2
 8007a86:	4a5c      	ldr	r2, [pc, #368]	; (8007bf8 <_dtoa_r+0x618>)
 8007a88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007a8c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007a90:	9a01      	ldr	r2, [sp, #4]
 8007a92:	1814      	adds	r4, r2, r0
 8007a94:	9a07      	ldr	r2, [sp, #28]
 8007a96:	b352      	cbz	r2, 8007aee <_dtoa_r+0x50e>
 8007a98:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007a9c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007aa0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007aa4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007aa8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007aac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ab0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ab4:	ee14 2a90 	vmov	r2, s9
 8007ab8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007abc:	3230      	adds	r2, #48	; 0x30
 8007abe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ac2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aca:	f808 2b01 	strb.w	r2, [r8], #1
 8007ace:	d439      	bmi.n	8007b44 <_dtoa_r+0x564>
 8007ad0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007ad4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007adc:	d472      	bmi.n	8007bc4 <_dtoa_r+0x5e4>
 8007ade:	45a0      	cmp	r8, r4
 8007ae0:	f43f af6b 	beq.w	80079ba <_dtoa_r+0x3da>
 8007ae4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ae8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007aec:	e7e0      	b.n	8007ab0 <_dtoa_r+0x4d0>
 8007aee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007af2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007af6:	4621      	mov	r1, r4
 8007af8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007afc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b00:	ee14 2a90 	vmov	r2, s9
 8007b04:	3230      	adds	r2, #48	; 0x30
 8007b06:	f808 2b01 	strb.w	r2, [r8], #1
 8007b0a:	45a0      	cmp	r8, r4
 8007b0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b10:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b14:	d118      	bne.n	8007b48 <_dtoa_r+0x568>
 8007b16:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007b1a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007b1e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b26:	dc4d      	bgt.n	8007bc4 <_dtoa_r+0x5e4>
 8007b28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007b2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b34:	f57f af41 	bpl.w	80079ba <_dtoa_r+0x3da>
 8007b38:	4688      	mov	r8, r1
 8007b3a:	3901      	subs	r1, #1
 8007b3c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007b40:	2b30      	cmp	r3, #48	; 0x30
 8007b42:	d0f9      	beq.n	8007b38 <_dtoa_r+0x558>
 8007b44:	46bb      	mov	fp, r7
 8007b46:	e02a      	b.n	8007b9e <_dtoa_r+0x5be>
 8007b48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b4c:	e7d6      	b.n	8007afc <_dtoa_r+0x51c>
 8007b4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b52:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007b56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b5a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007b5e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007b62:	ee15 3a10 	vmov	r3, s10
 8007b66:	3330      	adds	r3, #48	; 0x30
 8007b68:	f808 3b01 	strb.w	r3, [r8], #1
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	eba8 0303 	sub.w	r3, r8, r3
 8007b72:	4599      	cmp	r9, r3
 8007b74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007b78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007b7c:	d133      	bne.n	8007be6 <_dtoa_r+0x606>
 8007b7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007b82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8a:	dc1a      	bgt.n	8007bc2 <_dtoa_r+0x5e2>
 8007b8c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	d103      	bne.n	8007b9e <_dtoa_r+0x5be>
 8007b96:	ee15 3a10 	vmov	r3, s10
 8007b9a:	07d9      	lsls	r1, r3, #31
 8007b9c:	d411      	bmi.n	8007bc2 <_dtoa_r+0x5e2>
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 fcf7 	bl	8008594 <_Bfree>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007baa:	f888 3000 	strb.w	r3, [r8]
 8007bae:	f10b 0301 	add.w	r3, fp, #1
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f43f ad61 	beq.w	800767e <_dtoa_r+0x9e>
 8007bbc:	f8c3 8000 	str.w	r8, [r3]
 8007bc0:	e55d      	b.n	800767e <_dtoa_r+0x9e>
 8007bc2:	465f      	mov	r7, fp
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bcc:	2a39      	cmp	r2, #57	; 0x39
 8007bce:	d106      	bne.n	8007bde <_dtoa_r+0x5fe>
 8007bd0:	9a01      	ldr	r2, [sp, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d1f7      	bne.n	8007bc6 <_dtoa_r+0x5e6>
 8007bd6:	9901      	ldr	r1, [sp, #4]
 8007bd8:	2230      	movs	r2, #48	; 0x30
 8007bda:	3701      	adds	r7, #1
 8007bdc:	700a      	strb	r2, [r1, #0]
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	3201      	adds	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e7ae      	b.n	8007b44 <_dtoa_r+0x564>
 8007be6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007bea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf2:	d1b2      	bne.n	8007b5a <_dtoa_r+0x57a>
 8007bf4:	e7d3      	b.n	8007b9e <_dtoa_r+0x5be>
 8007bf6:	bf00      	nop
 8007bf8:	08009630 	.word	0x08009630
 8007bfc:	08009608 	.word	0x08009608
 8007c00:	9907      	ldr	r1, [sp, #28]
 8007c02:	2900      	cmp	r1, #0
 8007c04:	f000 80d0 	beq.w	8007da8 <_dtoa_r+0x7c8>
 8007c08:	9906      	ldr	r1, [sp, #24]
 8007c0a:	2901      	cmp	r1, #1
 8007c0c:	f300 80b4 	bgt.w	8007d78 <_dtoa_r+0x798>
 8007c10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c12:	2900      	cmp	r1, #0
 8007c14:	f000 80ac 	beq.w	8007d70 <_dtoa_r+0x790>
 8007c18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c20:	461c      	mov	r4, r3
 8007c22:	930a      	str	r3, [sp, #40]	; 0x28
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4413      	add	r3, r2
 8007c30:	4630      	mov	r0, r6
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	f000 fd66 	bl	8008704 <__i2b>
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	f1b8 0f00 	cmp.w	r8, #0
 8007c40:	dd0d      	ble.n	8007c5e <_dtoa_r+0x67e>
 8007c42:	9a05      	ldr	r2, [sp, #20]
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	dd0a      	ble.n	8007c5e <_dtoa_r+0x67e>
 8007c48:	4542      	cmp	r2, r8
 8007c4a:	9904      	ldr	r1, [sp, #16]
 8007c4c:	bfa8      	it	ge
 8007c4e:	4642      	movge	r2, r8
 8007c50:	1a89      	subs	r1, r1, r2
 8007c52:	9104      	str	r1, [sp, #16]
 8007c54:	9905      	ldr	r1, [sp, #20]
 8007c56:	eba8 0802 	sub.w	r8, r8, r2
 8007c5a:	1a8a      	subs	r2, r1, r2
 8007c5c:	9205      	str	r2, [sp, #20]
 8007c5e:	b303      	cbz	r3, 8007ca2 <_dtoa_r+0x6c2>
 8007c60:	9a07      	ldr	r2, [sp, #28]
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	f000 80a5 	beq.w	8007db2 <_dtoa_r+0x7d2>
 8007c68:	2c00      	cmp	r4, #0
 8007c6a:	dd13      	ble.n	8007c94 <_dtoa_r+0x6b4>
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4622      	mov	r2, r4
 8007c70:	4630      	mov	r0, r6
 8007c72:	930d      	str	r3, [sp, #52]	; 0x34
 8007c74:	f000 fe06 	bl	8008884 <__pow5mult>
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 fd56 	bl	8008730 <__multiply>
 8007c84:	4629      	mov	r1, r5
 8007c86:	900a      	str	r0, [sp, #40]	; 0x28
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 fc83 	bl	8008594 <_Bfree>
 8007c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c92:	4615      	mov	r5, r2
 8007c94:	1b1a      	subs	r2, r3, r4
 8007c96:	d004      	beq.n	8007ca2 <_dtoa_r+0x6c2>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 fdf2 	bl	8008884 <__pow5mult>
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f000 fd2d 	bl	8008704 <__i2b>
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	f340 8081 	ble.w	8007db6 <_dtoa_r+0x7d6>
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 fde3 	bl	8008884 <__pow5mult>
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	dd7a      	ble.n	8007dbc <_dtoa_r+0x7dc>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cca:	6922      	ldr	r2, [r4, #16]
 8007ccc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007cd0:	6910      	ldr	r0, [r2, #16]
 8007cd2:	f000 fcc7 	bl	8008664 <__hi0bits>
 8007cd6:	f1c0 0020 	rsb	r0, r0, #32
 8007cda:	9b05      	ldr	r3, [sp, #20]
 8007cdc:	4418      	add	r0, r3
 8007cde:	f010 001f 	ands.w	r0, r0, #31
 8007ce2:	f000 808c 	beq.w	8007dfe <_dtoa_r+0x81e>
 8007ce6:	f1c0 0220 	rsb	r2, r0, #32
 8007cea:	2a04      	cmp	r2, #4
 8007cec:	f340 8085 	ble.w	8007dfa <_dtoa_r+0x81a>
 8007cf0:	f1c0 001c 	rsb	r0, r0, #28
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	4403      	add	r3, r0
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	9b05      	ldr	r3, [sp, #20]
 8007cfc:	4403      	add	r3, r0
 8007cfe:	4480      	add	r8, r0
 8007d00:	9305      	str	r3, [sp, #20]
 8007d02:	9b04      	ldr	r3, [sp, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dd05      	ble.n	8007d14 <_dtoa_r+0x734>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f000 fe13 	bl	8008938 <__lshift>
 8007d12:	4605      	mov	r5, r0
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	dd05      	ble.n	8007d26 <_dtoa_r+0x746>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f000 fe0a 	bl	8008938 <__lshift>
 8007d24:	4604      	mov	r4, r0
 8007d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d06a      	beq.n	8007e02 <_dtoa_r+0x822>
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f000 fe72 	bl	8008a18 <__mcmp>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	da64      	bge.n	8007e02 <_dtoa_r+0x822>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	220a      	movs	r2, #10
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 fc4a 	bl	80085d8 <__multadd>
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8191 	beq.w	8008074 <_dtoa_r+0xa94>
 8007d52:	4639      	mov	r1, r7
 8007d54:	2300      	movs	r3, #0
 8007d56:	220a      	movs	r2, #10
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f000 fc3d 	bl	80085d8 <__multadd>
 8007d5e:	f1ba 0f00 	cmp.w	sl, #0
 8007d62:	4607      	mov	r7, r0
 8007d64:	f300 808d 	bgt.w	8007e82 <_dtoa_r+0x8a2>
 8007d68:	9b06      	ldr	r3, [sp, #24]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	dc50      	bgt.n	8007e10 <_dtoa_r+0x830>
 8007d6e:	e088      	b.n	8007e82 <_dtoa_r+0x8a2>
 8007d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d76:	e751      	b.n	8007c1c <_dtoa_r+0x63c>
 8007d78:	f109 34ff 	add.w	r4, r9, #4294967295
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	bfbf      	itttt	lt
 8007d80:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007d82:	1ae3      	sublt	r3, r4, r3
 8007d84:	18d2      	addlt	r2, r2, r3
 8007d86:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007d88:	bfb6      	itet	lt
 8007d8a:	4623      	movlt	r3, r4
 8007d8c:	1b1c      	subge	r4, r3, r4
 8007d8e:	2400      	movlt	r4, #0
 8007d90:	f1b9 0f00 	cmp.w	r9, #0
 8007d94:	bfb5      	itete	lt
 8007d96:	9a04      	ldrlt	r2, [sp, #16]
 8007d98:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007d9c:	eba2 0809 	sublt.w	r8, r2, r9
 8007da0:	464a      	movge	r2, r9
 8007da2:	bfb8      	it	lt
 8007da4:	2200      	movlt	r2, #0
 8007da6:	e73c      	b.n	8007c22 <_dtoa_r+0x642>
 8007da8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007dac:	9f07      	ldr	r7, [sp, #28]
 8007dae:	461c      	mov	r4, r3
 8007db0:	e744      	b.n	8007c3c <_dtoa_r+0x65c>
 8007db2:	461a      	mov	r2, r3
 8007db4:	e770      	b.n	8007c98 <_dtoa_r+0x6b8>
 8007db6:	9b06      	ldr	r3, [sp, #24]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	dc18      	bgt.n	8007dee <_dtoa_r+0x80e>
 8007dbc:	9b02      	ldr	r3, [sp, #8]
 8007dbe:	b9b3      	cbnz	r3, 8007dee <_dtoa_r+0x80e>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007dc6:	b9a2      	cbnz	r2, 8007df2 <_dtoa_r+0x812>
 8007dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dcc:	0d12      	lsrs	r2, r2, #20
 8007dce:	0512      	lsls	r2, r2, #20
 8007dd0:	b18a      	cbz	r2, 8007df6 <_dtoa_r+0x816>
 8007dd2:	9b04      	ldr	r3, [sp, #16]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	2301      	movs	r3, #1
 8007de0:	930a      	str	r3, [sp, #40]	; 0x28
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f47f af70 	bne.w	8007cca <_dtoa_r+0x6ea>
 8007dea:	2001      	movs	r0, #1
 8007dec:	e775      	b.n	8007cda <_dtoa_r+0x6fa>
 8007dee:	2300      	movs	r3, #0
 8007df0:	e7f6      	b.n	8007de0 <_dtoa_r+0x800>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	e7f4      	b.n	8007de0 <_dtoa_r+0x800>
 8007df6:	920a      	str	r2, [sp, #40]	; 0x28
 8007df8:	e7f3      	b.n	8007de2 <_dtoa_r+0x802>
 8007dfa:	d082      	beq.n	8007d02 <_dtoa_r+0x722>
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	301c      	adds	r0, #28
 8007e00:	e778      	b.n	8007cf4 <_dtoa_r+0x714>
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	dc37      	bgt.n	8007e78 <_dtoa_r+0x898>
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	dd34      	ble.n	8007e78 <_dtoa_r+0x898>
 8007e0e:	46ca      	mov	sl, r9
 8007e10:	f1ba 0f00 	cmp.w	sl, #0
 8007e14:	d10d      	bne.n	8007e32 <_dtoa_r+0x852>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4653      	mov	r3, sl
 8007e1a:	2205      	movs	r2, #5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f000 fbdb 	bl	80085d8 <__multadd>
 8007e22:	4601      	mov	r1, r0
 8007e24:	4604      	mov	r4, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fdf6 	bl	8008a18 <__mcmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f73f adeb 	bgt.w	8007a08 <_dtoa_r+0x428>
 8007e32:	9b08      	ldr	r3, [sp, #32]
 8007e34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e38:	ea6f 0b03 	mvn.w	fp, r3
 8007e3c:	f04f 0900 	mov.w	r9, #0
 8007e40:	4621      	mov	r1, r4
 8007e42:	4630      	mov	r0, r6
 8007e44:	f000 fba6 	bl	8008594 <_Bfree>
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	f43f aea8 	beq.w	8007b9e <_dtoa_r+0x5be>
 8007e4e:	f1b9 0f00 	cmp.w	r9, #0
 8007e52:	d005      	beq.n	8007e60 <_dtoa_r+0x880>
 8007e54:	45b9      	cmp	r9, r7
 8007e56:	d003      	beq.n	8007e60 <_dtoa_r+0x880>
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 fb9a 	bl	8008594 <_Bfree>
 8007e60:	4639      	mov	r1, r7
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 fb96 	bl	8008594 <_Bfree>
 8007e68:	e699      	b.n	8007b9e <_dtoa_r+0x5be>
 8007e6a:	2400      	movs	r4, #0
 8007e6c:	4627      	mov	r7, r4
 8007e6e:	e7e0      	b.n	8007e32 <_dtoa_r+0x852>
 8007e70:	46bb      	mov	fp, r7
 8007e72:	4604      	mov	r4, r0
 8007e74:	4607      	mov	r7, r0
 8007e76:	e5c7      	b.n	8007a08 <_dtoa_r+0x428>
 8007e78:	9b07      	ldr	r3, [sp, #28]
 8007e7a:	46ca      	mov	sl, r9
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8100 	beq.w	8008082 <_dtoa_r+0xaa2>
 8007e82:	f1b8 0f00 	cmp.w	r8, #0
 8007e86:	dd05      	ble.n	8007e94 <_dtoa_r+0x8b4>
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4642      	mov	r2, r8
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 fd53 	bl	8008938 <__lshift>
 8007e92:	4607      	mov	r7, r0
 8007e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d05d      	beq.n	8007f56 <_dtoa_r+0x976>
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 fb39 	bl	8008514 <_Balloc>
 8007ea2:	4680      	mov	r8, r0
 8007ea4:	b928      	cbnz	r0, 8007eb2 <_dtoa_r+0x8d2>
 8007ea6:	4b82      	ldr	r3, [pc, #520]	; (80080b0 <_dtoa_r+0xad0>)
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007eae:	f7ff bbaf 	b.w	8007610 <_dtoa_r+0x30>
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	3202      	adds	r2, #2
 8007eb6:	0092      	lsls	r2, r2, #2
 8007eb8:	f107 010c 	add.w	r1, r7, #12
 8007ebc:	300c      	adds	r0, #12
 8007ebe:	f7fe fd5b 	bl	8006978 <memcpy>
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 fd36 	bl	8008938 <__lshift>
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	4453      	add	r3, sl
 8007ed6:	9308      	str	r3, [sp, #32]
 8007ed8:	9b02      	ldr	r3, [sp, #8]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	46b9      	mov	r9, r7
 8007ee0:	9307      	str	r3, [sp, #28]
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	4628      	mov	r0, r5
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	f7ff faeb 	bl	80074c8 <quorem>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	3330      	adds	r3, #48	; 0x30
 8007ef6:	9005      	str	r0, [sp, #20]
 8007ef8:	4649      	mov	r1, r9
 8007efa:	4628      	mov	r0, r5
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	f000 fd8b 	bl	8008a18 <__mcmp>
 8007f02:	463a      	mov	r2, r7
 8007f04:	4682      	mov	sl, r0
 8007f06:	4621      	mov	r1, r4
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 fda1 	bl	8008a50 <__mdiff>
 8007f0e:	68c2      	ldr	r2, [r0, #12]
 8007f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f12:	4680      	mov	r8, r0
 8007f14:	bb0a      	cbnz	r2, 8007f5a <_dtoa_r+0x97a>
 8007f16:	4601      	mov	r1, r0
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 fd7d 	bl	8008a18 <__mcmp>
 8007f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f20:	4602      	mov	r2, r0
 8007f22:	4641      	mov	r1, r8
 8007f24:	4630      	mov	r0, r6
 8007f26:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007f2a:	f000 fb33 	bl	8008594 <_Bfree>
 8007f2e:	9b06      	ldr	r3, [sp, #24]
 8007f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f32:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007f36:	ea43 0102 	orr.w	r1, r3, r2
 8007f3a:	9b07      	ldr	r3, [sp, #28]
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	d10d      	bne.n	8007f5e <_dtoa_r+0x97e>
 8007f42:	2b39      	cmp	r3, #57	; 0x39
 8007f44:	d029      	beq.n	8007f9a <_dtoa_r+0x9ba>
 8007f46:	f1ba 0f00 	cmp.w	sl, #0
 8007f4a:	dd01      	ble.n	8007f50 <_dtoa_r+0x970>
 8007f4c:	9b05      	ldr	r3, [sp, #20]
 8007f4e:	3331      	adds	r3, #49	; 0x31
 8007f50:	9a02      	ldr	r2, [sp, #8]
 8007f52:	7013      	strb	r3, [r2, #0]
 8007f54:	e774      	b.n	8007e40 <_dtoa_r+0x860>
 8007f56:	4638      	mov	r0, r7
 8007f58:	e7b8      	b.n	8007ecc <_dtoa_r+0x8ec>
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	e7e1      	b.n	8007f22 <_dtoa_r+0x942>
 8007f5e:	f1ba 0f00 	cmp.w	sl, #0
 8007f62:	db06      	blt.n	8007f72 <_dtoa_r+0x992>
 8007f64:	9906      	ldr	r1, [sp, #24]
 8007f66:	ea41 0a0a 	orr.w	sl, r1, sl
 8007f6a:	9907      	ldr	r1, [sp, #28]
 8007f6c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007f70:	d120      	bne.n	8007fb4 <_dtoa_r+0x9d4>
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	ddec      	ble.n	8007f50 <_dtoa_r+0x970>
 8007f76:	4629      	mov	r1, r5
 8007f78:	2201      	movs	r2, #1
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	f000 fcdb 	bl	8008938 <__lshift>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4605      	mov	r5, r0
 8007f86:	f000 fd47 	bl	8008a18 <__mcmp>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	dc02      	bgt.n	8007f96 <_dtoa_r+0x9b6>
 8007f90:	d1de      	bne.n	8007f50 <_dtoa_r+0x970>
 8007f92:	07da      	lsls	r2, r3, #31
 8007f94:	d5dc      	bpl.n	8007f50 <_dtoa_r+0x970>
 8007f96:	2b39      	cmp	r3, #57	; 0x39
 8007f98:	d1d8      	bne.n	8007f4c <_dtoa_r+0x96c>
 8007f9a:	9a02      	ldr	r2, [sp, #8]
 8007f9c:	2339      	movs	r3, #57	; 0x39
 8007f9e:	7013      	strb	r3, [r2, #0]
 8007fa0:	4643      	mov	r3, r8
 8007fa2:	4698      	mov	r8, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007faa:	2a39      	cmp	r2, #57	; 0x39
 8007fac:	d051      	beq.n	8008052 <_dtoa_r+0xa72>
 8007fae:	3201      	adds	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e745      	b.n	8007e40 <_dtoa_r+0x860>
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	dd03      	ble.n	8007fc0 <_dtoa_r+0x9e0>
 8007fb8:	2b39      	cmp	r3, #57	; 0x39
 8007fba:	d0ee      	beq.n	8007f9a <_dtoa_r+0x9ba>
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	e7c7      	b.n	8007f50 <_dtoa_r+0x970>
 8007fc0:	9a04      	ldr	r2, [sp, #16]
 8007fc2:	9908      	ldr	r1, [sp, #32]
 8007fc4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fc8:	428a      	cmp	r2, r1
 8007fca:	d02b      	beq.n	8008024 <_dtoa_r+0xa44>
 8007fcc:	4629      	mov	r1, r5
 8007fce:	2300      	movs	r3, #0
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 fb00 	bl	80085d8 <__multadd>
 8007fd8:	45b9      	cmp	r9, r7
 8007fda:	4605      	mov	r5, r0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	f04f 020a 	mov.w	r2, #10
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	d107      	bne.n	8007ffa <_dtoa_r+0xa1a>
 8007fea:	f000 faf5 	bl	80085d8 <__multadd>
 8007fee:	4681      	mov	r9, r0
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	e774      	b.n	8007ee4 <_dtoa_r+0x904>
 8007ffa:	f000 faed 	bl	80085d8 <__multadd>
 8007ffe:	4639      	mov	r1, r7
 8008000:	4681      	mov	r9, r0
 8008002:	2300      	movs	r3, #0
 8008004:	220a      	movs	r2, #10
 8008006:	4630      	mov	r0, r6
 8008008:	f000 fae6 	bl	80085d8 <__multadd>
 800800c:	4607      	mov	r7, r0
 800800e:	e7f0      	b.n	8007ff2 <_dtoa_r+0xa12>
 8008010:	f1ba 0f00 	cmp.w	sl, #0
 8008014:	9a01      	ldr	r2, [sp, #4]
 8008016:	bfcc      	ite	gt
 8008018:	46d0      	movgt	r8, sl
 800801a:	f04f 0801 	movle.w	r8, #1
 800801e:	4490      	add	r8, r2
 8008020:	f04f 0900 	mov.w	r9, #0
 8008024:	4629      	mov	r1, r5
 8008026:	2201      	movs	r2, #1
 8008028:	4630      	mov	r0, r6
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	f000 fc84 	bl	8008938 <__lshift>
 8008030:	4621      	mov	r1, r4
 8008032:	4605      	mov	r5, r0
 8008034:	f000 fcf0 	bl	8008a18 <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	dcb1      	bgt.n	8007fa0 <_dtoa_r+0x9c0>
 800803c:	d102      	bne.n	8008044 <_dtoa_r+0xa64>
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d4ad      	bmi.n	8007fa0 <_dtoa_r+0x9c0>
 8008044:	4643      	mov	r3, r8
 8008046:	4698      	mov	r8, r3
 8008048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800804c:	2a30      	cmp	r2, #48	; 0x30
 800804e:	d0fa      	beq.n	8008046 <_dtoa_r+0xa66>
 8008050:	e6f6      	b.n	8007e40 <_dtoa_r+0x860>
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d1a4      	bne.n	8007fa2 <_dtoa_r+0x9c2>
 8008058:	f10b 0b01 	add.w	fp, fp, #1
 800805c:	2331      	movs	r3, #49	; 0x31
 800805e:	e778      	b.n	8007f52 <_dtoa_r+0x972>
 8008060:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <_dtoa_r+0xad4>)
 8008062:	f7ff bb27 	b.w	80076b4 <_dtoa_r+0xd4>
 8008066:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f ab03 	bne.w	8007674 <_dtoa_r+0x94>
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <_dtoa_r+0xad8>)
 8008070:	f7ff bb20 	b.w	80076b4 <_dtoa_r+0xd4>
 8008074:	f1ba 0f00 	cmp.w	sl, #0
 8008078:	dc03      	bgt.n	8008082 <_dtoa_r+0xaa2>
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	2b02      	cmp	r3, #2
 800807e:	f73f aec7 	bgt.w	8007e10 <_dtoa_r+0x830>
 8008082:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008086:	4621      	mov	r1, r4
 8008088:	4628      	mov	r0, r5
 800808a:	f7ff fa1d 	bl	80074c8 <quorem>
 800808e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008092:	f808 3b01 	strb.w	r3, [r8], #1
 8008096:	9a01      	ldr	r2, [sp, #4]
 8008098:	eba8 0202 	sub.w	r2, r8, r2
 800809c:	4592      	cmp	sl, r2
 800809e:	ddb7      	ble.n	8008010 <_dtoa_r+0xa30>
 80080a0:	4629      	mov	r1, r5
 80080a2:	2300      	movs	r3, #0
 80080a4:	220a      	movs	r2, #10
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 fa96 	bl	80085d8 <__multadd>
 80080ac:	4605      	mov	r5, r0
 80080ae:	e7ea      	b.n	8008086 <_dtoa_r+0xaa6>
 80080b0:	08009537 	.word	0x08009537
 80080b4:	08009494 	.word	0x08009494
 80080b8:	080094b8 	.word	0x080094b8

080080bc <__sflush_r>:
 80080bc:	898a      	ldrh	r2, [r1, #12]
 80080be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c2:	4605      	mov	r5, r0
 80080c4:	0710      	lsls	r0, r2, #28
 80080c6:	460c      	mov	r4, r1
 80080c8:	d458      	bmi.n	800817c <__sflush_r+0xc0>
 80080ca:	684b      	ldr	r3, [r1, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc05      	bgt.n	80080dc <__sflush_r+0x20>
 80080d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dc02      	bgt.n	80080dc <__sflush_r+0x20>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d0f9      	beq.n	80080d6 <__sflush_r+0x1a>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080e8:	682f      	ldr	r7, [r5, #0]
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	d032      	beq.n	8008154 <__sflush_r+0x98>
 80080ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	075a      	lsls	r2, r3, #29
 80080f4:	d505      	bpl.n	8008102 <__sflush_r+0x46>
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	1ac0      	subs	r0, r0, r3
 80080fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080fc:	b10b      	cbz	r3, 8008102 <__sflush_r+0x46>
 80080fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008100:	1ac0      	subs	r0, r0, r3
 8008102:	2300      	movs	r3, #0
 8008104:	4602      	mov	r2, r0
 8008106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008108:	6a21      	ldr	r1, [r4, #32]
 800810a:	4628      	mov	r0, r5
 800810c:	47b0      	blx	r6
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	d106      	bne.n	8008122 <__sflush_r+0x66>
 8008114:	6829      	ldr	r1, [r5, #0]
 8008116:	291d      	cmp	r1, #29
 8008118:	d82c      	bhi.n	8008174 <__sflush_r+0xb8>
 800811a:	4a2a      	ldr	r2, [pc, #168]	; (80081c4 <__sflush_r+0x108>)
 800811c:	40ca      	lsrs	r2, r1
 800811e:	07d6      	lsls	r6, r2, #31
 8008120:	d528      	bpl.n	8008174 <__sflush_r+0xb8>
 8008122:	2200      	movs	r2, #0
 8008124:	6062      	str	r2, [r4, #4]
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	d504      	bpl.n	8008138 <__sflush_r+0x7c>
 800812e:	1c42      	adds	r2, r0, #1
 8008130:	d101      	bne.n	8008136 <__sflush_r+0x7a>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	b903      	cbnz	r3, 8008138 <__sflush_r+0x7c>
 8008136:	6560      	str	r0, [r4, #84]	; 0x54
 8008138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800813a:	602f      	str	r7, [r5, #0]
 800813c:	2900      	cmp	r1, #0
 800813e:	d0ca      	beq.n	80080d6 <__sflush_r+0x1a>
 8008140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008144:	4299      	cmp	r1, r3
 8008146:	d002      	beq.n	800814e <__sflush_r+0x92>
 8008148:	4628      	mov	r0, r5
 800814a:	f000 fd7d 	bl	8008c48 <_free_r>
 800814e:	2000      	movs	r0, #0
 8008150:	6360      	str	r0, [r4, #52]	; 0x34
 8008152:	e7c1      	b.n	80080d8 <__sflush_r+0x1c>
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	2301      	movs	r3, #1
 8008158:	4628      	mov	r0, r5
 800815a:	47b0      	blx	r6
 800815c:	1c41      	adds	r1, r0, #1
 800815e:	d1c7      	bne.n	80080f0 <__sflush_r+0x34>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0c4      	beq.n	80080f0 <__sflush_r+0x34>
 8008166:	2b1d      	cmp	r3, #29
 8008168:	d001      	beq.n	800816e <__sflush_r+0xb2>
 800816a:	2b16      	cmp	r3, #22
 800816c:	d101      	bne.n	8008172 <__sflush_r+0xb6>
 800816e:	602f      	str	r7, [r5, #0]
 8008170:	e7b1      	b.n	80080d6 <__sflush_r+0x1a>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e7ad      	b.n	80080d8 <__sflush_r+0x1c>
 800817c:	690f      	ldr	r7, [r1, #16]
 800817e:	2f00      	cmp	r7, #0
 8008180:	d0a9      	beq.n	80080d6 <__sflush_r+0x1a>
 8008182:	0793      	lsls	r3, r2, #30
 8008184:	680e      	ldr	r6, [r1, #0]
 8008186:	bf08      	it	eq
 8008188:	694b      	ldreq	r3, [r1, #20]
 800818a:	600f      	str	r7, [r1, #0]
 800818c:	bf18      	it	ne
 800818e:	2300      	movne	r3, #0
 8008190:	eba6 0807 	sub.w	r8, r6, r7
 8008194:	608b      	str	r3, [r1, #8]
 8008196:	f1b8 0f00 	cmp.w	r8, #0
 800819a:	dd9c      	ble.n	80080d6 <__sflush_r+0x1a>
 800819c:	6a21      	ldr	r1, [r4, #32]
 800819e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081a0:	4643      	mov	r3, r8
 80081a2:	463a      	mov	r2, r7
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b0      	blx	r6
 80081a8:	2800      	cmp	r0, #0
 80081aa:	dc06      	bgt.n	80081ba <__sflush_r+0xfe>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	e78e      	b.n	80080d8 <__sflush_r+0x1c>
 80081ba:	4407      	add	r7, r0
 80081bc:	eba8 0800 	sub.w	r8, r8, r0
 80081c0:	e7e9      	b.n	8008196 <__sflush_r+0xda>
 80081c2:	bf00      	nop
 80081c4:	20400001 	.word	0x20400001

080081c8 <_fflush_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b913      	cbnz	r3, 80081d8 <_fflush_r+0x10>
 80081d2:	2500      	movs	r5, #0
 80081d4:	4628      	mov	r0, r5
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	b118      	cbz	r0, 80081e2 <_fflush_r+0x1a>
 80081da:	6983      	ldr	r3, [r0, #24]
 80081dc:	b90b      	cbnz	r3, 80081e2 <_fflush_r+0x1a>
 80081de:	f000 f887 	bl	80082f0 <__sinit>
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <_fflush_r+0x6c>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d11b      	bne.n	8008220 <_fflush_r+0x58>
 80081e8:	686c      	ldr	r4, [r5, #4]
 80081ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0ef      	beq.n	80081d2 <_fflush_r+0xa>
 80081f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081f4:	07d0      	lsls	r0, r2, #31
 80081f6:	d404      	bmi.n	8008202 <_fflush_r+0x3a>
 80081f8:	0599      	lsls	r1, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_fflush_r+0x3a>
 80081fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fe:	f000 f91a 	bl	8008436 <__retarget_lock_acquire_recursive>
 8008202:	4628      	mov	r0, r5
 8008204:	4621      	mov	r1, r4
 8008206:	f7ff ff59 	bl	80080bc <__sflush_r>
 800820a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800820c:	07da      	lsls	r2, r3, #31
 800820e:	4605      	mov	r5, r0
 8008210:	d4e0      	bmi.n	80081d4 <_fflush_r+0xc>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	059b      	lsls	r3, r3, #22
 8008216:	d4dd      	bmi.n	80081d4 <_fflush_r+0xc>
 8008218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800821a:	f000 f90d 	bl	8008438 <__retarget_lock_release_recursive>
 800821e:	e7d9      	b.n	80081d4 <_fflush_r+0xc>
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <_fflush_r+0x70>)
 8008222:	429c      	cmp	r4, r3
 8008224:	d101      	bne.n	800822a <_fflush_r+0x62>
 8008226:	68ac      	ldr	r4, [r5, #8]
 8008228:	e7df      	b.n	80081ea <_fflush_r+0x22>
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <_fflush_r+0x74>)
 800822c:	429c      	cmp	r4, r3
 800822e:	bf08      	it	eq
 8008230:	68ec      	ldreq	r4, [r5, #12]
 8008232:	e7da      	b.n	80081ea <_fflush_r+0x22>
 8008234:	08009568 	.word	0x08009568
 8008238:	08009588 	.word	0x08009588
 800823c:	08009548 	.word	0x08009548

08008240 <std>:
 8008240:	2300      	movs	r3, #0
 8008242:	b510      	push	{r4, lr}
 8008244:	4604      	mov	r4, r0
 8008246:	e9c0 3300 	strd	r3, r3, [r0]
 800824a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800824e:	6083      	str	r3, [r0, #8]
 8008250:	8181      	strh	r1, [r0, #12]
 8008252:	6643      	str	r3, [r0, #100]	; 0x64
 8008254:	81c2      	strh	r2, [r0, #14]
 8008256:	6183      	str	r3, [r0, #24]
 8008258:	4619      	mov	r1, r3
 800825a:	2208      	movs	r2, #8
 800825c:	305c      	adds	r0, #92	; 0x5c
 800825e:	f7fe fb99 	bl	8006994 <memset>
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <std+0x38>)
 8008264:	6263      	str	r3, [r4, #36]	; 0x24
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <std+0x3c>)
 8008268:	62a3      	str	r3, [r4, #40]	; 0x28
 800826a:	4b05      	ldr	r3, [pc, #20]	; (8008280 <std+0x40>)
 800826c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <std+0x44>)
 8008270:	6224      	str	r4, [r4, #32]
 8008272:	6323      	str	r3, [r4, #48]	; 0x30
 8008274:	bd10      	pop	{r4, pc}
 8008276:	bf00      	nop
 8008278:	080090dd 	.word	0x080090dd
 800827c:	080090ff 	.word	0x080090ff
 8008280:	08009137 	.word	0x08009137
 8008284:	0800915b 	.word	0x0800915b

08008288 <_cleanup_r>:
 8008288:	4901      	ldr	r1, [pc, #4]	; (8008290 <_cleanup_r+0x8>)
 800828a:	f000 b8af 	b.w	80083ec <_fwalk_reent>
 800828e:	bf00      	nop
 8008290:	080081c9 	.word	0x080081c9

08008294 <__sfmoreglue>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	2268      	movs	r2, #104	; 0x68
 8008298:	1e4d      	subs	r5, r1, #1
 800829a:	4355      	muls	r5, r2
 800829c:	460e      	mov	r6, r1
 800829e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082a2:	f000 fd3d 	bl	8008d20 <_malloc_r>
 80082a6:	4604      	mov	r4, r0
 80082a8:	b140      	cbz	r0, 80082bc <__sfmoreglue+0x28>
 80082aa:	2100      	movs	r1, #0
 80082ac:	e9c0 1600 	strd	r1, r6, [r0]
 80082b0:	300c      	adds	r0, #12
 80082b2:	60a0      	str	r0, [r4, #8]
 80082b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082b8:	f7fe fb6c 	bl	8006994 <memset>
 80082bc:	4620      	mov	r0, r4
 80082be:	bd70      	pop	{r4, r5, r6, pc}

080082c0 <__sfp_lock_acquire>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__sfp_lock_acquire+0x8>)
 80082c2:	f000 b8b8 	b.w	8008436 <__retarget_lock_acquire_recursive>
 80082c6:	bf00      	nop
 80082c8:	2400032d 	.word	0x2400032d

080082cc <__sfp_lock_release>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__sfp_lock_release+0x8>)
 80082ce:	f000 b8b3 	b.w	8008438 <__retarget_lock_release_recursive>
 80082d2:	bf00      	nop
 80082d4:	2400032d 	.word	0x2400032d

080082d8 <__sinit_lock_acquire>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sinit_lock_acquire+0x8>)
 80082da:	f000 b8ac 	b.w	8008436 <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	2400032e 	.word	0x2400032e

080082e4 <__sinit_lock_release>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__sinit_lock_release+0x8>)
 80082e6:	f000 b8a7 	b.w	8008438 <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	2400032e 	.word	0x2400032e

080082f0 <__sinit>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	4604      	mov	r4, r0
 80082f4:	f7ff fff0 	bl	80082d8 <__sinit_lock_acquire>
 80082f8:	69a3      	ldr	r3, [r4, #24]
 80082fa:	b11b      	cbz	r3, 8008304 <__sinit+0x14>
 80082fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008300:	f7ff bff0 	b.w	80082e4 <__sinit_lock_release>
 8008304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008308:	6523      	str	r3, [r4, #80]	; 0x50
 800830a:	4b13      	ldr	r3, [pc, #76]	; (8008358 <__sinit+0x68>)
 800830c:	4a13      	ldr	r2, [pc, #76]	; (800835c <__sinit+0x6c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	62a2      	str	r2, [r4, #40]	; 0x28
 8008312:	42a3      	cmp	r3, r4
 8008314:	bf04      	itt	eq
 8008316:	2301      	moveq	r3, #1
 8008318:	61a3      	streq	r3, [r4, #24]
 800831a:	4620      	mov	r0, r4
 800831c:	f000 f820 	bl	8008360 <__sfp>
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f81c 	bl	8008360 <__sfp>
 8008328:	60a0      	str	r0, [r4, #8]
 800832a:	4620      	mov	r0, r4
 800832c:	f000 f818 	bl	8008360 <__sfp>
 8008330:	2200      	movs	r2, #0
 8008332:	60e0      	str	r0, [r4, #12]
 8008334:	2104      	movs	r1, #4
 8008336:	6860      	ldr	r0, [r4, #4]
 8008338:	f7ff ff82 	bl	8008240 <std>
 800833c:	68a0      	ldr	r0, [r4, #8]
 800833e:	2201      	movs	r2, #1
 8008340:	2109      	movs	r1, #9
 8008342:	f7ff ff7d 	bl	8008240 <std>
 8008346:	68e0      	ldr	r0, [r4, #12]
 8008348:	2202      	movs	r2, #2
 800834a:	2112      	movs	r1, #18
 800834c:	f7ff ff78 	bl	8008240 <std>
 8008350:	2301      	movs	r3, #1
 8008352:	61a3      	str	r3, [r4, #24]
 8008354:	e7d2      	b.n	80082fc <__sinit+0xc>
 8008356:	bf00      	nop
 8008358:	08009480 	.word	0x08009480
 800835c:	08008289 	.word	0x08008289

08008360 <__sfp>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	4607      	mov	r7, r0
 8008364:	f7ff ffac 	bl	80082c0 <__sfp_lock_acquire>
 8008368:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <__sfp+0x84>)
 800836a:	681e      	ldr	r6, [r3, #0]
 800836c:	69b3      	ldr	r3, [r6, #24]
 800836e:	b913      	cbnz	r3, 8008376 <__sfp+0x16>
 8008370:	4630      	mov	r0, r6
 8008372:	f7ff ffbd 	bl	80082f0 <__sinit>
 8008376:	3648      	adds	r6, #72	; 0x48
 8008378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800837c:	3b01      	subs	r3, #1
 800837e:	d503      	bpl.n	8008388 <__sfp+0x28>
 8008380:	6833      	ldr	r3, [r6, #0]
 8008382:	b30b      	cbz	r3, 80083c8 <__sfp+0x68>
 8008384:	6836      	ldr	r6, [r6, #0]
 8008386:	e7f7      	b.n	8008378 <__sfp+0x18>
 8008388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800838c:	b9d5      	cbnz	r5, 80083c4 <__sfp+0x64>
 800838e:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <__sfp+0x88>)
 8008390:	60e3      	str	r3, [r4, #12]
 8008392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008396:	6665      	str	r5, [r4, #100]	; 0x64
 8008398:	f000 f84c 	bl	8008434 <__retarget_lock_init_recursive>
 800839c:	f7ff ff96 	bl	80082cc <__sfp_lock_release>
 80083a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083a8:	6025      	str	r5, [r4, #0]
 80083aa:	61a5      	str	r5, [r4, #24]
 80083ac:	2208      	movs	r2, #8
 80083ae:	4629      	mov	r1, r5
 80083b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083b4:	f7fe faee 	bl	8006994 <memset>
 80083b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083c0:	4620      	mov	r0, r4
 80083c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c4:	3468      	adds	r4, #104	; 0x68
 80083c6:	e7d9      	b.n	800837c <__sfp+0x1c>
 80083c8:	2104      	movs	r1, #4
 80083ca:	4638      	mov	r0, r7
 80083cc:	f7ff ff62 	bl	8008294 <__sfmoreglue>
 80083d0:	4604      	mov	r4, r0
 80083d2:	6030      	str	r0, [r6, #0]
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d1d5      	bne.n	8008384 <__sfp+0x24>
 80083d8:	f7ff ff78 	bl	80082cc <__sfp_lock_release>
 80083dc:	230c      	movs	r3, #12
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	e7ee      	b.n	80083c0 <__sfp+0x60>
 80083e2:	bf00      	nop
 80083e4:	08009480 	.word	0x08009480
 80083e8:	ffff0001 	.word	0xffff0001

080083ec <_fwalk_reent>:
 80083ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f0:	4606      	mov	r6, r0
 80083f2:	4688      	mov	r8, r1
 80083f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083f8:	2700      	movs	r7, #0
 80083fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083fe:	f1b9 0901 	subs.w	r9, r9, #1
 8008402:	d505      	bpl.n	8008410 <_fwalk_reent+0x24>
 8008404:	6824      	ldr	r4, [r4, #0]
 8008406:	2c00      	cmp	r4, #0
 8008408:	d1f7      	bne.n	80083fa <_fwalk_reent+0xe>
 800840a:	4638      	mov	r0, r7
 800840c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008410:	89ab      	ldrh	r3, [r5, #12]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d907      	bls.n	8008426 <_fwalk_reent+0x3a>
 8008416:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800841a:	3301      	adds	r3, #1
 800841c:	d003      	beq.n	8008426 <_fwalk_reent+0x3a>
 800841e:	4629      	mov	r1, r5
 8008420:	4630      	mov	r0, r6
 8008422:	47c0      	blx	r8
 8008424:	4307      	orrs	r7, r0
 8008426:	3568      	adds	r5, #104	; 0x68
 8008428:	e7e9      	b.n	80083fe <_fwalk_reent+0x12>
	...

0800842c <_localeconv_r>:
 800842c:	4800      	ldr	r0, [pc, #0]	; (8008430 <_localeconv_r+0x4>)
 800842e:	4770      	bx	lr
 8008430:	24000164 	.word	0x24000164

08008434 <__retarget_lock_init_recursive>:
 8008434:	4770      	bx	lr

08008436 <__retarget_lock_acquire_recursive>:
 8008436:	4770      	bx	lr

08008438 <__retarget_lock_release_recursive>:
 8008438:	4770      	bx	lr

0800843a <__swhatbuf_r>:
 800843a:	b570      	push	{r4, r5, r6, lr}
 800843c:	460e      	mov	r6, r1
 800843e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008442:	2900      	cmp	r1, #0
 8008444:	b096      	sub	sp, #88	; 0x58
 8008446:	4614      	mov	r4, r2
 8008448:	461d      	mov	r5, r3
 800844a:	da08      	bge.n	800845e <__swhatbuf_r+0x24>
 800844c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	602a      	str	r2, [r5, #0]
 8008454:	061a      	lsls	r2, r3, #24
 8008456:	d410      	bmi.n	800847a <__swhatbuf_r+0x40>
 8008458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845c:	e00e      	b.n	800847c <__swhatbuf_r+0x42>
 800845e:	466a      	mov	r2, sp
 8008460:	f000 fed2 	bl	8009208 <_fstat_r>
 8008464:	2800      	cmp	r0, #0
 8008466:	dbf1      	blt.n	800844c <__swhatbuf_r+0x12>
 8008468:	9a01      	ldr	r2, [sp, #4]
 800846a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800846e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008472:	425a      	negs	r2, r3
 8008474:	415a      	adcs	r2, r3
 8008476:	602a      	str	r2, [r5, #0]
 8008478:	e7ee      	b.n	8008458 <__swhatbuf_r+0x1e>
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	2000      	movs	r0, #0
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	b016      	add	sp, #88	; 0x58
 8008482:	bd70      	pop	{r4, r5, r6, pc}

08008484 <__smakebuf_r>:
 8008484:	898b      	ldrh	r3, [r1, #12]
 8008486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008488:	079d      	lsls	r5, r3, #30
 800848a:	4606      	mov	r6, r0
 800848c:	460c      	mov	r4, r1
 800848e:	d507      	bpl.n	80084a0 <__smakebuf_r+0x1c>
 8008490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	2301      	movs	r3, #1
 800849a:	6163      	str	r3, [r4, #20]
 800849c:	b002      	add	sp, #8
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	ab01      	add	r3, sp, #4
 80084a2:	466a      	mov	r2, sp
 80084a4:	f7ff ffc9 	bl	800843a <__swhatbuf_r>
 80084a8:	9900      	ldr	r1, [sp, #0]
 80084aa:	4605      	mov	r5, r0
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 fc37 	bl	8008d20 <_malloc_r>
 80084b2:	b948      	cbnz	r0, 80084c8 <__smakebuf_r+0x44>
 80084b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b8:	059a      	lsls	r2, r3, #22
 80084ba:	d4ef      	bmi.n	800849c <__smakebuf_r+0x18>
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	f043 0302 	orr.w	r3, r3, #2
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7e3      	b.n	8008490 <__smakebuf_r+0xc>
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <__smakebuf_r+0x7c>)
 80084ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	6163      	str	r3, [r4, #20]
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	6120      	str	r0, [r4, #16]
 80084de:	b15b      	cbz	r3, 80084f8 <__smakebuf_r+0x74>
 80084e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 fea1 	bl	800922c <_isatty_r>
 80084ea:	b128      	cbz	r0, 80084f8 <__smakebuf_r+0x74>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	f043 0301 	orr.w	r3, r3, #1
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	89a0      	ldrh	r0, [r4, #12]
 80084fa:	4305      	orrs	r5, r0
 80084fc:	81a5      	strh	r5, [r4, #12]
 80084fe:	e7cd      	b.n	800849c <__smakebuf_r+0x18>
 8008500:	08008289 	.word	0x08008289

08008504 <malloc>:
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <malloc+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f000 bc09 	b.w	8008d20 <_malloc_r>
 800850e:	bf00      	nop
 8008510:	24000010 	.word	0x24000010

08008514 <_Balloc>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	b976      	cbnz	r6, 800853c <_Balloc+0x28>
 800851e:	2010      	movs	r0, #16
 8008520:	f7ff fff0 	bl	8008504 <malloc>
 8008524:	4602      	mov	r2, r0
 8008526:	6260      	str	r0, [r4, #36]	; 0x24
 8008528:	b920      	cbnz	r0, 8008534 <_Balloc+0x20>
 800852a:	4b18      	ldr	r3, [pc, #96]	; (800858c <_Balloc+0x78>)
 800852c:	4818      	ldr	r0, [pc, #96]	; (8008590 <_Balloc+0x7c>)
 800852e:	2166      	movs	r1, #102	; 0x66
 8008530:	f000 fe2a 	bl	8009188 <__assert_func>
 8008534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008538:	6006      	str	r6, [r0, #0]
 800853a:	60c6      	str	r6, [r0, #12]
 800853c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800853e:	68f3      	ldr	r3, [r6, #12]
 8008540:	b183      	cbz	r3, 8008564 <_Balloc+0x50>
 8008542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800854a:	b9b8      	cbnz	r0, 800857c <_Balloc+0x68>
 800854c:	2101      	movs	r1, #1
 800854e:	fa01 f605 	lsl.w	r6, r1, r5
 8008552:	1d72      	adds	r2, r6, #5
 8008554:	0092      	lsls	r2, r2, #2
 8008556:	4620      	mov	r0, r4
 8008558:	f000 fb60 	bl	8008c1c <_calloc_r>
 800855c:	b160      	cbz	r0, 8008578 <_Balloc+0x64>
 800855e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008562:	e00e      	b.n	8008582 <_Balloc+0x6e>
 8008564:	2221      	movs	r2, #33	; 0x21
 8008566:	2104      	movs	r1, #4
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fb57 	bl	8008c1c <_calloc_r>
 800856e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008570:	60f0      	str	r0, [r6, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e4      	bne.n	8008542 <_Balloc+0x2e>
 8008578:	2000      	movs	r0, #0
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	6802      	ldr	r2, [r0, #0]
 800857e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008582:	2300      	movs	r3, #0
 8008584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008588:	e7f7      	b.n	800857a <_Balloc+0x66>
 800858a:	bf00      	nop
 800858c:	080094c5 	.word	0x080094c5
 8008590:	080095a8 	.word	0x080095a8

08008594 <_Bfree>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008598:	4605      	mov	r5, r0
 800859a:	460c      	mov	r4, r1
 800859c:	b976      	cbnz	r6, 80085bc <_Bfree+0x28>
 800859e:	2010      	movs	r0, #16
 80085a0:	f7ff ffb0 	bl	8008504 <malloc>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6268      	str	r0, [r5, #36]	; 0x24
 80085a8:	b920      	cbnz	r0, 80085b4 <_Bfree+0x20>
 80085aa:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <_Bfree+0x3c>)
 80085ac:	4809      	ldr	r0, [pc, #36]	; (80085d4 <_Bfree+0x40>)
 80085ae:	218a      	movs	r1, #138	; 0x8a
 80085b0:	f000 fdea 	bl	8009188 <__assert_func>
 80085b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085b8:	6006      	str	r6, [r0, #0]
 80085ba:	60c6      	str	r6, [r0, #12]
 80085bc:	b13c      	cbz	r4, 80085ce <_Bfree+0x3a>
 80085be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085c0:	6862      	ldr	r2, [r4, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085c8:	6021      	str	r1, [r4, #0]
 80085ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	080094c5 	.word	0x080094c5
 80085d4:	080095a8 	.word	0x080095a8

080085d8 <__multadd>:
 80085d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085dc:	690d      	ldr	r5, [r1, #16]
 80085de:	4607      	mov	r7, r0
 80085e0:	460c      	mov	r4, r1
 80085e2:	461e      	mov	r6, r3
 80085e4:	f101 0c14 	add.w	ip, r1, #20
 80085e8:	2000      	movs	r0, #0
 80085ea:	f8dc 3000 	ldr.w	r3, [ip]
 80085ee:	b299      	uxth	r1, r3
 80085f0:	fb02 6101 	mla	r1, r2, r1, r6
 80085f4:	0c1e      	lsrs	r6, r3, #16
 80085f6:	0c0b      	lsrs	r3, r1, #16
 80085f8:	fb02 3306 	mla	r3, r2, r6, r3
 80085fc:	b289      	uxth	r1, r1
 80085fe:	3001      	adds	r0, #1
 8008600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008604:	4285      	cmp	r5, r0
 8008606:	f84c 1b04 	str.w	r1, [ip], #4
 800860a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800860e:	dcec      	bgt.n	80085ea <__multadd+0x12>
 8008610:	b30e      	cbz	r6, 8008656 <__multadd+0x7e>
 8008612:	68a3      	ldr	r3, [r4, #8]
 8008614:	42ab      	cmp	r3, r5
 8008616:	dc19      	bgt.n	800864c <__multadd+0x74>
 8008618:	6861      	ldr	r1, [r4, #4]
 800861a:	4638      	mov	r0, r7
 800861c:	3101      	adds	r1, #1
 800861e:	f7ff ff79 	bl	8008514 <_Balloc>
 8008622:	4680      	mov	r8, r0
 8008624:	b928      	cbnz	r0, 8008632 <__multadd+0x5a>
 8008626:	4602      	mov	r2, r0
 8008628:	4b0c      	ldr	r3, [pc, #48]	; (800865c <__multadd+0x84>)
 800862a:	480d      	ldr	r0, [pc, #52]	; (8008660 <__multadd+0x88>)
 800862c:	21b5      	movs	r1, #181	; 0xb5
 800862e:	f000 fdab 	bl	8009188 <__assert_func>
 8008632:	6922      	ldr	r2, [r4, #16]
 8008634:	3202      	adds	r2, #2
 8008636:	f104 010c 	add.w	r1, r4, #12
 800863a:	0092      	lsls	r2, r2, #2
 800863c:	300c      	adds	r0, #12
 800863e:	f7fe f99b 	bl	8006978 <memcpy>
 8008642:	4621      	mov	r1, r4
 8008644:	4638      	mov	r0, r7
 8008646:	f7ff ffa5 	bl	8008594 <_Bfree>
 800864a:	4644      	mov	r4, r8
 800864c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008650:	3501      	adds	r5, #1
 8008652:	615e      	str	r6, [r3, #20]
 8008654:	6125      	str	r5, [r4, #16]
 8008656:	4620      	mov	r0, r4
 8008658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800865c:	08009537 	.word	0x08009537
 8008660:	080095a8 	.word	0x080095a8

08008664 <__hi0bits>:
 8008664:	0c03      	lsrs	r3, r0, #16
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	b9d3      	cbnz	r3, 80086a0 <__hi0bits+0x3c>
 800866a:	0400      	lsls	r0, r0, #16
 800866c:	2310      	movs	r3, #16
 800866e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008672:	bf04      	itt	eq
 8008674:	0200      	lsleq	r0, r0, #8
 8008676:	3308      	addeq	r3, #8
 8008678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800867c:	bf04      	itt	eq
 800867e:	0100      	lsleq	r0, r0, #4
 8008680:	3304      	addeq	r3, #4
 8008682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008686:	bf04      	itt	eq
 8008688:	0080      	lsleq	r0, r0, #2
 800868a:	3302      	addeq	r3, #2
 800868c:	2800      	cmp	r0, #0
 800868e:	db05      	blt.n	800869c <__hi0bits+0x38>
 8008690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008694:	f103 0301 	add.w	r3, r3, #1
 8008698:	bf08      	it	eq
 800869a:	2320      	moveq	r3, #32
 800869c:	4618      	mov	r0, r3
 800869e:	4770      	bx	lr
 80086a0:	2300      	movs	r3, #0
 80086a2:	e7e4      	b.n	800866e <__hi0bits+0xa>

080086a4 <__lo0bits>:
 80086a4:	6803      	ldr	r3, [r0, #0]
 80086a6:	f013 0207 	ands.w	r2, r3, #7
 80086aa:	4601      	mov	r1, r0
 80086ac:	d00b      	beq.n	80086c6 <__lo0bits+0x22>
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d423      	bmi.n	80086fa <__lo0bits+0x56>
 80086b2:	0798      	lsls	r0, r3, #30
 80086b4:	bf49      	itett	mi
 80086b6:	085b      	lsrmi	r3, r3, #1
 80086b8:	089b      	lsrpl	r3, r3, #2
 80086ba:	2001      	movmi	r0, #1
 80086bc:	600b      	strmi	r3, [r1, #0]
 80086be:	bf5c      	itt	pl
 80086c0:	600b      	strpl	r3, [r1, #0]
 80086c2:	2002      	movpl	r0, #2
 80086c4:	4770      	bx	lr
 80086c6:	b298      	uxth	r0, r3
 80086c8:	b9a8      	cbnz	r0, 80086f6 <__lo0bits+0x52>
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	2010      	movs	r0, #16
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	b90a      	cbnz	r2, 80086d6 <__lo0bits+0x32>
 80086d2:	3008      	adds	r0, #8
 80086d4:	0a1b      	lsrs	r3, r3, #8
 80086d6:	071a      	lsls	r2, r3, #28
 80086d8:	bf04      	itt	eq
 80086da:	091b      	lsreq	r3, r3, #4
 80086dc:	3004      	addeq	r0, #4
 80086de:	079a      	lsls	r2, r3, #30
 80086e0:	bf04      	itt	eq
 80086e2:	089b      	lsreq	r3, r3, #2
 80086e4:	3002      	addeq	r0, #2
 80086e6:	07da      	lsls	r2, r3, #31
 80086e8:	d403      	bmi.n	80086f2 <__lo0bits+0x4e>
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	f100 0001 	add.w	r0, r0, #1
 80086f0:	d005      	beq.n	80086fe <__lo0bits+0x5a>
 80086f2:	600b      	str	r3, [r1, #0]
 80086f4:	4770      	bx	lr
 80086f6:	4610      	mov	r0, r2
 80086f8:	e7e9      	b.n	80086ce <__lo0bits+0x2a>
 80086fa:	2000      	movs	r0, #0
 80086fc:	4770      	bx	lr
 80086fe:	2020      	movs	r0, #32
 8008700:	4770      	bx	lr
	...

08008704 <__i2b>:
 8008704:	b510      	push	{r4, lr}
 8008706:	460c      	mov	r4, r1
 8008708:	2101      	movs	r1, #1
 800870a:	f7ff ff03 	bl	8008514 <_Balloc>
 800870e:	4602      	mov	r2, r0
 8008710:	b928      	cbnz	r0, 800871e <__i2b+0x1a>
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <__i2b+0x24>)
 8008714:	4805      	ldr	r0, [pc, #20]	; (800872c <__i2b+0x28>)
 8008716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800871a:	f000 fd35 	bl	8009188 <__assert_func>
 800871e:	2301      	movs	r3, #1
 8008720:	6144      	str	r4, [r0, #20]
 8008722:	6103      	str	r3, [r0, #16]
 8008724:	bd10      	pop	{r4, pc}
 8008726:	bf00      	nop
 8008728:	08009537 	.word	0x08009537
 800872c:	080095a8 	.word	0x080095a8

08008730 <__multiply>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	4691      	mov	r9, r2
 8008736:	690a      	ldr	r2, [r1, #16]
 8008738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800873c:	429a      	cmp	r2, r3
 800873e:	bfb8      	it	lt
 8008740:	460b      	movlt	r3, r1
 8008742:	460c      	mov	r4, r1
 8008744:	bfbc      	itt	lt
 8008746:	464c      	movlt	r4, r9
 8008748:	4699      	movlt	r9, r3
 800874a:	6927      	ldr	r7, [r4, #16]
 800874c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008750:	68a3      	ldr	r3, [r4, #8]
 8008752:	6861      	ldr	r1, [r4, #4]
 8008754:	eb07 060a 	add.w	r6, r7, sl
 8008758:	42b3      	cmp	r3, r6
 800875a:	b085      	sub	sp, #20
 800875c:	bfb8      	it	lt
 800875e:	3101      	addlt	r1, #1
 8008760:	f7ff fed8 	bl	8008514 <_Balloc>
 8008764:	b930      	cbnz	r0, 8008774 <__multiply+0x44>
 8008766:	4602      	mov	r2, r0
 8008768:	4b44      	ldr	r3, [pc, #272]	; (800887c <__multiply+0x14c>)
 800876a:	4845      	ldr	r0, [pc, #276]	; (8008880 <__multiply+0x150>)
 800876c:	f240 115d 	movw	r1, #349	; 0x15d
 8008770:	f000 fd0a 	bl	8009188 <__assert_func>
 8008774:	f100 0514 	add.w	r5, r0, #20
 8008778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800877c:	462b      	mov	r3, r5
 800877e:	2200      	movs	r2, #0
 8008780:	4543      	cmp	r3, r8
 8008782:	d321      	bcc.n	80087c8 <__multiply+0x98>
 8008784:	f104 0314 	add.w	r3, r4, #20
 8008788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800878c:	f109 0314 	add.w	r3, r9, #20
 8008790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008794:	9202      	str	r2, [sp, #8]
 8008796:	1b3a      	subs	r2, r7, r4
 8008798:	3a15      	subs	r2, #21
 800879a:	f022 0203 	bic.w	r2, r2, #3
 800879e:	3204      	adds	r2, #4
 80087a0:	f104 0115 	add.w	r1, r4, #21
 80087a4:	428f      	cmp	r7, r1
 80087a6:	bf38      	it	cc
 80087a8:	2204      	movcc	r2, #4
 80087aa:	9201      	str	r2, [sp, #4]
 80087ac:	9a02      	ldr	r2, [sp, #8]
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d80c      	bhi.n	80087ce <__multiply+0x9e>
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	dd03      	ble.n	80087c0 <__multiply+0x90>
 80087b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d05a      	beq.n	8008876 <__multiply+0x146>
 80087c0:	6106      	str	r6, [r0, #16]
 80087c2:	b005      	add	sp, #20
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	f843 2b04 	str.w	r2, [r3], #4
 80087cc:	e7d8      	b.n	8008780 <__multiply+0x50>
 80087ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80087d2:	f1ba 0f00 	cmp.w	sl, #0
 80087d6:	d024      	beq.n	8008822 <__multiply+0xf2>
 80087d8:	f104 0e14 	add.w	lr, r4, #20
 80087dc:	46a9      	mov	r9, r5
 80087de:	f04f 0c00 	mov.w	ip, #0
 80087e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087e6:	f8d9 1000 	ldr.w	r1, [r9]
 80087ea:	fa1f fb82 	uxth.w	fp, r2
 80087ee:	b289      	uxth	r1, r1
 80087f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80087f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087f8:	f8d9 2000 	ldr.w	r2, [r9]
 80087fc:	4461      	add	r1, ip
 80087fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008802:	fb0a c20b 	mla	r2, sl, fp, ip
 8008806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800880a:	b289      	uxth	r1, r1
 800880c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008810:	4577      	cmp	r7, lr
 8008812:	f849 1b04 	str.w	r1, [r9], #4
 8008816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800881a:	d8e2      	bhi.n	80087e2 <__multiply+0xb2>
 800881c:	9a01      	ldr	r2, [sp, #4]
 800881e:	f845 c002 	str.w	ip, [r5, r2]
 8008822:	9a03      	ldr	r2, [sp, #12]
 8008824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008828:	3304      	adds	r3, #4
 800882a:	f1b9 0f00 	cmp.w	r9, #0
 800882e:	d020      	beq.n	8008872 <__multiply+0x142>
 8008830:	6829      	ldr	r1, [r5, #0]
 8008832:	f104 0c14 	add.w	ip, r4, #20
 8008836:	46ae      	mov	lr, r5
 8008838:	f04f 0a00 	mov.w	sl, #0
 800883c:	f8bc b000 	ldrh.w	fp, [ip]
 8008840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008844:	fb09 220b 	mla	r2, r9, fp, r2
 8008848:	4492      	add	sl, r2
 800884a:	b289      	uxth	r1, r1
 800884c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008850:	f84e 1b04 	str.w	r1, [lr], #4
 8008854:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008858:	f8be 1000 	ldrh.w	r1, [lr]
 800885c:	0c12      	lsrs	r2, r2, #16
 800885e:	fb09 1102 	mla	r1, r9, r2, r1
 8008862:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008866:	4567      	cmp	r7, ip
 8008868:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800886c:	d8e6      	bhi.n	800883c <__multiply+0x10c>
 800886e:	9a01      	ldr	r2, [sp, #4]
 8008870:	50a9      	str	r1, [r5, r2]
 8008872:	3504      	adds	r5, #4
 8008874:	e79a      	b.n	80087ac <__multiply+0x7c>
 8008876:	3e01      	subs	r6, #1
 8008878:	e79c      	b.n	80087b4 <__multiply+0x84>
 800887a:	bf00      	nop
 800887c:	08009537 	.word	0x08009537
 8008880:	080095a8 	.word	0x080095a8

08008884 <__pow5mult>:
 8008884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008888:	4615      	mov	r5, r2
 800888a:	f012 0203 	ands.w	r2, r2, #3
 800888e:	4606      	mov	r6, r0
 8008890:	460f      	mov	r7, r1
 8008892:	d007      	beq.n	80088a4 <__pow5mult+0x20>
 8008894:	4c25      	ldr	r4, [pc, #148]	; (800892c <__pow5mult+0xa8>)
 8008896:	3a01      	subs	r2, #1
 8008898:	2300      	movs	r3, #0
 800889a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800889e:	f7ff fe9b 	bl	80085d8 <__multadd>
 80088a2:	4607      	mov	r7, r0
 80088a4:	10ad      	asrs	r5, r5, #2
 80088a6:	d03d      	beq.n	8008924 <__pow5mult+0xa0>
 80088a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088aa:	b97c      	cbnz	r4, 80088cc <__pow5mult+0x48>
 80088ac:	2010      	movs	r0, #16
 80088ae:	f7ff fe29 	bl	8008504 <malloc>
 80088b2:	4602      	mov	r2, r0
 80088b4:	6270      	str	r0, [r6, #36]	; 0x24
 80088b6:	b928      	cbnz	r0, 80088c4 <__pow5mult+0x40>
 80088b8:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <__pow5mult+0xac>)
 80088ba:	481e      	ldr	r0, [pc, #120]	; (8008934 <__pow5mult+0xb0>)
 80088bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088c0:	f000 fc62 	bl	8009188 <__assert_func>
 80088c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088c8:	6004      	str	r4, [r0, #0]
 80088ca:	60c4      	str	r4, [r0, #12]
 80088cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088d4:	b94c      	cbnz	r4, 80088ea <__pow5mult+0x66>
 80088d6:	f240 2171 	movw	r1, #625	; 0x271
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ff12 	bl	8008704 <__i2b>
 80088e0:	2300      	movs	r3, #0
 80088e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088e6:	4604      	mov	r4, r0
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	f04f 0900 	mov.w	r9, #0
 80088ee:	07eb      	lsls	r3, r5, #31
 80088f0:	d50a      	bpl.n	8008908 <__pow5mult+0x84>
 80088f2:	4639      	mov	r1, r7
 80088f4:	4622      	mov	r2, r4
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ff1a 	bl	8008730 <__multiply>
 80088fc:	4639      	mov	r1, r7
 80088fe:	4680      	mov	r8, r0
 8008900:	4630      	mov	r0, r6
 8008902:	f7ff fe47 	bl	8008594 <_Bfree>
 8008906:	4647      	mov	r7, r8
 8008908:	106d      	asrs	r5, r5, #1
 800890a:	d00b      	beq.n	8008924 <__pow5mult+0xa0>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	b938      	cbnz	r0, 8008920 <__pow5mult+0x9c>
 8008910:	4622      	mov	r2, r4
 8008912:	4621      	mov	r1, r4
 8008914:	4630      	mov	r0, r6
 8008916:	f7ff ff0b 	bl	8008730 <__multiply>
 800891a:	6020      	str	r0, [r4, #0]
 800891c:	f8c0 9000 	str.w	r9, [r0]
 8008920:	4604      	mov	r4, r0
 8008922:	e7e4      	b.n	80088ee <__pow5mult+0x6a>
 8008924:	4638      	mov	r0, r7
 8008926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892a:	bf00      	nop
 800892c:	080096f8 	.word	0x080096f8
 8008930:	080094c5 	.word	0x080094c5
 8008934:	080095a8 	.word	0x080095a8

08008938 <__lshift>:
 8008938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	6849      	ldr	r1, [r1, #4]
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008946:	68a3      	ldr	r3, [r4, #8]
 8008948:	4607      	mov	r7, r0
 800894a:	4691      	mov	r9, r2
 800894c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008950:	f108 0601 	add.w	r6, r8, #1
 8008954:	42b3      	cmp	r3, r6
 8008956:	db0b      	blt.n	8008970 <__lshift+0x38>
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff fddb 	bl	8008514 <_Balloc>
 800895e:	4605      	mov	r5, r0
 8008960:	b948      	cbnz	r0, 8008976 <__lshift+0x3e>
 8008962:	4602      	mov	r2, r0
 8008964:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <__lshift+0xd8>)
 8008966:	482b      	ldr	r0, [pc, #172]	; (8008a14 <__lshift+0xdc>)
 8008968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800896c:	f000 fc0c 	bl	8009188 <__assert_func>
 8008970:	3101      	adds	r1, #1
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	e7ee      	b.n	8008954 <__lshift+0x1c>
 8008976:	2300      	movs	r3, #0
 8008978:	f100 0114 	add.w	r1, r0, #20
 800897c:	f100 0210 	add.w	r2, r0, #16
 8008980:	4618      	mov	r0, r3
 8008982:	4553      	cmp	r3, sl
 8008984:	db37      	blt.n	80089f6 <__lshift+0xbe>
 8008986:	6920      	ldr	r0, [r4, #16]
 8008988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800898c:	f104 0314 	add.w	r3, r4, #20
 8008990:	f019 091f 	ands.w	r9, r9, #31
 8008994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800899c:	d02f      	beq.n	80089fe <__lshift+0xc6>
 800899e:	f1c9 0e20 	rsb	lr, r9, #32
 80089a2:	468a      	mov	sl, r1
 80089a4:	f04f 0c00 	mov.w	ip, #0
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	fa02 f209 	lsl.w	r2, r2, r9
 80089ae:	ea42 020c 	orr.w	r2, r2, ip
 80089b2:	f84a 2b04 	str.w	r2, [sl], #4
 80089b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ba:	4298      	cmp	r0, r3
 80089bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089c0:	d8f2      	bhi.n	80089a8 <__lshift+0x70>
 80089c2:	1b03      	subs	r3, r0, r4
 80089c4:	3b15      	subs	r3, #21
 80089c6:	f023 0303 	bic.w	r3, r3, #3
 80089ca:	3304      	adds	r3, #4
 80089cc:	f104 0215 	add.w	r2, r4, #21
 80089d0:	4290      	cmp	r0, r2
 80089d2:	bf38      	it	cc
 80089d4:	2304      	movcc	r3, #4
 80089d6:	f841 c003 	str.w	ip, [r1, r3]
 80089da:	f1bc 0f00 	cmp.w	ip, #0
 80089de:	d001      	beq.n	80089e4 <__lshift+0xac>
 80089e0:	f108 0602 	add.w	r6, r8, #2
 80089e4:	3e01      	subs	r6, #1
 80089e6:	4638      	mov	r0, r7
 80089e8:	612e      	str	r6, [r5, #16]
 80089ea:	4621      	mov	r1, r4
 80089ec:	f7ff fdd2 	bl	8008594 <_Bfree>
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089fa:	3301      	adds	r3, #1
 80089fc:	e7c1      	b.n	8008982 <__lshift+0x4a>
 80089fe:	3904      	subs	r1, #4
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a08:	4298      	cmp	r0, r3
 8008a0a:	d8f9      	bhi.n	8008a00 <__lshift+0xc8>
 8008a0c:	e7ea      	b.n	80089e4 <__lshift+0xac>
 8008a0e:	bf00      	nop
 8008a10:	08009537 	.word	0x08009537
 8008a14:	080095a8 	.word	0x080095a8

08008a18 <__mcmp>:
 8008a18:	b530      	push	{r4, r5, lr}
 8008a1a:	6902      	ldr	r2, [r0, #16]
 8008a1c:	690c      	ldr	r4, [r1, #16]
 8008a1e:	1b12      	subs	r2, r2, r4
 8008a20:	d10e      	bne.n	8008a40 <__mcmp+0x28>
 8008a22:	f100 0314 	add.w	r3, r0, #20
 8008a26:	3114      	adds	r1, #20
 8008a28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a38:	42a5      	cmp	r5, r4
 8008a3a:	d003      	beq.n	8008a44 <__mcmp+0x2c>
 8008a3c:	d305      	bcc.n	8008a4a <__mcmp+0x32>
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4610      	mov	r0, r2
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	4283      	cmp	r3, r0
 8008a46:	d3f3      	bcc.n	8008a30 <__mcmp+0x18>
 8008a48:	e7fa      	b.n	8008a40 <__mcmp+0x28>
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	e7f7      	b.n	8008a40 <__mcmp+0x28>

08008a50 <__mdiff>:
 8008a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	4606      	mov	r6, r0
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4690      	mov	r8, r2
 8008a5e:	f7ff ffdb 	bl	8008a18 <__mcmp>
 8008a62:	1e05      	subs	r5, r0, #0
 8008a64:	d110      	bne.n	8008a88 <__mdiff+0x38>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff fd53 	bl	8008514 <_Balloc>
 8008a6e:	b930      	cbnz	r0, 8008a7e <__mdiff+0x2e>
 8008a70:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <__mdiff+0x10c>)
 8008a72:	4602      	mov	r2, r0
 8008a74:	f240 2132 	movw	r1, #562	; 0x232
 8008a78:	4839      	ldr	r0, [pc, #228]	; (8008b60 <__mdiff+0x110>)
 8008a7a:	f000 fb85 	bl	8009188 <__assert_func>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	bfa4      	itt	ge
 8008a8a:	4643      	movge	r3, r8
 8008a8c:	46a0      	movge	r8, r4
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a94:	bfa6      	itte	ge
 8008a96:	461c      	movge	r4, r3
 8008a98:	2500      	movge	r5, #0
 8008a9a:	2501      	movlt	r5, #1
 8008a9c:	f7ff fd3a 	bl	8008514 <_Balloc>
 8008aa0:	b920      	cbnz	r0, 8008aac <__mdiff+0x5c>
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <__mdiff+0x10c>)
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008aaa:	e7e5      	b.n	8008a78 <__mdiff+0x28>
 8008aac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ab0:	6926      	ldr	r6, [r4, #16]
 8008ab2:	60c5      	str	r5, [r0, #12]
 8008ab4:	f104 0914 	add.w	r9, r4, #20
 8008ab8:	f108 0514 	add.w	r5, r8, #20
 8008abc:	f100 0e14 	add.w	lr, r0, #20
 8008ac0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ac8:	f108 0210 	add.w	r2, r8, #16
 8008acc:	46f2      	mov	sl, lr
 8008ace:	2100      	movs	r1, #0
 8008ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ad8:	fa1f f883 	uxth.w	r8, r3
 8008adc:	fa11 f18b 	uxtah	r1, r1, fp
 8008ae0:	0c1b      	lsrs	r3, r3, #16
 8008ae2:	eba1 0808 	sub.w	r8, r1, r8
 8008ae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aee:	fa1f f888 	uxth.w	r8, r8
 8008af2:	1419      	asrs	r1, r3, #16
 8008af4:	454e      	cmp	r6, r9
 8008af6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008afa:	f84a 3b04 	str.w	r3, [sl], #4
 8008afe:	d8e7      	bhi.n	8008ad0 <__mdiff+0x80>
 8008b00:	1b33      	subs	r3, r6, r4
 8008b02:	3b15      	subs	r3, #21
 8008b04:	f023 0303 	bic.w	r3, r3, #3
 8008b08:	3304      	adds	r3, #4
 8008b0a:	3415      	adds	r4, #21
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	bf38      	it	cc
 8008b10:	2304      	movcc	r3, #4
 8008b12:	441d      	add	r5, r3
 8008b14:	4473      	add	r3, lr
 8008b16:	469e      	mov	lr, r3
 8008b18:	462e      	mov	r6, r5
 8008b1a:	4566      	cmp	r6, ip
 8008b1c:	d30e      	bcc.n	8008b3c <__mdiff+0xec>
 8008b1e:	f10c 0203 	add.w	r2, ip, #3
 8008b22:	1b52      	subs	r2, r2, r5
 8008b24:	f022 0203 	bic.w	r2, r2, #3
 8008b28:	3d03      	subs	r5, #3
 8008b2a:	45ac      	cmp	ip, r5
 8008b2c:	bf38      	it	cc
 8008b2e:	2200      	movcc	r2, #0
 8008b30:	441a      	add	r2, r3
 8008b32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b36:	b17b      	cbz	r3, 8008b58 <__mdiff+0x108>
 8008b38:	6107      	str	r7, [r0, #16]
 8008b3a:	e7a3      	b.n	8008a84 <__mdiff+0x34>
 8008b3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b40:	fa11 f288 	uxtah	r2, r1, r8
 8008b44:	1414      	asrs	r4, r2, #16
 8008b46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b4a:	b292      	uxth	r2, r2
 8008b4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b50:	f84e 2b04 	str.w	r2, [lr], #4
 8008b54:	1421      	asrs	r1, r4, #16
 8008b56:	e7e0      	b.n	8008b1a <__mdiff+0xca>
 8008b58:	3f01      	subs	r7, #1
 8008b5a:	e7ea      	b.n	8008b32 <__mdiff+0xe2>
 8008b5c:	08009537 	.word	0x08009537
 8008b60:	080095a8 	.word	0x080095a8

08008b64 <__d2b>:
 8008b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b68:	4689      	mov	r9, r1
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	ec57 6b10 	vmov	r6, r7, d0
 8008b70:	4690      	mov	r8, r2
 8008b72:	f7ff fccf 	bl	8008514 <_Balloc>
 8008b76:	4604      	mov	r4, r0
 8008b78:	b930      	cbnz	r0, 8008b88 <__d2b+0x24>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b25      	ldr	r3, [pc, #148]	; (8008c14 <__d2b+0xb0>)
 8008b7e:	4826      	ldr	r0, [pc, #152]	; (8008c18 <__d2b+0xb4>)
 8008b80:	f240 310a 	movw	r1, #778	; 0x30a
 8008b84:	f000 fb00 	bl	8009188 <__assert_func>
 8008b88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b90:	bb35      	cbnz	r5, 8008be0 <__d2b+0x7c>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	d028      	beq.n	8008bea <__d2b+0x86>
 8008b98:	4668      	mov	r0, sp
 8008b9a:	9600      	str	r6, [sp, #0]
 8008b9c:	f7ff fd82 	bl	80086a4 <__lo0bits>
 8008ba0:	9900      	ldr	r1, [sp, #0]
 8008ba2:	b300      	cbz	r0, 8008be6 <__d2b+0x82>
 8008ba4:	9a01      	ldr	r2, [sp, #4]
 8008ba6:	f1c0 0320 	rsb	r3, r0, #32
 8008baa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	40c2      	lsrs	r2, r0
 8008bb2:	6163      	str	r3, [r4, #20]
 8008bb4:	9201      	str	r2, [sp, #4]
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	61a3      	str	r3, [r4, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bf14      	ite	ne
 8008bbe:	2202      	movne	r2, #2
 8008bc0:	2201      	moveq	r2, #1
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	b1d5      	cbz	r5, 8008bfc <__d2b+0x98>
 8008bc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bca:	4405      	add	r5, r0
 8008bcc:	f8c9 5000 	str.w	r5, [r9]
 8008bd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bd4:	f8c8 0000 	str.w	r0, [r8]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	b003      	add	sp, #12
 8008bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008be4:	e7d5      	b.n	8008b92 <__d2b+0x2e>
 8008be6:	6161      	str	r1, [r4, #20]
 8008be8:	e7e5      	b.n	8008bb6 <__d2b+0x52>
 8008bea:	a801      	add	r0, sp, #4
 8008bec:	f7ff fd5a 	bl	80086a4 <__lo0bits>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	6163      	str	r3, [r4, #20]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	6122      	str	r2, [r4, #16]
 8008bf8:	3020      	adds	r0, #32
 8008bfa:	e7e3      	b.n	8008bc4 <__d2b+0x60>
 8008bfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c04:	f8c9 0000 	str.w	r0, [r9]
 8008c08:	6918      	ldr	r0, [r3, #16]
 8008c0a:	f7ff fd2b 	bl	8008664 <__hi0bits>
 8008c0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c12:	e7df      	b.n	8008bd4 <__d2b+0x70>
 8008c14:	08009537 	.word	0x08009537
 8008c18:	080095a8 	.word	0x080095a8

08008c1c <_calloc_r>:
 8008c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c1e:	fba1 2402 	umull	r2, r4, r1, r2
 8008c22:	b94c      	cbnz	r4, 8008c38 <_calloc_r+0x1c>
 8008c24:	4611      	mov	r1, r2
 8008c26:	9201      	str	r2, [sp, #4]
 8008c28:	f000 f87a 	bl	8008d20 <_malloc_r>
 8008c2c:	9a01      	ldr	r2, [sp, #4]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	b930      	cbnz	r0, 8008c40 <_calloc_r+0x24>
 8008c32:	4628      	mov	r0, r5
 8008c34:	b003      	add	sp, #12
 8008c36:	bd30      	pop	{r4, r5, pc}
 8008c38:	220c      	movs	r2, #12
 8008c3a:	6002      	str	r2, [r0, #0]
 8008c3c:	2500      	movs	r5, #0
 8008c3e:	e7f8      	b.n	8008c32 <_calloc_r+0x16>
 8008c40:	4621      	mov	r1, r4
 8008c42:	f7fd fea7 	bl	8006994 <memset>
 8008c46:	e7f4      	b.n	8008c32 <_calloc_r+0x16>

08008c48 <_free_r>:
 8008c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d044      	beq.n	8008cd8 <_free_r+0x90>
 8008c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c52:	9001      	str	r0, [sp, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5a:	bfb8      	it	lt
 8008c5c:	18e4      	addlt	r4, r4, r3
 8008c5e:	f000 fb19 	bl	8009294 <__malloc_lock>
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <_free_r+0x94>)
 8008c64:	9801      	ldr	r0, [sp, #4]
 8008c66:	6813      	ldr	r3, [r2, #0]
 8008c68:	b933      	cbnz	r3, 8008c78 <_free_r+0x30>
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6014      	str	r4, [r2, #0]
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c74:	f000 bb14 	b.w	80092a0 <__malloc_unlock>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d908      	bls.n	8008c8e <_free_r+0x46>
 8008c7c:	6825      	ldr	r5, [r4, #0]
 8008c7e:	1961      	adds	r1, r4, r5
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf01      	itttt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	1949      	addeq	r1, r1, r5
 8008c8a:	6021      	streq	r1, [r4, #0]
 8008c8c:	e7ed      	b.n	8008c6a <_free_r+0x22>
 8008c8e:	461a      	mov	r2, r3
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	b10b      	cbz	r3, 8008c98 <_free_r+0x50>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d9fa      	bls.n	8008c8e <_free_r+0x46>
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	1855      	adds	r5, r2, r1
 8008c9c:	42a5      	cmp	r5, r4
 8008c9e:	d10b      	bne.n	8008cb8 <_free_r+0x70>
 8008ca0:	6824      	ldr	r4, [r4, #0]
 8008ca2:	4421      	add	r1, r4
 8008ca4:	1854      	adds	r4, r2, r1
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	d1e0      	bne.n	8008c6e <_free_r+0x26>
 8008cac:	681c      	ldr	r4, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	4421      	add	r1, r4
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	e7da      	b.n	8008c6e <_free_r+0x26>
 8008cb8:	d902      	bls.n	8008cc0 <_free_r+0x78>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	e7d6      	b.n	8008c6e <_free_r+0x26>
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	1961      	adds	r1, r4, r5
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf04      	itt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	bf04      	itt	eq
 8008cd0:	1949      	addeq	r1, r1, r5
 8008cd2:	6021      	streq	r1, [r4, #0]
 8008cd4:	6054      	str	r4, [r2, #4]
 8008cd6:	e7ca      	b.n	8008c6e <_free_r+0x26>
 8008cd8:	b003      	add	sp, #12
 8008cda:	bd30      	pop	{r4, r5, pc}
 8008cdc:	24000330 	.word	0x24000330

08008ce0 <sbrk_aligned>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4e0e      	ldr	r6, [pc, #56]	; (8008d1c <sbrk_aligned+0x3c>)
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	6831      	ldr	r1, [r6, #0]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	b911      	cbnz	r1, 8008cf2 <sbrk_aligned+0x12>
 8008cec:	f000 f9e6 	bl	80090bc <_sbrk_r>
 8008cf0:	6030      	str	r0, [r6, #0]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f000 f9e1 	bl	80090bc <_sbrk_r>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d00a      	beq.n	8008d14 <sbrk_aligned+0x34>
 8008cfe:	1cc4      	adds	r4, r0, #3
 8008d00:	f024 0403 	bic.w	r4, r4, #3
 8008d04:	42a0      	cmp	r0, r4
 8008d06:	d007      	beq.n	8008d18 <sbrk_aligned+0x38>
 8008d08:	1a21      	subs	r1, r4, r0
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 f9d6 	bl	80090bc <_sbrk_r>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d101      	bne.n	8008d18 <sbrk_aligned+0x38>
 8008d14:	f04f 34ff 	mov.w	r4, #4294967295
 8008d18:	4620      	mov	r0, r4
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	24000334 	.word	0x24000334

08008d20 <_malloc_r>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	1ccd      	adds	r5, r1, #3
 8008d26:	f025 0503 	bic.w	r5, r5, #3
 8008d2a:	3508      	adds	r5, #8
 8008d2c:	2d0c      	cmp	r5, #12
 8008d2e:	bf38      	it	cc
 8008d30:	250c      	movcc	r5, #12
 8008d32:	2d00      	cmp	r5, #0
 8008d34:	4607      	mov	r7, r0
 8008d36:	db01      	blt.n	8008d3c <_malloc_r+0x1c>
 8008d38:	42a9      	cmp	r1, r5
 8008d3a:	d905      	bls.n	8008d48 <_malloc_r+0x28>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	2600      	movs	r6, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	4e2e      	ldr	r6, [pc, #184]	; (8008e04 <_malloc_r+0xe4>)
 8008d4a:	f000 faa3 	bl	8009294 <__malloc_lock>
 8008d4e:	6833      	ldr	r3, [r6, #0]
 8008d50:	461c      	mov	r4, r3
 8008d52:	bb34      	cbnz	r4, 8008da2 <_malloc_r+0x82>
 8008d54:	4629      	mov	r1, r5
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7ff ffc2 	bl	8008ce0 <sbrk_aligned>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	4604      	mov	r4, r0
 8008d60:	d14d      	bne.n	8008dfe <_malloc_r+0xde>
 8008d62:	6834      	ldr	r4, [r6, #0]
 8008d64:	4626      	mov	r6, r4
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d140      	bne.n	8008dec <_malloc_r+0xcc>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4638      	mov	r0, r7
 8008d70:	eb04 0803 	add.w	r8, r4, r3
 8008d74:	f000 f9a2 	bl	80090bc <_sbrk_r>
 8008d78:	4580      	cmp	r8, r0
 8008d7a:	d13a      	bne.n	8008df2 <_malloc_r+0xd2>
 8008d7c:	6821      	ldr	r1, [r4, #0]
 8008d7e:	3503      	adds	r5, #3
 8008d80:	1a6d      	subs	r5, r5, r1
 8008d82:	f025 0503 	bic.w	r5, r5, #3
 8008d86:	3508      	adds	r5, #8
 8008d88:	2d0c      	cmp	r5, #12
 8008d8a:	bf38      	it	cc
 8008d8c:	250c      	movcc	r5, #12
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ffa5 	bl	8008ce0 <sbrk_aligned>
 8008d96:	3001      	adds	r0, #1
 8008d98:	d02b      	beq.n	8008df2 <_malloc_r+0xd2>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	442b      	add	r3, r5
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	e00e      	b.n	8008dc0 <_malloc_r+0xa0>
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	1b52      	subs	r2, r2, r5
 8008da6:	d41e      	bmi.n	8008de6 <_malloc_r+0xc6>
 8008da8:	2a0b      	cmp	r2, #11
 8008daa:	d916      	bls.n	8008dda <_malloc_r+0xba>
 8008dac:	1961      	adds	r1, r4, r5
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	6025      	str	r5, [r4, #0]
 8008db2:	bf18      	it	ne
 8008db4:	6059      	strne	r1, [r3, #4]
 8008db6:	6863      	ldr	r3, [r4, #4]
 8008db8:	bf08      	it	eq
 8008dba:	6031      	streq	r1, [r6, #0]
 8008dbc:	5162      	str	r2, [r4, r5]
 8008dbe:	604b      	str	r3, [r1, #4]
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f104 060b 	add.w	r6, r4, #11
 8008dc6:	f000 fa6b 	bl	80092a0 <__malloc_unlock>
 8008dca:	f026 0607 	bic.w	r6, r6, #7
 8008dce:	1d23      	adds	r3, r4, #4
 8008dd0:	1af2      	subs	r2, r6, r3
 8008dd2:	d0b6      	beq.n	8008d42 <_malloc_r+0x22>
 8008dd4:	1b9b      	subs	r3, r3, r6
 8008dd6:	50a3      	str	r3, [r4, r2]
 8008dd8:	e7b3      	b.n	8008d42 <_malloc_r+0x22>
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	bf0c      	ite	eq
 8008de0:	6032      	streq	r2, [r6, #0]
 8008de2:	605a      	strne	r2, [r3, #4]
 8008de4:	e7ec      	b.n	8008dc0 <_malloc_r+0xa0>
 8008de6:	4623      	mov	r3, r4
 8008de8:	6864      	ldr	r4, [r4, #4]
 8008dea:	e7b2      	b.n	8008d52 <_malloc_r+0x32>
 8008dec:	4634      	mov	r4, r6
 8008dee:	6876      	ldr	r6, [r6, #4]
 8008df0:	e7b9      	b.n	8008d66 <_malloc_r+0x46>
 8008df2:	230c      	movs	r3, #12
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4638      	mov	r0, r7
 8008df8:	f000 fa52 	bl	80092a0 <__malloc_unlock>
 8008dfc:	e7a1      	b.n	8008d42 <_malloc_r+0x22>
 8008dfe:	6025      	str	r5, [r4, #0]
 8008e00:	e7de      	b.n	8008dc0 <_malloc_r+0xa0>
 8008e02:	bf00      	nop
 8008e04:	24000330 	.word	0x24000330

08008e08 <__sfputc_r>:
 8008e08:	6893      	ldr	r3, [r2, #8]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	b410      	push	{r4}
 8008e10:	6093      	str	r3, [r2, #8]
 8008e12:	da08      	bge.n	8008e26 <__sfputc_r+0x1e>
 8008e14:	6994      	ldr	r4, [r2, #24]
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	db01      	blt.n	8008e1e <__sfputc_r+0x16>
 8008e1a:	290a      	cmp	r1, #10
 8008e1c:	d103      	bne.n	8008e26 <__sfputc_r+0x1e>
 8008e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e22:	f7fe ba91 	b.w	8007348 <__swbuf_r>
 8008e26:	6813      	ldr	r3, [r2, #0]
 8008e28:	1c58      	adds	r0, r3, #1
 8008e2a:	6010      	str	r0, [r2, #0]
 8008e2c:	7019      	strb	r1, [r3, #0]
 8008e2e:	4608      	mov	r0, r1
 8008e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <__sfputs_r>:
 8008e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e38:	4606      	mov	r6, r0
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	18d5      	adds	r5, r2, r3
 8008e40:	42ac      	cmp	r4, r5
 8008e42:	d101      	bne.n	8008e48 <__sfputs_r+0x12>
 8008e44:	2000      	movs	r0, #0
 8008e46:	e007      	b.n	8008e58 <__sfputs_r+0x22>
 8008e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4c:	463a      	mov	r2, r7
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7ff ffda 	bl	8008e08 <__sfputc_r>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d1f3      	bne.n	8008e40 <__sfputs_r+0xa>
 8008e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e5c <_vfiprintf_r>:
 8008e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	460d      	mov	r5, r1
 8008e62:	b09d      	sub	sp, #116	; 0x74
 8008e64:	4614      	mov	r4, r2
 8008e66:	4698      	mov	r8, r3
 8008e68:	4606      	mov	r6, r0
 8008e6a:	b118      	cbz	r0, 8008e74 <_vfiprintf_r+0x18>
 8008e6c:	6983      	ldr	r3, [r0, #24]
 8008e6e:	b90b      	cbnz	r3, 8008e74 <_vfiprintf_r+0x18>
 8008e70:	f7ff fa3e 	bl	80082f0 <__sinit>
 8008e74:	4b89      	ldr	r3, [pc, #548]	; (800909c <_vfiprintf_r+0x240>)
 8008e76:	429d      	cmp	r5, r3
 8008e78:	d11b      	bne.n	8008eb2 <_vfiprintf_r+0x56>
 8008e7a:	6875      	ldr	r5, [r6, #4]
 8008e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	d405      	bmi.n	8008e8e <_vfiprintf_r+0x32>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	059a      	lsls	r2, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_vfiprintf_r+0x32>
 8008e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e8a:	f7ff fad4 	bl	8008436 <__retarget_lock_acquire_recursive>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	071b      	lsls	r3, r3, #28
 8008e92:	d501      	bpl.n	8008e98 <_vfiprintf_r+0x3c>
 8008e94:	692b      	ldr	r3, [r5, #16]
 8008e96:	b9eb      	cbnz	r3, 8008ed4 <_vfiprintf_r+0x78>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7fe faa6 	bl	80073ec <__swsetup_r>
 8008ea0:	b1c0      	cbz	r0, 8008ed4 <_vfiprintf_r+0x78>
 8008ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ea4:	07dc      	lsls	r4, r3, #31
 8008ea6:	d50e      	bpl.n	8008ec6 <_vfiprintf_r+0x6a>
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	b01d      	add	sp, #116	; 0x74
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	4b7b      	ldr	r3, [pc, #492]	; (80090a0 <_vfiprintf_r+0x244>)
 8008eb4:	429d      	cmp	r5, r3
 8008eb6:	d101      	bne.n	8008ebc <_vfiprintf_r+0x60>
 8008eb8:	68b5      	ldr	r5, [r6, #8]
 8008eba:	e7df      	b.n	8008e7c <_vfiprintf_r+0x20>
 8008ebc:	4b79      	ldr	r3, [pc, #484]	; (80090a4 <_vfiprintf_r+0x248>)
 8008ebe:	429d      	cmp	r5, r3
 8008ec0:	bf08      	it	eq
 8008ec2:	68f5      	ldreq	r5, [r6, #12]
 8008ec4:	e7da      	b.n	8008e7c <_vfiprintf_r+0x20>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	0598      	lsls	r0, r3, #22
 8008eca:	d4ed      	bmi.n	8008ea8 <_vfiprintf_r+0x4c>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ece:	f7ff fab3 	bl	8008438 <__retarget_lock_release_recursive>
 8008ed2:	e7e9      	b.n	8008ea8 <_vfiprintf_r+0x4c>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee2:	2330      	movs	r3, #48	; 0x30
 8008ee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090a8 <_vfiprintf_r+0x24c>
 8008ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eec:	f04f 0901 	mov.w	r9, #1
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	469a      	mov	sl, r3
 8008ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef8:	b10a      	cbz	r2, 8008efe <_vfiprintf_r+0xa2>
 8008efa:	2a25      	cmp	r2, #37	; 0x25
 8008efc:	d1f9      	bne.n	8008ef2 <_vfiprintf_r+0x96>
 8008efe:	ebba 0b04 	subs.w	fp, sl, r4
 8008f02:	d00b      	beq.n	8008f1c <_vfiprintf_r+0xc0>
 8008f04:	465b      	mov	r3, fp
 8008f06:	4622      	mov	r2, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ff93 	bl	8008e36 <__sfputs_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	f000 80aa 	beq.w	800906a <_vfiprintf_r+0x20e>
 8008f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f18:	445a      	add	r2, fp
 8008f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 80a2 	beq.w	800906a <_vfiprintf_r+0x20e>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f30:	f10a 0a01 	add.w	sl, sl, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f3e:	4654      	mov	r4, sl
 8008f40:	2205      	movs	r2, #5
 8008f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f46:	4858      	ldr	r0, [pc, #352]	; (80090a8 <_vfiprintf_r+0x24c>)
 8008f48:	f7f7 f9d2 	bl	80002f0 <memchr>
 8008f4c:	9a04      	ldr	r2, [sp, #16]
 8008f4e:	b9d8      	cbnz	r0, 8008f88 <_vfiprintf_r+0x12c>
 8008f50:	06d1      	lsls	r1, r2, #27
 8008f52:	bf44      	itt	mi
 8008f54:	2320      	movmi	r3, #32
 8008f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f5a:	0713      	lsls	r3, r2, #28
 8008f5c:	bf44      	itt	mi
 8008f5e:	232b      	movmi	r3, #43	; 0x2b
 8008f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f64:	f89a 3000 	ldrb.w	r3, [sl]
 8008f68:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6a:	d015      	beq.n	8008f98 <_vfiprintf_r+0x13c>
 8008f6c:	9a07      	ldr	r2, [sp, #28]
 8008f6e:	4654      	mov	r4, sl
 8008f70:	2000      	movs	r0, #0
 8008f72:	f04f 0c0a 	mov.w	ip, #10
 8008f76:	4621      	mov	r1, r4
 8008f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7c:	3b30      	subs	r3, #48	; 0x30
 8008f7e:	2b09      	cmp	r3, #9
 8008f80:	d94e      	bls.n	8009020 <_vfiprintf_r+0x1c4>
 8008f82:	b1b0      	cbz	r0, 8008fb2 <_vfiprintf_r+0x156>
 8008f84:	9207      	str	r2, [sp, #28]
 8008f86:	e014      	b.n	8008fb2 <_vfiprintf_r+0x156>
 8008f88:	eba0 0308 	sub.w	r3, r0, r8
 8008f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	46a2      	mov	sl, r4
 8008f96:	e7d2      	b.n	8008f3e <_vfiprintf_r+0xe2>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	1d19      	adds	r1, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	9103      	str	r1, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfbb      	ittet	lt
 8008fa4:	425b      	neglt	r3, r3
 8008fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8008faa:	9307      	strge	r3, [sp, #28]
 8008fac:	9307      	strlt	r3, [sp, #28]
 8008fae:	bfb8      	it	lt
 8008fb0:	9204      	strlt	r2, [sp, #16]
 8008fb2:	7823      	ldrb	r3, [r4, #0]
 8008fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fb6:	d10c      	bne.n	8008fd2 <_vfiprintf_r+0x176>
 8008fb8:	7863      	ldrb	r3, [r4, #1]
 8008fba:	2b2a      	cmp	r3, #42	; 0x2a
 8008fbc:	d135      	bne.n	800902a <_vfiprintf_r+0x1ce>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fce:	3402      	adds	r4, #2
 8008fd0:	9305      	str	r3, [sp, #20]
 8008fd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090b8 <_vfiprintf_r+0x25c>
 8008fd6:	7821      	ldrb	r1, [r4, #0]
 8008fd8:	2203      	movs	r2, #3
 8008fda:	4650      	mov	r0, sl
 8008fdc:	f7f7 f988 	bl	80002f0 <memchr>
 8008fe0:	b140      	cbz	r0, 8008ff4 <_vfiprintf_r+0x198>
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	eba0 000a 	sub.w	r0, r0, sl
 8008fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8008fec:	9b04      	ldr	r3, [sp, #16]
 8008fee:	4303      	orrs	r3, r0
 8008ff0:	3401      	adds	r4, #1
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff8:	482c      	ldr	r0, [pc, #176]	; (80090ac <_vfiprintf_r+0x250>)
 8008ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ffe:	2206      	movs	r2, #6
 8009000:	f7f7 f976 	bl	80002f0 <memchr>
 8009004:	2800      	cmp	r0, #0
 8009006:	d03f      	beq.n	8009088 <_vfiprintf_r+0x22c>
 8009008:	4b29      	ldr	r3, [pc, #164]	; (80090b0 <_vfiprintf_r+0x254>)
 800900a:	bb1b      	cbnz	r3, 8009054 <_vfiprintf_r+0x1f8>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	3307      	adds	r3, #7
 8009010:	f023 0307 	bic.w	r3, r3, #7
 8009014:	3308      	adds	r3, #8
 8009016:	9303      	str	r3, [sp, #12]
 8009018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901a:	443b      	add	r3, r7
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	e767      	b.n	8008ef0 <_vfiprintf_r+0x94>
 8009020:	fb0c 3202 	mla	r2, ip, r2, r3
 8009024:	460c      	mov	r4, r1
 8009026:	2001      	movs	r0, #1
 8009028:	e7a5      	b.n	8008f76 <_vfiprintf_r+0x11a>
 800902a:	2300      	movs	r3, #0
 800902c:	3401      	adds	r4, #1
 800902e:	9305      	str	r3, [sp, #20]
 8009030:	4619      	mov	r1, r3
 8009032:	f04f 0c0a 	mov.w	ip, #10
 8009036:	4620      	mov	r0, r4
 8009038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800903c:	3a30      	subs	r2, #48	; 0x30
 800903e:	2a09      	cmp	r2, #9
 8009040:	d903      	bls.n	800904a <_vfiprintf_r+0x1ee>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0c5      	beq.n	8008fd2 <_vfiprintf_r+0x176>
 8009046:	9105      	str	r1, [sp, #20]
 8009048:	e7c3      	b.n	8008fd2 <_vfiprintf_r+0x176>
 800904a:	fb0c 2101 	mla	r1, ip, r1, r2
 800904e:	4604      	mov	r4, r0
 8009050:	2301      	movs	r3, #1
 8009052:	e7f0      	b.n	8009036 <_vfiprintf_r+0x1da>
 8009054:	ab03      	add	r3, sp, #12
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	462a      	mov	r2, r5
 800905a:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <_vfiprintf_r+0x258>)
 800905c:	a904      	add	r1, sp, #16
 800905e:	4630      	mov	r0, r6
 8009060:	f7fd fd32 	bl	8006ac8 <_printf_float>
 8009064:	4607      	mov	r7, r0
 8009066:	1c78      	adds	r0, r7, #1
 8009068:	d1d6      	bne.n	8009018 <_vfiprintf_r+0x1bc>
 800906a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800906c:	07d9      	lsls	r1, r3, #31
 800906e:	d405      	bmi.n	800907c <_vfiprintf_r+0x220>
 8009070:	89ab      	ldrh	r3, [r5, #12]
 8009072:	059a      	lsls	r2, r3, #22
 8009074:	d402      	bmi.n	800907c <_vfiprintf_r+0x220>
 8009076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009078:	f7ff f9de 	bl	8008438 <__retarget_lock_release_recursive>
 800907c:	89ab      	ldrh	r3, [r5, #12]
 800907e:	065b      	lsls	r3, r3, #25
 8009080:	f53f af12 	bmi.w	8008ea8 <_vfiprintf_r+0x4c>
 8009084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009086:	e711      	b.n	8008eac <_vfiprintf_r+0x50>
 8009088:	ab03      	add	r3, sp, #12
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	462a      	mov	r2, r5
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <_vfiprintf_r+0x258>)
 8009090:	a904      	add	r1, sp, #16
 8009092:	4630      	mov	r0, r6
 8009094:	f7fd ffa4 	bl	8006fe0 <_printf_i>
 8009098:	e7e4      	b.n	8009064 <_vfiprintf_r+0x208>
 800909a:	bf00      	nop
 800909c:	08009568 	.word	0x08009568
 80090a0:	08009588 	.word	0x08009588
 80090a4:	08009548 	.word	0x08009548
 80090a8:	08009704 	.word	0x08009704
 80090ac:	0800970e 	.word	0x0800970e
 80090b0:	08006ac9 	.word	0x08006ac9
 80090b4:	08008e37 	.word	0x08008e37
 80090b8:	0800970a 	.word	0x0800970a

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	; (80090d8 <_sbrk_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f8 f80c 	bl	80010e4 <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	24000338 	.word	0x24000338

080090dc <__sread>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	460c      	mov	r4, r1
 80090e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e4:	f000 f8e2 	bl	80092ac <_read_r>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	bfab      	itete	ge
 80090ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090ee:	89a3      	ldrhlt	r3, [r4, #12]
 80090f0:	181b      	addge	r3, r3, r0
 80090f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090f6:	bfac      	ite	ge
 80090f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80090fa:	81a3      	strhlt	r3, [r4, #12]
 80090fc:	bd10      	pop	{r4, pc}

080090fe <__swrite>:
 80090fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009102:	461f      	mov	r7, r3
 8009104:	898b      	ldrh	r3, [r1, #12]
 8009106:	05db      	lsls	r3, r3, #23
 8009108:	4605      	mov	r5, r0
 800910a:	460c      	mov	r4, r1
 800910c:	4616      	mov	r6, r2
 800910e:	d505      	bpl.n	800911c <__swrite+0x1e>
 8009110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009114:	2302      	movs	r3, #2
 8009116:	2200      	movs	r2, #0
 8009118:	f000 f898 	bl	800924c <_lseek_r>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	4632      	mov	r2, r6
 800912a:	463b      	mov	r3, r7
 800912c:	4628      	mov	r0, r5
 800912e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	f000 b817 	b.w	8009164 <_write_r>

08009136 <__sseek>:
 8009136:	b510      	push	{r4, lr}
 8009138:	460c      	mov	r4, r1
 800913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913e:	f000 f885 	bl	800924c <_lseek_r>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	bf15      	itete	ne
 8009148:	6560      	strne	r0, [r4, #84]	; 0x54
 800914a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800914e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009152:	81a3      	strheq	r3, [r4, #12]
 8009154:	bf18      	it	ne
 8009156:	81a3      	strhne	r3, [r4, #12]
 8009158:	bd10      	pop	{r4, pc}

0800915a <__sclose>:
 800915a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915e:	f000 b831 	b.w	80091c4 <_close_r>
	...

08009164 <_write_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	; (8009184 <_write_r+0x20>)
 8009168:	4604      	mov	r4, r0
 800916a:	4608      	mov	r0, r1
 800916c:	4611      	mov	r1, r2
 800916e:	2200      	movs	r2, #0
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f7f7 ff65 	bl	8001042 <_write>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_write_r+0x1e>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_write_r+0x1e>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	24000338 	.word	0x24000338

08009188 <__assert_func>:
 8009188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800918a:	4614      	mov	r4, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <__assert_func+0x2c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4605      	mov	r5, r0
 8009194:	68d8      	ldr	r0, [r3, #12]
 8009196:	b14c      	cbz	r4, 80091ac <__assert_func+0x24>
 8009198:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <__assert_func+0x30>)
 800919a:	9100      	str	r1, [sp, #0]
 800919c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091a0:	4906      	ldr	r1, [pc, #24]	; (80091bc <__assert_func+0x34>)
 80091a2:	462b      	mov	r3, r5
 80091a4:	f000 f81e 	bl	80091e4 <fiprintf>
 80091a8:	f000 f89f 	bl	80092ea <abort>
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <__assert_func+0x38>)
 80091ae:	461c      	mov	r4, r3
 80091b0:	e7f3      	b.n	800919a <__assert_func+0x12>
 80091b2:	bf00      	nop
 80091b4:	24000010 	.word	0x24000010
 80091b8:	08009715 	.word	0x08009715
 80091bc:	08009722 	.word	0x08009722
 80091c0:	08009750 	.word	0x08009750

080091c4 <_close_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d06      	ldr	r5, [pc, #24]	; (80091e0 <_close_r+0x1c>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	f7f7 ff53 	bl	800107a <_close>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_close_r+0x1a>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_close_r+0x1a>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	24000338 	.word	0x24000338

080091e4 <fiprintf>:
 80091e4:	b40e      	push	{r1, r2, r3}
 80091e6:	b503      	push	{r0, r1, lr}
 80091e8:	4601      	mov	r1, r0
 80091ea:	ab03      	add	r3, sp, #12
 80091ec:	4805      	ldr	r0, [pc, #20]	; (8009204 <fiprintf+0x20>)
 80091ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f2:	6800      	ldr	r0, [r0, #0]
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	f7ff fe31 	bl	8008e5c <_vfiprintf_r>
 80091fa:	b002      	add	sp, #8
 80091fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009200:	b003      	add	sp, #12
 8009202:	4770      	bx	lr
 8009204:	24000010 	.word	0x24000010

08009208 <_fstat_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4d07      	ldr	r5, [pc, #28]	; (8009228 <_fstat_r+0x20>)
 800920c:	2300      	movs	r3, #0
 800920e:	4604      	mov	r4, r0
 8009210:	4608      	mov	r0, r1
 8009212:	4611      	mov	r1, r2
 8009214:	602b      	str	r3, [r5, #0]
 8009216:	f7f7 ff3c 	bl	8001092 <_fstat>
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	d102      	bne.n	8009224 <_fstat_r+0x1c>
 800921e:	682b      	ldr	r3, [r5, #0]
 8009220:	b103      	cbz	r3, 8009224 <_fstat_r+0x1c>
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	bd38      	pop	{r3, r4, r5, pc}
 8009226:	bf00      	nop
 8009228:	24000338 	.word	0x24000338

0800922c <_isatty_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d06      	ldr	r5, [pc, #24]	; (8009248 <_isatty_r+0x1c>)
 8009230:	2300      	movs	r3, #0
 8009232:	4604      	mov	r4, r0
 8009234:	4608      	mov	r0, r1
 8009236:	602b      	str	r3, [r5, #0]
 8009238:	f7f7 ff3b 	bl	80010b2 <_isatty>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_isatty_r+0x1a>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_isatty_r+0x1a>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	24000338 	.word	0x24000338

0800924c <_lseek_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d07      	ldr	r5, [pc, #28]	; (800926c <_lseek_r+0x20>)
 8009250:	4604      	mov	r4, r0
 8009252:	4608      	mov	r0, r1
 8009254:	4611      	mov	r1, r2
 8009256:	2200      	movs	r2, #0
 8009258:	602a      	str	r2, [r5, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f7f7 ff34 	bl	80010c8 <_lseek>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_lseek_r+0x1e>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_lseek_r+0x1e>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	24000338 	.word	0x24000338

08009270 <__ascii_mbtowc>:
 8009270:	b082      	sub	sp, #8
 8009272:	b901      	cbnz	r1, 8009276 <__ascii_mbtowc+0x6>
 8009274:	a901      	add	r1, sp, #4
 8009276:	b142      	cbz	r2, 800928a <__ascii_mbtowc+0x1a>
 8009278:	b14b      	cbz	r3, 800928e <__ascii_mbtowc+0x1e>
 800927a:	7813      	ldrb	r3, [r2, #0]
 800927c:	600b      	str	r3, [r1, #0]
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	1e10      	subs	r0, r2, #0
 8009282:	bf18      	it	ne
 8009284:	2001      	movne	r0, #1
 8009286:	b002      	add	sp, #8
 8009288:	4770      	bx	lr
 800928a:	4610      	mov	r0, r2
 800928c:	e7fb      	b.n	8009286 <__ascii_mbtowc+0x16>
 800928e:	f06f 0001 	mvn.w	r0, #1
 8009292:	e7f8      	b.n	8009286 <__ascii_mbtowc+0x16>

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f7ff b8ce 	b.w	8008436 <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	2400032c 	.word	0x2400032c

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f7ff b8c9 	b.w	8008438 <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	2400032c 	.word	0x2400032c

080092ac <_read_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d07      	ldr	r5, [pc, #28]	; (80092cc <_read_r+0x20>)
 80092b0:	4604      	mov	r4, r0
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7f7 fea4 	bl	8001008 <_read>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_read_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_read_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	24000338 	.word	0x24000338

080092d0 <__ascii_wctomb>:
 80092d0:	b149      	cbz	r1, 80092e6 <__ascii_wctomb+0x16>
 80092d2:	2aff      	cmp	r2, #255	; 0xff
 80092d4:	bf85      	ittet	hi
 80092d6:	238a      	movhi	r3, #138	; 0x8a
 80092d8:	6003      	strhi	r3, [r0, #0]
 80092da:	700a      	strbls	r2, [r1, #0]
 80092dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80092e0:	bf98      	it	ls
 80092e2:	2001      	movls	r0, #1
 80092e4:	4770      	bx	lr
 80092e6:	4608      	mov	r0, r1
 80092e8:	4770      	bx	lr

080092ea <abort>:
 80092ea:	b508      	push	{r3, lr}
 80092ec:	2006      	movs	r0, #6
 80092ee:	f000 f82b 	bl	8009348 <raise>
 80092f2:	2001      	movs	r0, #1
 80092f4:	f7f7 fe7e 	bl	8000ff4 <_exit>

080092f8 <_raise_r>:
 80092f8:	291f      	cmp	r1, #31
 80092fa:	b538      	push	{r3, r4, r5, lr}
 80092fc:	4604      	mov	r4, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	d904      	bls.n	800930c <_raise_r+0x14>
 8009302:	2316      	movs	r3, #22
 8009304:	6003      	str	r3, [r0, #0]
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800930e:	b112      	cbz	r2, 8009316 <_raise_r+0x1e>
 8009310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009314:	b94b      	cbnz	r3, 800932a <_raise_r+0x32>
 8009316:	4620      	mov	r0, r4
 8009318:	f000 f830 	bl	800937c <_getpid_r>
 800931c:	462a      	mov	r2, r5
 800931e:	4601      	mov	r1, r0
 8009320:	4620      	mov	r0, r4
 8009322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009326:	f000 b817 	b.w	8009358 <_kill_r>
 800932a:	2b01      	cmp	r3, #1
 800932c:	d00a      	beq.n	8009344 <_raise_r+0x4c>
 800932e:	1c59      	adds	r1, r3, #1
 8009330:	d103      	bne.n	800933a <_raise_r+0x42>
 8009332:	2316      	movs	r3, #22
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	2001      	movs	r0, #1
 8009338:	e7e7      	b.n	800930a <_raise_r+0x12>
 800933a:	2400      	movs	r4, #0
 800933c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009340:	4628      	mov	r0, r5
 8009342:	4798      	blx	r3
 8009344:	2000      	movs	r0, #0
 8009346:	e7e0      	b.n	800930a <_raise_r+0x12>

08009348 <raise>:
 8009348:	4b02      	ldr	r3, [pc, #8]	; (8009354 <raise+0xc>)
 800934a:	4601      	mov	r1, r0
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f7ff bfd3 	b.w	80092f8 <_raise_r>
 8009352:	bf00      	nop
 8009354:	24000010 	.word	0x24000010

08009358 <_kill_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d07      	ldr	r5, [pc, #28]	; (8009378 <_kill_r+0x20>)
 800935c:	2300      	movs	r3, #0
 800935e:	4604      	mov	r4, r0
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	f7f7 fe35 	bl	8000fd4 <_kill>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d102      	bne.n	8009374 <_kill_r+0x1c>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b103      	cbz	r3, 8009374 <_kill_r+0x1c>
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	24000338 	.word	0x24000338

0800937c <_getpid_r>:
 800937c:	f7f7 be22 	b.w	8000fc4 <_getpid>

08009380 <_init>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr

0800938c <_fini>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr
