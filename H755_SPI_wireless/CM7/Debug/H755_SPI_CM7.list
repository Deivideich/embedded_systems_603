
H755_SPI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  08009fb0  08009fb0  00019fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a914  0800a914  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a91c  0800a91c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800a924  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  240001e8  0800ab0c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000520  0800ab0c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016268  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bac  00000000  00000000  0003647e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00039030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00039fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bbff  00000000  00000000  0003ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016aeb  00000000  00000000  00076a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001812c7  00000000  00000000  0008d562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020e829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  0020e87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009f94 	.word	0x08009f94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08009f94 	.word	0x08009f94

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f8d9 	bl	80029d4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f8d0 	bl	80029d4 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000214 	.word	0x24000214
 8000840:	24000218 	.word	0x24000218

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f8b9 	bl	80029d4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f8b0 	bl	80029d4 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000214 	.word	0x24000214
 8000880:	2400021a 	.word	0x2400021a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fd5e 	bl	8005368 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f004 ff48 	bl	800574c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400021c 	.word	0x2400021c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fd33 	bl	8005368 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f004 ff1e 	bl	800574c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400021c 	.word	0x2400021c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fd09 	bl	8005368 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400021c 	.word	0x2400021c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fce9 	bl	8005368 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fce2 	bl	8005368 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400021c 	.word	0x2400021c

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f004 fcb9 	bl	8005368 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f004 fea4 	bl	800574c <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400021c 	.word	0x2400021c

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f006 fc48 	bl	8007308 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fcd8 	bl	800244c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa4b 	bl	800103c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa5b 	bl	8001070 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f94b 	bl	8000e5e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f981 	bl	8000ed0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9c4 	bl	8000f5c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f916 	bl	8000e04 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa24 	bl	800102a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 f9dc 	bl	8000fac <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400021c 	.word	0x2400021c
 8000c08:	24000214 	.word	0x24000214
 8000c0c:	24000218 	.word	0x24000218
 8000c10:	2400021a 	.word	0x2400021a

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000208 	.word	0x24000208

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9b0 	bl	8000fca <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000208 	.word	0x24000208
 8000d40:	0800a504 	.word	0x0800a504
 8000d44:	0800a50c 	.word	0x0800a50c
 8000d48:	24000210 	.word	0x24000210

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000210 	.word	0x24000210

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000210 	.word	0x24000210

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	201c      	movs	r0, #28
 8000e22:	f7ff fd7f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e26:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <NRF24_disableDynamicPayloads+0x2c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000211 	.word	0x24000211

08000e34 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e44:	213f      	movs	r1, #63	; 0x3f
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fd6c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e4c:	e003      	b.n	8000e56 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fd67 	bl	8000924 <NRF24_write_register>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff fd0b 	bl	8000884 <NRF24_read_register>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f023 0306 	bic.w	r3, r3, #6
 8000e78:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d104      	bne.n	8000e8a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 0306 	orr.w	r3, r3, #6
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d104      	bne.n	8000e9a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e011      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d104      	bne.n	8000eaa <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e009      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d103      	bne.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0306 	orr.w	r3, r3, #6
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fd2e 	bl	8000924 <NRF24_write_register>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f7ff fcd0 	bl	8000884 <NRF24_read_register>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000ef4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	73bb      	strb	r3, [r7, #14]
 8000f0a:	e00d      	b.n	8000f28 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d107      	bne.n	8000f22 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	e002      	b.n	8000f28 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f7ff fcf9 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f32:	2006      	movs	r0, #6
 8000f34:	f7ff fca6 	bl	8000884 <NRF24_read_register>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d102      	bne.n	8000f48 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e002      	b.n	8000f4e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	24000212 	.word	0x24000212

08000f5c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fc8c 	bl	8000884 <NRF24_read_register>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f023 030c 	bic.w	r3, r3, #12
 8000f72:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00f      	beq.n	8000f9a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d104      	bne.n	8000f8a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e007      	b.n	8000f9a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fcc0 	bl	8000924 <NRF24_write_register>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fc67 	bl	8000884 <NRF24_read_register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f023 0302 	bic.w	r3, r3, #2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fcaf 	bl	8000924 <NRF24_write_register>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fd2:	f7ff fd31 	bl	8000a38 <NRF24_get_status>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d017      	beq.n	8001020 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	2007      	movs	r0, #7
 800100a:	f7ff fc8b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001018:	2120      	movs	r1, #32
 800101a:	2007      	movs	r0, #7
 800101c:	f7ff fc82 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001020:	7bbb      	ldrb	r3, [r7, #14]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800102e:	2170      	movs	r1, #112	; 0x70
 8001030:	2007      	movs	r0, #7
 8001032:	f7ff fc77 	bl	8000924 <NRF24_write_register>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fbde 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001048:	2350      	movs	r3, #80	; 0x50
 800104a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800104c:	2373      	movs	r3, #115	; 0x73
 800104e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2202      	movs	r2, #2
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <NRF24_ACTIVATE_cmd+0x30>)
 8001058:	f004 f986 	bl	8005368 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fbd1 	bl	8000804 <NRF24_csn>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2400021c 	.word	0x2400021c

08001070 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b0a1      	sub	sp, #132	; 0x84
 8001074:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	49c3      	ldr	r1, [pc, #780]	; (8001388 <printRadioSettings+0x318>)
 800107c:	4618      	mov	r0, r3
 800107e:	f006 fd9d 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f92a 	bl	80002e0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f107 0108 	add.w	r1, r7, #8
 8001094:	230a      	movs	r3, #10
 8001096:	48bd      	ldr	r0, [pc, #756]	; (800138c <printRadioSettings+0x31c>)
 8001098:	f005 f855 	bl	8006146 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fbf1 	bl	8000884 <NRF24_read_register>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <printRadioSettings+0x5e>
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	49b2      	ldr	r1, [pc, #712]	; (8001390 <printRadioSettings+0x320>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 fd78 	bl	8007bbc <siprintf>
 80010cc:	e00c      	b.n	80010e8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	49b0      	ldr	r1, [pc, #704]	; (8001394 <printRadioSettings+0x324>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 fd71 	bl	8007bbc <siprintf>
 80010da:	e005      	b.n	80010e8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	49ad      	ldr	r1, [pc, #692]	; (8001398 <printRadioSettings+0x328>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f006 fd6a 	bl	8007bbc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f8f7 	bl	80002e0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	230a      	movs	r3, #10
 80010fc:	48a3      	ldr	r0, [pc, #652]	; (800138c <printRadioSettings+0x31c>)
 80010fe:	f005 f822 	bl	8006146 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fbbe 	bl	8000884 <NRF24_read_register>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800110e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001112:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfcc      	ite	gt
 800111a:	2301      	movgt	r3, #1
 800111c:	2300      	movle	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800112a:	2b00      	cmp	r3, #0
 800112c:	bfcc      	ite	gt
 800112e:	2301      	movgt	r3, #1
 8001130:	2300      	movle	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfcc      	ite	gt
 8001142:	2301      	movgt	r3, #1
 8001144:	2300      	movle	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800114a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfcc      	ite	gt
 8001156:	2301      	movgt	r3, #1
 8001158:	2300      	movle	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800115e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001162:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfcc      	ite	gt
 800116a:	2301      	movgt	r3, #1
 800116c:	2300      	movle	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f107 0008 	add.w	r0, r7, #8
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	9402      	str	r4, [sp, #8]
 800118c:	9101      	str	r1, [sp, #4]
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	4633      	mov	r3, r6
 8001192:	462a      	mov	r2, r5
 8001194:	4981      	ldr	r1, [pc, #516]	; (800139c <printRadioSettings+0x32c>)
 8001196:	f006 fd11 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f89e 	bl	80002e0 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f107 0108 	add.w	r1, r7, #8
 80011ac:	230a      	movs	r3, #10
 80011ae:	4877      	ldr	r0, [pc, #476]	; (800138c <printRadioSettings+0x31c>)
 80011b0:	f004 ffc9 	bl	8006146 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f7ff fb65 	bl	8000884 <NRF24_read_register>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bfcc      	ite	gt
 80011cc:	2301      	movgt	r3, #1
 80011ce:	2300      	movle	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bfcc      	ite	gt
 80011e0:	2301      	movgt	r3, #1
 80011e2:	2300      	movle	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfcc      	ite	gt
 80011f4:	2301      	movgt	r3, #1
 80011f6:	2300      	movle	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001204:	2b00      	cmp	r3, #0
 8001206:	bfcc      	ite	gt
 8001208:	2301      	movgt	r3, #1
 800120a:	2300      	movle	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001214:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfcc      	ite	gt
 800121c:	2301      	movgt	r3, #1
 800121e:	2300      	movle	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f107 0008 	add.w	r0, r7, #8
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	9402      	str	r4, [sp, #8]
 800123e:	9101      	str	r1, [sp, #4]
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	4633      	mov	r3, r6
 8001244:	462a      	mov	r2, r5
 8001246:	4956      	ldr	r1, [pc, #344]	; (80013a0 <printRadioSettings+0x330>)
 8001248:	f006 fcb8 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f845 	bl	80002e0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	230a      	movs	r3, #10
 8001260:	484a      	ldr	r0, [pc, #296]	; (800138c <printRadioSettings+0x31c>)
 8001262:	f004 ff70 	bl	8006146 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001266:	2003      	movs	r0, #3
 8001268:	f7ff fb0c 	bl	8000884 <NRF24_read_register>
 800126c:	4603      	mov	r3, r0
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001276:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800127a:	3302      	adds	r3, #2
 800127c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001280:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4946      	ldr	r1, [pc, #280]	; (80013a4 <printRadioSettings+0x334>)
 800128a:	4618      	mov	r0, r3
 800128c:	f006 fc96 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f823 	bl	80002e0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f107 0108 	add.w	r1, r7, #8
 80012a2:	230a      	movs	r3, #10
 80012a4:	4839      	ldr	r0, [pc, #228]	; (800138c <printRadioSettings+0x31c>)
 80012a6:	f004 ff4e 	bl	8006146 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f7ff faea 	bl	8000884 <NRF24_read_register>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4939      	ldr	r1, [pc, #228]	; (80013a8 <printRadioSettings+0x338>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fc79 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f806 	bl	80002e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	230a      	movs	r3, #10
 80012de:	482b      	ldr	r0, [pc, #172]	; (800138c <printRadioSettings+0x31c>)
 80012e0:	f004 ff31 	bl	8006146 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80012e4:	2006      	movs	r0, #6
 80012e6:	f7ff facd 	bl	8000884 <NRF24_read_register>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80012f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <printRadioSettings+0x29a>
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	492a      	ldr	r1, [pc, #168]	; (80013ac <printRadioSettings+0x33c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f006 fc5a 	bl	8007bbc <siprintf>
 8001308:	e005      	b.n	8001316 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4928      	ldr	r1, [pc, #160]	; (80013b0 <printRadioSettings+0x340>)
 8001310:	4618      	mov	r0, r3
 8001312:	f006 fc53 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffe0 	bl	80002e0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 0108 	add.w	r1, r7, #8
 8001328:	230a      	movs	r3, #10
 800132a:	4818      	ldr	r0, [pc, #96]	; (800138c <printRadioSettings+0x31c>)
 800132c:	f004 ff0b 	bl	8006146 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001330:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001334:	f003 0306 	and.w	r3, r3, #6
 8001338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800133c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001346:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <printRadioSettings+0x2ec>
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <printRadioSettings+0x344>)
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fc31 	bl	8007bbc <siprintf>
 800135a:	e03b      	b.n	80013d4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800135c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <printRadioSettings+0x302>
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <printRadioSettings+0x348>)
 800136a:	4618      	mov	r0, r3
 800136c:	f006 fc26 	bl	8007bbc <siprintf>
 8001370:	e030      	b.n	80013d4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001372:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001376:	2b02      	cmp	r3, #2
 8001378:	d122      	bne.n	80013c0 <printRadioSettings+0x350>
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	490f      	ldr	r1, [pc, #60]	; (80013bc <printRadioSettings+0x34c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f006 fc1b 	bl	8007bbc <siprintf>
 8001386:	e025      	b.n	80013d4 <printRadioSettings+0x364>
 8001388:	08009fb0 	.word	0x08009fb0
 800138c:	240002a4 	.word	0x240002a4
 8001390:	08009fe4 	.word	0x08009fe4
 8001394:	0800a000 	.word	0x0800a000
 8001398:	0800a01c 	.word	0x0800a01c
 800139c:	0800a030 	.word	0x0800a030
 80013a0:	0800a074 	.word	0x0800a074
 80013a4:	0800a0c0 	.word	0x0800a0c0
 80013a8:	0800a0dc 	.word	0x0800a0dc
 80013ac:	0800a0f0 	.word	0x0800a0f0
 80013b0:	0800a108 	.word	0x0800a108
 80013b4:	0800a120 	.word	0x0800a120
 80013b8:	0800a134 	.word	0x0800a134
 80013bc:	0800a148 	.word	0x0800a148
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d105      	bne.n	80013d4 <printRadioSettings+0x364>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	49d7      	ldr	r1, [pc, #860]	; (800172c <printRadioSettings+0x6bc>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 fbf4 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff81 	bl	80002e0 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	230a      	movs	r3, #10
 80013e8:	48d1      	ldr	r0, [pc, #836]	; (8001730 <printRadioSettings+0x6c0>)
 80013ea:	f004 feac 	bl	8006146 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80013ee:	463b      	mov	r3, r7
 80013f0:	2205      	movs	r2, #5
 80013f2:	4619      	mov	r1, r3
 80013f4:	200a      	movs	r0, #10
 80013f6:	f7ff fa6d 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	461c      	mov	r4, r3
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	461d      	mov	r5, r3
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	787a      	ldrb	r2, [r7, #1]
 8001406:	7839      	ldrb	r1, [r7, #0]
 8001408:	f107 0008 	add.w	r0, r7, #8
 800140c:	9102      	str	r1, [sp, #8]
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	462b      	mov	r3, r5
 8001414:	4622      	mov	r2, r4
 8001416:	49c7      	ldr	r1, [pc, #796]	; (8001734 <printRadioSettings+0x6c4>)
 8001418:	f006 fbd0 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ff5d 	bl	80002e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0108 	add.w	r1, r7, #8
 800142e:	230a      	movs	r3, #10
 8001430:	48bf      	ldr	r0, [pc, #764]	; (8001730 <printRadioSettings+0x6c0>)
 8001432:	f004 fe88 	bl	8006146 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001436:	463b      	mov	r3, r7
 8001438:	2205      	movs	r2, #5
 800143a:	4619      	mov	r1, r3
 800143c:	200b      	movs	r0, #11
 800143e:	f7ff fa49 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	461c      	mov	r4, r3
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	461d      	mov	r5, r3
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	787a      	ldrb	r2, [r7, #1]
 800144e:	7839      	ldrb	r1, [r7, #0]
 8001450:	f107 0008 	add.w	r0, r7, #8
 8001454:	9102      	str	r1, [sp, #8]
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	462b      	mov	r3, r5
 800145c:	4622      	mov	r2, r4
 800145e:	49b6      	ldr	r1, [pc, #728]	; (8001738 <printRadioSettings+0x6c8>)
 8001460:	f006 fbac 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ff39 	bl	80002e0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	230a      	movs	r3, #10
 8001478:	48ad      	ldr	r0, [pc, #692]	; (8001730 <printRadioSettings+0x6c0>)
 800147a:	f004 fe64 	bl	8006146 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800147e:	463b      	mov	r3, r7
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	200c      	movs	r0, #12
 8001486:	f7ff fa25 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800148a:	783b      	ldrb	r3, [r7, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	49aa      	ldr	r1, [pc, #680]	; (800173c <printRadioSettings+0x6cc>)
 8001494:	4618      	mov	r0, r3
 8001496:	f006 fb91 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ff1e 	bl	80002e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	230a      	movs	r3, #10
 80014ae:	48a0      	ldr	r0, [pc, #640]	; (8001730 <printRadioSettings+0x6c0>)
 80014b0:	f004 fe49 	bl	8006146 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80014b4:	463b      	mov	r3, r7
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	200d      	movs	r0, #13
 80014bc:	f7ff fa0a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014c0:	783b      	ldrb	r3, [r7, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	499d      	ldr	r1, [pc, #628]	; (8001740 <printRadioSettings+0x6d0>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 fb76 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff03 	bl	80002e0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	230a      	movs	r3, #10
 80014e4:	4892      	ldr	r0, [pc, #584]	; (8001730 <printRadioSettings+0x6c0>)
 80014e6:	f004 fe2e 	bl	8006146 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80014ea:	463b      	mov	r3, r7
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	200e      	movs	r0, #14
 80014f2:	f7ff f9ef 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014f6:	783b      	ldrb	r3, [r7, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4991      	ldr	r1, [pc, #580]	; (8001744 <printRadioSettings+0x6d4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f006 fb5b 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4885      	ldr	r0, [pc, #532]	; (8001730 <printRadioSettings+0x6c0>)
 800151c:	f004 fe13 	bl	8006146 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001520:	463b      	mov	r3, r7
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	200f      	movs	r0, #15
 8001528:	f7ff f9d4 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800152c:	783b      	ldrb	r3, [r7, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4984      	ldr	r1, [pc, #528]	; (8001748 <printRadioSettings+0x6d8>)
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fb40 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fecd 	bl	80002e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	f107 0108 	add.w	r1, r7, #8
 800154e:	230a      	movs	r3, #10
 8001550:	4877      	ldr	r0, [pc, #476]	; (8001730 <printRadioSettings+0x6c0>)
 8001552:	f004 fdf8 	bl	8006146 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001556:	463b      	mov	r3, r7
 8001558:	2205      	movs	r2, #5
 800155a:	4619      	mov	r1, r3
 800155c:	2010      	movs	r0, #16
 800155e:	f7ff f9b9 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001562:	793b      	ldrb	r3, [r7, #4]
 8001564:	461c      	mov	r4, r3
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	461d      	mov	r5, r3
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	787a      	ldrb	r2, [r7, #1]
 800156e:	7839      	ldrb	r1, [r7, #0]
 8001570:	f107 0008 	add.w	r0, r7, #8
 8001574:	9102      	str	r1, [sp, #8]
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	462b      	mov	r3, r5
 800157c:	4622      	mov	r2, r4
 800157e:	4973      	ldr	r1, [pc, #460]	; (800174c <printRadioSettings+0x6dc>)
 8001580:	f006 fb1c 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fea9 	bl	80002e0 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f107 0108 	add.w	r1, r7, #8
 8001596:	230a      	movs	r3, #10
 8001598:	4865      	ldr	r0, [pc, #404]	; (8001730 <printRadioSettings+0x6c0>)
 800159a:	f004 fdd4 	bl	8006146 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800159e:	2011      	movs	r0, #17
 80015a0:	f7ff f970 	bl	8000884 <NRF24_read_register>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4966      	ldr	r1, [pc, #408]	; (8001750 <printRadioSettings+0x6e0>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 faff 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe8c 	bl	80002e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f107 0108 	add.w	r1, r7, #8
 80015d0:	230a      	movs	r3, #10
 80015d2:	4857      	ldr	r0, [pc, #348]	; (8001730 <printRadioSettings+0x6c0>)
 80015d4:	f004 fdb7 	bl	8006146 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80015d8:	2012      	movs	r0, #18
 80015da:	f7ff f953 	bl	8000884 <NRF24_read_register>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4958      	ldr	r1, [pc, #352]	; (8001754 <printRadioSettings+0x6e4>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 fae2 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fe6f 	bl	80002e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	230a      	movs	r3, #10
 800160c:	4848      	ldr	r0, [pc, #288]	; (8001730 <printRadioSettings+0x6c0>)
 800160e:	f004 fd9a 	bl	8006146 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001612:	2013      	movs	r0, #19
 8001614:	f7ff f936 	bl	8000884 <NRF24_read_register>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	494b      	ldr	r1, [pc, #300]	; (8001758 <printRadioSettings+0x6e8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f006 fac5 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fe52 	bl	80002e0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 0108 	add.w	r1, r7, #8
 8001644:	230a      	movs	r3, #10
 8001646:	483a      	ldr	r0, [pc, #232]	; (8001730 <printRadioSettings+0x6c0>)
 8001648:	f004 fd7d 	bl	8006146 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800164c:	2014      	movs	r0, #20
 800164e:	f7ff f919 	bl	8000884 <NRF24_read_register>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	493d      	ldr	r1, [pc, #244]	; (800175c <printRadioSettings+0x6ec>)
 8001666:	4618      	mov	r0, r3
 8001668:	f006 faa8 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fe35 	bl	80002e0 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	f107 0108 	add.w	r1, r7, #8
 800167e:	230a      	movs	r3, #10
 8001680:	482b      	ldr	r0, [pc, #172]	; (8001730 <printRadioSettings+0x6c0>)
 8001682:	f004 fd60 	bl	8006146 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001686:	2015      	movs	r0, #21
 8001688:	f7ff f8fc 	bl	8000884 <NRF24_read_register>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001692:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4930      	ldr	r1, [pc, #192]	; (8001760 <printRadioSettings+0x6f0>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fa8b 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fe18 	bl	80002e0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0108 	add.w	r1, r7, #8
 80016b8:	230a      	movs	r3, #10
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <printRadioSettings+0x6c0>)
 80016bc:	f004 fd43 	bl	8006146 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80016c0:	2016      	movs	r0, #22
 80016c2:	f7ff f8df 	bl	8000884 <NRF24_read_register>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4922      	ldr	r1, [pc, #136]	; (8001764 <printRadioSettings+0x6f4>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f006 fa6e 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fdfb 	bl	80002e0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 0108 	add.w	r1, r7, #8
 80016f2:	230a      	movs	r3, #10
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <printRadioSettings+0x6c0>)
 80016f6:	f004 fd26 	bl	8006146 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80016fa:	201c      	movs	r0, #28
 80016fc:	f7ff f8c2 	bl	8000884 <NRF24_read_register>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800170a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfcc      	ite	gt
 8001712:	2301      	movgt	r3, #1
 8001714:	2300      	movle	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800171a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800171e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001722:	2b00      	cmp	r3, #0
 8001724:	bfcc      	ite	gt
 8001726:	2301      	movgt	r3, #1
 8001728:	2300      	movle	r3, #0
 800172a:	e01d      	b.n	8001768 <printRadioSettings+0x6f8>
 800172c:	0800a15c 	.word	0x0800a15c
 8001730:	240002a4 	.word	0x240002a4
 8001734:	0800a170 	.word	0x0800a170
 8001738:	0800a1a0 	.word	0x0800a1a0
 800173c:	0800a1d0 	.word	0x0800a1d0
 8001740:	0800a1f8 	.word	0x0800a1f8
 8001744:	0800a220 	.word	0x0800a220
 8001748:	0800a248 	.word	0x0800a248
 800174c:	0800a270 	.word	0x0800a270
 8001750:	0800a29c 	.word	0x0800a29c
 8001754:	0800a2b8 	.word	0x0800a2b8
 8001758:	0800a2d4 	.word	0x0800a2d4
 800175c:	0800a2f0 	.word	0x0800a2f0
 8001760:	0800a30c 	.word	0x0800a30c
 8001764:	0800a328 	.word	0x0800a328
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfcc      	ite	gt
 8001778:	2301      	movgt	r3, #1
 800177a:	2300      	movle	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001780:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001784:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfcc      	ite	gt
 800178c:	2301      	movgt	r3, #1
 800178e:	2300      	movle	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001794:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001798:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800179c:	2b00      	cmp	r3, #0
 800179e:	bfcc      	ite	gt
 80017a0:	2301      	movgt	r3, #1
 80017a2:	2300      	movle	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bfcc      	ite	gt
 80017b4:	2301      	movgt	r3, #1
 80017b6:	2300      	movle	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f107 0008 	add.w	r0, r7, #8
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	9402      	str	r4, [sp, #8]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	4633      	mov	r3, r6
 80017c8:	462a      	mov	r2, r5
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <printRadioSettings+0x834>)
 80017cc:	f006 f9f6 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd83 	bl	80002e0 <strlen>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f107 0108 	add.w	r1, r7, #8
 80017e2:	230a      	movs	r3, #10
 80017e4:	4830      	ldr	r0, [pc, #192]	; (80018a8 <printRadioSettings+0x838>)
 80017e6:	f004 fcae 	bl	8006146 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017ea:	201d      	movs	r0, #29
 80017ec:	f7ff f84a 	bl	8000884 <NRF24_read_register>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <printRadioSettings+0x7a0>
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4929      	ldr	r1, [pc, #164]	; (80018ac <printRadioSettings+0x83c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f006 f9d7 	bl	8007bbc <siprintf>
 800180e:	e005      	b.n	800181c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4926      	ldr	r1, [pc, #152]	; (80018b0 <printRadioSettings+0x840>)
 8001816:	4618      	mov	r0, r3
 8001818:	f006 f9d0 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fd5d 	bl	80002e0 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f107 0108 	add.w	r1, r7, #8
 800182e:	230a      	movs	r3, #10
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <printRadioSettings+0x838>)
 8001832:	f004 fc88 	bl	8006146 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001836:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <printRadioSettings+0x7e0>
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <printRadioSettings+0x844>)
 8001848:	4618      	mov	r0, r3
 800184a:	f006 f9b7 	bl	8007bbc <siprintf>
 800184e:	e005      	b.n	800185c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4918      	ldr	r1, [pc, #96]	; (80018b8 <printRadioSettings+0x848>)
 8001856:	4618      	mov	r0, r3
 8001858:	f006 f9b0 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fd3d 	bl	80002e0 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	230a      	movs	r3, #10
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <printRadioSettings+0x838>)
 8001872:	f004 fc68 	bl	8006146 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4910      	ldr	r1, [pc, #64]	; (80018bc <printRadioSettings+0x84c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f006 f99d 	bl	8007bbc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd2a 	bl	80002e0 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	f107 0108 	add.w	r1, r7, #8
 8001894:	230a      	movs	r3, #10
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <printRadioSettings+0x838>)
 8001898:	f004 fc55 	bl	8006146 <HAL_UART_Transmit>
}
 800189c:	bf00      	nop
 800189e:	3774      	adds	r7, #116	; 0x74
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	0800a344 	.word	0x0800a344
 80018a8:	240002a4 	.word	0x240002a4
 80018ac:	0800a390 	.word	0x0800a390
 80018b0:	0800a3a8 	.word	0x0800a3a8
 80018b4:	0800a3c0 	.word	0x0800a3c0
 80018b8:	0800a3dc 	.word	0x0800a3dc
 80018bc:	08009fb0 	.word	0x08009fb0

080018c0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80018c0:	b084      	sub	sp, #16
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	f107 0c08 	add.w	ip, r7, #8
 80018ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <nrf24_DebugUART_Init+0x2c>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2290      	movs	r2, #144	; 0x90
 80018d8:	4619      	mov	r1, r3
 80018da:	f005 fd15 	bl	8007308 <memcpy>
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018e6:	b004      	add	sp, #16
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	240002a4 	.word	0x240002a4

080018f0 <mySetupNRF24>:
//********** My Function ************//
//Collects setup NRF24 functions
//Group Port, CSN Pin, CE Pin, SPI handle, UART handle, channel, address, speed
void mySetupNRF24(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin,
		SPI_HandleTypeDef nrfSPI,UART_HandleTypeDef nrf24Uart,
		uint8_t channel, uint64_t address, rf24_datarate_e speed){
 80018f0:	b082      	sub	sp, #8
 80018f2:	b5b0      	push	{r4, r5, r7, lr}
 80018f4:	b0a4      	sub	sp, #144	; 0x90
 80018f6:	af22      	add	r7, sp, #136	; 0x88
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	803b      	strh	r3, [r7, #0]
	NRF24_begin(nrf24PORT,nrfCSN_Pin,nrfCE_Pin,nrfSPI);
 8001904:	883d      	ldrh	r5, [r7, #0]
 8001906:	887c      	ldrh	r4, [r7, #2]
 8001908:	4668      	mov	r0, sp
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2284      	movs	r2, #132	; 0x84
 8001910:	4619      	mov	r1, r3
 8001912:	f005 fcf9 	bl	8007308 <memcpy>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	462a      	mov	r2, r5
 800191a:	4621      	mov	r1, r4
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f899 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(nrf24Uart);
 8001922:	4668      	mov	r0, sp
 8001924:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	4619      	mov	r1, r3
 800192c:	f005 fcec 	bl	8007308 <memcpy>
 8001930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001936:	f7ff ffc3 	bl	80018c0 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(true);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fa7a 	bl	8000e34 <NRF24_setAutoAck>
	NRF24_setChannel(channel);
 8001940:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fa1c 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800194a:	2020      	movs	r0, #32
 800194c:	f7ff fa2e 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_openReadingPipe(0, address);
 8001950:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff f9ab 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_setDataRate(speed);
 800195a:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fab6 	bl	8000ed0 <NRF24_setDataRate>
	printRadioSettings();
 8001964:	f7ff fb84 	bl	8001070 <printRadioSettings>
	NRF24_startListening();
 8001968:	f7ff f954 	bl	8000c14 <NRF24_startListening>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001976:	b002      	add	sp, #8
 8001978:	4770      	bx	lr

0800197a <myReadData>:

//Read Data
void myReadData(char* myRxData){
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  if(NRF24_available()){
 8001982:	f7ff f96d 	bl	8000c60 <NRF24_available>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <myReadData+0x2a>
			NRF24_read(myRxData, 32);
 800198c:	2120      	movs	r1, #32
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff f96e 	bl	8000c70 <NRF24_read>
//			NRF24_writeAckPayload(1, myAckPayload, 32); //Sends acknowledgement to receiver
			myRxData[32] = '\r';
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3320      	adds	r3, #32
 8001998:	220d      	movs	r2, #13
 800199a:	701a      	strb	r2, [r3, #0]
			myRxData[32+1] = '\n';
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3321      	adds	r3, #33	; 0x21
 80019a0:	220a      	movs	r2, #10
 80019a2:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <MX_GPIO_Init+0xc4>)
 8001a42:	f000 ffc7 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8001a46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_GPIO_Init+0xc4>)
 8001a60:	f000 fe08 	bl	8002674 <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58020c00 	.word	0x58020c00

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b0cf      	sub	sp, #316	; 0x13c
 8001a78:	af4a      	add	r7, sp, #296	; 0x128
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a80:	bf00      	nop
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <main+0xf0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <main+0x24>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	60fa      	str	r2, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dcf4      	bgt.n	8001a82 <main+0xe>
  if ( timeout < 0 )
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	da01      	bge.n	8001aa2 <main+0x2e>
  {
  Error_Handler();
 8001a9e:	f000 f8e9 	bl	8001c74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa2:	f000 fc41 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa6:	f000 f869 	bl	8001b7c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <main+0xf0>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <main+0xf0>)
 8001ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <main+0xf0>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 ff9d 	bl	8002a08 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 ffb3 	bl	8002a3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ada:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001adc:	bf00      	nop
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <main+0xf0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <main+0x80>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	60fa      	str	r2, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dcf4      	bgt.n	8001ade <main+0x6a>
if ( timeout < 0 )
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da01      	bge.n	8001afe <main+0x8a>
{
Error_Handler();
 8001afa:	f000 f8bb 	bl	8001c74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afe:	f7ff ff55 	bl	80019ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b02:	f000 f8cf 	bl	8001ca4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001b06:	f000 fb33 	bl	8002170 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001b0a:	f000 f921 	bl	8001d50 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

//  mySetupNRF24(nrf_CSN_PORT, nrf_CSN_PIN, nrf_CE_PIN,
//		  hspi1,huart3,60, RxpipeAddrs, 1);
  mySetupNRF24(nrf_CSN_PORT, nrf_CSN_PIN, nrf_CE_PIN,
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <main+0xf4>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	4c15      	ldr	r4, [pc, #84]	; (8001b6c <main+0xf8>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	9148      	str	r1, [sp, #288]	; 0x120
 8001b1a:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 8001b1e:	233c      	movs	r3, #60	; 0x3c
 8001b20:	9345      	str	r3, [sp, #276]	; 0x114
 8001b22:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <main+0xfc>)
 8001b24:	ab21      	add	r3, sp, #132	; 0x84
 8001b26:	4611      	mov	r1, r2
 8001b28:	2290      	movs	r2, #144	; 0x90
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fbec 	bl	8007308 <memcpy>
 8001b30:	4668      	mov	r0, sp
 8001b32:	1d23      	adds	r3, r4, #4
 8001b34:	2284      	movs	r2, #132	; 0x84
 8001b36:	4619      	mov	r1, r3
 8001b38:	f005 fbe6 	bl	8007308 <memcpy>
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b46:	480b      	ldr	r0, [pc, #44]	; (8001b74 <main+0x100>)
 8001b48:	f7ff fed2 	bl	80018f0 <mySetupNRF24>
		  hspi2,huart3,60, RxpipeAddrs, 1);
  uint8_t a = 0xFF;
 8001b4c:	23ff      	movs	r3, #255	; 0xff
 8001b4e:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myReadData(myRxData);
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <main+0x104>)
 8001b52:	f7ff ff12 	bl	800197a <myReadData>
	  HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, sizeof(myRxData), 10);
 8001b56:	230a      	movs	r3, #10
 8001b58:	2232      	movs	r2, #50	; 0x32
 8001b5a:	4907      	ldr	r1, [pc, #28]	; (8001b78 <main+0x104>)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <main+0xfc>)
 8001b5e:	f004 faf2 	bl	8006146 <HAL_UART_Transmit>
	  myReadData(myRxData);
 8001b62:	e7f5      	b.n	8001b50 <main+0xdc>
 8001b64:	58024400 	.word	0x58024400
 8001b68:	24000008 	.word	0x24000008
 8001b6c:	240003f0 	.word	0x240003f0
 8001b70:	2400047c 	.word	0x2400047c
 8001b74:	58020c00 	.word	0x58020c00
 8001b78:	24000334 	.word	0x24000334

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b09c      	sub	sp, #112	; 0x70
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	224c      	movs	r2, #76	; 0x4c
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 fbca 	bl	8007324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2220      	movs	r2, #32
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 fbc4 	bl	8007324 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	f000 ff61 	bl	8002a64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <SystemClock_Config+0xf0>)
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <SystemClock_Config+0xf0>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <SystemClock_Config+0xf0>)
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <SystemClock_Config+0xf4>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bc4:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <SystemClock_Config+0xf4>)
 8001bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <SystemClock_Config+0xf4>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bd8:	bf00      	nop
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <SystemClock_Config+0xf4>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be6:	d1f8      	bne.n	8001bda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001bfe:	2312      	movs	r3, #18
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001c12:	2302      	movs	r3, #2
 8001c14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 ff79 	bl	8002b18 <HAL_RCC_OscConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c2c:	f000 f822 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c30:	233f      	movs	r3, #63	; 0x3f
 8001c32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c34:	2303      	movs	r3, #3
 8001c36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c44:	2340      	movs	r3, #64	; 0x40
 8001c46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2101      	movs	r1, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fb8d 	bl	8003374 <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001c60:	f000 f808 	bl	8001c74 <Error_Handler>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3770      	adds	r7, #112	; 0x70
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	58000400 	.word	0x58000400
 8001c70:	58024800 	.word	0x58024800

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <Error_Handler+0x8>
	...

08001c80 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c88:	1d39      	adds	r1, r7, #4
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <__io_putchar+0x20>)
 8001c92:	f004 fa58 	bl	8006146 <HAL_UART_Transmit>
  return ch;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2400047c 	.word	0x2400047c

08001ca4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001caa:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <MX_SPI1_Init+0xa8>)
 8001cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_SPI1_Init+0xa4>)
 8001d36:	f003 fa11 	bl	800515c <HAL_SPI_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d40:	f7ff ff98 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24000368 	.word	0x24000368
 8001d4c:	40013000 	.word	0x40013000

08001d50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <MX_SPI2_Init+0xa8>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001da4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_SPI2_Init+0xa4>)
 8001de2:	f003 f9bb 	bl	800515c <HAL_SPI_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001dec:	f7ff ff42 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	240003f0 	.word	0x240003f0
 8001df8:	40003800 	.word	0x40003800

08001dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0ba      	sub	sp, #232	; 0xe8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	22bc      	movs	r2, #188	; 0xbc
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 fa81 	bl	8007324 <memset>
  if(spiHandle->Instance==SPI1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <HAL_SPI_MspInit+0x150>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d142      	bne.n	8001eb2 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fe26 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e46:	f7ff ff15 	bl	8001c74 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e50:	4a3f      	ldr	r2, [pc, #252]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e86:	2338      	movs	r3, #56	; 0x38
 8001e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	482a      	ldr	r0, [pc, #168]	; (8001f54 <HAL_SPI_MspInit+0x158>)
 8001eac:	f000 fbe2 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001eb0:	e047      	b.n	8001f42 <HAL_SPI_MspInit+0x146>
  else if(spiHandle->Instance==SPI2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_SPI_MspInit+0x15c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d142      	bne.n	8001f42 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fdde 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8001ed6:	f7ff fecd 	bl	8001c74 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_SPI_MspInit+0x154>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f30:	2305      	movs	r3, #5
 8001f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <HAL_SPI_MspInit+0x158>)
 8001f3e:	f000 fb99 	bl	8002674 <HAL_GPIO_Init>
}
 8001f42:	bf00      	nop
 8001f44:	37e8      	adds	r7, #232	; 0xe8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40013000 	.word	0x40013000
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020400 	.word	0x58020400
 8001f58:	40003800 	.word	0x40003800

08001f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_MspInit+0x30>)
 8001f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f68:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_MspInit+0x30>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_MspInit+0x30>)
 8001f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	58024400 	.word	0x58024400

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 fa16 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_kill>:

int _kill(int pid, int sig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ffe:	f005 f959 	bl	80072b4 <__errno>
 8002002:	4603      	mov	r3, r0
 8002004:	2216      	movs	r2, #22
 8002006:	601a      	str	r2, [r3, #0]
	return -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_exit>:

void _exit (int status)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffe7 	bl	8001ff4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002026:	e7fe      	b.n	8002026 <_exit+0x12>

08002028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e00a      	b.n	8002050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203a:	f3af 8000 	nop.w
 800203e:	4601      	mov	r1, r0
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60ba      	str	r2, [r7, #8]
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf0      	blt.n	800203a <_read+0x12>
	}

return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e009      	b.n	8002088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fdff 	bl	8001c80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf1      	blt.n	8002074 <_write+0x12>
	}
	return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_close>:

int _close(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_isatty>:

int _isatty(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f005 f8be 	bl	80072b4 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	24080000 	.word	0x24080000
 8002164:	00000400 	.word	0x00000400
 8002168:	24000478 	.word	0x24000478
 800216c:	24000520 	.word	0x24000520

08002170 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <MX_USART3_UART_Init+0x90>)
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <MX_USART3_UART_Init+0x94>)
 8002178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MX_USART3_UART_Init+0x90>)
 800217c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MX_USART3_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_USART3_UART_Init+0x90>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <MX_USART3_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_USART3_UART_Init+0x90>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_USART3_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b8:	4811      	ldr	r0, [pc, #68]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021ba:	f003 ff74 	bl	80060a6 <HAL_UART_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021c4:	f7ff fd56 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c8:	2100      	movs	r1, #0
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021cc:	f004 ffa8 	bl	8007120 <HAL_UARTEx_SetTxFifoThreshold>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021d6:	f7ff fd4d 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021da:	2100      	movs	r1, #0
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021de:	f004 ffdd 	bl	800719c <HAL_UARTEx_SetRxFifoThreshold>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021e8:	f7ff fd44 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <MX_USART3_UART_Init+0x90>)
 80021ee:	f004 ff5e 	bl	80070ae <HAL_UARTEx_DisableFifoMode>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021f8:	f7ff fd3c 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2400047c 	.word	0x2400047c
 8002204:	40004800 	.word	0x40004800

08002208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0b8      	sub	sp, #224	; 0xe0
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	22bc      	movs	r2, #188	; 0xbc
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f005 f87b 	bl	8007324 <memset>
  if(uartHandle->Instance==USART3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_UART_MspInit+0xc0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d142      	bne.n	80022be <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002238:	2302      	movs	r3, #2
 800223a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4618      	mov	r0, r3
 8002248:	f001 fc20 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002252:	f7ff fd0f 	bl	8001c74 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_UART_MspInit+0xc4>)
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_UART_MspInit+0xc4>)
 800225e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_UART_MspInit+0xc4>)
 8002268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_UART_MspInit+0xc4>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_UART_MspInit+0xc4>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_UART_MspInit+0xc4>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ac:	2307      	movs	r3, #7
 80022ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <HAL_UART_MspInit+0xc8>)
 80022ba:	f000 f9db 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022be:	bf00      	nop
 80022c0:	37e0      	adds	r7, #224	; 0xe0
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40004800 	.word	0x40004800
 80022cc:	58024400 	.word	0x58024400
 80022d0:	58020c00 	.word	0x58020c00

080022d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800230c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022d8:	f7fe f9dc 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f004 ffdd 	bl	80072c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002306:	f7ff fbb5 	bl	8001a74 <main>
  bx  lr
 800230a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800230c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002310:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002314:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002318:	0800a924 	.word	0x0800a924
  ldr r2, =_sbss
 800231c:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002320:	24000520 	.word	0x24000520

08002324 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC3_IRQHandler>
	...

08002328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232e:	2003      	movs	r0, #3
 8002330:	f000 f96e 	bl	8002610 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002334:	f001 f9d4 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_Init+0x68>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4913      	ldr	r1, [pc, #76]	; (8002394 <HAL_Init+0x6c>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_Init+0x68>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_Init+0x6c>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_Init+0x70>)
 800236a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800236c:	4a0b      	ldr	r2, [pc, #44]	; (800239c <HAL_Init+0x74>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002372:	200f      	movs	r0, #15
 8002374:	f000 f814 	bl	80023a0 <HAL_InitTick>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e002      	b.n	8002388 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002382:	f7ff fdeb 	bl	8001f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	58024400 	.word	0x58024400
 8002394:	0800a4f4 	.word	0x0800a4f4
 8002398:	24000004 	.word	0x24000004
 800239c:	24000000 	.word	0x24000000

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_InitTick+0x60>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e021      	b.n	80023f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_InitTick+0x64>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_InitTick+0x60>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f945 	bl	800265a <HAL_SYSTICK_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00e      	b.n	80023f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d80a      	bhi.n	80023f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f000 f91d 	bl	8002626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <HAL_InitTick+0x68>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	24000014 	.word	0x24000014
 8002404:	24000000 	.word	0x24000000
 8002408:	24000010 	.word	0x24000010

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	24000014 	.word	0x24000014
 8002430:	2400050c 	.word	0x2400050c

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2400050c 	.word	0x2400050c

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	24000014 	.word	0x24000014

08002494 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_GetREVID+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0c1b      	lsrs	r3, r3, #16
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	5c001000 	.word	0x5c001000

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <__NVIC_SetPriorityGrouping+0x40>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x40>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	05fa0000 	.word	0x05fa0000

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800251c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	db0a      	blt.n	800253a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	490c      	ldr	r1, [pc, #48]	; (800255c <__NVIC_SetPriority+0x4c>)
 800252a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	440b      	add	r3, r1
 8002534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002538:	e00a      	b.n	8002550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4908      	ldr	r1, [pc, #32]	; (8002560 <__NVIC_SetPriority+0x50>)
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3b04      	subs	r3, #4
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	440b      	add	r3, r1
 800254e:	761a      	strb	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000e100 	.word	0xe000e100
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f1c3 0307 	rsb	r3, r3, #7
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf28      	it	cs
 8002582:	2304      	movcs	r3, #4
 8002584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3304      	adds	r3, #4
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <NVIC_EncodePriority+0x30>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3b03      	subs	r3, #3
 8002592:	e000      	b.n	8002596 <NVIC_EncodePriority+0x32>
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	4313      	orrs	r3, r2
         );
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025dc:	d301      	bcc.n	80025e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025de:	2301      	movs	r3, #1
 80025e0:	e00f      	b.n	8002602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <SysTick_Config+0x40>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ea:	210f      	movs	r1, #15
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f7ff ff8e 	bl	8002510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <SysTick_Config+0x40>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <SysTick_Config+0x40>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	e000e010 	.word	0xe000e010

08002610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ff47 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff5e 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff90 	bl	8002564 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5f 	bl	8002510 <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffb2 	bl	80025cc <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_GPIO_Init+0x234>)
 8002684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002686:	e194      	b.n	80029b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 8186 	beq.w	80029ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d005      	beq.n	80026b8 <HAL_GPIO_Init+0x44>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d130      	bne.n	800271a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ee:	2201      	movs	r2, #1
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 0201 	and.w	r2, r3, #1
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b03      	cmp	r3, #3
 8002724:	d017      	beq.n	8002756 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d123      	bne.n	80027aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	08da      	lsrs	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3208      	adds	r2, #8
 80027a4:	69b9      	ldr	r1, [r7, #24]
 80027a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0203 	and.w	r2, r3, #3
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80e0 	beq.w	80029ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_GPIO_Init+0x238>)
 80027ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027f2:	4a2e      	ldr	r2, [pc, #184]	; (80028ac <HAL_GPIO_Init+0x238>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_GPIO_Init+0x238>)
 80027fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_GPIO_Init+0x23c>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <HAL_GPIO_Init+0x240>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d052      	beq.n	80028dc <HAL_GPIO_Init+0x268>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_GPIO_Init+0x244>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_GPIO_Init+0x22e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_GPIO_Init+0x248>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d02b      	beq.n	800289e <HAL_GPIO_Init+0x22a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_GPIO_Init+0x24c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d025      	beq.n	800289a <HAL_GPIO_Init+0x226>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_GPIO_Init+0x250>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01f      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_GPIO_Init+0x254>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d019      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_GPIO_Init+0x258>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_GPIO_Init+0x25c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x216>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_GPIO_Init+0x260>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <HAL_GPIO_Init+0x264>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x20e>
 800287e:	2309      	movs	r3, #9
 8002880:	e02d      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002882:	230a      	movs	r3, #10
 8002884:	e02b      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002886:	2308      	movs	r3, #8
 8002888:	e029      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800288a:	2307      	movs	r3, #7
 800288c:	e027      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800288e:	2306      	movs	r3, #6
 8002890:	e025      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002892:	2305      	movs	r3, #5
 8002894:	e023      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002896:	2304      	movs	r3, #4
 8002898:	e021      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800289a:	2303      	movs	r3, #3
 800289c:	e01f      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e01d      	b.n	80028de <HAL_GPIO_Init+0x26a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01b      	b.n	80028de <HAL_GPIO_Init+0x26a>
 80028a6:	bf00      	nop
 80028a8:	58000080 	.word	0x58000080
 80028ac:	58024400 	.word	0x58024400
 80028b0:	58000400 	.word	0x58000400
 80028b4:	58020000 	.word	0x58020000
 80028b8:	58020400 	.word	0x58020400
 80028bc:	58020800 	.word	0x58020800
 80028c0:	58020c00 	.word	0x58020c00
 80028c4:	58021000 	.word	0x58021000
 80028c8:	58021400 	.word	0x58021400
 80028cc:	58021800 	.word	0x58021800
 80028d0:	58021c00 	.word	0x58021c00
 80028d4:	58022000 	.word	0x58022000
 80028d8:	58022400 	.word	0x58022400
 80028dc:	2300      	movs	r3, #0
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ee:	4938      	ldr	r1, [pc, #224]	; (80029d0 <HAL_GPIO_Init+0x35c>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f ae63 	bne.w	8002688 <HAL_GPIO_Init+0x14>
  }
}
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
 80029c6:	3724      	adds	r7, #36	; 0x24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	58000400 	.word	0x58000400

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_HSEM_FastTake+0x2c>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3320      	adds	r3, #32
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_HSEM_FastTake+0x30>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	58026400 	.word	0x58026400
 8002a38:	80000300 	.word	0x80000300

08002a3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002a46:	4906      	ldr	r1, [pc, #24]	; (8002a60 <HAL_HSEM_Release+0x24>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	58026400 	.word	0x58026400

08002a64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d00a      	beq.n	8002a8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e040      	b.n	8002b0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e03e      	b.n	8002b0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002a96:	491f      	ldr	r1, [pc, #124]	; (8002b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a9e:	f7ff fcc9 	bl	8002434 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aa4:	e009      	b.n	8002aba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aa6:	f7ff fcc5 	bl	8002434 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab4:	d901      	bls.n	8002aba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e028      	b.n	8002b0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b1e      	cmp	r3, #30
 8002acc:	d008      	beq.n	8002ae0 <HAL_PWREx_ConfigSupply+0x7c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ad2:	d005      	beq.n	8002ae0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b1d      	cmp	r3, #29
 8002ad8:	d002      	beq.n	8002ae0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b2d      	cmp	r3, #45	; 0x2d
 8002ade:	d114      	bne.n	8002b0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ae0:	f7ff fca8 	bl	8002434 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ae6:	e009      	b.n	8002afc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ae8:	f7ff fca4 	bl	8002434 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af6:	d901      	bls.n	8002afc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d1ee      	bne.n	8002ae8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	58024800 	.word	0x58024800

08002b18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f000 bc1d 	b.w	8003366 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8087 	beq.w	8002c48 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3a:	4b99      	ldr	r3, [pc, #612]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b44:	4b96      	ldr	r3, [pc, #600]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d007      	beq.n	8002b60 <HAL_RCC_OscConfig+0x48>
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b18      	cmp	r3, #24
 8002b54:	d110      	bne.n	8002b78 <HAL_RCC_OscConfig+0x60>
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d10b      	bne.n	8002b78 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d06c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x12e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d168      	bne.n	8002c46 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e3f6      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d106      	bne.n	8002b90 <HAL_RCC_OscConfig+0x78>
 8002b82:	4b87      	ldr	r3, [pc, #540]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a86      	ldr	r2, [pc, #536]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e02e      	b.n	8002bee <HAL_RCC_OscConfig+0xd6>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x9a>
 8002b98:	4b81      	ldr	r3, [pc, #516]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a80      	ldr	r2, [pc, #512]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7d      	ldr	r2, [pc, #500]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e01d      	b.n	8002bee <HAL_RCC_OscConfig+0xd6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xbe>
 8002bbc:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a74      	ldr	r2, [pc, #464]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0xd6>
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a71      	ldr	r2, [pc, #452]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7ff fc1d 	bl	8002434 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfe:	f7ff fc19 	bl	8002434 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e3aa      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c10:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0xe6>
 8002c1c:	e014      	b.n	8002c48 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7ff fc09 	bl	8002434 <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c26:	f7ff fc05 	bl	8002434 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e396      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x10e>
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80cb 	beq.w	8002dec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c60:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_RCC_OscConfig+0x164>
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	2b18      	cmp	r3, #24
 8002c70:	d156      	bne.n	8002d20 <HAL_RCC_OscConfig+0x208>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d151      	bne.n	8002d20 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_OscConfig+0x17c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e368      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 0219 	bic.w	r2, r3, #25
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	493f      	ldr	r1, [pc, #252]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca6:	f7ff fbc5 	bl	8002434 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7ff fbc1 	bl	8002434 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e352      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc0:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	f7ff fbe2 	bl	8002494 <HAL_GetREVID>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d817      	bhi.n	8002d0a <HAL_RCC_OscConfig+0x1f2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1dc>
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002cea:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf2:	e07b      	b.n	8002dec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	031b      	lsls	r3, r3, #12
 8002d02:	4927      	ldr	r1, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	e070      	b.n	8002dec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	4921      	ldr	r1, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1e:	e065      	b.n	8002dec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d048      	beq.n	8002dba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 0219 	bic.w	r2, r3, #25
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	491a      	ldr	r1, [pc, #104]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7ff fb7b 	bl	8002434 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d42:	f7ff fb77 	bl	8002434 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e308      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	f7ff fb98 	bl	8002494 <HAL_GetREVID>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d81a      	bhi.n	8002da4 <HAL_RCC_OscConfig+0x28c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x270>
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	6053      	str	r3, [r2, #4]
 8002d86:	e031      	b.n	8002dec <HAL_RCC_OscConfig+0x2d4>
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	031b      	lsls	r3, r3, #12
 8002d96:	4902      	ldr	r1, [pc, #8]	; (8002da0 <HAL_RCC_OscConfig+0x288>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	e026      	b.n	8002dec <HAL_RCC_OscConfig+0x2d4>
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
 8002da4:	4b9a      	ldr	r3, [pc, #616]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4997      	ldr	r1, [pc, #604]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
 8002db8:	e018      	b.n	8002dec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b95      	ldr	r3, [pc, #596]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a94      	ldr	r2, [pc, #592]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7ff fb35 	bl	8002434 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dce:	f7ff fb31 	bl	8002434 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e2c2      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de0:	4b8b      	ldr	r3, [pc, #556]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a9 	beq.w	8002f4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e04:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d007      	beq.n	8002e20 <HAL_RCC_OscConfig+0x308>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	d13a      	bne.n	8002e8c <HAL_RCC_OscConfig+0x374>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d135      	bne.n	8002e8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e20:	4b7b      	ldr	r3, [pc, #492]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_OscConfig+0x320>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e296      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e38:	f7ff fb2c 	bl	8002494 <HAL_GetREVID>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d817      	bhi.n	8002e76 <HAL_RCC_OscConfig+0x35e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d108      	bne.n	8002e60 <HAL_RCC_OscConfig+0x348>
 8002e4e:	4b70      	ldr	r3, [pc, #448]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e56:	4a6e      	ldr	r2, [pc, #440]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e5e:	e075      	b.n	8002f4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e60:	4b6b      	ldr	r3, [pc, #428]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	069b      	lsls	r3, r3, #26
 8002e6e:	4968      	ldr	r1, [pc, #416]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e74:	e06a      	b.n	8002f4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e76:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	4962      	ldr	r1, [pc, #392]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e8a:	e05f      	b.n	8002f4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d042      	beq.n	8002f1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e94:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5d      	ldr	r2, [pc, #372]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7ff fac8 	bl	8002434 <HAL_GetTick>
 8002ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ea8:	f7ff fac4 	bl	8002434 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e255      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eba:	4b55      	ldr	r3, [pc, #340]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ec6:	f7ff fae5 	bl	8002494 <HAL_GetREVID>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d817      	bhi.n	8002f04 <HAL_RCC_OscConfig+0x3ec>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d108      	bne.n	8002eee <HAL_RCC_OscConfig+0x3d6>
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ee4:	4a4a      	ldr	r2, [pc, #296]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eea:	6053      	str	r3, [r2, #4]
 8002eec:	e02e      	b.n	8002f4c <HAL_RCC_OscConfig+0x434>
 8002eee:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	069b      	lsls	r3, r3, #26
 8002efc:	4944      	ldr	r1, [pc, #272]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
 8002f02:	e023      	b.n	8002f4c <HAL_RCC_OscConfig+0x434>
 8002f04:	4b42      	ldr	r3, [pc, #264]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	493f      	ldr	r1, [pc, #252]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7ff fa85 	bl	8002434 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f2e:	f7ff fa81 	bl	8002434 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e212      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d036      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d019      	beq.n	8002f94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f64:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7ff fa62 	bl	8002434 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f74:	f7ff fa5e 	bl	8002434 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e1ef      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x45c>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7ff fa48 	bl	8002434 <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fa44 	bl	8002434 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1d5      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d039      	beq.n	8003046 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01c      	beq.n	8003014 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff fa25 	bl	8002434 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7ff fa21 	bl	8002434 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1b2      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x4d6>
 800300c:	e01b      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003014:	4b9b      	ldr	r3, [pc, #620]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a9a      	ldr	r2, [pc, #616]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800301a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800301e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003020:	f7ff fa08 	bl	8002434 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003028:	f7ff fa04 	bl	8002434 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e195      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800303a:	4b92      	ldr	r3, [pc, #584]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8081 	beq.w	8003156 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003054:	4b8c      	ldr	r3, [pc, #560]	; (8003288 <HAL_RCC_OscConfig+0x770>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a8b      	ldr	r2, [pc, #556]	; (8003288 <HAL_RCC_OscConfig+0x770>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003060:	f7ff f9e8 	bl	8002434 <HAL_GetTick>
 8003064:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7ff f9e4 	bl	8002434 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e175      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307a:	4b83      	ldr	r3, [pc, #524]	; (8003288 <HAL_RCC_OscConfig+0x770>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x584>
 800308e:	4b7d      	ldr	r3, [pc, #500]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a7c      	ldr	r2, [pc, #496]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
 800309a:	e02d      	b.n	80030f8 <HAL_RCC_OscConfig+0x5e0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10c      	bne.n	80030be <HAL_RCC_OscConfig+0x5a6>
 80030a4:	4b77      	ldr	r3, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a76      	ldr	r2, [pc, #472]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	4b74      	ldr	r3, [pc, #464]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	4a73      	ldr	r2, [pc, #460]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	6713      	str	r3, [r2, #112]	; 0x70
 80030bc:	e01c      	b.n	80030f8 <HAL_RCC_OscConfig+0x5e0>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c8>
 80030c6:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0x5e0>
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a67      	ldr	r2, [pc, #412]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a64      	ldr	r2, [pc, #400]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80030f2:	f023 0304 	bic.w	r3, r3, #4
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7ff f998 	bl	8002434 <HAL_GetTick>
 8003104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7ff f994 	bl	8002434 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e123      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800311e:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ee      	beq.n	8003108 <HAL_RCC_OscConfig+0x5f0>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7ff f982 	bl	8002434 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7ff f97e 	bl	8002434 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e10d      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800314a:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ee      	bne.n	8003134 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8102 	beq.w	8003364 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003160:	4b48      	ldr	r3, [pc, #288]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003168:	2b18      	cmp	r3, #24
 800316a:	f000 80bd 	beq.w	80032e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b02      	cmp	r3, #2
 8003174:	f040 809e 	bne.w	80032b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a41      	ldr	r2, [pc, #260]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7ff f956 	bl	8002434 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff f952 	bl	8002434 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0e3      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80031ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_OscConfig+0x774>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	430a      	orrs	r2, r1
 80031be:	4931      	ldr	r1, [pc, #196]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	628b      	str	r3, [r1, #40]	; 0x28
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	3b01      	subs	r3, #1
 80031ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	3b01      	subs	r3, #1
 80031d4:	025b      	lsls	r3, r3, #9
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	3b01      	subs	r3, #1
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	3b01      	subs	r3, #1
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031f4:	4923      	ldr	r1, [pc, #140]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	4a21      	ldr	r2, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RCC_OscConfig+0x778>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	491b      	ldr	r1, [pc, #108]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f023 020c 	bic.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4917      	ldr	r1, [pc, #92]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f023 0202 	bic.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	4912      	ldr	r1, [pc, #72]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_RCC_OscConfig+0x76c>)
 8003274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7ff f8db 	bl	8002434 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003280:	e011      	b.n	80032a6 <HAL_RCC_OscConfig+0x78e>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	58024800 	.word	0x58024800
 800328c:	fffffc0c 	.word	0xfffffc0c
 8003290:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7ff f8ce 	bl	8002434 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e05f      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCC_OscConfig+0x858>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x77c>
 80032b2:	e057      	b.n	8003364 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b4:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <HAL_RCC_OscConfig+0x858>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <HAL_RCC_OscConfig+0x858>)
 80032ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7ff f8b8 	bl	8002434 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7ff f8b4 	bl	8002434 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e045      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_RCC_OscConfig+0x858>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x7b0>
 80032e6:	e03d      	b.n	8003364 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCC_OscConfig+0x858>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_RCC_OscConfig+0x858>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d031      	beq.n	8003360 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d12a      	bne.n	8003360 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d122      	bne.n	8003360 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d11a      	bne.n	8003360 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d111      	bne.n	8003360 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d108      	bne.n	8003360 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0e1b      	lsrs	r3, r3, #24
 8003352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3730      	adds	r7, #48	; 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	58024400 	.word	0x58024400

08003374 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e19c      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b8a      	ldr	r3, [pc, #552]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b87      	ldr	r3, [pc, #540]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	4985      	ldr	r1, [pc, #532]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b83      	ldr	r3, [pc, #524]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e184      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d908      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4975      	ldr	r1, [pc, #468]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fe:	429a      	cmp	r2, r3
 8003400:	d908      	bls.n	8003414 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	496a      	ldr	r1, [pc, #424]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800342c:	429a      	cmp	r2, r3
 800342e:	d908      	bls.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003430:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	495e      	ldr	r1, [pc, #376]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800343e:	4313      	orrs	r3, r2
 8003440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345a:	429a      	cmp	r2, r3
 800345c:	d908      	bls.n	8003470 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4953      	ldr	r1, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800346c:	4313      	orrs	r3, r2
 800346e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	429a      	cmp	r2, r3
 800348a:	d908      	bls.n	800349e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f023 020f 	bic.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4947      	ldr	r1, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800349a:	4313      	orrs	r3, r2
 800349c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d055      	beq.n	8003556 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4940      	ldr	r1, [pc, #256]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034c4:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d121      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0f6      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0ea      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0de      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003504:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d6      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f023 0207 	bic.w	r2, r3, #7
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4925      	ldr	r1, [pc, #148]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe ff85 	bl	8002434 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352c:	e00a      	b.n	8003544 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352e:	f7fe ff81 	bl	8002434 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0be      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	429a      	cmp	r2, r3
 8003554:	d1eb      	bne.n	800352e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d010      	beq.n	8003584 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	429a      	cmp	r2, r3
 8003570:	d208      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f023 020f 	bic.w	r2, r3, #15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003580:	4313      	orrs	r3, r2
 8003582:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d214      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	4906      	ldr	r1, [pc, #24]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e086      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
 80035b4:	52002000 	.word	0x52002000
 80035b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d208      	bcs.n	80035ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035d8:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4939      	ldr	r1, [pc, #228]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003602:	429a      	cmp	r2, r3
 8003604:	d208      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	492e      	ldr	r1, [pc, #184]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003614:	4313      	orrs	r3, r2
 8003616:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	4b28      	ldr	r3, [pc, #160]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003630:	429a      	cmp	r2, r3
 8003632:	d208      	bcs.n	8003646 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003642:	4313      	orrs	r3, r2
 8003644:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d010      	beq.n	8003674 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800365e:	429a      	cmp	r2, r3
 8003660:	d208      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4917      	ldr	r1, [pc, #92]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003670:	4313      	orrs	r3, r2
 8003672:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003674:	f000 f834 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	4912      	ldr	r1, [pc, #72]	; (80036d0 <HAL_RCC_ClockConfig+0x35c>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <HAL_RCC_ClockConfig+0x35c>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_RCC_ClockConfig+0x360>)
 80036aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x364>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x368>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fe72 	bl	80023a0 <HAL_InitTick>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
 80036d0:	0800a4f4 	.word	0x0800a4f4
 80036d4:	24000004 	.word	0x24000004
 80036d8:	24000000 	.word	0x24000000
 80036dc:	24000010 	.word	0x24000010

080036e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e6:	4bb3      	ldr	r3, [pc, #716]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ee:	2b18      	cmp	r3, #24
 80036f0:	f200 8155 	bhi.w	800399e <HAL_RCC_GetSysClockFreq+0x2be>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003761 	.word	0x08003761
 8003700:	0800399f 	.word	0x0800399f
 8003704:	0800399f 	.word	0x0800399f
 8003708:	0800399f 	.word	0x0800399f
 800370c:	0800399f 	.word	0x0800399f
 8003710:	0800399f 	.word	0x0800399f
 8003714:	0800399f 	.word	0x0800399f
 8003718:	0800399f 	.word	0x0800399f
 800371c:	08003787 	.word	0x08003787
 8003720:	0800399f 	.word	0x0800399f
 8003724:	0800399f 	.word	0x0800399f
 8003728:	0800399f 	.word	0x0800399f
 800372c:	0800399f 	.word	0x0800399f
 8003730:	0800399f 	.word	0x0800399f
 8003734:	0800399f 	.word	0x0800399f
 8003738:	0800399f 	.word	0x0800399f
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800399f 	.word	0x0800399f
 8003744:	0800399f 	.word	0x0800399f
 8003748:	0800399f 	.word	0x0800399f
 800374c:	0800399f 	.word	0x0800399f
 8003750:	0800399f 	.word	0x0800399f
 8003754:	0800399f 	.word	0x0800399f
 8003758:	0800399f 	.word	0x0800399f
 800375c:	08003793 	.word	0x08003793
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003760:	4b94      	ldr	r3, [pc, #592]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	4a90      	ldr	r2, [pc, #576]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
 800377c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800377e:	e111      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003780:	4b8d      	ldr	r3, [pc, #564]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003782:	61bb      	str	r3, [r7, #24]
    break;
 8003784:	e10e      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003786:	4b8d      	ldr	r3, [pc, #564]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003788:	61bb      	str	r3, [r7, #24]
    break;
 800378a:	e10b      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800378c:	4b8c      	ldr	r3, [pc, #560]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800378e:	61bb      	str	r3, [r7, #24]
    break;
 8003790:	e108      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800379c:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037a8:	4b82      	ldr	r3, [pc, #520]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037b2:	4b80      	ldr	r3, [pc, #512]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80e1 	beq.w	8003998 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f000 8083 	beq.w	80038e4 <HAL_RCC_GetSysClockFreq+0x204>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f200 80a1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x248>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x114>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d056      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037f2:	e099      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02d      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	4a6b      	ldr	r2, [pc, #428]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b62      	ldr	r3, [pc, #392]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a02 	vldr	s12, [r7, #8]
 800383e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800385a:	e087      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003882:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389e:	e065      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038e2:	e043      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a02 	vldr	s12, [r7, #8]
 800390a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003926:	e021      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394a:	ed97 6a02 	vldr	s12, [r7, #8]
 800394e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800396a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	0a5b      	lsrs	r3, r3, #9
 8003972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003976:	3301      	adds	r3, #1
 8003978:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 3a90 	vmov	r3, s15
 8003994:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    break;
 800399c:	e002      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a0:	61bb      	str	r3, [r7, #24]
    break;
 80039a2:	bf00      	nop
  }

  return sysclockfreq;
 80039a4:	69bb      	ldr	r3, [r7, #24]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	58024400 	.word	0x58024400
 80039b8:	03d09000 	.word	0x03d09000
 80039bc:	003d0900 	.word	0x003d0900
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	46000000 	.word	0x46000000
 80039c8:	4c742400 	.word	0x4c742400
 80039cc:	4a742400 	.word	0x4a742400
 80039d0:	4af42400 	.word	0x4af42400

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039da:	f7ff fe81 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x50>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490f      	ldr	r1, [pc, #60]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x54>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x50>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58024400 	.word	0x58024400
 8003a28:	0800a4f4 	.word	0x0800a4f4
 8003a2c:	24000004 	.word	0x24000004
 8003a30:	24000000 	.word	0x24000000

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a38:	f7ff ffcc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4904      	ldr	r1, [pc, #16]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	0800a4f4 	.word	0x0800a4f4

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a64:	f7ff ffb6 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58024400 	.word	0x58024400
 8003a88:	0800a4f4 	.word	0x0800a4f4

08003a8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d03f      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab0:	d02a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003abc:	d018      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003acc:	d007      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4ba3      	ldr	r3, [pc, #652]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4aa2      	ldr	r2, [pc, #648]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f9d5 	bl	8004e94 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003aee:	e00c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	2102      	movs	r1, #2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fa7e 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b10:	4b93      	ldr	r3, [pc, #588]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1c:	4990      	ldr	r1, [pc, #576]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	650b      	str	r3, [r1, #80]	; 0x50
 8003b22:	e001      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d03d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d826      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b59 	.word	0x08003b59
 8003b48:	08003b67 	.word	0x08003b67
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b91 	.word	0x08003b91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b58:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4a80      	ldr	r2, [pc, #512]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b64:	e015      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f991 	bl	8004e94 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b76:	e00c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3324      	adds	r3, #36	; 0x24
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fa3a 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b98:	4b71      	ldr	r3, [pc, #452]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	f023 0207 	bic.w	r2, r3, #7
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	496e      	ldr	r1, [pc, #440]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d042      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc4:	d02b      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d825      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003bcc:	2bc0      	cmp	r3, #192	; 0xc0
 8003bce:	d028      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003bd0:	2bc0      	cmp	r3, #192	; 0xc0
 8003bd2:	d821      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d016      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d81d      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d007      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003be4:	e018      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be6:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	4a5d      	ldr	r2, [pc, #372]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bf2:	e017      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 f94a 	bl	8004e94 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c04:	e00e      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3324      	adds	r3, #36	; 0x24
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f9f3 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e002      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c2a:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	494a      	ldr	r1, [pc, #296]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	650b      	str	r3, [r1, #80]	; 0x50
 8003c3c:	e001      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d049      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c58:	d030      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c5e:	d82a      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c64:	d02c      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003c66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c6a:	d824      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d018      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c76:	d81e      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c80:	d007      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003c82:	e018      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a35      	ldr	r2, [pc, #212]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c90:	e017      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f8fb 	bl	8004e94 <RCCEx_PLL2_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ca2:	e00e      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f9a4 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd6:	4922      	ldr	r1, [pc, #136]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	658b      	str	r3, [r1, #88]	; 0x58
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04b      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf8:	d030      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cfe:	d82a      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d04:	d02e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003d06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d0a:	d824      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d10:	d018      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d16:	d81e      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d20:	d007      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003d22:	e018      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d30:	e019      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 f8ab 	bl	8004e94 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d42:	e010      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f954 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d54:	e007      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d60:	58024400 	.word	0x58024400
      break;
 8003d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d6c:	4b99      	ldr	r3, [pc, #612]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d7a:	4996      	ldr	r1, [pc, #600]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d80:	e001      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d032      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	2b30      	cmp	r3, #48	; 0x30
 8003d98:	d01c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003d9a:	2b30      	cmp	r3, #48	; 0x30
 8003d9c:	d817      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d00c      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d813      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d10f      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dae:	4b89      	ldr	r3, [pc, #548]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a88      	ldr	r2, [pc, #544]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003dba:	e00e      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 f866 	bl	8004e94 <RCCEx_PLL2_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003de0:	4b7c      	ldr	r3, [pc, #496]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dec:	4979      	ldr	r1, [pc, #484]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d047      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0c:	d030      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e12:	d82a      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e18:	d02c      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003e1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e1e:	d824      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d018      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2a:	d81e      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d007      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003e36:	e018      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e38:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a65      	ldr	r2, [pc, #404]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e44:	e017      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 f821 	bl	8004e94 <RCCEx_PLL2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e56:	e00e      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f8ca 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e68:	e005      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e7c:	4b55      	ldr	r3, [pc, #340]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	4952      	ldr	r1, [pc, #328]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e8e:	e001      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d049      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea8:	d02e      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003eaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eae:	d828      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003eb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eb4:	d02a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eba:	d822      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ebc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ec0:	d026      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ec6:	d81c      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed2:	d816      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01d      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d111      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ffd5 	bl	8004e94 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003eee:	e012      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f87e 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f00:	e009      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
      break;
 8003f06:	e006      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f08:	bf00      	nop
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f0c:	bf00      	nop
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f28:	492a      	ldr	r1, [pc, #168]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d04d      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4a:	d02e      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f50:	d828      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d02a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d822      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f62:	d026      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f68:	d81c      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f74:	d816      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01d      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 ff84 	bl	8004e94 <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f90:	e012      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3324      	adds	r3, #36	; 0x24
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 f82d 	bl	8004ff8 <RCCEx_PLL3_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fcc:	4901      	ldr	r1, [pc, #4]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d02f      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff0:	d00e      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff6:	d814      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004000:	d10f      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004002:	4baf      	ldr	r3, [pc, #700]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4aae      	ldr	r2, [pc, #696]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800400e:	e00c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ff3c 	bl	8004e94 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004030:	4ba3      	ldr	r3, [pc, #652]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403c:	49a0      	ldr	r1, [pc, #640]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800403e:	4313      	orrs	r3, r2
 8004040:	650b      	str	r3, [r1, #80]	; 0x50
 8004042:	e001      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d032      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	2b03      	cmp	r3, #3
 800405a:	d81b      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	0800409b 	.word	0x0800409b
 8004068:	08004075 	.word	0x08004075
 800406c:	08004083 	.word	0x08004083
 8004070:	0800409b 	.word	0x0800409b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004074:	4b92      	ldr	r3, [pc, #584]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4a91      	ldr	r2, [pc, #580]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004080:	e00c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ff03 	bl	8004e94 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800409a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040a2:	4b87      	ldr	r3, [pc, #540]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	4984      	ldr	r1, [pc, #528]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040b4:	e001      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8086 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c8:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7d      	ldr	r2, [pc, #500]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040d4:	f7fe f9ae 	bl	8002434 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fe f9aa 	bl	8002434 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d902      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	75fb      	strb	r3, [r7, #23]
        break;
 80040ee:	e005      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040f0:	4b74      	ldr	r3, [pc, #464]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ef      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d166      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004102:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800410c:	4053      	eors	r3, r2
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d013      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004120:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	4a66      	ldr	r2, [pc, #408]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800412c:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004138:	4a61      	ldr	r2, [pc, #388]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004148:	d115      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe f973 	bl	8002434 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004150:	e00b      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fe f96f 	bl	8002434 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d902      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	75fb      	strb	r3, [r7, #23]
            break;
 8004168:	e005      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800416a:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ed      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d126      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800418a:	d10d      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800418c:	4b4c      	ldr	r3, [pc, #304]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800419a:	0919      	lsrs	r1, r3, #4
 800419c:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800419e:	400b      	ands	r3, r1
 80041a0:	4947      	ldr	r1, [pc, #284]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
 80041a6:	e005      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80041a8:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4a44      	ldr	r2, [pc, #272]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041b2:	6113      	str	r3, [r2, #16]
 80041b4:	4b42      	ldr	r3, [pc, #264]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c2:	493f      	ldr	r1, [pc, #252]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	670b      	str	r3, [r1, #112]	; 0x70
 80041c8:	e004      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	75bb      	strb	r3, [r7, #22]
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8085 	beq.w	80042ec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e6:	2b28      	cmp	r3, #40	; 0x28
 80041e8:	d866      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	080042cd 	.word	0x080042cd
 80041f4:	080042b9 	.word	0x080042b9
 80041f8:	080042b9 	.word	0x080042b9
 80041fc:	080042b9 	.word	0x080042b9
 8004200:	080042b9 	.word	0x080042b9
 8004204:	080042b9 	.word	0x080042b9
 8004208:	080042b9 	.word	0x080042b9
 800420c:	080042b9 	.word	0x080042b9
 8004210:	08004295 	.word	0x08004295
 8004214:	080042b9 	.word	0x080042b9
 8004218:	080042b9 	.word	0x080042b9
 800421c:	080042b9 	.word	0x080042b9
 8004220:	080042b9 	.word	0x080042b9
 8004224:	080042b9 	.word	0x080042b9
 8004228:	080042b9 	.word	0x080042b9
 800422c:	080042b9 	.word	0x080042b9
 8004230:	080042a7 	.word	0x080042a7
 8004234:	080042b9 	.word	0x080042b9
 8004238:	080042b9 	.word	0x080042b9
 800423c:	080042b9 	.word	0x080042b9
 8004240:	080042b9 	.word	0x080042b9
 8004244:	080042b9 	.word	0x080042b9
 8004248:	080042b9 	.word	0x080042b9
 800424c:	080042b9 	.word	0x080042b9
 8004250:	080042cd 	.word	0x080042cd
 8004254:	080042b9 	.word	0x080042b9
 8004258:	080042b9 	.word	0x080042b9
 800425c:	080042b9 	.word	0x080042b9
 8004260:	080042b9 	.word	0x080042b9
 8004264:	080042b9 	.word	0x080042b9
 8004268:	080042b9 	.word	0x080042b9
 800426c:	080042b9 	.word	0x080042b9
 8004270:	080042cd 	.word	0x080042cd
 8004274:	080042b9 	.word	0x080042b9
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042b9 	.word	0x080042b9
 8004280:	080042b9 	.word	0x080042b9
 8004284:	080042b9 	.word	0x080042b9
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042cd 	.word	0x080042cd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fdfa 	bl	8004e94 <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80042a4:	e013      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3324      	adds	r3, #36	; 0x24
 80042aa:	2101      	movs	r1, #1
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fea3 	bl	8004ff8 <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80042b6:	e00a      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	e007      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042be:	bf00      	nop
 80042c0:	58024400 	.word	0x58024400
 80042c4:	58024800 	.word	0x58024800
 80042c8:	00ffffcf 	.word	0x00ffffcf
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042d4:	4b96      	ldr	r3, [pc, #600]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e0:	4993      	ldr	r1, [pc, #588]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	654b      	str	r3, [r1, #84]	; 0x54
 80042e6:	e001      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d038      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	2b05      	cmp	r3, #5
 80042fe:	d821      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	0800434b 	.word	0x0800434b
 800430c:	08004321 	.word	0x08004321
 8004310:	08004333 	.word	0x08004333
 8004314:	0800434b 	.word	0x0800434b
 8004318:	0800434b 	.word	0x0800434b
 800431c:	0800434b 	.word	0x0800434b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fdb4 	bl	8004e94 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004330:	e00c      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	; 0x24
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fe5d 	bl	8004ff8 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800434a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004352:	4b77      	ldr	r3, [pc, #476]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f023 0207 	bic.w	r2, r3, #7
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	4974      	ldr	r1, [pc, #464]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	654b      	str	r3, [r1, #84]	; 0x54
 8004364:	e001      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	2b05      	cmp	r3, #5
 800437e:	d821      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043cb 	.word	0x080043cb
 800438c:	080043a1 	.word	0x080043a1
 8004390:	080043b3 	.word	0x080043b3
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043cb 	.word	0x080043cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fd74 	bl	8004e94 <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80043b0:	e00c      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fe1d 	bl	8004ff8 <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80043c2:	e003      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
      break;
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80043ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d2:	4b57      	ldr	r3, [pc, #348]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	4953      	ldr	r1, [pc, #332]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	658b      	str	r3, [r1, #88]	; 0x58
 80043e6:	e001      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d04b      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004402:	d02e      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004408:	d828      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440e:	d02a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d822      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800441a:	d026      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800441c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004420:	d81c      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d010      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442c:	d816      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01d      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004436:	d111      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd28 	bl	8004e94 <RCCEx_PLL2_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004448:	e012      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	2102      	movs	r1, #2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fdd1 	bl	8004ff8 <RCCEx_PLL3_Config>
 8004456:	4603      	mov	r3, r0
 8004458:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800445a:	e009      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]
      break;
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004462:	bf00      	nop
 8004464:	e004      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004466:	bf00      	nop
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800446e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004484:	492a      	ldr	r1, [pc, #168]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	654b      	str	r3, [r1, #84]	; 0x54
 800448a:	e001      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d04d      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044a6:	d02e      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80044a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044ac:	d828      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d02a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d822      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044be:	d026      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80044c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044c4:	d81c      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ca:	d010      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d0:	d816      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01d      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044da:	d111      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fcd6 	bl	8004e94 <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044ec:	e012      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3324      	adds	r3, #36	; 0x24
 80044f2:	2102      	movs	r1, #2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd7f 	bl	8004ff8 <RCCEx_PLL3_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044fe:	e009      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
      break;
 8004504:	e006      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004506:	bf00      	nop
 8004508:	e004      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800450a:	bf00      	nop
 800450c:	e002      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004528:	4901      	ldr	r1, [pc, #4]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	658b      	str	r3, [r1, #88]	; 0x58
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b00      	cmp	r3, #0
 8004542:	d04b      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800454e:	d02e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004550:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004554:	d828      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455a:	d02a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	d822      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004562:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004566:	d026      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004568:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800456c:	d81c      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800456e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004572:	d010      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004578:	d816      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01d      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800457e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004582:	d111      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fc82 	bl	8004e94 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004594:	e012      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3324      	adds	r3, #36	; 0x24
 800459a:	2102      	movs	r1, #2
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd2b 	bl	8004ff8 <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045a6:	e009      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
      break;
 80045ac:	e006      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045ae:	bf00      	nop
 80045b0:	e004      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045c2:	4b9d      	ldr	r3, [pc, #628]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d0:	4999      	ldr	r1, [pc, #612]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	658b      	str	r3, [r1, #88]	; 0x58
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f2:	d10a      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fcfc 	bl	8004ff8 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800460a:	4b8b      	ldr	r3, [pc, #556]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004618:	4987      	ldr	r1, [pc, #540]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800461a:	4313      	orrs	r3, r2
 800461c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004634:	d10a      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3324      	adds	r3, #36	; 0x24
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fcdb 	bl	8004ff8 <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464c:	4b7a      	ldr	r3, [pc, #488]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465a:	4977      	ldr	r1, [pc, #476]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d034      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004676:	d01d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800467c:	d817      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004686:	d009      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fbff 	bl	8004e94 <RCCEx_PLL2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800469a:	e00c      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3324      	adds	r3, #36	; 0x24
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fca8 	bl	8004ff8 <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046ac:	e003      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
      break;
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80046b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046bc:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ca:	495b      	ldr	r1, [pc, #364]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	658b      	str	r3, [r1, #88]	; 0x58
 80046d0:	e001      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d033      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ec:	d01c      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80046ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046f2:	d816      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80046f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f8:	d003      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80046fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fe:	d007      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004700:	e00f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004702:	4b4d      	ldr	r3, [pc, #308]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	4a4c      	ldr	r2, [pc, #304]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800470e:	e00c      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3324      	adds	r3, #36	; 0x24
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fc6e 	bl	8004ff8 <RCCEx_PLL3_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
      break;
 8004726:	e000      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473e:	493e      	ldr	r1, [pc, #248]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004740:	4313      	orrs	r3, r2
 8004742:	654b      	str	r3, [r1, #84]	; 0x54
 8004744:	e001      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d029      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004762:	d007      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004764:	e00f      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004766:	4b34      	ldr	r3, [pc, #208]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	4a33      	ldr	r2, [pc, #204]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800476c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004772:	e00b      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb8a 	bl	8004e94 <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004784:	e002      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
      break;
 800478a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004792:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	4926      	ldr	r1, [pc, #152]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047a4:	e001      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fc1b 	bl	8004ff8 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d033      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e0:	d017      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80047e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e6:	d811      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d013      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f2:	d80b      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80047f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fc:	d106      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fe:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800480a:	e007      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	e004      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800481a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	4902      	ldr	r1, [pc, #8]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004830:	4313      	orrs	r3, r2
 8004832:	654b      	str	r3, [r1, #84]	; 0x54
 8004834:	e004      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800484c:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	492e      	ldr	r1, [pc, #184]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800485a:	4313      	orrs	r3, r2
 800485c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800486a:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004878:	4926      	ldr	r1, [pc, #152]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800487a:	4313      	orrs	r3, r2
 800487c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004896:	491f      	ldr	r1, [pc, #124]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004898:	4313      	orrs	r3, r2
 800489a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048b2:	6113      	str	r3, [r2, #16]
 80048b4:	4b17      	ldr	r3, [pc, #92]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048be:	4915      	ldr	r1, [pc, #84]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da08      	bge.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	490e      	ldr	r1, [pc, #56]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	4906      	ldr	r1, [pc, #24]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80048fe:	7dbb      	ldrb	r3, [r7, #22]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58024400 	.word	0x58024400

08004918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800491c:	f7ff f85a 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	58024400 	.word	0x58024400
 8004940:	0800a4f4 	.word	0x0800a4f4

08004944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800494c:	4ba1      	ldr	r3, [pc, #644]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004956:	4b9f      	ldr	r3, [pc, #636]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	0b1b      	lsrs	r3, r3, #12
 800495c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004962:	4b9c      	ldr	r3, [pc, #624]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800496e:	4b99      	ldr	r3, [pc, #612]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	08db      	lsrs	r3, r3, #3
 8004974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8111 	beq.w	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b02      	cmp	r3, #2
 8004996:	f000 8083 	beq.w	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b02      	cmp	r3, #2
 800499e:	f200 80a1 	bhi.w	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d056      	beq.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049ae:	e099      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049b0:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d02d      	beq.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049bc:	4b85      	ldr	r3, [pc, #532]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	08db      	lsrs	r3, r3, #3
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	4a84      	ldr	r2, [pc, #528]	; (8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b7b      	ldr	r3, [pc, #492]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a16:	e087      	b.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a5a:	e065      	b.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a9e:	e043      	b.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ae2:	e021      	b.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	0a5b      	lsrs	r3, r3, #9
 8004b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b4e:	ee17 2a90 	vmov	r2, s15
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004b56:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7c:	ee17 2a90 	vmov	r2, s15
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	0e1b      	lsrs	r3, r3, #24
 8004b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004baa:	ee17 2a90 	vmov	r2, s15
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
}
 8004bc6:	bf00      	nop
 8004bc8:	3724      	adds	r7, #36	; 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	03d09000 	.word	0x03d09000
 8004bdc:	46000000 	.word	0x46000000
 8004be0:	4c742400 	.word	0x4c742400
 8004be4:	4a742400 	.word	0x4a742400
 8004be8:	4af42400 	.word	0x4af42400

08004bec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bf4:	4ba1      	ldr	r3, [pc, #644]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004bfe:	4b9f      	ldr	r3, [pc, #636]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	0d1b      	lsrs	r3, r3, #20
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c0a:	4b9c      	ldr	r3, [pc, #624]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004c16:	4b99      	ldr	r3, [pc, #612]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8111 	beq.w	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f000 8083 	beq.w	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	f200 80a1 	bhi.w	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d056      	beq.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c56:	e099      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c58:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02d      	beq.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c64:	4b85      	ldr	r3, [pc, #532]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	4a84      	ldr	r2, [pc, #528]	; (8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b7b      	ldr	r3, [pc, #492]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cbe:	e087      	b.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b6a      	ldr	r3, [pc, #424]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d02:	e065      	b.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d46:	e043      	b.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d8a:	e021      	b.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df6:	ee17 2a90 	vmov	r2, s15
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e24:	ee17 2a90 	vmov	r2, s15
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	0e1b      	lsrs	r3, r3, #24
 8004e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e52:	ee17 2a90 	vmov	r2, s15
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e5a:	e008      	b.n	8004e6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	609a      	str	r2, [r3, #8]
}
 8004e6e:	bf00      	nop
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	03d09000 	.word	0x03d09000
 8004e84:	46000000 	.word	0x46000000
 8004e88:	4c742400 	.word	0x4c742400
 8004e8c:	4a742400 	.word	0x4a742400
 8004e90:	4af42400 	.word	0x4af42400

08004e94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ea2:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d101      	bne.n	8004eb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e099      	b.n	8004fe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4e      	ldr	r2, [pc, #312]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004eb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fab9 	bl	8002434 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ec6:	f7fd fab5 	bl	8002434 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e086      	b.n	8004fe6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ee4:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	031b      	lsls	r3, r3, #12
 8004ef2:	493f      	ldr	r1, [pc, #252]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	025b      	lsls	r3, r3, #9
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f28:	4931      	ldr	r1, [pc, #196]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f2e:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	492d      	ldr	r1, [pc, #180]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f023 0220 	bic.w	r2, r3, #32
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	4928      	ldr	r1, [pc, #160]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f52:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	4a26      	ldr	r2, [pc, #152]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	f023 0310 	bic.w	r3, r3, #16
 8004f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <RCCEx_PLL2_Config+0x160>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	69d2      	ldr	r2, [r2, #28]
 8004f6a:	00d2      	lsls	r2, r2, #3
 8004f6c:	4920      	ldr	r1, [pc, #128]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f78:	f043 0310 	orr.w	r3, r3, #16
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f90:	e00f      	b.n	8004fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fa4:	e005      	b.n	8004fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbe:	f7fd fa39 	bl	8002434 <HAL_GetTick>
 8004fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fc4:	e008      	b.n	8004fd8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004fc6:	f7fd fa35 	bl	8002434 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	ffff0007 	.word	0xffff0007

08004ff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005006:	4b53      	ldr	r3, [pc, #332]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d101      	bne.n	8005016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e099      	b.n	800514a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005016:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fd fa07 	bl	8002434 <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005028:	e008      	b.n	800503c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800502a:	f7fd fa03 	bl	8002434 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e086      	b.n	800514a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800503c:	4b45      	ldr	r3, [pc, #276]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005048:	4b42      	ldr	r3, [pc, #264]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	051b      	lsls	r3, r3, #20
 8005056:	493f      	ldr	r1, [pc, #252]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005058:	4313      	orrs	r3, r2
 800505a:	628b      	str	r3, [r1, #40]	; 0x28
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	025b      	lsls	r3, r3, #9
 800506e:	b29b      	uxth	r3, r3
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	3b01      	subs	r3, #1
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800508c:	4931      	ldr	r1, [pc, #196]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	492d      	ldr	r1, [pc, #180]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	4928      	ldr	r1, [pc, #160]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	4a26      	ldr	r2, [pc, #152]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <RCCEx_PLL3_Config+0x160>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	69d2      	ldr	r2, [r2, #28]
 80050ce:	00d2      	lsls	r2, r2, #3
 80050d0:	4920      	ldr	r1, [pc, #128]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050d6:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f4:	e00f      	b.n	8005116 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005108:	e005      	b.n	8005116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a11      	ldr	r2, [pc, #68]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fd f987 	bl	8002434 <HAL_GetTick>
 8005126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005128:	e008      	b.n	800513c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800512a:	f7fd f983 	bl	8002434 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e006      	b.n	800514a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <RCCEx_PLL3_Config+0x15c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	ffff0007 	.word	0xffff0007

0800515c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0f1      	b.n	8005352 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a78      	ldr	r2, [pc, #480]	; (800535c <HAL_SPI_Init+0x200>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00f      	beq.n	800519e <HAL_SPI_Init+0x42>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a77      	ldr	r2, [pc, #476]	; (8005360 <HAL_SPI_Init+0x204>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00a      	beq.n	800519e <HAL_SPI_Init+0x42>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a75      	ldr	r2, [pc, #468]	; (8005364 <HAL_SPI_Init+0x208>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d005      	beq.n	800519e <HAL_SPI_Init+0x42>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d901      	bls.n	800519e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0d9      	b.n	8005352 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 ff66 	bl	8006070 <SPI_GetPacketSize>
 80051a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6c      	ldr	r2, [pc, #432]	; (800535c <HAL_SPI_Init+0x200>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00c      	beq.n	80051ca <HAL_SPI_Init+0x6e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a6a      	ldr	r2, [pc, #424]	; (8005360 <HAL_SPI_Init+0x204>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <HAL_SPI_Init+0x6e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a69      	ldr	r2, [pc, #420]	; (8005364 <HAL_SPI_Init+0x208>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d002      	beq.n	80051ca <HAL_SPI_Init+0x6e>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d811      	bhi.n	80051ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80051ce:	4a63      	ldr	r2, [pc, #396]	; (800535c <HAL_SPI_Init+0x200>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a61      	ldr	r2, [pc, #388]	; (8005360 <HAL_SPI_Init+0x204>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_SPI_Init+0x8c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a60      	ldr	r2, [pc, #384]	; (8005364 <HAL_SPI_Init+0x208>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d104      	bne.n	80051f2 <HAL_SPI_Init+0x96>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d901      	bls.n	80051f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0af      	b.n	8005352 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fdf8 	bl	8001dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800522e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005238:	d119      	bne.n	800526e <HAL_SPI_Init+0x112>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005242:	d103      	bne.n	800524c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525c:	d107      	bne.n	800526e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	431a      	orrs	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	ea42 0103 	orr.w	r1, r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ce:	ea42 0103 	orr.w	r1, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d113      	bne.n	800530e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800530c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40013000 	.word	0x40013000
 8005360:	40003800 	.word	0x40003800
 8005364:	40003c00 	.word	0x40003c00

08005368 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3320      	adds	r3, #32
 800537e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_SPI_Transmit+0x2a>
 800538e:	2302      	movs	r3, #2
 8005390:	e1d7      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800539a:	f7fd f84b 	bl	8002434 <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d007      	beq.n	80053bc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
 80053ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80053b8:	7efb      	ldrb	r3, [r7, #27]
 80053ba:	e1c2      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x60>
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d107      	bne.n	80053d8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80053d4:	7efb      	ldrb	r3, [r7, #27]
 80053d6:	e1b4      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2203      	movs	r2, #3
 80053dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	88fa      	ldrh	r2, [r7, #6]
 80053fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005428:	d107      	bne.n	800543a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005438:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4b96      	ldr	r3, [pc, #600]	; (800569c <HAL_SPI_Transmit+0x334>)
 8005442:	4013      	ands	r3, r2
 8005444:	88f9      	ldrh	r1, [r7, #6]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	430b      	orrs	r3, r1
 800544c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005466:	d107      	bne.n	8005478 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b0f      	cmp	r3, #15
 800547e:	d947      	bls.n	8005510 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005480:	e03f      	b.n	8005502 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b02      	cmp	r3, #2
 800548e:	d114      	bne.n	80054ba <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054b8:	e023      	b.n	8005502 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ba:	f7fc ffbb 	bl	8002434 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d803      	bhi.n	80054d2 <HAL_SPI_Transmit+0x16a>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d102      	bne.n	80054d8 <HAL_SPI_Transmit+0x170>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d114      	bne.n	8005502 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fcfb 	bl	8005ed4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e11f      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1b9      	bne.n	8005482 <HAL_SPI_Transmit+0x11a>
 800550e:	e0f2      	b.n	80056f6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b07      	cmp	r3, #7
 8005516:	f240 80e7 	bls.w	80056e8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800551a:	e05d      	b.n	80055d8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d132      	bne.n	8005590 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d918      	bls.n	8005568 <HAL_SPI_Transmit+0x200>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d014      	beq.n	8005568 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b02      	subs	r3, #2
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005566:	e037      	b.n	80055d8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556c:	881a      	ldrh	r2, [r3, #0]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005576:	1c9a      	adds	r2, r3, #2
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800558e:	e023      	b.n	80055d8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005590:	f7fc ff50 	bl	8002434 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d803      	bhi.n	80055a8 <HAL_SPI_Transmit+0x240>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Transmit+0x246>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d114      	bne.n	80055d8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fc90 	bl	8005ed4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e0b4      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d19b      	bne.n	800551c <HAL_SPI_Transmit+0x1b4>
 80055e4:	e087      	b.n	80056f6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d155      	bne.n	80056a0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d918      	bls.n	8005632 <HAL_SPI_Transmit+0x2ca>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d914      	bls.n	8005632 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b04      	subs	r3, #4
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005630:	e05a      	b.n	80056e8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d917      	bls.n	800566e <HAL_SPI_Transmit+0x306>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d013      	beq.n	800566e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b02      	subs	r3, #2
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800566c:	e03c      	b.n	80056e8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3320      	adds	r3, #32
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005698:	e026      	b.n	80056e8 <HAL_SPI_Transmit+0x380>
 800569a:	bf00      	nop
 800569c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a0:	f7fc fec8 	bl	8002434 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d803      	bhi.n	80056b8 <HAL_SPI_Transmit+0x350>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d102      	bne.n	80056be <HAL_SPI_Transmit+0x356>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d114      	bne.n	80056e8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fc08 	bl	8005ed4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e02c      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f af78 	bne.w	80055e6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2108      	movs	r1, #8
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fc87 	bl	8006014 <SPI_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fbd9 	bl	8005ed4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005740:	7efb      	ldrb	r3, [r7, #27]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop

0800574c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3330      	adds	r3, #48	; 0x30
 8005766:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005770:	d112      	bne.n	8005798 <HAL_SPI_Receive+0x4c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10e      	bne.n	8005798 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2204      	movs	r2, #4
 800577e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f978 	bl	8005a84 <HAL_SPI_TransmitReceive>
 8005794:	4603      	mov	r3, r0
 8005796:	e16f      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_SPI_Receive+0x5a>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e168      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ae:	f7fc fe41 	bl	8002434 <HAL_GetTick>
 80057b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d007      	beq.n	80057d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
 80057c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80057cc:	7ffb      	ldrb	r3, [r7, #31]
 80057ce:	e153      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_SPI_Receive+0x90>
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d107      	bne.n	80057ec <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80057e8:	7ffb      	ldrb	r3, [r7, #31]
 80057ea:	e145      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2204      	movs	r2, #4
 80057f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800583c:	d107      	bne.n	800584e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4b8a      	ldr	r3, [pc, #552]	; (8005a80 <HAL_SPI_Receive+0x334>)
 8005856:	4013      	ands	r3, r2
 8005858:	88f9      	ldrh	r1, [r7, #6]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	430b      	orrs	r3, r1
 8005860:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587a:	d107      	bne.n	800588c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b0f      	cmp	r3, #15
 8005892:	d948      	bls.n	8005926 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005894:	e040      	b.n	8005918 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	f248 0308 	movw	r3, #32776	; 0x8008
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d014      	beq.n	80058d0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058b0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b6:	1d1a      	adds	r2, r3, #4
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058ce:	e023      	b.n	8005918 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d0:	f7fc fdb0 	bl	8002434 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d803      	bhi.n	80058e8 <HAL_SPI_Receive+0x19c>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d102      	bne.n	80058ee <HAL_SPI_Receive+0x1a2>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d114      	bne.n	8005918 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 faf0 	bl	8005ed4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e0af      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1b8      	bne.n	8005896 <HAL_SPI_Receive+0x14a>
 8005924:	e095      	b.n	8005a52 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b07      	cmp	r3, #7
 800592c:	f240 808b 	bls.w	8005a46 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005930:	e03f      	b.n	80059b2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d114      	bne.n	800596a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	8812      	ldrh	r2, [r2, #0]
 8005948:	b292      	uxth	r2, r2
 800594a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005950:	1c9a      	adds	r2, r3, #2
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005968:	e023      	b.n	80059b2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596a:	f7fc fd63 	bl	8002434 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d803      	bhi.n	8005982 <HAL_SPI_Receive+0x236>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d102      	bne.n	8005988 <HAL_SPI_Receive+0x23c>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d114      	bne.n	80059b2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 faa3 	bl	8005ed4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e062      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1b9      	bne.n	8005932 <HAL_SPI_Receive+0x1e6>
 80059be:	e048      	b.n	8005a52 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d117      	bne.n	80059fe <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059fc:	e023      	b.n	8005a46 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fe:	f7fc fd19 	bl	8002434 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d803      	bhi.n	8005a16 <HAL_SPI_Receive+0x2ca>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Receive+0x2d0>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d114      	bne.n	8005a46 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fa59 	bl	8005ed4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e018      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1b6      	bne.n	80059c0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fa3e 	bl	8005ed4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	ffff0000 	.word	0xffff0000

08005a84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	; 0x38
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3320      	adds	r3, #32
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3330      	adds	r3, #48	; 0x30
 8005aa6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_SPI_TransmitReceive+0x32>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e209      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005abe:	f7fc fcb9 	bl	8002434 <HAL_GetTick>
 8005ac2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005ac4:	887b      	ldrh	r3, [r7, #2]
 8005ac6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ad2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ada:	7efb      	ldrb	r3, [r7, #27]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d014      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x86>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae6:	d106      	bne.n	8005af6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005af0:	7efb      	ldrb	r3, [r7, #27]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d009      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
 8005af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b08:	e1df      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x98>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x98>
 8005b16:	887b      	ldrh	r3, [r7, #2]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	e1cc      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d003      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2205      	movs	r2, #5
 8005b40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	887a      	ldrh	r2, [r7, #2]
 8005b56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	887a      	ldrh	r2, [r7, #2]
 8005b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	887a      	ldrh	r2, [r7, #2]
 8005b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	4b82      	ldr	r3, [pc, #520]	; (8005d94 <HAL_SPI_TransmitReceive+0x310>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	8879      	ldrh	r1, [r7, #2]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb0:	d107      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d970      	bls.n	8005cac <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bca:	e068      	b.n	8005c9e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d11a      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x18c>
 8005bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d017      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	1d1a      	adds	r2, r3, #4
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	f248 0308 	movw	r3, #32776	; 0x8008
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01a      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x1d2>
 8005c20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d017      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c30:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c36:	1d1a      	adds	r2, r3, #4
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c54:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c56:	f7fc fbed 	bl	8002434 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d803      	bhi.n	8005c6e <HAL_SPI_TransmitReceive+0x1ea>
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d102      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x1f0>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d114      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f92d 	bl	8005ed4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e115      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d193      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x148>
 8005ca4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d190      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x148>
 8005caa:	e0e7      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b07      	cmp	r3, #7
 8005cb2:	f240 80dd 	bls.w	8005e70 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cb6:	e066      	b.n	8005d86 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d119      	bne.n	8005cfa <HAL_SPI_TransmitReceive+0x276>
 8005cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d016      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cda:	1c9a      	adds	r2, r3, #2
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005cf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d11a      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x2ba>
 8005d08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d017      	beq.n	8005d3e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d12:	6a3a      	ldr	r2, [r7, #32]
 8005d14:	8812      	ldrh	r2, [r2, #0]
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d3e:	f7fc fb79 	bl	8002434 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d803      	bhi.n	8005d56 <HAL_SPI_TransmitReceive+0x2d2>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d102      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x2d8>
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d114      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f8b9 	bl	8005ed4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0a1      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d195      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x234>
 8005d8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d192      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x234>
 8005d92:	e073      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x3f8>
 8005d94:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d11b      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x35a>
 8005da6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d018      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3320      	adds	r3, #32
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ddc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d11d      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x3a4>
 8005dec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01a      	beq.n	8005e28 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfe:	7812      	ldrb	r2, [r2, #0]
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e26:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e28:	f7fc fb04 	bl	8002434 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d803      	bhi.n	8005e40 <HAL_SPI_TransmitReceive+0x3bc>
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d102      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x3c2>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d114      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f844 	bl	8005ed4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e02c      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d190      	bne.n	8005d98 <HAL_SPI_TransmitReceive+0x314>
 8005e76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d18d      	bne.n	8005d98 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2200      	movs	r2, #0
 8005e84:	2108      	movs	r1, #8
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f8c4 	bl	8006014 <SPI_WaitOnFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f816 	bl	8005ed4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e001      	b.n	8005eca <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3730      	adds	r7, #48	; 0x30
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop

08005ed4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0208 	orr.w	r2, r2, #8
 8005ef2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0210 	orr.w	r2, r2, #16
 8005f02:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6919      	ldr	r1, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b3c      	ldr	r3, [pc, #240]	; (8006010 <SPI_CloseTransfer+0x13c>)
 8005f20:	400b      	ands	r3, r1
 8005f22:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f32:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d014      	beq.n	8005f6a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00f      	beq.n	8005f6a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0220 	orr.w	r2, r2, #32
 8005f68:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d014      	beq.n	8005fa0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00f      	beq.n	8005fa0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f9e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00f      	beq.n	8005fca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00f      	beq.n	8005ff4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fda:	f043 0208 	orr.w	r2, r3, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	fffffc90 	.word	0xfffffc90

08006014 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	4613      	mov	r3, r2
 8006022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006024:	e010      	b.n	8006048 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006026:	f7fc fa05 	bl	8002434 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	429a      	cmp	r2, r3
 8006034:	d803      	bhi.n	800603e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d102      	bne.n	8006044 <SPI_WaitOnFlagUntilTimeout+0x30>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e00f      	b.n	8006068 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	4013      	ands	r3, r2
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	429a      	cmp	r2, r3
 8006064:	d0df      	beq.n	8006026 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	3307      	adds	r3, #7
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	fb02 f303 	mul.w	r3, r2, r3
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e042      	b.n	800613e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc f89c 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8c3 	bl	8006274 <UART_SetConfig>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e022      	b.n	800613e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fe1f 	bl	8006d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006114:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006124:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fea6 	bl	8006e88 <UART_CheckIdleState>
 800613c:	4603      	mov	r3, r0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b08a      	sub	sp, #40	; 0x28
 800614a:	af02      	add	r7, sp, #8
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615c:	2b20      	cmp	r3, #32
 800615e:	f040 8083 	bne.w	8006268 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Transmit+0x28>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e07b      	b.n	800626a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UART_Transmit+0x3a>
 800617c:	2302      	movs	r3, #2
 800617e:	e074      	b.n	800626a <HAL_UART_Transmit+0x124>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2221      	movs	r2, #33	; 0x21
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006198:	f7fc f94c 	bl	8002434 <HAL_GetTick>
 800619c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d108      	bne.n	80061ca <HAL_UART_Transmit+0x84>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e003      	b.n	80061d2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80061da:	e02c      	b.n	8006236 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2200      	movs	r2, #0
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fe99 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e039      	b.n	800626a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	3302      	adds	r3, #2
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	e007      	b.n	8006224 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	3301      	adds	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1cc      	bne.n	80061dc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	2140      	movs	r1, #64	; 0x40
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fe66 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e006      	b.n	800626a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	e000      	b.n	800626a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006268:	2302      	movs	r3, #2
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006278:	b092      	sub	sp, #72	; 0x48
 800627a:	af00      	add	r7, sp, #0
 800627c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	431a      	orrs	r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	431a      	orrs	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	4313      	orrs	r3, r2
 800629a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4bbe      	ldr	r3, [pc, #760]	; (800659c <UART_SetConfig+0x328>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4ab3      	ldr	r2, [pc, #716]	; (80065a0 <UART_SetConfig+0x32c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062dc:	4313      	orrs	r3, r2
 80062de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	4baf      	ldr	r3, [pc, #700]	; (80065a4 <UART_SetConfig+0x330>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	f023 010f 	bic.w	r1, r3, #15
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4aa6      	ldr	r2, [pc, #664]	; (80065a8 <UART_SetConfig+0x334>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d177      	bne.n	8006404 <UART_SetConfig+0x190>
 8006314:	4ba5      	ldr	r3, [pc, #660]	; (80065ac <UART_SetConfig+0x338>)
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800631c:	2b28      	cmp	r3, #40	; 0x28
 800631e:	d86d      	bhi.n	80063fc <UART_SetConfig+0x188>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0xb4>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	080063cd 	.word	0x080063cd
 800632c:	080063fd 	.word	0x080063fd
 8006330:	080063fd 	.word	0x080063fd
 8006334:	080063fd 	.word	0x080063fd
 8006338:	080063fd 	.word	0x080063fd
 800633c:	080063fd 	.word	0x080063fd
 8006340:	080063fd 	.word	0x080063fd
 8006344:	080063fd 	.word	0x080063fd
 8006348:	080063d5 	.word	0x080063d5
 800634c:	080063fd 	.word	0x080063fd
 8006350:	080063fd 	.word	0x080063fd
 8006354:	080063fd 	.word	0x080063fd
 8006358:	080063fd 	.word	0x080063fd
 800635c:	080063fd 	.word	0x080063fd
 8006360:	080063fd 	.word	0x080063fd
 8006364:	080063fd 	.word	0x080063fd
 8006368:	080063dd 	.word	0x080063dd
 800636c:	080063fd 	.word	0x080063fd
 8006370:	080063fd 	.word	0x080063fd
 8006374:	080063fd 	.word	0x080063fd
 8006378:	080063fd 	.word	0x080063fd
 800637c:	080063fd 	.word	0x080063fd
 8006380:	080063fd 	.word	0x080063fd
 8006384:	080063fd 	.word	0x080063fd
 8006388:	080063e5 	.word	0x080063e5
 800638c:	080063fd 	.word	0x080063fd
 8006390:	080063fd 	.word	0x080063fd
 8006394:	080063fd 	.word	0x080063fd
 8006398:	080063fd 	.word	0x080063fd
 800639c:	080063fd 	.word	0x080063fd
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	080063ed 	.word	0x080063ed
 80063ac:	080063fd 	.word	0x080063fd
 80063b0:	080063fd 	.word	0x080063fd
 80063b4:	080063fd 	.word	0x080063fd
 80063b8:	080063fd 	.word	0x080063fd
 80063bc:	080063fd 	.word	0x080063fd
 80063c0:	080063fd 	.word	0x080063fd
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e222      	b.n	800681a <UART_SetConfig+0x5a6>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e21e      	b.n	800681a <UART_SetConfig+0x5a6>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e21a      	b.n	800681a <UART_SetConfig+0x5a6>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ea:	e216      	b.n	800681a <UART_SetConfig+0x5a6>
 80063ec:	2320      	movs	r3, #32
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e212      	b.n	800681a <UART_SetConfig+0x5a6>
 80063f4:	2340      	movs	r3, #64	; 0x40
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e20e      	b.n	800681a <UART_SetConfig+0x5a6>
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e20a      	b.n	800681a <UART_SetConfig+0x5a6>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a69      	ldr	r2, [pc, #420]	; (80065b0 <UART_SetConfig+0x33c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d130      	bne.n	8006470 <UART_SetConfig+0x1fc>
 800640e:	4b67      	ldr	r3, [pc, #412]	; (80065ac <UART_SetConfig+0x338>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b05      	cmp	r3, #5
 8006418:	d826      	bhi.n	8006468 <UART_SetConfig+0x1f4>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <UART_SetConfig+0x1ac>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006439 	.word	0x08006439
 8006424:	08006441 	.word	0x08006441
 8006428:	08006449 	.word	0x08006449
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643e:	e1ec      	b.n	800681a <UART_SetConfig+0x5a6>
 8006440:	2304      	movs	r3, #4
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006446:	e1e8      	b.n	800681a <UART_SetConfig+0x5a6>
 8006448:	2308      	movs	r3, #8
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644e:	e1e4      	b.n	800681a <UART_SetConfig+0x5a6>
 8006450:	2310      	movs	r3, #16
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006456:	e1e0      	b.n	800681a <UART_SetConfig+0x5a6>
 8006458:	2320      	movs	r3, #32
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645e:	e1dc      	b.n	800681a <UART_SetConfig+0x5a6>
 8006460:	2340      	movs	r3, #64	; 0x40
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006466:	e1d8      	b.n	800681a <UART_SetConfig+0x5a6>
 8006468:	2380      	movs	r3, #128	; 0x80
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646e:	e1d4      	b.n	800681a <UART_SetConfig+0x5a6>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a4f      	ldr	r2, [pc, #316]	; (80065b4 <UART_SetConfig+0x340>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d130      	bne.n	80064dc <UART_SetConfig+0x268>
 800647a:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <UART_SetConfig+0x338>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b05      	cmp	r3, #5
 8006484:	d826      	bhi.n	80064d4 <UART_SetConfig+0x260>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x218>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064a5 	.word	0x080064a5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064b5 	.word	0x080064b5
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064aa:	e1b6      	b.n	800681a <UART_SetConfig+0x5a6>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b2:	e1b2      	b.n	800681a <UART_SetConfig+0x5a6>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ba:	e1ae      	b.n	800681a <UART_SetConfig+0x5a6>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c2:	e1aa      	b.n	800681a <UART_SetConfig+0x5a6>
 80064c4:	2320      	movs	r3, #32
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ca:	e1a6      	b.n	800681a <UART_SetConfig+0x5a6>
 80064cc:	2340      	movs	r3, #64	; 0x40
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d2:	e1a2      	b.n	800681a <UART_SetConfig+0x5a6>
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e19e      	b.n	800681a <UART_SetConfig+0x5a6>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a35      	ldr	r2, [pc, #212]	; (80065b8 <UART_SetConfig+0x344>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d130      	bne.n	8006548 <UART_SetConfig+0x2d4>
 80064e6:	4b31      	ldr	r3, [pc, #196]	; (80065ac <UART_SetConfig+0x338>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d826      	bhi.n	8006540 <UART_SetConfig+0x2cc>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <UART_SetConfig+0x284>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006511 	.word	0x08006511
 80064fc:	08006519 	.word	0x08006519
 8006500:	08006521 	.word	0x08006521
 8006504:	08006529 	.word	0x08006529
 8006508:	08006531 	.word	0x08006531
 800650c:	08006539 	.word	0x08006539
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e180      	b.n	800681a <UART_SetConfig+0x5a6>
 8006518:	2304      	movs	r3, #4
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651e:	e17c      	b.n	800681a <UART_SetConfig+0x5a6>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006526:	e178      	b.n	800681a <UART_SetConfig+0x5a6>
 8006528:	2310      	movs	r3, #16
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652e:	e174      	b.n	800681a <UART_SetConfig+0x5a6>
 8006530:	2320      	movs	r3, #32
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006536:	e170      	b.n	800681a <UART_SetConfig+0x5a6>
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653e:	e16c      	b.n	800681a <UART_SetConfig+0x5a6>
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006546:	e168      	b.n	800681a <UART_SetConfig+0x5a6>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <UART_SetConfig+0x348>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d142      	bne.n	80065d8 <UART_SetConfig+0x364>
 8006552:	4b16      	ldr	r3, [pc, #88]	; (80065ac <UART_SetConfig+0x338>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b05      	cmp	r3, #5
 800655c:	d838      	bhi.n	80065d0 <UART_SetConfig+0x35c>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x2f0>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	0800657d 	.word	0x0800657d
 8006568:	08006585 	.word	0x08006585
 800656c:	0800658d 	.word	0x0800658d
 8006570:	08006595 	.word	0x08006595
 8006574:	080065c1 	.word	0x080065c1
 8006578:	080065c9 	.word	0x080065c9
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006582:	e14a      	b.n	800681a <UART_SetConfig+0x5a6>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e146      	b.n	800681a <UART_SetConfig+0x5a6>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e142      	b.n	800681a <UART_SetConfig+0x5a6>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659a:	e13e      	b.n	800681a <UART_SetConfig+0x5a6>
 800659c:	cfff69f3 	.word	0xcfff69f3
 80065a0:	58000c00 	.word	0x58000c00
 80065a4:	11fff4ff 	.word	0x11fff4ff
 80065a8:	40011000 	.word	0x40011000
 80065ac:	58024400 	.word	0x58024400
 80065b0:	40004400 	.word	0x40004400
 80065b4:	40004800 	.word	0x40004800
 80065b8:	40004c00 	.word	0x40004c00
 80065bc:	40005000 	.word	0x40005000
 80065c0:	2320      	movs	r3, #32
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e128      	b.n	800681a <UART_SetConfig+0x5a6>
 80065c8:	2340      	movs	r3, #64	; 0x40
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e124      	b.n	800681a <UART_SetConfig+0x5a6>
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e120      	b.n	800681a <UART_SetConfig+0x5a6>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4acb      	ldr	r2, [pc, #812]	; (800690c <UART_SetConfig+0x698>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d176      	bne.n	80066d0 <UART_SetConfig+0x45c>
 80065e2:	4bcb      	ldr	r3, [pc, #812]	; (8006910 <UART_SetConfig+0x69c>)
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ea:	2b28      	cmp	r3, #40	; 0x28
 80065ec:	d86c      	bhi.n	80066c8 <UART_SetConfig+0x454>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <UART_SetConfig+0x380>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006699 	.word	0x08006699
 80065f8:	080066c9 	.word	0x080066c9
 80065fc:	080066c9 	.word	0x080066c9
 8006600:	080066c9 	.word	0x080066c9
 8006604:	080066c9 	.word	0x080066c9
 8006608:	080066c9 	.word	0x080066c9
 800660c:	080066c9 	.word	0x080066c9
 8006610:	080066c9 	.word	0x080066c9
 8006614:	080066a1 	.word	0x080066a1
 8006618:	080066c9 	.word	0x080066c9
 800661c:	080066c9 	.word	0x080066c9
 8006620:	080066c9 	.word	0x080066c9
 8006624:	080066c9 	.word	0x080066c9
 8006628:	080066c9 	.word	0x080066c9
 800662c:	080066c9 	.word	0x080066c9
 8006630:	080066c9 	.word	0x080066c9
 8006634:	080066a9 	.word	0x080066a9
 8006638:	080066c9 	.word	0x080066c9
 800663c:	080066c9 	.word	0x080066c9
 8006640:	080066c9 	.word	0x080066c9
 8006644:	080066c9 	.word	0x080066c9
 8006648:	080066c9 	.word	0x080066c9
 800664c:	080066c9 	.word	0x080066c9
 8006650:	080066c9 	.word	0x080066c9
 8006654:	080066b1 	.word	0x080066b1
 8006658:	080066c9 	.word	0x080066c9
 800665c:	080066c9 	.word	0x080066c9
 8006660:	080066c9 	.word	0x080066c9
 8006664:	080066c9 	.word	0x080066c9
 8006668:	080066c9 	.word	0x080066c9
 800666c:	080066c9 	.word	0x080066c9
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066b9 	.word	0x080066b9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066c9 	.word	0x080066c9
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066c9 	.word	0x080066c9
 8006688:	080066c9 	.word	0x080066c9
 800668c:	080066c9 	.word	0x080066c9
 8006690:	080066c9 	.word	0x080066c9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	2301      	movs	r3, #1
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e0bc      	b.n	800681a <UART_SetConfig+0x5a6>
 80066a0:	2304      	movs	r3, #4
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e0b8      	b.n	800681a <UART_SetConfig+0x5a6>
 80066a8:	2308      	movs	r3, #8
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e0b4      	b.n	800681a <UART_SetConfig+0x5a6>
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e0b0      	b.n	800681a <UART_SetConfig+0x5a6>
 80066b8:	2320      	movs	r3, #32
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e0ac      	b.n	800681a <UART_SetConfig+0x5a6>
 80066c0:	2340      	movs	r3, #64	; 0x40
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e0a8      	b.n	800681a <UART_SetConfig+0x5a6>
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e0a4      	b.n	800681a <UART_SetConfig+0x5a6>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a8f      	ldr	r2, [pc, #572]	; (8006914 <UART_SetConfig+0x6a0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d130      	bne.n	800673c <UART_SetConfig+0x4c8>
 80066da:	4b8d      	ldr	r3, [pc, #564]	; (8006910 <UART_SetConfig+0x69c>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d826      	bhi.n	8006734 <UART_SetConfig+0x4c0>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x478>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006705 	.word	0x08006705
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	08006715 	.word	0x08006715
 80066f8:	0800671d 	.word	0x0800671d
 80066fc:	08006725 	.word	0x08006725
 8006700:	0800672d 	.word	0x0800672d
 8006704:	2300      	movs	r3, #0
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e086      	b.n	800681a <UART_SetConfig+0x5a6>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e082      	b.n	800681a <UART_SetConfig+0x5a6>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e07e      	b.n	800681a <UART_SetConfig+0x5a6>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e07a      	b.n	800681a <UART_SetConfig+0x5a6>
 8006724:	2320      	movs	r3, #32
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e076      	b.n	800681a <UART_SetConfig+0x5a6>
 800672c:	2340      	movs	r3, #64	; 0x40
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e072      	b.n	800681a <UART_SetConfig+0x5a6>
 8006734:	2380      	movs	r3, #128	; 0x80
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e06e      	b.n	800681a <UART_SetConfig+0x5a6>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a75      	ldr	r2, [pc, #468]	; (8006918 <UART_SetConfig+0x6a4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d130      	bne.n	80067a8 <UART_SetConfig+0x534>
 8006746:	4b72      	ldr	r3, [pc, #456]	; (8006910 <UART_SetConfig+0x69c>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	2b05      	cmp	r3, #5
 8006750:	d826      	bhi.n	80067a0 <UART_SetConfig+0x52c>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0x4e4>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	08006771 	.word	0x08006771
 800675c:	08006779 	.word	0x08006779
 8006760:	08006781 	.word	0x08006781
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e050      	b.n	800681a <UART_SetConfig+0x5a6>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e04c      	b.n	800681a <UART_SetConfig+0x5a6>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e048      	b.n	800681a <UART_SetConfig+0x5a6>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e044      	b.n	800681a <UART_SetConfig+0x5a6>
 8006790:	2320      	movs	r3, #32
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e040      	b.n	800681a <UART_SetConfig+0x5a6>
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e03c      	b.n	800681a <UART_SetConfig+0x5a6>
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e038      	b.n	800681a <UART_SetConfig+0x5a6>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a5b      	ldr	r2, [pc, #364]	; (800691c <UART_SetConfig+0x6a8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d130      	bne.n	8006814 <UART_SetConfig+0x5a0>
 80067b2:	4b57      	ldr	r3, [pc, #348]	; (8006910 <UART_SetConfig+0x69c>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	d826      	bhi.n	800680c <UART_SetConfig+0x598>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0x550>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067ed 	.word	0x080067ed
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	080067fd 	.word	0x080067fd
 80067d8:	08006805 	.word	0x08006805
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e01a      	b.n	800681a <UART_SetConfig+0x5a6>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e016      	b.n	800681a <UART_SetConfig+0x5a6>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f2:	e012      	b.n	800681a <UART_SetConfig+0x5a6>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fa:	e00e      	b.n	800681a <UART_SetConfig+0x5a6>
 80067fc:	2320      	movs	r3, #32
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006802:	e00a      	b.n	800681a <UART_SetConfig+0x5a6>
 8006804:	2340      	movs	r3, #64	; 0x40
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680a:	e006      	b.n	800681a <UART_SetConfig+0x5a6>
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006812:	e002      	b.n	800681a <UART_SetConfig+0x5a6>
 8006814:	2380      	movs	r3, #128	; 0x80
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a3f      	ldr	r2, [pc, #252]	; (800691c <UART_SetConfig+0x6a8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	f040 80f8 	bne.w	8006a16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006826:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800682a:	2b20      	cmp	r3, #32
 800682c:	dc46      	bgt.n	80068bc <UART_SetConfig+0x648>
 800682e:	2b02      	cmp	r3, #2
 8006830:	f2c0 8082 	blt.w	8006938 <UART_SetConfig+0x6c4>
 8006834:	3b02      	subs	r3, #2
 8006836:	2b1e      	cmp	r3, #30
 8006838:	d87e      	bhi.n	8006938 <UART_SetConfig+0x6c4>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x5cc>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	080068c3 	.word	0x080068c3
 8006844:	08006939 	.word	0x08006939
 8006848:	080068cb 	.word	0x080068cb
 800684c:	08006939 	.word	0x08006939
 8006850:	08006939 	.word	0x08006939
 8006854:	08006939 	.word	0x08006939
 8006858:	080068db 	.word	0x080068db
 800685c:	08006939 	.word	0x08006939
 8006860:	08006939 	.word	0x08006939
 8006864:	08006939 	.word	0x08006939
 8006868:	08006939 	.word	0x08006939
 800686c:	08006939 	.word	0x08006939
 8006870:	08006939 	.word	0x08006939
 8006874:	08006939 	.word	0x08006939
 8006878:	080068eb 	.word	0x080068eb
 800687c:	08006939 	.word	0x08006939
 8006880:	08006939 	.word	0x08006939
 8006884:	08006939 	.word	0x08006939
 8006888:	08006939 	.word	0x08006939
 800688c:	08006939 	.word	0x08006939
 8006890:	08006939 	.word	0x08006939
 8006894:	08006939 	.word	0x08006939
 8006898:	08006939 	.word	0x08006939
 800689c:	08006939 	.word	0x08006939
 80068a0:	08006939 	.word	0x08006939
 80068a4:	08006939 	.word	0x08006939
 80068a8:	08006939 	.word	0x08006939
 80068ac:	08006939 	.word	0x08006939
 80068b0:	08006939 	.word	0x08006939
 80068b4:	08006939 	.word	0x08006939
 80068b8:	0800692b 	.word	0x0800692b
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d037      	beq.n	8006930 <UART_SetConfig+0x6bc>
 80068c0:	e03a      	b.n	8006938 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068c2:	f7fe f829 	bl	8004918 <HAL_RCCEx_GetD3PCLK1Freq>
 80068c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068c8:	e03c      	b.n	8006944 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe f838 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d8:	e034      	b.n	8006944 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068da:	f107 0318 	add.w	r3, r7, #24
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe f984 	bl	8004bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e8:	e02c      	b.n	8006944 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <UART_SetConfig+0x69c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <UART_SetConfig+0x69c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	08db      	lsrs	r3, r3, #3
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	4a07      	ldr	r2, [pc, #28]	; (8006920 <UART_SetConfig+0x6ac>)
 8006902:	fa22 f303 	lsr.w	r3, r2, r3
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006908:	e01c      	b.n	8006944 <UART_SetConfig+0x6d0>
 800690a:	bf00      	nop
 800690c:	40011400 	.word	0x40011400
 8006910:	58024400 	.word	0x58024400
 8006914:	40007800 	.word	0x40007800
 8006918:	40007c00 	.word	0x40007c00
 800691c:	58000c00 	.word	0x58000c00
 8006920:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006924:	4b9d      	ldr	r3, [pc, #628]	; (8006b9c <UART_SetConfig+0x928>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006928:	e00c      	b.n	8006944 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800692a:	4b9d      	ldr	r3, [pc, #628]	; (8006ba0 <UART_SetConfig+0x92c>)
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800692e:	e009      	b.n	8006944 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006936:	e005      	b.n	8006944 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006942:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 81de 	beq.w	8006d08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	4a94      	ldr	r2, [pc, #592]	; (8006ba4 <UART_SetConfig+0x930>)
 8006952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006956:	461a      	mov	r2, r3
 8006958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695a:	fbb3 f3f2 	udiv	r3, r3, r2
 800695e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4413      	add	r3, r2
 800696a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696c:	429a      	cmp	r2, r3
 800696e:	d305      	bcc.n	800697c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006978:	429a      	cmp	r2, r3
 800697a:	d903      	bls.n	8006984 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006982:	e1c1      	b.n	8006d08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006986:	2200      	movs	r2, #0
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	60fa      	str	r2, [r7, #12]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	4a84      	ldr	r2, [pc, #528]	; (8006ba4 <UART_SetConfig+0x930>)
 8006992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006996:	b29b      	uxth	r3, r3
 8006998:	2200      	movs	r2, #0
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069a6:	f7f9 fcf3 	bl	8000390 <__aeabi_uldivmod>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4610      	mov	r0, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	020b      	lsls	r3, r1, #8
 80069bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069c0:	0202      	lsls	r2, r0, #8
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	6849      	ldr	r1, [r1, #4]
 80069c6:	0849      	lsrs	r1, r1, #1
 80069c8:	2000      	movs	r0, #0
 80069ca:	460c      	mov	r4, r1
 80069cc:	4605      	mov	r5, r0
 80069ce:	eb12 0804 	adds.w	r8, r2, r4
 80069d2:	eb43 0905 	adc.w	r9, r3, r5
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	469a      	mov	sl, r3
 80069de:	4693      	mov	fp, r2
 80069e0:	4652      	mov	r2, sl
 80069e2:	465b      	mov	r3, fp
 80069e4:	4640      	mov	r0, r8
 80069e6:	4649      	mov	r1, r9
 80069e8:	f7f9 fcd2 	bl	8000390 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4613      	mov	r3, r2
 80069f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fa:	d308      	bcc.n	8006a0e <UART_SetConfig+0x79a>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a02:	d204      	bcs.n	8006a0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a0a:	60da      	str	r2, [r3, #12]
 8006a0c:	e17c      	b.n	8006d08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a14:	e178      	b.n	8006d08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	f040 80c5 	bne.w	8006bac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	dc48      	bgt.n	8006abc <UART_SetConfig+0x848>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	db7b      	blt.n	8006b26 <UART_SetConfig+0x8b2>
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d879      	bhi.n	8006b26 <UART_SetConfig+0x8b2>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0x7c4>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006acb 	.word	0x08006acb
 8006a40:	08006b27 	.word	0x08006b27
 8006a44:	08006b27 	.word	0x08006b27
 8006a48:	08006ad3 	.word	0x08006ad3
 8006a4c:	08006b27 	.word	0x08006b27
 8006a50:	08006b27 	.word	0x08006b27
 8006a54:	08006b27 	.word	0x08006b27
 8006a58:	08006ae3 	.word	0x08006ae3
 8006a5c:	08006b27 	.word	0x08006b27
 8006a60:	08006b27 	.word	0x08006b27
 8006a64:	08006b27 	.word	0x08006b27
 8006a68:	08006b27 	.word	0x08006b27
 8006a6c:	08006b27 	.word	0x08006b27
 8006a70:	08006b27 	.word	0x08006b27
 8006a74:	08006b27 	.word	0x08006b27
 8006a78:	08006af3 	.word	0x08006af3
 8006a7c:	08006b27 	.word	0x08006b27
 8006a80:	08006b27 	.word	0x08006b27
 8006a84:	08006b27 	.word	0x08006b27
 8006a88:	08006b27 	.word	0x08006b27
 8006a8c:	08006b27 	.word	0x08006b27
 8006a90:	08006b27 	.word	0x08006b27
 8006a94:	08006b27 	.word	0x08006b27
 8006a98:	08006b27 	.word	0x08006b27
 8006a9c:	08006b27 	.word	0x08006b27
 8006aa0:	08006b27 	.word	0x08006b27
 8006aa4:	08006b27 	.word	0x08006b27
 8006aa8:	08006b27 	.word	0x08006b27
 8006aac:	08006b27 	.word	0x08006b27
 8006ab0:	08006b27 	.word	0x08006b27
 8006ab4:	08006b27 	.word	0x08006b27
 8006ab8:	08006b19 	.word	0x08006b19
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d02e      	beq.n	8006b1e <UART_SetConfig+0x8aa>
 8006ac0:	e031      	b.n	8006b26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac2:	f7fc ffb7 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ac8:	e033      	b.n	8006b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aca:	f7fc ffc9 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8006ace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ad0:	e02f      	b.n	8006b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fd ff34 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae0:	e027      	b.n	8006b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae2:	f107 0318 	add.w	r3, r7, #24
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe f880 	bl	8004bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af0:	e01f      	b.n	8006b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af2:	4b2d      	ldr	r3, [pc, #180]	; (8006ba8 <UART_SetConfig+0x934>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006afe:	4b2a      	ldr	r3, [pc, #168]	; (8006ba8 <UART_SetConfig+0x934>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	4a24      	ldr	r2, [pc, #144]	; (8006b9c <UART_SetConfig+0x928>)
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b10:	e00f      	b.n	8006b32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b12:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <UART_SetConfig+0x928>)
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b16:	e00c      	b.n	8006b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b18:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <UART_SetConfig+0x92c>)
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b1c:	e009      	b.n	8006b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b24:	e005      	b.n	8006b32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80e7 	beq.w	8006d08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <UART_SetConfig+0x930>)
 8006b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b4c:	005a      	lsls	r2, r3, #1
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	441a      	add	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	2b0f      	cmp	r3, #15
 8006b64:	d916      	bls.n	8006b94 <UART_SetConfig+0x920>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6c:	d212      	bcs.n	8006b94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f023 030f 	bic.w	r3, r3, #15
 8006b76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b86:	4313      	orrs	r3, r2
 8006b88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b90:	60da      	str	r2, [r3, #12]
 8006b92:	e0b9      	b.n	8006d08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b9a:	e0b5      	b.n	8006d08 <UART_SetConfig+0xa94>
 8006b9c:	03d09000 	.word	0x03d09000
 8006ba0:	003d0900 	.word	0x003d0900
 8006ba4:	0800a514 	.word	0x0800a514
 8006ba8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	dc49      	bgt.n	8006c48 <UART_SetConfig+0x9d4>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	db7c      	blt.n	8006cb2 <UART_SetConfig+0xa3e>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d87a      	bhi.n	8006cb2 <UART_SetConfig+0xa3e>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0x950>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c4f 	.word	0x08006c4f
 8006bc8:	08006c57 	.word	0x08006c57
 8006bcc:	08006cb3 	.word	0x08006cb3
 8006bd0:	08006cb3 	.word	0x08006cb3
 8006bd4:	08006c5f 	.word	0x08006c5f
 8006bd8:	08006cb3 	.word	0x08006cb3
 8006bdc:	08006cb3 	.word	0x08006cb3
 8006be0:	08006cb3 	.word	0x08006cb3
 8006be4:	08006c6f 	.word	0x08006c6f
 8006be8:	08006cb3 	.word	0x08006cb3
 8006bec:	08006cb3 	.word	0x08006cb3
 8006bf0:	08006cb3 	.word	0x08006cb3
 8006bf4:	08006cb3 	.word	0x08006cb3
 8006bf8:	08006cb3 	.word	0x08006cb3
 8006bfc:	08006cb3 	.word	0x08006cb3
 8006c00:	08006cb3 	.word	0x08006cb3
 8006c04:	08006c7f 	.word	0x08006c7f
 8006c08:	08006cb3 	.word	0x08006cb3
 8006c0c:	08006cb3 	.word	0x08006cb3
 8006c10:	08006cb3 	.word	0x08006cb3
 8006c14:	08006cb3 	.word	0x08006cb3
 8006c18:	08006cb3 	.word	0x08006cb3
 8006c1c:	08006cb3 	.word	0x08006cb3
 8006c20:	08006cb3 	.word	0x08006cb3
 8006c24:	08006cb3 	.word	0x08006cb3
 8006c28:	08006cb3 	.word	0x08006cb3
 8006c2c:	08006cb3 	.word	0x08006cb3
 8006c30:	08006cb3 	.word	0x08006cb3
 8006c34:	08006cb3 	.word	0x08006cb3
 8006c38:	08006cb3 	.word	0x08006cb3
 8006c3c:	08006cb3 	.word	0x08006cb3
 8006c40:	08006cb3 	.word	0x08006cb3
 8006c44:	08006ca5 	.word	0x08006ca5
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	d02e      	beq.n	8006caa <UART_SetConfig+0xa36>
 8006c4c:	e031      	b.n	8006cb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4e:	f7fc fef1 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006c52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c54:	e033      	b.n	8006cbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c56:	f7fc ff03 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8006c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c5c:	e02f      	b.n	8006cbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd fe6e 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c6c:	e027      	b.n	8006cbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c6e:	f107 0318 	add.w	r3, r7, #24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd ffba 	bl	8004bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7c:	e01f      	b.n	8006cbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c7e:	4b2d      	ldr	r3, [pc, #180]	; (8006d34 <UART_SetConfig+0xac0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <UART_SetConfig+0xac0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	08db      	lsrs	r3, r3, #3
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <UART_SetConfig+0xac4>)
 8006c96:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c9c:	e00f      	b.n	8006cbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c9e:	4b26      	ldr	r3, [pc, #152]	; (8006d38 <UART_SetConfig+0xac4>)
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca2:	e00c      	b.n	8006cbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <UART_SetConfig+0xac8>)
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca8:	e009      	b.n	8006cbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb0:	e005      	b.n	8006cbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d021      	beq.n	8006d08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <UART_SetConfig+0xacc>)
 8006cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d909      	bls.n	8006d02 <UART_SetConfig+0xa8e>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf4:	d205      	bcs.n	8006d02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	e002      	b.n	8006d08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3748      	adds	r7, #72	; 0x48
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d32:	bf00      	nop
 8006d34:	58024400 	.word	0x58024400
 8006d38:	03d09000 	.word	0x03d09000
 8006d3c:	003d0900 	.word	0x003d0900
 8006d40:	0800a514 	.word	0x0800a514

08006d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e42:	d10a      	bne.n	8006e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e98:	f7fb facc 	bl	8002434 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d10e      	bne.n	8006eca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f82f 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e025      	b.n	8006f16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d10e      	bne.n	8006ef6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f819 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e00f      	b.n	8006f16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b09c      	sub	sp, #112	; 0x70
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2e:	e0a9      	b.n	8007084 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	f000 80a5 	beq.w	8007084 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fb fa7b 	bl	8002434 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d140      	bne.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f64:	667b      	str	r3, [r7, #100]	; 0x64
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e5      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e069      	b.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d051      	beq.n	8007084 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fee:	d149      	bne.n	8007084 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
 800701a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e6      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	613b      	str	r3, [r7, #16]
   return(result);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	66bb      	str	r3, [r7, #104]	; 0x68
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800704c:	623a      	str	r2, [r7, #32]
 800704e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	69f9      	ldr	r1, [r7, #28]
 8007052:	6a3a      	ldr	r2, [r7, #32]
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	61bb      	str	r3, [r7, #24]
   return(result);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e5      	bne.n	800702c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e010      	b.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4013      	ands	r3, r2
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	429a      	cmp	r2, r3
 8007092:	bf0c      	ite	eq
 8007094:	2301      	moveq	r3, #1
 8007096:	2300      	movne	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	429a      	cmp	r2, r3
 80070a0:	f43f af46 	beq.w	8006f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3770      	adds	r7, #112	; 0x70
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e027      	b.n	8007114 <HAL_UARTEx_DisableFifoMode+0x66>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2224      	movs	r2, #36	; 0x24
 80070d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007134:	2302      	movs	r3, #2
 8007136:	e02d      	b.n	8007194 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2224      	movs	r2, #36	; 0x24
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f84f 	bl	8007218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e02d      	b.n	8007210 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2224      	movs	r2, #36	; 0x24
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f811 	bl	8007218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007224:	2b00      	cmp	r3, #0
 8007226:	d108      	bne.n	800723a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007238:	e031      	b.n	800729e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800723a:	2310      	movs	r3, #16
 800723c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800723e:	2310      	movs	r3, #16
 8007240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	0e5b      	lsrs	r3, r3, #25
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	0f5b      	lsrs	r3, r3, #29
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	7b3a      	ldrb	r2, [r7, #12]
 8007266:	4911      	ldr	r1, [pc, #68]	; (80072ac <UARTEx_SetNbDataToProcess+0x94>)
 8007268:	5c8a      	ldrb	r2, [r1, r2]
 800726a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800726e:	7b3a      	ldrb	r2, [r7, #12]
 8007270:	490f      	ldr	r1, [pc, #60]	; (80072b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007274:	fb93 f3f2 	sdiv	r3, r3, r2
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	7b7a      	ldrb	r2, [r7, #13]
 8007284:	4909      	ldr	r1, [pc, #36]	; (80072ac <UARTEx_SetNbDataToProcess+0x94>)
 8007286:	5c8a      	ldrb	r2, [r1, r2]
 8007288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800728c:	7b7a      	ldrb	r2, [r7, #13]
 800728e:	4908      	ldr	r1, [pc, #32]	; (80072b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007292:	fb93 f3f2 	sdiv	r3, r3, r2
 8007296:	b29a      	uxth	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	0800a52c 	.word	0x0800a52c
 80072b0:	0800a534 	.word	0x0800a534

080072b4 <__errno>:
 80072b4:	4b01      	ldr	r3, [pc, #4]	; (80072bc <__errno+0x8>)
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	24000018 	.word	0x24000018

080072c0 <__libc_init_array>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4d0d      	ldr	r5, [pc, #52]	; (80072f8 <__libc_init_array+0x38>)
 80072c4:	4c0d      	ldr	r4, [pc, #52]	; (80072fc <__libc_init_array+0x3c>)
 80072c6:	1b64      	subs	r4, r4, r5
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	2600      	movs	r6, #0
 80072cc:	42a6      	cmp	r6, r4
 80072ce:	d109      	bne.n	80072e4 <__libc_init_array+0x24>
 80072d0:	4d0b      	ldr	r5, [pc, #44]	; (8007300 <__libc_init_array+0x40>)
 80072d2:	4c0c      	ldr	r4, [pc, #48]	; (8007304 <__libc_init_array+0x44>)
 80072d4:	f002 fe5e 	bl	8009f94 <_init>
 80072d8:	1b64      	subs	r4, r4, r5
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	2600      	movs	r6, #0
 80072de:	42a6      	cmp	r6, r4
 80072e0:	d105      	bne.n	80072ee <__libc_init_array+0x2e>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e8:	4798      	blx	r3
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7ee      	b.n	80072cc <__libc_init_array+0xc>
 80072ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f2:	4798      	blx	r3
 80072f4:	3601      	adds	r6, #1
 80072f6:	e7f2      	b.n	80072de <__libc_init_array+0x1e>
 80072f8:	0800a91c 	.word	0x0800a91c
 80072fc:	0800a91c 	.word	0x0800a91c
 8007300:	0800a91c 	.word	0x0800a91c
 8007304:	0800a920 	.word	0x0800a920

08007308 <memcpy>:
 8007308:	440a      	add	r2, r1
 800730a:	4291      	cmp	r1, r2
 800730c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007310:	d100      	bne.n	8007314 <memcpy+0xc>
 8007312:	4770      	bx	lr
 8007314:	b510      	push	{r4, lr}
 8007316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800731e:	4291      	cmp	r1, r2
 8007320:	d1f9      	bne.n	8007316 <memcpy+0xe>
 8007322:	bd10      	pop	{r4, pc}

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <__cvt>:
 8007334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007336:	ed2d 8b02 	vpush	{d8}
 800733a:	eeb0 8b40 	vmov.f64	d8, d0
 800733e:	b085      	sub	sp, #20
 8007340:	4617      	mov	r7, r2
 8007342:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007344:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007346:	ee18 2a90 	vmov	r2, s17
 800734a:	f025 0520 	bic.w	r5, r5, #32
 800734e:	2a00      	cmp	r2, #0
 8007350:	bfb6      	itet	lt
 8007352:	222d      	movlt	r2, #45	; 0x2d
 8007354:	2200      	movge	r2, #0
 8007356:	eeb1 8b40 	vneglt.f64	d8, d0
 800735a:	2d46      	cmp	r5, #70	; 0x46
 800735c:	460c      	mov	r4, r1
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	d004      	beq.n	800736c <__cvt+0x38>
 8007362:	2d45      	cmp	r5, #69	; 0x45
 8007364:	d100      	bne.n	8007368 <__cvt+0x34>
 8007366:	3401      	adds	r4, #1
 8007368:	2102      	movs	r1, #2
 800736a:	e000      	b.n	800736e <__cvt+0x3a>
 800736c:	2103      	movs	r1, #3
 800736e:	ab03      	add	r3, sp, #12
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	ab02      	add	r3, sp, #8
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	4622      	mov	r2, r4
 8007378:	4633      	mov	r3, r6
 800737a:	eeb0 0b48 	vmov.f64	d0, d8
 800737e:	f000 fccb 	bl	8007d18 <_dtoa_r>
 8007382:	2d47      	cmp	r5, #71	; 0x47
 8007384:	d101      	bne.n	800738a <__cvt+0x56>
 8007386:	07fb      	lsls	r3, r7, #31
 8007388:	d51a      	bpl.n	80073c0 <__cvt+0x8c>
 800738a:	2d46      	cmp	r5, #70	; 0x46
 800738c:	eb00 0204 	add.w	r2, r0, r4
 8007390:	d10c      	bne.n	80073ac <__cvt+0x78>
 8007392:	7803      	ldrb	r3, [r0, #0]
 8007394:	2b30      	cmp	r3, #48	; 0x30
 8007396:	d107      	bne.n	80073a8 <__cvt+0x74>
 8007398:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	bf1c      	itt	ne
 80073a2:	f1c4 0401 	rsbne	r4, r4, #1
 80073a6:	6034      	strne	r4, [r6, #0]
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	441a      	add	r2, r3
 80073ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b4:	bf08      	it	eq
 80073b6:	9203      	streq	r2, [sp, #12]
 80073b8:	2130      	movs	r1, #48	; 0x30
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	4293      	cmp	r3, r2
 80073be:	d307      	bcc.n	80073d0 <__cvt+0x9c>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c4:	1a1b      	subs	r3, r3, r0
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	b005      	add	sp, #20
 80073ca:	ecbd 8b02 	vpop	{d8}
 80073ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d0:	1c5c      	adds	r4, r3, #1
 80073d2:	9403      	str	r4, [sp, #12]
 80073d4:	7019      	strb	r1, [r3, #0]
 80073d6:	e7f0      	b.n	80073ba <__cvt+0x86>

080073d8 <__exponent>:
 80073d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073da:	4603      	mov	r3, r0
 80073dc:	2900      	cmp	r1, #0
 80073de:	bfb8      	it	lt
 80073e0:	4249      	neglt	r1, r1
 80073e2:	f803 2b02 	strb.w	r2, [r3], #2
 80073e6:	bfb4      	ite	lt
 80073e8:	222d      	movlt	r2, #45	; 0x2d
 80073ea:	222b      	movge	r2, #43	; 0x2b
 80073ec:	2909      	cmp	r1, #9
 80073ee:	7042      	strb	r2, [r0, #1]
 80073f0:	dd2a      	ble.n	8007448 <__exponent+0x70>
 80073f2:	f10d 0407 	add.w	r4, sp, #7
 80073f6:	46a4      	mov	ip, r4
 80073f8:	270a      	movs	r7, #10
 80073fa:	46a6      	mov	lr, r4
 80073fc:	460a      	mov	r2, r1
 80073fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007402:	fb07 1516 	mls	r5, r7, r6, r1
 8007406:	3530      	adds	r5, #48	; 0x30
 8007408:	2a63      	cmp	r2, #99	; 0x63
 800740a:	f104 34ff 	add.w	r4, r4, #4294967295
 800740e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007412:	4631      	mov	r1, r6
 8007414:	dcf1      	bgt.n	80073fa <__exponent+0x22>
 8007416:	3130      	adds	r1, #48	; 0x30
 8007418:	f1ae 0502 	sub.w	r5, lr, #2
 800741c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007420:	1c44      	adds	r4, r0, #1
 8007422:	4629      	mov	r1, r5
 8007424:	4561      	cmp	r1, ip
 8007426:	d30a      	bcc.n	800743e <__exponent+0x66>
 8007428:	f10d 0209 	add.w	r2, sp, #9
 800742c:	eba2 020e 	sub.w	r2, r2, lr
 8007430:	4565      	cmp	r5, ip
 8007432:	bf88      	it	hi
 8007434:	2200      	movhi	r2, #0
 8007436:	4413      	add	r3, r2
 8007438:	1a18      	subs	r0, r3, r0
 800743a:	b003      	add	sp, #12
 800743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007446:	e7ed      	b.n	8007424 <__exponent+0x4c>
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	3130      	adds	r1, #48	; 0x30
 800744c:	7083      	strb	r3, [r0, #2]
 800744e:	70c1      	strb	r1, [r0, #3]
 8007450:	1d03      	adds	r3, r0, #4
 8007452:	e7f1      	b.n	8007438 <__exponent+0x60>
 8007454:	0000      	movs	r0, r0
	...

08007458 <_printf_float>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b08b      	sub	sp, #44	; 0x2c
 800745e:	460c      	mov	r4, r1
 8007460:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007464:	4616      	mov	r6, r2
 8007466:	461f      	mov	r7, r3
 8007468:	4605      	mov	r5, r0
 800746a:	f001 f9c3 	bl	80087f4 <_localeconv_r>
 800746e:	f8d0 b000 	ldr.w	fp, [r0]
 8007472:	4658      	mov	r0, fp
 8007474:	f7f8 ff34 	bl	80002e0 <strlen>
 8007478:	2300      	movs	r3, #0
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	f8d8 3000 	ldr.w	r3, [r8]
 8007480:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007484:	6822      	ldr	r2, [r4, #0]
 8007486:	3307      	adds	r3, #7
 8007488:	f023 0307 	bic.w	r3, r3, #7
 800748c:	f103 0108 	add.w	r1, r3, #8
 8007490:	f8c8 1000 	str.w	r1, [r8]
 8007494:	4682      	mov	sl, r0
 8007496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800749a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800749e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007700 <_printf_float+0x2a8>
 80074a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80074a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80074aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	dd24      	ble.n	80074fe <_printf_float+0xa6>
 80074b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	d502      	bpl.n	80074c4 <_printf_float+0x6c>
 80074be:	232d      	movs	r3, #45	; 0x2d
 80074c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c4:	4b90      	ldr	r3, [pc, #576]	; (8007708 <_printf_float+0x2b0>)
 80074c6:	4891      	ldr	r0, [pc, #580]	; (800770c <_printf_float+0x2b4>)
 80074c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074cc:	bf94      	ite	ls
 80074ce:	4698      	movls	r8, r3
 80074d0:	4680      	movhi	r8, r0
 80074d2:	2303      	movs	r3, #3
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	f022 0204 	bic.w	r2, r2, #4
 80074da:	2300      	movs	r3, #0
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	9700      	str	r7, [sp, #0]
 80074e2:	4633      	mov	r3, r6
 80074e4:	aa09      	add	r2, sp, #36	; 0x24
 80074e6:	4621      	mov	r1, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 f9d3 	bl	8007894 <_printf_common>
 80074ee:	3001      	adds	r0, #1
 80074f0:	f040 808a 	bne.w	8007608 <_printf_float+0x1b0>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	b00b      	add	sp, #44	; 0x2c
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8007502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007506:	d709      	bvc.n	800751c <_printf_float+0xc4>
 8007508:	ee10 3a90 	vmov	r3, s1
 800750c:	2b00      	cmp	r3, #0
 800750e:	bfbc      	itt	lt
 8007510:	232d      	movlt	r3, #45	; 0x2d
 8007512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007516:	487e      	ldr	r0, [pc, #504]	; (8007710 <_printf_float+0x2b8>)
 8007518:	4b7e      	ldr	r3, [pc, #504]	; (8007714 <_printf_float+0x2bc>)
 800751a:	e7d5      	b.n	80074c8 <_printf_float+0x70>
 800751c:	6863      	ldr	r3, [r4, #4]
 800751e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007522:	9104      	str	r1, [sp, #16]
 8007524:	1c59      	adds	r1, r3, #1
 8007526:	d13c      	bne.n	80075a2 <_printf_float+0x14a>
 8007528:	2306      	movs	r3, #6
 800752a:	6063      	str	r3, [r4, #4]
 800752c:	2300      	movs	r3, #0
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	ab08      	add	r3, sp, #32
 8007532:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800753a:	ab07      	add	r3, sp, #28
 800753c:	6861      	ldr	r1, [r4, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	f10d 031b 	add.w	r3, sp, #27
 8007546:	4628      	mov	r0, r5
 8007548:	f7ff fef4 	bl	8007334 <__cvt>
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	9907      	ldr	r1, [sp, #28]
 8007550:	2b47      	cmp	r3, #71	; 0x47
 8007552:	4680      	mov	r8, r0
 8007554:	d108      	bne.n	8007568 <_printf_float+0x110>
 8007556:	1cc8      	adds	r0, r1, #3
 8007558:	db02      	blt.n	8007560 <_printf_float+0x108>
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	4299      	cmp	r1, r3
 800755e:	dd41      	ble.n	80075e4 <_printf_float+0x18c>
 8007560:	f1a9 0902 	sub.w	r9, r9, #2
 8007564:	fa5f f989 	uxtb.w	r9, r9
 8007568:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800756c:	d820      	bhi.n	80075b0 <_printf_float+0x158>
 800756e:	3901      	subs	r1, #1
 8007570:	464a      	mov	r2, r9
 8007572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007576:	9107      	str	r1, [sp, #28]
 8007578:	f7ff ff2e 	bl	80073d8 <__exponent>
 800757c:	9a08      	ldr	r2, [sp, #32]
 800757e:	9004      	str	r0, [sp, #16]
 8007580:	1813      	adds	r3, r2, r0
 8007582:	2a01      	cmp	r2, #1
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	dc02      	bgt.n	800758e <_printf_float+0x136>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	07d2      	lsls	r2, r2, #31
 800758c:	d501      	bpl.n	8007592 <_printf_float+0x13a>
 800758e:	3301      	adds	r3, #1
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0a2      	beq.n	80074e0 <_printf_float+0x88>
 800759a:	232d      	movs	r3, #45	; 0x2d
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a0:	e79e      	b.n	80074e0 <_printf_float+0x88>
 80075a2:	9904      	ldr	r1, [sp, #16]
 80075a4:	2947      	cmp	r1, #71	; 0x47
 80075a6:	d1c1      	bne.n	800752c <_printf_float+0xd4>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1bf      	bne.n	800752c <_printf_float+0xd4>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e7bc      	b.n	800752a <_printf_float+0xd2>
 80075b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075b4:	d118      	bne.n	80075e8 <_printf_float+0x190>
 80075b6:	2900      	cmp	r1, #0
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	dd0b      	ble.n	80075d4 <_printf_float+0x17c>
 80075bc:	6121      	str	r1, [r4, #16]
 80075be:	b913      	cbnz	r3, 80075c6 <_printf_float+0x16e>
 80075c0:	6822      	ldr	r2, [r4, #0]
 80075c2:	07d0      	lsls	r0, r2, #31
 80075c4:	d502      	bpl.n	80075cc <_printf_float+0x174>
 80075c6:	3301      	adds	r3, #1
 80075c8:	440b      	add	r3, r1
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2300      	movs	r3, #0
 80075ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	e7de      	b.n	8007592 <_printf_float+0x13a>
 80075d4:	b913      	cbnz	r3, 80075dc <_printf_float+0x184>
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	07d2      	lsls	r2, r2, #31
 80075da:	d501      	bpl.n	80075e0 <_printf_float+0x188>
 80075dc:	3302      	adds	r3, #2
 80075de:	e7f4      	b.n	80075ca <_printf_float+0x172>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e7f2      	b.n	80075ca <_printf_float+0x172>
 80075e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80075e8:	9b08      	ldr	r3, [sp, #32]
 80075ea:	4299      	cmp	r1, r3
 80075ec:	db05      	blt.n	80075fa <_printf_float+0x1a2>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	6121      	str	r1, [r4, #16]
 80075f2:	07d8      	lsls	r0, r3, #31
 80075f4:	d5ea      	bpl.n	80075cc <_printf_float+0x174>
 80075f6:	1c4b      	adds	r3, r1, #1
 80075f8:	e7e7      	b.n	80075ca <_printf_float+0x172>
 80075fa:	2900      	cmp	r1, #0
 80075fc:	bfd4      	ite	le
 80075fe:	f1c1 0202 	rsble	r2, r1, #2
 8007602:	2201      	movgt	r2, #1
 8007604:	4413      	add	r3, r2
 8007606:	e7e0      	b.n	80075ca <_printf_float+0x172>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	055a      	lsls	r2, r3, #21
 800760c:	d407      	bmi.n	800761e <_printf_float+0x1c6>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	4642      	mov	r2, r8
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	47b8      	blx	r7
 8007618:	3001      	adds	r0, #1
 800761a:	d12a      	bne.n	8007672 <_printf_float+0x21a>
 800761c:	e76a      	b.n	80074f4 <_printf_float+0x9c>
 800761e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007622:	f240 80e2 	bls.w	80077ea <_printf_float+0x392>
 8007626:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800762a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800762e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007632:	d133      	bne.n	800769c <_printf_float+0x244>
 8007634:	4a38      	ldr	r2, [pc, #224]	; (8007718 <_printf_float+0x2c0>)
 8007636:	2301      	movs	r3, #1
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af58 	beq.w	80074f4 <_printf_float+0x9c>
 8007644:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007648:	429a      	cmp	r2, r3
 800764a:	db02      	blt.n	8007652 <_printf_float+0x1fa>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07d8      	lsls	r0, r3, #31
 8007650:	d50f      	bpl.n	8007672 <_printf_float+0x21a>
 8007652:	4653      	mov	r3, sl
 8007654:	465a      	mov	r2, fp
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f af49 	beq.w	80074f4 <_printf_float+0x9c>
 8007662:	f04f 0800 	mov.w	r8, #0
 8007666:	f104 091a 	add.w	r9, r4, #26
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	3b01      	subs	r3, #1
 800766e:	4543      	cmp	r3, r8
 8007670:	dc09      	bgt.n	8007686 <_printf_float+0x22e>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	079b      	lsls	r3, r3, #30
 8007676:	f100 8108 	bmi.w	800788a <_printf_float+0x432>
 800767a:	68e0      	ldr	r0, [r4, #12]
 800767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767e:	4298      	cmp	r0, r3
 8007680:	bfb8      	it	lt
 8007682:	4618      	movlt	r0, r3
 8007684:	e738      	b.n	80074f8 <_printf_float+0xa0>
 8007686:	2301      	movs	r3, #1
 8007688:	464a      	mov	r2, r9
 800768a:	4631      	mov	r1, r6
 800768c:	4628      	mov	r0, r5
 800768e:	47b8      	blx	r7
 8007690:	3001      	adds	r0, #1
 8007692:	f43f af2f 	beq.w	80074f4 <_printf_float+0x9c>
 8007696:	f108 0801 	add.w	r8, r8, #1
 800769a:	e7e6      	b.n	800766a <_printf_float+0x212>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	dc3c      	bgt.n	800771c <_printf_float+0x2c4>
 80076a2:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <_printf_float+0x2c0>)
 80076a4:	2301      	movs	r3, #1
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f af21 	beq.w	80074f4 <_printf_float+0x9c>
 80076b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	d102      	bne.n	80076c0 <_printf_float+0x268>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	07d9      	lsls	r1, r3, #31
 80076be:	d5d8      	bpl.n	8007672 <_printf_float+0x21a>
 80076c0:	4653      	mov	r3, sl
 80076c2:	465a      	mov	r2, fp
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f af12 	beq.w	80074f4 <_printf_float+0x9c>
 80076d0:	f04f 0900 	mov.w	r9, #0
 80076d4:	f104 0a1a 	add.w	sl, r4, #26
 80076d8:	9b07      	ldr	r3, [sp, #28]
 80076da:	425b      	negs	r3, r3
 80076dc:	454b      	cmp	r3, r9
 80076de:	dc01      	bgt.n	80076e4 <_printf_float+0x28c>
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	e795      	b.n	8007610 <_printf_float+0x1b8>
 80076e4:	2301      	movs	r3, #1
 80076e6:	4652      	mov	r2, sl
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	f43f af00 	beq.w	80074f4 <_printf_float+0x9c>
 80076f4:	f109 0901 	add.w	r9, r9, #1
 80076f8:	e7ee      	b.n	80076d8 <_printf_float+0x280>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	ffffffff 	.word	0xffffffff
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	0800a540 	.word	0x0800a540
 800770c:	0800a544 	.word	0x0800a544
 8007710:	0800a54c 	.word	0x0800a54c
 8007714:	0800a548 	.word	0x0800a548
 8007718:	0800a550 	.word	0x0800a550
 800771c:	9a08      	ldr	r2, [sp, #32]
 800771e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007720:	429a      	cmp	r2, r3
 8007722:	bfa8      	it	ge
 8007724:	461a      	movge	r2, r3
 8007726:	2a00      	cmp	r2, #0
 8007728:	4691      	mov	r9, r2
 800772a:	dc38      	bgt.n	800779e <_printf_float+0x346>
 800772c:	2300      	movs	r3, #0
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007734:	f104 021a 	add.w	r2, r4, #26
 8007738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800773a:	9905      	ldr	r1, [sp, #20]
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	eba3 0309 	sub.w	r3, r3, r9
 8007742:	428b      	cmp	r3, r1
 8007744:	dc33      	bgt.n	80077ae <_printf_float+0x356>
 8007746:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800774a:	429a      	cmp	r2, r3
 800774c:	db3c      	blt.n	80077c8 <_printf_float+0x370>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	07da      	lsls	r2, r3, #31
 8007752:	d439      	bmi.n	80077c8 <_printf_float+0x370>
 8007754:	9b08      	ldr	r3, [sp, #32]
 8007756:	9a04      	ldr	r2, [sp, #16]
 8007758:	9907      	ldr	r1, [sp, #28]
 800775a:	1a9a      	subs	r2, r3, r2
 800775c:	eba3 0901 	sub.w	r9, r3, r1
 8007760:	4591      	cmp	r9, r2
 8007762:	bfa8      	it	ge
 8007764:	4691      	movge	r9, r2
 8007766:	f1b9 0f00 	cmp.w	r9, #0
 800776a:	dc35      	bgt.n	80077d8 <_printf_float+0x380>
 800776c:	f04f 0800 	mov.w	r8, #0
 8007770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007774:	f104 0a1a 	add.w	sl, r4, #26
 8007778:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	eba3 0309 	sub.w	r3, r3, r9
 8007782:	4543      	cmp	r3, r8
 8007784:	f77f af75 	ble.w	8007672 <_printf_float+0x21a>
 8007788:	2301      	movs	r3, #1
 800778a:	4652      	mov	r2, sl
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f aeae 	beq.w	80074f4 <_printf_float+0x9c>
 8007798:	f108 0801 	add.w	r8, r8, #1
 800779c:	e7ec      	b.n	8007778 <_printf_float+0x320>
 800779e:	4613      	mov	r3, r2
 80077a0:	4631      	mov	r1, r6
 80077a2:	4642      	mov	r2, r8
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1bf      	bne.n	800772c <_printf_float+0x2d4>
 80077ac:	e6a2      	b.n	80074f4 <_printf_float+0x9c>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	9204      	str	r2, [sp, #16]
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f ae9b 	beq.w	80074f4 <_printf_float+0x9c>
 80077be:	9b05      	ldr	r3, [sp, #20]
 80077c0:	9a04      	ldr	r2, [sp, #16]
 80077c2:	3301      	adds	r3, #1
 80077c4:	9305      	str	r3, [sp, #20]
 80077c6:	e7b7      	b.n	8007738 <_printf_float+0x2e0>
 80077c8:	4653      	mov	r3, sl
 80077ca:	465a      	mov	r2, fp
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1be      	bne.n	8007754 <_printf_float+0x2fc>
 80077d6:	e68d      	b.n	80074f4 <_printf_float+0x9c>
 80077d8:	9a04      	ldr	r2, [sp, #16]
 80077da:	464b      	mov	r3, r9
 80077dc:	4442      	add	r2, r8
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	d1c1      	bne.n	800776c <_printf_float+0x314>
 80077e8:	e684      	b.n	80074f4 <_printf_float+0x9c>
 80077ea:	9a08      	ldr	r2, [sp, #32]
 80077ec:	2a01      	cmp	r2, #1
 80077ee:	dc01      	bgt.n	80077f4 <_printf_float+0x39c>
 80077f0:	07db      	lsls	r3, r3, #31
 80077f2:	d537      	bpl.n	8007864 <_printf_float+0x40c>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4642      	mov	r2, r8
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f ae78 	beq.w	80074f4 <_printf_float+0x9c>
 8007804:	4653      	mov	r3, sl
 8007806:	465a      	mov	r2, fp
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f ae70 	beq.w	80074f4 <_printf_float+0x9c>
 8007814:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	d01b      	beq.n	800785a <_printf_float+0x402>
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	f108 0201 	add.w	r2, r8, #1
 8007828:	3b01      	subs	r3, #1
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	d10e      	bne.n	8007852 <_printf_float+0x3fa>
 8007834:	e65e      	b.n	80074f4 <_printf_float+0x9c>
 8007836:	2301      	movs	r3, #1
 8007838:	464a      	mov	r2, r9
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae57 	beq.w	80074f4 <_printf_float+0x9c>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	3b01      	subs	r3, #1
 800784e:	4543      	cmp	r3, r8
 8007850:	dcf1      	bgt.n	8007836 <_printf_float+0x3de>
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007858:	e6db      	b.n	8007612 <_printf_float+0x1ba>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 091a 	add.w	r9, r4, #26
 8007862:	e7f2      	b.n	800784a <_printf_float+0x3f2>
 8007864:	2301      	movs	r3, #1
 8007866:	4642      	mov	r2, r8
 8007868:	e7df      	b.n	800782a <_printf_float+0x3d2>
 800786a:	2301      	movs	r3, #1
 800786c:	464a      	mov	r2, r9
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae3d 	beq.w	80074f4 <_printf_float+0x9c>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	4543      	cmp	r3, r8
 8007886:	dcf0      	bgt.n	800786a <_printf_float+0x412>
 8007888:	e6f7      	b.n	800767a <_printf_float+0x222>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f4      	b.n	800787e <_printf_float+0x426>

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4699      	mov	r9, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e0:	1e13      	subs	r3, r2, #0
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f0:	4649      	mov	r1, r9
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c0      	blx	r8
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	68e5      	ldr	r5, [r4, #12]
 80078fe:	6832      	ldr	r2, [r6, #0]
 8007900:	f003 0306 	and.w	r3, r3, #6
 8007904:	2b04      	cmp	r3, #4
 8007906:	bf08      	it	eq
 8007908:	1aad      	subeq	r5, r5, r2
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	6922      	ldr	r2, [r4, #16]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4649      	mov	r1, r9
 8007930:	4638      	mov	r0, r7
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	; 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4649      	mov	r1, r9
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	7e0f      	ldrb	r7, [r1, #24]
 8007976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007978:	2f78      	cmp	r7, #120	; 0x78
 800797a:	4691      	mov	r9, r2
 800797c:	4680      	mov	r8, r0
 800797e:	460c      	mov	r4, r1
 8007980:	469a      	mov	sl, r3
 8007982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	; 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d8 	beq.w	8007b42 <_printf_i+0x1d2>
 8007992:	2f58      	cmp	r7, #88	; 0x58
 8007994:	f000 80a3 	beq.w	8007ade <_printf_i+0x16e>
 8007998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a101      	add	r1, pc, #4	; (adr r1, 80079b0 <_printf_i+0x40>)
 80079ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b29 	.word	0x08007b29
 80079e0:	08007a4d 	.word	0x08007a4d
 80079e4:	08007b0b 	.word	0x08007b0b
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b4b 	.word	0x08007b4b
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007b13 	.word	0x08007b13
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	602a      	str	r2, [r5, #0]
 8007a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0a3      	b.n	8007b64 <_printf_i+0x1f4>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	6829      	ldr	r1, [r5, #0]
 8007a20:	0606      	lsls	r6, r0, #24
 8007a22:	f101 0304 	add.w	r3, r1, #4
 8007a26:	d50a      	bpl.n	8007a3e <_printf_i+0xce>
 8007a28:	680e      	ldr	r6, [r1, #0]
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	da03      	bge.n	8007a38 <_printf_i+0xc8>
 8007a30:	232d      	movs	r3, #45	; 0x2d
 8007a32:	4276      	negs	r6, r6
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a38:	485e      	ldr	r0, [pc, #376]	; (8007bb4 <_printf_i+0x244>)
 8007a3a:	230a      	movs	r3, #10
 8007a3c:	e019      	b.n	8007a72 <_printf_i+0x102>
 8007a3e:	680e      	ldr	r6, [r1, #0]
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a46:	bf18      	it	ne
 8007a48:	b236      	sxthne	r6, r6
 8007a4a:	e7ef      	b.n	8007a2c <_printf_i+0xbc>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	6820      	ldr	r0, [r4, #0]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	6029      	str	r1, [r5, #0]
 8007a54:	0601      	lsls	r1, r0, #24
 8007a56:	d501      	bpl.n	8007a5c <_printf_i+0xec>
 8007a58:	681e      	ldr	r6, [r3, #0]
 8007a5a:	e002      	b.n	8007a62 <_printf_i+0xf2>
 8007a5c:	0646      	lsls	r6, r0, #25
 8007a5e:	d5fb      	bpl.n	8007a58 <_printf_i+0xe8>
 8007a60:	881e      	ldrh	r6, [r3, #0]
 8007a62:	4854      	ldr	r0, [pc, #336]	; (8007bb4 <_printf_i+0x244>)
 8007a64:	2f6f      	cmp	r7, #111	; 0x6f
 8007a66:	bf0c      	ite	eq
 8007a68:	2308      	moveq	r3, #8
 8007a6a:	230a      	movne	r3, #10
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a72:	6865      	ldr	r5, [r4, #4]
 8007a74:	60a5      	str	r5, [r4, #8]
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	bfa2      	ittt	ge
 8007a7a:	6821      	ldrge	r1, [r4, #0]
 8007a7c:	f021 0104 	bicge.w	r1, r1, #4
 8007a80:	6021      	strge	r1, [r4, #0]
 8007a82:	b90e      	cbnz	r6, 8007a88 <_printf_i+0x118>
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	d04d      	beq.n	8007b24 <_printf_i+0x1b4>
 8007a88:	4615      	mov	r5, r2
 8007a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a92:	5dc7      	ldrb	r7, [r0, r7]
 8007a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a98:	4637      	mov	r7, r6
 8007a9a:	42bb      	cmp	r3, r7
 8007a9c:	460e      	mov	r6, r1
 8007a9e:	d9f4      	bls.n	8007a8a <_printf_i+0x11a>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d10b      	bne.n	8007abc <_printf_i+0x14c>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07de      	lsls	r6, r3, #31
 8007aa8:	d508      	bpl.n	8007abc <_printf_i+0x14c>
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	bfde      	ittt	le
 8007ab2:	2330      	movle	r3, #48	; 0x30
 8007ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007abc:	1b52      	subs	r2, r2, r5
 8007abe:	6122      	str	r2, [r4, #16]
 8007ac0:	f8cd a000 	str.w	sl, [sp]
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	aa03      	add	r2, sp, #12
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7ff fee2 	bl	8007894 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d14c      	bne.n	8007b6e <_printf_i+0x1fe>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	b004      	add	sp, #16
 8007ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ade:	4835      	ldr	r0, [pc, #212]	; (8007bb4 <_printf_i+0x244>)
 8007ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ae4:	6829      	ldr	r1, [r5, #0]
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007aec:	6029      	str	r1, [r5, #0]
 8007aee:	061d      	lsls	r5, r3, #24
 8007af0:	d514      	bpl.n	8007b1c <_printf_i+0x1ac>
 8007af2:	07df      	lsls	r7, r3, #31
 8007af4:	bf44      	itt	mi
 8007af6:	f043 0320 	orrmi.w	r3, r3, #32
 8007afa:	6023      	strmi	r3, [r4, #0]
 8007afc:	b91e      	cbnz	r6, 8007b06 <_printf_i+0x196>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f023 0320 	bic.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2310      	movs	r3, #16
 8007b08:	e7b0      	b.n	8007a6c <_printf_i+0xfc>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f043 0320 	orr.w	r3, r3, #32
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	2378      	movs	r3, #120	; 0x78
 8007b14:	4828      	ldr	r0, [pc, #160]	; (8007bb8 <_printf_i+0x248>)
 8007b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b1a:	e7e3      	b.n	8007ae4 <_printf_i+0x174>
 8007b1c:	0659      	lsls	r1, r3, #25
 8007b1e:	bf48      	it	mi
 8007b20:	b2b6      	uxthmi	r6, r6
 8007b22:	e7e6      	b.n	8007af2 <_printf_i+0x182>
 8007b24:	4615      	mov	r5, r2
 8007b26:	e7bb      	b.n	8007aa0 <_printf_i+0x130>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	6826      	ldr	r6, [r4, #0]
 8007b2c:	6961      	ldr	r1, [r4, #20]
 8007b2e:	1d18      	adds	r0, r3, #4
 8007b30:	6028      	str	r0, [r5, #0]
 8007b32:	0635      	lsls	r5, r6, #24
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0x1cc>
 8007b38:	6019      	str	r1, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0x1d2>
 8007b3c:	0670      	lsls	r0, r6, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0x1c8>
 8007b40:	8019      	strh	r1, [r3, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	4615      	mov	r5, r2
 8007b48:	e7ba      	b.n	8007ac0 <_printf_i+0x150>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	602a      	str	r2, [r5, #0]
 8007b50:	681d      	ldr	r5, [r3, #0]
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	2100      	movs	r1, #0
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7f8 fbca 	bl	80002f0 <memchr>
 8007b5c:	b108      	cbz	r0, 8007b62 <_printf_i+0x1f2>
 8007b5e:	1b40      	subs	r0, r0, r5
 8007b60:	6060      	str	r0, [r4, #4]
 8007b62:	6863      	ldr	r3, [r4, #4]
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	2300      	movs	r3, #0
 8007b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6c:	e7a8      	b.n	8007ac0 <_printf_i+0x150>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	462a      	mov	r2, r5
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d0ab      	beq.n	8007ad4 <_printf_i+0x164>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	d413      	bmi.n	8007baa <_printf_i+0x23a>
 8007b82:	68e0      	ldr	r0, [r4, #12]
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	4298      	cmp	r0, r3
 8007b88:	bfb8      	it	lt
 8007b8a:	4618      	movlt	r0, r3
 8007b8c:	e7a4      	b.n	8007ad8 <_printf_i+0x168>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4632      	mov	r2, r6
 8007b92:	4649      	mov	r1, r9
 8007b94:	4640      	mov	r0, r8
 8007b96:	47d0      	blx	sl
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d09b      	beq.n	8007ad4 <_printf_i+0x164>
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	9903      	ldr	r1, [sp, #12]
 8007ba2:	1a5b      	subs	r3, r3, r1
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dcf2      	bgt.n	8007b8e <_printf_i+0x21e>
 8007ba8:	e7eb      	b.n	8007b82 <_printf_i+0x212>
 8007baa:	2500      	movs	r5, #0
 8007bac:	f104 0619 	add.w	r6, r4, #25
 8007bb0:	e7f5      	b.n	8007b9e <_printf_i+0x22e>
 8007bb2:	bf00      	nop
 8007bb4:	0800a552 	.word	0x0800a552
 8007bb8:	0800a563 	.word	0x0800a563

08007bbc <siprintf>:
 8007bbc:	b40e      	push	{r1, r2, r3}
 8007bbe:	b500      	push	{lr}
 8007bc0:	b09c      	sub	sp, #112	; 0x70
 8007bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8007bc4:	9002      	str	r0, [sp, #8]
 8007bc6:	9006      	str	r0, [sp, #24]
 8007bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bcc:	4809      	ldr	r0, [pc, #36]	; (8007bf4 <siprintf+0x38>)
 8007bce:	9107      	str	r1, [sp, #28]
 8007bd0:	9104      	str	r1, [sp, #16]
 8007bd2:	4909      	ldr	r1, [pc, #36]	; (8007bf8 <siprintf+0x3c>)
 8007bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd8:	9105      	str	r1, [sp, #20]
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	a902      	add	r1, sp, #8
 8007be0:	f001 faea 	bl	80091b8 <_svfiprintf_r>
 8007be4:	9b02      	ldr	r3, [sp, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	b01c      	add	sp, #112	; 0x70
 8007bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf0:	b003      	add	sp, #12
 8007bf2:	4770      	bx	lr
 8007bf4:	24000018 	.word	0x24000018
 8007bf8:	ffff0208 	.word	0xffff0208

08007bfc <quorem>:
 8007bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	6903      	ldr	r3, [r0, #16]
 8007c02:	690c      	ldr	r4, [r1, #16]
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	4607      	mov	r7, r0
 8007c08:	f2c0 8081 	blt.w	8007d0e <quorem+0x112>
 8007c0c:	3c01      	subs	r4, #1
 8007c0e:	f101 0814 	add.w	r8, r1, #20
 8007c12:	f100 0514 	add.w	r5, r0, #20
 8007c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c24:	3301      	adds	r3, #1
 8007c26:	429a      	cmp	r2, r3
 8007c28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c30:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c34:	d331      	bcc.n	8007c9a <quorem+0x9e>
 8007c36:	f04f 0e00 	mov.w	lr, #0
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	46ac      	mov	ip, r5
 8007c3e:	46f2      	mov	sl, lr
 8007c40:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c44:	b293      	uxth	r3, r2
 8007c46:	fb06 e303 	mla	r3, r6, r3, lr
 8007c4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	ebaa 0303 	sub.w	r3, sl, r3
 8007c54:	f8dc a000 	ldr.w	sl, [ip]
 8007c58:	0c12      	lsrs	r2, r2, #16
 8007c5a:	fa13 f38a 	uxtah	r3, r3, sl
 8007c5e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c74:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c78:	4581      	cmp	r9, r0
 8007c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c7e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c86:	d2db      	bcs.n	8007c40 <quorem+0x44>
 8007c88:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c8c:	b92b      	cbnz	r3, 8007c9a <quorem+0x9e>
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	429d      	cmp	r5, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	d32e      	bcc.n	8007cf6 <quorem+0xfa>
 8007c98:	613c      	str	r4, [r7, #16]
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f001 f838 	bl	8008d10 <__mcmp>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	db24      	blt.n	8007cee <quorem+0xf2>
 8007ca4:	3601      	adds	r6, #1
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f04f 0c00 	mov.w	ip, #0
 8007cac:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cb0:	f8d0 e000 	ldr.w	lr, [r0]
 8007cb4:	b293      	uxth	r3, r2
 8007cb6:	ebac 0303 	sub.w	r3, ip, r3
 8007cba:	0c12      	lsrs	r2, r2, #16
 8007cbc:	fa13 f38e 	uxtah	r3, r3, lr
 8007cc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cce:	45c1      	cmp	r9, r8
 8007cd0:	f840 3b04 	str.w	r3, [r0], #4
 8007cd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cd8:	d2e8      	bcs.n	8007cac <quorem+0xb0>
 8007cda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ce2:	b922      	cbnz	r2, 8007cee <quorem+0xf2>
 8007ce4:	3b04      	subs	r3, #4
 8007ce6:	429d      	cmp	r5, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	d30a      	bcc.n	8007d02 <quorem+0x106>
 8007cec:	613c      	str	r4, [r7, #16]
 8007cee:	4630      	mov	r0, r6
 8007cf0:	b003      	add	sp, #12
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d1cc      	bne.n	8007c98 <quorem+0x9c>
 8007cfe:	3c01      	subs	r4, #1
 8007d00:	e7c7      	b.n	8007c92 <quorem+0x96>
 8007d02:	6812      	ldr	r2, [r2, #0]
 8007d04:	3b04      	subs	r3, #4
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d1f0      	bne.n	8007cec <quorem+0xf0>
 8007d0a:	3c01      	subs	r4, #1
 8007d0c:	e7eb      	b.n	8007ce6 <quorem+0xea>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e7ee      	b.n	8007cf0 <quorem+0xf4>
 8007d12:	0000      	movs	r0, r0
 8007d14:	0000      	movs	r0, r0
	...

08007d18 <_dtoa_r>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ed2d 8b02 	vpush	{d8}
 8007d20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d22:	b091      	sub	sp, #68	; 0x44
 8007d24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d28:	ec59 8b10 	vmov	r8, r9, d0
 8007d2c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007d2e:	9106      	str	r1, [sp, #24]
 8007d30:	4606      	mov	r6, r0
 8007d32:	9208      	str	r2, [sp, #32]
 8007d34:	930c      	str	r3, [sp, #48]	; 0x30
 8007d36:	b975      	cbnz	r5, 8007d56 <_dtoa_r+0x3e>
 8007d38:	2010      	movs	r0, #16
 8007d3a:	f000 fd5f 	bl	80087fc <malloc>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	6270      	str	r0, [r6, #36]	; 0x24
 8007d42:	b920      	cbnz	r0, 8007d4e <_dtoa_r+0x36>
 8007d44:	4baa      	ldr	r3, [pc, #680]	; (8007ff0 <_dtoa_r+0x2d8>)
 8007d46:	21ea      	movs	r1, #234	; 0xea
 8007d48:	48aa      	ldr	r0, [pc, #680]	; (8007ff4 <_dtoa_r+0x2dc>)
 8007d4a:	f001 fb45 	bl	80093d8 <__assert_func>
 8007d4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d52:	6005      	str	r5, [r0, #0]
 8007d54:	60c5      	str	r5, [r0, #12]
 8007d56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	b151      	cbz	r1, 8007d72 <_dtoa_r+0x5a>
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	604a      	str	r2, [r1, #4]
 8007d60:	2301      	movs	r3, #1
 8007d62:	4093      	lsls	r3, r2
 8007d64:	608b      	str	r3, [r1, #8]
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 fd90 	bl	800888c <_Bfree>
 8007d6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	f1b9 0300 	subs.w	r3, r9, #0
 8007d76:	bfbb      	ittet	lt
 8007d78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d7c:	9303      	strlt	r3, [sp, #12]
 8007d7e:	2300      	movge	r3, #0
 8007d80:	2201      	movlt	r2, #1
 8007d82:	bfac      	ite	ge
 8007d84:	6023      	strge	r3, [r4, #0]
 8007d86:	6022      	strlt	r2, [r4, #0]
 8007d88:	4b9b      	ldr	r3, [pc, #620]	; (8007ff8 <_dtoa_r+0x2e0>)
 8007d8a:	9c03      	ldr	r4, [sp, #12]
 8007d8c:	43a3      	bics	r3, r4
 8007d8e:	d11c      	bne.n	8007dca <_dtoa_r+0xb2>
 8007d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d92:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007d9c:	ea53 0308 	orrs.w	r3, r3, r8
 8007da0:	f000 84fd 	beq.w	800879e <_dtoa_r+0xa86>
 8007da4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007da6:	b963      	cbnz	r3, 8007dc2 <_dtoa_r+0xaa>
 8007da8:	4b94      	ldr	r3, [pc, #592]	; (8007ffc <_dtoa_r+0x2e4>)
 8007daa:	e01f      	b.n	8007dec <_dtoa_r+0xd4>
 8007dac:	4b94      	ldr	r3, [pc, #592]	; (8008000 <_dtoa_r+0x2e8>)
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	3308      	adds	r3, #8
 8007db2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	9801      	ldr	r0, [sp, #4]
 8007db8:	b011      	add	sp, #68	; 0x44
 8007dba:	ecbd 8b02 	vpop	{d8}
 8007dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc2:	4b8e      	ldr	r3, [pc, #568]	; (8007ffc <_dtoa_r+0x2e4>)
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	3303      	adds	r3, #3
 8007dc8:	e7f3      	b.n	8007db2 <_dtoa_r+0x9a>
 8007dca:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007dce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd6:	d10b      	bne.n	8007df0 <_dtoa_r+0xd8>
 8007dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dda:	2301      	movs	r3, #1
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 84d9 	beq.w	8008798 <_dtoa_r+0xa80>
 8007de6:	4887      	ldr	r0, [pc, #540]	; (8008004 <_dtoa_r+0x2ec>)
 8007de8:	6018      	str	r0, [r3, #0]
 8007dea:	1e43      	subs	r3, r0, #1
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	e7e2      	b.n	8007db6 <_dtoa_r+0x9e>
 8007df0:	a90f      	add	r1, sp, #60	; 0x3c
 8007df2:	aa0e      	add	r2, sp, #56	; 0x38
 8007df4:	4630      	mov	r0, r6
 8007df6:	eeb0 0b48 	vmov.f64	d0, d8
 8007dfa:	f001 f82f 	bl	8008e5c <__d2b>
 8007dfe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007e02:	4605      	mov	r5, r0
 8007e04:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007e06:	2900      	cmp	r1, #0
 8007e08:	d046      	beq.n	8007e98 <_dtoa_r+0x180>
 8007e0a:	ee18 4a90 	vmov	r4, s17
 8007e0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e12:	ec53 2b18 	vmov	r2, r3, d8
 8007e16:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007e1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007e22:	2400      	movs	r4, #0
 8007e24:	ec43 2b16 	vmov	d6, r2, r3
 8007e28:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007e2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007fd8 <_dtoa_r+0x2c0>
 8007e30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e34:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007fe0 <_dtoa_r+0x2c8>
 8007e38:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007e3c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007fe8 <_dtoa_r+0x2d0>
 8007e40:	ee07 1a90 	vmov	s15, r1
 8007e44:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007e48:	eeb0 7b46 	vmov.f64	d7, d6
 8007e4c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007e50:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007e54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5c:	ee16 ba90 	vmov	fp, s13
 8007e60:	940a      	str	r4, [sp, #40]	; 0x28
 8007e62:	d508      	bpl.n	8007e76 <_dtoa_r+0x15e>
 8007e64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007e68:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e70:	bf18      	it	ne
 8007e72:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007e76:	f1bb 0f16 	cmp.w	fp, #22
 8007e7a:	d82f      	bhi.n	8007edc <_dtoa_r+0x1c4>
 8007e7c:	4b62      	ldr	r3, [pc, #392]	; (8008008 <_dtoa_r+0x2f0>)
 8007e7e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e82:	ed93 7b00 	vldr	d7, [r3]
 8007e86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8e:	d501      	bpl.n	8007e94 <_dtoa_r+0x17c>
 8007e90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e94:	2300      	movs	r3, #0
 8007e96:	e022      	b.n	8007ede <_dtoa_r+0x1c6>
 8007e98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e9a:	4401      	add	r1, r0
 8007e9c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	bfc1      	itttt	gt
 8007ea4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ea8:	fa04 f303 	lslgt.w	r3, r4, r3
 8007eac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007eb0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007eb4:	bfd6      	itet	le
 8007eb6:	f1c3 0320 	rsble	r3, r3, #32
 8007eba:	ea43 0808 	orrgt.w	r8, r3, r8
 8007ebe:	fa08 f803 	lslle.w	r8, r8, r3
 8007ec2:	ee07 8a90 	vmov	s15, r8
 8007ec6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007eca:	3901      	subs	r1, #1
 8007ecc:	ee17 4a90 	vmov	r4, s15
 8007ed0:	ec53 2b17 	vmov	r2, r3, d7
 8007ed4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007ed8:	2401      	movs	r4, #1
 8007eda:	e7a3      	b.n	8007e24 <_dtoa_r+0x10c>
 8007edc:	2301      	movs	r3, #1
 8007ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ee0:	1a43      	subs	r3, r0, r1
 8007ee2:	1e5a      	subs	r2, r3, #1
 8007ee4:	bf45      	ittet	mi
 8007ee6:	f1c3 0301 	rsbmi	r3, r3, #1
 8007eea:	9304      	strmi	r3, [sp, #16]
 8007eec:	2300      	movpl	r3, #0
 8007eee:	2300      	movmi	r3, #0
 8007ef0:	9205      	str	r2, [sp, #20]
 8007ef2:	bf54      	ite	pl
 8007ef4:	9304      	strpl	r3, [sp, #16]
 8007ef6:	9305      	strmi	r3, [sp, #20]
 8007ef8:	f1bb 0f00 	cmp.w	fp, #0
 8007efc:	db18      	blt.n	8007f30 <_dtoa_r+0x218>
 8007efe:	9b05      	ldr	r3, [sp, #20]
 8007f00:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007f04:	445b      	add	r3, fp
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9a06      	ldr	r2, [sp, #24]
 8007f0c:	2a09      	cmp	r2, #9
 8007f0e:	d849      	bhi.n	8007fa4 <_dtoa_r+0x28c>
 8007f10:	2a05      	cmp	r2, #5
 8007f12:	bfc4      	itt	gt
 8007f14:	3a04      	subgt	r2, #4
 8007f16:	9206      	strgt	r2, [sp, #24]
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	f1a2 0202 	sub.w	r2, r2, #2
 8007f1e:	bfcc      	ite	gt
 8007f20:	2400      	movgt	r4, #0
 8007f22:	2401      	movle	r4, #1
 8007f24:	2a03      	cmp	r2, #3
 8007f26:	d848      	bhi.n	8007fba <_dtoa_r+0x2a2>
 8007f28:	e8df f002 	tbb	[pc, r2]
 8007f2c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	2200      	movs	r2, #0
 8007f34:	eba3 030b 	sub.w	r3, r3, fp
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f3c:	f1cb 0300 	rsb	r3, fp, #0
 8007f40:	e7e3      	b.n	8007f0a <_dtoa_r+0x1f2>
 8007f42:	2200      	movs	r2, #0
 8007f44:	9207      	str	r2, [sp, #28]
 8007f46:	9a08      	ldr	r2, [sp, #32]
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	dc39      	bgt.n	8007fc0 <_dtoa_r+0x2a8>
 8007f4c:	f04f 0a01 	mov.w	sl, #1
 8007f50:	46d1      	mov	r9, sl
 8007f52:	4652      	mov	r2, sl
 8007f54:	f8cd a020 	str.w	sl, [sp, #32]
 8007f58:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	6079      	str	r1, [r7, #4]
 8007f5e:	2004      	movs	r0, #4
 8007f60:	f100 0c14 	add.w	ip, r0, #20
 8007f64:	4594      	cmp	ip, r2
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	d92f      	bls.n	8007fca <_dtoa_r+0x2b2>
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f6e:	f000 fc4d 	bl	800880c <_Balloc>
 8007f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f74:	9001      	str	r0, [sp, #4]
 8007f76:	4602      	mov	r2, r0
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d149      	bne.n	8008010 <_dtoa_r+0x2f8>
 8007f7c:	4b23      	ldr	r3, [pc, #140]	; (800800c <_dtoa_r+0x2f4>)
 8007f7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f82:	e6e1      	b.n	8007d48 <_dtoa_r+0x30>
 8007f84:	2201      	movs	r2, #1
 8007f86:	e7dd      	b.n	8007f44 <_dtoa_r+0x22c>
 8007f88:	2200      	movs	r2, #0
 8007f8a:	9207      	str	r2, [sp, #28]
 8007f8c:	9a08      	ldr	r2, [sp, #32]
 8007f8e:	eb0b 0a02 	add.w	sl, fp, r2
 8007f92:	f10a 0901 	add.w	r9, sl, #1
 8007f96:	464a      	mov	r2, r9
 8007f98:	2a01      	cmp	r2, #1
 8007f9a:	bfb8      	it	lt
 8007f9c:	2201      	movlt	r2, #1
 8007f9e:	e7db      	b.n	8007f58 <_dtoa_r+0x240>
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	e7f2      	b.n	8007f8a <_dtoa_r+0x272>
 8007fa4:	2401      	movs	r4, #1
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007fac:	f04f 3aff 	mov.w	sl, #4294967295
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	46d1      	mov	r9, sl
 8007fb4:	2212      	movs	r2, #18
 8007fb6:	9108      	str	r1, [sp, #32]
 8007fb8:	e7ce      	b.n	8007f58 <_dtoa_r+0x240>
 8007fba:	2201      	movs	r2, #1
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	e7f5      	b.n	8007fac <_dtoa_r+0x294>
 8007fc0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007fc4:	46d1      	mov	r9, sl
 8007fc6:	4652      	mov	r2, sl
 8007fc8:	e7c6      	b.n	8007f58 <_dtoa_r+0x240>
 8007fca:	3101      	adds	r1, #1
 8007fcc:	6079      	str	r1, [r7, #4]
 8007fce:	0040      	lsls	r0, r0, #1
 8007fd0:	e7c6      	b.n	8007f60 <_dtoa_r+0x248>
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	636f4361 	.word	0x636f4361
 8007fdc:	3fd287a7 	.word	0x3fd287a7
 8007fe0:	8b60c8b3 	.word	0x8b60c8b3
 8007fe4:	3fc68a28 	.word	0x3fc68a28
 8007fe8:	509f79fb 	.word	0x509f79fb
 8007fec:	3fd34413 	.word	0x3fd34413
 8007ff0:	0800a581 	.word	0x0800a581
 8007ff4:	0800a598 	.word	0x0800a598
 8007ff8:	7ff00000 	.word	0x7ff00000
 8007ffc:	0800a57d 	.word	0x0800a57d
 8008000:	0800a574 	.word	0x0800a574
 8008004:	0800a551 	.word	0x0800a551
 8008008:	0800a688 	.word	0x0800a688
 800800c:	0800a5f3 	.word	0x0800a5f3
 8008010:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008012:	9901      	ldr	r1, [sp, #4]
 8008014:	6011      	str	r1, [r2, #0]
 8008016:	f1b9 0f0e 	cmp.w	r9, #14
 800801a:	d86c      	bhi.n	80080f6 <_dtoa_r+0x3de>
 800801c:	2c00      	cmp	r4, #0
 800801e:	d06a      	beq.n	80080f6 <_dtoa_r+0x3de>
 8008020:	f1bb 0f00 	cmp.w	fp, #0
 8008024:	f340 80a0 	ble.w	8008168 <_dtoa_r+0x450>
 8008028:	49c1      	ldr	r1, [pc, #772]	; (8008330 <_dtoa_r+0x618>)
 800802a:	f00b 020f 	and.w	r2, fp, #15
 800802e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008032:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008036:	ed92 7b00 	vldr	d7, [r2]
 800803a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800803e:	f000 8087 	beq.w	8008150 <_dtoa_r+0x438>
 8008042:	4abc      	ldr	r2, [pc, #752]	; (8008334 <_dtoa_r+0x61c>)
 8008044:	ed92 6b08 	vldr	d6, [r2, #32]
 8008048:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800804c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008050:	f001 010f 	and.w	r1, r1, #15
 8008054:	2203      	movs	r2, #3
 8008056:	48b7      	ldr	r0, [pc, #732]	; (8008334 <_dtoa_r+0x61c>)
 8008058:	2900      	cmp	r1, #0
 800805a:	d17b      	bne.n	8008154 <_dtoa_r+0x43c>
 800805c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008060:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008064:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800806a:	2900      	cmp	r1, #0
 800806c:	f000 80a2 	beq.w	80081b4 <_dtoa_r+0x49c>
 8008070:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008074:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008078:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008080:	f140 8098 	bpl.w	80081b4 <_dtoa_r+0x49c>
 8008084:	f1b9 0f00 	cmp.w	r9, #0
 8008088:	f000 8094 	beq.w	80081b4 <_dtoa_r+0x49c>
 800808c:	f1ba 0f00 	cmp.w	sl, #0
 8008090:	dd2f      	ble.n	80080f2 <_dtoa_r+0x3da>
 8008092:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800809a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800809e:	f10b 37ff 	add.w	r7, fp, #4294967295
 80080a2:	3201      	adds	r2, #1
 80080a4:	4650      	mov	r0, sl
 80080a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80080ae:	ee07 2a90 	vmov	s15, r2
 80080b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80080ba:	ee15 4a90 	vmov	r4, s11
 80080be:	ec52 1b15 	vmov	r1, r2, d5
 80080c2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d177      	bne.n	80081ba <_dtoa_r+0x4a2>
 80080ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80080ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080d2:	ec42 1b17 	vmov	d7, r1, r2
 80080d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	f300 8263 	bgt.w	80085a8 <_dtoa_r+0x890>
 80080e2:	eeb1 7b47 	vneg.f64	d7, d7
 80080e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ee:	f100 8258 	bmi.w	80085a2 <_dtoa_r+0x88a>
 80080f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80080f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	f2c0 811d 	blt.w	8008338 <_dtoa_r+0x620>
 80080fe:	f1bb 0f0e 	cmp.w	fp, #14
 8008102:	f300 8119 	bgt.w	8008338 <_dtoa_r+0x620>
 8008106:	4b8a      	ldr	r3, [pc, #552]	; (8008330 <_dtoa_r+0x618>)
 8008108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800810c:	ed93 6b00 	vldr	d6, [r3]
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f280 80b7 	bge.w	8008286 <_dtoa_r+0x56e>
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	f300 80b3 	bgt.w	8008286 <_dtoa_r+0x56e>
 8008120:	f040 823f 	bne.w	80085a2 <_dtoa_r+0x88a>
 8008124:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008128:	ee26 6b07 	vmul.f64	d6, d6, d7
 800812c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008130:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008138:	464c      	mov	r4, r9
 800813a:	464f      	mov	r7, r9
 800813c:	f280 8215 	bge.w	800856a <_dtoa_r+0x852>
 8008140:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008144:	2331      	movs	r3, #49	; 0x31
 8008146:	f808 3b01 	strb.w	r3, [r8], #1
 800814a:	f10b 0b01 	add.w	fp, fp, #1
 800814e:	e211      	b.n	8008574 <_dtoa_r+0x85c>
 8008150:	2202      	movs	r2, #2
 8008152:	e780      	b.n	8008056 <_dtoa_r+0x33e>
 8008154:	07cc      	lsls	r4, r1, #31
 8008156:	d504      	bpl.n	8008162 <_dtoa_r+0x44a>
 8008158:	ed90 6b00 	vldr	d6, [r0]
 800815c:	3201      	adds	r2, #1
 800815e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008162:	1049      	asrs	r1, r1, #1
 8008164:	3008      	adds	r0, #8
 8008166:	e777      	b.n	8008058 <_dtoa_r+0x340>
 8008168:	d022      	beq.n	80081b0 <_dtoa_r+0x498>
 800816a:	f1cb 0100 	rsb	r1, fp, #0
 800816e:	4a70      	ldr	r2, [pc, #448]	; (8008330 <_dtoa_r+0x618>)
 8008170:	f001 000f 	and.w	r0, r1, #15
 8008174:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008178:	ed92 7b00 	vldr	d7, [r2]
 800817c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008180:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008184:	486b      	ldr	r0, [pc, #428]	; (8008334 <_dtoa_r+0x61c>)
 8008186:	1109      	asrs	r1, r1, #4
 8008188:	2400      	movs	r4, #0
 800818a:	2202      	movs	r2, #2
 800818c:	b929      	cbnz	r1, 800819a <_dtoa_r+0x482>
 800818e:	2c00      	cmp	r4, #0
 8008190:	f43f af6a 	beq.w	8008068 <_dtoa_r+0x350>
 8008194:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008198:	e766      	b.n	8008068 <_dtoa_r+0x350>
 800819a:	07cf      	lsls	r7, r1, #31
 800819c:	d505      	bpl.n	80081aa <_dtoa_r+0x492>
 800819e:	ed90 6b00 	vldr	d6, [r0]
 80081a2:	3201      	adds	r2, #1
 80081a4:	2401      	movs	r4, #1
 80081a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081aa:	1049      	asrs	r1, r1, #1
 80081ac:	3008      	adds	r0, #8
 80081ae:	e7ed      	b.n	800818c <_dtoa_r+0x474>
 80081b0:	2202      	movs	r2, #2
 80081b2:	e759      	b.n	8008068 <_dtoa_r+0x350>
 80081b4:	465f      	mov	r7, fp
 80081b6:	4648      	mov	r0, r9
 80081b8:	e775      	b.n	80080a6 <_dtoa_r+0x38e>
 80081ba:	ec42 1b17 	vmov	d7, r1, r2
 80081be:	4a5c      	ldr	r2, [pc, #368]	; (8008330 <_dtoa_r+0x618>)
 80081c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80081c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	1814      	adds	r4, r2, r0
 80081cc:	9a07      	ldr	r2, [sp, #28]
 80081ce:	b352      	cbz	r2, 8008226 <_dtoa_r+0x50e>
 80081d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80081d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80081d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80081e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80081e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80081e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80081ec:	ee14 2a90 	vmov	r2, s9
 80081f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081f4:	3230      	adds	r2, #48	; 0x30
 80081f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008202:	f808 2b01 	strb.w	r2, [r8], #1
 8008206:	d439      	bmi.n	800827c <_dtoa_r+0x564>
 8008208:	ee32 5b46 	vsub.f64	d5, d2, d6
 800820c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008214:	d472      	bmi.n	80082fc <_dtoa_r+0x5e4>
 8008216:	45a0      	cmp	r8, r4
 8008218:	f43f af6b 	beq.w	80080f2 <_dtoa_r+0x3da>
 800821c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008220:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008224:	e7e0      	b.n	80081e8 <_dtoa_r+0x4d0>
 8008226:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800822a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800822e:	4621      	mov	r1, r4
 8008230:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008234:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008238:	ee14 2a90 	vmov	r2, s9
 800823c:	3230      	adds	r2, #48	; 0x30
 800823e:	f808 2b01 	strb.w	r2, [r8], #1
 8008242:	45a0      	cmp	r8, r4
 8008244:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008248:	ee36 6b45 	vsub.f64	d6, d6, d5
 800824c:	d118      	bne.n	8008280 <_dtoa_r+0x568>
 800824e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008252:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008256:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800825a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825e:	dc4d      	bgt.n	80082fc <_dtoa_r+0x5e4>
 8008260:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008264:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826c:	f57f af41 	bpl.w	80080f2 <_dtoa_r+0x3da>
 8008270:	4688      	mov	r8, r1
 8008272:	3901      	subs	r1, #1
 8008274:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008278:	2b30      	cmp	r3, #48	; 0x30
 800827a:	d0f9      	beq.n	8008270 <_dtoa_r+0x558>
 800827c:	46bb      	mov	fp, r7
 800827e:	e02a      	b.n	80082d6 <_dtoa_r+0x5be>
 8008280:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008284:	e7d6      	b.n	8008234 <_dtoa_r+0x51c>
 8008286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800828a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800828e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008292:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008296:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800829a:	ee15 3a10 	vmov	r3, s10
 800829e:	3330      	adds	r3, #48	; 0x30
 80082a0:	f808 3b01 	strb.w	r3, [r8], #1
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	eba8 0303 	sub.w	r3, r8, r3
 80082aa:	4599      	cmp	r9, r3
 80082ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80082b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80082b4:	d133      	bne.n	800831e <_dtoa_r+0x606>
 80082b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80082ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	dc1a      	bgt.n	80082fa <_dtoa_r+0x5e2>
 80082c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80082c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082cc:	d103      	bne.n	80082d6 <_dtoa_r+0x5be>
 80082ce:	ee15 3a10 	vmov	r3, s10
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	d411      	bmi.n	80082fa <_dtoa_r+0x5e2>
 80082d6:	4629      	mov	r1, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 fad7 	bl	800888c <_Bfree>
 80082de:	2300      	movs	r3, #0
 80082e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e2:	f888 3000 	strb.w	r3, [r8]
 80082e6:	f10b 0301 	add.w	r3, fp, #1
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f43f ad61 	beq.w	8007db6 <_dtoa_r+0x9e>
 80082f4:	f8c3 8000 	str.w	r8, [r3]
 80082f8:	e55d      	b.n	8007db6 <_dtoa_r+0x9e>
 80082fa:	465f      	mov	r7, fp
 80082fc:	4643      	mov	r3, r8
 80082fe:	4698      	mov	r8, r3
 8008300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008304:	2a39      	cmp	r2, #57	; 0x39
 8008306:	d106      	bne.n	8008316 <_dtoa_r+0x5fe>
 8008308:	9a01      	ldr	r2, [sp, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d1f7      	bne.n	80082fe <_dtoa_r+0x5e6>
 800830e:	9901      	ldr	r1, [sp, #4]
 8008310:	2230      	movs	r2, #48	; 0x30
 8008312:	3701      	adds	r7, #1
 8008314:	700a      	strb	r2, [r1, #0]
 8008316:	781a      	ldrb	r2, [r3, #0]
 8008318:	3201      	adds	r2, #1
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e7ae      	b.n	800827c <_dtoa_r+0x564>
 800831e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	d1b2      	bne.n	8008292 <_dtoa_r+0x57a>
 800832c:	e7d3      	b.n	80082d6 <_dtoa_r+0x5be>
 800832e:	bf00      	nop
 8008330:	0800a688 	.word	0x0800a688
 8008334:	0800a660 	.word	0x0800a660
 8008338:	9907      	ldr	r1, [sp, #28]
 800833a:	2900      	cmp	r1, #0
 800833c:	f000 80d0 	beq.w	80084e0 <_dtoa_r+0x7c8>
 8008340:	9906      	ldr	r1, [sp, #24]
 8008342:	2901      	cmp	r1, #1
 8008344:	f300 80b4 	bgt.w	80084b0 <_dtoa_r+0x798>
 8008348:	990a      	ldr	r1, [sp, #40]	; 0x28
 800834a:	2900      	cmp	r1, #0
 800834c:	f000 80ac 	beq.w	80084a8 <_dtoa_r+0x790>
 8008350:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008354:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008358:	461c      	mov	r4, r3
 800835a:	930a      	str	r3, [sp, #40]	; 0x28
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	4413      	add	r3, r2
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	9b05      	ldr	r3, [sp, #20]
 8008364:	2101      	movs	r1, #1
 8008366:	4413      	add	r3, r2
 8008368:	4630      	mov	r0, r6
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	f000 fb46 	bl	80089fc <__i2b>
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	4607      	mov	r7, r0
 8008374:	f1b8 0f00 	cmp.w	r8, #0
 8008378:	dd0d      	ble.n	8008396 <_dtoa_r+0x67e>
 800837a:	9a05      	ldr	r2, [sp, #20]
 800837c:	2a00      	cmp	r2, #0
 800837e:	dd0a      	ble.n	8008396 <_dtoa_r+0x67e>
 8008380:	4542      	cmp	r2, r8
 8008382:	9904      	ldr	r1, [sp, #16]
 8008384:	bfa8      	it	ge
 8008386:	4642      	movge	r2, r8
 8008388:	1a89      	subs	r1, r1, r2
 800838a:	9104      	str	r1, [sp, #16]
 800838c:	9905      	ldr	r1, [sp, #20]
 800838e:	eba8 0802 	sub.w	r8, r8, r2
 8008392:	1a8a      	subs	r2, r1, r2
 8008394:	9205      	str	r2, [sp, #20]
 8008396:	b303      	cbz	r3, 80083da <_dtoa_r+0x6c2>
 8008398:	9a07      	ldr	r2, [sp, #28]
 800839a:	2a00      	cmp	r2, #0
 800839c:	f000 80a5 	beq.w	80084ea <_dtoa_r+0x7d2>
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	dd13      	ble.n	80083cc <_dtoa_r+0x6b4>
 80083a4:	4639      	mov	r1, r7
 80083a6:	4622      	mov	r2, r4
 80083a8:	4630      	mov	r0, r6
 80083aa:	930d      	str	r3, [sp, #52]	; 0x34
 80083ac:	f000 fbe6 	bl	8008b7c <__pow5mult>
 80083b0:	462a      	mov	r2, r5
 80083b2:	4601      	mov	r1, r0
 80083b4:	4607      	mov	r7, r0
 80083b6:	4630      	mov	r0, r6
 80083b8:	f000 fb36 	bl	8008a28 <__multiply>
 80083bc:	4629      	mov	r1, r5
 80083be:	900a      	str	r0, [sp, #40]	; 0x28
 80083c0:	4630      	mov	r0, r6
 80083c2:	f000 fa63 	bl	800888c <_Bfree>
 80083c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ca:	4615      	mov	r5, r2
 80083cc:	1b1a      	subs	r2, r3, r4
 80083ce:	d004      	beq.n	80083da <_dtoa_r+0x6c2>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 fbd2 	bl	8008b7c <__pow5mult>
 80083d8:	4605      	mov	r5, r0
 80083da:	2101      	movs	r1, #1
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 fb0d 	bl	80089fc <__i2b>
 80083e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	f340 8081 	ble.w	80084ee <_dtoa_r+0x7d6>
 80083ec:	461a      	mov	r2, r3
 80083ee:	4601      	mov	r1, r0
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 fbc3 	bl	8008b7c <__pow5mult>
 80083f6:	9b06      	ldr	r3, [sp, #24]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	4604      	mov	r4, r0
 80083fc:	dd7a      	ble.n	80084f4 <_dtoa_r+0x7dc>
 80083fe:	2300      	movs	r3, #0
 8008400:	930a      	str	r3, [sp, #40]	; 0x28
 8008402:	6922      	ldr	r2, [r4, #16]
 8008404:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008408:	6910      	ldr	r0, [r2, #16]
 800840a:	f000 faa7 	bl	800895c <__hi0bits>
 800840e:	f1c0 0020 	rsb	r0, r0, #32
 8008412:	9b05      	ldr	r3, [sp, #20]
 8008414:	4418      	add	r0, r3
 8008416:	f010 001f 	ands.w	r0, r0, #31
 800841a:	f000 808c 	beq.w	8008536 <_dtoa_r+0x81e>
 800841e:	f1c0 0220 	rsb	r2, r0, #32
 8008422:	2a04      	cmp	r2, #4
 8008424:	f340 8085 	ble.w	8008532 <_dtoa_r+0x81a>
 8008428:	f1c0 001c 	rsb	r0, r0, #28
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	4403      	add	r3, r0
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	4403      	add	r3, r0
 8008436:	4480      	add	r8, r0
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	9b04      	ldr	r3, [sp, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	dd05      	ble.n	800844c <_dtoa_r+0x734>
 8008440:	4629      	mov	r1, r5
 8008442:	461a      	mov	r2, r3
 8008444:	4630      	mov	r0, r6
 8008446:	f000 fbf3 	bl	8008c30 <__lshift>
 800844a:	4605      	mov	r5, r0
 800844c:	9b05      	ldr	r3, [sp, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd05      	ble.n	800845e <_dtoa_r+0x746>
 8008452:	4621      	mov	r1, r4
 8008454:	461a      	mov	r2, r3
 8008456:	4630      	mov	r0, r6
 8008458:	f000 fbea 	bl	8008c30 <__lshift>
 800845c:	4604      	mov	r4, r0
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d06a      	beq.n	800853a <_dtoa_r+0x822>
 8008464:	4621      	mov	r1, r4
 8008466:	4628      	mov	r0, r5
 8008468:	f000 fc52 	bl	8008d10 <__mcmp>
 800846c:	2800      	cmp	r0, #0
 800846e:	da64      	bge.n	800853a <_dtoa_r+0x822>
 8008470:	2300      	movs	r3, #0
 8008472:	4629      	mov	r1, r5
 8008474:	220a      	movs	r2, #10
 8008476:	4630      	mov	r0, r6
 8008478:	f000 fa2a 	bl	80088d0 <__multadd>
 800847c:	9b07      	ldr	r3, [sp, #28]
 800847e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008482:	4605      	mov	r5, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8191 	beq.w	80087ac <_dtoa_r+0xa94>
 800848a:	4639      	mov	r1, r7
 800848c:	2300      	movs	r3, #0
 800848e:	220a      	movs	r2, #10
 8008490:	4630      	mov	r0, r6
 8008492:	f000 fa1d 	bl	80088d0 <__multadd>
 8008496:	f1ba 0f00 	cmp.w	sl, #0
 800849a:	4607      	mov	r7, r0
 800849c:	f300 808d 	bgt.w	80085ba <_dtoa_r+0x8a2>
 80084a0:	9b06      	ldr	r3, [sp, #24]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	dc50      	bgt.n	8008548 <_dtoa_r+0x830>
 80084a6:	e088      	b.n	80085ba <_dtoa_r+0x8a2>
 80084a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084ae:	e751      	b.n	8008354 <_dtoa_r+0x63c>
 80084b0:	f109 34ff 	add.w	r4, r9, #4294967295
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	bfbf      	itttt	lt
 80084b8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80084ba:	1ae3      	sublt	r3, r4, r3
 80084bc:	18d2      	addlt	r2, r2, r3
 80084be:	9209      	strlt	r2, [sp, #36]	; 0x24
 80084c0:	bfb6      	itet	lt
 80084c2:	4623      	movlt	r3, r4
 80084c4:	1b1c      	subge	r4, r3, r4
 80084c6:	2400      	movlt	r4, #0
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	bfb5      	itete	lt
 80084ce:	9a04      	ldrlt	r2, [sp, #16]
 80084d0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80084d4:	eba2 0809 	sublt.w	r8, r2, r9
 80084d8:	464a      	movge	r2, r9
 80084da:	bfb8      	it	lt
 80084dc:	2200      	movlt	r2, #0
 80084de:	e73c      	b.n	800835a <_dtoa_r+0x642>
 80084e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80084e4:	9f07      	ldr	r7, [sp, #28]
 80084e6:	461c      	mov	r4, r3
 80084e8:	e744      	b.n	8008374 <_dtoa_r+0x65c>
 80084ea:	461a      	mov	r2, r3
 80084ec:	e770      	b.n	80083d0 <_dtoa_r+0x6b8>
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	dc18      	bgt.n	8008526 <_dtoa_r+0x80e>
 80084f4:	9b02      	ldr	r3, [sp, #8]
 80084f6:	b9b3      	cbnz	r3, 8008526 <_dtoa_r+0x80e>
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80084fe:	b9a2      	cbnz	r2, 800852a <_dtoa_r+0x812>
 8008500:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008504:	0d12      	lsrs	r2, r2, #20
 8008506:	0512      	lsls	r2, r2, #20
 8008508:	b18a      	cbz	r2, 800852e <_dtoa_r+0x816>
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	3301      	adds	r3, #1
 800850e:	9304      	str	r3, [sp, #16]
 8008510:	9b05      	ldr	r3, [sp, #20]
 8008512:	3301      	adds	r3, #1
 8008514:	9305      	str	r3, [sp, #20]
 8008516:	2301      	movs	r3, #1
 8008518:	930a      	str	r3, [sp, #40]	; 0x28
 800851a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	f47f af70 	bne.w	8008402 <_dtoa_r+0x6ea>
 8008522:	2001      	movs	r0, #1
 8008524:	e775      	b.n	8008412 <_dtoa_r+0x6fa>
 8008526:	2300      	movs	r3, #0
 8008528:	e7f6      	b.n	8008518 <_dtoa_r+0x800>
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	e7f4      	b.n	8008518 <_dtoa_r+0x800>
 800852e:	920a      	str	r2, [sp, #40]	; 0x28
 8008530:	e7f3      	b.n	800851a <_dtoa_r+0x802>
 8008532:	d082      	beq.n	800843a <_dtoa_r+0x722>
 8008534:	4610      	mov	r0, r2
 8008536:	301c      	adds	r0, #28
 8008538:	e778      	b.n	800842c <_dtoa_r+0x714>
 800853a:	f1b9 0f00 	cmp.w	r9, #0
 800853e:	dc37      	bgt.n	80085b0 <_dtoa_r+0x898>
 8008540:	9b06      	ldr	r3, [sp, #24]
 8008542:	2b02      	cmp	r3, #2
 8008544:	dd34      	ble.n	80085b0 <_dtoa_r+0x898>
 8008546:	46ca      	mov	sl, r9
 8008548:	f1ba 0f00 	cmp.w	sl, #0
 800854c:	d10d      	bne.n	800856a <_dtoa_r+0x852>
 800854e:	4621      	mov	r1, r4
 8008550:	4653      	mov	r3, sl
 8008552:	2205      	movs	r2, #5
 8008554:	4630      	mov	r0, r6
 8008556:	f000 f9bb 	bl	80088d0 <__multadd>
 800855a:	4601      	mov	r1, r0
 800855c:	4604      	mov	r4, r0
 800855e:	4628      	mov	r0, r5
 8008560:	f000 fbd6 	bl	8008d10 <__mcmp>
 8008564:	2800      	cmp	r0, #0
 8008566:	f73f adeb 	bgt.w	8008140 <_dtoa_r+0x428>
 800856a:	9b08      	ldr	r3, [sp, #32]
 800856c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008570:	ea6f 0b03 	mvn.w	fp, r3
 8008574:	f04f 0900 	mov.w	r9, #0
 8008578:	4621      	mov	r1, r4
 800857a:	4630      	mov	r0, r6
 800857c:	f000 f986 	bl	800888c <_Bfree>
 8008580:	2f00      	cmp	r7, #0
 8008582:	f43f aea8 	beq.w	80082d6 <_dtoa_r+0x5be>
 8008586:	f1b9 0f00 	cmp.w	r9, #0
 800858a:	d005      	beq.n	8008598 <_dtoa_r+0x880>
 800858c:	45b9      	cmp	r9, r7
 800858e:	d003      	beq.n	8008598 <_dtoa_r+0x880>
 8008590:	4649      	mov	r1, r9
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f97a 	bl	800888c <_Bfree>
 8008598:	4639      	mov	r1, r7
 800859a:	4630      	mov	r0, r6
 800859c:	f000 f976 	bl	800888c <_Bfree>
 80085a0:	e699      	b.n	80082d6 <_dtoa_r+0x5be>
 80085a2:	2400      	movs	r4, #0
 80085a4:	4627      	mov	r7, r4
 80085a6:	e7e0      	b.n	800856a <_dtoa_r+0x852>
 80085a8:	46bb      	mov	fp, r7
 80085aa:	4604      	mov	r4, r0
 80085ac:	4607      	mov	r7, r0
 80085ae:	e5c7      	b.n	8008140 <_dtoa_r+0x428>
 80085b0:	9b07      	ldr	r3, [sp, #28]
 80085b2:	46ca      	mov	sl, r9
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8100 	beq.w	80087ba <_dtoa_r+0xaa2>
 80085ba:	f1b8 0f00 	cmp.w	r8, #0
 80085be:	dd05      	ble.n	80085cc <_dtoa_r+0x8b4>
 80085c0:	4639      	mov	r1, r7
 80085c2:	4642      	mov	r2, r8
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 fb33 	bl	8008c30 <__lshift>
 80085ca:	4607      	mov	r7, r0
 80085cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d05d      	beq.n	800868e <_dtoa_r+0x976>
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4630      	mov	r0, r6
 80085d6:	f000 f919 	bl	800880c <_Balloc>
 80085da:	4680      	mov	r8, r0
 80085dc:	b928      	cbnz	r0, 80085ea <_dtoa_r+0x8d2>
 80085de:	4b82      	ldr	r3, [pc, #520]	; (80087e8 <_dtoa_r+0xad0>)
 80085e0:	4602      	mov	r2, r0
 80085e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085e6:	f7ff bbaf 	b.w	8007d48 <_dtoa_r+0x30>
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	3202      	adds	r2, #2
 80085ee:	0092      	lsls	r2, r2, #2
 80085f0:	f107 010c 	add.w	r1, r7, #12
 80085f4:	300c      	adds	r0, #12
 80085f6:	f7fe fe87 	bl	8007308 <memcpy>
 80085fa:	2201      	movs	r2, #1
 80085fc:	4641      	mov	r1, r8
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 fb16 	bl	8008c30 <__lshift>
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	3301      	adds	r3, #1
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	9b01      	ldr	r3, [sp, #4]
 800860c:	4453      	add	r3, sl
 800860e:	9308      	str	r3, [sp, #32]
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	46b9      	mov	r9, r7
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	4607      	mov	r7, r0
 800861c:	9b04      	ldr	r3, [sp, #16]
 800861e:	4621      	mov	r1, r4
 8008620:	3b01      	subs	r3, #1
 8008622:	4628      	mov	r0, r5
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	f7ff fae9 	bl	8007bfc <quorem>
 800862a:	4603      	mov	r3, r0
 800862c:	3330      	adds	r3, #48	; 0x30
 800862e:	9005      	str	r0, [sp, #20]
 8008630:	4649      	mov	r1, r9
 8008632:	4628      	mov	r0, r5
 8008634:	9309      	str	r3, [sp, #36]	; 0x24
 8008636:	f000 fb6b 	bl	8008d10 <__mcmp>
 800863a:	463a      	mov	r2, r7
 800863c:	4682      	mov	sl, r0
 800863e:	4621      	mov	r1, r4
 8008640:	4630      	mov	r0, r6
 8008642:	f000 fb81 	bl	8008d48 <__mdiff>
 8008646:	68c2      	ldr	r2, [r0, #12]
 8008648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864a:	4680      	mov	r8, r0
 800864c:	bb0a      	cbnz	r2, 8008692 <_dtoa_r+0x97a>
 800864e:	4601      	mov	r1, r0
 8008650:	4628      	mov	r0, r5
 8008652:	f000 fb5d 	bl	8008d10 <__mcmp>
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	4602      	mov	r2, r0
 800865a:	4641      	mov	r1, r8
 800865c:	4630      	mov	r0, r6
 800865e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008662:	f000 f913 	bl	800888c <_Bfree>
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800866a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800866e:	ea43 0102 	orr.w	r1, r3, r2
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	430b      	orrs	r3, r1
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	d10d      	bne.n	8008696 <_dtoa_r+0x97e>
 800867a:	2b39      	cmp	r3, #57	; 0x39
 800867c:	d029      	beq.n	80086d2 <_dtoa_r+0x9ba>
 800867e:	f1ba 0f00 	cmp.w	sl, #0
 8008682:	dd01      	ble.n	8008688 <_dtoa_r+0x970>
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	3331      	adds	r3, #49	; 0x31
 8008688:	9a02      	ldr	r2, [sp, #8]
 800868a:	7013      	strb	r3, [r2, #0]
 800868c:	e774      	b.n	8008578 <_dtoa_r+0x860>
 800868e:	4638      	mov	r0, r7
 8008690:	e7b8      	b.n	8008604 <_dtoa_r+0x8ec>
 8008692:	2201      	movs	r2, #1
 8008694:	e7e1      	b.n	800865a <_dtoa_r+0x942>
 8008696:	f1ba 0f00 	cmp.w	sl, #0
 800869a:	db06      	blt.n	80086aa <_dtoa_r+0x992>
 800869c:	9906      	ldr	r1, [sp, #24]
 800869e:	ea41 0a0a 	orr.w	sl, r1, sl
 80086a2:	9907      	ldr	r1, [sp, #28]
 80086a4:	ea5a 0101 	orrs.w	r1, sl, r1
 80086a8:	d120      	bne.n	80086ec <_dtoa_r+0x9d4>
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	ddec      	ble.n	8008688 <_dtoa_r+0x970>
 80086ae:	4629      	mov	r1, r5
 80086b0:	2201      	movs	r2, #1
 80086b2:	4630      	mov	r0, r6
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	f000 fabb 	bl	8008c30 <__lshift>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4605      	mov	r5, r0
 80086be:	f000 fb27 	bl	8008d10 <__mcmp>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	dc02      	bgt.n	80086ce <_dtoa_r+0x9b6>
 80086c8:	d1de      	bne.n	8008688 <_dtoa_r+0x970>
 80086ca:	07da      	lsls	r2, r3, #31
 80086cc:	d5dc      	bpl.n	8008688 <_dtoa_r+0x970>
 80086ce:	2b39      	cmp	r3, #57	; 0x39
 80086d0:	d1d8      	bne.n	8008684 <_dtoa_r+0x96c>
 80086d2:	9a02      	ldr	r2, [sp, #8]
 80086d4:	2339      	movs	r3, #57	; 0x39
 80086d6:	7013      	strb	r3, [r2, #0]
 80086d8:	4643      	mov	r3, r8
 80086da:	4698      	mov	r8, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80086e2:	2a39      	cmp	r2, #57	; 0x39
 80086e4:	d051      	beq.n	800878a <_dtoa_r+0xa72>
 80086e6:	3201      	adds	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e745      	b.n	8008578 <_dtoa_r+0x860>
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	dd03      	ble.n	80086f8 <_dtoa_r+0x9e0>
 80086f0:	2b39      	cmp	r3, #57	; 0x39
 80086f2:	d0ee      	beq.n	80086d2 <_dtoa_r+0x9ba>
 80086f4:	3301      	adds	r3, #1
 80086f6:	e7c7      	b.n	8008688 <_dtoa_r+0x970>
 80086f8:	9a04      	ldr	r2, [sp, #16]
 80086fa:	9908      	ldr	r1, [sp, #32]
 80086fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008700:	428a      	cmp	r2, r1
 8008702:	d02b      	beq.n	800875c <_dtoa_r+0xa44>
 8008704:	4629      	mov	r1, r5
 8008706:	2300      	movs	r3, #0
 8008708:	220a      	movs	r2, #10
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f8e0 	bl	80088d0 <__multadd>
 8008710:	45b9      	cmp	r9, r7
 8008712:	4605      	mov	r5, r0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	f04f 020a 	mov.w	r2, #10
 800871c:	4649      	mov	r1, r9
 800871e:	4630      	mov	r0, r6
 8008720:	d107      	bne.n	8008732 <_dtoa_r+0xa1a>
 8008722:	f000 f8d5 	bl	80088d0 <__multadd>
 8008726:	4681      	mov	r9, r0
 8008728:	4607      	mov	r7, r0
 800872a:	9b04      	ldr	r3, [sp, #16]
 800872c:	3301      	adds	r3, #1
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	e774      	b.n	800861c <_dtoa_r+0x904>
 8008732:	f000 f8cd 	bl	80088d0 <__multadd>
 8008736:	4639      	mov	r1, r7
 8008738:	4681      	mov	r9, r0
 800873a:	2300      	movs	r3, #0
 800873c:	220a      	movs	r2, #10
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f8c6 	bl	80088d0 <__multadd>
 8008744:	4607      	mov	r7, r0
 8008746:	e7f0      	b.n	800872a <_dtoa_r+0xa12>
 8008748:	f1ba 0f00 	cmp.w	sl, #0
 800874c:	9a01      	ldr	r2, [sp, #4]
 800874e:	bfcc      	ite	gt
 8008750:	46d0      	movgt	r8, sl
 8008752:	f04f 0801 	movle.w	r8, #1
 8008756:	4490      	add	r8, r2
 8008758:	f04f 0900 	mov.w	r9, #0
 800875c:	4629      	mov	r1, r5
 800875e:	2201      	movs	r2, #1
 8008760:	4630      	mov	r0, r6
 8008762:	9302      	str	r3, [sp, #8]
 8008764:	f000 fa64 	bl	8008c30 <__lshift>
 8008768:	4621      	mov	r1, r4
 800876a:	4605      	mov	r5, r0
 800876c:	f000 fad0 	bl	8008d10 <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	dcb1      	bgt.n	80086d8 <_dtoa_r+0x9c0>
 8008774:	d102      	bne.n	800877c <_dtoa_r+0xa64>
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	07db      	lsls	r3, r3, #31
 800877a:	d4ad      	bmi.n	80086d8 <_dtoa_r+0x9c0>
 800877c:	4643      	mov	r3, r8
 800877e:	4698      	mov	r8, r3
 8008780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008784:	2a30      	cmp	r2, #48	; 0x30
 8008786:	d0fa      	beq.n	800877e <_dtoa_r+0xa66>
 8008788:	e6f6      	b.n	8008578 <_dtoa_r+0x860>
 800878a:	9a01      	ldr	r2, [sp, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d1a4      	bne.n	80086da <_dtoa_r+0x9c2>
 8008790:	f10b 0b01 	add.w	fp, fp, #1
 8008794:	2331      	movs	r3, #49	; 0x31
 8008796:	e778      	b.n	800868a <_dtoa_r+0x972>
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <_dtoa_r+0xad4>)
 800879a:	f7ff bb27 	b.w	8007dec <_dtoa_r+0xd4>
 800879e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f47f ab03 	bne.w	8007dac <_dtoa_r+0x94>
 80087a6:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <_dtoa_r+0xad8>)
 80087a8:	f7ff bb20 	b.w	8007dec <_dtoa_r+0xd4>
 80087ac:	f1ba 0f00 	cmp.w	sl, #0
 80087b0:	dc03      	bgt.n	80087ba <_dtoa_r+0xaa2>
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	f73f aec7 	bgt.w	8008548 <_dtoa_r+0x830>
 80087ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f7ff fa1b 	bl	8007bfc <quorem>
 80087c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087ca:	f808 3b01 	strb.w	r3, [r8], #1
 80087ce:	9a01      	ldr	r2, [sp, #4]
 80087d0:	eba8 0202 	sub.w	r2, r8, r2
 80087d4:	4592      	cmp	sl, r2
 80087d6:	ddb7      	ble.n	8008748 <_dtoa_r+0xa30>
 80087d8:	4629      	mov	r1, r5
 80087da:	2300      	movs	r3, #0
 80087dc:	220a      	movs	r2, #10
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f876 	bl	80088d0 <__multadd>
 80087e4:	4605      	mov	r5, r0
 80087e6:	e7ea      	b.n	80087be <_dtoa_r+0xaa6>
 80087e8:	0800a5f3 	.word	0x0800a5f3
 80087ec:	0800a550 	.word	0x0800a550
 80087f0:	0800a574 	.word	0x0800a574

080087f4 <_localeconv_r>:
 80087f4:	4800      	ldr	r0, [pc, #0]	; (80087f8 <_localeconv_r+0x4>)
 80087f6:	4770      	bx	lr
 80087f8:	2400016c 	.word	0x2400016c

080087fc <malloc>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	; (8008808 <malloc+0xc>)
 80087fe:	4601      	mov	r1, r0
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f000 bc09 	b.w	8009018 <_malloc_r>
 8008806:	bf00      	nop
 8008808:	24000018 	.word	0x24000018

0800880c <_Balloc>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008810:	4604      	mov	r4, r0
 8008812:	460d      	mov	r5, r1
 8008814:	b976      	cbnz	r6, 8008834 <_Balloc+0x28>
 8008816:	2010      	movs	r0, #16
 8008818:	f7ff fff0 	bl	80087fc <malloc>
 800881c:	4602      	mov	r2, r0
 800881e:	6260      	str	r0, [r4, #36]	; 0x24
 8008820:	b920      	cbnz	r0, 800882c <_Balloc+0x20>
 8008822:	4b18      	ldr	r3, [pc, #96]	; (8008884 <_Balloc+0x78>)
 8008824:	4818      	ldr	r0, [pc, #96]	; (8008888 <_Balloc+0x7c>)
 8008826:	2166      	movs	r1, #102	; 0x66
 8008828:	f000 fdd6 	bl	80093d8 <__assert_func>
 800882c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008830:	6006      	str	r6, [r0, #0]
 8008832:	60c6      	str	r6, [r0, #12]
 8008834:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008836:	68f3      	ldr	r3, [r6, #12]
 8008838:	b183      	cbz	r3, 800885c <_Balloc+0x50>
 800883a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008842:	b9b8      	cbnz	r0, 8008874 <_Balloc+0x68>
 8008844:	2101      	movs	r1, #1
 8008846:	fa01 f605 	lsl.w	r6, r1, r5
 800884a:	1d72      	adds	r2, r6, #5
 800884c:	0092      	lsls	r2, r2, #2
 800884e:	4620      	mov	r0, r4
 8008850:	f000 fb60 	bl	8008f14 <_calloc_r>
 8008854:	b160      	cbz	r0, 8008870 <_Balloc+0x64>
 8008856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800885a:	e00e      	b.n	800887a <_Balloc+0x6e>
 800885c:	2221      	movs	r2, #33	; 0x21
 800885e:	2104      	movs	r1, #4
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fb57 	bl	8008f14 <_calloc_r>
 8008866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008868:	60f0      	str	r0, [r6, #12]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e4      	bne.n	800883a <_Balloc+0x2e>
 8008870:	2000      	movs	r0, #0
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	6802      	ldr	r2, [r0, #0]
 8008876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800887a:	2300      	movs	r3, #0
 800887c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008880:	e7f7      	b.n	8008872 <_Balloc+0x66>
 8008882:	bf00      	nop
 8008884:	0800a581 	.word	0x0800a581
 8008888:	0800a604 	.word	0x0800a604

0800888c <_Bfree>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	b976      	cbnz	r6, 80088b4 <_Bfree+0x28>
 8008896:	2010      	movs	r0, #16
 8008898:	f7ff ffb0 	bl	80087fc <malloc>
 800889c:	4602      	mov	r2, r0
 800889e:	6268      	str	r0, [r5, #36]	; 0x24
 80088a0:	b920      	cbnz	r0, 80088ac <_Bfree+0x20>
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <_Bfree+0x3c>)
 80088a4:	4809      	ldr	r0, [pc, #36]	; (80088cc <_Bfree+0x40>)
 80088a6:	218a      	movs	r1, #138	; 0x8a
 80088a8:	f000 fd96 	bl	80093d8 <__assert_func>
 80088ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088b0:	6006      	str	r6, [r0, #0]
 80088b2:	60c6      	str	r6, [r0, #12]
 80088b4:	b13c      	cbz	r4, 80088c6 <_Bfree+0x3a>
 80088b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088b8:	6862      	ldr	r2, [r4, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088c0:	6021      	str	r1, [r4, #0]
 80088c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	0800a581 	.word	0x0800a581
 80088cc:	0800a604 	.word	0x0800a604

080088d0 <__multadd>:
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	690d      	ldr	r5, [r1, #16]
 80088d6:	4607      	mov	r7, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	461e      	mov	r6, r3
 80088dc:	f101 0c14 	add.w	ip, r1, #20
 80088e0:	2000      	movs	r0, #0
 80088e2:	f8dc 3000 	ldr.w	r3, [ip]
 80088e6:	b299      	uxth	r1, r3
 80088e8:	fb02 6101 	mla	r1, r2, r1, r6
 80088ec:	0c1e      	lsrs	r6, r3, #16
 80088ee:	0c0b      	lsrs	r3, r1, #16
 80088f0:	fb02 3306 	mla	r3, r2, r6, r3
 80088f4:	b289      	uxth	r1, r1
 80088f6:	3001      	adds	r0, #1
 80088f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088fc:	4285      	cmp	r5, r0
 80088fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008906:	dcec      	bgt.n	80088e2 <__multadd+0x12>
 8008908:	b30e      	cbz	r6, 800894e <__multadd+0x7e>
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	42ab      	cmp	r3, r5
 800890e:	dc19      	bgt.n	8008944 <__multadd+0x74>
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	4638      	mov	r0, r7
 8008914:	3101      	adds	r1, #1
 8008916:	f7ff ff79 	bl	800880c <_Balloc>
 800891a:	4680      	mov	r8, r0
 800891c:	b928      	cbnz	r0, 800892a <__multadd+0x5a>
 800891e:	4602      	mov	r2, r0
 8008920:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <__multadd+0x84>)
 8008922:	480d      	ldr	r0, [pc, #52]	; (8008958 <__multadd+0x88>)
 8008924:	21b5      	movs	r1, #181	; 0xb5
 8008926:	f000 fd57 	bl	80093d8 <__assert_func>
 800892a:	6922      	ldr	r2, [r4, #16]
 800892c:	3202      	adds	r2, #2
 800892e:	f104 010c 	add.w	r1, r4, #12
 8008932:	0092      	lsls	r2, r2, #2
 8008934:	300c      	adds	r0, #12
 8008936:	f7fe fce7 	bl	8007308 <memcpy>
 800893a:	4621      	mov	r1, r4
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff ffa5 	bl	800888c <_Bfree>
 8008942:	4644      	mov	r4, r8
 8008944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008948:	3501      	adds	r5, #1
 800894a:	615e      	str	r6, [r3, #20]
 800894c:	6125      	str	r5, [r4, #16]
 800894e:	4620      	mov	r0, r4
 8008950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008954:	0800a5f3 	.word	0x0800a5f3
 8008958:	0800a604 	.word	0x0800a604

0800895c <__hi0bits>:
 800895c:	0c03      	lsrs	r3, r0, #16
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	b9d3      	cbnz	r3, 8008998 <__hi0bits+0x3c>
 8008962:	0400      	lsls	r0, r0, #16
 8008964:	2310      	movs	r3, #16
 8008966:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800896a:	bf04      	itt	eq
 800896c:	0200      	lsleq	r0, r0, #8
 800896e:	3308      	addeq	r3, #8
 8008970:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008974:	bf04      	itt	eq
 8008976:	0100      	lsleq	r0, r0, #4
 8008978:	3304      	addeq	r3, #4
 800897a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800897e:	bf04      	itt	eq
 8008980:	0080      	lsleq	r0, r0, #2
 8008982:	3302      	addeq	r3, #2
 8008984:	2800      	cmp	r0, #0
 8008986:	db05      	blt.n	8008994 <__hi0bits+0x38>
 8008988:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800898c:	f103 0301 	add.w	r3, r3, #1
 8008990:	bf08      	it	eq
 8008992:	2320      	moveq	r3, #32
 8008994:	4618      	mov	r0, r3
 8008996:	4770      	bx	lr
 8008998:	2300      	movs	r3, #0
 800899a:	e7e4      	b.n	8008966 <__hi0bits+0xa>

0800899c <__lo0bits>:
 800899c:	6803      	ldr	r3, [r0, #0]
 800899e:	f013 0207 	ands.w	r2, r3, #7
 80089a2:	4601      	mov	r1, r0
 80089a4:	d00b      	beq.n	80089be <__lo0bits+0x22>
 80089a6:	07da      	lsls	r2, r3, #31
 80089a8:	d423      	bmi.n	80089f2 <__lo0bits+0x56>
 80089aa:	0798      	lsls	r0, r3, #30
 80089ac:	bf49      	itett	mi
 80089ae:	085b      	lsrmi	r3, r3, #1
 80089b0:	089b      	lsrpl	r3, r3, #2
 80089b2:	2001      	movmi	r0, #1
 80089b4:	600b      	strmi	r3, [r1, #0]
 80089b6:	bf5c      	itt	pl
 80089b8:	600b      	strpl	r3, [r1, #0]
 80089ba:	2002      	movpl	r0, #2
 80089bc:	4770      	bx	lr
 80089be:	b298      	uxth	r0, r3
 80089c0:	b9a8      	cbnz	r0, 80089ee <__lo0bits+0x52>
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	2010      	movs	r0, #16
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	b90a      	cbnz	r2, 80089ce <__lo0bits+0x32>
 80089ca:	3008      	adds	r0, #8
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	071a      	lsls	r2, r3, #28
 80089d0:	bf04      	itt	eq
 80089d2:	091b      	lsreq	r3, r3, #4
 80089d4:	3004      	addeq	r0, #4
 80089d6:	079a      	lsls	r2, r3, #30
 80089d8:	bf04      	itt	eq
 80089da:	089b      	lsreq	r3, r3, #2
 80089dc:	3002      	addeq	r0, #2
 80089de:	07da      	lsls	r2, r3, #31
 80089e0:	d403      	bmi.n	80089ea <__lo0bits+0x4e>
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	f100 0001 	add.w	r0, r0, #1
 80089e8:	d005      	beq.n	80089f6 <__lo0bits+0x5a>
 80089ea:	600b      	str	r3, [r1, #0]
 80089ec:	4770      	bx	lr
 80089ee:	4610      	mov	r0, r2
 80089f0:	e7e9      	b.n	80089c6 <__lo0bits+0x2a>
 80089f2:	2000      	movs	r0, #0
 80089f4:	4770      	bx	lr
 80089f6:	2020      	movs	r0, #32
 80089f8:	4770      	bx	lr
	...

080089fc <__i2b>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	460c      	mov	r4, r1
 8008a00:	2101      	movs	r1, #1
 8008a02:	f7ff ff03 	bl	800880c <_Balloc>
 8008a06:	4602      	mov	r2, r0
 8008a08:	b928      	cbnz	r0, 8008a16 <__i2b+0x1a>
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <__i2b+0x24>)
 8008a0c:	4805      	ldr	r0, [pc, #20]	; (8008a24 <__i2b+0x28>)
 8008a0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a12:	f000 fce1 	bl	80093d8 <__assert_func>
 8008a16:	2301      	movs	r3, #1
 8008a18:	6144      	str	r4, [r0, #20]
 8008a1a:	6103      	str	r3, [r0, #16]
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	bf00      	nop
 8008a20:	0800a5f3 	.word	0x0800a5f3
 8008a24:	0800a604 	.word	0x0800a604

08008a28 <__multiply>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	4691      	mov	r9, r2
 8008a2e:	690a      	ldr	r2, [r1, #16]
 8008a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	bfb8      	it	lt
 8008a38:	460b      	movlt	r3, r1
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	bfbc      	itt	lt
 8008a3e:	464c      	movlt	r4, r9
 8008a40:	4699      	movlt	r9, r3
 8008a42:	6927      	ldr	r7, [r4, #16]
 8008a44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a48:	68a3      	ldr	r3, [r4, #8]
 8008a4a:	6861      	ldr	r1, [r4, #4]
 8008a4c:	eb07 060a 	add.w	r6, r7, sl
 8008a50:	42b3      	cmp	r3, r6
 8008a52:	b085      	sub	sp, #20
 8008a54:	bfb8      	it	lt
 8008a56:	3101      	addlt	r1, #1
 8008a58:	f7ff fed8 	bl	800880c <_Balloc>
 8008a5c:	b930      	cbnz	r0, 8008a6c <__multiply+0x44>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	4b44      	ldr	r3, [pc, #272]	; (8008b74 <__multiply+0x14c>)
 8008a62:	4845      	ldr	r0, [pc, #276]	; (8008b78 <__multiply+0x150>)
 8008a64:	f240 115d 	movw	r1, #349	; 0x15d
 8008a68:	f000 fcb6 	bl	80093d8 <__assert_func>
 8008a6c:	f100 0514 	add.w	r5, r0, #20
 8008a70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a74:	462b      	mov	r3, r5
 8008a76:	2200      	movs	r2, #0
 8008a78:	4543      	cmp	r3, r8
 8008a7a:	d321      	bcc.n	8008ac0 <__multiply+0x98>
 8008a7c:	f104 0314 	add.w	r3, r4, #20
 8008a80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a84:	f109 0314 	add.w	r3, r9, #20
 8008a88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a8c:	9202      	str	r2, [sp, #8]
 8008a8e:	1b3a      	subs	r2, r7, r4
 8008a90:	3a15      	subs	r2, #21
 8008a92:	f022 0203 	bic.w	r2, r2, #3
 8008a96:	3204      	adds	r2, #4
 8008a98:	f104 0115 	add.w	r1, r4, #21
 8008a9c:	428f      	cmp	r7, r1
 8008a9e:	bf38      	it	cc
 8008aa0:	2204      	movcc	r2, #4
 8008aa2:	9201      	str	r2, [sp, #4]
 8008aa4:	9a02      	ldr	r2, [sp, #8]
 8008aa6:	9303      	str	r3, [sp, #12]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d80c      	bhi.n	8008ac6 <__multiply+0x9e>
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	dd03      	ble.n	8008ab8 <__multiply+0x90>
 8008ab0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d05a      	beq.n	8008b6e <__multiply+0x146>
 8008ab8:	6106      	str	r6, [r0, #16]
 8008aba:	b005      	add	sp, #20
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	f843 2b04 	str.w	r2, [r3], #4
 8008ac4:	e7d8      	b.n	8008a78 <__multiply+0x50>
 8008ac6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008aca:	f1ba 0f00 	cmp.w	sl, #0
 8008ace:	d024      	beq.n	8008b1a <__multiply+0xf2>
 8008ad0:	f104 0e14 	add.w	lr, r4, #20
 8008ad4:	46a9      	mov	r9, r5
 8008ad6:	f04f 0c00 	mov.w	ip, #0
 8008ada:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ade:	f8d9 1000 	ldr.w	r1, [r9]
 8008ae2:	fa1f fb82 	uxth.w	fp, r2
 8008ae6:	b289      	uxth	r1, r1
 8008ae8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008af0:	f8d9 2000 	ldr.w	r2, [r9]
 8008af4:	4461      	add	r1, ip
 8008af6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008afa:	fb0a c20b 	mla	r2, sl, fp, ip
 8008afe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b02:	b289      	uxth	r1, r1
 8008b04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b08:	4577      	cmp	r7, lr
 8008b0a:	f849 1b04 	str.w	r1, [r9], #4
 8008b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b12:	d8e2      	bhi.n	8008ada <__multiply+0xb2>
 8008b14:	9a01      	ldr	r2, [sp, #4]
 8008b16:	f845 c002 	str.w	ip, [r5, r2]
 8008b1a:	9a03      	ldr	r2, [sp, #12]
 8008b1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b20:	3304      	adds	r3, #4
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d020      	beq.n	8008b6a <__multiply+0x142>
 8008b28:	6829      	ldr	r1, [r5, #0]
 8008b2a:	f104 0c14 	add.w	ip, r4, #20
 8008b2e:	46ae      	mov	lr, r5
 8008b30:	f04f 0a00 	mov.w	sl, #0
 8008b34:	f8bc b000 	ldrh.w	fp, [ip]
 8008b38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b3c:	fb09 220b 	mla	r2, r9, fp, r2
 8008b40:	4492      	add	sl, r2
 8008b42:	b289      	uxth	r1, r1
 8008b44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b48:	f84e 1b04 	str.w	r1, [lr], #4
 8008b4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b50:	f8be 1000 	ldrh.w	r1, [lr]
 8008b54:	0c12      	lsrs	r2, r2, #16
 8008b56:	fb09 1102 	mla	r1, r9, r2, r1
 8008b5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b5e:	4567      	cmp	r7, ip
 8008b60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b64:	d8e6      	bhi.n	8008b34 <__multiply+0x10c>
 8008b66:	9a01      	ldr	r2, [sp, #4]
 8008b68:	50a9      	str	r1, [r5, r2]
 8008b6a:	3504      	adds	r5, #4
 8008b6c:	e79a      	b.n	8008aa4 <__multiply+0x7c>
 8008b6e:	3e01      	subs	r6, #1
 8008b70:	e79c      	b.n	8008aac <__multiply+0x84>
 8008b72:	bf00      	nop
 8008b74:	0800a5f3 	.word	0x0800a5f3
 8008b78:	0800a604 	.word	0x0800a604

08008b7c <__pow5mult>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	4615      	mov	r5, r2
 8008b82:	f012 0203 	ands.w	r2, r2, #3
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	d007      	beq.n	8008b9c <__pow5mult+0x20>
 8008b8c:	4c25      	ldr	r4, [pc, #148]	; (8008c24 <__pow5mult+0xa8>)
 8008b8e:	3a01      	subs	r2, #1
 8008b90:	2300      	movs	r3, #0
 8008b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b96:	f7ff fe9b 	bl	80088d0 <__multadd>
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	10ad      	asrs	r5, r5, #2
 8008b9e:	d03d      	beq.n	8008c1c <__pow5mult+0xa0>
 8008ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ba2:	b97c      	cbnz	r4, 8008bc4 <__pow5mult+0x48>
 8008ba4:	2010      	movs	r0, #16
 8008ba6:	f7ff fe29 	bl	80087fc <malloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6270      	str	r0, [r6, #36]	; 0x24
 8008bae:	b928      	cbnz	r0, 8008bbc <__pow5mult+0x40>
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <__pow5mult+0xac>)
 8008bb2:	481e      	ldr	r0, [pc, #120]	; (8008c2c <__pow5mult+0xb0>)
 8008bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bb8:	f000 fc0e 	bl	80093d8 <__assert_func>
 8008bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc0:	6004      	str	r4, [r0, #0]
 8008bc2:	60c4      	str	r4, [r0, #12]
 8008bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bcc:	b94c      	cbnz	r4, 8008be2 <__pow5mult+0x66>
 8008bce:	f240 2171 	movw	r1, #625	; 0x271
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff ff12 	bl	80089fc <__i2b>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bde:	4604      	mov	r4, r0
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	07eb      	lsls	r3, r5, #31
 8008be8:	d50a      	bpl.n	8008c00 <__pow5mult+0x84>
 8008bea:	4639      	mov	r1, r7
 8008bec:	4622      	mov	r2, r4
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ff1a 	bl	8008a28 <__multiply>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff fe47 	bl	800888c <_Bfree>
 8008bfe:	4647      	mov	r7, r8
 8008c00:	106d      	asrs	r5, r5, #1
 8008c02:	d00b      	beq.n	8008c1c <__pow5mult+0xa0>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	b938      	cbnz	r0, 8008c18 <__pow5mult+0x9c>
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ff0b 	bl	8008a28 <__multiply>
 8008c12:	6020      	str	r0, [r4, #0]
 8008c14:	f8c0 9000 	str.w	r9, [r0]
 8008c18:	4604      	mov	r4, r0
 8008c1a:	e7e4      	b.n	8008be6 <__pow5mult+0x6a>
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c22:	bf00      	nop
 8008c24:	0800a750 	.word	0x0800a750
 8008c28:	0800a581 	.word	0x0800a581
 8008c2c:	0800a604 	.word	0x0800a604

08008c30 <__lshift>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	460c      	mov	r4, r1
 8008c36:	6849      	ldr	r1, [r1, #4]
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c3e:	68a3      	ldr	r3, [r4, #8]
 8008c40:	4607      	mov	r7, r0
 8008c42:	4691      	mov	r9, r2
 8008c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c48:	f108 0601 	add.w	r6, r8, #1
 8008c4c:	42b3      	cmp	r3, r6
 8008c4e:	db0b      	blt.n	8008c68 <__lshift+0x38>
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff fddb 	bl	800880c <_Balloc>
 8008c56:	4605      	mov	r5, r0
 8008c58:	b948      	cbnz	r0, 8008c6e <__lshift+0x3e>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <__lshift+0xd8>)
 8008c5e:	482b      	ldr	r0, [pc, #172]	; (8008d0c <__lshift+0xdc>)
 8008c60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c64:	f000 fbb8 	bl	80093d8 <__assert_func>
 8008c68:	3101      	adds	r1, #1
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	e7ee      	b.n	8008c4c <__lshift+0x1c>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f100 0114 	add.w	r1, r0, #20
 8008c74:	f100 0210 	add.w	r2, r0, #16
 8008c78:	4618      	mov	r0, r3
 8008c7a:	4553      	cmp	r3, sl
 8008c7c:	db37      	blt.n	8008cee <__lshift+0xbe>
 8008c7e:	6920      	ldr	r0, [r4, #16]
 8008c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c84:	f104 0314 	add.w	r3, r4, #20
 8008c88:	f019 091f 	ands.w	r9, r9, #31
 8008c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c94:	d02f      	beq.n	8008cf6 <__lshift+0xc6>
 8008c96:	f1c9 0e20 	rsb	lr, r9, #32
 8008c9a:	468a      	mov	sl, r1
 8008c9c:	f04f 0c00 	mov.w	ip, #0
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	fa02 f209 	lsl.w	r2, r2, r9
 8008ca6:	ea42 020c 	orr.w	r2, r2, ip
 8008caa:	f84a 2b04 	str.w	r2, [sl], #4
 8008cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cb8:	d8f2      	bhi.n	8008ca0 <__lshift+0x70>
 8008cba:	1b03      	subs	r3, r0, r4
 8008cbc:	3b15      	subs	r3, #21
 8008cbe:	f023 0303 	bic.w	r3, r3, #3
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	f104 0215 	add.w	r2, r4, #21
 8008cc8:	4290      	cmp	r0, r2
 8008cca:	bf38      	it	cc
 8008ccc:	2304      	movcc	r3, #4
 8008cce:	f841 c003 	str.w	ip, [r1, r3]
 8008cd2:	f1bc 0f00 	cmp.w	ip, #0
 8008cd6:	d001      	beq.n	8008cdc <__lshift+0xac>
 8008cd8:	f108 0602 	add.w	r6, r8, #2
 8008cdc:	3e01      	subs	r6, #1
 8008cde:	4638      	mov	r0, r7
 8008ce0:	612e      	str	r6, [r5, #16]
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f7ff fdd2 	bl	800888c <_Bfree>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	e7c1      	b.n	8008c7a <__lshift+0x4a>
 8008cf6:	3904      	subs	r1, #4
 8008cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d00:	4298      	cmp	r0, r3
 8008d02:	d8f9      	bhi.n	8008cf8 <__lshift+0xc8>
 8008d04:	e7ea      	b.n	8008cdc <__lshift+0xac>
 8008d06:	bf00      	nop
 8008d08:	0800a5f3 	.word	0x0800a5f3
 8008d0c:	0800a604 	.word	0x0800a604

08008d10 <__mcmp>:
 8008d10:	b530      	push	{r4, r5, lr}
 8008d12:	6902      	ldr	r2, [r0, #16]
 8008d14:	690c      	ldr	r4, [r1, #16]
 8008d16:	1b12      	subs	r2, r2, r4
 8008d18:	d10e      	bne.n	8008d38 <__mcmp+0x28>
 8008d1a:	f100 0314 	add.w	r3, r0, #20
 8008d1e:	3114      	adds	r1, #20
 8008d20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d30:	42a5      	cmp	r5, r4
 8008d32:	d003      	beq.n	8008d3c <__mcmp+0x2c>
 8008d34:	d305      	bcc.n	8008d42 <__mcmp+0x32>
 8008d36:	2201      	movs	r2, #1
 8008d38:	4610      	mov	r0, r2
 8008d3a:	bd30      	pop	{r4, r5, pc}
 8008d3c:	4283      	cmp	r3, r0
 8008d3e:	d3f3      	bcc.n	8008d28 <__mcmp+0x18>
 8008d40:	e7fa      	b.n	8008d38 <__mcmp+0x28>
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295
 8008d46:	e7f7      	b.n	8008d38 <__mcmp+0x28>

08008d48 <__mdiff>:
 8008d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	4606      	mov	r6, r0
 8008d50:	4611      	mov	r1, r2
 8008d52:	4620      	mov	r0, r4
 8008d54:	4690      	mov	r8, r2
 8008d56:	f7ff ffdb 	bl	8008d10 <__mcmp>
 8008d5a:	1e05      	subs	r5, r0, #0
 8008d5c:	d110      	bne.n	8008d80 <__mdiff+0x38>
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff fd53 	bl	800880c <_Balloc>
 8008d66:	b930      	cbnz	r0, 8008d76 <__mdiff+0x2e>
 8008d68:	4b3a      	ldr	r3, [pc, #232]	; (8008e54 <__mdiff+0x10c>)
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	f240 2132 	movw	r1, #562	; 0x232
 8008d70:	4839      	ldr	r0, [pc, #228]	; (8008e58 <__mdiff+0x110>)
 8008d72:	f000 fb31 	bl	80093d8 <__assert_func>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d80:	bfa4      	itt	ge
 8008d82:	4643      	movge	r3, r8
 8008d84:	46a0      	movge	r8, r4
 8008d86:	4630      	mov	r0, r6
 8008d88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d8c:	bfa6      	itte	ge
 8008d8e:	461c      	movge	r4, r3
 8008d90:	2500      	movge	r5, #0
 8008d92:	2501      	movlt	r5, #1
 8008d94:	f7ff fd3a 	bl	800880c <_Balloc>
 8008d98:	b920      	cbnz	r0, 8008da4 <__mdiff+0x5c>
 8008d9a:	4b2e      	ldr	r3, [pc, #184]	; (8008e54 <__mdiff+0x10c>)
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008da2:	e7e5      	b.n	8008d70 <__mdiff+0x28>
 8008da4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008da8:	6926      	ldr	r6, [r4, #16]
 8008daa:	60c5      	str	r5, [r0, #12]
 8008dac:	f104 0914 	add.w	r9, r4, #20
 8008db0:	f108 0514 	add.w	r5, r8, #20
 8008db4:	f100 0e14 	add.w	lr, r0, #20
 8008db8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dc0:	f108 0210 	add.w	r2, r8, #16
 8008dc4:	46f2      	mov	sl, lr
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dd0:	fa1f f883 	uxth.w	r8, r3
 8008dd4:	fa11 f18b 	uxtah	r1, r1, fp
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	eba1 0808 	sub.w	r8, r1, r8
 8008dde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008de2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008de6:	fa1f f888 	uxth.w	r8, r8
 8008dea:	1419      	asrs	r1, r3, #16
 8008dec:	454e      	cmp	r6, r9
 8008dee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008df2:	f84a 3b04 	str.w	r3, [sl], #4
 8008df6:	d8e7      	bhi.n	8008dc8 <__mdiff+0x80>
 8008df8:	1b33      	subs	r3, r6, r4
 8008dfa:	3b15      	subs	r3, #21
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	3304      	adds	r3, #4
 8008e02:	3415      	adds	r4, #21
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	bf38      	it	cc
 8008e08:	2304      	movcc	r3, #4
 8008e0a:	441d      	add	r5, r3
 8008e0c:	4473      	add	r3, lr
 8008e0e:	469e      	mov	lr, r3
 8008e10:	462e      	mov	r6, r5
 8008e12:	4566      	cmp	r6, ip
 8008e14:	d30e      	bcc.n	8008e34 <__mdiff+0xec>
 8008e16:	f10c 0203 	add.w	r2, ip, #3
 8008e1a:	1b52      	subs	r2, r2, r5
 8008e1c:	f022 0203 	bic.w	r2, r2, #3
 8008e20:	3d03      	subs	r5, #3
 8008e22:	45ac      	cmp	ip, r5
 8008e24:	bf38      	it	cc
 8008e26:	2200      	movcc	r2, #0
 8008e28:	441a      	add	r2, r3
 8008e2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e2e:	b17b      	cbz	r3, 8008e50 <__mdiff+0x108>
 8008e30:	6107      	str	r7, [r0, #16]
 8008e32:	e7a3      	b.n	8008d7c <__mdiff+0x34>
 8008e34:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e38:	fa11 f288 	uxtah	r2, r1, r8
 8008e3c:	1414      	asrs	r4, r2, #16
 8008e3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e42:	b292      	uxth	r2, r2
 8008e44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e48:	f84e 2b04 	str.w	r2, [lr], #4
 8008e4c:	1421      	asrs	r1, r4, #16
 8008e4e:	e7e0      	b.n	8008e12 <__mdiff+0xca>
 8008e50:	3f01      	subs	r7, #1
 8008e52:	e7ea      	b.n	8008e2a <__mdiff+0xe2>
 8008e54:	0800a5f3 	.word	0x0800a5f3
 8008e58:	0800a604 	.word	0x0800a604

08008e5c <__d2b>:
 8008e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e60:	4689      	mov	r9, r1
 8008e62:	2101      	movs	r1, #1
 8008e64:	ec57 6b10 	vmov	r6, r7, d0
 8008e68:	4690      	mov	r8, r2
 8008e6a:	f7ff fccf 	bl	800880c <_Balloc>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	b930      	cbnz	r0, 8008e80 <__d2b+0x24>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <__d2b+0xb0>)
 8008e76:	4826      	ldr	r0, [pc, #152]	; (8008f10 <__d2b+0xb4>)
 8008e78:	f240 310a 	movw	r1, #778	; 0x30a
 8008e7c:	f000 faac 	bl	80093d8 <__assert_func>
 8008e80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e88:	bb35      	cbnz	r5, 8008ed8 <__d2b+0x7c>
 8008e8a:	2e00      	cmp	r6, #0
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	d028      	beq.n	8008ee2 <__d2b+0x86>
 8008e90:	4668      	mov	r0, sp
 8008e92:	9600      	str	r6, [sp, #0]
 8008e94:	f7ff fd82 	bl	800899c <__lo0bits>
 8008e98:	9900      	ldr	r1, [sp, #0]
 8008e9a:	b300      	cbz	r0, 8008ede <__d2b+0x82>
 8008e9c:	9a01      	ldr	r2, [sp, #4]
 8008e9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	40c2      	lsrs	r2, r0
 8008eaa:	6163      	str	r3, [r4, #20]
 8008eac:	9201      	str	r2, [sp, #4]
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	61a3      	str	r3, [r4, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bf14      	ite	ne
 8008eb6:	2202      	movne	r2, #2
 8008eb8:	2201      	moveq	r2, #1
 8008eba:	6122      	str	r2, [r4, #16]
 8008ebc:	b1d5      	cbz	r5, 8008ef4 <__d2b+0x98>
 8008ebe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ec2:	4405      	add	r5, r0
 8008ec4:	f8c9 5000 	str.w	r5, [r9]
 8008ec8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ecc:	f8c8 0000 	str.w	r0, [r8]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008edc:	e7d5      	b.n	8008e8a <__d2b+0x2e>
 8008ede:	6161      	str	r1, [r4, #20]
 8008ee0:	e7e5      	b.n	8008eae <__d2b+0x52>
 8008ee2:	a801      	add	r0, sp, #4
 8008ee4:	f7ff fd5a 	bl	800899c <__lo0bits>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	2201      	movs	r2, #1
 8008eee:	6122      	str	r2, [r4, #16]
 8008ef0:	3020      	adds	r0, #32
 8008ef2:	e7e3      	b.n	8008ebc <__d2b+0x60>
 8008ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008efc:	f8c9 0000 	str.w	r0, [r9]
 8008f00:	6918      	ldr	r0, [r3, #16]
 8008f02:	f7ff fd2b 	bl	800895c <__hi0bits>
 8008f06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f0a:	e7df      	b.n	8008ecc <__d2b+0x70>
 8008f0c:	0800a5f3 	.word	0x0800a5f3
 8008f10:	0800a604 	.word	0x0800a604

08008f14 <_calloc_r>:
 8008f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f16:	fba1 2402 	umull	r2, r4, r1, r2
 8008f1a:	b94c      	cbnz	r4, 8008f30 <_calloc_r+0x1c>
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	9201      	str	r2, [sp, #4]
 8008f20:	f000 f87a 	bl	8009018 <_malloc_r>
 8008f24:	9a01      	ldr	r2, [sp, #4]
 8008f26:	4605      	mov	r5, r0
 8008f28:	b930      	cbnz	r0, 8008f38 <_calloc_r+0x24>
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bd30      	pop	{r4, r5, pc}
 8008f30:	220c      	movs	r2, #12
 8008f32:	6002      	str	r2, [r0, #0]
 8008f34:	2500      	movs	r5, #0
 8008f36:	e7f8      	b.n	8008f2a <_calloc_r+0x16>
 8008f38:	4621      	mov	r1, r4
 8008f3a:	f7fe f9f3 	bl	8007324 <memset>
 8008f3e:	e7f4      	b.n	8008f2a <_calloc_r+0x16>

08008f40 <_free_r>:
 8008f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f42:	2900      	cmp	r1, #0
 8008f44:	d044      	beq.n	8008fd0 <_free_r+0x90>
 8008f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f4a:	9001      	str	r0, [sp, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f52:	bfb8      	it	lt
 8008f54:	18e4      	addlt	r4, r4, r3
 8008f56:	f000 fa9b 	bl	8009490 <__malloc_lock>
 8008f5a:	4a1e      	ldr	r2, [pc, #120]	; (8008fd4 <_free_r+0x94>)
 8008f5c:	9801      	ldr	r0, [sp, #4]
 8008f5e:	6813      	ldr	r3, [r2, #0]
 8008f60:	b933      	cbnz	r3, 8008f70 <_free_r+0x30>
 8008f62:	6063      	str	r3, [r4, #4]
 8008f64:	6014      	str	r4, [r2, #0]
 8008f66:	b003      	add	sp, #12
 8008f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f6c:	f000 ba96 	b.w	800949c <__malloc_unlock>
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	d908      	bls.n	8008f86 <_free_r+0x46>
 8008f74:	6825      	ldr	r5, [r4, #0]
 8008f76:	1961      	adds	r1, r4, r5
 8008f78:	428b      	cmp	r3, r1
 8008f7a:	bf01      	itttt	eq
 8008f7c:	6819      	ldreq	r1, [r3, #0]
 8008f7e:	685b      	ldreq	r3, [r3, #4]
 8008f80:	1949      	addeq	r1, r1, r5
 8008f82:	6021      	streq	r1, [r4, #0]
 8008f84:	e7ed      	b.n	8008f62 <_free_r+0x22>
 8008f86:	461a      	mov	r2, r3
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	b10b      	cbz	r3, 8008f90 <_free_r+0x50>
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d9fa      	bls.n	8008f86 <_free_r+0x46>
 8008f90:	6811      	ldr	r1, [r2, #0]
 8008f92:	1855      	adds	r5, r2, r1
 8008f94:	42a5      	cmp	r5, r4
 8008f96:	d10b      	bne.n	8008fb0 <_free_r+0x70>
 8008f98:	6824      	ldr	r4, [r4, #0]
 8008f9a:	4421      	add	r1, r4
 8008f9c:	1854      	adds	r4, r2, r1
 8008f9e:	42a3      	cmp	r3, r4
 8008fa0:	6011      	str	r1, [r2, #0]
 8008fa2:	d1e0      	bne.n	8008f66 <_free_r+0x26>
 8008fa4:	681c      	ldr	r4, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	6053      	str	r3, [r2, #4]
 8008faa:	4421      	add	r1, r4
 8008fac:	6011      	str	r1, [r2, #0]
 8008fae:	e7da      	b.n	8008f66 <_free_r+0x26>
 8008fb0:	d902      	bls.n	8008fb8 <_free_r+0x78>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	e7d6      	b.n	8008f66 <_free_r+0x26>
 8008fb8:	6825      	ldr	r5, [r4, #0]
 8008fba:	1961      	adds	r1, r4, r5
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf04      	itt	eq
 8008fc0:	6819      	ldreq	r1, [r3, #0]
 8008fc2:	685b      	ldreq	r3, [r3, #4]
 8008fc4:	6063      	str	r3, [r4, #4]
 8008fc6:	bf04      	itt	eq
 8008fc8:	1949      	addeq	r1, r1, r5
 8008fca:	6021      	streq	r1, [r4, #0]
 8008fcc:	6054      	str	r4, [r2, #4]
 8008fce:	e7ca      	b.n	8008f66 <_free_r+0x26>
 8008fd0:	b003      	add	sp, #12
 8008fd2:	bd30      	pop	{r4, r5, pc}
 8008fd4:	24000510 	.word	0x24000510

08008fd8 <sbrk_aligned>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	4e0e      	ldr	r6, [pc, #56]	; (8009014 <sbrk_aligned+0x3c>)
 8008fdc:	460c      	mov	r4, r1
 8008fde:	6831      	ldr	r1, [r6, #0]
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	b911      	cbnz	r1, 8008fea <sbrk_aligned+0x12>
 8008fe4:	f000 f9e8 	bl	80093b8 <_sbrk_r>
 8008fe8:	6030      	str	r0, [r6, #0]
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 f9e3 	bl	80093b8 <_sbrk_r>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d00a      	beq.n	800900c <sbrk_aligned+0x34>
 8008ff6:	1cc4      	adds	r4, r0, #3
 8008ff8:	f024 0403 	bic.w	r4, r4, #3
 8008ffc:	42a0      	cmp	r0, r4
 8008ffe:	d007      	beq.n	8009010 <sbrk_aligned+0x38>
 8009000:	1a21      	subs	r1, r4, r0
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f9d8 	bl	80093b8 <_sbrk_r>
 8009008:	3001      	adds	r0, #1
 800900a:	d101      	bne.n	8009010 <sbrk_aligned+0x38>
 800900c:	f04f 34ff 	mov.w	r4, #4294967295
 8009010:	4620      	mov	r0, r4
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	24000514 	.word	0x24000514

08009018 <_malloc_r>:
 8009018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	1ccd      	adds	r5, r1, #3
 800901e:	f025 0503 	bic.w	r5, r5, #3
 8009022:	3508      	adds	r5, #8
 8009024:	2d0c      	cmp	r5, #12
 8009026:	bf38      	it	cc
 8009028:	250c      	movcc	r5, #12
 800902a:	2d00      	cmp	r5, #0
 800902c:	4607      	mov	r7, r0
 800902e:	db01      	blt.n	8009034 <_malloc_r+0x1c>
 8009030:	42a9      	cmp	r1, r5
 8009032:	d905      	bls.n	8009040 <_malloc_r+0x28>
 8009034:	230c      	movs	r3, #12
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	2600      	movs	r6, #0
 800903a:	4630      	mov	r0, r6
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009040:	4e2e      	ldr	r6, [pc, #184]	; (80090fc <_malloc_r+0xe4>)
 8009042:	f000 fa25 	bl	8009490 <__malloc_lock>
 8009046:	6833      	ldr	r3, [r6, #0]
 8009048:	461c      	mov	r4, r3
 800904a:	bb34      	cbnz	r4, 800909a <_malloc_r+0x82>
 800904c:	4629      	mov	r1, r5
 800904e:	4638      	mov	r0, r7
 8009050:	f7ff ffc2 	bl	8008fd8 <sbrk_aligned>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	4604      	mov	r4, r0
 8009058:	d14d      	bne.n	80090f6 <_malloc_r+0xde>
 800905a:	6834      	ldr	r4, [r6, #0]
 800905c:	4626      	mov	r6, r4
 800905e:	2e00      	cmp	r6, #0
 8009060:	d140      	bne.n	80090e4 <_malloc_r+0xcc>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	4631      	mov	r1, r6
 8009066:	4638      	mov	r0, r7
 8009068:	eb04 0803 	add.w	r8, r4, r3
 800906c:	f000 f9a4 	bl	80093b8 <_sbrk_r>
 8009070:	4580      	cmp	r8, r0
 8009072:	d13a      	bne.n	80090ea <_malloc_r+0xd2>
 8009074:	6821      	ldr	r1, [r4, #0]
 8009076:	3503      	adds	r5, #3
 8009078:	1a6d      	subs	r5, r5, r1
 800907a:	f025 0503 	bic.w	r5, r5, #3
 800907e:	3508      	adds	r5, #8
 8009080:	2d0c      	cmp	r5, #12
 8009082:	bf38      	it	cc
 8009084:	250c      	movcc	r5, #12
 8009086:	4629      	mov	r1, r5
 8009088:	4638      	mov	r0, r7
 800908a:	f7ff ffa5 	bl	8008fd8 <sbrk_aligned>
 800908e:	3001      	adds	r0, #1
 8009090:	d02b      	beq.n	80090ea <_malloc_r+0xd2>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	442b      	add	r3, r5
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	e00e      	b.n	80090b8 <_malloc_r+0xa0>
 800909a:	6822      	ldr	r2, [r4, #0]
 800909c:	1b52      	subs	r2, r2, r5
 800909e:	d41e      	bmi.n	80090de <_malloc_r+0xc6>
 80090a0:	2a0b      	cmp	r2, #11
 80090a2:	d916      	bls.n	80090d2 <_malloc_r+0xba>
 80090a4:	1961      	adds	r1, r4, r5
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	6025      	str	r5, [r4, #0]
 80090aa:	bf18      	it	ne
 80090ac:	6059      	strne	r1, [r3, #4]
 80090ae:	6863      	ldr	r3, [r4, #4]
 80090b0:	bf08      	it	eq
 80090b2:	6031      	streq	r1, [r6, #0]
 80090b4:	5162      	str	r2, [r4, r5]
 80090b6:	604b      	str	r3, [r1, #4]
 80090b8:	4638      	mov	r0, r7
 80090ba:	f104 060b 	add.w	r6, r4, #11
 80090be:	f000 f9ed 	bl	800949c <__malloc_unlock>
 80090c2:	f026 0607 	bic.w	r6, r6, #7
 80090c6:	1d23      	adds	r3, r4, #4
 80090c8:	1af2      	subs	r2, r6, r3
 80090ca:	d0b6      	beq.n	800903a <_malloc_r+0x22>
 80090cc:	1b9b      	subs	r3, r3, r6
 80090ce:	50a3      	str	r3, [r4, r2]
 80090d0:	e7b3      	b.n	800903a <_malloc_r+0x22>
 80090d2:	6862      	ldr	r2, [r4, #4]
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	bf0c      	ite	eq
 80090d8:	6032      	streq	r2, [r6, #0]
 80090da:	605a      	strne	r2, [r3, #4]
 80090dc:	e7ec      	b.n	80090b8 <_malloc_r+0xa0>
 80090de:	4623      	mov	r3, r4
 80090e0:	6864      	ldr	r4, [r4, #4]
 80090e2:	e7b2      	b.n	800904a <_malloc_r+0x32>
 80090e4:	4634      	mov	r4, r6
 80090e6:	6876      	ldr	r6, [r6, #4]
 80090e8:	e7b9      	b.n	800905e <_malloc_r+0x46>
 80090ea:	230c      	movs	r3, #12
 80090ec:	603b      	str	r3, [r7, #0]
 80090ee:	4638      	mov	r0, r7
 80090f0:	f000 f9d4 	bl	800949c <__malloc_unlock>
 80090f4:	e7a1      	b.n	800903a <_malloc_r+0x22>
 80090f6:	6025      	str	r5, [r4, #0]
 80090f8:	e7de      	b.n	80090b8 <_malloc_r+0xa0>
 80090fa:	bf00      	nop
 80090fc:	24000510 	.word	0x24000510

08009100 <__ssputs_r>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	688e      	ldr	r6, [r1, #8]
 8009106:	429e      	cmp	r6, r3
 8009108:	4682      	mov	sl, r0
 800910a:	460c      	mov	r4, r1
 800910c:	4690      	mov	r8, r2
 800910e:	461f      	mov	r7, r3
 8009110:	d838      	bhi.n	8009184 <__ssputs_r+0x84>
 8009112:	898a      	ldrh	r2, [r1, #12]
 8009114:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009118:	d032      	beq.n	8009180 <__ssputs_r+0x80>
 800911a:	6825      	ldr	r5, [r4, #0]
 800911c:	6909      	ldr	r1, [r1, #16]
 800911e:	eba5 0901 	sub.w	r9, r5, r1
 8009122:	6965      	ldr	r5, [r4, #20]
 8009124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009128:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800912c:	3301      	adds	r3, #1
 800912e:	444b      	add	r3, r9
 8009130:	106d      	asrs	r5, r5, #1
 8009132:	429d      	cmp	r5, r3
 8009134:	bf38      	it	cc
 8009136:	461d      	movcc	r5, r3
 8009138:	0553      	lsls	r3, r2, #21
 800913a:	d531      	bpl.n	80091a0 <__ssputs_r+0xa0>
 800913c:	4629      	mov	r1, r5
 800913e:	f7ff ff6b 	bl	8009018 <_malloc_r>
 8009142:	4606      	mov	r6, r0
 8009144:	b950      	cbnz	r0, 800915c <__ssputs_r+0x5c>
 8009146:	230c      	movs	r3, #12
 8009148:	f8ca 3000 	str.w	r3, [sl]
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915c:	6921      	ldr	r1, [r4, #16]
 800915e:	464a      	mov	r2, r9
 8009160:	f7fe f8d2 	bl	8007308 <memcpy>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800916a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	6126      	str	r6, [r4, #16]
 8009172:	6165      	str	r5, [r4, #20]
 8009174:	444e      	add	r6, r9
 8009176:	eba5 0509 	sub.w	r5, r5, r9
 800917a:	6026      	str	r6, [r4, #0]
 800917c:	60a5      	str	r5, [r4, #8]
 800917e:	463e      	mov	r6, r7
 8009180:	42be      	cmp	r6, r7
 8009182:	d900      	bls.n	8009186 <__ssputs_r+0x86>
 8009184:	463e      	mov	r6, r7
 8009186:	6820      	ldr	r0, [r4, #0]
 8009188:	4632      	mov	r2, r6
 800918a:	4641      	mov	r1, r8
 800918c:	f000 f966 	bl	800945c <memmove>
 8009190:	68a3      	ldr	r3, [r4, #8]
 8009192:	1b9b      	subs	r3, r3, r6
 8009194:	60a3      	str	r3, [r4, #8]
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	4433      	add	r3, r6
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	2000      	movs	r0, #0
 800919e:	e7db      	b.n	8009158 <__ssputs_r+0x58>
 80091a0:	462a      	mov	r2, r5
 80091a2:	f000 f981 	bl	80094a8 <_realloc_r>
 80091a6:	4606      	mov	r6, r0
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1e1      	bne.n	8009170 <__ssputs_r+0x70>
 80091ac:	6921      	ldr	r1, [r4, #16]
 80091ae:	4650      	mov	r0, sl
 80091b0:	f7ff fec6 	bl	8008f40 <_free_r>
 80091b4:	e7c7      	b.n	8009146 <__ssputs_r+0x46>
	...

080091b8 <_svfiprintf_r>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	4698      	mov	r8, r3
 80091be:	898b      	ldrh	r3, [r1, #12]
 80091c0:	061b      	lsls	r3, r3, #24
 80091c2:	b09d      	sub	sp, #116	; 0x74
 80091c4:	4607      	mov	r7, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	4614      	mov	r4, r2
 80091ca:	d50e      	bpl.n	80091ea <_svfiprintf_r+0x32>
 80091cc:	690b      	ldr	r3, [r1, #16]
 80091ce:	b963      	cbnz	r3, 80091ea <_svfiprintf_r+0x32>
 80091d0:	2140      	movs	r1, #64	; 0x40
 80091d2:	f7ff ff21 	bl	8009018 <_malloc_r>
 80091d6:	6028      	str	r0, [r5, #0]
 80091d8:	6128      	str	r0, [r5, #16]
 80091da:	b920      	cbnz	r0, 80091e6 <_svfiprintf_r+0x2e>
 80091dc:	230c      	movs	r3, #12
 80091de:	603b      	str	r3, [r7, #0]
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	e0d1      	b.n	800938a <_svfiprintf_r+0x1d2>
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	616b      	str	r3, [r5, #20]
 80091ea:	2300      	movs	r3, #0
 80091ec:	9309      	str	r3, [sp, #36]	; 0x24
 80091ee:	2320      	movs	r3, #32
 80091f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f8:	2330      	movs	r3, #48	; 0x30
 80091fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093a4 <_svfiprintf_r+0x1ec>
 80091fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009202:	f04f 0901 	mov.w	r9, #1
 8009206:	4623      	mov	r3, r4
 8009208:	469a      	mov	sl, r3
 800920a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800920e:	b10a      	cbz	r2, 8009214 <_svfiprintf_r+0x5c>
 8009210:	2a25      	cmp	r2, #37	; 0x25
 8009212:	d1f9      	bne.n	8009208 <_svfiprintf_r+0x50>
 8009214:	ebba 0b04 	subs.w	fp, sl, r4
 8009218:	d00b      	beq.n	8009232 <_svfiprintf_r+0x7a>
 800921a:	465b      	mov	r3, fp
 800921c:	4622      	mov	r2, r4
 800921e:	4629      	mov	r1, r5
 8009220:	4638      	mov	r0, r7
 8009222:	f7ff ff6d 	bl	8009100 <__ssputs_r>
 8009226:	3001      	adds	r0, #1
 8009228:	f000 80aa 	beq.w	8009380 <_svfiprintf_r+0x1c8>
 800922c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800922e:	445a      	add	r2, fp
 8009230:	9209      	str	r2, [sp, #36]	; 0x24
 8009232:	f89a 3000 	ldrb.w	r3, [sl]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 80a2 	beq.w	8009380 <_svfiprintf_r+0x1c8>
 800923c:	2300      	movs	r3, #0
 800923e:	f04f 32ff 	mov.w	r2, #4294967295
 8009242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009246:	f10a 0a01 	add.w	sl, sl, #1
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	9307      	str	r3, [sp, #28]
 800924e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009252:	931a      	str	r3, [sp, #104]	; 0x68
 8009254:	4654      	mov	r4, sl
 8009256:	2205      	movs	r2, #5
 8009258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925c:	4851      	ldr	r0, [pc, #324]	; (80093a4 <_svfiprintf_r+0x1ec>)
 800925e:	f7f7 f847 	bl	80002f0 <memchr>
 8009262:	9a04      	ldr	r2, [sp, #16]
 8009264:	b9d8      	cbnz	r0, 800929e <_svfiprintf_r+0xe6>
 8009266:	06d0      	lsls	r0, r2, #27
 8009268:	bf44      	itt	mi
 800926a:	2320      	movmi	r3, #32
 800926c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009270:	0711      	lsls	r1, r2, #28
 8009272:	bf44      	itt	mi
 8009274:	232b      	movmi	r3, #43	; 0x2b
 8009276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800927a:	f89a 3000 	ldrb.w	r3, [sl]
 800927e:	2b2a      	cmp	r3, #42	; 0x2a
 8009280:	d015      	beq.n	80092ae <_svfiprintf_r+0xf6>
 8009282:	9a07      	ldr	r2, [sp, #28]
 8009284:	4654      	mov	r4, sl
 8009286:	2000      	movs	r0, #0
 8009288:	f04f 0c0a 	mov.w	ip, #10
 800928c:	4621      	mov	r1, r4
 800928e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009292:	3b30      	subs	r3, #48	; 0x30
 8009294:	2b09      	cmp	r3, #9
 8009296:	d94e      	bls.n	8009336 <_svfiprintf_r+0x17e>
 8009298:	b1b0      	cbz	r0, 80092c8 <_svfiprintf_r+0x110>
 800929a:	9207      	str	r2, [sp, #28]
 800929c:	e014      	b.n	80092c8 <_svfiprintf_r+0x110>
 800929e:	eba0 0308 	sub.w	r3, r0, r8
 80092a2:	fa09 f303 	lsl.w	r3, r9, r3
 80092a6:	4313      	orrs	r3, r2
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	46a2      	mov	sl, r4
 80092ac:	e7d2      	b.n	8009254 <_svfiprintf_r+0x9c>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	1d19      	adds	r1, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9103      	str	r1, [sp, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfbb      	ittet	lt
 80092ba:	425b      	neglt	r3, r3
 80092bc:	f042 0202 	orrlt.w	r2, r2, #2
 80092c0:	9307      	strge	r3, [sp, #28]
 80092c2:	9307      	strlt	r3, [sp, #28]
 80092c4:	bfb8      	it	lt
 80092c6:	9204      	strlt	r2, [sp, #16]
 80092c8:	7823      	ldrb	r3, [r4, #0]
 80092ca:	2b2e      	cmp	r3, #46	; 0x2e
 80092cc:	d10c      	bne.n	80092e8 <_svfiprintf_r+0x130>
 80092ce:	7863      	ldrb	r3, [r4, #1]
 80092d0:	2b2a      	cmp	r3, #42	; 0x2a
 80092d2:	d135      	bne.n	8009340 <_svfiprintf_r+0x188>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	1d1a      	adds	r2, r3, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	9203      	str	r2, [sp, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	bfb8      	it	lt
 80092e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80092e4:	3402      	adds	r4, #2
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093b4 <_svfiprintf_r+0x1fc>
 80092ec:	7821      	ldrb	r1, [r4, #0]
 80092ee:	2203      	movs	r2, #3
 80092f0:	4650      	mov	r0, sl
 80092f2:	f7f6 fffd 	bl	80002f0 <memchr>
 80092f6:	b140      	cbz	r0, 800930a <_svfiprintf_r+0x152>
 80092f8:	2340      	movs	r3, #64	; 0x40
 80092fa:	eba0 000a 	sub.w	r0, r0, sl
 80092fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	4303      	orrs	r3, r0
 8009306:	3401      	adds	r4, #1
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930e:	4826      	ldr	r0, [pc, #152]	; (80093a8 <_svfiprintf_r+0x1f0>)
 8009310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009314:	2206      	movs	r2, #6
 8009316:	f7f6 ffeb 	bl	80002f0 <memchr>
 800931a:	2800      	cmp	r0, #0
 800931c:	d038      	beq.n	8009390 <_svfiprintf_r+0x1d8>
 800931e:	4b23      	ldr	r3, [pc, #140]	; (80093ac <_svfiprintf_r+0x1f4>)
 8009320:	bb1b      	cbnz	r3, 800936a <_svfiprintf_r+0x1b2>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	3307      	adds	r3, #7
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	3308      	adds	r3, #8
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009330:	4433      	add	r3, r6
 8009332:	9309      	str	r3, [sp, #36]	; 0x24
 8009334:	e767      	b.n	8009206 <_svfiprintf_r+0x4e>
 8009336:	fb0c 3202 	mla	r2, ip, r2, r3
 800933a:	460c      	mov	r4, r1
 800933c:	2001      	movs	r0, #1
 800933e:	e7a5      	b.n	800928c <_svfiprintf_r+0xd4>
 8009340:	2300      	movs	r3, #0
 8009342:	3401      	adds	r4, #1
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	4619      	mov	r1, r3
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4620      	mov	r0, r4
 800934e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009352:	3a30      	subs	r2, #48	; 0x30
 8009354:	2a09      	cmp	r2, #9
 8009356:	d903      	bls.n	8009360 <_svfiprintf_r+0x1a8>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0c5      	beq.n	80092e8 <_svfiprintf_r+0x130>
 800935c:	9105      	str	r1, [sp, #20]
 800935e:	e7c3      	b.n	80092e8 <_svfiprintf_r+0x130>
 8009360:	fb0c 2101 	mla	r1, ip, r1, r2
 8009364:	4604      	mov	r4, r0
 8009366:	2301      	movs	r3, #1
 8009368:	e7f0      	b.n	800934c <_svfiprintf_r+0x194>
 800936a:	ab03      	add	r3, sp, #12
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	462a      	mov	r2, r5
 8009370:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <_svfiprintf_r+0x1f8>)
 8009372:	a904      	add	r1, sp, #16
 8009374:	4638      	mov	r0, r7
 8009376:	f7fe f86f 	bl	8007458 <_printf_float>
 800937a:	1c42      	adds	r2, r0, #1
 800937c:	4606      	mov	r6, r0
 800937e:	d1d6      	bne.n	800932e <_svfiprintf_r+0x176>
 8009380:	89ab      	ldrh	r3, [r5, #12]
 8009382:	065b      	lsls	r3, r3, #25
 8009384:	f53f af2c 	bmi.w	80091e0 <_svfiprintf_r+0x28>
 8009388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800938a:	b01d      	add	sp, #116	; 0x74
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	ab03      	add	r3, sp, #12
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	462a      	mov	r2, r5
 8009396:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <_svfiprintf_r+0x1f8>)
 8009398:	a904      	add	r1, sp, #16
 800939a:	4638      	mov	r0, r7
 800939c:	f7fe fae8 	bl	8007970 <_printf_i>
 80093a0:	e7eb      	b.n	800937a <_svfiprintf_r+0x1c2>
 80093a2:	bf00      	nop
 80093a4:	0800a75c 	.word	0x0800a75c
 80093a8:	0800a766 	.word	0x0800a766
 80093ac:	08007459 	.word	0x08007459
 80093b0:	08009101 	.word	0x08009101
 80093b4:	0800a762 	.word	0x0800a762

080093b8 <_sbrk_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_sbrk_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f8 fe9e 	bl	8002104 <_sbrk>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_sbrk_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_sbrk_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	24000518 	.word	0x24000518

080093d8 <__assert_func>:
 80093d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093da:	4614      	mov	r4, r2
 80093dc:	461a      	mov	r2, r3
 80093de:	4b09      	ldr	r3, [pc, #36]	; (8009404 <__assert_func+0x2c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4605      	mov	r5, r0
 80093e4:	68d8      	ldr	r0, [r3, #12]
 80093e6:	b14c      	cbz	r4, 80093fc <__assert_func+0x24>
 80093e8:	4b07      	ldr	r3, [pc, #28]	; (8009408 <__assert_func+0x30>)
 80093ea:	9100      	str	r1, [sp, #0]
 80093ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093f0:	4906      	ldr	r1, [pc, #24]	; (800940c <__assert_func+0x34>)
 80093f2:	462b      	mov	r3, r5
 80093f4:	f000 f80e 	bl	8009414 <fiprintf>
 80093f8:	f000 faac 	bl	8009954 <abort>
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <__assert_func+0x38>)
 80093fe:	461c      	mov	r4, r3
 8009400:	e7f3      	b.n	80093ea <__assert_func+0x12>
 8009402:	bf00      	nop
 8009404:	24000018 	.word	0x24000018
 8009408:	0800a76d 	.word	0x0800a76d
 800940c:	0800a77a 	.word	0x0800a77a
 8009410:	0800a7a8 	.word	0x0800a7a8

08009414 <fiprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	b503      	push	{r0, r1, lr}
 8009418:	4601      	mov	r1, r0
 800941a:	ab03      	add	r3, sp, #12
 800941c:	4805      	ldr	r0, [pc, #20]	; (8009434 <fiprintf+0x20>)
 800941e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009422:	6800      	ldr	r0, [r0, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f000 f897 	bl	8009558 <_vfiprintf_r>
 800942a:	b002      	add	sp, #8
 800942c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009430:	b003      	add	sp, #12
 8009432:	4770      	bx	lr
 8009434:	24000018 	.word	0x24000018

08009438 <__ascii_mbtowc>:
 8009438:	b082      	sub	sp, #8
 800943a:	b901      	cbnz	r1, 800943e <__ascii_mbtowc+0x6>
 800943c:	a901      	add	r1, sp, #4
 800943e:	b142      	cbz	r2, 8009452 <__ascii_mbtowc+0x1a>
 8009440:	b14b      	cbz	r3, 8009456 <__ascii_mbtowc+0x1e>
 8009442:	7813      	ldrb	r3, [r2, #0]
 8009444:	600b      	str	r3, [r1, #0]
 8009446:	7812      	ldrb	r2, [r2, #0]
 8009448:	1e10      	subs	r0, r2, #0
 800944a:	bf18      	it	ne
 800944c:	2001      	movne	r0, #1
 800944e:	b002      	add	sp, #8
 8009450:	4770      	bx	lr
 8009452:	4610      	mov	r0, r2
 8009454:	e7fb      	b.n	800944e <__ascii_mbtowc+0x16>
 8009456:	f06f 0001 	mvn.w	r0, #1
 800945a:	e7f8      	b.n	800944e <__ascii_mbtowc+0x16>

0800945c <memmove>:
 800945c:	4288      	cmp	r0, r1
 800945e:	b510      	push	{r4, lr}
 8009460:	eb01 0402 	add.w	r4, r1, r2
 8009464:	d902      	bls.n	800946c <memmove+0x10>
 8009466:	4284      	cmp	r4, r0
 8009468:	4623      	mov	r3, r4
 800946a:	d807      	bhi.n	800947c <memmove+0x20>
 800946c:	1e43      	subs	r3, r0, #1
 800946e:	42a1      	cmp	r1, r4
 8009470:	d008      	beq.n	8009484 <memmove+0x28>
 8009472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800947a:	e7f8      	b.n	800946e <memmove+0x12>
 800947c:	4402      	add	r2, r0
 800947e:	4601      	mov	r1, r0
 8009480:	428a      	cmp	r2, r1
 8009482:	d100      	bne.n	8009486 <memmove+0x2a>
 8009484:	bd10      	pop	{r4, pc}
 8009486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800948a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800948e:	e7f7      	b.n	8009480 <memmove+0x24>

08009490 <__malloc_lock>:
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <__malloc_lock+0x8>)
 8009492:	f000 bc1f 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 8009496:	bf00      	nop
 8009498:	2400051c 	.word	0x2400051c

0800949c <__malloc_unlock>:
 800949c:	4801      	ldr	r0, [pc, #4]	; (80094a4 <__malloc_unlock+0x8>)
 800949e:	f000 bc1a 	b.w	8009cd6 <__retarget_lock_release_recursive>
 80094a2:	bf00      	nop
 80094a4:	2400051c 	.word	0x2400051c

080094a8 <_realloc_r>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	4680      	mov	r8, r0
 80094ae:	4614      	mov	r4, r2
 80094b0:	460e      	mov	r6, r1
 80094b2:	b921      	cbnz	r1, 80094be <_realloc_r+0x16>
 80094b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b8:	4611      	mov	r1, r2
 80094ba:	f7ff bdad 	b.w	8009018 <_malloc_r>
 80094be:	b92a      	cbnz	r2, 80094cc <_realloc_r+0x24>
 80094c0:	f7ff fd3e 	bl	8008f40 <_free_r>
 80094c4:	4625      	mov	r5, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094cc:	f000 fc6a 	bl	8009da4 <_malloc_usable_size_r>
 80094d0:	4284      	cmp	r4, r0
 80094d2:	4607      	mov	r7, r0
 80094d4:	d802      	bhi.n	80094dc <_realloc_r+0x34>
 80094d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094da:	d812      	bhi.n	8009502 <_realloc_r+0x5a>
 80094dc:	4621      	mov	r1, r4
 80094de:	4640      	mov	r0, r8
 80094e0:	f7ff fd9a 	bl	8009018 <_malloc_r>
 80094e4:	4605      	mov	r5, r0
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0ed      	beq.n	80094c6 <_realloc_r+0x1e>
 80094ea:	42bc      	cmp	r4, r7
 80094ec:	4622      	mov	r2, r4
 80094ee:	4631      	mov	r1, r6
 80094f0:	bf28      	it	cs
 80094f2:	463a      	movcs	r2, r7
 80094f4:	f7fd ff08 	bl	8007308 <memcpy>
 80094f8:	4631      	mov	r1, r6
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7ff fd20 	bl	8008f40 <_free_r>
 8009500:	e7e1      	b.n	80094c6 <_realloc_r+0x1e>
 8009502:	4635      	mov	r5, r6
 8009504:	e7df      	b.n	80094c6 <_realloc_r+0x1e>

08009506 <__sfputc_r>:
 8009506:	6893      	ldr	r3, [r2, #8]
 8009508:	3b01      	subs	r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	b410      	push	{r4}
 800950e:	6093      	str	r3, [r2, #8]
 8009510:	da08      	bge.n	8009524 <__sfputc_r+0x1e>
 8009512:	6994      	ldr	r4, [r2, #24]
 8009514:	42a3      	cmp	r3, r4
 8009516:	db01      	blt.n	800951c <__sfputc_r+0x16>
 8009518:	290a      	cmp	r1, #10
 800951a:	d103      	bne.n	8009524 <__sfputc_r+0x1e>
 800951c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009520:	f000 b94a 	b.w	80097b8 <__swbuf_r>
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	1c58      	adds	r0, r3, #1
 8009528:	6010      	str	r0, [r2, #0]
 800952a:	7019      	strb	r1, [r3, #0]
 800952c:	4608      	mov	r0, r1
 800952e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009532:	4770      	bx	lr

08009534 <__sfputs_r>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	4614      	mov	r4, r2
 800953c:	18d5      	adds	r5, r2, r3
 800953e:	42ac      	cmp	r4, r5
 8009540:	d101      	bne.n	8009546 <__sfputs_r+0x12>
 8009542:	2000      	movs	r0, #0
 8009544:	e007      	b.n	8009556 <__sfputs_r+0x22>
 8009546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954a:	463a      	mov	r2, r7
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff ffda 	bl	8009506 <__sfputc_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d1f3      	bne.n	800953e <__sfputs_r+0xa>
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009558 <_vfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	b09d      	sub	sp, #116	; 0x74
 8009560:	4614      	mov	r4, r2
 8009562:	4698      	mov	r8, r3
 8009564:	4606      	mov	r6, r0
 8009566:	b118      	cbz	r0, 8009570 <_vfiprintf_r+0x18>
 8009568:	6983      	ldr	r3, [r0, #24]
 800956a:	b90b      	cbnz	r3, 8009570 <_vfiprintf_r+0x18>
 800956c:	f000 fb14 	bl	8009b98 <__sinit>
 8009570:	4b89      	ldr	r3, [pc, #548]	; (8009798 <_vfiprintf_r+0x240>)
 8009572:	429d      	cmp	r5, r3
 8009574:	d11b      	bne.n	80095ae <_vfiprintf_r+0x56>
 8009576:	6875      	ldr	r5, [r6, #4]
 8009578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x32>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x32>
 8009584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009586:	f000 fba5 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	071b      	lsls	r3, r3, #28
 800958e:	d501      	bpl.n	8009594 <_vfiprintf_r+0x3c>
 8009590:	692b      	ldr	r3, [r5, #16]
 8009592:	b9eb      	cbnz	r3, 80095d0 <_vfiprintf_r+0x78>
 8009594:	4629      	mov	r1, r5
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f96e 	bl	8009878 <__swsetup_r>
 800959c:	b1c0      	cbz	r0, 80095d0 <_vfiprintf_r+0x78>
 800959e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a0:	07dc      	lsls	r4, r3, #31
 80095a2:	d50e      	bpl.n	80095c2 <_vfiprintf_r+0x6a>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b01d      	add	sp, #116	; 0x74
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	4b7b      	ldr	r3, [pc, #492]	; (800979c <_vfiprintf_r+0x244>)
 80095b0:	429d      	cmp	r5, r3
 80095b2:	d101      	bne.n	80095b8 <_vfiprintf_r+0x60>
 80095b4:	68b5      	ldr	r5, [r6, #8]
 80095b6:	e7df      	b.n	8009578 <_vfiprintf_r+0x20>
 80095b8:	4b79      	ldr	r3, [pc, #484]	; (80097a0 <_vfiprintf_r+0x248>)
 80095ba:	429d      	cmp	r5, r3
 80095bc:	bf08      	it	eq
 80095be:	68f5      	ldreq	r5, [r6, #12]
 80095c0:	e7da      	b.n	8009578 <_vfiprintf_r+0x20>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	0598      	lsls	r0, r3, #22
 80095c6:	d4ed      	bmi.n	80095a4 <_vfiprintf_r+0x4c>
 80095c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ca:	f000 fb84 	bl	8009cd6 <__retarget_lock_release_recursive>
 80095ce:	e7e9      	b.n	80095a4 <_vfiprintf_r+0x4c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	2320      	movs	r3, #32
 80095d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095da:	f8cd 800c 	str.w	r8, [sp, #12]
 80095de:	2330      	movs	r3, #48	; 0x30
 80095e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097a4 <_vfiprintf_r+0x24c>
 80095e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095e8:	f04f 0901 	mov.w	r9, #1
 80095ec:	4623      	mov	r3, r4
 80095ee:	469a      	mov	sl, r3
 80095f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f4:	b10a      	cbz	r2, 80095fa <_vfiprintf_r+0xa2>
 80095f6:	2a25      	cmp	r2, #37	; 0x25
 80095f8:	d1f9      	bne.n	80095ee <_vfiprintf_r+0x96>
 80095fa:	ebba 0b04 	subs.w	fp, sl, r4
 80095fe:	d00b      	beq.n	8009618 <_vfiprintf_r+0xc0>
 8009600:	465b      	mov	r3, fp
 8009602:	4622      	mov	r2, r4
 8009604:	4629      	mov	r1, r5
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ff94 	bl	8009534 <__sfputs_r>
 800960c:	3001      	adds	r0, #1
 800960e:	f000 80aa 	beq.w	8009766 <_vfiprintf_r+0x20e>
 8009612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009614:	445a      	add	r2, fp
 8009616:	9209      	str	r2, [sp, #36]	; 0x24
 8009618:	f89a 3000 	ldrb.w	r3, [sl]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80a2 	beq.w	8009766 <_vfiprintf_r+0x20e>
 8009622:	2300      	movs	r3, #0
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962c:	f10a 0a01 	add.w	sl, sl, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009638:	931a      	str	r3, [sp, #104]	; 0x68
 800963a:	4654      	mov	r4, sl
 800963c:	2205      	movs	r2, #5
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	4858      	ldr	r0, [pc, #352]	; (80097a4 <_vfiprintf_r+0x24c>)
 8009644:	f7f6 fe54 	bl	80002f0 <memchr>
 8009648:	9a04      	ldr	r2, [sp, #16]
 800964a:	b9d8      	cbnz	r0, 8009684 <_vfiprintf_r+0x12c>
 800964c:	06d1      	lsls	r1, r2, #27
 800964e:	bf44      	itt	mi
 8009650:	2320      	movmi	r3, #32
 8009652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009656:	0713      	lsls	r3, r2, #28
 8009658:	bf44      	itt	mi
 800965a:	232b      	movmi	r3, #43	; 0x2b
 800965c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009660:	f89a 3000 	ldrb.w	r3, [sl]
 8009664:	2b2a      	cmp	r3, #42	; 0x2a
 8009666:	d015      	beq.n	8009694 <_vfiprintf_r+0x13c>
 8009668:	9a07      	ldr	r2, [sp, #28]
 800966a:	4654      	mov	r4, sl
 800966c:	2000      	movs	r0, #0
 800966e:	f04f 0c0a 	mov.w	ip, #10
 8009672:	4621      	mov	r1, r4
 8009674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009678:	3b30      	subs	r3, #48	; 0x30
 800967a:	2b09      	cmp	r3, #9
 800967c:	d94e      	bls.n	800971c <_vfiprintf_r+0x1c4>
 800967e:	b1b0      	cbz	r0, 80096ae <_vfiprintf_r+0x156>
 8009680:	9207      	str	r2, [sp, #28]
 8009682:	e014      	b.n	80096ae <_vfiprintf_r+0x156>
 8009684:	eba0 0308 	sub.w	r3, r0, r8
 8009688:	fa09 f303 	lsl.w	r3, r9, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	46a2      	mov	sl, r4
 8009692:	e7d2      	b.n	800963a <_vfiprintf_r+0xe2>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	1d19      	adds	r1, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	9103      	str	r1, [sp, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfbb      	ittet	lt
 80096a0:	425b      	neglt	r3, r3
 80096a2:	f042 0202 	orrlt.w	r2, r2, #2
 80096a6:	9307      	strge	r3, [sp, #28]
 80096a8:	9307      	strlt	r3, [sp, #28]
 80096aa:	bfb8      	it	lt
 80096ac:	9204      	strlt	r2, [sp, #16]
 80096ae:	7823      	ldrb	r3, [r4, #0]
 80096b0:	2b2e      	cmp	r3, #46	; 0x2e
 80096b2:	d10c      	bne.n	80096ce <_vfiprintf_r+0x176>
 80096b4:	7863      	ldrb	r3, [r4, #1]
 80096b6:	2b2a      	cmp	r3, #42	; 0x2a
 80096b8:	d135      	bne.n	8009726 <_vfiprintf_r+0x1ce>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	9203      	str	r2, [sp, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bfb8      	it	lt
 80096c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80096ca:	3402      	adds	r4, #2
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097b4 <_vfiprintf_r+0x25c>
 80096d2:	7821      	ldrb	r1, [r4, #0]
 80096d4:	2203      	movs	r2, #3
 80096d6:	4650      	mov	r0, sl
 80096d8:	f7f6 fe0a 	bl	80002f0 <memchr>
 80096dc:	b140      	cbz	r0, 80096f0 <_vfiprintf_r+0x198>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	eba0 000a 	sub.w	r0, r0, sl
 80096e4:	fa03 f000 	lsl.w	r0, r3, r0
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	4303      	orrs	r3, r0
 80096ec:	3401      	adds	r4, #1
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f4:	482c      	ldr	r0, [pc, #176]	; (80097a8 <_vfiprintf_r+0x250>)
 80096f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096fa:	2206      	movs	r2, #6
 80096fc:	f7f6 fdf8 	bl	80002f0 <memchr>
 8009700:	2800      	cmp	r0, #0
 8009702:	d03f      	beq.n	8009784 <_vfiprintf_r+0x22c>
 8009704:	4b29      	ldr	r3, [pc, #164]	; (80097ac <_vfiprintf_r+0x254>)
 8009706:	bb1b      	cbnz	r3, 8009750 <_vfiprintf_r+0x1f8>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	3307      	adds	r3, #7
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	3308      	adds	r3, #8
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	443b      	add	r3, r7
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	e767      	b.n	80095ec <_vfiprintf_r+0x94>
 800971c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009720:	460c      	mov	r4, r1
 8009722:	2001      	movs	r0, #1
 8009724:	e7a5      	b.n	8009672 <_vfiprintf_r+0x11a>
 8009726:	2300      	movs	r3, #0
 8009728:	3401      	adds	r4, #1
 800972a:	9305      	str	r3, [sp, #20]
 800972c:	4619      	mov	r1, r3
 800972e:	f04f 0c0a 	mov.w	ip, #10
 8009732:	4620      	mov	r0, r4
 8009734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009738:	3a30      	subs	r2, #48	; 0x30
 800973a:	2a09      	cmp	r2, #9
 800973c:	d903      	bls.n	8009746 <_vfiprintf_r+0x1ee>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0c5      	beq.n	80096ce <_vfiprintf_r+0x176>
 8009742:	9105      	str	r1, [sp, #20]
 8009744:	e7c3      	b.n	80096ce <_vfiprintf_r+0x176>
 8009746:	fb0c 2101 	mla	r1, ip, r1, r2
 800974a:	4604      	mov	r4, r0
 800974c:	2301      	movs	r3, #1
 800974e:	e7f0      	b.n	8009732 <_vfiprintf_r+0x1da>
 8009750:	ab03      	add	r3, sp, #12
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	462a      	mov	r2, r5
 8009756:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <_vfiprintf_r+0x258>)
 8009758:	a904      	add	r1, sp, #16
 800975a:	4630      	mov	r0, r6
 800975c:	f7fd fe7c 	bl	8007458 <_printf_float>
 8009760:	4607      	mov	r7, r0
 8009762:	1c78      	adds	r0, r7, #1
 8009764:	d1d6      	bne.n	8009714 <_vfiprintf_r+0x1bc>
 8009766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009768:	07d9      	lsls	r1, r3, #31
 800976a:	d405      	bmi.n	8009778 <_vfiprintf_r+0x220>
 800976c:	89ab      	ldrh	r3, [r5, #12]
 800976e:	059a      	lsls	r2, r3, #22
 8009770:	d402      	bmi.n	8009778 <_vfiprintf_r+0x220>
 8009772:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009774:	f000 faaf 	bl	8009cd6 <__retarget_lock_release_recursive>
 8009778:	89ab      	ldrh	r3, [r5, #12]
 800977a:	065b      	lsls	r3, r3, #25
 800977c:	f53f af12 	bmi.w	80095a4 <_vfiprintf_r+0x4c>
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	e711      	b.n	80095a8 <_vfiprintf_r+0x50>
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <_vfiprintf_r+0x258>)
 800978c:	a904      	add	r1, sp, #16
 800978e:	4630      	mov	r0, r6
 8009790:	f7fe f8ee 	bl	8007970 <_printf_i>
 8009794:	e7e4      	b.n	8009760 <_vfiprintf_r+0x208>
 8009796:	bf00      	nop
 8009798:	0800a8d4 	.word	0x0800a8d4
 800979c:	0800a8f4 	.word	0x0800a8f4
 80097a0:	0800a8b4 	.word	0x0800a8b4
 80097a4:	0800a75c 	.word	0x0800a75c
 80097a8:	0800a766 	.word	0x0800a766
 80097ac:	08007459 	.word	0x08007459
 80097b0:	08009535 	.word	0x08009535
 80097b4:	0800a762 	.word	0x0800a762

080097b8 <__swbuf_r>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	460e      	mov	r6, r1
 80097bc:	4614      	mov	r4, r2
 80097be:	4605      	mov	r5, r0
 80097c0:	b118      	cbz	r0, 80097ca <__swbuf_r+0x12>
 80097c2:	6983      	ldr	r3, [r0, #24]
 80097c4:	b90b      	cbnz	r3, 80097ca <__swbuf_r+0x12>
 80097c6:	f000 f9e7 	bl	8009b98 <__sinit>
 80097ca:	4b21      	ldr	r3, [pc, #132]	; (8009850 <__swbuf_r+0x98>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	d12b      	bne.n	8009828 <__swbuf_r+0x70>
 80097d0:	686c      	ldr	r4, [r5, #4]
 80097d2:	69a3      	ldr	r3, [r4, #24]
 80097d4:	60a3      	str	r3, [r4, #8]
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	d52f      	bpl.n	800983c <__swbuf_r+0x84>
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	b36b      	cbz	r3, 800983c <__swbuf_r+0x84>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	6820      	ldr	r0, [r4, #0]
 80097e4:	1ac0      	subs	r0, r0, r3
 80097e6:	6963      	ldr	r3, [r4, #20]
 80097e8:	b2f6      	uxtb	r6, r6
 80097ea:	4283      	cmp	r3, r0
 80097ec:	4637      	mov	r7, r6
 80097ee:	dc04      	bgt.n	80097fa <__swbuf_r+0x42>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f93c 	bl	8009a70 <_fflush_r>
 80097f8:	bb30      	cbnz	r0, 8009848 <__swbuf_r+0x90>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	60a3      	str	r3, [r4, #8]
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	6022      	str	r2, [r4, #0]
 8009806:	701e      	strb	r6, [r3, #0]
 8009808:	6963      	ldr	r3, [r4, #20]
 800980a:	3001      	adds	r0, #1
 800980c:	4283      	cmp	r3, r0
 800980e:	d004      	beq.n	800981a <__swbuf_r+0x62>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	07db      	lsls	r3, r3, #31
 8009814:	d506      	bpl.n	8009824 <__swbuf_r+0x6c>
 8009816:	2e0a      	cmp	r6, #10
 8009818:	d104      	bne.n	8009824 <__swbuf_r+0x6c>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f000 f927 	bl	8009a70 <_fflush_r>
 8009822:	b988      	cbnz	r0, 8009848 <__swbuf_r+0x90>
 8009824:	4638      	mov	r0, r7
 8009826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009828:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <__swbuf_r+0x9c>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d101      	bne.n	8009832 <__swbuf_r+0x7a>
 800982e:	68ac      	ldr	r4, [r5, #8]
 8009830:	e7cf      	b.n	80097d2 <__swbuf_r+0x1a>
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <__swbuf_r+0xa0>)
 8009834:	429c      	cmp	r4, r3
 8009836:	bf08      	it	eq
 8009838:	68ec      	ldreq	r4, [r5, #12]
 800983a:	e7ca      	b.n	80097d2 <__swbuf_r+0x1a>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f81a 	bl	8009878 <__swsetup_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d0cb      	beq.n	80097e0 <__swbuf_r+0x28>
 8009848:	f04f 37ff 	mov.w	r7, #4294967295
 800984c:	e7ea      	b.n	8009824 <__swbuf_r+0x6c>
 800984e:	bf00      	nop
 8009850:	0800a8d4 	.word	0x0800a8d4
 8009854:	0800a8f4 	.word	0x0800a8f4
 8009858:	0800a8b4 	.word	0x0800a8b4

0800985c <__ascii_wctomb>:
 800985c:	b149      	cbz	r1, 8009872 <__ascii_wctomb+0x16>
 800985e:	2aff      	cmp	r2, #255	; 0xff
 8009860:	bf85      	ittet	hi
 8009862:	238a      	movhi	r3, #138	; 0x8a
 8009864:	6003      	strhi	r3, [r0, #0]
 8009866:	700a      	strbls	r2, [r1, #0]
 8009868:	f04f 30ff 	movhi.w	r0, #4294967295
 800986c:	bf98      	it	ls
 800986e:	2001      	movls	r0, #1
 8009870:	4770      	bx	lr
 8009872:	4608      	mov	r0, r1
 8009874:	4770      	bx	lr
	...

08009878 <__swsetup_r>:
 8009878:	4b32      	ldr	r3, [pc, #200]	; (8009944 <__swsetup_r+0xcc>)
 800987a:	b570      	push	{r4, r5, r6, lr}
 800987c:	681d      	ldr	r5, [r3, #0]
 800987e:	4606      	mov	r6, r0
 8009880:	460c      	mov	r4, r1
 8009882:	b125      	cbz	r5, 800988e <__swsetup_r+0x16>
 8009884:	69ab      	ldr	r3, [r5, #24]
 8009886:	b913      	cbnz	r3, 800988e <__swsetup_r+0x16>
 8009888:	4628      	mov	r0, r5
 800988a:	f000 f985 	bl	8009b98 <__sinit>
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <__swsetup_r+0xd0>)
 8009890:	429c      	cmp	r4, r3
 8009892:	d10f      	bne.n	80098b4 <__swsetup_r+0x3c>
 8009894:	686c      	ldr	r4, [r5, #4]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800989c:	0719      	lsls	r1, r3, #28
 800989e:	d42c      	bmi.n	80098fa <__swsetup_r+0x82>
 80098a0:	06dd      	lsls	r5, r3, #27
 80098a2:	d411      	bmi.n	80098c8 <__swsetup_r+0x50>
 80098a4:	2309      	movs	r3, #9
 80098a6:	6033      	str	r3, [r6, #0]
 80098a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	e03e      	b.n	8009932 <__swsetup_r+0xba>
 80098b4:	4b25      	ldr	r3, [pc, #148]	; (800994c <__swsetup_r+0xd4>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d101      	bne.n	80098be <__swsetup_r+0x46>
 80098ba:	68ac      	ldr	r4, [r5, #8]
 80098bc:	e7eb      	b.n	8009896 <__swsetup_r+0x1e>
 80098be:	4b24      	ldr	r3, [pc, #144]	; (8009950 <__swsetup_r+0xd8>)
 80098c0:	429c      	cmp	r4, r3
 80098c2:	bf08      	it	eq
 80098c4:	68ec      	ldreq	r4, [r5, #12]
 80098c6:	e7e6      	b.n	8009896 <__swsetup_r+0x1e>
 80098c8:	0758      	lsls	r0, r3, #29
 80098ca:	d512      	bpl.n	80098f2 <__swsetup_r+0x7a>
 80098cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ce:	b141      	cbz	r1, 80098e2 <__swsetup_r+0x6a>
 80098d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d002      	beq.n	80098de <__swsetup_r+0x66>
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff fb31 	bl	8008f40 <_free_r>
 80098de:	2300      	movs	r3, #0
 80098e0:	6363      	str	r3, [r4, #52]	; 0x34
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	2300      	movs	r3, #0
 80098ec:	6063      	str	r3, [r4, #4]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f043 0308 	orr.w	r3, r3, #8
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	b94b      	cbnz	r3, 8009912 <__swsetup_r+0x9a>
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009908:	d003      	beq.n	8009912 <__swsetup_r+0x9a>
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	f000 fa09 	bl	8009d24 <__smakebuf_r>
 8009912:	89a0      	ldrh	r0, [r4, #12]
 8009914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009918:	f010 0301 	ands.w	r3, r0, #1
 800991c:	d00a      	beq.n	8009934 <__swsetup_r+0xbc>
 800991e:	2300      	movs	r3, #0
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	6963      	ldr	r3, [r4, #20]
 8009924:	425b      	negs	r3, r3
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	b943      	cbnz	r3, 800993e <__swsetup_r+0xc6>
 800992c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009930:	d1ba      	bne.n	80098a8 <__swsetup_r+0x30>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	0781      	lsls	r1, r0, #30
 8009936:	bf58      	it	pl
 8009938:	6963      	ldrpl	r3, [r4, #20]
 800993a:	60a3      	str	r3, [r4, #8]
 800993c:	e7f4      	b.n	8009928 <__swsetup_r+0xb0>
 800993e:	2000      	movs	r0, #0
 8009940:	e7f7      	b.n	8009932 <__swsetup_r+0xba>
 8009942:	bf00      	nop
 8009944:	24000018 	.word	0x24000018
 8009948:	0800a8d4 	.word	0x0800a8d4
 800994c:	0800a8f4 	.word	0x0800a8f4
 8009950:	0800a8b4 	.word	0x0800a8b4

08009954 <abort>:
 8009954:	b508      	push	{r3, lr}
 8009956:	2006      	movs	r0, #6
 8009958:	f000 fa54 	bl	8009e04 <raise>
 800995c:	2001      	movs	r0, #1
 800995e:	f7f8 fb59 	bl	8002014 <_exit>
	...

08009964 <__sflush_r>:
 8009964:	898a      	ldrh	r2, [r1, #12]
 8009966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996a:	4605      	mov	r5, r0
 800996c:	0710      	lsls	r0, r2, #28
 800996e:	460c      	mov	r4, r1
 8009970:	d458      	bmi.n	8009a24 <__sflush_r+0xc0>
 8009972:	684b      	ldr	r3, [r1, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	dc05      	bgt.n	8009984 <__sflush_r+0x20>
 8009978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	dc02      	bgt.n	8009984 <__sflush_r+0x20>
 800997e:	2000      	movs	r0, #0
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009986:	2e00      	cmp	r6, #0
 8009988:	d0f9      	beq.n	800997e <__sflush_r+0x1a>
 800998a:	2300      	movs	r3, #0
 800998c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009990:	682f      	ldr	r7, [r5, #0]
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	d032      	beq.n	80099fc <__sflush_r+0x98>
 8009996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	075a      	lsls	r2, r3, #29
 800999c:	d505      	bpl.n	80099aa <__sflush_r+0x46>
 800999e:	6863      	ldr	r3, [r4, #4]
 80099a0:	1ac0      	subs	r0, r0, r3
 80099a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099a4:	b10b      	cbz	r3, 80099aa <__sflush_r+0x46>
 80099a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a8:	1ac0      	subs	r0, r0, r3
 80099aa:	2300      	movs	r3, #0
 80099ac:	4602      	mov	r2, r0
 80099ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b0      	blx	r6
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	d106      	bne.n	80099ca <__sflush_r+0x66>
 80099bc:	6829      	ldr	r1, [r5, #0]
 80099be:	291d      	cmp	r1, #29
 80099c0:	d82c      	bhi.n	8009a1c <__sflush_r+0xb8>
 80099c2:	4a2a      	ldr	r2, [pc, #168]	; (8009a6c <__sflush_r+0x108>)
 80099c4:	40ca      	lsrs	r2, r1
 80099c6:	07d6      	lsls	r6, r2, #31
 80099c8:	d528      	bpl.n	8009a1c <__sflush_r+0xb8>
 80099ca:	2200      	movs	r2, #0
 80099cc:	6062      	str	r2, [r4, #4]
 80099ce:	04d9      	lsls	r1, r3, #19
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	d504      	bpl.n	80099e0 <__sflush_r+0x7c>
 80099d6:	1c42      	adds	r2, r0, #1
 80099d8:	d101      	bne.n	80099de <__sflush_r+0x7a>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b903      	cbnz	r3, 80099e0 <__sflush_r+0x7c>
 80099de:	6560      	str	r0, [r4, #84]	; 0x54
 80099e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099e2:	602f      	str	r7, [r5, #0]
 80099e4:	2900      	cmp	r1, #0
 80099e6:	d0ca      	beq.n	800997e <__sflush_r+0x1a>
 80099e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ec:	4299      	cmp	r1, r3
 80099ee:	d002      	beq.n	80099f6 <__sflush_r+0x92>
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff faa5 	bl	8008f40 <_free_r>
 80099f6:	2000      	movs	r0, #0
 80099f8:	6360      	str	r0, [r4, #52]	; 0x34
 80099fa:	e7c1      	b.n	8009980 <__sflush_r+0x1c>
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	2301      	movs	r3, #1
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b0      	blx	r6
 8009a04:	1c41      	adds	r1, r0, #1
 8009a06:	d1c7      	bne.n	8009998 <__sflush_r+0x34>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0c4      	beq.n	8009998 <__sflush_r+0x34>
 8009a0e:	2b1d      	cmp	r3, #29
 8009a10:	d001      	beq.n	8009a16 <__sflush_r+0xb2>
 8009a12:	2b16      	cmp	r3, #22
 8009a14:	d101      	bne.n	8009a1a <__sflush_r+0xb6>
 8009a16:	602f      	str	r7, [r5, #0]
 8009a18:	e7b1      	b.n	800997e <__sflush_r+0x1a>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	e7ad      	b.n	8009980 <__sflush_r+0x1c>
 8009a24:	690f      	ldr	r7, [r1, #16]
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	d0a9      	beq.n	800997e <__sflush_r+0x1a>
 8009a2a:	0793      	lsls	r3, r2, #30
 8009a2c:	680e      	ldr	r6, [r1, #0]
 8009a2e:	bf08      	it	eq
 8009a30:	694b      	ldreq	r3, [r1, #20]
 8009a32:	600f      	str	r7, [r1, #0]
 8009a34:	bf18      	it	ne
 8009a36:	2300      	movne	r3, #0
 8009a38:	eba6 0807 	sub.w	r8, r6, r7
 8009a3c:	608b      	str	r3, [r1, #8]
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	dd9c      	ble.n	800997e <__sflush_r+0x1a>
 8009a44:	6a21      	ldr	r1, [r4, #32]
 8009a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a48:	4643      	mov	r3, r8
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b0      	blx	r6
 8009a50:	2800      	cmp	r0, #0
 8009a52:	dc06      	bgt.n	8009a62 <__sflush_r+0xfe>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e78e      	b.n	8009980 <__sflush_r+0x1c>
 8009a62:	4407      	add	r7, r0
 8009a64:	eba8 0800 	sub.w	r8, r8, r0
 8009a68:	e7e9      	b.n	8009a3e <__sflush_r+0xda>
 8009a6a:	bf00      	nop
 8009a6c:	20400001 	.word	0x20400001

08009a70 <_fflush_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	690b      	ldr	r3, [r1, #16]
 8009a74:	4605      	mov	r5, r0
 8009a76:	460c      	mov	r4, r1
 8009a78:	b913      	cbnz	r3, 8009a80 <_fflush_r+0x10>
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	b118      	cbz	r0, 8009a8a <_fflush_r+0x1a>
 8009a82:	6983      	ldr	r3, [r0, #24]
 8009a84:	b90b      	cbnz	r3, 8009a8a <_fflush_r+0x1a>
 8009a86:	f000 f887 	bl	8009b98 <__sinit>
 8009a8a:	4b14      	ldr	r3, [pc, #80]	; (8009adc <_fflush_r+0x6c>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	d11b      	bne.n	8009ac8 <_fflush_r+0x58>
 8009a90:	686c      	ldr	r4, [r5, #4]
 8009a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ef      	beq.n	8009a7a <_fflush_r+0xa>
 8009a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a9c:	07d0      	lsls	r0, r2, #31
 8009a9e:	d404      	bmi.n	8009aaa <_fflush_r+0x3a>
 8009aa0:	0599      	lsls	r1, r3, #22
 8009aa2:	d402      	bmi.n	8009aaa <_fflush_r+0x3a>
 8009aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aa6:	f000 f915 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 8009aaa:	4628      	mov	r0, r5
 8009aac:	4621      	mov	r1, r4
 8009aae:	f7ff ff59 	bl	8009964 <__sflush_r>
 8009ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ab4:	07da      	lsls	r2, r3, #31
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	d4e0      	bmi.n	8009a7c <_fflush_r+0xc>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	059b      	lsls	r3, r3, #22
 8009abe:	d4dd      	bmi.n	8009a7c <_fflush_r+0xc>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac2:	f000 f908 	bl	8009cd6 <__retarget_lock_release_recursive>
 8009ac6:	e7d9      	b.n	8009a7c <_fflush_r+0xc>
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <_fflush_r+0x70>)
 8009aca:	429c      	cmp	r4, r3
 8009acc:	d101      	bne.n	8009ad2 <_fflush_r+0x62>
 8009ace:	68ac      	ldr	r4, [r5, #8]
 8009ad0:	e7df      	b.n	8009a92 <_fflush_r+0x22>
 8009ad2:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <_fflush_r+0x74>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	bf08      	it	eq
 8009ad8:	68ec      	ldreq	r4, [r5, #12]
 8009ada:	e7da      	b.n	8009a92 <_fflush_r+0x22>
 8009adc:	0800a8d4 	.word	0x0800a8d4
 8009ae0:	0800a8f4 	.word	0x0800a8f4
 8009ae4:	0800a8b4 	.word	0x0800a8b4

08009ae8 <std>:
 8009ae8:	2300      	movs	r3, #0
 8009aea:	b510      	push	{r4, lr}
 8009aec:	4604      	mov	r4, r0
 8009aee:	e9c0 3300 	strd	r3, r3, [r0]
 8009af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009af6:	6083      	str	r3, [r0, #8]
 8009af8:	8181      	strh	r1, [r0, #12]
 8009afa:	6643      	str	r3, [r0, #100]	; 0x64
 8009afc:	81c2      	strh	r2, [r0, #14]
 8009afe:	6183      	str	r3, [r0, #24]
 8009b00:	4619      	mov	r1, r3
 8009b02:	2208      	movs	r2, #8
 8009b04:	305c      	adds	r0, #92	; 0x5c
 8009b06:	f7fd fc0d 	bl	8007324 <memset>
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <std+0x38>)
 8009b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b0e:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <std+0x3c>)
 8009b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b12:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <std+0x40>)
 8009b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b16:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <std+0x44>)
 8009b18:	6224      	str	r4, [r4, #32]
 8009b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b1c:	bd10      	pop	{r4, pc}
 8009b1e:	bf00      	nop
 8009b20:	08009e3d 	.word	0x08009e3d
 8009b24:	08009e5f 	.word	0x08009e5f
 8009b28:	08009e97 	.word	0x08009e97
 8009b2c:	08009ebb 	.word	0x08009ebb

08009b30 <_cleanup_r>:
 8009b30:	4901      	ldr	r1, [pc, #4]	; (8009b38 <_cleanup_r+0x8>)
 8009b32:	f000 b8af 	b.w	8009c94 <_fwalk_reent>
 8009b36:	bf00      	nop
 8009b38:	08009a71 	.word	0x08009a71

08009b3c <__sfmoreglue>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	2268      	movs	r2, #104	; 0x68
 8009b40:	1e4d      	subs	r5, r1, #1
 8009b42:	4355      	muls	r5, r2
 8009b44:	460e      	mov	r6, r1
 8009b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b4a:	f7ff fa65 	bl	8009018 <_malloc_r>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	b140      	cbz	r0, 8009b64 <__sfmoreglue+0x28>
 8009b52:	2100      	movs	r1, #0
 8009b54:	e9c0 1600 	strd	r1, r6, [r0]
 8009b58:	300c      	adds	r0, #12
 8009b5a:	60a0      	str	r0, [r4, #8]
 8009b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b60:	f7fd fbe0 	bl	8007324 <memset>
 8009b64:	4620      	mov	r0, r4
 8009b66:	bd70      	pop	{r4, r5, r6, pc}

08009b68 <__sfp_lock_acquire>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__sfp_lock_acquire+0x8>)
 8009b6a:	f000 b8b3 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 8009b6e:	bf00      	nop
 8009b70:	2400051d 	.word	0x2400051d

08009b74 <__sfp_lock_release>:
 8009b74:	4801      	ldr	r0, [pc, #4]	; (8009b7c <__sfp_lock_release+0x8>)
 8009b76:	f000 b8ae 	b.w	8009cd6 <__retarget_lock_release_recursive>
 8009b7a:	bf00      	nop
 8009b7c:	2400051d 	.word	0x2400051d

08009b80 <__sinit_lock_acquire>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sinit_lock_acquire+0x8>)
 8009b82:	f000 b8a7 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	2400051e 	.word	0x2400051e

08009b8c <__sinit_lock_release>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sinit_lock_release+0x8>)
 8009b8e:	f000 b8a2 	b.w	8009cd6 <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	2400051e 	.word	0x2400051e

08009b98 <__sinit>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	f7ff fff0 	bl	8009b80 <__sinit_lock_acquire>
 8009ba0:	69a3      	ldr	r3, [r4, #24]
 8009ba2:	b11b      	cbz	r3, 8009bac <__sinit+0x14>
 8009ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba8:	f7ff bff0 	b.w	8009b8c <__sinit_lock_release>
 8009bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8009bb2:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <__sinit+0x68>)
 8009bb4:	4a13      	ldr	r2, [pc, #76]	; (8009c04 <__sinit+0x6c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bba:	42a3      	cmp	r3, r4
 8009bbc:	bf04      	itt	eq
 8009bbe:	2301      	moveq	r3, #1
 8009bc0:	61a3      	streq	r3, [r4, #24]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 f820 	bl	8009c08 <__sfp>
 8009bc8:	6060      	str	r0, [r4, #4]
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 f81c 	bl	8009c08 <__sfp>
 8009bd0:	60a0      	str	r0, [r4, #8]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f818 	bl	8009c08 <__sfp>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	60e0      	str	r0, [r4, #12]
 8009bdc:	2104      	movs	r1, #4
 8009bde:	6860      	ldr	r0, [r4, #4]
 8009be0:	f7ff ff82 	bl	8009ae8 <std>
 8009be4:	68a0      	ldr	r0, [r4, #8]
 8009be6:	2201      	movs	r2, #1
 8009be8:	2109      	movs	r1, #9
 8009bea:	f7ff ff7d 	bl	8009ae8 <std>
 8009bee:	68e0      	ldr	r0, [r4, #12]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	2112      	movs	r1, #18
 8009bf4:	f7ff ff78 	bl	8009ae8 <std>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	61a3      	str	r3, [r4, #24]
 8009bfc:	e7d2      	b.n	8009ba4 <__sinit+0xc>
 8009bfe:	bf00      	nop
 8009c00:	0800a53c 	.word	0x0800a53c
 8009c04:	08009b31 	.word	0x08009b31

08009c08 <__sfp>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	f7ff ffac 	bl	8009b68 <__sfp_lock_acquire>
 8009c10:	4b1e      	ldr	r3, [pc, #120]	; (8009c8c <__sfp+0x84>)
 8009c12:	681e      	ldr	r6, [r3, #0]
 8009c14:	69b3      	ldr	r3, [r6, #24]
 8009c16:	b913      	cbnz	r3, 8009c1e <__sfp+0x16>
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff ffbd 	bl	8009b98 <__sinit>
 8009c1e:	3648      	adds	r6, #72	; 0x48
 8009c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	d503      	bpl.n	8009c30 <__sfp+0x28>
 8009c28:	6833      	ldr	r3, [r6, #0]
 8009c2a:	b30b      	cbz	r3, 8009c70 <__sfp+0x68>
 8009c2c:	6836      	ldr	r6, [r6, #0]
 8009c2e:	e7f7      	b.n	8009c20 <__sfp+0x18>
 8009c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c34:	b9d5      	cbnz	r5, 8009c6c <__sfp+0x64>
 8009c36:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <__sfp+0x88>)
 8009c38:	60e3      	str	r3, [r4, #12]
 8009c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c40:	f000 f847 	bl	8009cd2 <__retarget_lock_init_recursive>
 8009c44:	f7ff ff96 	bl	8009b74 <__sfp_lock_release>
 8009c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c50:	6025      	str	r5, [r4, #0]
 8009c52:	61a5      	str	r5, [r4, #24]
 8009c54:	2208      	movs	r2, #8
 8009c56:	4629      	mov	r1, r5
 8009c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c5c:	f7fd fb62 	bl	8007324 <memset>
 8009c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6c:	3468      	adds	r4, #104	; 0x68
 8009c6e:	e7d9      	b.n	8009c24 <__sfp+0x1c>
 8009c70:	2104      	movs	r1, #4
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7ff ff62 	bl	8009b3c <__sfmoreglue>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	6030      	str	r0, [r6, #0]
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d1d5      	bne.n	8009c2c <__sfp+0x24>
 8009c80:	f7ff ff78 	bl	8009b74 <__sfp_lock_release>
 8009c84:	230c      	movs	r3, #12
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	e7ee      	b.n	8009c68 <__sfp+0x60>
 8009c8a:	bf00      	nop
 8009c8c:	0800a53c 	.word	0x0800a53c
 8009c90:	ffff0001 	.word	0xffff0001

08009c94 <_fwalk_reent>:
 8009c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c98:	4606      	mov	r6, r0
 8009c9a:	4688      	mov	r8, r1
 8009c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ca0:	2700      	movs	r7, #0
 8009ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8009caa:	d505      	bpl.n	8009cb8 <_fwalk_reent+0x24>
 8009cac:	6824      	ldr	r4, [r4, #0]
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d1f7      	bne.n	8009ca2 <_fwalk_reent+0xe>
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb8:	89ab      	ldrh	r3, [r5, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d907      	bls.n	8009cce <_fwalk_reent+0x3a>
 8009cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	d003      	beq.n	8009cce <_fwalk_reent+0x3a>
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4630      	mov	r0, r6
 8009cca:	47c0      	blx	r8
 8009ccc:	4307      	orrs	r7, r0
 8009cce:	3568      	adds	r5, #104	; 0x68
 8009cd0:	e7e9      	b.n	8009ca6 <_fwalk_reent+0x12>

08009cd2 <__retarget_lock_init_recursive>:
 8009cd2:	4770      	bx	lr

08009cd4 <__retarget_lock_acquire_recursive>:
 8009cd4:	4770      	bx	lr

08009cd6 <__retarget_lock_release_recursive>:
 8009cd6:	4770      	bx	lr

08009cd8 <__swhatbuf_r>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	460e      	mov	r6, r1
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	2900      	cmp	r1, #0
 8009ce2:	b096      	sub	sp, #88	; 0x58
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	461d      	mov	r5, r3
 8009ce8:	da08      	bge.n	8009cfc <__swhatbuf_r+0x24>
 8009cea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	061a      	lsls	r2, r3, #24
 8009cf4:	d410      	bmi.n	8009d18 <__swhatbuf_r+0x40>
 8009cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfa:	e00e      	b.n	8009d1a <__swhatbuf_r+0x42>
 8009cfc:	466a      	mov	r2, sp
 8009cfe:	f000 f903 	bl	8009f08 <_fstat_r>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	dbf1      	blt.n	8009cea <__swhatbuf_r+0x12>
 8009d06:	9a01      	ldr	r2, [sp, #4]
 8009d08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d10:	425a      	negs	r2, r3
 8009d12:	415a      	adcs	r2, r3
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	e7ee      	b.n	8009cf6 <__swhatbuf_r+0x1e>
 8009d18:	2340      	movs	r3, #64	; 0x40
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	b016      	add	sp, #88	; 0x58
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d24 <__smakebuf_r>:
 8009d24:	898b      	ldrh	r3, [r1, #12]
 8009d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d28:	079d      	lsls	r5, r3, #30
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	d507      	bpl.n	8009d40 <__smakebuf_r+0x1c>
 8009d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	6163      	str	r3, [r4, #20]
 8009d3c:	b002      	add	sp, #8
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	ab01      	add	r3, sp, #4
 8009d42:	466a      	mov	r2, sp
 8009d44:	f7ff ffc8 	bl	8009cd8 <__swhatbuf_r>
 8009d48:	9900      	ldr	r1, [sp, #0]
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff f963 	bl	8009018 <_malloc_r>
 8009d52:	b948      	cbnz	r0, 8009d68 <__smakebuf_r+0x44>
 8009d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d58:	059a      	lsls	r2, r3, #22
 8009d5a:	d4ef      	bmi.n	8009d3c <__smakebuf_r+0x18>
 8009d5c:	f023 0303 	bic.w	r3, r3, #3
 8009d60:	f043 0302 	orr.w	r3, r3, #2
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	e7e3      	b.n	8009d30 <__smakebuf_r+0xc>
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <__smakebuf_r+0x7c>)
 8009d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	6020      	str	r0, [r4, #0]
 8009d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	6163      	str	r3, [r4, #20]
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	6120      	str	r0, [r4, #16]
 8009d7e:	b15b      	cbz	r3, 8009d98 <__smakebuf_r+0x74>
 8009d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 f8d1 	bl	8009f2c <_isatty_r>
 8009d8a:	b128      	cbz	r0, 8009d98 <__smakebuf_r+0x74>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	89a0      	ldrh	r0, [r4, #12]
 8009d9a:	4305      	orrs	r5, r0
 8009d9c:	81a5      	strh	r5, [r4, #12]
 8009d9e:	e7cd      	b.n	8009d3c <__smakebuf_r+0x18>
 8009da0:	08009b31 	.word	0x08009b31

08009da4 <_malloc_usable_size_r>:
 8009da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da8:	1f18      	subs	r0, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	bfbc      	itt	lt
 8009dae:	580b      	ldrlt	r3, [r1, r0]
 8009db0:	18c0      	addlt	r0, r0, r3
 8009db2:	4770      	bx	lr

08009db4 <_raise_r>:
 8009db4:	291f      	cmp	r1, #31
 8009db6:	b538      	push	{r3, r4, r5, lr}
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	d904      	bls.n	8009dc8 <_raise_r+0x14>
 8009dbe:	2316      	movs	r3, #22
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dca:	b112      	cbz	r2, 8009dd2 <_raise_r+0x1e>
 8009dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd0:	b94b      	cbnz	r3, 8009de6 <_raise_r+0x32>
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f000 f830 	bl	8009e38 <_getpid_r>
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4601      	mov	r1, r0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de2:	f000 b817 	b.w	8009e14 <_kill_r>
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d00a      	beq.n	8009e00 <_raise_r+0x4c>
 8009dea:	1c59      	adds	r1, r3, #1
 8009dec:	d103      	bne.n	8009df6 <_raise_r+0x42>
 8009dee:	2316      	movs	r3, #22
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7e7      	b.n	8009dc6 <_raise_r+0x12>
 8009df6:	2400      	movs	r4, #0
 8009df8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	4798      	blx	r3
 8009e00:	2000      	movs	r0, #0
 8009e02:	e7e0      	b.n	8009dc6 <_raise_r+0x12>

08009e04 <raise>:
 8009e04:	4b02      	ldr	r3, [pc, #8]	; (8009e10 <raise+0xc>)
 8009e06:	4601      	mov	r1, r0
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f7ff bfd3 	b.w	8009db4 <_raise_r>
 8009e0e:	bf00      	nop
 8009e10:	24000018 	.word	0x24000018

08009e14 <_kill_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d07      	ldr	r5, [pc, #28]	; (8009e34 <_kill_r+0x20>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	4611      	mov	r1, r2
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	f7f8 f8e7 	bl	8001ff4 <_kill>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	d102      	bne.n	8009e30 <_kill_r+0x1c>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	b103      	cbz	r3, 8009e30 <_kill_r+0x1c>
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	bd38      	pop	{r3, r4, r5, pc}
 8009e32:	bf00      	nop
 8009e34:	24000518 	.word	0x24000518

08009e38 <_getpid_r>:
 8009e38:	f7f8 b8d4 	b.w	8001fe4 <_getpid>

08009e3c <__sread>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	460c      	mov	r4, r1
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	f000 f894 	bl	8009f70 <_read_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	bfab      	itete	ge
 8009e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e50:	181b      	addge	r3, r3, r0
 8009e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e56:	bfac      	ite	ge
 8009e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e5a:	81a3      	strhlt	r3, [r4, #12]
 8009e5c:	bd10      	pop	{r4, pc}

08009e5e <__swrite>:
 8009e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	461f      	mov	r7, r3
 8009e64:	898b      	ldrh	r3, [r1, #12]
 8009e66:	05db      	lsls	r3, r3, #23
 8009e68:	4605      	mov	r5, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	d505      	bpl.n	8009e7c <__swrite+0x1e>
 8009e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e74:	2302      	movs	r3, #2
 8009e76:	2200      	movs	r2, #0
 8009e78:	f000 f868 	bl	8009f4c <_lseek_r>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	4632      	mov	r2, r6
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e92:	f000 b817 	b.w	8009ec4 <_write_r>

08009e96 <__sseek>:
 8009e96:	b510      	push	{r4, lr}
 8009e98:	460c      	mov	r4, r1
 8009e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9e:	f000 f855 	bl	8009f4c <_lseek_r>
 8009ea2:	1c43      	adds	r3, r0, #1
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	bf15      	itete	ne
 8009ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eb2:	81a3      	strheq	r3, [r4, #12]
 8009eb4:	bf18      	it	ne
 8009eb6:	81a3      	strhne	r3, [r4, #12]
 8009eb8:	bd10      	pop	{r4, pc}

08009eba <__sclose>:
 8009eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ebe:	f000 b813 	b.w	8009ee8 <_close_r>
	...

08009ec4 <_write_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	; (8009ee4 <_write_r+0x20>)
 8009ec8:	4604      	mov	r4, r0
 8009eca:	4608      	mov	r0, r1
 8009ecc:	4611      	mov	r1, r2
 8009ece:	2200      	movs	r2, #0
 8009ed0:	602a      	str	r2, [r5, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f7f8 f8c5 	bl	8002062 <_write>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_write_r+0x1e>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_write_r+0x1e>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	24000518 	.word	0x24000518

08009ee8 <_close_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_close_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f8 f8d1 	bl	800209a <_close>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_close_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_close_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	24000518 	.word	0x24000518

08009f08 <_fstat_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_fstat_r+0x20>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	f7f8 f8cc 	bl	80020b2 <_fstat>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d102      	bne.n	8009f24 <_fstat_r+0x1c>
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	b103      	cbz	r3, 8009f24 <_fstat_r+0x1c>
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	bd38      	pop	{r3, r4, r5, pc}
 8009f26:	bf00      	nop
 8009f28:	24000518 	.word	0x24000518

08009f2c <_isatty_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d06      	ldr	r5, [pc, #24]	; (8009f48 <_isatty_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f8 f8cb 	bl	80020d2 <_isatty>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_isatty_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_isatty_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	24000518 	.word	0x24000518

08009f4c <_lseek_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_lseek_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f8 f8c4 	bl	80020e8 <_lseek>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_lseek_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_lseek_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	24000518 	.word	0x24000518

08009f70 <_read_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d07      	ldr	r5, [pc, #28]	; (8009f90 <_read_r+0x20>)
 8009f74:	4604      	mov	r4, r0
 8009f76:	4608      	mov	r0, r1
 8009f78:	4611      	mov	r1, r2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	602a      	str	r2, [r5, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f7f8 f852 	bl	8002028 <_read>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_read_r+0x1e>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_read_r+0x1e>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	24000518 	.word	0x24000518

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
