
H755_SPI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  0800a210  0800a210  0001a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab8c  0800ab8c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab94  0800ab94  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800ab9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  240001e8  0800ad84  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400057c  0800ad84  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016369  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bde  00000000  00000000  0003657f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00039160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  0003a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc5f  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c61  00000000  00000000  00076c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018146c  00000000  00000000  0008d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020ecf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0020ed44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a1f8 	.word	0x0800a1f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800a1f8 	.word	0x0800a1f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f9f3 	bl	8002c08 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f9ea 	bl	8002c08 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000214 	.word	0x24000214
 8000840:	24000218 	.word	0x24000218

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f9d3 	bl	8002c08 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f9ca 	bl	8002c08 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000214 	.word	0x24000214
 8000880:	2400021a 	.word	0x2400021a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fe78 	bl	800559c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 f862 	bl	8005980 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400021c 	.word	0x2400021c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fe4d 	bl	800559c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 f838 	bl	8005980 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400021c 	.word	0x2400021c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fe23 	bl	800559c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400021c 	.word	0x2400021c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fe03 	bl	800559c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fdfc 	bl	800559c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400021c 	.word	0x2400021c

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f004 fdd3 	bl	800559c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f004 ffbe 	bl	8005980 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400021c 	.word	0x2400021c

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f006 fd62 	bl	800753c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fdf2 	bl	8002680 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400021c 	.word	0x2400021c
 8000c08:	24000214 	.word	0x24000214
 8000c0c:	24000218 	.word	0x24000218
 8000c10:	2400021a 	.word	0x2400021a

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000208 	.word	0x24000208

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000208 	.word	0x24000208
 8000d40:	0800a778 	.word	0x0800a778
 8000d44:	0800a780 	.word	0x0800a780
 8000d48:	24000210 	.word	0x24000210

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000210 	.word	0x24000210

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000210 	.word	0x24000210

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000211 	.word	0x24000211

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000211 	.word	0x24000211

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	24000212 	.word	0x24000212

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f004 fa6e 	bl	800559c <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400021c 	.word	0x2400021c

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fe9b 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f005 f93d 	bl	800637a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f006 fe76 	bl	8007e1c <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fe6f 	bl	8007e1c <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f006 fe68 	bl	8007e1c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f005 f90a 	bl	800637a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f006 fe0f 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f005 f8b1 	bl	800637a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f006 fdb6 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f005 f858 	bl	800637a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fd94 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f005 f836 	bl	800637a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f006 fd77 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f005 f819 	bl	800637a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fd58 	bl	8007e1c <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f006 fd51 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f004 fff3 	bl	800637a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fd2f 	bl	8007e1c <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 fd24 	bl	8007e1c <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 fd19 	bl	8007e1c <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	0800a210 	.word	0x0800a210
 80013f0:	240002a4 	.word	0x240002a4
 80013f4:	0800a244 	.word	0x0800a244
 80013f8:	0800a260 	.word	0x0800a260
 80013fc:	0800a27c 	.word	0x0800a27c
 8001400:	0800a290 	.word	0x0800a290
 8001404:	0800a2d4 	.word	0x0800a2d4
 8001408:	0800a320 	.word	0x0800a320
 800140c:	0800a33c 	.word	0x0800a33c
 8001410:	0800a350 	.word	0x0800a350
 8001414:	0800a368 	.word	0x0800a368
 8001418:	0800a380 	.word	0x0800a380
 800141c:	0800a394 	.word	0x0800a394
 8001420:	0800a3a8 	.word	0x0800a3a8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f006 fcf2 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f004 ff94 	bl	800637a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f006 fcce 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f004 ff70 	bl	800637a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f006 fcaa 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f004 ff4c 	bl	800637a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 fc8f 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f004 ff31 	bl	800637a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f006 fc74 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f004 ff16 	bl	800637a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f006 fc59 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f004 fefb 	bl	800637a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fc3e 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f004 fee0 	bl	800637a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f006 fc1a 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f004 febc 	bl	800637a <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f006 fbfd 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f004 fe9f 	bl	800637a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fbe0 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f004 fe82 	bl	800637a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f006 fbc3 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f004 fe65 	bl	800637a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fba6 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f004 fe48 	bl	800637a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f006 fb89 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f004 fe2b 	bl	800637a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fb6c 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f004 fe0e 	bl	800637a <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	0800a3bc 	.word	0x0800a3bc
 8001794:	240002a4 	.word	0x240002a4
 8001798:	0800a3d0 	.word	0x0800a3d0
 800179c:	0800a400 	.word	0x0800a400
 80017a0:	0800a430 	.word	0x0800a430
 80017a4:	0800a458 	.word	0x0800a458
 80017a8:	0800a480 	.word	0x0800a480
 80017ac:	0800a4a8 	.word	0x0800a4a8
 80017b0:	0800a4d0 	.word	0x0800a4d0
 80017b4:	0800a4fc 	.word	0x0800a4fc
 80017b8:	0800a518 	.word	0x0800a518
 80017bc:	0800a534 	.word	0x0800a534
 80017c0:	0800a550 	.word	0x0800a550
 80017c4:	0800a56c 	.word	0x0800a56c
 80017c8:	0800a588 	.word	0x0800a588
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f006 faf4 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f004 fd96 	bl	800637a <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f006 fad5 	bl	8007e1c <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f006 face 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f004 fd70 	bl	800637a <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f006 fab5 	bl	8007e1c <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 faae 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f004 fd50 	bl	800637a <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f006 fa9b 	bl	8007e1c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f004 fd3d 	bl	800637a <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0800a5a4 	.word	0x0800a5a4
 800190c:	240002a4 	.word	0x240002a4
 8001910:	0800a5f0 	.word	0x0800a5f0
 8001914:	0800a608 	.word	0x0800a608
 8001918:	0800a620 	.word	0x0800a620
 800191c:	0800a63c 	.word	0x0800a63c
 8001920:	0800a210 	.word	0x0800a210

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f005 fdfd 	bl	800753c <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	240002a4 	.word	0x240002a4

08001954 <mySetupNRF24>:
//********** My Function ************//
//Collects setup NRF24 functions
//Group Port, CSN Pin, CE Pin, SPI handle, UART handle, channel, address, speed
void mySetupNRF24(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin,
		SPI_HandleTypeDef nrfSPI,UART_HandleTypeDef nrf24Uart,
		uint8_t channel, uint64_t address, rf24_datarate_e speed){
 8001954:	b082      	sub	sp, #8
 8001956:	b5b0      	push	{r4, r5, r7, lr}
 8001958:	b0a4      	sub	sp, #144	; 0x90
 800195a:	af22      	add	r7, sp, #136	; 0x88
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	803b      	strh	r3, [r7, #0]
	NRF24_begin(nrf24PORT,nrfCSN_Pin,nrfCE_Pin,nrfSPI);
 8001968:	883d      	ldrh	r5, [r7, #0]
 800196a:	887c      	ldrh	r4, [r7, #2]
 800196c:	4668      	mov	r0, sp
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2284      	movs	r2, #132	; 0x84
 8001974:	4619      	mov	r1, r3
 8001976:	f005 fde1 	bl	800753c <memcpy>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	462a      	mov	r2, r5
 800197e:	4621      	mov	r1, r4
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff f867 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(nrf24Uart);
 8001986:	4668      	mov	r0, sp
 8001988:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	4619      	mov	r1, r3
 8001990:	f005 fdd4 	bl	800753c <memcpy>
 8001994:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199a:	f7ff ffc3 	bl	8001924 <nrf24_DebugUART_Init>
//	NRF24_setAutoAck(true);
	NRF24_setAutoAck(false);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fa7a 	bl	8000e98 <NRF24_setAutoAck>
	NRF24_setChannel(channel);
 80019a4:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f9ea 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80019ae:	2020      	movs	r0, #32
 80019b0:	f7ff f9fc 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_openReadingPipe(0, address);
 80019b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff f979 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 80019be:	f7ff fa21 	bl	8000e04 <NRF24_enableDynamicPayloads>
//	NRF24_enableAckPayload();
	NRF24_setDataRate(speed);
 80019c2:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fab4 	bl	8000f34 <NRF24_setDataRate>
	printRadioSettings();
 80019cc:	f7ff fb82 	bl	80010d4 <printRadioSettings>
	NRF24_startListening();
 80019d0:	f7ff f920 	bl	8000c14 <NRF24_startListening>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019de:	b002      	add	sp, #8
 80019e0:	4770      	bx	lr

080019e2 <myReadData2>:
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
  return status;
}

uint8_t myReadData2(uint8_t* myRxData){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  if(NRF24_available()){
 80019ee:	f7ff f937 	bl	8000c60 <NRF24_available>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <myReadData2+0x32>
			status = NRF24_read(myRxData, 32);
 80019f8:	2120      	movs	r1, #32
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f938 	bl	8000c70 <NRF24_read>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
//			NRF24_writeAckPayload(1, myAckPayload, 32); //Sends acknowledgement to receiver
			myRxData[32] = '\r';
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3320      	adds	r3, #32
 8001a08:	220d      	movs	r2, #13
 8001a0a:	701a      	strb	r2, [r3, #0]
			myRxData[32+1] = '\n';
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3321      	adds	r3, #33	; 0x21
 8001a10:	220a      	movs	r2, #10
 8001a12:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
  return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_GPIO_Init+0xec>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin|CE3_2_Pin_Pin|CSN3_2_Pin_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <MX_GPIO_Init+0xf0>)
 8001ab6:	f001 f8a7 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSN3_Pin_Pin|CE3_Pin_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_GPIO_Init+0xf4>)
 8001ac2:	f001 f8a1 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin|CE3_2_Pin_Pin|CSN3_2_Pin_Pin;
 8001ac6:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_GPIO_Init+0xf0>)
 8001ae0:	f000 fee2 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CSN3_Pin_Pin|CE3_Pin_Pin;
 8001ae4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_GPIO_Init+0xf4>)
 8001afe:	f000 fed3 	bl	80028a8 <HAL_GPIO_Init>

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	58020c00 	.word	0x58020c00
 8001b14:	58020800 	.word	0x58020800

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b0cf      	sub	sp, #316	; 0x13c
 8001b1c:	af4a      	add	r7, sp, #296	; 0x128
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b22:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001b24:	bf00      	nop
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <main+0x138>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <main+0x24>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1e5a      	subs	r2, r3, #1
 8001b36:	60fa      	str	r2, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dcf4      	bgt.n	8001b26 <main+0xe>
  if ( timeout < 0 )
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da01      	bge.n	8001b46 <main+0x2e>
  {
  Error_Handler();
 8001b42:	f000 f90f 	bl	8001d64 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b46:	f000 fd09 	bl	800255c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4a:	f000 f88f 	bl	8001c6c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001b4e:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <main+0x138>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	4a3e      	ldr	r2, [pc, #248]	; (8001c50 <main+0x138>)
 8001b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <main+0x138>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f001 f865 	bl	8002c3c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001b72:	2100      	movs	r1, #0
 8001b74:	2000      	movs	r0, #0
 8001b76:	f001 f87b 	bl	8002c70 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001b80:	bf00      	nop
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <main+0x138>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <main+0x80>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	60fa      	str	r2, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dcf4      	bgt.n	8001b82 <main+0x6a>
if ( timeout < 0 )
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	da01      	bge.n	8001ba2 <main+0x8a>
{
Error_Handler();
 8001b9e:	f000 f8e1 	bl	8001d64 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba2:	f7ff ff3d 	bl	8001a20 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001ba6:	f000 f8f5 	bl	8001d94 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001baa:	f000 fbfb 	bl	80023a4 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001bae:	f000 f947 	bl	8001e40 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001bb2:	f000 f99b 	bl	8001eec <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  mySetupNRF24(nrf_CSN_PORT3_2, nrf_CSN_PIN3_2, nrf_CE_PIN3_2,
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <main+0x13c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4c26      	ldr	r4, [pc, #152]	; (8001c58 <main+0x140>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	9148      	str	r1, [sp, #288]	; 0x120
 8001bc2:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 8001bc6:	2334      	movs	r3, #52	; 0x34
 8001bc8:	9345      	str	r3, [sp, #276]	; 0x114
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <main+0x144>)
 8001bcc:	ab21      	add	r3, sp, #132	; 0x84
 8001bce:	4611      	mov	r1, r2
 8001bd0:	2290      	movs	r2, #144	; 0x90
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f005 fcb2 	bl	800753c <memcpy>
 8001bd8:	4668      	mov	r0, sp
 8001bda:	1d23      	adds	r3, r4, #4
 8001bdc:	2284      	movs	r2, #132	; 0x84
 8001bde:	4619      	mov	r1, r3
 8001be0:	f005 fcac 	bl	800753c <memcpy>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	481d      	ldr	r0, [pc, #116]	; (8001c60 <main+0x148>)
 8001bec:	f7ff feb2 	bl	8001954 <mySetupNRF24>
		  hspi3,huart3,52, RxpipeAddrs, 1);
//  mySetupNRF24(nrf_CSN_PORT, nrf_CSN_PIN, nrf_CE_PIN,
//  		  hspi2,huart3,60, RxpipeAddrs, 1);
  uint16_t x=0, y=0 ,a=0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	813b      	strh	r3, [r7, #8]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = myReadData2(myRxData);
 8001bfc:	4819      	ldr	r0, [pc, #100]	; (8001c64 <main+0x14c>)
 8001bfe:	f7ff fef0 	bl	80019e2 <myReadData2>
 8001c02:	4603      	mov	r3, r0
 8001c04:	717b      	strb	r3, [r7, #5]
	  x = (uint16_t)myRxData[0] << 8 | myRxData[1];
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <main+0x14c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <main+0x14c>)
 8001c10:	785b      	ldrb	r3, [r3, #1]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	817b      	strh	r3, [r7, #10]
	  y = (uint16_t)myRxData[2] << 8 | myRxData[3];
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <main+0x14c>)
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <main+0x14c>)
 8001c24:	78db      	ldrb	r3, [r3, #3]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	813b      	strh	r3, [r7, #8]
	  a = (uint16_t)myRxData[4] << 8 | myRxData[5];
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <main+0x14c>)
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <main+0x14c>)
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	80fb      	strh	r3, [r7, #6]
//	  printf("S: %d \r\n",status);
//	  printf("U %x %x %x %x %x %x\r\n",myRxData2[0],myRxData2[1],myRxData2[2],myRxData2[3],myRxData2[4],myRxData2[5]);
	  printf("X:%d Y:%d A:%d\r\n",x,y,a);
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	893a      	ldrh	r2, [r7, #8]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <main+0x150>)
 8001c4a:	f006 f8cf 	bl	8007dec <iprintf>
	  status = myReadData2(myRxData);
 8001c4e:	e7d5      	b.n	8001bfc <main+0xe4>
 8001c50:	58024400 	.word	0x58024400
 8001c54:	24000008 	.word	0x24000008
 8001c58:	2400044c 	.word	0x2400044c
 8001c5c:	240004d8 	.word	0x240004d8
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	24000334 	.word	0x24000334
 8001c68:	0800a754 	.word	0x0800a754

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b09c      	sub	sp, #112	; 0x70
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	224c      	movs	r2, #76	; 0x4c
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 fc6c 	bl	8007558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2220      	movs	r2, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 fc66 	bl	8007558 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c8c:	2004      	movs	r0, #4
 8001c8e:	f001 f803 	bl	8002c98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <SystemClock_Config+0xf0>)
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <SystemClock_Config+0xf0>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <SystemClock_Config+0xf0>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <SystemClock_Config+0xf4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cb4:	4a2a      	ldr	r2, [pc, #168]	; (8001d60 <SystemClock_Config+0xf4>)
 8001cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <SystemClock_Config+0xf4>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cc8:	bf00      	nop
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <SystemClock_Config+0xf4>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd6:	d1f8      	bne.n	8001cca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001d02:	2302      	movs	r3, #2
 8001d04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001d06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 f81b 	bl	8002d4c <HAL_RCC_OscConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d1c:	f000 f822 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d20:	233f      	movs	r3, #63	; 0x3f
 8001d22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d24:	2303      	movs	r3, #3
 8001d26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fc2f 	bl	80035a8 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001d50:	f000 f808 	bl	8001d64 <Error_Handler>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3770      	adds	r7, #112	; 0x70
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58000400 	.word	0x58000400
 8001d60:	58024800 	.word	0x58024800

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d78:	1d39      	adds	r1, r7, #4
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <__io_putchar+0x20>)
 8001d82:	f004 fafa 	bl	800637a <HAL_UART_Transmit>
  return ch;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	240004d8 	.word	0x240004d8

08001d94 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001d9a:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <MX_SPI1_Init+0xa8>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001da0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dae:	2207      	movs	r2, #7
 8001db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_SPI1_Init+0xa4>)
 8001e26:	f003 fab3 	bl	8005390 <HAL_SPI_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001e30:	f7ff ff98 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2400033c 	.word	0x2400033c
 8001e3c:	40013000 	.word	0x40013000

08001e40 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e46:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <MX_SPI2_Init+0xa8>)
 8001e48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_SPI2_Init+0xa4>)
 8001ed2:	f003 fa5d 	bl	8005390 <HAL_SPI_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001edc:	f7ff ff42 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	240003c4 	.word	0x240003c4
 8001ee8:	40003800 	.word	0x40003800

08001eec <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <MX_SPI3_Init+0xa8>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001ef8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001efc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f06:	2207      	movs	r2, #7
 8001f08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f20:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001f24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <MX_SPI3_Init+0xa4>)
 8001f7e:	f003 fa07 	bl	8005390 <HAL_SPI_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001f88:	f7ff feec 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2400044c 	.word	0x2400044c
 8001f94:	40003c00 	.word	0x40003c00

08001f98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0bc      	sub	sp, #240	; 0xf0
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	22bc      	movs	r2, #188	; 0xbc
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f005 facd 	bl	8007558 <memset>
  if(spiHandle->Instance==SPI1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6d      	ldr	r2, [pc, #436]	; (8002178 <HAL_SPI_MspInit+0x1e0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d142      	bne.n	800204e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd2:	f107 0320 	add.w	r3, r7, #32
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 fe72 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001fe2:	f7ff febf 	bl	8001d64 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8001fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fec:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8001fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ff6:	4b61      	ldr	r3, [pc, #388]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8001ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	4a5c      	ldr	r2, [pc, #368]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002022:	2338      	movs	r3, #56	; 0x38
 8002024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800203a:	2305      	movs	r3, #5
 800203c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002044:	4619      	mov	r1, r3
 8002046:	484e      	ldr	r0, [pc, #312]	; (8002180 <HAL_SPI_MspInit+0x1e8>)
 8002048:	f000 fc2e 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800204c:	e090      	b.n	8002170 <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_SPI_MspInit+0x1ec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d143      	bne.n	80020e0 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800205e:	2300      	movs	r3, #0
 8002060:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	4618      	mov	r0, r3
 8002068:	f001 fe2a 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002072:	f7ff fe77 	bl	8001d64 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207c:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 800207e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	4a38      	ldr	r2, [pc, #224]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020cc:	2305      	movs	r3, #5
 80020ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020d6:	4619      	mov	r1, r3
 80020d8:	4829      	ldr	r0, [pc, #164]	; (8002180 <HAL_SPI_MspInit+0x1e8>)
 80020da:	f000 fbe5 	bl	80028a8 <HAL_GPIO_Init>
}
 80020de:	e047      	b.n	8002170 <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a28      	ldr	r2, [pc, #160]	; (8002188 <HAL_SPI_MspInit+0x1f0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d142      	bne.n	8002170 <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f4:	f107 0320 	add.w	r3, r7, #32
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fde1 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_SPI_MspInit+0x170>
      Error_Handler();
 8002104:	f7ff fe2e 	bl	8001d64 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 800210a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	4a13      	ldr	r2, [pc, #76]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_SPI_MspInit+0x1e4>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002144:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002148:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800215e:	2306      	movs	r3, #6
 8002160:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002168:	4619      	mov	r1, r3
 800216a:	4808      	ldr	r0, [pc, #32]	; (800218c <HAL_SPI_MspInit+0x1f4>)
 800216c:	f000 fb9c 	bl	80028a8 <HAL_GPIO_Init>
}
 8002170:	bf00      	nop
 8002172:	37f0      	adds	r7, #240	; 0xf0
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40013000 	.word	0x40013000
 800217c:	58024400 	.word	0x58024400
 8002180:	58020400 	.word	0x58020400
 8002184:	40003800 	.word	0x40003800
 8002188:	40003c00 	.word	0x40003c00
 800218c:	58020800 	.word	0x58020800

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_MspInit+0x30>)
 8002198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800219c:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_MspInit+0x30>)
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_MspInit+0x30>)
 80021a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	58024400 	.word	0x58024400

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <NMI_Handler+0x4>

080021ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler+0x4>

080021d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002210:	f000 fa16 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
	return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_kill>:

int _kill(int pid, int sig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002232:	f005 f959 	bl	80074e8 <__errno>
 8002236:	4603      	mov	r3, r0
 8002238:	2216      	movs	r2, #22
 800223a:	601a      	str	r2, [r3, #0]
	return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_exit>:

void _exit (int status)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe7 	bl	8002228 <_kill>
	while (1) {}		/* Make sure we hang here */
 800225a:	e7fe      	b.n	800225a <_exit+0x12>

0800225c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800226e:	f3af 8000 	nop.w
 8002272:	4601      	mov	r1, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf0      	blt.n	800226e <_read+0x12>
	}

return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e009      	b.n	80022bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fd5d 	bl	8001d70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf1      	blt.n	80022a8 <_write+0x12>
	}
	return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_close>:

int _close(int file)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f6:	605a      	str	r2, [r3, #4]
	return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_isatty>:

int _isatty(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return 1;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f005 f8be 	bl	80074e8 <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	24080000 	.word	0x24080000
 8002398:	00000400 	.word	0x00000400
 800239c:	240004d4 	.word	0x240004d4
 80023a0:	24000580 	.word	0x24000580

080023a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023aa:	4a23      	ldr	r2, [pc, #140]	; (8002438 <MX_USART3_UART_Init+0x94>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ec:	4811      	ldr	r0, [pc, #68]	; (8002434 <MX_USART3_UART_Init+0x90>)
 80023ee:	f003 ff74 	bl	80062da <HAL_UART_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023f8:	f7ff fcb4 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023fc:	2100      	movs	r1, #0
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <MX_USART3_UART_Init+0x90>)
 8002400:	f004 ffa8 	bl	8007354 <HAL_UARTEx_SetTxFifoThreshold>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800240a:	f7ff fcab 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800240e:	2100      	movs	r1, #0
 8002410:	4808      	ldr	r0, [pc, #32]	; (8002434 <MX_USART3_UART_Init+0x90>)
 8002412:	f004 ffdd 	bl	80073d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800241c:	f7ff fca2 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <MX_USART3_UART_Init+0x90>)
 8002422:	f004 ff5e 	bl	80072e2 <HAL_UARTEx_DisableFifoMode>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800242c:	f7ff fc9a 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	240004d8 	.word	0x240004d8
 8002438:	40004800 	.word	0x40004800

0800243c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0b8      	sub	sp, #224	; 0xe0
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	22bc      	movs	r2, #188	; 0xbc
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f005 f87b 	bl	8007558 <memset>
  if(uartHandle->Instance==USART3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a25      	ldr	r2, [pc, #148]	; (80024fc <HAL_UART_MspInit+0xc0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d142      	bne.n	80024f2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800246c:	2302      	movs	r3, #2
 800246e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fc20 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002486:	f7ff fc6d 	bl	8001d64 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_UART_MspInit+0xc4>)
 800248c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_UART_MspInit+0xc4>)
 8002492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_UART_MspInit+0xc4>)
 800249c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_UART_MspInit+0xc4>)
 80024aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_UART_MspInit+0xc4>)
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_UART_MspInit+0xc4>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e0:	2307      	movs	r3, #7
 80024e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <HAL_UART_MspInit+0xc8>)
 80024ee:	f000 f9db 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	37e0      	adds	r7, #224	; 0xe0
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40004800 	.word	0x40004800
 8002500:	58024400 	.word	0x58024400
 8002504:	58020c00 	.word	0x58020c00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800250c:	f7fe f8c2 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	; (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	; (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002536:	f004 ffdd 	bl	80074f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7ff faed 	bl	8001b18 <main>
  bx  lr
 800253e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002540:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002548:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 800254c:	0800ab9c 	.word	0x0800ab9c
  ldr r2, =_sbss
 8002550:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002554:	2400057c 	.word	0x2400057c

08002558 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC3_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002562:	2003      	movs	r0, #3
 8002564:	f000 f96e 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002568:	f001 f9d4 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_Init+0x68>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	4913      	ldr	r1, [pc, #76]	; (80025c8 <HAL_Init+0x6c>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_Init+0x68>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_Init+0x6c>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <HAL_Init+0x70>)
 800259e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025a0:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <HAL_Init+0x74>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a6:	200f      	movs	r0, #15
 80025a8:	f000 f814 	bl	80025d4 <HAL_InitTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e002      	b.n	80025bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025b6:	f7ff fdeb 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	58024400 	.word	0x58024400
 80025c8:	0800a768 	.word	0x0800a768
 80025cc:	24000004 	.word	0x24000004
 80025d0:	24000000 	.word	0x24000000

080025d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_InitTick+0x60>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e021      	b.n	800262c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_InitTick+0x64>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_InitTick+0x60>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f945 	bl	800288e <HAL_SYSTICK_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00e      	b.n	800262c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d80a      	bhi.n	800262a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002614:	2200      	movs	r2, #0
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f000 f91d 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <HAL_InitTick+0x68>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	24000014 	.word	0x24000014
 8002638:	24000000 	.word	0x24000000
 800263c:	24000010 	.word	0x24000010

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	24000014 	.word	0x24000014
 8002664:	24000568 	.word	0x24000568

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	24000568 	.word	0x24000568

08002680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff ffee 	bl	8002668 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d005      	beq.n	80026a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_Delay+0x44>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026a6:	bf00      	nop
 80026a8:	f7ff ffde 	bl	8002668 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d8f7      	bhi.n	80026a8 <HAL_Delay+0x28>
  {
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	24000014 	.word	0x24000014

080026c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_GetREVID+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0c1b      	lsrs	r3, r3, #16
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	5c001000 	.word	0x5c001000

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <__NVIC_SetPriorityGrouping+0x40>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x40>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00
 8002724:	05fa0000 	.word	0x05fa0000

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff47 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff5e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffb2 	bl	8002800 <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028b6:	4b89      	ldr	r3, [pc, #548]	; (8002adc <HAL_GPIO_Init+0x234>)
 80028b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ba:	e194      	b.n	8002be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8186 	beq.w	8002be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d005      	beq.n	80028ec <HAL_GPIO_Init+0x44>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d130      	bne.n	800294e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002922:	2201      	movs	r2, #1
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 0201 	and.w	r2, r3, #1
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b03      	cmp	r3, #3
 8002958:	d017      	beq.n	800298a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d123      	bne.n	80029de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	69b9      	ldr	r1, [r7, #24]
 80029da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0203 	and.w	r2, r3, #3
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80e0 	beq.w	8002be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_GPIO_Init+0x238>)
 8002a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a26:	4a2e      	ldr	r2, [pc, #184]	; (8002ae0 <HAL_GPIO_Init+0x238>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_GPIO_Init+0x238>)
 8002a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3e:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_GPIO_Init+0x23c>)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_GPIO_Init+0x240>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d052      	beq.n	8002b10 <HAL_GPIO_Init+0x268>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_GPIO_Init+0x244>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d031      	beq.n	8002ad6 <HAL_GPIO_Init+0x22e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_GPIO_Init+0x248>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x22a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_GPIO_Init+0x24c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x226>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_GPIO_Init+0x250>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x222>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_GPIO_Init+0x254>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x21e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_GPIO_Init+0x258>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x21a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_GPIO_Init+0x25c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x216>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_GPIO_Init+0x260>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x212>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <HAL_GPIO_Init+0x264>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x20e>
 8002ab2:	2309      	movs	r3, #9
 8002ab4:	e02d      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	e02b      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002aba:	2308      	movs	r3, #8
 8002abc:	e029      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002abe:	2307      	movs	r3, #7
 8002ac0:	e027      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	e025      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e023      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e021      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e01f      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e01d      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e01b      	b.n	8002b12 <HAL_GPIO_Init+0x26a>
 8002ada:	bf00      	nop
 8002adc:	58000080 	.word	0x58000080
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	58000400 	.word	0x58000400
 8002ae8:	58020000 	.word	0x58020000
 8002aec:	58020400 	.word	0x58020400
 8002af0:	58020800 	.word	0x58020800
 8002af4:	58020c00 	.word	0x58020c00
 8002af8:	58021000 	.word	0x58021000
 8002afc:	58021400 	.word	0x58021400
 8002b00:	58021800 	.word	0x58021800
 8002b04:	58021c00 	.word	0x58021c00
 8002b08:	58022000 	.word	0x58022000
 8002b0c:	58022400 	.word	0x58022400
 8002b10:	2300      	movs	r3, #0
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b22:	4938      	ldr	r1, [pc, #224]	; (8002c04 <HAL_GPIO_Init+0x35c>)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f ae63 	bne.w	80028bc <HAL_GPIO_Init+0x14>
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	3724      	adds	r7, #36	; 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	58000400 	.word	0x58000400

08002c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	4613      	mov	r3, r2
 8002c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c24:	e003      	b.n	8002c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_HSEM_FastTake+0x2c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3320      	adds	r3, #32
 8002c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_HSEM_FastTake+0x30>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	58026400 	.word	0x58026400
 8002c6c:	80000300 	.word	0x80000300

08002c70 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002c7a:	4906      	ldr	r1, [pc, #24]	; (8002c94 <HAL_HSEM_Release+0x24>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	58026400 	.word	0x58026400

08002c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d00a      	beq.n	8002cc2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e040      	b.n	8002d40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e03e      	b.n	8002d40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002cca:	491f      	ldr	r1, [pc, #124]	; (8002d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cd2:	f7ff fcc9 	bl	8002668 <HAL_GetTick>
 8002cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cd8:	e009      	b.n	8002cee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cda:	f7ff fcc5 	bl	8002668 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce8:	d901      	bls.n	8002cee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e028      	b.n	8002d40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfa:	d1ee      	bne.n	8002cda <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b1e      	cmp	r3, #30
 8002d00:	d008      	beq.n	8002d14 <HAL_PWREx_ConfigSupply+0x7c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b2e      	cmp	r3, #46	; 0x2e
 8002d06:	d005      	beq.n	8002d14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b1d      	cmp	r3, #29
 8002d0c:	d002      	beq.n	8002d14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b2d      	cmp	r3, #45	; 0x2d
 8002d12:	d114      	bne.n	8002d3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002d14:	f7ff fca8 	bl	8002668 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d1a:	e009      	b.n	8002d30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d1c:	f7ff fca4 	bl	8002668 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2a:	d901      	bls.n	8002d30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	58024800 	.word	0x58024800

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f000 bc1d 	b.w	800359a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8087 	beq.w	8002e7c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6e:	4b99      	ldr	r3, [pc, #612]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d78:	4b96      	ldr	r3, [pc, #600]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_OscConfig+0x48>
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2b18      	cmp	r3, #24
 8002d88:	d110      	bne.n	8002dac <HAL_RCC_OscConfig+0x60>
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b8f      	ldr	r3, [pc, #572]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d06c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x12e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d168      	bne.n	8002e7a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e3f6      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x78>
 8002db6:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a86      	ldr	r2, [pc, #536]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e02e      	b.n	8002e22 <HAL_RCC_OscConfig+0xd6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_OscConfig+0x9a>
 8002dcc:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7d      	ldr	r2, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e01d      	b.n	8002e22 <HAL_RCC_OscConfig+0xd6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0xbe>
 8002df0:	4b78      	ldr	r3, [pc, #480]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a77      	ldr	r2, [pc, #476]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b75      	ldr	r3, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a74      	ldr	r2, [pc, #464]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0xd6>
 8002e0a:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a71      	ldr	r2, [pc, #452]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d013      	beq.n	8002e52 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7ff fc1d 	bl	8002668 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e32:	f7ff fc19 	bl	8002668 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e3aa      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e44:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0xe6>
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7ff fc09 	bl	8002668 <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5a:	f7ff fc05 	bl	8002668 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	; 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e396      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x10e>
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80cb 	beq.w	8003020 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8a:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e92:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e94:	4b4f      	ldr	r3, [pc, #316]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x164>
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2b18      	cmp	r3, #24
 8002ea4:	d156      	bne.n	8002f54 <HAL_RCC_OscConfig+0x208>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d151      	bne.n	8002f54 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb0:	4b48      	ldr	r3, [pc, #288]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x17c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e368      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 0219 	bic.w	r2, r3, #25
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	493f      	ldr	r1, [pc, #252]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eda:	f7ff fbc5 	bl	8002668 <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7ff fbc1 	bl	8002668 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e352      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef4:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	f7ff fbe2 	bl	80026c8 <HAL_GetREVID>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d817      	bhi.n	8002f3e <HAL_RCC_OscConfig+0x1f2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d108      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1dc>
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f26:	e07b      	b.n	8003020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	031b      	lsls	r3, r3, #12
 8002f36:	4927      	ldr	r1, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f3c:	e070      	b.n	8003020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	061b      	lsls	r3, r3, #24
 8002f4c:	4921      	ldr	r1, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f52:	e065      	b.n	8003020 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d048      	beq.n	8002fee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0219 	bic.w	r2, r3, #25
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	491a      	ldr	r1, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7ff fb7b 	bl	8002668 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f76:	f7ff fb77 	bl	8002668 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e308      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	f7ff fb98 	bl	80026c8 <HAL_GetREVID>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d81a      	bhi.n	8002fd8 <HAL_RCC_OscConfig+0x28c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d108      	bne.n	8002fbc <HAL_RCC_OscConfig+0x270>
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6053      	str	r3, [r2, #4]
 8002fba:	e031      	b.n	8003020 <HAL_RCC_OscConfig+0x2d4>
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	031b      	lsls	r3, r3, #12
 8002fca:	4902      	ldr	r1, [pc, #8]	; (8002fd4 <HAL_RCC_OscConfig+0x288>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
 8002fd0:	e026      	b.n	8003020 <HAL_RCC_OscConfig+0x2d4>
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	4b9a      	ldr	r3, [pc, #616]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4997      	ldr	r1, [pc, #604]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
 8002fec:	e018      	b.n	8003020 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b95      	ldr	r3, [pc, #596]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a94      	ldr	r2, [pc, #592]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7ff fb35 	bl	8002668 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7ff fb31 	bl	8002668 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e2c2      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003014:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a9 	beq.w	8003180 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b85      	ldr	r3, [pc, #532]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003036:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003038:	4b82      	ldr	r3, [pc, #520]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d007      	beq.n	8003054 <HAL_RCC_OscConfig+0x308>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b18      	cmp	r3, #24
 8003048:	d13a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x374>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d135      	bne.n	80030c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003054:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x320>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e296      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800306c:	f7ff fb2c 	bl	80026c8 <HAL_GetREVID>
 8003070:	4603      	mov	r3, r0
 8003072:	f241 0203 	movw	r2, #4099	; 0x1003
 8003076:	4293      	cmp	r3, r2
 8003078:	d817      	bhi.n	80030aa <HAL_RCC_OscConfig+0x35e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	2b20      	cmp	r3, #32
 8003080:	d108      	bne.n	8003094 <HAL_RCC_OscConfig+0x348>
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800308a:	4a6e      	ldr	r2, [pc, #440]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800308c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003090:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003092:	e075      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003094:	4b6b      	ldr	r3, [pc, #428]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	069b      	lsls	r3, r3, #26
 80030a2:	4968      	ldr	r1, [pc, #416]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030a8:	e06a      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030aa:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	061b      	lsls	r3, r3, #24
 80030b8:	4962      	ldr	r1, [pc, #392]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030be:	e05f      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d042      	beq.n	800314e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7ff fac8 	bl	8002668 <HAL_GetTick>
 80030d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030dc:	f7ff fac4 	bl	8002668 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e255      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030ee:	4b55      	ldr	r3, [pc, #340]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030fa:	f7ff fae5 	bl	80026c8 <HAL_GetREVID>
 80030fe:	4603      	mov	r3, r0
 8003100:	f241 0203 	movw	r2, #4099	; 0x1003
 8003104:	4293      	cmp	r3, r2
 8003106:	d817      	bhi.n	8003138 <HAL_RCC_OscConfig+0x3ec>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	2b20      	cmp	r3, #32
 800310e:	d108      	bne.n	8003122 <HAL_RCC_OscConfig+0x3d6>
 8003110:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800311a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800311e:	6053      	str	r3, [r2, #4]
 8003120:	e02e      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
 8003122:	4b48      	ldr	r3, [pc, #288]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	069b      	lsls	r3, r3, #26
 8003130:	4944      	ldr	r1, [pc, #272]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
 8003136:	e023      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	493f      	ldr	r1, [pc, #252]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
 800314c:	e018      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7ff fa85 	bl	8002668 <HAL_GetTick>
 800315e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003162:	f7ff fa81 	bl	8002668 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e212      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d036      	beq.n	80031fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d019      	beq.n	80031c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7ff fa62 	bl	8002668 <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a8:	f7ff fa5e 	bl	8002668 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1ef      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x45c>
 80031c6:	e018      	b.n	80031fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7ff fa48 	bl	8002668 <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031dc:	f7ff fa44 	bl	8002668 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1d5      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d039      	beq.n	800327a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01c      	beq.n	8003248 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003218:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800321a:	f7ff fa25 	bl	8002668 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003222:	f7ff fa21 	bl	8002668 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1b2      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x4d6>
 8003240:	e01b      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003248:	4b9b      	ldr	r3, [pc, #620]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a9a      	ldr	r2, [pc, #616]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800324e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003254:	f7ff fa08 	bl	8002668 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800325c:	f7ff fa04 	bl	8002668 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e195      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800326e:	4b92      	ldr	r3, [pc, #584]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8081 	beq.w	800338a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003288:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <HAL_RCC_OscConfig+0x770>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a8b      	ldr	r2, [pc, #556]	; (80034bc <HAL_RCC_OscConfig+0x770>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003294:	f7ff f9e8 	bl	8002668 <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7ff f9e4 	bl	8002668 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e175      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ae:	4b83      	ldr	r3, [pc, #524]	; (80034bc <HAL_RCC_OscConfig+0x770>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x584>
 80032c2:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a7c      	ldr	r2, [pc, #496]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	e02d      	b.n	800332c <HAL_RCC_OscConfig+0x5e0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5a6>
 80032d8:	4b77      	ldr	r3, [pc, #476]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a76      	ldr	r2, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a73      	ldr	r2, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x5e0>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x5c8>
 80032fa:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a6e      	ldr	r2, [pc, #440]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a6b      	ldr	r2, [pc, #428]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x5e0>
 8003314:	4b68      	ldr	r3, [pc, #416]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a67      	ldr	r2, [pc, #412]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a64      	ldr	r2, [pc, #400]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff f998 	bl	8002668 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7ff f994 	bl	8002668 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e123      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x5f0>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7ff f982 	bl	8002668 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7ff f97e 	bl	8002668 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e10d      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800337e:	4b4e      	ldr	r3, [pc, #312]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8102 	beq.w	8003598 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003394:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800339c:	2b18      	cmp	r3, #24
 800339e:	f000 80bd 	beq.w	800351c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	f040 809e 	bne.w	80034e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7ff f956 	bl	8002668 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7ff f952 	bl	8002668 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0e3      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033d2:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033de:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <HAL_RCC_OscConfig+0x774>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	430a      	orrs	r2, r1
 80033f2:	4931      	ldr	r1, [pc, #196]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	628b      	str	r3, [r1, #40]	; 0x28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	3b01      	subs	r3, #1
 80033fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	3b01      	subs	r3, #1
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	b29b      	uxth	r3, r3
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	3b01      	subs	r3, #1
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	3b01      	subs	r3, #1
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003428:	4923      	ldr	r1, [pc, #140]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x778>)
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003446:	00d2      	lsls	r2, r2, #3
 8003448:	491b      	ldr	r1, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	f023 020c 	bic.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4917      	ldr	r1, [pc, #92]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003460:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	f023 0202 	bic.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	4912      	ldr	r1, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003488:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003494:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_RCC_OscConfig+0x76c>)
 80034a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7ff f8db 	bl	8002668 <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034b4:	e011      	b.n	80034da <HAL_RCC_OscConfig+0x78e>
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58024800 	.word	0x58024800
 80034c0:	fffffc0c 	.word	0xfffffc0c
 80034c4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c8:	f7ff f8ce 	bl	8002668 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e05f      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034da:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCC_OscConfig+0x858>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x77c>
 80034e6:	e057      	b.n	8003598 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_RCC_OscConfig+0x858>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2d      	ldr	r2, [pc, #180]	; (80035a4 <HAL_RCC_OscConfig+0x858>)
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7ff f8b8 	bl	8002668 <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff f8b4 	bl	8002668 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e045      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800350e:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_RCC_OscConfig+0x858>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x7b0>
 800351a:	e03d      	b.n	8003598 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800351c:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_RCC_OscConfig+0x858>)
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_OscConfig+0x858>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b01      	cmp	r3, #1
 800352e:	d031      	beq.n	8003594 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0203 	and.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d12a      	bne.n	8003594 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d122      	bne.n	8003594 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d11a      	bne.n	8003594 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0a5b      	lsrs	r3, r3, #9
 8003562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d111      	bne.n	8003594 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d108      	bne.n	8003594 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0e1b      	lsrs	r3, r3, #24
 8003586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3730      	adds	r7, #48	; 0x30
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	58024400 	.word	0x58024400

080035a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e19c      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b8a      	ldr	r3, [pc, #552]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d910      	bls.n	80035ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b87      	ldr	r3, [pc, #540]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 020f 	bic.w	r2, r3, #15
 80035d2:	4985      	ldr	r1, [pc, #532]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e184      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003604:	429a      	cmp	r2, r3
 8003606:	d908      	bls.n	800361a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003608:	4b78      	ldr	r3, [pc, #480]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	4975      	ldr	r1, [pc, #468]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003616:	4313      	orrs	r3, r2
 8003618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	4b70      	ldr	r3, [pc, #448]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003632:	429a      	cmp	r2, r3
 8003634:	d908      	bls.n	8003648 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003636:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	496a      	ldr	r1, [pc, #424]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003660:	429a      	cmp	r2, r3
 8003662:	d908      	bls.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	495e      	ldr	r1, [pc, #376]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003672:	4313      	orrs	r3, r2
 8003674:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d010      	beq.n	80036a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	4b59      	ldr	r3, [pc, #356]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800368e:	429a      	cmp	r2, r3
 8003690:	d908      	bls.n	80036a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003692:	4b56      	ldr	r3, [pc, #344]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4953      	ldr	r1, [pc, #332]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	429a      	cmp	r2, r3
 80036be:	d908      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f023 020f 	bic.w	r2, r3, #15
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4947      	ldr	r1, [pc, #284]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d055      	beq.n	800378a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4940      	ldr	r1, [pc, #256]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f8:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d121      	bne.n	8003748 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0f6      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d115      	bne.n	8003748 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0ea      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003728:	4b30      	ldr	r3, [pc, #192]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0de      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0d6      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f023 0207 	bic.w	r2, r3, #7
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4925      	ldr	r1, [pc, #148]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 8003756:	4313      	orrs	r3, r2
 8003758:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe ff85 	bl	8002668 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003760:	e00a      	b.n	8003778 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003762:	f7fe ff81 	bl	8002668 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0be      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003778:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	429a      	cmp	r2, r3
 8003788:	d1eb      	bne.n	8003762 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d208      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f023 020f 	bic.w	r2, r3, #15
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	490e      	ldr	r1, [pc, #56]	; (80037ec <HAL_RCC_ClockConfig+0x244>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d214      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 020f 	bic.w	r2, r3, #15
 80037ce:	4906      	ldr	r1, [pc, #24]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e086      	b.n	80038f6 <HAL_RCC_ClockConfig+0x34e>
 80037e8:	52002000 	.word	0x52002000
 80037ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003808:	429a      	cmp	r2, r3
 800380a:	d208      	bcs.n	800381e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800380c:	4b3c      	ldr	r3, [pc, #240]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	4939      	ldr	r1, [pc, #228]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 800381a:	4313      	orrs	r3, r2
 800381c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	4b34      	ldr	r3, [pc, #208]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003836:	429a      	cmp	r2, r3
 8003838:	d208      	bcs.n	800384c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	492e      	ldr	r1, [pc, #184]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 8003848:	4313      	orrs	r3, r2
 800384a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003864:	429a      	cmp	r2, r3
 8003866:	d208      	bcs.n	800387a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4922      	ldr	r1, [pc, #136]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 8003876:	4313      	orrs	r3, r2
 8003878:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003892:	429a      	cmp	r2, r3
 8003894:	d208      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4917      	ldr	r1, [pc, #92]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038a8:	f000 f834 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	4912      	ldr	r1, [pc, #72]	; (8003904 <HAL_RCC_ClockConfig+0x35c>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x358>)
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <HAL_RCC_ClockConfig+0x35c>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x360>)
 80038de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x364>)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x368>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fe72 	bl	80025d4 <HAL_InitTick>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
 8003904:	0800a768 	.word	0x0800a768
 8003908:	24000004 	.word	0x24000004
 800390c:	24000000 	.word	0x24000000
 8003910:	24000010 	.word	0x24000010

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391a:	4bb3      	ldr	r3, [pc, #716]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003922:	2b18      	cmp	r3, #24
 8003924:	f200 8155 	bhi.w	8003bd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_RCC_GetSysClockFreq+0x1c>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003995 	.word	0x08003995
 8003934:	08003bd3 	.word	0x08003bd3
 8003938:	08003bd3 	.word	0x08003bd3
 800393c:	08003bd3 	.word	0x08003bd3
 8003940:	08003bd3 	.word	0x08003bd3
 8003944:	08003bd3 	.word	0x08003bd3
 8003948:	08003bd3 	.word	0x08003bd3
 800394c:	08003bd3 	.word	0x08003bd3
 8003950:	080039bb 	.word	0x080039bb
 8003954:	08003bd3 	.word	0x08003bd3
 8003958:	08003bd3 	.word	0x08003bd3
 800395c:	08003bd3 	.word	0x08003bd3
 8003960:	08003bd3 	.word	0x08003bd3
 8003964:	08003bd3 	.word	0x08003bd3
 8003968:	08003bd3 	.word	0x08003bd3
 800396c:	08003bd3 	.word	0x08003bd3
 8003970:	080039c1 	.word	0x080039c1
 8003974:	08003bd3 	.word	0x08003bd3
 8003978:	08003bd3 	.word	0x08003bd3
 800397c:	08003bd3 	.word	0x08003bd3
 8003980:	08003bd3 	.word	0x08003bd3
 8003984:	08003bd3 	.word	0x08003bd3
 8003988:	08003bd3 	.word	0x08003bd3
 800398c:	08003bd3 	.word	0x08003bd3
 8003990:	080039c7 	.word	0x080039c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003994:	4b94      	ldr	r3, [pc, #592]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039a0:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	4a90      	ldr	r2, [pc, #576]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
 80039b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80039b2:	e111      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039b4:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039b6:	61bb      	str	r3, [r7, #24]
    break;
 80039b8:	e10e      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80039ba:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039bc:	61bb      	str	r3, [r7, #24]
    break;
 80039be:	e10b      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80039c0:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039c2:	61bb      	str	r3, [r7, #24]
    break;
 80039c4:	e108      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039c6:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80039d0:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039dc:	4b82      	ldr	r3, [pc, #520]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80039e6:	4b80      	ldr	r3, [pc, #512]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80e1 	beq.w	8003bcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	f000 8083 	beq.w	8003b18 <HAL_RCC_GetSysClockFreq+0x204>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	f200 80a1 	bhi.w	8003b5c <HAL_RCC_GetSysClockFreq+0x248>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x114>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d056      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a26:	e099      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02d      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a34:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	4a6b      	ldr	r2, [pc, #428]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a8e:	e087      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003bfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ad2:	e065      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003afa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b16:	e043      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b5a:	e021      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b9e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	0a5b      	lsrs	r3, r3, #9
 8003ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003baa:	3301      	adds	r3, #1
 8003bac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc4:	ee17 3a90 	vmov	r3, s15
 8003bc8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003bca:	e005      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
    break;
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bd4:	61bb      	str	r3, [r7, #24]
    break;
 8003bd6:	bf00      	nop
  }

  return sysclockfreq;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	58024400 	.word	0x58024400
 8003bec:	03d09000 	.word	0x03d09000
 8003bf0:	003d0900 	.word	0x003d0900
 8003bf4:	007a1200 	.word	0x007a1200
 8003bf8:	46000000 	.word	0x46000000
 8003bfc:	4c742400 	.word	0x4c742400
 8003c00:	4a742400 	.word	0x4a742400
 8003c04:	4af42400 	.word	0x4af42400

08003c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c0e:	f7ff fe81 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	490f      	ldr	r1, [pc, #60]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x54>)
 8003c20:	5ccb      	ldrb	r3, [r1, r3]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x54>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c46:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	0800a768 	.word	0x0800a768
 8003c60:	24000004 	.word	0x24000004
 8003c64:	24000000 	.word	0x24000000

08003c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c6c:	f7ff ffcc 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4904      	ldr	r1, [pc, #16]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	0800a768 	.word	0x0800a768

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c98:	f7ff ffb6 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	0800a768 	.word	0x0800a768

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03f      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce4:	d02a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ce6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cea:	d824      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf0:	d018      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf6:	d81e      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d00:	d007      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d02:	e018      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d04:	4ba3      	ldr	r3, [pc, #652]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4aa2      	ldr	r2, [pc, #648]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d10:	e015      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 f9d5 	bl	80050c8 <RCCEx_PLL2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d22:	e00c      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fa7e 	bl	800522c <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d44:	4b93      	ldr	r3, [pc, #588]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d50:	4990      	ldr	r1, [pc, #576]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	650b      	str	r3, [r1, #80]	; 0x50
 8003d56:	e001      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d826      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d8d 	.word	0x08003d8d
 8003d7c:	08003d9b 	.word	0x08003d9b
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003dc5 	.word	0x08003dc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8c:	4b81      	ldr	r3, [pc, #516]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a80      	ldr	r2, [pc, #512]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d98:	e015      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f991 	bl	80050c8 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003daa:	e00c      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3324      	adds	r3, #36	; 0x24
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fa3a 	bl	800522c <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e003      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dcc:	4b71      	ldr	r3, [pc, #452]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	f023 0207 	bic.w	r2, r3, #7
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	496e      	ldr	r1, [pc, #440]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8003dde:	e001      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d042      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df8:	d02b      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d825      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e00:	2bc0      	cmp	r3, #192	; 0xc0
 8003e02:	d028      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e04:	2bc0      	cmp	r3, #192	; 0xc0
 8003e06:	d821      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003e0c:	2b80      	cmp	r3, #128	; 0x80
 8003e0e:	d81d      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d007      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003e18:	e018      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1a:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	4a5d      	ldr	r2, [pc, #372]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e26:	e017      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f94a 	bl	80050c8 <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e38:	e00e      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3324      	adds	r3, #36	; 0x24
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f9f3 	bl	800522c <RCCEx_PLL3_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e005      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	494a      	ldr	r1, [pc, #296]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	650b      	str	r3, [r1, #80]	; 0x50
 8003e70:	e001      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d049      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e8c:	d030      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e92:	d82a      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e98:	d02c      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003e9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e9e:	d824      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea4:	d018      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eaa:	d81e      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb4:	d007      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003eb6:	e018      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a35      	ldr	r2, [pc, #212]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ec4:	e017      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 f8fb 	bl	80050c8 <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e00e      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3324      	adds	r3, #36	; 0x24
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f9a4 	bl	800522c <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e005      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003efc:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f10:	e001      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04b      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f2c:	d030      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f32:	d82a      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f38:	d02e      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f3e:	d824      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f44:	d018      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4a:	d81e      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f54:	d007      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003f56:	e018      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f64:	e019      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 f8ab 	bl	80050c8 <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f76:	e010      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3324      	adds	r3, #36	; 0x24
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f954 	bl	800522c <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f88:	e007      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003f90:	bf00      	nop
 8003f92:	e002      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f94:	58024400 	.word	0x58024400
      break;
 8003f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fa0:	4b99      	ldr	r3, [pc, #612]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fae:	4996      	ldr	r1, [pc, #600]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8003fb4:	e001      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d032      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fca:	2b30      	cmp	r3, #48	; 0x30
 8003fcc:	d01c      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d817      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d813      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d10f      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe2:	4b89      	ldr	r3, [pc, #548]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	4a88      	ldr	r2, [pc, #544]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fee:	e00e      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f866 	bl	80050c8 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004000:	e005      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800400c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004014:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	4979      	ldr	r1, [pc, #484]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004022:	4313      	orrs	r3, r2
 8004024:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d047      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004040:	d030      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004046:	d82a      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800404c:	d02c      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800404e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004052:	d824      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004058:	d018      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405e:	d81e      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800406a:	e018      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b66      	ldr	r3, [pc, #408]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a65      	ldr	r2, [pc, #404]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004078:	e017      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f821 	bl	80050c8 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800408a:	e00e      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 f8ca 	bl	800522c <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800409c:	e005      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040b0:	4b55      	ldr	r3, [pc, #340]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	4952      	ldr	r1, [pc, #328]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	650b      	str	r3, [r1, #80]	; 0x50
 80040c2:	e001      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d049      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040dc:	d02e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80040de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e2:	d828      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80040e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e8:	d02a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80040ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ee:	d822      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80040f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040f4:	d026      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80040f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040fa:	d81c      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80040fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004100:	d010      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004106:	d816      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01d      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d111      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 ffd5 	bl	80050c8 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004122:	e012      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f87e 	bl	800522c <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004134:	e009      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
      break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800413c:	bf00      	nop
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004140:	bf00      	nop
 8004142:	e002      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	492a      	ldr	r1, [pc, #168]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800415e:	4313      	orrs	r3, r2
 8004160:	650b      	str	r3, [r1, #80]	; 0x50
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d04d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800417a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800417e:	d02e      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004184:	d828      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d02a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d822      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004196:	d026      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800419c:	d81c      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800419e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a2:	d010      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80041a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a8:	d816      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01d      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80041ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b2:	d111      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 ff84 	bl	80050c8 <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041c4:	e012      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3324      	adds	r3, #36	; 0x24
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 f82d 	bl	800522c <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041d6:	e009      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
      break;
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80041de:	bf00      	nop
 80041e0:	e004      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80041ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004200:	4901      	ldr	r1, [pc, #4]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004202:	4313      	orrs	r3, r2
 8004204:	658b      	str	r3, [r1, #88]	; 0x58
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02f      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004224:	d00e      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422a:	d814      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004234:	d10f      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004236:	4baf      	ldr	r3, [pc, #700]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	4aae      	ldr	r2, [pc, #696]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004242:	e00c      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f000 ff3c 	bl	80050c8 <RCCEx_PLL2_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004254:	e003      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	75fb      	strb	r3, [r7, #23]
      break;
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800425c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004264:	4ba3      	ldr	r3, [pc, #652]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004270:	49a0      	ldr	r1, [pc, #640]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004272:	4313      	orrs	r3, r2
 8004274:	650b      	str	r3, [r1, #80]	; 0x50
 8004276:	e001      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d032      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	2b03      	cmp	r3, #3
 800428e:	d81b      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042cf 	.word	0x080042cf
 800429c:	080042a9 	.word	0x080042a9
 80042a0:	080042b7 	.word	0x080042b7
 80042a4:	080042cf 	.word	0x080042cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a8:	4b92      	ldr	r3, [pc, #584]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a91      	ldr	r2, [pc, #580]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042b4:	e00c      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 ff03 	bl	80050c8 <RCCEx_PLL2_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	e000      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80042ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042d6:	4b87      	ldr	r3, [pc, #540]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	4984      	ldr	r1, [pc, #528]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042e8:	e001      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8086 	beq.w	8004408 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042fc:	4b7e      	ldr	r3, [pc, #504]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7d      	ldr	r2, [pc, #500]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004308:	f7fe f9ae 	bl	8002668 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800430e:	e009      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004310:	f7fe f9aa 	bl	8002668 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d902      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	75fb      	strb	r3, [r7, #23]
        break;
 8004322:	e005      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004324:	4b74      	ldr	r3, [pc, #464]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d166      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004336:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004340:	4053      	eors	r3, r2
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d013      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800434a:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004354:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a66      	ldr	r2, [pc, #408]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a63      	ldr	r2, [pc, #396]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800436c:	4a61      	ldr	r2, [pc, #388]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437c:	d115      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe f973 	bl	8002668 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004384:	e00b      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe f96f 	bl	8002668 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d902      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	75fb      	strb	r3, [r7, #23]
            break;
 800439c:	e005      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800439e:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ed      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d126      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043be:	d10d      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ce:	0919      	lsrs	r1, r3, #4
 80043d0:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80043d2:	400b      	ands	r3, r1
 80043d4:	4947      	ldr	r1, [pc, #284]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	610b      	str	r3, [r1, #16]
 80043da:	e005      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80043dc:	4b45      	ldr	r3, [pc, #276]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	4a44      	ldr	r2, [pc, #272]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043e6:	6113      	str	r3, [r2, #16]
 80043e8:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	493f      	ldr	r1, [pc, #252]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	670b      	str	r3, [r1, #112]	; 0x70
 80043fc:	e004      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	75bb      	strb	r3, [r7, #22]
 8004402:	e001      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8085 	beq.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441a:	2b28      	cmp	r3, #40	; 0x28
 800441c:	d866      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004501 	.word	0x08004501
 8004428:	080044ed 	.word	0x080044ed
 800442c:	080044ed 	.word	0x080044ed
 8004430:	080044ed 	.word	0x080044ed
 8004434:	080044ed 	.word	0x080044ed
 8004438:	080044ed 	.word	0x080044ed
 800443c:	080044ed 	.word	0x080044ed
 8004440:	080044ed 	.word	0x080044ed
 8004444:	080044c9 	.word	0x080044c9
 8004448:	080044ed 	.word	0x080044ed
 800444c:	080044ed 	.word	0x080044ed
 8004450:	080044ed 	.word	0x080044ed
 8004454:	080044ed 	.word	0x080044ed
 8004458:	080044ed 	.word	0x080044ed
 800445c:	080044ed 	.word	0x080044ed
 8004460:	080044ed 	.word	0x080044ed
 8004464:	080044db 	.word	0x080044db
 8004468:	080044ed 	.word	0x080044ed
 800446c:	080044ed 	.word	0x080044ed
 8004470:	080044ed 	.word	0x080044ed
 8004474:	080044ed 	.word	0x080044ed
 8004478:	080044ed 	.word	0x080044ed
 800447c:	080044ed 	.word	0x080044ed
 8004480:	080044ed 	.word	0x080044ed
 8004484:	08004501 	.word	0x08004501
 8004488:	080044ed 	.word	0x080044ed
 800448c:	080044ed 	.word	0x080044ed
 8004490:	080044ed 	.word	0x080044ed
 8004494:	080044ed 	.word	0x080044ed
 8004498:	080044ed 	.word	0x080044ed
 800449c:	080044ed 	.word	0x080044ed
 80044a0:	080044ed 	.word	0x080044ed
 80044a4:	08004501 	.word	0x08004501
 80044a8:	080044ed 	.word	0x080044ed
 80044ac:	080044ed 	.word	0x080044ed
 80044b0:	080044ed 	.word	0x080044ed
 80044b4:	080044ed 	.word	0x080044ed
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	080044ed 	.word	0x080044ed
 80044c0:	080044ed 	.word	0x080044ed
 80044c4:	08004501 	.word	0x08004501
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fdfa 	bl	80050c8 <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044d8:	e013      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3324      	adds	r3, #36	; 0x24
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fea3 	bl	800522c <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044ea:	e00a      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
      break;
 80044f0:	e007      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	58024800 	.word	0x58024800
 80044fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004508:	4b96      	ldr	r3, [pc, #600]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004514:	4993      	ldr	r1, [pc, #588]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	654b      	str	r3, [r1, #84]	; 0x54
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d038      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004530:	2b05      	cmp	r3, #5
 8004532:	d821      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	0800457f 	.word	0x0800457f
 8004540:	08004555 	.word	0x08004555
 8004544:	08004567 	.word	0x08004567
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fdb4 	bl	80050c8 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004564:	e00c      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3324      	adds	r3, #36	; 0x24
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fe5d 	bl	800522c <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004576:	e003      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
      break;
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800457e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004586:	4b77      	ldr	r3, [pc, #476]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f023 0207 	bic.w	r2, r3, #7
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004592:	4974      	ldr	r1, [pc, #464]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	654b      	str	r3, [r1, #84]	; 0x54
 8004598:	e001      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d821      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045ff 	.word	0x080045ff
 80045c0:	080045d5 	.word	0x080045d5
 80045c4:	080045e7 	.word	0x080045e7
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	080045ff 	.word	0x080045ff
 80045d0:	080045ff 	.word	0x080045ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fd74 	bl	80050c8 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045e4:	e00c      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	2101      	movs	r1, #1
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fe1d 	bl	800522c <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045f6:	e003      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80045fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004606:	4b57      	ldr	r3, [pc, #348]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	f023 0207 	bic.w	r2, r3, #7
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	4953      	ldr	r1, [pc, #332]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	658b      	str	r3, [r1, #88]	; 0x58
 800461a:	e001      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d04b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004636:	d02e      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800463c:	d828      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d02a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004648:	d822      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800464a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800464e:	d026      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004650:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004654:	d81c      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800465a:	d010      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800465c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004660:	d816      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01d      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466a:	d111      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fd28 	bl	80050c8 <RCCEx_PLL2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800467c:	e012      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3324      	adds	r3, #36	; 0x24
 8004682:	2102      	movs	r1, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fdd1 	bl	800522c <RCCEx_PLL3_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800468e:	e009      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	75fb      	strb	r3, [r7, #23]
      break;
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004696:	bf00      	nop
 8004698:	e004      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80046a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b8:	492a      	ldr	r1, [pc, #168]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	654b      	str	r3, [r1, #84]	; 0x54
 80046be:	e001      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d04d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046da:	d02e      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80046dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046e0:	d828      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d02a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d822      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f2:	d026      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80046f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f8:	d81c      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d010      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004704:	d816      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01d      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d111      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fcd6 	bl	80050c8 <RCCEx_PLL2_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004720:	e012      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	2102      	movs	r1, #2
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fd7f 	bl	800522c <RCCEx_PLL3_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004732:	e009      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
      break;
 8004738:	e006      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800473a:	bf00      	nop
 800473c:	e004      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800475c:	4901      	ldr	r1, [pc, #4]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	658b      	str	r3, [r1, #88]	; 0x58
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d04b      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004782:	d02e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004784:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004788:	d828      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800478a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478e:	d02a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	d822      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004796:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800479a:	d026      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800479c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047a0:	d81c      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80047a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a6:	d010      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ac:	d816      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01d      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b6:	d111      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fc82 	bl	80050c8 <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047c8:	e012      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3324      	adds	r3, #36	; 0x24
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fd2b 	bl	800522c <RCCEx_PLL3_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047da:	e009      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
      break;
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80047e2:	bf00      	nop
 80047e4:	e004      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80047ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047f6:	4b9d      	ldr	r3, [pc, #628]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004804:	4999      	ldr	r1, [pc, #612]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	658b      	str	r3, [r1, #88]	; 0x58
 800480a:	e001      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	d10a      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3324      	adds	r3, #36	; 0x24
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fcfc 	bl	800522c <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484c:	4987      	ldr	r1, [pc, #540]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800484e:	4313      	orrs	r3, r2
 8004850:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004868:	d10a      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3324      	adds	r3, #36	; 0x24
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fcdb 	bl	800522c <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004880:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	4977      	ldr	r1, [pc, #476]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004890:	4313      	orrs	r3, r2
 8004892:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d034      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048aa:	d01d      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80048ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b0:	d817      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ba:	d009      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80048bc:	e011      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fbff 	bl	80050c8 <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048ce:	e00c      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fca8 	bl	800522c <RCCEx_PLL3_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f0:	4b5e      	ldr	r3, [pc, #376]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048fe:	495b      	ldr	r1, [pc, #364]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004900:	4313      	orrs	r3, r2
 8004902:	658b      	str	r3, [r1, #88]	; 0x58
 8004904:	e001      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d033      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004920:	d01c      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004926:	d816      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d003      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800492e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004932:	d007      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004934:	e00f      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004936:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	4a4c      	ldr	r2, [pc, #304]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800493c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004942:	e00c      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3324      	adds	r3, #36	; 0x24
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fc6e 	bl	800522c <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
      break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800495c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004964:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004972:	493e      	ldr	r1, [pc, #248]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004974:	4313      	orrs	r3, r2
 8004976:	654b      	str	r3, [r1, #84]	; 0x54
 8004978:	e001      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d029      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d007      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004998:	e00f      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499a:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4a33      	ldr	r2, [pc, #204]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049a6:	e00b      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fb8a 	bl	80050c8 <RCCEx_PLL2_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
      break;
 80049be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	4926      	ldr	r1, [pc, #152]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049d8:	e001      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3324      	adds	r3, #36	; 0x24
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fc1b 	bl	800522c <RCCEx_PLL3_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d033      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a14:	d017      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d811      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a20:	d013      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a26:	d80b      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d010      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a30:	d106      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a3e:	e007      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a62:	4902      	ldr	r1, [pc, #8]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	654b      	str	r3, [r1, #84]	; 0x54
 8004a68:	e004      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004a6a:	bf00      	nop
 8004a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	492e      	ldr	r1, [pc, #184]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004aac:	4926      	ldr	r1, [pc, #152]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aca:	491f      	ldr	r1, [pc, #124]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ae2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ae6:	6113      	str	r3, [r2, #16]
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004af2:	4915      	ldr	r1, [pc, #84]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da08      	bge.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0c:	490e      	ldr	r1, [pc, #56]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	4906      	ldr	r1, [pc, #24]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b32:	7dbb      	ldrb	r3, [r7, #22]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400

08004b4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b50:	f7ff f85a 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4904      	ldr	r1, [pc, #16]	; (8004b74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	58024400 	.word	0x58024400
 8004b74:	0800a768 	.word	0x0800a768

08004b78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b80:	4ba1      	ldr	r3, [pc, #644]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b8a:	4b9f      	ldr	r3, [pc, #636]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	0b1b      	lsrs	r3, r3, #12
 8004b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b96:	4b9c      	ldr	r3, [pc, #624]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004ba2:	4b99      	ldr	r3, [pc, #612]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8111 	beq.w	8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	f000 8083 	beq.w	8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	f200 80a1 	bhi.w	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d056      	beq.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004be2:	e099      	b.n	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be4:	4b88      	ldr	r3, [pc, #544]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02d      	beq.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bf0:	4b85      	ldr	r3, [pc, #532]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a84      	ldr	r2, [pc, #528]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b7b      	ldr	r3, [pc, #492]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c4a:	e087      	b.n	8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c8e:	e065      	b.n	8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca2:	4b59      	ldr	r3, [pc, #356]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cd2:	e043      	b.n	8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce6:	4b48      	ldr	r3, [pc, #288]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d16:	e021      	b.n	8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	0a5b      	lsrs	r3, r3, #9
 8004d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d82:	ee17 2a90 	vmov	r2, s15
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d8a:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db0:	ee17 2a90 	vmov	r2, s15
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	0e1b      	lsrs	r3, r3, #24
 8004dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dde:	ee17 2a90 	vmov	r2, s15
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004de6:	e008      	b.n	8004dfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	609a      	str	r2, [r3, #8]
}
 8004dfa:	bf00      	nop
 8004dfc:	3724      	adds	r7, #36	; 0x24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	03d09000 	.word	0x03d09000
 8004e10:	46000000 	.word	0x46000000
 8004e14:	4c742400 	.word	0x4c742400
 8004e18:	4a742400 	.word	0x4a742400
 8004e1c:	4af42400 	.word	0x4af42400

08004e20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b089      	sub	sp, #36	; 0x24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e28:	4ba1      	ldr	r3, [pc, #644]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e32:	4b9f      	ldr	r3, [pc, #636]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	0d1b      	lsrs	r3, r3, #20
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e3e:	4b9c      	ldr	r3, [pc, #624]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e4a:	4b99      	ldr	r3, [pc, #612]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	08db      	lsrs	r3, r3, #3
 8004e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8111 	beq.w	8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	f000 8083 	beq.w	8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	f200 80a1 	bhi.w	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d056      	beq.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e8a:	e099      	b.n	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e8c:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02d      	beq.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e98:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	08db      	lsrs	r3, r3, #3
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	4a84      	ldr	r2, [pc, #528]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ef2:	e087      	b.n	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b6a      	ldr	r3, [pc, #424]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f36:	e065      	b.n	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4a:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f7a:	e043      	b.n	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b48      	ldr	r3, [pc, #288]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fbe:	e021      	b.n	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005002:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	0a5b      	lsrs	r3, r3, #9
 800500a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502a:	ee17 2a90 	vmov	r2, s15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005032:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	0c1b      	lsrs	r3, r3, #16
 8005038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800504c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005058:	ee17 2a90 	vmov	r2, s15
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005060:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507a:	edd7 6a07 	vldr	s13, [r7, #28]
 800507e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005086:	ee17 2a90 	vmov	r2, s15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800508e:	e008      	b.n	80050a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
}
 80050a2:	bf00      	nop
 80050a4:	3724      	adds	r7, #36	; 0x24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	58024400 	.word	0x58024400
 80050b4:	03d09000 	.word	0x03d09000
 80050b8:	46000000 	.word	0x46000000
 80050bc:	4c742400 	.word	0x4c742400
 80050c0:	4a742400 	.word	0x4a742400
 80050c4:	4af42400 	.word	0x4af42400

080050c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d6:	4b53      	ldr	r3, [pc, #332]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d101      	bne.n	80050e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e099      	b.n	800521a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050e6:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f2:	f7fd fab9 	bl	8002668 <HAL_GetTick>
 80050f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050f8:	e008      	b.n	800510c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050fa:	f7fd fab5 	bl	8002668 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e086      	b.n	800521a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1f0      	bne.n	80050fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	031b      	lsls	r3, r3, #12
 8005126:	493f      	ldr	r1, [pc, #252]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	628b      	str	r3, [r1, #40]	; 0x28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	3b01      	subs	r3, #1
 8005132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	3b01      	subs	r3, #1
 800513c:	025b      	lsls	r3, r3, #9
 800513e:	b29b      	uxth	r3, r3
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	3b01      	subs	r3, #1
 8005156:	061b      	lsls	r3, r3, #24
 8005158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800515c:	4931      	ldr	r1, [pc, #196]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005162:	4b30      	ldr	r3, [pc, #192]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	492d      	ldr	r1, [pc, #180]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f023 0220 	bic.w	r2, r3, #32
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	4928      	ldr	r1, [pc, #160]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a26      	ldr	r2, [pc, #152]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800518c:	f023 0310 	bic.w	r3, r3, #16
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <RCCEx_PLL2_Config+0x160>)
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	69d2      	ldr	r2, [r2, #28]
 800519e:	00d2      	lsls	r2, r2, #3
 80051a0:	4920      	ldr	r1, [pc, #128]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051a6:	4b1f      	ldr	r3, [pc, #124]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	f043 0310 	orr.w	r3, r3, #16
 80051b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c4:	e00f      	b.n	80051e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d106      	bne.n	80051da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051cc:	4b15      	ldr	r3, [pc, #84]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d8:	e005      	b.n	80051e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f2:	f7fd fa39 	bl	8002668 <HAL_GetTick>
 80051f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051f8:	e008      	b.n	800520c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051fa:	f7fd fa35 	bl	8002668 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400
 8005228:	ffff0007 	.word	0xffff0007

0800522c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800523a:	4b53      	ldr	r3, [pc, #332]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d101      	bne.n	800524a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e099      	b.n	800537e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800524a:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4e      	ldr	r2, [pc, #312]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005256:	f7fd fa07 	bl	8002668 <HAL_GetTick>
 800525a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800525c:	e008      	b.n	8005270 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800525e:	f7fd fa03 	bl	8002668 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e086      	b.n	800537e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005270:	4b45      	ldr	r3, [pc, #276]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800527c:	4b42      	ldr	r3, [pc, #264]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	051b      	lsls	r3, r3, #20
 800528a:	493f      	ldr	r1, [pc, #252]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	628b      	str	r3, [r1, #40]	; 0x28
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	3b01      	subs	r3, #1
 8005296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	025b      	lsls	r3, r3, #9
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052c0:	4931      	ldr	r1, [pc, #196]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	492d      	ldr	r1, [pc, #180]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	4928      	ldr	r1, [pc, #160]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ea:	4b27      	ldr	r3, [pc, #156]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	4a26      	ldr	r2, [pc, #152]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <RCCEx_PLL3_Config+0x160>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	69d2      	ldr	r2, [r2, #28]
 8005302:	00d2      	lsls	r2, r2, #3
 8005304:	4920      	ldr	r1, [pc, #128]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800530a:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a19      	ldr	r2, [pc, #100]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005328:	e00f      	b.n	800534a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800533c:	e005      	b.n	800534a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	4a11      	ldr	r2, [pc, #68]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005348:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005356:	f7fd f987 	bl	8002668 <HAL_GetTick>
 800535a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800535c:	e008      	b.n	8005370 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800535e:	f7fd f983 	bl	8002668 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e006      	b.n	800537e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	58024400 	.word	0x58024400
 800538c:	ffff0007 	.word	0xffff0007

08005390 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0f1      	b.n	8005586 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a78      	ldr	r2, [pc, #480]	; (8005590 <HAL_SPI_Init+0x200>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <HAL_SPI_Init+0x42>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a77      	ldr	r2, [pc, #476]	; (8005594 <HAL_SPI_Init+0x204>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00a      	beq.n	80053d2 <HAL_SPI_Init+0x42>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a75      	ldr	r2, [pc, #468]	; (8005598 <HAL_SPI_Init+0x208>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d005      	beq.n	80053d2 <HAL_SPI_Init+0x42>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d901      	bls.n	80053d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0d9      	b.n	8005586 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 ff66 	bl	80062a4 <SPI_GetPacketSize>
 80053d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6c      	ldr	r2, [pc, #432]	; (8005590 <HAL_SPI_Init+0x200>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00c      	beq.n	80053fe <HAL_SPI_Init+0x6e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6a      	ldr	r2, [pc, #424]	; (8005594 <HAL_SPI_Init+0x204>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <HAL_SPI_Init+0x6e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a69      	ldr	r2, [pc, #420]	; (8005598 <HAL_SPI_Init+0x208>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_Init+0x6e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d811      	bhi.n	8005422 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005402:	4a63      	ldr	r2, [pc, #396]	; (8005590 <HAL_SPI_Init+0x200>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a61      	ldr	r2, [pc, #388]	; (8005594 <HAL_SPI_Init+0x204>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_SPI_Init+0x8c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a60      	ldr	r2, [pc, #384]	; (8005598 <HAL_SPI_Init+0x208>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d104      	bne.n	8005426 <HAL_SPI_Init+0x96>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b10      	cmp	r3, #16
 8005420:	d901      	bls.n	8005426 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0af      	b.n	8005586 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fdac 	bl	8001f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005462:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546c:	d119      	bne.n	80054a2 <HAL_SPI_Init+0x112>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005476:	d103      	bne.n	8005480 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10c      	bne.n	80054a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800548c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005490:	d107      	bne.n	80054a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	ea42 0103 	orr.w	r1, r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	ea42 0103 	orr.w	r1, r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d113      	bne.n	8005542 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005540:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40013000 	.word	0x40013000
 8005594:	40003800 	.word	0x40003800
 8005598:	40003c00 	.word	0x40003c00

0800559c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3320      	adds	r3, #32
 80055b2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_SPI_Transmit+0x2a>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e1d7      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ce:	f7fd f84b 	bl	8002668 <HAL_GetTick>
 80055d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d007      	beq.n	80055f0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055ec:	7efb      	ldrb	r3, [r7, #27]
 80055ee:	e1c2      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_Transmit+0x60>
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005608:	7efb      	ldrb	r3, [r7, #27]
 800560a:	e1b4      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2203      	movs	r2, #3
 8005610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800565c:	d107      	bne.n	800566e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	4b96      	ldr	r3, [pc, #600]	; (80058d0 <HAL_SPI_Transmit+0x334>)
 8005676:	4013      	ands	r3, r2
 8005678:	88f9      	ldrh	r1, [r7, #6]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	430b      	orrs	r3, r1
 8005680:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569a:	d107      	bne.n	80056ac <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d947      	bls.n	8005744 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80056b4:	e03f      	b.n	8005736 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d114      	bne.n	80056ee <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056ec:	e023      	b.n	8005736 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ee:	f7fc ffbb 	bl	8002668 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d803      	bhi.n	8005706 <HAL_SPI_Transmit+0x16a>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d102      	bne.n	800570c <HAL_SPI_Transmit+0x170>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d114      	bne.n	8005736 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fcfb 	bl	8006108 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e11f      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1b9      	bne.n	80056b6 <HAL_SPI_Transmit+0x11a>
 8005742:	e0f2      	b.n	800592a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b07      	cmp	r3, #7
 800574a:	f240 80e7 	bls.w	800591c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800574e:	e05d      	b.n	800580c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b02      	cmp	r3, #2
 800575c:	d132      	bne.n	80057c4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	d918      	bls.n	800579c <HAL_SPI_Transmit+0x200>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d014      	beq.n	800579c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b02      	subs	r3, #2
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800579a:	e037      	b.n	800580c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057c2:	e023      	b.n	800580c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c4:	f7fc ff50 	bl	8002668 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d803      	bhi.n	80057dc <HAL_SPI_Transmit+0x240>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d102      	bne.n	80057e2 <HAL_SPI_Transmit+0x246>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d114      	bne.n	800580c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fc90 	bl	8006108 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e0b4      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d19b      	bne.n	8005750 <HAL_SPI_Transmit+0x1b4>
 8005818:	e087      	b.n	800592a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b02      	cmp	r3, #2
 8005826:	d155      	bne.n	80058d4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b03      	cmp	r3, #3
 8005832:	d918      	bls.n	8005866 <HAL_SPI_Transmit+0x2ca>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d914      	bls.n	8005866 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	1d1a      	adds	r2, r3, #4
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b04      	subs	r3, #4
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005864:	e05a      	b.n	800591c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d917      	bls.n	80058a2 <HAL_SPI_Transmit+0x306>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d013      	beq.n	80058a2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b02      	subs	r3, #2
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058a0:	e03c      	b.n	800591c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3320      	adds	r3, #32
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058cc:	e026      	b.n	800591c <HAL_SPI_Transmit+0x380>
 80058ce:	bf00      	nop
 80058d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d4:	f7fc fec8 	bl	8002668 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d803      	bhi.n	80058ec <HAL_SPI_Transmit+0x350>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Transmit+0x356>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d114      	bne.n	800591c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fc08 	bl	8006108 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005906:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e02c      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f af78 	bne.w	800581a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	2108      	movs	r1, #8
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fc87 	bl	8006248 <SPI_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fbd9 	bl	8006108 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005974:	7efb      	ldrb	r3, [r7, #27]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3330      	adds	r3, #48	; 0x30
 800599a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a4:	d112      	bne.n	80059cc <HAL_SPI_Receive+0x4c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10e      	bne.n	80059cc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2204      	movs	r2, #4
 80059b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f978 	bl	8005cb8 <HAL_SPI_TransmitReceive>
 80059c8:	4603      	mov	r3, r0
 80059ca:	e16f      	b.n	8005cac <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_SPI_Receive+0x5a>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e168      	b.n	8005cac <HAL_SPI_Receive+0x32c>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059e2:	f7fc fe41 	bl	8002668 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d007      	beq.n	8005a04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a00:	7ffb      	ldrb	r3, [r7, #31]
 8005a02:	e153      	b.n	8005cac <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Receive+0x90>
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a1c:	7ffb      	ldrb	r3, [r7, #31]
 8005a1e:	e145      	b.n	8005cac <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2204      	movs	r2, #4
 8005a24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005a70:	d107      	bne.n	8005a82 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	4b8a      	ldr	r3, [pc, #552]	; (8005cb4 <HAL_SPI_Receive+0x334>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	88f9      	ldrh	r1, [r7, #6]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aae:	d107      	bne.n	8005ac0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b0f      	cmp	r3, #15
 8005ac6:	d948      	bls.n	8005b5a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005ac8:	e040      	b.n	8005b4c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	f248 0308 	movw	r3, #32776	; 0x8008
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d014      	beq.n	8005b04 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ae4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b02:	e023      	b.n	8005b4c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b04:	f7fc fdb0 	bl	8002668 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d803      	bhi.n	8005b1c <HAL_SPI_Receive+0x19c>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Receive+0x1a2>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d114      	bne.n	8005b4c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 faf0 	bl	8006108 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e0af      	b.n	8005cac <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1b8      	bne.n	8005aca <HAL_SPI_Receive+0x14a>
 8005b58:	e095      	b.n	8005c86 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b07      	cmp	r3, #7
 8005b60:	f240 808b 	bls.w	8005c7a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005b64:	e03f      	b.n	8005be6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d114      	bne.n	8005b9e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b9c:	e023      	b.n	8005be6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9e:	f7fc fd63 	bl	8002668 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d803      	bhi.n	8005bb6 <HAL_SPI_Receive+0x236>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d102      	bne.n	8005bbc <HAL_SPI_Receive+0x23c>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d114      	bne.n	8005be6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 faa3 	bl	8006108 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e062      	b.n	8005cac <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1b9      	bne.n	8005b66 <HAL_SPI_Receive+0x1e6>
 8005bf2:	e048      	b.n	8005c86 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d117      	bne.n	8005c32 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c30:	e023      	b.n	8005c7a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c32:	f7fc fd19 	bl	8002668 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d803      	bhi.n	8005c4a <HAL_SPI_Receive+0x2ca>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d102      	bne.n	8005c50 <HAL_SPI_Receive+0x2d0>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d114      	bne.n	8005c7a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fa59 	bl	8006108 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e018      	b.n	8005cac <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1b6      	bne.n	8005bf4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa3e 	bl	8006108 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	ffff0000 	.word	0xffff0000

08005cb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08e      	sub	sp, #56	; 0x38
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3320      	adds	r3, #32
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3330      	adds	r3, #48	; 0x30
 8005cda:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_TransmitReceive+0x32>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e209      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf2:	f7fc fcb9 	bl	8002668 <HAL_GetTick>
 8005cf6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005cf8:	887b      	ldrh	r3, [r7, #2]
 8005cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d06:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d0e:	7efb      	ldrb	r3, [r7, #27]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d014      	beq.n	8005d3e <HAL_SPI_TransmitReceive+0x86>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d1a:	d106      	bne.n	8005d2a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005d24:	7efb      	ldrb	r3, [r7, #27]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d009      	beq.n	8005d3e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d3c:	e1df      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x98>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x98>
 8005d4a:	887b      	ldrh	r3, [r7, #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d62:	e1cc      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d003      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2205      	movs	r2, #5
 8005d74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	887a      	ldrh	r2, [r7, #2]
 8005d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	887a      	ldrh	r2, [r7, #2]
 8005d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	887a      	ldrh	r2, [r7, #2]
 8005da0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4b82      	ldr	r3, [pc, #520]	; (8005fc8 <HAL_SPI_TransmitReceive+0x310>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	8879      	ldrh	r1, [r7, #2]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de4:	d107      	bne.n	8005df6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d970      	bls.n	8005ee0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dfe:	e068      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d11a      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x18c>
 8005e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e24:	1d1a      	adds	r2, r3, #4
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e42:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	f248 0308 	movw	r3, #32776	; 0x8008
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0x1d2>
 8005e54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d017      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e64:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e88:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8a:	f7fc fbed 	bl	8002668 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d803      	bhi.n	8005ea2 <HAL_SPI_TransmitReceive+0x1ea>
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x1f0>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d114      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f92d 	bl	8006108 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e115      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d193      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x148>
 8005ed8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d190      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x148>
 8005ede:	e0e7      	b.n	80060b0 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b07      	cmp	r3, #7
 8005ee6:	f240 80dd 	bls.w	80060a4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005eea:	e066      	b.n	8005fba <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d119      	bne.n	8005f2e <HAL_SPI_TransmitReceive+0x276>
 8005efa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d11a      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x2ba>
 8005f3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d017      	beq.n	8005f72 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	8812      	ldrh	r2, [r2, #0]
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f70:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f72:	f7fc fb79 	bl	8002668 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d803      	bhi.n	8005f8a <HAL_SPI_TransmitReceive+0x2d2>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d102      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x2d8>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d114      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f8b9 	bl	8006108 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e0a1      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d195      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x234>
 8005fc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d192      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x234>
 8005fc6:	e073      	b.n	80060b0 <HAL_SPI_TransmitReceive+0x3f8>
 8005fc8:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d11b      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x35a>
 8005fda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d018      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3320      	adds	r3, #32
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006010:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d11d      	bne.n	800605c <HAL_SPI_TransmitReceive+0x3a4>
 8006020:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01a      	beq.n	800605c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800605a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605c:	f7fc fb04 	bl	8002668 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006068:	429a      	cmp	r2, r3
 800606a:	d803      	bhi.n	8006074 <HAL_SPI_TransmitReceive+0x3bc>
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d102      	bne.n	800607a <HAL_SPI_TransmitReceive+0x3c2>
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	2b00      	cmp	r3, #0
 8006078:	d114      	bne.n	80060a4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f844 	bl	8006108 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e02c      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80060a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d190      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x314>
 80060aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d18d      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2108      	movs	r1, #8
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f8c4 	bl	8006248 <SPI_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f816 	bl	8006108 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e001      	b.n	80060fe <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80060fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3730      	adds	r7, #48	; 0x30
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop

08006108 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0210 	orr.w	r2, r2, #16
 8006136:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6919      	ldr	r1, [r3, #16]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4b3c      	ldr	r3, [pc, #240]	; (8006244 <SPI_CloseTransfer+0x13c>)
 8006154:	400b      	ands	r3, r1
 8006156:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006166:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b04      	cmp	r3, #4
 8006172:	d014      	beq.n	800619e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00f      	beq.n	800619e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006184:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0220 	orr.w	r2, r2, #32
 800619c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d014      	beq.n	80061d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00f      	beq.n	80061d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ba:	f043 0204 	orr.w	r2, r3, #4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00f      	beq.n	80061fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	f043 0208 	orr.w	r2, r3, #8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006226:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	fffffc90 	.word	0xfffffc90

08006248 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006258:	e010      	b.n	800627c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800625a:	f7fc fa05 	bl	8002668 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	429a      	cmp	r2, r3
 8006268:	d803      	bhi.n	8006272 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d102      	bne.n	8006278 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e00f      	b.n	800629c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4013      	ands	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	429a      	cmp	r2, r3
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	429a      	cmp	r2, r3
 8006298:	d0df      	beq.n	800625a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	3307      	adds	r3, #7
 80062c2:	08db      	lsrs	r3, r3, #3
 80062c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e042      	b.n	8006372 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc f89c 	bl	800243c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f8c3 	bl	80064a8 <UART_SetConfig>
 8006322:	4603      	mov	r3, r0
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e022      	b.n	8006372 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fe1f 	bl	8006f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006348:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006358:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0201 	orr.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fea6 	bl	80070bc <UART_CheckIdleState>
 8006370:	4603      	mov	r3, r0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b08a      	sub	sp, #40	; 0x28
 800637e:	af02      	add	r7, sp, #8
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006390:	2b20      	cmp	r3, #32
 8006392:	f040 8083 	bne.w	800649c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UART_Transmit+0x28>
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07b      	b.n	800649e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_UART_Transmit+0x3a>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e074      	b.n	800649e <HAL_UART_Transmit+0x124>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2221      	movs	r2, #33	; 0x21
 80063c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063cc:	f7fc f94c 	bl	8002668 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	88fa      	ldrh	r2, [r7, #6]
 80063d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	d108      	bne.n	80063fe <HAL_UART_Transmit+0x84>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e003      	b.n	8006406 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800640e:	e02c      	b.n	800646a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fe99 	bl	8007152 <UART_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e039      	b.n	800649e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800643e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	3302      	adds	r3, #2
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e007      	b.n	8006458 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	3301      	adds	r3, #1
 8006456:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1cc      	bne.n	8006410 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2200      	movs	r2, #0
 800647e:	2140      	movs	r1, #64	; 0x40
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fe66 	bl	8007152 <UART_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ac:	b092      	sub	sp, #72	; 0x48
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4bbe      	ldr	r3, [pc, #760]	; (80067d0 <UART_SetConfig+0x328>)
 80064d8:	4013      	ands	r3, r2
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4ab3      	ldr	r2, [pc, #716]	; (80067d4 <UART_SetConfig+0x32c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006510:	4313      	orrs	r3, r2
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	4baf      	ldr	r3, [pc, #700]	; (80067d8 <UART_SetConfig+0x330>)
 800651c:	4013      	ands	r3, r2
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006524:	430b      	orrs	r3, r1
 8006526:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f023 010f 	bic.w	r1, r3, #15
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4aa6      	ldr	r2, [pc, #664]	; (80067dc <UART_SetConfig+0x334>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d177      	bne.n	8006638 <UART_SetConfig+0x190>
 8006548:	4ba5      	ldr	r3, [pc, #660]	; (80067e0 <UART_SetConfig+0x338>)
 800654a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006550:	2b28      	cmp	r3, #40	; 0x28
 8006552:	d86d      	bhi.n	8006630 <UART_SetConfig+0x188>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0xb4>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006601 	.word	0x08006601
 8006560:	08006631 	.word	0x08006631
 8006564:	08006631 	.word	0x08006631
 8006568:	08006631 	.word	0x08006631
 800656c:	08006631 	.word	0x08006631
 8006570:	08006631 	.word	0x08006631
 8006574:	08006631 	.word	0x08006631
 8006578:	08006631 	.word	0x08006631
 800657c:	08006609 	.word	0x08006609
 8006580:	08006631 	.word	0x08006631
 8006584:	08006631 	.word	0x08006631
 8006588:	08006631 	.word	0x08006631
 800658c:	08006631 	.word	0x08006631
 8006590:	08006631 	.word	0x08006631
 8006594:	08006631 	.word	0x08006631
 8006598:	08006631 	.word	0x08006631
 800659c:	08006611 	.word	0x08006611
 80065a0:	08006631 	.word	0x08006631
 80065a4:	08006631 	.word	0x08006631
 80065a8:	08006631 	.word	0x08006631
 80065ac:	08006631 	.word	0x08006631
 80065b0:	08006631 	.word	0x08006631
 80065b4:	08006631 	.word	0x08006631
 80065b8:	08006631 	.word	0x08006631
 80065bc:	08006619 	.word	0x08006619
 80065c0:	08006631 	.word	0x08006631
 80065c4:	08006631 	.word	0x08006631
 80065c8:	08006631 	.word	0x08006631
 80065cc:	08006631 	.word	0x08006631
 80065d0:	08006631 	.word	0x08006631
 80065d4:	08006631 	.word	0x08006631
 80065d8:	08006631 	.word	0x08006631
 80065dc:	08006621 	.word	0x08006621
 80065e0:	08006631 	.word	0x08006631
 80065e4:	08006631 	.word	0x08006631
 80065e8:	08006631 	.word	0x08006631
 80065ec:	08006631 	.word	0x08006631
 80065f0:	08006631 	.word	0x08006631
 80065f4:	08006631 	.word	0x08006631
 80065f8:	08006631 	.word	0x08006631
 80065fc:	08006629 	.word	0x08006629
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006606:	e222      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006608:	2304      	movs	r3, #4
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660e:	e21e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006610:	2308      	movs	r3, #8
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006616:	e21a      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006618:	2310      	movs	r3, #16
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661e:	e216      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006620:	2320      	movs	r3, #32
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006626:	e212      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006628:	2340      	movs	r3, #64	; 0x40
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662e:	e20e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006636:	e20a      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a69      	ldr	r2, [pc, #420]	; (80067e4 <UART_SetConfig+0x33c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d130      	bne.n	80066a4 <UART_SetConfig+0x1fc>
 8006642:	4b67      	ldr	r3, [pc, #412]	; (80067e0 <UART_SetConfig+0x338>)
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	2b05      	cmp	r3, #5
 800664c:	d826      	bhi.n	800669c <UART_SetConfig+0x1f4>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0x1ac>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	0800666d 	.word	0x0800666d
 8006658:	08006675 	.word	0x08006675
 800665c:	0800667d 	.word	0x0800667d
 8006660:	08006685 	.word	0x08006685
 8006664:	0800668d 	.word	0x0800668d
 8006668:	08006695 	.word	0x08006695
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006672:	e1ec      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e1e8      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e1e4      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e1e0      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800668c:	2320      	movs	r3, #32
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e1dc      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006694:	2340      	movs	r3, #64	; 0x40
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669a:	e1d8      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a2:	e1d4      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a4f      	ldr	r2, [pc, #316]	; (80067e8 <UART_SetConfig+0x340>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d130      	bne.n	8006710 <UART_SetConfig+0x268>
 80066ae:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <UART_SetConfig+0x338>)
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b05      	cmp	r3, #5
 80066b8:	d826      	bhi.n	8006708 <UART_SetConfig+0x260>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0x218>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066d9 	.word	0x080066d9
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	080066e9 	.word	0x080066e9
 80066cc:	080066f1 	.word	0x080066f1
 80066d0:	080066f9 	.word	0x080066f9
 80066d4:	08006701 	.word	0x08006701
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066de:	e1b6      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80066e0:	2304      	movs	r3, #4
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e6:	e1b2      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80066e8:	2308      	movs	r3, #8
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ee:	e1ae      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80066f0:	2310      	movs	r3, #16
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f6:	e1aa      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80066f8:	2320      	movs	r3, #32
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fe:	e1a6      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006700:	2340      	movs	r3, #64	; 0x40
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006706:	e1a2      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670e:	e19e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a35      	ldr	r2, [pc, #212]	; (80067ec <UART_SetConfig+0x344>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d130      	bne.n	800677c <UART_SetConfig+0x2d4>
 800671a:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <UART_SetConfig+0x338>)
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	2b05      	cmp	r3, #5
 8006724:	d826      	bhi.n	8006774 <UART_SetConfig+0x2cc>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0x284>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006745 	.word	0x08006745
 8006730:	0800674d 	.word	0x0800674d
 8006734:	08006755 	.word	0x08006755
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006765 	.word	0x08006765
 8006740:	0800676d 	.word	0x0800676d
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674a:	e180      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800674c:	2304      	movs	r3, #4
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006752:	e17c      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006754:	2308      	movs	r3, #8
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675a:	e178      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800675c:	2310      	movs	r3, #16
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e174      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006764:	2320      	movs	r3, #32
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e170      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800676c:	2340      	movs	r3, #64	; 0x40
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e16c      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006774:	2380      	movs	r3, #128	; 0x80
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e168      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <UART_SetConfig+0x348>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d142      	bne.n	800680c <UART_SetConfig+0x364>
 8006786:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <UART_SetConfig+0x338>)
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	2b05      	cmp	r3, #5
 8006790:	d838      	bhi.n	8006804 <UART_SetConfig+0x35c>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <UART_SetConfig+0x2f0>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067b1 	.word	0x080067b1
 800679c:	080067b9 	.word	0x080067b9
 80067a0:	080067c1 	.word	0x080067c1
 80067a4:	080067c9 	.word	0x080067c9
 80067a8:	080067f5 	.word	0x080067f5
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	2300      	movs	r3, #0
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b6:	e14a      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067be:	e146      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e142      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e13e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80067d0:	cfff69f3 	.word	0xcfff69f3
 80067d4:	58000c00 	.word	0x58000c00
 80067d8:	11fff4ff 	.word	0x11fff4ff
 80067dc:	40011000 	.word	0x40011000
 80067e0:	58024400 	.word	0x58024400
 80067e4:	40004400 	.word	0x40004400
 80067e8:	40004800 	.word	0x40004800
 80067ec:	40004c00 	.word	0x40004c00
 80067f0:	40005000 	.word	0x40005000
 80067f4:	2320      	movs	r3, #32
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fa:	e128      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80067fc:	2340      	movs	r3, #64	; 0x40
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006802:	e124      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680a:	e120      	b.n	8006a4e <UART_SetConfig+0x5a6>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4acb      	ldr	r2, [pc, #812]	; (8006b40 <UART_SetConfig+0x698>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d176      	bne.n	8006904 <UART_SetConfig+0x45c>
 8006816:	4bcb      	ldr	r3, [pc, #812]	; (8006b44 <UART_SetConfig+0x69c>)
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800681e:	2b28      	cmp	r3, #40	; 0x28
 8006820:	d86c      	bhi.n	80068fc <UART_SetConfig+0x454>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x380>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	080068cd 	.word	0x080068cd
 800682c:	080068fd 	.word	0x080068fd
 8006830:	080068fd 	.word	0x080068fd
 8006834:	080068fd 	.word	0x080068fd
 8006838:	080068fd 	.word	0x080068fd
 800683c:	080068fd 	.word	0x080068fd
 8006840:	080068fd 	.word	0x080068fd
 8006844:	080068fd 	.word	0x080068fd
 8006848:	080068d5 	.word	0x080068d5
 800684c:	080068fd 	.word	0x080068fd
 8006850:	080068fd 	.word	0x080068fd
 8006854:	080068fd 	.word	0x080068fd
 8006858:	080068fd 	.word	0x080068fd
 800685c:	080068fd 	.word	0x080068fd
 8006860:	080068fd 	.word	0x080068fd
 8006864:	080068fd 	.word	0x080068fd
 8006868:	080068dd 	.word	0x080068dd
 800686c:	080068fd 	.word	0x080068fd
 8006870:	080068fd 	.word	0x080068fd
 8006874:	080068fd 	.word	0x080068fd
 8006878:	080068fd 	.word	0x080068fd
 800687c:	080068fd 	.word	0x080068fd
 8006880:	080068fd 	.word	0x080068fd
 8006884:	080068fd 	.word	0x080068fd
 8006888:	080068e5 	.word	0x080068e5
 800688c:	080068fd 	.word	0x080068fd
 8006890:	080068fd 	.word	0x080068fd
 8006894:	080068fd 	.word	0x080068fd
 8006898:	080068fd 	.word	0x080068fd
 800689c:	080068fd 	.word	0x080068fd
 80068a0:	080068fd 	.word	0x080068fd
 80068a4:	080068fd 	.word	0x080068fd
 80068a8:	080068ed 	.word	0x080068ed
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	080068fd 	.word	0x080068fd
 80068b4:	080068fd 	.word	0x080068fd
 80068b8:	080068fd 	.word	0x080068fd
 80068bc:	080068fd 	.word	0x080068fd
 80068c0:	080068fd 	.word	0x080068fd
 80068c4:	080068fd 	.word	0x080068fd
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d2:	e0bc      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068da:	e0b8      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e2:	e0b4      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e0b0      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80068ec:	2320      	movs	r3, #32
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e0ac      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fa:	e0a8      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006902:	e0a4      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a8f      	ldr	r2, [pc, #572]	; (8006b48 <UART_SetConfig+0x6a0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d130      	bne.n	8006970 <UART_SetConfig+0x4c8>
 800690e:	4b8d      	ldr	r3, [pc, #564]	; (8006b44 <UART_SetConfig+0x69c>)
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b05      	cmp	r3, #5
 8006918:	d826      	bhi.n	8006968 <UART_SetConfig+0x4c0>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0x478>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006939 	.word	0x08006939
 8006924:	08006941 	.word	0x08006941
 8006928:	08006949 	.word	0x08006949
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e086      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e082      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e07e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e07a      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006958:	2320      	movs	r3, #32
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e076      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006966:	e072      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e06e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a75      	ldr	r2, [pc, #468]	; (8006b4c <UART_SetConfig+0x6a4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d130      	bne.n	80069dc <UART_SetConfig+0x534>
 800697a:	4b72      	ldr	r3, [pc, #456]	; (8006b44 <UART_SetConfig+0x69c>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b05      	cmp	r3, #5
 8006984:	d826      	bhi.n	80069d4 <UART_SetConfig+0x52c>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x4e4>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069a5 	.word	0x080069a5
 8006990:	080069ad 	.word	0x080069ad
 8006994:	080069b5 	.word	0x080069b5
 8006998:	080069bd 	.word	0x080069bd
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	080069cd 	.word	0x080069cd
 80069a4:	2300      	movs	r3, #0
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e050      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069ac:	2304      	movs	r3, #4
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e04c      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069b4:	2308      	movs	r3, #8
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e048      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e044      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069c4:	2320      	movs	r3, #32
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e040      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d2:	e03c      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069d4:	2380      	movs	r3, #128	; 0x80
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e038      	b.n	8006a4e <UART_SetConfig+0x5a6>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a5b      	ldr	r2, [pc, #364]	; (8006b50 <UART_SetConfig+0x6a8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d130      	bne.n	8006a48 <UART_SetConfig+0x5a0>
 80069e6:	4b57      	ldr	r3, [pc, #348]	; (8006b44 <UART_SetConfig+0x69c>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	2b05      	cmp	r3, #5
 80069f0:	d826      	bhi.n	8006a40 <UART_SetConfig+0x598>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x550>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a11 	.word	0x08006a11
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a21 	.word	0x08006a21
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	2302      	movs	r3, #2
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e01a      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e016      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a20:	2308      	movs	r3, #8
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a26:	e012      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e00e      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a30:	2320      	movs	r3, #32
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e00a      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a38:	2340      	movs	r3, #64	; 0x40
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e006      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e002      	b.n	8006a4e <UART_SetConfig+0x5a6>
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a3f      	ldr	r2, [pc, #252]	; (8006b50 <UART_SetConfig+0x6a8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	f040 80f8 	bne.w	8006c4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	dc46      	bgt.n	8006af0 <UART_SetConfig+0x648>
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	f2c0 8082 	blt.w	8006b6c <UART_SetConfig+0x6c4>
 8006a68:	3b02      	subs	r3, #2
 8006a6a:	2b1e      	cmp	r3, #30
 8006a6c:	d87e      	bhi.n	8006b6c <UART_SetConfig+0x6c4>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <UART_SetConfig+0x5cc>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006af7 	.word	0x08006af7
 8006a78:	08006b6d 	.word	0x08006b6d
 8006a7c:	08006aff 	.word	0x08006aff
 8006a80:	08006b6d 	.word	0x08006b6d
 8006a84:	08006b6d 	.word	0x08006b6d
 8006a88:	08006b6d 	.word	0x08006b6d
 8006a8c:	08006b0f 	.word	0x08006b0f
 8006a90:	08006b6d 	.word	0x08006b6d
 8006a94:	08006b6d 	.word	0x08006b6d
 8006a98:	08006b6d 	.word	0x08006b6d
 8006a9c:	08006b6d 	.word	0x08006b6d
 8006aa0:	08006b6d 	.word	0x08006b6d
 8006aa4:	08006b6d 	.word	0x08006b6d
 8006aa8:	08006b6d 	.word	0x08006b6d
 8006aac:	08006b1f 	.word	0x08006b1f
 8006ab0:	08006b6d 	.word	0x08006b6d
 8006ab4:	08006b6d 	.word	0x08006b6d
 8006ab8:	08006b6d 	.word	0x08006b6d
 8006abc:	08006b6d 	.word	0x08006b6d
 8006ac0:	08006b6d 	.word	0x08006b6d
 8006ac4:	08006b6d 	.word	0x08006b6d
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b6d 	.word	0x08006b6d
 8006ad0:	08006b6d 	.word	0x08006b6d
 8006ad4:	08006b6d 	.word	0x08006b6d
 8006ad8:	08006b6d 	.word	0x08006b6d
 8006adc:	08006b6d 	.word	0x08006b6d
 8006ae0:	08006b6d 	.word	0x08006b6d
 8006ae4:	08006b6d 	.word	0x08006b6d
 8006ae8:	08006b6d 	.word	0x08006b6d
 8006aec:	08006b5f 	.word	0x08006b5f
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d037      	beq.n	8006b64 <UART_SetConfig+0x6bc>
 8006af4:	e03a      	b.n	8006b6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006af6:	f7fe f829 	bl	8004b4c <HAL_RCCEx_GetD3PCLK1Freq>
 8006afa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006afc:	e03c      	b.n	8006b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe f838 	bl	8004b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b0c:	e034      	b.n	8006b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0e:	f107 0318 	add.w	r3, r7, #24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe f984 	bl	8004e20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b1c:	e02c      	b.n	8006b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <UART_SetConfig+0x69c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d016      	beq.n	8006b58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <UART_SetConfig+0x69c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	08db      	lsrs	r3, r3, #3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	4a07      	ldr	r2, [pc, #28]	; (8006b54 <UART_SetConfig+0x6ac>)
 8006b36:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b3c:	e01c      	b.n	8006b78 <UART_SetConfig+0x6d0>
 8006b3e:	bf00      	nop
 8006b40:	40011400 	.word	0x40011400
 8006b44:	58024400 	.word	0x58024400
 8006b48:	40007800 	.word	0x40007800
 8006b4c:	40007c00 	.word	0x40007c00
 8006b50:	58000c00 	.word	0x58000c00
 8006b54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b9d      	ldr	r3, [pc, #628]	; (8006dd0 <UART_SetConfig+0x928>)
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5c:	e00c      	b.n	8006b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b5e:	4b9d      	ldr	r3, [pc, #628]	; (8006dd4 <UART_SetConfig+0x92c>)
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b62:	e009      	b.n	8006b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6a:	e005      	b.n	8006b78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 81de 	beq.w	8006f3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	4a94      	ldr	r2, [pc, #592]	; (8006dd8 <UART_SetConfig+0x930>)
 8006b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	4413      	add	r3, r2
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d305      	bcc.n	8006bb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d903      	bls.n	8006bb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006bb6:	e1c1      	b.n	8006f3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	2200      	movs	r2, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	60fa      	str	r2, [r7, #12]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	4a84      	ldr	r2, [pc, #528]	; (8006dd8 <UART_SetConfig+0x930>)
 8006bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2200      	movs	r2, #0
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bda:	f7f9 fbd9 	bl	8000390 <__aeabi_uldivmod>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4610      	mov	r0, r2
 8006be4:	4619      	mov	r1, r3
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	020b      	lsls	r3, r1, #8
 8006bf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bf4:	0202      	lsls	r2, r0, #8
 8006bf6:	6979      	ldr	r1, [r7, #20]
 8006bf8:	6849      	ldr	r1, [r1, #4]
 8006bfa:	0849      	lsrs	r1, r1, #1
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	4605      	mov	r5, r0
 8006c02:	eb12 0804 	adds.w	r8, r2, r4
 8006c06:	eb43 0905 	adc.w	r9, r3, r5
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	469a      	mov	sl, r3
 8006c12:	4693      	mov	fp, r2
 8006c14:	4652      	mov	r2, sl
 8006c16:	465b      	mov	r3, fp
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 fbb8 	bl	8000390 <__aeabi_uldivmod>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4613      	mov	r3, r2
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c2e:	d308      	bcc.n	8006c42 <UART_SetConfig+0x79a>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c36:	d204      	bcs.n	8006c42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	e17c      	b.n	8006f3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c48:	e178      	b.n	8006f3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c52:	f040 80c5 	bne.w	8006de0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006c56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	dc48      	bgt.n	8006cf0 <UART_SetConfig+0x848>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	db7b      	blt.n	8006d5a <UART_SetConfig+0x8b2>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d879      	bhi.n	8006d5a <UART_SetConfig+0x8b2>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0x7c4>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006cf7 	.word	0x08006cf7
 8006c70:	08006cff 	.word	0x08006cff
 8006c74:	08006d5b 	.word	0x08006d5b
 8006c78:	08006d5b 	.word	0x08006d5b
 8006c7c:	08006d07 	.word	0x08006d07
 8006c80:	08006d5b 	.word	0x08006d5b
 8006c84:	08006d5b 	.word	0x08006d5b
 8006c88:	08006d5b 	.word	0x08006d5b
 8006c8c:	08006d17 	.word	0x08006d17
 8006c90:	08006d5b 	.word	0x08006d5b
 8006c94:	08006d5b 	.word	0x08006d5b
 8006c98:	08006d5b 	.word	0x08006d5b
 8006c9c:	08006d5b 	.word	0x08006d5b
 8006ca0:	08006d5b 	.word	0x08006d5b
 8006ca4:	08006d5b 	.word	0x08006d5b
 8006ca8:	08006d5b 	.word	0x08006d5b
 8006cac:	08006d27 	.word	0x08006d27
 8006cb0:	08006d5b 	.word	0x08006d5b
 8006cb4:	08006d5b 	.word	0x08006d5b
 8006cb8:	08006d5b 	.word	0x08006d5b
 8006cbc:	08006d5b 	.word	0x08006d5b
 8006cc0:	08006d5b 	.word	0x08006d5b
 8006cc4:	08006d5b 	.word	0x08006d5b
 8006cc8:	08006d5b 	.word	0x08006d5b
 8006ccc:	08006d5b 	.word	0x08006d5b
 8006cd0:	08006d5b 	.word	0x08006d5b
 8006cd4:	08006d5b 	.word	0x08006d5b
 8006cd8:	08006d5b 	.word	0x08006d5b
 8006cdc:	08006d5b 	.word	0x08006d5b
 8006ce0:	08006d5b 	.word	0x08006d5b
 8006ce4:	08006d5b 	.word	0x08006d5b
 8006ce8:	08006d5b 	.word	0x08006d5b
 8006cec:	08006d4d 	.word	0x08006d4d
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d02e      	beq.n	8006d52 <UART_SetConfig+0x8aa>
 8006cf4:	e031      	b.n	8006d5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf6:	f7fc ffb7 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 8006cfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cfc:	e033      	b.n	8006d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cfe:	f7fc ffc9 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8006d02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d04:	e02f      	b.n	8006d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fd ff34 	bl	8004b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d14:	e027      	b.n	8006d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d16:	f107 0318 	add.w	r3, r7, #24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe f880 	bl	8004e20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d24:	e01f      	b.n	8006d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d26:	4b2d      	ldr	r3, [pc, #180]	; (8006ddc <UART_SetConfig+0x934>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d32:	4b2a      	ldr	r3, [pc, #168]	; (8006ddc <UART_SetConfig+0x934>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	08db      	lsrs	r3, r3, #3
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <UART_SetConfig+0x928>)
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d44:	e00f      	b.n	8006d66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <UART_SetConfig+0x928>)
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d4a:	e00c      	b.n	8006d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d4c:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <UART_SetConfig+0x92c>)
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d50:	e009      	b.n	8006d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d58:	e005      	b.n	8006d66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80e7 	beq.w	8006f3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <UART_SetConfig+0x930>)
 8006d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d80:	005a      	lsls	r2, r3, #1
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	441a      	add	r2, r3
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	2b0f      	cmp	r3, #15
 8006d98:	d916      	bls.n	8006dc8 <UART_SetConfig+0x920>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d212      	bcs.n	8006dc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f023 030f 	bic.w	r3, r3, #15
 8006daa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	e0b9      	b.n	8006f3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006dce:	e0b5      	b.n	8006f3c <UART_SetConfig+0xa94>
 8006dd0:	03d09000 	.word	0x03d09000
 8006dd4:	003d0900 	.word	0x003d0900
 8006dd8:	0800a788 	.word	0x0800a788
 8006ddc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006de0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	dc49      	bgt.n	8006e7c <UART_SetConfig+0x9d4>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db7c      	blt.n	8006ee6 <UART_SetConfig+0xa3e>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d87a      	bhi.n	8006ee6 <UART_SetConfig+0xa3e>
 8006df0:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x950>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e83 	.word	0x08006e83
 8006dfc:	08006e8b 	.word	0x08006e8b
 8006e00:	08006ee7 	.word	0x08006ee7
 8006e04:	08006ee7 	.word	0x08006ee7
 8006e08:	08006e93 	.word	0x08006e93
 8006e0c:	08006ee7 	.word	0x08006ee7
 8006e10:	08006ee7 	.word	0x08006ee7
 8006e14:	08006ee7 	.word	0x08006ee7
 8006e18:	08006ea3 	.word	0x08006ea3
 8006e1c:	08006ee7 	.word	0x08006ee7
 8006e20:	08006ee7 	.word	0x08006ee7
 8006e24:	08006ee7 	.word	0x08006ee7
 8006e28:	08006ee7 	.word	0x08006ee7
 8006e2c:	08006ee7 	.word	0x08006ee7
 8006e30:	08006ee7 	.word	0x08006ee7
 8006e34:	08006ee7 	.word	0x08006ee7
 8006e38:	08006eb3 	.word	0x08006eb3
 8006e3c:	08006ee7 	.word	0x08006ee7
 8006e40:	08006ee7 	.word	0x08006ee7
 8006e44:	08006ee7 	.word	0x08006ee7
 8006e48:	08006ee7 	.word	0x08006ee7
 8006e4c:	08006ee7 	.word	0x08006ee7
 8006e50:	08006ee7 	.word	0x08006ee7
 8006e54:	08006ee7 	.word	0x08006ee7
 8006e58:	08006ee7 	.word	0x08006ee7
 8006e5c:	08006ee7 	.word	0x08006ee7
 8006e60:	08006ee7 	.word	0x08006ee7
 8006e64:	08006ee7 	.word	0x08006ee7
 8006e68:	08006ee7 	.word	0x08006ee7
 8006e6c:	08006ee7 	.word	0x08006ee7
 8006e70:	08006ee7 	.word	0x08006ee7
 8006e74:	08006ee7 	.word	0x08006ee7
 8006e78:	08006ed9 	.word	0x08006ed9
 8006e7c:	2b40      	cmp	r3, #64	; 0x40
 8006e7e:	d02e      	beq.n	8006ede <UART_SetConfig+0xa36>
 8006e80:	e031      	b.n	8006ee6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e82:	f7fc fef1 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 8006e86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e88:	e033      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e8a:	f7fc ff03 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8006e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e90:	e02f      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd fe6e 	bl	8004b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea0:	e027      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea2:	f107 0318 	add.w	r3, r7, #24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fd ffba 	bl	8004e20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb0:	e01f      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb2:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <UART_SetConfig+0xac0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ebe:	4b2a      	ldr	r3, [pc, #168]	; (8006f68 <UART_SetConfig+0xac0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	08db      	lsrs	r3, r3, #3
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <UART_SetConfig+0xac4>)
 8006eca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ed0:	e00f      	b.n	8006ef2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <UART_SetConfig+0xac4>)
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed6:	e00c      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <UART_SetConfig+0xac8>)
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006edc:	e009      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee4:	e005      	b.n	8006ef2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d021      	beq.n	8006f3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <UART_SetConfig+0xacc>)
 8006efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f02:	461a      	mov	r2, r3
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	085b      	lsrs	r3, r3, #1
 8006f10:	441a      	add	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	2b0f      	cmp	r3, #15
 8006f20:	d909      	bls.n	8006f36 <UART_SetConfig+0xa8e>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d205      	bcs.n	8006f36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e002      	b.n	8006f3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2200      	movs	r2, #0
 8006f56:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3748      	adds	r7, #72	; 0x48
 8006f60:	46bd      	mov	sp, r7
 8006f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	03d09000 	.word	0x03d09000
 8006f70:	003d0900 	.word	0x003d0900
 8006f74:	0800a788 	.word	0x0800a788

08006f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01a      	beq.n	800708e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007076:	d10a      	bne.n	800708e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	605a      	str	r2, [r3, #4]
  }
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070cc:	f7fb facc 	bl	8002668 <HAL_GetTick>
 80070d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d10e      	bne.n	80070fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f82f 	bl	8007152 <UART_WaitOnFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e025      	b.n	800714a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d10e      	bne.n	800712a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f819 	bl	8007152 <UART_WaitOnFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e00f      	b.n	800714a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b09c      	sub	sp, #112	; 0x70
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007162:	e0a9      	b.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	f000 80a5 	beq.w	80072b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716e:	f7fb fa7b 	bl	8002668 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <UART_WaitOnFlagUntilTimeout+0x32>
 800717e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007180:	2b00      	cmp	r3, #0
 8007182:	d140      	bne.n	8007206 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007198:	667b      	str	r3, [r7, #100]	; 0x64
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e6      	bne.n	8007184 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	f023 0301 	bic.w	r3, r3, #1
 80071cc:	663b      	str	r3, [r7, #96]	; 0x60
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80071d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e5      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e069      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d051      	beq.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007222:	d149      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800722c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
 800724e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e6      	bne.n	800722e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	613b      	str	r3, [r7, #16]
   return(result);
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	66bb      	str	r3, [r7, #104]	; 0x68
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007280:	623a      	str	r2, [r7, #32]
 8007282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	6a3a      	ldr	r2, [r7, #32]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	61bb      	str	r3, [r7, #24]
   return(result);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e010      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4013      	ands	r3, r2
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f43f af46 	beq.w	8007164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3770      	adds	r7, #112	; 0x70
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e027      	b.n	8007348 <HAL_UARTEx_DisableFifoMode+0x66>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007326:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007368:	2302      	movs	r3, #2
 800736a:	e02d      	b.n	80073c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2224      	movs	r2, #36	; 0x24
 8007378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f84f 	bl	800744c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e02d      	b.n	8007444 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f811 	bl	800744c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007458:	2b00      	cmp	r3, #0
 800745a:	d108      	bne.n	800746e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800746c:	e031      	b.n	80074d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800746e:	2310      	movs	r3, #16
 8007470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007472:	2310      	movs	r3, #16
 8007474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	0e5b      	lsrs	r3, r3, #25
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	0f5b      	lsrs	r3, r3, #29
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	7b3a      	ldrb	r2, [r7, #12]
 800749a:	4911      	ldr	r1, [pc, #68]	; (80074e0 <UARTEx_SetNbDataToProcess+0x94>)
 800749c:	5c8a      	ldrb	r2, [r1, r2]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074a2:	7b3a      	ldrb	r2, [r7, #12]
 80074a4:	490f      	ldr	r1, [pc, #60]	; (80074e4 <UARTEx_SetNbDataToProcess+0x98>)
 80074a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	7b7a      	ldrb	r2, [r7, #13]
 80074b8:	4909      	ldr	r1, [pc, #36]	; (80074e0 <UARTEx_SetNbDataToProcess+0x94>)
 80074ba:	5c8a      	ldrb	r2, [r1, r2]
 80074bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074c0:	7b7a      	ldrb	r2, [r7, #13]
 80074c2:	4908      	ldr	r1, [pc, #32]	; (80074e4 <UARTEx_SetNbDataToProcess+0x98>)
 80074c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	0800a7a0 	.word	0x0800a7a0
 80074e4:	0800a7a8 	.word	0x0800a7a8

080074e8 <__errno>:
 80074e8:	4b01      	ldr	r3, [pc, #4]	; (80074f0 <__errno+0x8>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	24000018 	.word	0x24000018

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	4d0d      	ldr	r5, [pc, #52]	; (800752c <__libc_init_array+0x38>)
 80074f8:	4c0d      	ldr	r4, [pc, #52]	; (8007530 <__libc_init_array+0x3c>)
 80074fa:	1b64      	subs	r4, r4, r5
 80074fc:	10a4      	asrs	r4, r4, #2
 80074fe:	2600      	movs	r6, #0
 8007500:	42a6      	cmp	r6, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	4d0b      	ldr	r5, [pc, #44]	; (8007534 <__libc_init_array+0x40>)
 8007506:	4c0c      	ldr	r4, [pc, #48]	; (8007538 <__libc_init_array+0x44>)
 8007508:	f002 fe76 	bl	800a1f8 <_init>
 800750c:	1b64      	subs	r4, r4, r5
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	2600      	movs	r6, #0
 8007512:	42a6      	cmp	r6, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f855 3b04 	ldr.w	r3, [r5], #4
 800751c:	4798      	blx	r3
 800751e:	3601      	adds	r6, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f855 3b04 	ldr.w	r3, [r5], #4
 8007526:	4798      	blx	r3
 8007528:	3601      	adds	r6, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	0800ab94 	.word	0x0800ab94
 8007530:	0800ab94 	.word	0x0800ab94
 8007534:	0800ab94 	.word	0x0800ab94
 8007538:	0800ab98 	.word	0x0800ab98

0800753c <memcpy>:
 800753c:	440a      	add	r2, r1
 800753e:	4291      	cmp	r1, r2
 8007540:	f100 33ff 	add.w	r3, r0, #4294967295
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	4770      	bx	lr
 8007548:	b510      	push	{r4, lr}
 800754a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007552:	4291      	cmp	r1, r2
 8007554:	d1f9      	bne.n	800754a <memcpy+0xe>
 8007556:	bd10      	pop	{r4, pc}

08007558 <memset>:
 8007558:	4402      	add	r2, r0
 800755a:	4603      	mov	r3, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <__cvt>:
 8007568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800756a:	ed2d 8b02 	vpush	{d8}
 800756e:	eeb0 8b40 	vmov.f64	d8, d0
 8007572:	b085      	sub	sp, #20
 8007574:	4617      	mov	r7, r2
 8007576:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007578:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800757a:	ee18 2a90 	vmov	r2, s17
 800757e:	f025 0520 	bic.w	r5, r5, #32
 8007582:	2a00      	cmp	r2, #0
 8007584:	bfb6      	itet	lt
 8007586:	222d      	movlt	r2, #45	; 0x2d
 8007588:	2200      	movge	r2, #0
 800758a:	eeb1 8b40 	vneglt.f64	d8, d0
 800758e:	2d46      	cmp	r5, #70	; 0x46
 8007590:	460c      	mov	r4, r1
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	d004      	beq.n	80075a0 <__cvt+0x38>
 8007596:	2d45      	cmp	r5, #69	; 0x45
 8007598:	d100      	bne.n	800759c <__cvt+0x34>
 800759a:	3401      	adds	r4, #1
 800759c:	2102      	movs	r1, #2
 800759e:	e000      	b.n	80075a2 <__cvt+0x3a>
 80075a0:	2103      	movs	r1, #3
 80075a2:	ab03      	add	r3, sp, #12
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	ab02      	add	r3, sp, #8
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	4622      	mov	r2, r4
 80075ac:	4633      	mov	r3, r6
 80075ae:	eeb0 0b48 	vmov.f64	d0, d8
 80075b2:	f000 fce1 	bl	8007f78 <_dtoa_r>
 80075b6:	2d47      	cmp	r5, #71	; 0x47
 80075b8:	d101      	bne.n	80075be <__cvt+0x56>
 80075ba:	07fb      	lsls	r3, r7, #31
 80075bc:	d51a      	bpl.n	80075f4 <__cvt+0x8c>
 80075be:	2d46      	cmp	r5, #70	; 0x46
 80075c0:	eb00 0204 	add.w	r2, r0, r4
 80075c4:	d10c      	bne.n	80075e0 <__cvt+0x78>
 80075c6:	7803      	ldrb	r3, [r0, #0]
 80075c8:	2b30      	cmp	r3, #48	; 0x30
 80075ca:	d107      	bne.n	80075dc <__cvt+0x74>
 80075cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80075d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d4:	bf1c      	itt	ne
 80075d6:	f1c4 0401 	rsbne	r4, r4, #1
 80075da:	6034      	strne	r4, [r6, #0]
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	441a      	add	r2, r3
 80075e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80075e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e8:	bf08      	it	eq
 80075ea:	9203      	streq	r2, [sp, #12]
 80075ec:	2130      	movs	r1, #48	; 0x30
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d307      	bcc.n	8007604 <__cvt+0x9c>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075f8:	1a1b      	subs	r3, r3, r0
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	b005      	add	sp, #20
 80075fe:	ecbd 8b02 	vpop	{d8}
 8007602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007604:	1c5c      	adds	r4, r3, #1
 8007606:	9403      	str	r4, [sp, #12]
 8007608:	7019      	strb	r1, [r3, #0]
 800760a:	e7f0      	b.n	80075ee <__cvt+0x86>

0800760c <__exponent>:
 800760c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800760e:	4603      	mov	r3, r0
 8007610:	2900      	cmp	r1, #0
 8007612:	bfb8      	it	lt
 8007614:	4249      	neglt	r1, r1
 8007616:	f803 2b02 	strb.w	r2, [r3], #2
 800761a:	bfb4      	ite	lt
 800761c:	222d      	movlt	r2, #45	; 0x2d
 800761e:	222b      	movge	r2, #43	; 0x2b
 8007620:	2909      	cmp	r1, #9
 8007622:	7042      	strb	r2, [r0, #1]
 8007624:	dd2a      	ble.n	800767c <__exponent+0x70>
 8007626:	f10d 0407 	add.w	r4, sp, #7
 800762a:	46a4      	mov	ip, r4
 800762c:	270a      	movs	r7, #10
 800762e:	46a6      	mov	lr, r4
 8007630:	460a      	mov	r2, r1
 8007632:	fb91 f6f7 	sdiv	r6, r1, r7
 8007636:	fb07 1516 	mls	r5, r7, r6, r1
 800763a:	3530      	adds	r5, #48	; 0x30
 800763c:	2a63      	cmp	r2, #99	; 0x63
 800763e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007642:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007646:	4631      	mov	r1, r6
 8007648:	dcf1      	bgt.n	800762e <__exponent+0x22>
 800764a:	3130      	adds	r1, #48	; 0x30
 800764c:	f1ae 0502 	sub.w	r5, lr, #2
 8007650:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007654:	1c44      	adds	r4, r0, #1
 8007656:	4629      	mov	r1, r5
 8007658:	4561      	cmp	r1, ip
 800765a:	d30a      	bcc.n	8007672 <__exponent+0x66>
 800765c:	f10d 0209 	add.w	r2, sp, #9
 8007660:	eba2 020e 	sub.w	r2, r2, lr
 8007664:	4565      	cmp	r5, ip
 8007666:	bf88      	it	hi
 8007668:	2200      	movhi	r2, #0
 800766a:	4413      	add	r3, r2
 800766c:	1a18      	subs	r0, r3, r0
 800766e:	b003      	add	sp, #12
 8007670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007676:	f804 2f01 	strb.w	r2, [r4, #1]!
 800767a:	e7ed      	b.n	8007658 <__exponent+0x4c>
 800767c:	2330      	movs	r3, #48	; 0x30
 800767e:	3130      	adds	r1, #48	; 0x30
 8007680:	7083      	strb	r3, [r0, #2]
 8007682:	70c1      	strb	r1, [r0, #3]
 8007684:	1d03      	adds	r3, r0, #4
 8007686:	e7f1      	b.n	800766c <__exponent+0x60>

08007688 <_printf_float>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	b08b      	sub	sp, #44	; 0x2c
 800768e:	460c      	mov	r4, r1
 8007690:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007694:	4616      	mov	r6, r2
 8007696:	461f      	mov	r7, r3
 8007698:	4605      	mov	r5, r0
 800769a:	f001 fad1 	bl	8008c40 <_localeconv_r>
 800769e:	f8d0 b000 	ldr.w	fp, [r0]
 80076a2:	4658      	mov	r0, fp
 80076a4:	f7f8 fe1c 	bl	80002e0 <strlen>
 80076a8:	2300      	movs	r3, #0
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	f8d8 3000 	ldr.w	r3, [r8]
 80076b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80076b4:	6822      	ldr	r2, [r4, #0]
 80076b6:	3307      	adds	r3, #7
 80076b8:	f023 0307 	bic.w	r3, r3, #7
 80076bc:	f103 0108 	add.w	r1, r3, #8
 80076c0:	f8c8 1000 	str.w	r1, [r8]
 80076c4:	4682      	mov	sl, r0
 80076c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80076ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007930 <_printf_float+0x2a8>
 80076d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80076d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80076da:	eeb4 6b47 	vcmp.f64	d6, d7
 80076de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e2:	dd24      	ble.n	800772e <_printf_float+0xa6>
 80076e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80076e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ec:	d502      	bpl.n	80076f4 <_printf_float+0x6c>
 80076ee:	232d      	movs	r3, #45	; 0x2d
 80076f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f4:	4b90      	ldr	r3, [pc, #576]	; (8007938 <_printf_float+0x2b0>)
 80076f6:	4891      	ldr	r0, [pc, #580]	; (800793c <_printf_float+0x2b4>)
 80076f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80076fc:	bf94      	ite	ls
 80076fe:	4698      	movls	r8, r3
 8007700:	4680      	movhi	r8, r0
 8007702:	2303      	movs	r3, #3
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	f022 0204 	bic.w	r2, r2, #4
 800770a:	2300      	movs	r3, #0
 800770c:	6022      	str	r2, [r4, #0]
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	9700      	str	r7, [sp, #0]
 8007712:	4633      	mov	r3, r6
 8007714:	aa09      	add	r2, sp, #36	; 0x24
 8007716:	4621      	mov	r1, r4
 8007718:	4628      	mov	r0, r5
 800771a:	f000 f9d3 	bl	8007ac4 <_printf_common>
 800771e:	3001      	adds	r0, #1
 8007720:	f040 808a 	bne.w	8007838 <_printf_float+0x1b0>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
 8007728:	b00b      	add	sp, #44	; 0x2c
 800772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	d709      	bvc.n	800774c <_printf_float+0xc4>
 8007738:	ee10 3a90 	vmov	r3, s1
 800773c:	2b00      	cmp	r3, #0
 800773e:	bfbc      	itt	lt
 8007740:	232d      	movlt	r3, #45	; 0x2d
 8007742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007746:	487e      	ldr	r0, [pc, #504]	; (8007940 <_printf_float+0x2b8>)
 8007748:	4b7e      	ldr	r3, [pc, #504]	; (8007944 <_printf_float+0x2bc>)
 800774a:	e7d5      	b.n	80076f8 <_printf_float+0x70>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007752:	9104      	str	r1, [sp, #16]
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	d13c      	bne.n	80077d2 <_printf_float+0x14a>
 8007758:	2306      	movs	r3, #6
 800775a:	6063      	str	r3, [r4, #4]
 800775c:	2300      	movs	r3, #0
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	ab08      	add	r3, sp, #32
 8007762:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800776a:	ab07      	add	r3, sp, #28
 800776c:	6861      	ldr	r1, [r4, #4]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	f10d 031b 	add.w	r3, sp, #27
 8007776:	4628      	mov	r0, r5
 8007778:	f7ff fef6 	bl	8007568 <__cvt>
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	9907      	ldr	r1, [sp, #28]
 8007780:	2b47      	cmp	r3, #71	; 0x47
 8007782:	4680      	mov	r8, r0
 8007784:	d108      	bne.n	8007798 <_printf_float+0x110>
 8007786:	1cc8      	adds	r0, r1, #3
 8007788:	db02      	blt.n	8007790 <_printf_float+0x108>
 800778a:	6863      	ldr	r3, [r4, #4]
 800778c:	4299      	cmp	r1, r3
 800778e:	dd41      	ble.n	8007814 <_printf_float+0x18c>
 8007790:	f1a9 0902 	sub.w	r9, r9, #2
 8007794:	fa5f f989 	uxtb.w	r9, r9
 8007798:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800779c:	d820      	bhi.n	80077e0 <_printf_float+0x158>
 800779e:	3901      	subs	r1, #1
 80077a0:	464a      	mov	r2, r9
 80077a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077a6:	9107      	str	r1, [sp, #28]
 80077a8:	f7ff ff30 	bl	800760c <__exponent>
 80077ac:	9a08      	ldr	r2, [sp, #32]
 80077ae:	9004      	str	r0, [sp, #16]
 80077b0:	1813      	adds	r3, r2, r0
 80077b2:	2a01      	cmp	r2, #1
 80077b4:	6123      	str	r3, [r4, #16]
 80077b6:	dc02      	bgt.n	80077be <_printf_float+0x136>
 80077b8:	6822      	ldr	r2, [r4, #0]
 80077ba:	07d2      	lsls	r2, r2, #31
 80077bc:	d501      	bpl.n	80077c2 <_printf_float+0x13a>
 80077be:	3301      	adds	r3, #1
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0a2      	beq.n	8007710 <_printf_float+0x88>
 80077ca:	232d      	movs	r3, #45	; 0x2d
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d0:	e79e      	b.n	8007710 <_printf_float+0x88>
 80077d2:	9904      	ldr	r1, [sp, #16]
 80077d4:	2947      	cmp	r1, #71	; 0x47
 80077d6:	d1c1      	bne.n	800775c <_printf_float+0xd4>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1bf      	bne.n	800775c <_printf_float+0xd4>
 80077dc:	2301      	movs	r3, #1
 80077de:	e7bc      	b.n	800775a <_printf_float+0xd2>
 80077e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80077e4:	d118      	bne.n	8007818 <_printf_float+0x190>
 80077e6:	2900      	cmp	r1, #0
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	dd0b      	ble.n	8007804 <_printf_float+0x17c>
 80077ec:	6121      	str	r1, [r4, #16]
 80077ee:	b913      	cbnz	r3, 80077f6 <_printf_float+0x16e>
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	07d0      	lsls	r0, r2, #31
 80077f4:	d502      	bpl.n	80077fc <_printf_float+0x174>
 80077f6:	3301      	adds	r3, #1
 80077f8:	440b      	add	r3, r1
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	2300      	movs	r3, #0
 80077fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	e7de      	b.n	80077c2 <_printf_float+0x13a>
 8007804:	b913      	cbnz	r3, 800780c <_printf_float+0x184>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	07d2      	lsls	r2, r2, #31
 800780a:	d501      	bpl.n	8007810 <_printf_float+0x188>
 800780c:	3302      	adds	r3, #2
 800780e:	e7f4      	b.n	80077fa <_printf_float+0x172>
 8007810:	2301      	movs	r3, #1
 8007812:	e7f2      	b.n	80077fa <_printf_float+0x172>
 8007814:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	4299      	cmp	r1, r3
 800781c:	db05      	blt.n	800782a <_printf_float+0x1a2>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	6121      	str	r1, [r4, #16]
 8007822:	07d8      	lsls	r0, r3, #31
 8007824:	d5ea      	bpl.n	80077fc <_printf_float+0x174>
 8007826:	1c4b      	adds	r3, r1, #1
 8007828:	e7e7      	b.n	80077fa <_printf_float+0x172>
 800782a:	2900      	cmp	r1, #0
 800782c:	bfd4      	ite	le
 800782e:	f1c1 0202 	rsble	r2, r1, #2
 8007832:	2201      	movgt	r2, #1
 8007834:	4413      	add	r3, r2
 8007836:	e7e0      	b.n	80077fa <_printf_float+0x172>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	055a      	lsls	r2, r3, #21
 800783c:	d407      	bmi.n	800784e <_printf_float+0x1c6>
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	4642      	mov	r2, r8
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	d12a      	bne.n	80078a2 <_printf_float+0x21a>
 800784c:	e76a      	b.n	8007724 <_printf_float+0x9c>
 800784e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007852:	f240 80e2 	bls.w	8007a1a <_printf_float+0x392>
 8007856:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800785a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800785e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007862:	d133      	bne.n	80078cc <_printf_float+0x244>
 8007864:	4a38      	ldr	r2, [pc, #224]	; (8007948 <_printf_float+0x2c0>)
 8007866:	2301      	movs	r3, #1
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f af58 	beq.w	8007724 <_printf_float+0x9c>
 8007874:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007878:	429a      	cmp	r2, r3
 800787a:	db02      	blt.n	8007882 <_printf_float+0x1fa>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	07d8      	lsls	r0, r3, #31
 8007880:	d50f      	bpl.n	80078a2 <_printf_float+0x21a>
 8007882:	4653      	mov	r3, sl
 8007884:	465a      	mov	r2, fp
 8007886:	4631      	mov	r1, r6
 8007888:	4628      	mov	r0, r5
 800788a:	47b8      	blx	r7
 800788c:	3001      	adds	r0, #1
 800788e:	f43f af49 	beq.w	8007724 <_printf_float+0x9c>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	f104 091a 	add.w	r9, r4, #26
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	3b01      	subs	r3, #1
 800789e:	4543      	cmp	r3, r8
 80078a0:	dc09      	bgt.n	80078b6 <_printf_float+0x22e>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	079b      	lsls	r3, r3, #30
 80078a6:	f100 8108 	bmi.w	8007aba <_printf_float+0x432>
 80078aa:	68e0      	ldr	r0, [r4, #12]
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	4298      	cmp	r0, r3
 80078b0:	bfb8      	it	lt
 80078b2:	4618      	movlt	r0, r3
 80078b4:	e738      	b.n	8007728 <_printf_float+0xa0>
 80078b6:	2301      	movs	r3, #1
 80078b8:	464a      	mov	r2, r9
 80078ba:	4631      	mov	r1, r6
 80078bc:	4628      	mov	r0, r5
 80078be:	47b8      	blx	r7
 80078c0:	3001      	adds	r0, #1
 80078c2:	f43f af2f 	beq.w	8007724 <_printf_float+0x9c>
 80078c6:	f108 0801 	add.w	r8, r8, #1
 80078ca:	e7e6      	b.n	800789a <_printf_float+0x212>
 80078cc:	9b07      	ldr	r3, [sp, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dc3c      	bgt.n	800794c <_printf_float+0x2c4>
 80078d2:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <_printf_float+0x2c0>)
 80078d4:	2301      	movs	r3, #1
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f af21 	beq.w	8007724 <_printf_float+0x9c>
 80078e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	d102      	bne.n	80078f0 <_printf_float+0x268>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	07d9      	lsls	r1, r3, #31
 80078ee:	d5d8      	bpl.n	80078a2 <_printf_float+0x21a>
 80078f0:	4653      	mov	r3, sl
 80078f2:	465a      	mov	r2, fp
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af12 	beq.w	8007724 <_printf_float+0x9c>
 8007900:	f04f 0900 	mov.w	r9, #0
 8007904:	f104 0a1a 	add.w	sl, r4, #26
 8007908:	9b07      	ldr	r3, [sp, #28]
 800790a:	425b      	negs	r3, r3
 800790c:	454b      	cmp	r3, r9
 800790e:	dc01      	bgt.n	8007914 <_printf_float+0x28c>
 8007910:	9b08      	ldr	r3, [sp, #32]
 8007912:	e795      	b.n	8007840 <_printf_float+0x1b8>
 8007914:	2301      	movs	r3, #1
 8007916:	4652      	mov	r2, sl
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	f43f af00 	beq.w	8007724 <_printf_float+0x9c>
 8007924:	f109 0901 	add.w	r9, r9, #1
 8007928:	e7ee      	b.n	8007908 <_printf_float+0x280>
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	ffffffff 	.word	0xffffffff
 8007934:	7fefffff 	.word	0x7fefffff
 8007938:	0800a7b4 	.word	0x0800a7b4
 800793c:	0800a7b8 	.word	0x0800a7b8
 8007940:	0800a7c0 	.word	0x0800a7c0
 8007944:	0800a7bc 	.word	0x0800a7bc
 8007948:	0800a7c4 	.word	0x0800a7c4
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007950:	429a      	cmp	r2, r3
 8007952:	bfa8      	it	ge
 8007954:	461a      	movge	r2, r3
 8007956:	2a00      	cmp	r2, #0
 8007958:	4691      	mov	r9, r2
 800795a:	dc38      	bgt.n	80079ce <_printf_float+0x346>
 800795c:	2300      	movs	r3, #0
 800795e:	9305      	str	r3, [sp, #20]
 8007960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007964:	f104 021a 	add.w	r2, r4, #26
 8007968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800796a:	9905      	ldr	r1, [sp, #20]
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	eba3 0309 	sub.w	r3, r3, r9
 8007972:	428b      	cmp	r3, r1
 8007974:	dc33      	bgt.n	80079de <_printf_float+0x356>
 8007976:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800797a:	429a      	cmp	r2, r3
 800797c:	db3c      	blt.n	80079f8 <_printf_float+0x370>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	07da      	lsls	r2, r3, #31
 8007982:	d439      	bmi.n	80079f8 <_printf_float+0x370>
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	9a04      	ldr	r2, [sp, #16]
 8007988:	9907      	ldr	r1, [sp, #28]
 800798a:	1a9a      	subs	r2, r3, r2
 800798c:	eba3 0901 	sub.w	r9, r3, r1
 8007990:	4591      	cmp	r9, r2
 8007992:	bfa8      	it	ge
 8007994:	4691      	movge	r9, r2
 8007996:	f1b9 0f00 	cmp.w	r9, #0
 800799a:	dc35      	bgt.n	8007a08 <_printf_float+0x380>
 800799c:	f04f 0800 	mov.w	r8, #0
 80079a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079a4:	f104 0a1a 	add.w	sl, r4, #26
 80079a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	eba3 0309 	sub.w	r3, r3, r9
 80079b2:	4543      	cmp	r3, r8
 80079b4:	f77f af75 	ble.w	80078a2 <_printf_float+0x21a>
 80079b8:	2301      	movs	r3, #1
 80079ba:	4652      	mov	r2, sl
 80079bc:	4631      	mov	r1, r6
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	f43f aeae 	beq.w	8007724 <_printf_float+0x9c>
 80079c8:	f108 0801 	add.w	r8, r8, #1
 80079cc:	e7ec      	b.n	80079a8 <_printf_float+0x320>
 80079ce:	4613      	mov	r3, r2
 80079d0:	4631      	mov	r1, r6
 80079d2:	4642      	mov	r2, r8
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	d1bf      	bne.n	800795c <_printf_float+0x2d4>
 80079dc:	e6a2      	b.n	8007724 <_printf_float+0x9c>
 80079de:	2301      	movs	r3, #1
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	9204      	str	r2, [sp, #16]
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae9b 	beq.w	8007724 <_printf_float+0x9c>
 80079ee:	9b05      	ldr	r3, [sp, #20]
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	3301      	adds	r3, #1
 80079f4:	9305      	str	r3, [sp, #20]
 80079f6:	e7b7      	b.n	8007968 <_printf_float+0x2e0>
 80079f8:	4653      	mov	r3, sl
 80079fa:	465a      	mov	r2, fp
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	d1be      	bne.n	8007984 <_printf_float+0x2fc>
 8007a06:	e68d      	b.n	8007724 <_printf_float+0x9c>
 8007a08:	9a04      	ldr	r2, [sp, #16]
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	4442      	add	r2, r8
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	d1c1      	bne.n	800799c <_printf_float+0x314>
 8007a18:	e684      	b.n	8007724 <_printf_float+0x9c>
 8007a1a:	9a08      	ldr	r2, [sp, #32]
 8007a1c:	2a01      	cmp	r2, #1
 8007a1e:	dc01      	bgt.n	8007a24 <_printf_float+0x39c>
 8007a20:	07db      	lsls	r3, r3, #31
 8007a22:	d537      	bpl.n	8007a94 <_printf_float+0x40c>
 8007a24:	2301      	movs	r3, #1
 8007a26:	4642      	mov	r2, r8
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b8      	blx	r7
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f43f ae78 	beq.w	8007724 <_printf_float+0x9c>
 8007a34:	4653      	mov	r3, sl
 8007a36:	465a      	mov	r2, fp
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f ae70 	beq.w	8007724 <_printf_float+0x9c>
 8007a44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007a48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a50:	d01b      	beq.n	8007a8a <_printf_float+0x402>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	f108 0201 	add.w	r2, r8, #1
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	d10e      	bne.n	8007a82 <_printf_float+0x3fa>
 8007a64:	e65e      	b.n	8007724 <_printf_float+0x9c>
 8007a66:	2301      	movs	r3, #1
 8007a68:	464a      	mov	r2, r9
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f ae57 	beq.w	8007724 <_printf_float+0x9c>
 8007a76:	f108 0801 	add.w	r8, r8, #1
 8007a7a:	9b08      	ldr	r3, [sp, #32]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	4543      	cmp	r3, r8
 8007a80:	dcf1      	bgt.n	8007a66 <_printf_float+0x3de>
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a88:	e6db      	b.n	8007842 <_printf_float+0x1ba>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	f104 091a 	add.w	r9, r4, #26
 8007a92:	e7f2      	b.n	8007a7a <_printf_float+0x3f2>
 8007a94:	2301      	movs	r3, #1
 8007a96:	4642      	mov	r2, r8
 8007a98:	e7df      	b.n	8007a5a <_printf_float+0x3d2>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	464a      	mov	r2, r9
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f ae3d 	beq.w	8007724 <_printf_float+0x9c>
 8007aaa:	f108 0801 	add.w	r8, r8, #1
 8007aae:	68e3      	ldr	r3, [r4, #12]
 8007ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab2:	1a5b      	subs	r3, r3, r1
 8007ab4:	4543      	cmp	r3, r8
 8007ab6:	dcf0      	bgt.n	8007a9a <_printf_float+0x412>
 8007ab8:	e6f7      	b.n	80078aa <_printf_float+0x222>
 8007aba:	f04f 0800 	mov.w	r8, #0
 8007abe:	f104 0919 	add.w	r9, r4, #25
 8007ac2:	e7f4      	b.n	8007aae <_printf_float+0x426>

08007ac4 <_printf_common>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	4616      	mov	r6, r2
 8007aca:	4699      	mov	r9, r3
 8007acc:	688a      	ldr	r2, [r1, #8]
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bfb8      	it	lt
 8007ad8:	4613      	movlt	r3, r2
 8007ada:	6033      	str	r3, [r6, #0]
 8007adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b10a      	cbz	r2, 8007aea <_printf_common+0x26>
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6033      	str	r3, [r6, #0]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	0699      	lsls	r1, r3, #26
 8007aee:	bf42      	ittt	mi
 8007af0:	6833      	ldrmi	r3, [r6, #0]
 8007af2:	3302      	addmi	r3, #2
 8007af4:	6033      	strmi	r3, [r6, #0]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	f015 0506 	ands.w	r5, r5, #6
 8007afc:	d106      	bne.n	8007b0c <_printf_common+0x48>
 8007afe:	f104 0a19 	add.w	sl, r4, #25
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dc26      	bgt.n	8007b5a <_printf_common+0x96>
 8007b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b10:	1e13      	subs	r3, r2, #0
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	bf18      	it	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	0692      	lsls	r2, r2, #26
 8007b1a:	d42b      	bmi.n	8007b74 <_printf_common+0xb0>
 8007b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b20:	4649      	mov	r1, r9
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c0      	blx	r8
 8007b26:	3001      	adds	r0, #1
 8007b28:	d01e      	beq.n	8007b68 <_printf_common+0xa4>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	68e5      	ldr	r5, [r4, #12]
 8007b2e:	6832      	ldr	r2, [r6, #0]
 8007b30:	f003 0306 	and.w	r3, r3, #6
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	bf08      	it	eq
 8007b38:	1aad      	subeq	r5, r5, r2
 8007b3a:	68a3      	ldr	r3, [r4, #8]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	bf0c      	ite	eq
 8007b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b44:	2500      	movne	r5, #0
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bfc4      	itt	gt
 8007b4a:	1a9b      	subgt	r3, r3, r2
 8007b4c:	18ed      	addgt	r5, r5, r3
 8007b4e:	2600      	movs	r6, #0
 8007b50:	341a      	adds	r4, #26
 8007b52:	42b5      	cmp	r5, r6
 8007b54:	d11a      	bne.n	8007b8c <_printf_common+0xc8>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e008      	b.n	8007b6c <_printf_common+0xa8>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4638      	mov	r0, r7
 8007b62:	47c0      	blx	r8
 8007b64:	3001      	adds	r0, #1
 8007b66:	d103      	bne.n	8007b70 <_printf_common+0xac>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	3501      	adds	r5, #1
 8007b72:	e7c6      	b.n	8007b02 <_printf_common+0x3e>
 8007b74:	18e1      	adds	r1, r4, r3
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	2030      	movs	r0, #48	; 0x30
 8007b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b7e:	4422      	add	r2, r4
 8007b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b88:	3302      	adds	r3, #2
 8007b8a:	e7c7      	b.n	8007b1c <_printf_common+0x58>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4622      	mov	r2, r4
 8007b90:	4649      	mov	r1, r9
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c0      	blx	r8
 8007b96:	3001      	adds	r0, #1
 8007b98:	d0e6      	beq.n	8007b68 <_printf_common+0xa4>
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	e7d9      	b.n	8007b52 <_printf_common+0x8e>
	...

08007ba0 <_printf_i>:
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	7e0f      	ldrb	r7, [r1, #24]
 8007ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ba8:	2f78      	cmp	r7, #120	; 0x78
 8007baa:	4691      	mov	r9, r2
 8007bac:	4680      	mov	r8, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	469a      	mov	sl, r3
 8007bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bb6:	d807      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bb8:	2f62      	cmp	r7, #98	; 0x62
 8007bba:	d80a      	bhi.n	8007bd2 <_printf_i+0x32>
 8007bbc:	2f00      	cmp	r7, #0
 8007bbe:	f000 80d8 	beq.w	8007d72 <_printf_i+0x1d2>
 8007bc2:	2f58      	cmp	r7, #88	; 0x58
 8007bc4:	f000 80a3 	beq.w	8007d0e <_printf_i+0x16e>
 8007bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bd0:	e03a      	b.n	8007c48 <_printf_i+0xa8>
 8007bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bd6:	2b15      	cmp	r3, #21
 8007bd8:	d8f6      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bda:	a101      	add	r1, pc, #4	; (adr r1, 8007be0 <_printf_i+0x40>)
 8007bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007bc9 	.word	0x08007bc9
 8007bec:	08007bc9 	.word	0x08007bc9
 8007bf0:	08007bc9 	.word	0x08007bc9
 8007bf4:	08007bc9 	.word	0x08007bc9
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007bc9 	.word	0x08007bc9
 8007c00:	08007bc9 	.word	0x08007bc9
 8007c04:	08007bc9 	.word	0x08007bc9
 8007c08:	08007bc9 	.word	0x08007bc9
 8007c0c:	08007d59 	.word	0x08007d59
 8007c10:	08007c7d 	.word	0x08007c7d
 8007c14:	08007d3b 	.word	0x08007d3b
 8007c18:	08007bc9 	.word	0x08007bc9
 8007c1c:	08007bc9 	.word	0x08007bc9
 8007c20:	08007d7b 	.word	0x08007d7b
 8007c24:	08007bc9 	.word	0x08007bc9
 8007c28:	08007c7d 	.word	0x08007c7d
 8007c2c:	08007bc9 	.word	0x08007bc9
 8007c30:	08007bc9 	.word	0x08007bc9
 8007c34:	08007d43 	.word	0x08007d43
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	1d1a      	adds	r2, r3, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	602a      	str	r2, [r5, #0]
 8007c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0a3      	b.n	8007d94 <_printf_i+0x1f4>
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	6829      	ldr	r1, [r5, #0]
 8007c50:	0606      	lsls	r6, r0, #24
 8007c52:	f101 0304 	add.w	r3, r1, #4
 8007c56:	d50a      	bpl.n	8007c6e <_printf_i+0xce>
 8007c58:	680e      	ldr	r6, [r1, #0]
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	da03      	bge.n	8007c68 <_printf_i+0xc8>
 8007c60:	232d      	movs	r3, #45	; 0x2d
 8007c62:	4276      	negs	r6, r6
 8007c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c68:	485e      	ldr	r0, [pc, #376]	; (8007de4 <_printf_i+0x244>)
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	e019      	b.n	8007ca2 <_printf_i+0x102>
 8007c6e:	680e      	ldr	r6, [r1, #0]
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c76:	bf18      	it	ne
 8007c78:	b236      	sxthne	r6, r6
 8007c7a:	e7ef      	b.n	8007c5c <_printf_i+0xbc>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	1d19      	adds	r1, r3, #4
 8007c82:	6029      	str	r1, [r5, #0]
 8007c84:	0601      	lsls	r1, r0, #24
 8007c86:	d501      	bpl.n	8007c8c <_printf_i+0xec>
 8007c88:	681e      	ldr	r6, [r3, #0]
 8007c8a:	e002      	b.n	8007c92 <_printf_i+0xf2>
 8007c8c:	0646      	lsls	r6, r0, #25
 8007c8e:	d5fb      	bpl.n	8007c88 <_printf_i+0xe8>
 8007c90:	881e      	ldrh	r6, [r3, #0]
 8007c92:	4854      	ldr	r0, [pc, #336]	; (8007de4 <_printf_i+0x244>)
 8007c94:	2f6f      	cmp	r7, #111	; 0x6f
 8007c96:	bf0c      	ite	eq
 8007c98:	2308      	moveq	r3, #8
 8007c9a:	230a      	movne	r3, #10
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ca2:	6865      	ldr	r5, [r4, #4]
 8007ca4:	60a5      	str	r5, [r4, #8]
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	bfa2      	ittt	ge
 8007caa:	6821      	ldrge	r1, [r4, #0]
 8007cac:	f021 0104 	bicge.w	r1, r1, #4
 8007cb0:	6021      	strge	r1, [r4, #0]
 8007cb2:	b90e      	cbnz	r6, 8007cb8 <_printf_i+0x118>
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	d04d      	beq.n	8007d54 <_printf_i+0x1b4>
 8007cb8:	4615      	mov	r5, r2
 8007cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007cc2:	5dc7      	ldrb	r7, [r0, r7]
 8007cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cc8:	4637      	mov	r7, r6
 8007cca:	42bb      	cmp	r3, r7
 8007ccc:	460e      	mov	r6, r1
 8007cce:	d9f4      	bls.n	8007cba <_printf_i+0x11a>
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d10b      	bne.n	8007cec <_printf_i+0x14c>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07de      	lsls	r6, r3, #31
 8007cd8:	d508      	bpl.n	8007cec <_printf_i+0x14c>
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	6861      	ldr	r1, [r4, #4]
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	bfde      	ittt	le
 8007ce2:	2330      	movle	r3, #48	; 0x30
 8007ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cec:	1b52      	subs	r2, r2, r5
 8007cee:	6122      	str	r2, [r4, #16]
 8007cf0:	f8cd a000 	str.w	sl, [sp]
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	aa03      	add	r2, sp, #12
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	f7ff fee2 	bl	8007ac4 <_printf_common>
 8007d00:	3001      	adds	r0, #1
 8007d02:	d14c      	bne.n	8007d9e <_printf_i+0x1fe>
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	b004      	add	sp, #16
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	4835      	ldr	r0, [pc, #212]	; (8007de4 <_printf_i+0x244>)
 8007d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d14:	6829      	ldr	r1, [r5, #0]
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d1c:	6029      	str	r1, [r5, #0]
 8007d1e:	061d      	lsls	r5, r3, #24
 8007d20:	d514      	bpl.n	8007d4c <_printf_i+0x1ac>
 8007d22:	07df      	lsls	r7, r3, #31
 8007d24:	bf44      	itt	mi
 8007d26:	f043 0320 	orrmi.w	r3, r3, #32
 8007d2a:	6023      	strmi	r3, [r4, #0]
 8007d2c:	b91e      	cbnz	r6, 8007d36 <_printf_i+0x196>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	f023 0320 	bic.w	r3, r3, #32
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	2310      	movs	r3, #16
 8007d38:	e7b0      	b.n	8007c9c <_printf_i+0xfc>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	f043 0320 	orr.w	r3, r3, #32
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	2378      	movs	r3, #120	; 0x78
 8007d44:	4828      	ldr	r0, [pc, #160]	; (8007de8 <_printf_i+0x248>)
 8007d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d4a:	e7e3      	b.n	8007d14 <_printf_i+0x174>
 8007d4c:	0659      	lsls	r1, r3, #25
 8007d4e:	bf48      	it	mi
 8007d50:	b2b6      	uxthmi	r6, r6
 8007d52:	e7e6      	b.n	8007d22 <_printf_i+0x182>
 8007d54:	4615      	mov	r5, r2
 8007d56:	e7bb      	b.n	8007cd0 <_printf_i+0x130>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	6826      	ldr	r6, [r4, #0]
 8007d5c:	6961      	ldr	r1, [r4, #20]
 8007d5e:	1d18      	adds	r0, r3, #4
 8007d60:	6028      	str	r0, [r5, #0]
 8007d62:	0635      	lsls	r5, r6, #24
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	d501      	bpl.n	8007d6c <_printf_i+0x1cc>
 8007d68:	6019      	str	r1, [r3, #0]
 8007d6a:	e002      	b.n	8007d72 <_printf_i+0x1d2>
 8007d6c:	0670      	lsls	r0, r6, #25
 8007d6e:	d5fb      	bpl.n	8007d68 <_printf_i+0x1c8>
 8007d70:	8019      	strh	r1, [r3, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	6123      	str	r3, [r4, #16]
 8007d76:	4615      	mov	r5, r2
 8007d78:	e7ba      	b.n	8007cf0 <_printf_i+0x150>
 8007d7a:	682b      	ldr	r3, [r5, #0]
 8007d7c:	1d1a      	adds	r2, r3, #4
 8007d7e:	602a      	str	r2, [r5, #0]
 8007d80:	681d      	ldr	r5, [r3, #0]
 8007d82:	6862      	ldr	r2, [r4, #4]
 8007d84:	2100      	movs	r1, #0
 8007d86:	4628      	mov	r0, r5
 8007d88:	f7f8 fab2 	bl	80002f0 <memchr>
 8007d8c:	b108      	cbz	r0, 8007d92 <_printf_i+0x1f2>
 8007d8e:	1b40      	subs	r0, r0, r5
 8007d90:	6060      	str	r0, [r4, #4]
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	2300      	movs	r3, #0
 8007d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9c:	e7a8      	b.n	8007cf0 <_printf_i+0x150>
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	462a      	mov	r2, r5
 8007da2:	4649      	mov	r1, r9
 8007da4:	4640      	mov	r0, r8
 8007da6:	47d0      	blx	sl
 8007da8:	3001      	adds	r0, #1
 8007daa:	d0ab      	beq.n	8007d04 <_printf_i+0x164>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	079b      	lsls	r3, r3, #30
 8007db0:	d413      	bmi.n	8007dda <_printf_i+0x23a>
 8007db2:	68e0      	ldr	r0, [r4, #12]
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	4298      	cmp	r0, r3
 8007db8:	bfb8      	it	lt
 8007dba:	4618      	movlt	r0, r3
 8007dbc:	e7a4      	b.n	8007d08 <_printf_i+0x168>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	47d0      	blx	sl
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d09b      	beq.n	8007d04 <_printf_i+0x164>
 8007dcc:	3501      	adds	r5, #1
 8007dce:	68e3      	ldr	r3, [r4, #12]
 8007dd0:	9903      	ldr	r1, [sp, #12]
 8007dd2:	1a5b      	subs	r3, r3, r1
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dcf2      	bgt.n	8007dbe <_printf_i+0x21e>
 8007dd8:	e7eb      	b.n	8007db2 <_printf_i+0x212>
 8007dda:	2500      	movs	r5, #0
 8007ddc:	f104 0619 	add.w	r6, r4, #25
 8007de0:	e7f5      	b.n	8007dce <_printf_i+0x22e>
 8007de2:	bf00      	nop
 8007de4:	0800a7c6 	.word	0x0800a7c6
 8007de8:	0800a7d7 	.word	0x0800a7d7

08007dec <iprintf>:
 8007dec:	b40f      	push	{r0, r1, r2, r3}
 8007dee:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <iprintf+0x2c>)
 8007df0:	b513      	push	{r0, r1, r4, lr}
 8007df2:	681c      	ldr	r4, [r3, #0]
 8007df4:	b124      	cbz	r4, 8007e00 <iprintf+0x14>
 8007df6:	69a3      	ldr	r3, [r4, #24]
 8007df8:	b913      	cbnz	r3, 8007e00 <iprintf+0x14>
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fe82 	bl	8008b04 <__sinit>
 8007e00:	ab05      	add	r3, sp, #20
 8007e02:	9a04      	ldr	r2, [sp, #16]
 8007e04:	68a1      	ldr	r1, [r4, #8]
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 fd29 	bl	8009860 <_vfiprintf_r>
 8007e0e:	b002      	add	sp, #8
 8007e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e14:	b004      	add	sp, #16
 8007e16:	4770      	bx	lr
 8007e18:	24000018 	.word	0x24000018

08007e1c <siprintf>:
 8007e1c:	b40e      	push	{r1, r2, r3}
 8007e1e:	b500      	push	{lr}
 8007e20:	b09c      	sub	sp, #112	; 0x70
 8007e22:	ab1d      	add	r3, sp, #116	; 0x74
 8007e24:	9002      	str	r0, [sp, #8]
 8007e26:	9006      	str	r0, [sp, #24]
 8007e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e2c:	4809      	ldr	r0, [pc, #36]	; (8007e54 <siprintf+0x38>)
 8007e2e:	9107      	str	r1, [sp, #28]
 8007e30:	9104      	str	r1, [sp, #16]
 8007e32:	4909      	ldr	r1, [pc, #36]	; (8007e58 <siprintf+0x3c>)
 8007e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e38:	9105      	str	r1, [sp, #20]
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	a902      	add	r1, sp, #8
 8007e40:	f001 fbe4 	bl	800960c <_svfiprintf_r>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	2200      	movs	r2, #0
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	b01c      	add	sp, #112	; 0x70
 8007e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e50:	b003      	add	sp, #12
 8007e52:	4770      	bx	lr
 8007e54:	24000018 	.word	0x24000018
 8007e58:	ffff0208 	.word	0xffff0208

08007e5c <quorem>:
 8007e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	6903      	ldr	r3, [r0, #16]
 8007e62:	690c      	ldr	r4, [r1, #16]
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	4607      	mov	r7, r0
 8007e68:	f2c0 8081 	blt.w	8007f6e <quorem+0x112>
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	f101 0814 	add.w	r8, r1, #20
 8007e72:	f100 0514 	add.w	r5, r0, #20
 8007e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e84:	3301      	adds	r3, #1
 8007e86:	429a      	cmp	r2, r3
 8007e88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e94:	d331      	bcc.n	8007efa <quorem+0x9e>
 8007e96:	f04f 0e00 	mov.w	lr, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	46ac      	mov	ip, r5
 8007e9e:	46f2      	mov	sl, lr
 8007ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ea4:	b293      	uxth	r3, r2
 8007ea6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb4:	f8dc a000 	ldr.w	sl, [ip]
 8007eb8:	0c12      	lsrs	r2, r2, #16
 8007eba:	fa13 f38a 	uxtah	r3, r3, sl
 8007ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	9b00      	ldr	r3, [sp, #0]
 8007ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ed4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ed8:	4581      	cmp	r9, r0
 8007eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ede:	f84c 3b04 	str.w	r3, [ip], #4
 8007ee2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ee6:	d2db      	bcs.n	8007ea0 <quorem+0x44>
 8007ee8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eec:	b92b      	cbnz	r3, 8007efa <quorem+0x9e>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	429d      	cmp	r5, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	d32e      	bcc.n	8007f56 <quorem+0xfa>
 8007ef8:	613c      	str	r4, [r7, #16]
 8007efa:	4638      	mov	r0, r7
 8007efc:	f001 f932 	bl	8009164 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	db24      	blt.n	8007f4e <quorem+0xf2>
 8007f04:	3601      	adds	r6, #1
 8007f06:	4628      	mov	r0, r5
 8007f08:	f04f 0c00 	mov.w	ip, #0
 8007f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f10:	f8d0 e000 	ldr.w	lr, [r0]
 8007f14:	b293      	uxth	r3, r2
 8007f16:	ebac 0303 	sub.w	r3, ip, r3
 8007f1a:	0c12      	lsrs	r2, r2, #16
 8007f1c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f2e:	45c1      	cmp	r9, r8
 8007f30:	f840 3b04 	str.w	r3, [r0], #4
 8007f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f38:	d2e8      	bcs.n	8007f0c <quorem+0xb0>
 8007f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f42:	b922      	cbnz	r2, 8007f4e <quorem+0xf2>
 8007f44:	3b04      	subs	r3, #4
 8007f46:	429d      	cmp	r5, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	d30a      	bcc.n	8007f62 <quorem+0x106>
 8007f4c:	613c      	str	r4, [r7, #16]
 8007f4e:	4630      	mov	r0, r6
 8007f50:	b003      	add	sp, #12
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d1cc      	bne.n	8007ef8 <quorem+0x9c>
 8007f5e:	3c01      	subs	r4, #1
 8007f60:	e7c7      	b.n	8007ef2 <quorem+0x96>
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1f0      	bne.n	8007f4c <quorem+0xf0>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7eb      	b.n	8007f46 <quorem+0xea>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e7ee      	b.n	8007f50 <quorem+0xf4>
 8007f72:	0000      	movs	r0, r0
 8007f74:	0000      	movs	r0, r0
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b02 	vpush	{d8}
 8007f80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f82:	b091      	sub	sp, #68	; 0x44
 8007f84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f88:	ec59 8b10 	vmov	r8, r9, d0
 8007f8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007f8e:	9106      	str	r1, [sp, #24]
 8007f90:	4606      	mov	r6, r0
 8007f92:	9208      	str	r2, [sp, #32]
 8007f94:	930c      	str	r3, [sp, #48]	; 0x30
 8007f96:	b975      	cbnz	r5, 8007fb6 <_dtoa_r+0x3e>
 8007f98:	2010      	movs	r0, #16
 8007f9a:	f000 fe59 	bl	8008c50 <malloc>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fa2:	b920      	cbnz	r0, 8007fae <_dtoa_r+0x36>
 8007fa4:	4baa      	ldr	r3, [pc, #680]	; (8008250 <_dtoa_r+0x2d8>)
 8007fa6:	21ea      	movs	r1, #234	; 0xea
 8007fa8:	48aa      	ldr	r0, [pc, #680]	; (8008254 <_dtoa_r+0x2dc>)
 8007faa:	f001 feaf 	bl	8009d0c <__assert_func>
 8007fae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb2:	6005      	str	r5, [r0, #0]
 8007fb4:	60c5      	str	r5, [r0, #12]
 8007fb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	b151      	cbz	r1, 8007fd2 <_dtoa_r+0x5a>
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	604a      	str	r2, [r1, #4]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4093      	lsls	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 fe8a 	bl	8008ce0 <_Bfree>
 8007fcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f1b9 0300 	subs.w	r3, r9, #0
 8007fd6:	bfbb      	ittet	lt
 8007fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	9303      	strlt	r3, [sp, #12]
 8007fde:	2300      	movge	r3, #0
 8007fe0:	2201      	movlt	r2, #1
 8007fe2:	bfac      	ite	ge
 8007fe4:	6023      	strge	r3, [r4, #0]
 8007fe6:	6022      	strlt	r2, [r4, #0]
 8007fe8:	4b9b      	ldr	r3, [pc, #620]	; (8008258 <_dtoa_r+0x2e0>)
 8007fea:	9c03      	ldr	r4, [sp, #12]
 8007fec:	43a3      	bics	r3, r4
 8007fee:	d11c      	bne.n	800802a <_dtoa_r+0xb2>
 8007ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ffc:	ea53 0308 	orrs.w	r3, r3, r8
 8008000:	f000 84fd 	beq.w	80089fe <_dtoa_r+0xa86>
 8008004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008006:	b963      	cbnz	r3, 8008022 <_dtoa_r+0xaa>
 8008008:	4b94      	ldr	r3, [pc, #592]	; (800825c <_dtoa_r+0x2e4>)
 800800a:	e01f      	b.n	800804c <_dtoa_r+0xd4>
 800800c:	4b94      	ldr	r3, [pc, #592]	; (8008260 <_dtoa_r+0x2e8>)
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	3308      	adds	r3, #8
 8008012:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	9801      	ldr	r0, [sp, #4]
 8008018:	b011      	add	sp, #68	; 0x44
 800801a:	ecbd 8b02 	vpop	{d8}
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4b8e      	ldr	r3, [pc, #568]	; (800825c <_dtoa_r+0x2e4>)
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	3303      	adds	r3, #3
 8008028:	e7f3      	b.n	8008012 <_dtoa_r+0x9a>
 800802a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800802e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008036:	d10b      	bne.n	8008050 <_dtoa_r+0xd8>
 8008038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800803a:	2301      	movs	r3, #1
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 84d9 	beq.w	80089f8 <_dtoa_r+0xa80>
 8008046:	4887      	ldr	r0, [pc, #540]	; (8008264 <_dtoa_r+0x2ec>)
 8008048:	6018      	str	r0, [r3, #0]
 800804a:	1e43      	subs	r3, r0, #1
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	e7e2      	b.n	8008016 <_dtoa_r+0x9e>
 8008050:	a90f      	add	r1, sp, #60	; 0x3c
 8008052:	aa0e      	add	r2, sp, #56	; 0x38
 8008054:	4630      	mov	r0, r6
 8008056:	eeb0 0b48 	vmov.f64	d0, d8
 800805a:	f001 f929 	bl	80092b0 <__d2b>
 800805e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008062:	4605      	mov	r5, r0
 8008064:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008066:	2900      	cmp	r1, #0
 8008068:	d046      	beq.n	80080f8 <_dtoa_r+0x180>
 800806a:	ee18 4a90 	vmov	r4, s17
 800806e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008072:	ec53 2b18 	vmov	r2, r3, d8
 8008076:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800807a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800807e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008082:	2400      	movs	r4, #0
 8008084:	ec43 2b16 	vmov	d6, r2, r3
 8008088:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800808c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008238 <_dtoa_r+0x2c0>
 8008090:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008094:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008240 <_dtoa_r+0x2c8>
 8008098:	eea7 6b05 	vfma.f64	d6, d7, d5
 800809c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008248 <_dtoa_r+0x2d0>
 80080a0:	ee07 1a90 	vmov	s15, r1
 80080a4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80080a8:	eeb0 7b46 	vmov.f64	d7, d6
 80080ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 80080b0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80080b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80080b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080bc:	ee16 ba90 	vmov	fp, s13
 80080c0:	940a      	str	r4, [sp, #40]	; 0x28
 80080c2:	d508      	bpl.n	80080d6 <_dtoa_r+0x15e>
 80080c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80080c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	bf18      	it	ne
 80080d2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80080d6:	f1bb 0f16 	cmp.w	fp, #22
 80080da:	d82f      	bhi.n	800813c <_dtoa_r+0x1c4>
 80080dc:	4b62      	ldr	r3, [pc, #392]	; (8008268 <_dtoa_r+0x2f0>)
 80080de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080e2:	ed93 7b00 	vldr	d7, [r3]
 80080e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ee:	d501      	bpl.n	80080f4 <_dtoa_r+0x17c>
 80080f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080f4:	2300      	movs	r3, #0
 80080f6:	e022      	b.n	800813e <_dtoa_r+0x1c6>
 80080f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080fa:	4401      	add	r1, r0
 80080fc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008100:	2b20      	cmp	r3, #32
 8008102:	bfc1      	itttt	gt
 8008104:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008108:	fa04 f303 	lslgt.w	r3, r4, r3
 800810c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008110:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008114:	bfd6      	itet	le
 8008116:	f1c3 0320 	rsble	r3, r3, #32
 800811a:	ea43 0808 	orrgt.w	r8, r3, r8
 800811e:	fa08 f803 	lslle.w	r8, r8, r3
 8008122:	ee07 8a90 	vmov	s15, r8
 8008126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800812a:	3901      	subs	r1, #1
 800812c:	ee17 4a90 	vmov	r4, s15
 8008130:	ec53 2b17 	vmov	r2, r3, d7
 8008134:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008138:	2401      	movs	r4, #1
 800813a:	e7a3      	b.n	8008084 <_dtoa_r+0x10c>
 800813c:	2301      	movs	r3, #1
 800813e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008140:	1a43      	subs	r3, r0, r1
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	bf45      	ittet	mi
 8008146:	f1c3 0301 	rsbmi	r3, r3, #1
 800814a:	9304      	strmi	r3, [sp, #16]
 800814c:	2300      	movpl	r3, #0
 800814e:	2300      	movmi	r3, #0
 8008150:	9205      	str	r2, [sp, #20]
 8008152:	bf54      	ite	pl
 8008154:	9304      	strpl	r3, [sp, #16]
 8008156:	9305      	strmi	r3, [sp, #20]
 8008158:	f1bb 0f00 	cmp.w	fp, #0
 800815c:	db18      	blt.n	8008190 <_dtoa_r+0x218>
 800815e:	9b05      	ldr	r3, [sp, #20]
 8008160:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008164:	445b      	add	r3, fp
 8008166:	9305      	str	r3, [sp, #20]
 8008168:	2300      	movs	r3, #0
 800816a:	9a06      	ldr	r2, [sp, #24]
 800816c:	2a09      	cmp	r2, #9
 800816e:	d849      	bhi.n	8008204 <_dtoa_r+0x28c>
 8008170:	2a05      	cmp	r2, #5
 8008172:	bfc4      	itt	gt
 8008174:	3a04      	subgt	r2, #4
 8008176:	9206      	strgt	r2, [sp, #24]
 8008178:	9a06      	ldr	r2, [sp, #24]
 800817a:	f1a2 0202 	sub.w	r2, r2, #2
 800817e:	bfcc      	ite	gt
 8008180:	2400      	movgt	r4, #0
 8008182:	2401      	movle	r4, #1
 8008184:	2a03      	cmp	r2, #3
 8008186:	d848      	bhi.n	800821a <_dtoa_r+0x2a2>
 8008188:	e8df f002 	tbb	[pc, r2]
 800818c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	eba3 030b 	sub.w	r3, r3, fp
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	9209      	str	r2, [sp, #36]	; 0x24
 800819c:	f1cb 0300 	rsb	r3, fp, #0
 80081a0:	e7e3      	b.n	800816a <_dtoa_r+0x1f2>
 80081a2:	2200      	movs	r2, #0
 80081a4:	9207      	str	r2, [sp, #28]
 80081a6:	9a08      	ldr	r2, [sp, #32]
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	dc39      	bgt.n	8008220 <_dtoa_r+0x2a8>
 80081ac:	f04f 0a01 	mov.w	sl, #1
 80081b0:	46d1      	mov	r9, sl
 80081b2:	4652      	mov	r2, sl
 80081b4:	f8cd a020 	str.w	sl, [sp, #32]
 80081b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80081ba:	2100      	movs	r1, #0
 80081bc:	6079      	str	r1, [r7, #4]
 80081be:	2004      	movs	r0, #4
 80081c0:	f100 0c14 	add.w	ip, r0, #20
 80081c4:	4594      	cmp	ip, r2
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	d92f      	bls.n	800822a <_dtoa_r+0x2b2>
 80081ca:	4630      	mov	r0, r6
 80081cc:	930d      	str	r3, [sp, #52]	; 0x34
 80081ce:	f000 fd47 	bl	8008c60 <_Balloc>
 80081d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d4:	9001      	str	r0, [sp, #4]
 80081d6:	4602      	mov	r2, r0
 80081d8:	2800      	cmp	r0, #0
 80081da:	d149      	bne.n	8008270 <_dtoa_r+0x2f8>
 80081dc:	4b23      	ldr	r3, [pc, #140]	; (800826c <_dtoa_r+0x2f4>)
 80081de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081e2:	e6e1      	b.n	8007fa8 <_dtoa_r+0x30>
 80081e4:	2201      	movs	r2, #1
 80081e6:	e7dd      	b.n	80081a4 <_dtoa_r+0x22c>
 80081e8:	2200      	movs	r2, #0
 80081ea:	9207      	str	r2, [sp, #28]
 80081ec:	9a08      	ldr	r2, [sp, #32]
 80081ee:	eb0b 0a02 	add.w	sl, fp, r2
 80081f2:	f10a 0901 	add.w	r9, sl, #1
 80081f6:	464a      	mov	r2, r9
 80081f8:	2a01      	cmp	r2, #1
 80081fa:	bfb8      	it	lt
 80081fc:	2201      	movlt	r2, #1
 80081fe:	e7db      	b.n	80081b8 <_dtoa_r+0x240>
 8008200:	2201      	movs	r2, #1
 8008202:	e7f2      	b.n	80081ea <_dtoa_r+0x272>
 8008204:	2401      	movs	r4, #1
 8008206:	2200      	movs	r2, #0
 8008208:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800820c:	f04f 3aff 	mov.w	sl, #4294967295
 8008210:	2100      	movs	r1, #0
 8008212:	46d1      	mov	r9, sl
 8008214:	2212      	movs	r2, #18
 8008216:	9108      	str	r1, [sp, #32]
 8008218:	e7ce      	b.n	80081b8 <_dtoa_r+0x240>
 800821a:	2201      	movs	r2, #1
 800821c:	9207      	str	r2, [sp, #28]
 800821e:	e7f5      	b.n	800820c <_dtoa_r+0x294>
 8008220:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008224:	46d1      	mov	r9, sl
 8008226:	4652      	mov	r2, sl
 8008228:	e7c6      	b.n	80081b8 <_dtoa_r+0x240>
 800822a:	3101      	adds	r1, #1
 800822c:	6079      	str	r1, [r7, #4]
 800822e:	0040      	lsls	r0, r0, #1
 8008230:	e7c6      	b.n	80081c0 <_dtoa_r+0x248>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	0800a7f5 	.word	0x0800a7f5
 8008254:	0800a80c 	.word	0x0800a80c
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800a7f1 	.word	0x0800a7f1
 8008260:	0800a7e8 	.word	0x0800a7e8
 8008264:	0800a7c5 	.word	0x0800a7c5
 8008268:	0800a960 	.word	0x0800a960
 800826c:	0800a867 	.word	0x0800a867
 8008270:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008272:	9901      	ldr	r1, [sp, #4]
 8008274:	6011      	str	r1, [r2, #0]
 8008276:	f1b9 0f0e 	cmp.w	r9, #14
 800827a:	d86c      	bhi.n	8008356 <_dtoa_r+0x3de>
 800827c:	2c00      	cmp	r4, #0
 800827e:	d06a      	beq.n	8008356 <_dtoa_r+0x3de>
 8008280:	f1bb 0f00 	cmp.w	fp, #0
 8008284:	f340 80a0 	ble.w	80083c8 <_dtoa_r+0x450>
 8008288:	49c1      	ldr	r1, [pc, #772]	; (8008590 <_dtoa_r+0x618>)
 800828a:	f00b 020f 	and.w	r2, fp, #15
 800828e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008292:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008296:	ed92 7b00 	vldr	d7, [r2]
 800829a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800829e:	f000 8087 	beq.w	80083b0 <_dtoa_r+0x438>
 80082a2:	4abc      	ldr	r2, [pc, #752]	; (8008594 <_dtoa_r+0x61c>)
 80082a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80082a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80082ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80082b0:	f001 010f 	and.w	r1, r1, #15
 80082b4:	2203      	movs	r2, #3
 80082b6:	48b7      	ldr	r0, [pc, #732]	; (8008594 <_dtoa_r+0x61c>)
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d17b      	bne.n	80083b4 <_dtoa_r+0x43c>
 80082bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ca:	2900      	cmp	r1, #0
 80082cc:	f000 80a2 	beq.w	8008414 <_dtoa_r+0x49c>
 80082d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80082d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e0:	f140 8098 	bpl.w	8008414 <_dtoa_r+0x49c>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	f000 8094 	beq.w	8008414 <_dtoa_r+0x49c>
 80082ec:	f1ba 0f00 	cmp.w	sl, #0
 80082f0:	dd2f      	ble.n	8008352 <_dtoa_r+0x3da>
 80082f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80082f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082fe:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008302:	3201      	adds	r2, #1
 8008304:	4650      	mov	r0, sl
 8008306:	ed9d 6b02 	vldr	d6, [sp, #8]
 800830a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800830e:	ee07 2a90 	vmov	s15, r2
 8008312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008316:	eea7 5b06 	vfma.f64	d5, d7, d6
 800831a:	ee15 4a90 	vmov	r4, s11
 800831e:	ec52 1b15 	vmov	r1, r2, d5
 8008322:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008326:	2800      	cmp	r0, #0
 8008328:	d177      	bne.n	800841a <_dtoa_r+0x4a2>
 800832a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800832e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008332:	ec42 1b17 	vmov	d7, r1, r2
 8008336:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800833a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833e:	f300 8263 	bgt.w	8008808 <_dtoa_r+0x890>
 8008342:	eeb1 7b47 	vneg.f64	d7, d7
 8008346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	f100 8258 	bmi.w	8008802 <_dtoa_r+0x88a>
 8008352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008358:	2a00      	cmp	r2, #0
 800835a:	f2c0 811d 	blt.w	8008598 <_dtoa_r+0x620>
 800835e:	f1bb 0f0e 	cmp.w	fp, #14
 8008362:	f300 8119 	bgt.w	8008598 <_dtoa_r+0x620>
 8008366:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <_dtoa_r+0x618>)
 8008368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800836c:	ed93 6b00 	vldr	d6, [r3]
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f280 80b7 	bge.w	80084e6 <_dtoa_r+0x56e>
 8008378:	f1b9 0f00 	cmp.w	r9, #0
 800837c:	f300 80b3 	bgt.w	80084e6 <_dtoa_r+0x56e>
 8008380:	f040 823f 	bne.w	8008802 <_dtoa_r+0x88a>
 8008384:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008388:	ee26 6b07 	vmul.f64	d6, d6, d7
 800838c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008390:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008398:	464c      	mov	r4, r9
 800839a:	464f      	mov	r7, r9
 800839c:	f280 8215 	bge.w	80087ca <_dtoa_r+0x852>
 80083a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083a4:	2331      	movs	r3, #49	; 0x31
 80083a6:	f808 3b01 	strb.w	r3, [r8], #1
 80083aa:	f10b 0b01 	add.w	fp, fp, #1
 80083ae:	e211      	b.n	80087d4 <_dtoa_r+0x85c>
 80083b0:	2202      	movs	r2, #2
 80083b2:	e780      	b.n	80082b6 <_dtoa_r+0x33e>
 80083b4:	07cc      	lsls	r4, r1, #31
 80083b6:	d504      	bpl.n	80083c2 <_dtoa_r+0x44a>
 80083b8:	ed90 6b00 	vldr	d6, [r0]
 80083bc:	3201      	adds	r2, #1
 80083be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083c2:	1049      	asrs	r1, r1, #1
 80083c4:	3008      	adds	r0, #8
 80083c6:	e777      	b.n	80082b8 <_dtoa_r+0x340>
 80083c8:	d022      	beq.n	8008410 <_dtoa_r+0x498>
 80083ca:	f1cb 0100 	rsb	r1, fp, #0
 80083ce:	4a70      	ldr	r2, [pc, #448]	; (8008590 <_dtoa_r+0x618>)
 80083d0:	f001 000f 	and.w	r0, r1, #15
 80083d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80083d8:	ed92 7b00 	vldr	d7, [r2]
 80083dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80083e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083e4:	486b      	ldr	r0, [pc, #428]	; (8008594 <_dtoa_r+0x61c>)
 80083e6:	1109      	asrs	r1, r1, #4
 80083e8:	2400      	movs	r4, #0
 80083ea:	2202      	movs	r2, #2
 80083ec:	b929      	cbnz	r1, 80083fa <_dtoa_r+0x482>
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	f43f af6a 	beq.w	80082c8 <_dtoa_r+0x350>
 80083f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083f8:	e766      	b.n	80082c8 <_dtoa_r+0x350>
 80083fa:	07cf      	lsls	r7, r1, #31
 80083fc:	d505      	bpl.n	800840a <_dtoa_r+0x492>
 80083fe:	ed90 6b00 	vldr	d6, [r0]
 8008402:	3201      	adds	r2, #1
 8008404:	2401      	movs	r4, #1
 8008406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800840a:	1049      	asrs	r1, r1, #1
 800840c:	3008      	adds	r0, #8
 800840e:	e7ed      	b.n	80083ec <_dtoa_r+0x474>
 8008410:	2202      	movs	r2, #2
 8008412:	e759      	b.n	80082c8 <_dtoa_r+0x350>
 8008414:	465f      	mov	r7, fp
 8008416:	4648      	mov	r0, r9
 8008418:	e775      	b.n	8008306 <_dtoa_r+0x38e>
 800841a:	ec42 1b17 	vmov	d7, r1, r2
 800841e:	4a5c      	ldr	r2, [pc, #368]	; (8008590 <_dtoa_r+0x618>)
 8008420:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008424:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	1814      	adds	r4, r2, r0
 800842c:	9a07      	ldr	r2, [sp, #28]
 800842e:	b352      	cbz	r2, 8008486 <_dtoa_r+0x50e>
 8008430:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008434:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008438:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800843c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008440:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008444:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008448:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800844c:	ee14 2a90 	vmov	r2, s9
 8008450:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008454:	3230      	adds	r2, #48	; 0x30
 8008456:	ee36 6b45 	vsub.f64	d6, d6, d5
 800845a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	f808 2b01 	strb.w	r2, [r8], #1
 8008466:	d439      	bmi.n	80084dc <_dtoa_r+0x564>
 8008468:	ee32 5b46 	vsub.f64	d5, d2, d6
 800846c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008474:	d472      	bmi.n	800855c <_dtoa_r+0x5e4>
 8008476:	45a0      	cmp	r8, r4
 8008478:	f43f af6b 	beq.w	8008352 <_dtoa_r+0x3da>
 800847c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008480:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008484:	e7e0      	b.n	8008448 <_dtoa_r+0x4d0>
 8008486:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800848a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800848e:	4621      	mov	r1, r4
 8008490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008494:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008498:	ee14 2a90 	vmov	r2, s9
 800849c:	3230      	adds	r2, #48	; 0x30
 800849e:	f808 2b01 	strb.w	r2, [r8], #1
 80084a2:	45a0      	cmp	r8, r4
 80084a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084ac:	d118      	bne.n	80084e0 <_dtoa_r+0x568>
 80084ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80084b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80084b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80084ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084be:	dc4d      	bgt.n	800855c <_dtoa_r+0x5e4>
 80084c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80084c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	f57f af41 	bpl.w	8008352 <_dtoa_r+0x3da>
 80084d0:	4688      	mov	r8, r1
 80084d2:	3901      	subs	r1, #1
 80084d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80084d8:	2b30      	cmp	r3, #48	; 0x30
 80084da:	d0f9      	beq.n	80084d0 <_dtoa_r+0x558>
 80084dc:	46bb      	mov	fp, r7
 80084de:	e02a      	b.n	8008536 <_dtoa_r+0x5be>
 80084e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80084e4:	e7d6      	b.n	8008494 <_dtoa_r+0x51c>
 80084e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80084ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80084f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80084fa:	ee15 3a10 	vmov	r3, s10
 80084fe:	3330      	adds	r3, #48	; 0x30
 8008500:	f808 3b01 	strb.w	r3, [r8], #1
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	eba8 0303 	sub.w	r3, r8, r3
 800850a:	4599      	cmp	r9, r3
 800850c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008510:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008514:	d133      	bne.n	800857e <_dtoa_r+0x606>
 8008516:	ee37 7b07 	vadd.f64	d7, d7, d7
 800851a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	dc1a      	bgt.n	800855a <_dtoa_r+0x5e2>
 8008524:	eeb4 7b46 	vcmp.f64	d7, d6
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d103      	bne.n	8008536 <_dtoa_r+0x5be>
 800852e:	ee15 3a10 	vmov	r3, s10
 8008532:	07d9      	lsls	r1, r3, #31
 8008534:	d411      	bmi.n	800855a <_dtoa_r+0x5e2>
 8008536:	4629      	mov	r1, r5
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fbd1 	bl	8008ce0 <_Bfree>
 800853e:	2300      	movs	r3, #0
 8008540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008542:	f888 3000 	strb.w	r3, [r8]
 8008546:	f10b 0301 	add.w	r3, fp, #1
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800854e:	2b00      	cmp	r3, #0
 8008550:	f43f ad61 	beq.w	8008016 <_dtoa_r+0x9e>
 8008554:	f8c3 8000 	str.w	r8, [r3]
 8008558:	e55d      	b.n	8008016 <_dtoa_r+0x9e>
 800855a:	465f      	mov	r7, fp
 800855c:	4643      	mov	r3, r8
 800855e:	4698      	mov	r8, r3
 8008560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008564:	2a39      	cmp	r2, #57	; 0x39
 8008566:	d106      	bne.n	8008576 <_dtoa_r+0x5fe>
 8008568:	9a01      	ldr	r2, [sp, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d1f7      	bne.n	800855e <_dtoa_r+0x5e6>
 800856e:	9901      	ldr	r1, [sp, #4]
 8008570:	2230      	movs	r2, #48	; 0x30
 8008572:	3701      	adds	r7, #1
 8008574:	700a      	strb	r2, [r1, #0]
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	3201      	adds	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e7ae      	b.n	80084dc <_dtoa_r+0x564>
 800857e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008582:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	d1b2      	bne.n	80084f2 <_dtoa_r+0x57a>
 800858c:	e7d3      	b.n	8008536 <_dtoa_r+0x5be>
 800858e:	bf00      	nop
 8008590:	0800a960 	.word	0x0800a960
 8008594:	0800a938 	.word	0x0800a938
 8008598:	9907      	ldr	r1, [sp, #28]
 800859a:	2900      	cmp	r1, #0
 800859c:	f000 80d0 	beq.w	8008740 <_dtoa_r+0x7c8>
 80085a0:	9906      	ldr	r1, [sp, #24]
 80085a2:	2901      	cmp	r1, #1
 80085a4:	f300 80b4 	bgt.w	8008710 <_dtoa_r+0x798>
 80085a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085aa:	2900      	cmp	r1, #0
 80085ac:	f000 80ac 	beq.w	8008708 <_dtoa_r+0x790>
 80085b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085b8:	461c      	mov	r4, r3
 80085ba:	930a      	str	r3, [sp, #40]	; 0x28
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	9b05      	ldr	r3, [sp, #20]
 80085c4:	2101      	movs	r1, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	4630      	mov	r0, r6
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	f000 fc40 	bl	8008e50 <__i2b>
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	4607      	mov	r7, r0
 80085d4:	f1b8 0f00 	cmp.w	r8, #0
 80085d8:	dd0d      	ble.n	80085f6 <_dtoa_r+0x67e>
 80085da:	9a05      	ldr	r2, [sp, #20]
 80085dc:	2a00      	cmp	r2, #0
 80085de:	dd0a      	ble.n	80085f6 <_dtoa_r+0x67e>
 80085e0:	4542      	cmp	r2, r8
 80085e2:	9904      	ldr	r1, [sp, #16]
 80085e4:	bfa8      	it	ge
 80085e6:	4642      	movge	r2, r8
 80085e8:	1a89      	subs	r1, r1, r2
 80085ea:	9104      	str	r1, [sp, #16]
 80085ec:	9905      	ldr	r1, [sp, #20]
 80085ee:	eba8 0802 	sub.w	r8, r8, r2
 80085f2:	1a8a      	subs	r2, r1, r2
 80085f4:	9205      	str	r2, [sp, #20]
 80085f6:	b303      	cbz	r3, 800863a <_dtoa_r+0x6c2>
 80085f8:	9a07      	ldr	r2, [sp, #28]
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	f000 80a5 	beq.w	800874a <_dtoa_r+0x7d2>
 8008600:	2c00      	cmp	r4, #0
 8008602:	dd13      	ble.n	800862c <_dtoa_r+0x6b4>
 8008604:	4639      	mov	r1, r7
 8008606:	4622      	mov	r2, r4
 8008608:	4630      	mov	r0, r6
 800860a:	930d      	str	r3, [sp, #52]	; 0x34
 800860c:	f000 fce0 	bl	8008fd0 <__pow5mult>
 8008610:	462a      	mov	r2, r5
 8008612:	4601      	mov	r1, r0
 8008614:	4607      	mov	r7, r0
 8008616:	4630      	mov	r0, r6
 8008618:	f000 fc30 	bl	8008e7c <__multiply>
 800861c:	4629      	mov	r1, r5
 800861e:	900a      	str	r0, [sp, #40]	; 0x28
 8008620:	4630      	mov	r0, r6
 8008622:	f000 fb5d 	bl	8008ce0 <_Bfree>
 8008626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800862a:	4615      	mov	r5, r2
 800862c:	1b1a      	subs	r2, r3, r4
 800862e:	d004      	beq.n	800863a <_dtoa_r+0x6c2>
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 fccc 	bl	8008fd0 <__pow5mult>
 8008638:	4605      	mov	r5, r0
 800863a:	2101      	movs	r1, #1
 800863c:	4630      	mov	r0, r6
 800863e:	f000 fc07 	bl	8008e50 <__i2b>
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	f340 8081 	ble.w	800874e <_dtoa_r+0x7d6>
 800864c:	461a      	mov	r2, r3
 800864e:	4601      	mov	r1, r0
 8008650:	4630      	mov	r0, r6
 8008652:	f000 fcbd 	bl	8008fd0 <__pow5mult>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	2b01      	cmp	r3, #1
 800865a:	4604      	mov	r4, r0
 800865c:	dd7a      	ble.n	8008754 <_dtoa_r+0x7dc>
 800865e:	2300      	movs	r3, #0
 8008660:	930a      	str	r3, [sp, #40]	; 0x28
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008668:	6910      	ldr	r0, [r2, #16]
 800866a:	f000 fba1 	bl	8008db0 <__hi0bits>
 800866e:	f1c0 0020 	rsb	r0, r0, #32
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	4418      	add	r0, r3
 8008676:	f010 001f 	ands.w	r0, r0, #31
 800867a:	f000 808c 	beq.w	8008796 <_dtoa_r+0x81e>
 800867e:	f1c0 0220 	rsb	r2, r0, #32
 8008682:	2a04      	cmp	r2, #4
 8008684:	f340 8085 	ble.w	8008792 <_dtoa_r+0x81a>
 8008688:	f1c0 001c 	rsb	r0, r0, #28
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	4403      	add	r3, r0
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	9b05      	ldr	r3, [sp, #20]
 8008694:	4403      	add	r3, r0
 8008696:	4480      	add	r8, r0
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	dd05      	ble.n	80086ac <_dtoa_r+0x734>
 80086a0:	4629      	mov	r1, r5
 80086a2:	461a      	mov	r2, r3
 80086a4:	4630      	mov	r0, r6
 80086a6:	f000 fced 	bl	8009084 <__lshift>
 80086aa:	4605      	mov	r5, r0
 80086ac:	9b05      	ldr	r3, [sp, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dd05      	ble.n	80086be <_dtoa_r+0x746>
 80086b2:	4621      	mov	r1, r4
 80086b4:	461a      	mov	r2, r3
 80086b6:	4630      	mov	r0, r6
 80086b8:	f000 fce4 	bl	8009084 <__lshift>
 80086bc:	4604      	mov	r4, r0
 80086be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d06a      	beq.n	800879a <_dtoa_r+0x822>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fd4c 	bl	8009164 <__mcmp>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	da64      	bge.n	800879a <_dtoa_r+0x822>
 80086d0:	2300      	movs	r3, #0
 80086d2:	4629      	mov	r1, r5
 80086d4:	220a      	movs	r2, #10
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 fb24 	bl	8008d24 <__multadd>
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086e2:	4605      	mov	r5, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8191 	beq.w	8008a0c <_dtoa_r+0xa94>
 80086ea:	4639      	mov	r1, r7
 80086ec:	2300      	movs	r3, #0
 80086ee:	220a      	movs	r2, #10
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 fb17 	bl	8008d24 <__multadd>
 80086f6:	f1ba 0f00 	cmp.w	sl, #0
 80086fa:	4607      	mov	r7, r0
 80086fc:	f300 808d 	bgt.w	800881a <_dtoa_r+0x8a2>
 8008700:	9b06      	ldr	r3, [sp, #24]
 8008702:	2b02      	cmp	r3, #2
 8008704:	dc50      	bgt.n	80087a8 <_dtoa_r+0x830>
 8008706:	e088      	b.n	800881a <_dtoa_r+0x8a2>
 8008708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800870a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800870e:	e751      	b.n	80085b4 <_dtoa_r+0x63c>
 8008710:	f109 34ff 	add.w	r4, r9, #4294967295
 8008714:	42a3      	cmp	r3, r4
 8008716:	bfbf      	itttt	lt
 8008718:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800871a:	1ae3      	sublt	r3, r4, r3
 800871c:	18d2      	addlt	r2, r2, r3
 800871e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008720:	bfb6      	itet	lt
 8008722:	4623      	movlt	r3, r4
 8008724:	1b1c      	subge	r4, r3, r4
 8008726:	2400      	movlt	r4, #0
 8008728:	f1b9 0f00 	cmp.w	r9, #0
 800872c:	bfb5      	itete	lt
 800872e:	9a04      	ldrlt	r2, [sp, #16]
 8008730:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008734:	eba2 0809 	sublt.w	r8, r2, r9
 8008738:	464a      	movge	r2, r9
 800873a:	bfb8      	it	lt
 800873c:	2200      	movlt	r2, #0
 800873e:	e73c      	b.n	80085ba <_dtoa_r+0x642>
 8008740:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008744:	9f07      	ldr	r7, [sp, #28]
 8008746:	461c      	mov	r4, r3
 8008748:	e744      	b.n	80085d4 <_dtoa_r+0x65c>
 800874a:	461a      	mov	r2, r3
 800874c:	e770      	b.n	8008630 <_dtoa_r+0x6b8>
 800874e:	9b06      	ldr	r3, [sp, #24]
 8008750:	2b01      	cmp	r3, #1
 8008752:	dc18      	bgt.n	8008786 <_dtoa_r+0x80e>
 8008754:	9b02      	ldr	r3, [sp, #8]
 8008756:	b9b3      	cbnz	r3, 8008786 <_dtoa_r+0x80e>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800875e:	b9a2      	cbnz	r2, 800878a <_dtoa_r+0x812>
 8008760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008764:	0d12      	lsrs	r2, r2, #20
 8008766:	0512      	lsls	r2, r2, #20
 8008768:	b18a      	cbz	r2, 800878e <_dtoa_r+0x816>
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	3301      	adds	r3, #1
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	3301      	adds	r3, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	2301      	movs	r3, #1
 8008778:	930a      	str	r3, [sp, #40]	; 0x28
 800877a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	f47f af70 	bne.w	8008662 <_dtoa_r+0x6ea>
 8008782:	2001      	movs	r0, #1
 8008784:	e775      	b.n	8008672 <_dtoa_r+0x6fa>
 8008786:	2300      	movs	r3, #0
 8008788:	e7f6      	b.n	8008778 <_dtoa_r+0x800>
 800878a:	9b02      	ldr	r3, [sp, #8]
 800878c:	e7f4      	b.n	8008778 <_dtoa_r+0x800>
 800878e:	920a      	str	r2, [sp, #40]	; 0x28
 8008790:	e7f3      	b.n	800877a <_dtoa_r+0x802>
 8008792:	d082      	beq.n	800869a <_dtoa_r+0x722>
 8008794:	4610      	mov	r0, r2
 8008796:	301c      	adds	r0, #28
 8008798:	e778      	b.n	800868c <_dtoa_r+0x714>
 800879a:	f1b9 0f00 	cmp.w	r9, #0
 800879e:	dc37      	bgt.n	8008810 <_dtoa_r+0x898>
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	dd34      	ble.n	8008810 <_dtoa_r+0x898>
 80087a6:	46ca      	mov	sl, r9
 80087a8:	f1ba 0f00 	cmp.w	sl, #0
 80087ac:	d10d      	bne.n	80087ca <_dtoa_r+0x852>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4653      	mov	r3, sl
 80087b2:	2205      	movs	r2, #5
 80087b4:	4630      	mov	r0, r6
 80087b6:	f000 fab5 	bl	8008d24 <__multadd>
 80087ba:	4601      	mov	r1, r0
 80087bc:	4604      	mov	r4, r0
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 fcd0 	bl	8009164 <__mcmp>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f73f adeb 	bgt.w	80083a0 <_dtoa_r+0x428>
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087d0:	ea6f 0b03 	mvn.w	fp, r3
 80087d4:	f04f 0900 	mov.w	r9, #0
 80087d8:	4621      	mov	r1, r4
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 fa80 	bl	8008ce0 <_Bfree>
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	f43f aea8 	beq.w	8008536 <_dtoa_r+0x5be>
 80087e6:	f1b9 0f00 	cmp.w	r9, #0
 80087ea:	d005      	beq.n	80087f8 <_dtoa_r+0x880>
 80087ec:	45b9      	cmp	r9, r7
 80087ee:	d003      	beq.n	80087f8 <_dtoa_r+0x880>
 80087f0:	4649      	mov	r1, r9
 80087f2:	4630      	mov	r0, r6
 80087f4:	f000 fa74 	bl	8008ce0 <_Bfree>
 80087f8:	4639      	mov	r1, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fa70 	bl	8008ce0 <_Bfree>
 8008800:	e699      	b.n	8008536 <_dtoa_r+0x5be>
 8008802:	2400      	movs	r4, #0
 8008804:	4627      	mov	r7, r4
 8008806:	e7e0      	b.n	80087ca <_dtoa_r+0x852>
 8008808:	46bb      	mov	fp, r7
 800880a:	4604      	mov	r4, r0
 800880c:	4607      	mov	r7, r0
 800880e:	e5c7      	b.n	80083a0 <_dtoa_r+0x428>
 8008810:	9b07      	ldr	r3, [sp, #28]
 8008812:	46ca      	mov	sl, r9
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8100 	beq.w	8008a1a <_dtoa_r+0xaa2>
 800881a:	f1b8 0f00 	cmp.w	r8, #0
 800881e:	dd05      	ble.n	800882c <_dtoa_r+0x8b4>
 8008820:	4639      	mov	r1, r7
 8008822:	4642      	mov	r2, r8
 8008824:	4630      	mov	r0, r6
 8008826:	f000 fc2d 	bl	8009084 <__lshift>
 800882a:	4607      	mov	r7, r0
 800882c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882e:	2b00      	cmp	r3, #0
 8008830:	d05d      	beq.n	80088ee <_dtoa_r+0x976>
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4630      	mov	r0, r6
 8008836:	f000 fa13 	bl	8008c60 <_Balloc>
 800883a:	4680      	mov	r8, r0
 800883c:	b928      	cbnz	r0, 800884a <_dtoa_r+0x8d2>
 800883e:	4b82      	ldr	r3, [pc, #520]	; (8008a48 <_dtoa_r+0xad0>)
 8008840:	4602      	mov	r2, r0
 8008842:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008846:	f7ff bbaf 	b.w	8007fa8 <_dtoa_r+0x30>
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	3202      	adds	r2, #2
 800884e:	0092      	lsls	r2, r2, #2
 8008850:	f107 010c 	add.w	r1, r7, #12
 8008854:	300c      	adds	r0, #12
 8008856:	f7fe fe71 	bl	800753c <memcpy>
 800885a:	2201      	movs	r2, #1
 800885c:	4641      	mov	r1, r8
 800885e:	4630      	mov	r0, r6
 8008860:	f000 fc10 	bl	8009084 <__lshift>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	4453      	add	r3, sl
 800886e:	9308      	str	r3, [sp, #32]
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	46b9      	mov	r9, r7
 8008878:	9307      	str	r3, [sp, #28]
 800887a:	4607      	mov	r7, r0
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	4621      	mov	r1, r4
 8008880:	3b01      	subs	r3, #1
 8008882:	4628      	mov	r0, r5
 8008884:	9302      	str	r3, [sp, #8]
 8008886:	f7ff fae9 	bl	8007e5c <quorem>
 800888a:	4603      	mov	r3, r0
 800888c:	3330      	adds	r3, #48	; 0x30
 800888e:	9005      	str	r0, [sp, #20]
 8008890:	4649      	mov	r1, r9
 8008892:	4628      	mov	r0, r5
 8008894:	9309      	str	r3, [sp, #36]	; 0x24
 8008896:	f000 fc65 	bl	8009164 <__mcmp>
 800889a:	463a      	mov	r2, r7
 800889c:	4682      	mov	sl, r0
 800889e:	4621      	mov	r1, r4
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 fc7b 	bl	800919c <__mdiff>
 80088a6:	68c2      	ldr	r2, [r0, #12]
 80088a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088aa:	4680      	mov	r8, r0
 80088ac:	bb0a      	cbnz	r2, 80088f2 <_dtoa_r+0x97a>
 80088ae:	4601      	mov	r1, r0
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 fc57 	bl	8009164 <__mcmp>
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	4602      	mov	r2, r0
 80088ba:	4641      	mov	r1, r8
 80088bc:	4630      	mov	r0, r6
 80088be:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80088c2:	f000 fa0d 	bl	8008ce0 <_Bfree>
 80088c6:	9b06      	ldr	r3, [sp, #24]
 80088c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80088ce:	ea43 0102 	orr.w	r1, r3, r2
 80088d2:	9b07      	ldr	r3, [sp, #28]
 80088d4:	430b      	orrs	r3, r1
 80088d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d8:	d10d      	bne.n	80088f6 <_dtoa_r+0x97e>
 80088da:	2b39      	cmp	r3, #57	; 0x39
 80088dc:	d029      	beq.n	8008932 <_dtoa_r+0x9ba>
 80088de:	f1ba 0f00 	cmp.w	sl, #0
 80088e2:	dd01      	ble.n	80088e8 <_dtoa_r+0x970>
 80088e4:	9b05      	ldr	r3, [sp, #20]
 80088e6:	3331      	adds	r3, #49	; 0x31
 80088e8:	9a02      	ldr	r2, [sp, #8]
 80088ea:	7013      	strb	r3, [r2, #0]
 80088ec:	e774      	b.n	80087d8 <_dtoa_r+0x860>
 80088ee:	4638      	mov	r0, r7
 80088f0:	e7b8      	b.n	8008864 <_dtoa_r+0x8ec>
 80088f2:	2201      	movs	r2, #1
 80088f4:	e7e1      	b.n	80088ba <_dtoa_r+0x942>
 80088f6:	f1ba 0f00 	cmp.w	sl, #0
 80088fa:	db06      	blt.n	800890a <_dtoa_r+0x992>
 80088fc:	9906      	ldr	r1, [sp, #24]
 80088fe:	ea41 0a0a 	orr.w	sl, r1, sl
 8008902:	9907      	ldr	r1, [sp, #28]
 8008904:	ea5a 0101 	orrs.w	r1, sl, r1
 8008908:	d120      	bne.n	800894c <_dtoa_r+0x9d4>
 800890a:	2a00      	cmp	r2, #0
 800890c:	ddec      	ble.n	80088e8 <_dtoa_r+0x970>
 800890e:	4629      	mov	r1, r5
 8008910:	2201      	movs	r2, #1
 8008912:	4630      	mov	r0, r6
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	f000 fbb5 	bl	8009084 <__lshift>
 800891a:	4621      	mov	r1, r4
 800891c:	4605      	mov	r5, r0
 800891e:	f000 fc21 	bl	8009164 <__mcmp>
 8008922:	2800      	cmp	r0, #0
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	dc02      	bgt.n	800892e <_dtoa_r+0x9b6>
 8008928:	d1de      	bne.n	80088e8 <_dtoa_r+0x970>
 800892a:	07da      	lsls	r2, r3, #31
 800892c:	d5dc      	bpl.n	80088e8 <_dtoa_r+0x970>
 800892e:	2b39      	cmp	r3, #57	; 0x39
 8008930:	d1d8      	bne.n	80088e4 <_dtoa_r+0x96c>
 8008932:	9a02      	ldr	r2, [sp, #8]
 8008934:	2339      	movs	r3, #57	; 0x39
 8008936:	7013      	strb	r3, [r2, #0]
 8008938:	4643      	mov	r3, r8
 800893a:	4698      	mov	r8, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008942:	2a39      	cmp	r2, #57	; 0x39
 8008944:	d051      	beq.n	80089ea <_dtoa_r+0xa72>
 8008946:	3201      	adds	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e745      	b.n	80087d8 <_dtoa_r+0x860>
 800894c:	2a00      	cmp	r2, #0
 800894e:	dd03      	ble.n	8008958 <_dtoa_r+0x9e0>
 8008950:	2b39      	cmp	r3, #57	; 0x39
 8008952:	d0ee      	beq.n	8008932 <_dtoa_r+0x9ba>
 8008954:	3301      	adds	r3, #1
 8008956:	e7c7      	b.n	80088e8 <_dtoa_r+0x970>
 8008958:	9a04      	ldr	r2, [sp, #16]
 800895a:	9908      	ldr	r1, [sp, #32]
 800895c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008960:	428a      	cmp	r2, r1
 8008962:	d02b      	beq.n	80089bc <_dtoa_r+0xa44>
 8008964:	4629      	mov	r1, r5
 8008966:	2300      	movs	r3, #0
 8008968:	220a      	movs	r2, #10
 800896a:	4630      	mov	r0, r6
 800896c:	f000 f9da 	bl	8008d24 <__multadd>
 8008970:	45b9      	cmp	r9, r7
 8008972:	4605      	mov	r5, r0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	f04f 020a 	mov.w	r2, #10
 800897c:	4649      	mov	r1, r9
 800897e:	4630      	mov	r0, r6
 8008980:	d107      	bne.n	8008992 <_dtoa_r+0xa1a>
 8008982:	f000 f9cf 	bl	8008d24 <__multadd>
 8008986:	4681      	mov	r9, r0
 8008988:	4607      	mov	r7, r0
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	3301      	adds	r3, #1
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	e774      	b.n	800887c <_dtoa_r+0x904>
 8008992:	f000 f9c7 	bl	8008d24 <__multadd>
 8008996:	4639      	mov	r1, r7
 8008998:	4681      	mov	r9, r0
 800899a:	2300      	movs	r3, #0
 800899c:	220a      	movs	r2, #10
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 f9c0 	bl	8008d24 <__multadd>
 80089a4:	4607      	mov	r7, r0
 80089a6:	e7f0      	b.n	800898a <_dtoa_r+0xa12>
 80089a8:	f1ba 0f00 	cmp.w	sl, #0
 80089ac:	9a01      	ldr	r2, [sp, #4]
 80089ae:	bfcc      	ite	gt
 80089b0:	46d0      	movgt	r8, sl
 80089b2:	f04f 0801 	movle.w	r8, #1
 80089b6:	4490      	add	r8, r2
 80089b8:	f04f 0900 	mov.w	r9, #0
 80089bc:	4629      	mov	r1, r5
 80089be:	2201      	movs	r2, #1
 80089c0:	4630      	mov	r0, r6
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	f000 fb5e 	bl	8009084 <__lshift>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4605      	mov	r5, r0
 80089cc:	f000 fbca 	bl	8009164 <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	dcb1      	bgt.n	8008938 <_dtoa_r+0x9c0>
 80089d4:	d102      	bne.n	80089dc <_dtoa_r+0xa64>
 80089d6:	9b02      	ldr	r3, [sp, #8]
 80089d8:	07db      	lsls	r3, r3, #31
 80089da:	d4ad      	bmi.n	8008938 <_dtoa_r+0x9c0>
 80089dc:	4643      	mov	r3, r8
 80089de:	4698      	mov	r8, r3
 80089e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089e4:	2a30      	cmp	r2, #48	; 0x30
 80089e6:	d0fa      	beq.n	80089de <_dtoa_r+0xa66>
 80089e8:	e6f6      	b.n	80087d8 <_dtoa_r+0x860>
 80089ea:	9a01      	ldr	r2, [sp, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d1a4      	bne.n	800893a <_dtoa_r+0x9c2>
 80089f0:	f10b 0b01 	add.w	fp, fp, #1
 80089f4:	2331      	movs	r3, #49	; 0x31
 80089f6:	e778      	b.n	80088ea <_dtoa_r+0x972>
 80089f8:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <_dtoa_r+0xad4>)
 80089fa:	f7ff bb27 	b.w	800804c <_dtoa_r+0xd4>
 80089fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f47f ab03 	bne.w	800800c <_dtoa_r+0x94>
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <_dtoa_r+0xad8>)
 8008a08:	f7ff bb20 	b.w	800804c <_dtoa_r+0xd4>
 8008a0c:	f1ba 0f00 	cmp.w	sl, #0
 8008a10:	dc03      	bgt.n	8008a1a <_dtoa_r+0xaa2>
 8008a12:	9b06      	ldr	r3, [sp, #24]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f73f aec7 	bgt.w	80087a8 <_dtoa_r+0x830>
 8008a1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7ff fa1b 	bl	8007e5c <quorem>
 8008a26:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a2a:	f808 3b01 	strb.w	r3, [r8], #1
 8008a2e:	9a01      	ldr	r2, [sp, #4]
 8008a30:	eba8 0202 	sub.w	r2, r8, r2
 8008a34:	4592      	cmp	sl, r2
 8008a36:	ddb7      	ble.n	80089a8 <_dtoa_r+0xa30>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f000 f970 	bl	8008d24 <__multadd>
 8008a44:	4605      	mov	r5, r0
 8008a46:	e7ea      	b.n	8008a1e <_dtoa_r+0xaa6>
 8008a48:	0800a867 	.word	0x0800a867
 8008a4c:	0800a7c4 	.word	0x0800a7c4
 8008a50:	0800a7e8 	.word	0x0800a7e8

08008a54 <std>:
 8008a54:	2300      	movs	r3, #0
 8008a56:	b510      	push	{r4, lr}
 8008a58:	4604      	mov	r4, r0
 8008a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a62:	6083      	str	r3, [r0, #8]
 8008a64:	8181      	strh	r1, [r0, #12]
 8008a66:	6643      	str	r3, [r0, #100]	; 0x64
 8008a68:	81c2      	strh	r2, [r0, #14]
 8008a6a:	6183      	str	r3, [r0, #24]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	2208      	movs	r2, #8
 8008a70:	305c      	adds	r0, #92	; 0x5c
 8008a72:	f7fe fd71 	bl	8007558 <memset>
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <std+0x38>)
 8008a78:	6263      	str	r3, [r4, #36]	; 0x24
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x3c>)
 8008a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <std+0x40>)
 8008a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x44>)
 8008a84:	6224      	str	r4, [r4, #32]
 8008a86:	6323      	str	r3, [r4, #48]	; 0x30
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08009ae1 	.word	0x08009ae1
 8008a90:	08009b03 	.word	0x08009b03
 8008a94:	08009b3b 	.word	0x08009b3b
 8008a98:	08009b5f 	.word	0x08009b5f

08008a9c <_cleanup_r>:
 8008a9c:	4901      	ldr	r1, [pc, #4]	; (8008aa4 <_cleanup_r+0x8>)
 8008a9e:	f000 b8af 	b.w	8008c00 <_fwalk_reent>
 8008aa2:	bf00      	nop
 8008aa4:	08009e75 	.word	0x08009e75

08008aa8 <__sfmoreglue>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	2268      	movs	r2, #104	; 0x68
 8008aac:	1e4d      	subs	r5, r1, #1
 8008aae:	4355      	muls	r5, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ab6:	f000 fcd9 	bl	800946c <_malloc_r>
 8008aba:	4604      	mov	r4, r0
 8008abc:	b140      	cbz	r0, 8008ad0 <__sfmoreglue+0x28>
 8008abe:	2100      	movs	r1, #0
 8008ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ac4:	300c      	adds	r0, #12
 8008ac6:	60a0      	str	r0, [r4, #8]
 8008ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008acc:	f7fe fd44 	bl	8007558 <memset>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}

08008ad4 <__sfp_lock_acquire>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__sfp_lock_acquire+0x8>)
 8008ad6:	f000 b8b8 	b.w	8008c4a <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	2400056d 	.word	0x2400056d

08008ae0 <__sfp_lock_release>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__sfp_lock_release+0x8>)
 8008ae2:	f000 b8b3 	b.w	8008c4c <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	2400056d 	.word	0x2400056d

08008aec <__sinit_lock_acquire>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__sinit_lock_acquire+0x8>)
 8008aee:	f000 b8ac 	b.w	8008c4a <__retarget_lock_acquire_recursive>
 8008af2:	bf00      	nop
 8008af4:	2400056e 	.word	0x2400056e

08008af8 <__sinit_lock_release>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sinit_lock_release+0x8>)
 8008afa:	f000 b8a7 	b.w	8008c4c <__retarget_lock_release_recursive>
 8008afe:	bf00      	nop
 8008b00:	2400056e 	.word	0x2400056e

08008b04 <__sinit>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	f7ff fff0 	bl	8008aec <__sinit_lock_acquire>
 8008b0c:	69a3      	ldr	r3, [r4, #24]
 8008b0e:	b11b      	cbz	r3, 8008b18 <__sinit+0x14>
 8008b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b14:	f7ff bff0 	b.w	8008af8 <__sinit_lock_release>
 8008b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <__sinit+0x68>)
 8008b20:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <__sinit+0x6c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	bf04      	itt	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	61a3      	streq	r3, [r4, #24]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f820 	bl	8008b74 <__sfp>
 8008b34:	6060      	str	r0, [r4, #4]
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 f81c 	bl	8008b74 <__sfp>
 8008b3c:	60a0      	str	r0, [r4, #8]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f818 	bl	8008b74 <__sfp>
 8008b44:	2200      	movs	r2, #0
 8008b46:	60e0      	str	r0, [r4, #12]
 8008b48:	2104      	movs	r1, #4
 8008b4a:	6860      	ldr	r0, [r4, #4]
 8008b4c:	f7ff ff82 	bl	8008a54 <std>
 8008b50:	68a0      	ldr	r0, [r4, #8]
 8008b52:	2201      	movs	r2, #1
 8008b54:	2109      	movs	r1, #9
 8008b56:	f7ff ff7d 	bl	8008a54 <std>
 8008b5a:	68e0      	ldr	r0, [r4, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	2112      	movs	r1, #18
 8008b60:	f7ff ff78 	bl	8008a54 <std>
 8008b64:	2301      	movs	r3, #1
 8008b66:	61a3      	str	r3, [r4, #24]
 8008b68:	e7d2      	b.n	8008b10 <__sinit+0xc>
 8008b6a:	bf00      	nop
 8008b6c:	0800a7b0 	.word	0x0800a7b0
 8008b70:	08008a9d 	.word	0x08008a9d

08008b74 <__sfp>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	4607      	mov	r7, r0
 8008b78:	f7ff ffac 	bl	8008ad4 <__sfp_lock_acquire>
 8008b7c:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <__sfp+0x84>)
 8008b7e:	681e      	ldr	r6, [r3, #0]
 8008b80:	69b3      	ldr	r3, [r6, #24]
 8008b82:	b913      	cbnz	r3, 8008b8a <__sfp+0x16>
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7ff ffbd 	bl	8008b04 <__sinit>
 8008b8a:	3648      	adds	r6, #72	; 0x48
 8008b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	d503      	bpl.n	8008b9c <__sfp+0x28>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	b30b      	cbz	r3, 8008bdc <__sfp+0x68>
 8008b98:	6836      	ldr	r6, [r6, #0]
 8008b9a:	e7f7      	b.n	8008b8c <__sfp+0x18>
 8008b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba0:	b9d5      	cbnz	r5, 8008bd8 <__sfp+0x64>
 8008ba2:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <__sfp+0x88>)
 8008ba4:	60e3      	str	r3, [r4, #12]
 8008ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008baa:	6665      	str	r5, [r4, #100]	; 0x64
 8008bac:	f000 f84c 	bl	8008c48 <__retarget_lock_init_recursive>
 8008bb0:	f7ff ff96 	bl	8008ae0 <__sfp_lock_release>
 8008bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bbc:	6025      	str	r5, [r4, #0]
 8008bbe:	61a5      	str	r5, [r4, #24]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc8:	f7fe fcc6 	bl	8007558 <memset>
 8008bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	3468      	adds	r4, #104	; 0x68
 8008bda:	e7d9      	b.n	8008b90 <__sfp+0x1c>
 8008bdc:	2104      	movs	r1, #4
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7ff ff62 	bl	8008aa8 <__sfmoreglue>
 8008be4:	4604      	mov	r4, r0
 8008be6:	6030      	str	r0, [r6, #0]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d1d5      	bne.n	8008b98 <__sfp+0x24>
 8008bec:	f7ff ff78 	bl	8008ae0 <__sfp_lock_release>
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	e7ee      	b.n	8008bd4 <__sfp+0x60>
 8008bf6:	bf00      	nop
 8008bf8:	0800a7b0 	.word	0x0800a7b0
 8008bfc:	ffff0001 	.word	0xffff0001

08008c00 <_fwalk_reent>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4606      	mov	r6, r0
 8008c06:	4688      	mov	r8, r1
 8008c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c0c:	2700      	movs	r7, #0
 8008c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c12:	f1b9 0901 	subs.w	r9, r9, #1
 8008c16:	d505      	bpl.n	8008c24 <_fwalk_reent+0x24>
 8008c18:	6824      	ldr	r4, [r4, #0]
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d1f7      	bne.n	8008c0e <_fwalk_reent+0xe>
 8008c1e:	4638      	mov	r0, r7
 8008c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d907      	bls.n	8008c3a <_fwalk_reent+0x3a>
 8008c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	d003      	beq.n	8008c3a <_fwalk_reent+0x3a>
 8008c32:	4629      	mov	r1, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	47c0      	blx	r8
 8008c38:	4307      	orrs	r7, r0
 8008c3a:	3568      	adds	r5, #104	; 0x68
 8008c3c:	e7e9      	b.n	8008c12 <_fwalk_reent+0x12>
	...

08008c40 <_localeconv_r>:
 8008c40:	4800      	ldr	r0, [pc, #0]	; (8008c44 <_localeconv_r+0x4>)
 8008c42:	4770      	bx	lr
 8008c44:	2400016c 	.word	0x2400016c

08008c48 <__retarget_lock_init_recursive>:
 8008c48:	4770      	bx	lr

08008c4a <__retarget_lock_acquire_recursive>:
 8008c4a:	4770      	bx	lr

08008c4c <__retarget_lock_release_recursive>:
 8008c4c:	4770      	bx	lr
	...

08008c50 <malloc>:
 8008c50:	4b02      	ldr	r3, [pc, #8]	; (8008c5c <malloc+0xc>)
 8008c52:	4601      	mov	r1, r0
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	f000 bc09 	b.w	800946c <_malloc_r>
 8008c5a:	bf00      	nop
 8008c5c:	24000018 	.word	0x24000018

08008c60 <_Balloc>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	b976      	cbnz	r6, 8008c88 <_Balloc+0x28>
 8008c6a:	2010      	movs	r0, #16
 8008c6c:	f7ff fff0 	bl	8008c50 <malloc>
 8008c70:	4602      	mov	r2, r0
 8008c72:	6260      	str	r0, [r4, #36]	; 0x24
 8008c74:	b920      	cbnz	r0, 8008c80 <_Balloc+0x20>
 8008c76:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <_Balloc+0x78>)
 8008c78:	4818      	ldr	r0, [pc, #96]	; (8008cdc <_Balloc+0x7c>)
 8008c7a:	2166      	movs	r1, #102	; 0x66
 8008c7c:	f001 f846 	bl	8009d0c <__assert_func>
 8008c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c84:	6006      	str	r6, [r0, #0]
 8008c86:	60c6      	str	r6, [r0, #12]
 8008c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c8a:	68f3      	ldr	r3, [r6, #12]
 8008c8c:	b183      	cbz	r3, 8008cb0 <_Balloc+0x50>
 8008c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c96:	b9b8      	cbnz	r0, 8008cc8 <_Balloc+0x68>
 8008c98:	2101      	movs	r1, #1
 8008c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008c9e:	1d72      	adds	r2, r6, #5
 8008ca0:	0092      	lsls	r2, r2, #2
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 fb60 	bl	8009368 <_calloc_r>
 8008ca8:	b160      	cbz	r0, 8008cc4 <_Balloc+0x64>
 8008caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cae:	e00e      	b.n	8008cce <_Balloc+0x6e>
 8008cb0:	2221      	movs	r2, #33	; 0x21
 8008cb2:	2104      	movs	r1, #4
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fb57 	bl	8009368 <_calloc_r>
 8008cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cbc:	60f0      	str	r0, [r6, #12]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e4      	bne.n	8008c8e <_Balloc+0x2e>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	6802      	ldr	r2, [r0, #0]
 8008cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cd4:	e7f7      	b.n	8008cc6 <_Balloc+0x66>
 8008cd6:	bf00      	nop
 8008cd8:	0800a7f5 	.word	0x0800a7f5
 8008cdc:	0800a8d8 	.word	0x0800a8d8

08008ce0 <_Bfree>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	b976      	cbnz	r6, 8008d08 <_Bfree+0x28>
 8008cea:	2010      	movs	r0, #16
 8008cec:	f7ff ffb0 	bl	8008c50 <malloc>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6268      	str	r0, [r5, #36]	; 0x24
 8008cf4:	b920      	cbnz	r0, 8008d00 <_Bfree+0x20>
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <_Bfree+0x3c>)
 8008cf8:	4809      	ldr	r0, [pc, #36]	; (8008d20 <_Bfree+0x40>)
 8008cfa:	218a      	movs	r1, #138	; 0x8a
 8008cfc:	f001 f806 	bl	8009d0c <__assert_func>
 8008d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d04:	6006      	str	r6, [r0, #0]
 8008d06:	60c6      	str	r6, [r0, #12]
 8008d08:	b13c      	cbz	r4, 8008d1a <_Bfree+0x3a>
 8008d0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d0c:	6862      	ldr	r2, [r4, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d14:	6021      	str	r1, [r4, #0]
 8008d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	0800a7f5 	.word	0x0800a7f5
 8008d20:	0800a8d8 	.word	0x0800a8d8

08008d24 <__multadd>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	690d      	ldr	r5, [r1, #16]
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	461e      	mov	r6, r3
 8008d30:	f101 0c14 	add.w	ip, r1, #20
 8008d34:	2000      	movs	r0, #0
 8008d36:	f8dc 3000 	ldr.w	r3, [ip]
 8008d3a:	b299      	uxth	r1, r3
 8008d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d40:	0c1e      	lsrs	r6, r3, #16
 8008d42:	0c0b      	lsrs	r3, r1, #16
 8008d44:	fb02 3306 	mla	r3, r2, r6, r3
 8008d48:	b289      	uxth	r1, r1
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d50:	4285      	cmp	r5, r0
 8008d52:	f84c 1b04 	str.w	r1, [ip], #4
 8008d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d5a:	dcec      	bgt.n	8008d36 <__multadd+0x12>
 8008d5c:	b30e      	cbz	r6, 8008da2 <__multadd+0x7e>
 8008d5e:	68a3      	ldr	r3, [r4, #8]
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dc19      	bgt.n	8008d98 <__multadd+0x74>
 8008d64:	6861      	ldr	r1, [r4, #4]
 8008d66:	4638      	mov	r0, r7
 8008d68:	3101      	adds	r1, #1
 8008d6a:	f7ff ff79 	bl	8008c60 <_Balloc>
 8008d6e:	4680      	mov	r8, r0
 8008d70:	b928      	cbnz	r0, 8008d7e <__multadd+0x5a>
 8008d72:	4602      	mov	r2, r0
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <__multadd+0x84>)
 8008d76:	480d      	ldr	r0, [pc, #52]	; (8008dac <__multadd+0x88>)
 8008d78:	21b5      	movs	r1, #181	; 0xb5
 8008d7a:	f000 ffc7 	bl	8009d0c <__assert_func>
 8008d7e:	6922      	ldr	r2, [r4, #16]
 8008d80:	3202      	adds	r2, #2
 8008d82:	f104 010c 	add.w	r1, r4, #12
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	300c      	adds	r0, #12
 8008d8a:	f7fe fbd7 	bl	800753c <memcpy>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ffa5 	bl	8008ce0 <_Bfree>
 8008d96:	4644      	mov	r4, r8
 8008d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	615e      	str	r6, [r3, #20]
 8008da0:	6125      	str	r5, [r4, #16]
 8008da2:	4620      	mov	r0, r4
 8008da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da8:	0800a867 	.word	0x0800a867
 8008dac:	0800a8d8 	.word	0x0800a8d8

08008db0 <__hi0bits>:
 8008db0:	0c03      	lsrs	r3, r0, #16
 8008db2:	041b      	lsls	r3, r3, #16
 8008db4:	b9d3      	cbnz	r3, 8008dec <__hi0bits+0x3c>
 8008db6:	0400      	lsls	r0, r0, #16
 8008db8:	2310      	movs	r3, #16
 8008dba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dbe:	bf04      	itt	eq
 8008dc0:	0200      	lsleq	r0, r0, #8
 8008dc2:	3308      	addeq	r3, #8
 8008dc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dc8:	bf04      	itt	eq
 8008dca:	0100      	lsleq	r0, r0, #4
 8008dcc:	3304      	addeq	r3, #4
 8008dce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dd2:	bf04      	itt	eq
 8008dd4:	0080      	lsleq	r0, r0, #2
 8008dd6:	3302      	addeq	r3, #2
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	db05      	blt.n	8008de8 <__hi0bits+0x38>
 8008ddc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008de0:	f103 0301 	add.w	r3, r3, #1
 8008de4:	bf08      	it	eq
 8008de6:	2320      	moveq	r3, #32
 8008de8:	4618      	mov	r0, r3
 8008dea:	4770      	bx	lr
 8008dec:	2300      	movs	r3, #0
 8008dee:	e7e4      	b.n	8008dba <__hi0bits+0xa>

08008df0 <__lo0bits>:
 8008df0:	6803      	ldr	r3, [r0, #0]
 8008df2:	f013 0207 	ands.w	r2, r3, #7
 8008df6:	4601      	mov	r1, r0
 8008df8:	d00b      	beq.n	8008e12 <__lo0bits+0x22>
 8008dfa:	07da      	lsls	r2, r3, #31
 8008dfc:	d423      	bmi.n	8008e46 <__lo0bits+0x56>
 8008dfe:	0798      	lsls	r0, r3, #30
 8008e00:	bf49      	itett	mi
 8008e02:	085b      	lsrmi	r3, r3, #1
 8008e04:	089b      	lsrpl	r3, r3, #2
 8008e06:	2001      	movmi	r0, #1
 8008e08:	600b      	strmi	r3, [r1, #0]
 8008e0a:	bf5c      	itt	pl
 8008e0c:	600b      	strpl	r3, [r1, #0]
 8008e0e:	2002      	movpl	r0, #2
 8008e10:	4770      	bx	lr
 8008e12:	b298      	uxth	r0, r3
 8008e14:	b9a8      	cbnz	r0, 8008e42 <__lo0bits+0x52>
 8008e16:	0c1b      	lsrs	r3, r3, #16
 8008e18:	2010      	movs	r0, #16
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	b90a      	cbnz	r2, 8008e22 <__lo0bits+0x32>
 8008e1e:	3008      	adds	r0, #8
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	071a      	lsls	r2, r3, #28
 8008e24:	bf04      	itt	eq
 8008e26:	091b      	lsreq	r3, r3, #4
 8008e28:	3004      	addeq	r0, #4
 8008e2a:	079a      	lsls	r2, r3, #30
 8008e2c:	bf04      	itt	eq
 8008e2e:	089b      	lsreq	r3, r3, #2
 8008e30:	3002      	addeq	r0, #2
 8008e32:	07da      	lsls	r2, r3, #31
 8008e34:	d403      	bmi.n	8008e3e <__lo0bits+0x4e>
 8008e36:	085b      	lsrs	r3, r3, #1
 8008e38:	f100 0001 	add.w	r0, r0, #1
 8008e3c:	d005      	beq.n	8008e4a <__lo0bits+0x5a>
 8008e3e:	600b      	str	r3, [r1, #0]
 8008e40:	4770      	bx	lr
 8008e42:	4610      	mov	r0, r2
 8008e44:	e7e9      	b.n	8008e1a <__lo0bits+0x2a>
 8008e46:	2000      	movs	r0, #0
 8008e48:	4770      	bx	lr
 8008e4a:	2020      	movs	r0, #32
 8008e4c:	4770      	bx	lr
	...

08008e50 <__i2b>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	460c      	mov	r4, r1
 8008e54:	2101      	movs	r1, #1
 8008e56:	f7ff ff03 	bl	8008c60 <_Balloc>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	b928      	cbnz	r0, 8008e6a <__i2b+0x1a>
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <__i2b+0x24>)
 8008e60:	4805      	ldr	r0, [pc, #20]	; (8008e78 <__i2b+0x28>)
 8008e62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e66:	f000 ff51 	bl	8009d0c <__assert_func>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	6144      	str	r4, [r0, #20]
 8008e6e:	6103      	str	r3, [r0, #16]
 8008e70:	bd10      	pop	{r4, pc}
 8008e72:	bf00      	nop
 8008e74:	0800a867 	.word	0x0800a867
 8008e78:	0800a8d8 	.word	0x0800a8d8

08008e7c <__multiply>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	4691      	mov	r9, r2
 8008e82:	690a      	ldr	r2, [r1, #16]
 8008e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	bfb8      	it	lt
 8008e8c:	460b      	movlt	r3, r1
 8008e8e:	460c      	mov	r4, r1
 8008e90:	bfbc      	itt	lt
 8008e92:	464c      	movlt	r4, r9
 8008e94:	4699      	movlt	r9, r3
 8008e96:	6927      	ldr	r7, [r4, #16]
 8008e98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e9c:	68a3      	ldr	r3, [r4, #8]
 8008e9e:	6861      	ldr	r1, [r4, #4]
 8008ea0:	eb07 060a 	add.w	r6, r7, sl
 8008ea4:	42b3      	cmp	r3, r6
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	bfb8      	it	lt
 8008eaa:	3101      	addlt	r1, #1
 8008eac:	f7ff fed8 	bl	8008c60 <_Balloc>
 8008eb0:	b930      	cbnz	r0, 8008ec0 <__multiply+0x44>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b44      	ldr	r3, [pc, #272]	; (8008fc8 <__multiply+0x14c>)
 8008eb6:	4845      	ldr	r0, [pc, #276]	; (8008fcc <__multiply+0x150>)
 8008eb8:	f240 115d 	movw	r1, #349	; 0x15d
 8008ebc:	f000 ff26 	bl	8009d0c <__assert_func>
 8008ec0:	f100 0514 	add.w	r5, r0, #20
 8008ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ec8:	462b      	mov	r3, r5
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4543      	cmp	r3, r8
 8008ece:	d321      	bcc.n	8008f14 <__multiply+0x98>
 8008ed0:	f104 0314 	add.w	r3, r4, #20
 8008ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ed8:	f109 0314 	add.w	r3, r9, #20
 8008edc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ee0:	9202      	str	r2, [sp, #8]
 8008ee2:	1b3a      	subs	r2, r7, r4
 8008ee4:	3a15      	subs	r2, #21
 8008ee6:	f022 0203 	bic.w	r2, r2, #3
 8008eea:	3204      	adds	r2, #4
 8008eec:	f104 0115 	add.w	r1, r4, #21
 8008ef0:	428f      	cmp	r7, r1
 8008ef2:	bf38      	it	cc
 8008ef4:	2204      	movcc	r2, #4
 8008ef6:	9201      	str	r2, [sp, #4]
 8008ef8:	9a02      	ldr	r2, [sp, #8]
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d80c      	bhi.n	8008f1a <__multiply+0x9e>
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	dd03      	ble.n	8008f0c <__multiply+0x90>
 8008f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d05a      	beq.n	8008fc2 <__multiply+0x146>
 8008f0c:	6106      	str	r6, [r0, #16]
 8008f0e:	b005      	add	sp, #20
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	f843 2b04 	str.w	r2, [r3], #4
 8008f18:	e7d8      	b.n	8008ecc <__multiply+0x50>
 8008f1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f1e:	f1ba 0f00 	cmp.w	sl, #0
 8008f22:	d024      	beq.n	8008f6e <__multiply+0xf2>
 8008f24:	f104 0e14 	add.w	lr, r4, #20
 8008f28:	46a9      	mov	r9, r5
 8008f2a:	f04f 0c00 	mov.w	ip, #0
 8008f2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f32:	f8d9 1000 	ldr.w	r1, [r9]
 8008f36:	fa1f fb82 	uxth.w	fp, r2
 8008f3a:	b289      	uxth	r1, r1
 8008f3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f44:	f8d9 2000 	ldr.w	r2, [r9]
 8008f48:	4461      	add	r1, ip
 8008f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f56:	b289      	uxth	r1, r1
 8008f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f5c:	4577      	cmp	r7, lr
 8008f5e:	f849 1b04 	str.w	r1, [r9], #4
 8008f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f66:	d8e2      	bhi.n	8008f2e <__multiply+0xb2>
 8008f68:	9a01      	ldr	r2, [sp, #4]
 8008f6a:	f845 c002 	str.w	ip, [r5, r2]
 8008f6e:	9a03      	ldr	r2, [sp, #12]
 8008f70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f74:	3304      	adds	r3, #4
 8008f76:	f1b9 0f00 	cmp.w	r9, #0
 8008f7a:	d020      	beq.n	8008fbe <__multiply+0x142>
 8008f7c:	6829      	ldr	r1, [r5, #0]
 8008f7e:	f104 0c14 	add.w	ip, r4, #20
 8008f82:	46ae      	mov	lr, r5
 8008f84:	f04f 0a00 	mov.w	sl, #0
 8008f88:	f8bc b000 	ldrh.w	fp, [ip]
 8008f8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f90:	fb09 220b 	mla	r2, r9, fp, r2
 8008f94:	4492      	add	sl, r2
 8008f96:	b289      	uxth	r1, r1
 8008f98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f9c:	f84e 1b04 	str.w	r1, [lr], #4
 8008fa0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fa4:	f8be 1000 	ldrh.w	r1, [lr]
 8008fa8:	0c12      	lsrs	r2, r2, #16
 8008faa:	fb09 1102 	mla	r1, r9, r2, r1
 8008fae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fb2:	4567      	cmp	r7, ip
 8008fb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fb8:	d8e6      	bhi.n	8008f88 <__multiply+0x10c>
 8008fba:	9a01      	ldr	r2, [sp, #4]
 8008fbc:	50a9      	str	r1, [r5, r2]
 8008fbe:	3504      	adds	r5, #4
 8008fc0:	e79a      	b.n	8008ef8 <__multiply+0x7c>
 8008fc2:	3e01      	subs	r6, #1
 8008fc4:	e79c      	b.n	8008f00 <__multiply+0x84>
 8008fc6:	bf00      	nop
 8008fc8:	0800a867 	.word	0x0800a867
 8008fcc:	0800a8d8 	.word	0x0800a8d8

08008fd0 <__pow5mult>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	f012 0203 	ands.w	r2, r2, #3
 8008fda:	4606      	mov	r6, r0
 8008fdc:	460f      	mov	r7, r1
 8008fde:	d007      	beq.n	8008ff0 <__pow5mult+0x20>
 8008fe0:	4c25      	ldr	r4, [pc, #148]	; (8009078 <__pow5mult+0xa8>)
 8008fe2:	3a01      	subs	r2, #1
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fea:	f7ff fe9b 	bl	8008d24 <__multadd>
 8008fee:	4607      	mov	r7, r0
 8008ff0:	10ad      	asrs	r5, r5, #2
 8008ff2:	d03d      	beq.n	8009070 <__pow5mult+0xa0>
 8008ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ff6:	b97c      	cbnz	r4, 8009018 <__pow5mult+0x48>
 8008ff8:	2010      	movs	r0, #16
 8008ffa:	f7ff fe29 	bl	8008c50 <malloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6270      	str	r0, [r6, #36]	; 0x24
 8009002:	b928      	cbnz	r0, 8009010 <__pow5mult+0x40>
 8009004:	4b1d      	ldr	r3, [pc, #116]	; (800907c <__pow5mult+0xac>)
 8009006:	481e      	ldr	r0, [pc, #120]	; (8009080 <__pow5mult+0xb0>)
 8009008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800900c:	f000 fe7e 	bl	8009d0c <__assert_func>
 8009010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009014:	6004      	str	r4, [r0, #0]
 8009016:	60c4      	str	r4, [r0, #12]
 8009018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800901c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009020:	b94c      	cbnz	r4, 8009036 <__pow5mult+0x66>
 8009022:	f240 2171 	movw	r1, #625	; 0x271
 8009026:	4630      	mov	r0, r6
 8009028:	f7ff ff12 	bl	8008e50 <__i2b>
 800902c:	2300      	movs	r3, #0
 800902e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009032:	4604      	mov	r4, r0
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	f04f 0900 	mov.w	r9, #0
 800903a:	07eb      	lsls	r3, r5, #31
 800903c:	d50a      	bpl.n	8009054 <__pow5mult+0x84>
 800903e:	4639      	mov	r1, r7
 8009040:	4622      	mov	r2, r4
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ff1a 	bl	8008e7c <__multiply>
 8009048:	4639      	mov	r1, r7
 800904a:	4680      	mov	r8, r0
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff fe47 	bl	8008ce0 <_Bfree>
 8009052:	4647      	mov	r7, r8
 8009054:	106d      	asrs	r5, r5, #1
 8009056:	d00b      	beq.n	8009070 <__pow5mult+0xa0>
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	b938      	cbnz	r0, 800906c <__pow5mult+0x9c>
 800905c:	4622      	mov	r2, r4
 800905e:	4621      	mov	r1, r4
 8009060:	4630      	mov	r0, r6
 8009062:	f7ff ff0b 	bl	8008e7c <__multiply>
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	f8c0 9000 	str.w	r9, [r0]
 800906c:	4604      	mov	r4, r0
 800906e:	e7e4      	b.n	800903a <__pow5mult+0x6a>
 8009070:	4638      	mov	r0, r7
 8009072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009076:	bf00      	nop
 8009078:	0800aa28 	.word	0x0800aa28
 800907c:	0800a7f5 	.word	0x0800a7f5
 8009080:	0800a8d8 	.word	0x0800a8d8

08009084 <__lshift>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	460c      	mov	r4, r1
 800908a:	6849      	ldr	r1, [r1, #4]
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	4607      	mov	r7, r0
 8009096:	4691      	mov	r9, r2
 8009098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800909c:	f108 0601 	add.w	r6, r8, #1
 80090a0:	42b3      	cmp	r3, r6
 80090a2:	db0b      	blt.n	80090bc <__lshift+0x38>
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff fddb 	bl	8008c60 <_Balloc>
 80090aa:	4605      	mov	r5, r0
 80090ac:	b948      	cbnz	r0, 80090c2 <__lshift+0x3e>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b2a      	ldr	r3, [pc, #168]	; (800915c <__lshift+0xd8>)
 80090b2:	482b      	ldr	r0, [pc, #172]	; (8009160 <__lshift+0xdc>)
 80090b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090b8:	f000 fe28 	bl	8009d0c <__assert_func>
 80090bc:	3101      	adds	r1, #1
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	e7ee      	b.n	80090a0 <__lshift+0x1c>
 80090c2:	2300      	movs	r3, #0
 80090c4:	f100 0114 	add.w	r1, r0, #20
 80090c8:	f100 0210 	add.w	r2, r0, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	4553      	cmp	r3, sl
 80090d0:	db37      	blt.n	8009142 <__lshift+0xbe>
 80090d2:	6920      	ldr	r0, [r4, #16]
 80090d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d8:	f104 0314 	add.w	r3, r4, #20
 80090dc:	f019 091f 	ands.w	r9, r9, #31
 80090e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090e8:	d02f      	beq.n	800914a <__lshift+0xc6>
 80090ea:	f1c9 0e20 	rsb	lr, r9, #32
 80090ee:	468a      	mov	sl, r1
 80090f0:	f04f 0c00 	mov.w	ip, #0
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	fa02 f209 	lsl.w	r2, r2, r9
 80090fa:	ea42 020c 	orr.w	r2, r2, ip
 80090fe:	f84a 2b04 	str.w	r2, [sl], #4
 8009102:	f853 2b04 	ldr.w	r2, [r3], #4
 8009106:	4298      	cmp	r0, r3
 8009108:	fa22 fc0e 	lsr.w	ip, r2, lr
 800910c:	d8f2      	bhi.n	80090f4 <__lshift+0x70>
 800910e:	1b03      	subs	r3, r0, r4
 8009110:	3b15      	subs	r3, #21
 8009112:	f023 0303 	bic.w	r3, r3, #3
 8009116:	3304      	adds	r3, #4
 8009118:	f104 0215 	add.w	r2, r4, #21
 800911c:	4290      	cmp	r0, r2
 800911e:	bf38      	it	cc
 8009120:	2304      	movcc	r3, #4
 8009122:	f841 c003 	str.w	ip, [r1, r3]
 8009126:	f1bc 0f00 	cmp.w	ip, #0
 800912a:	d001      	beq.n	8009130 <__lshift+0xac>
 800912c:	f108 0602 	add.w	r6, r8, #2
 8009130:	3e01      	subs	r6, #1
 8009132:	4638      	mov	r0, r7
 8009134:	612e      	str	r6, [r5, #16]
 8009136:	4621      	mov	r1, r4
 8009138:	f7ff fdd2 	bl	8008ce0 <_Bfree>
 800913c:	4628      	mov	r0, r5
 800913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009142:	f842 0f04 	str.w	r0, [r2, #4]!
 8009146:	3301      	adds	r3, #1
 8009148:	e7c1      	b.n	80090ce <__lshift+0x4a>
 800914a:	3904      	subs	r1, #4
 800914c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009150:	f841 2f04 	str.w	r2, [r1, #4]!
 8009154:	4298      	cmp	r0, r3
 8009156:	d8f9      	bhi.n	800914c <__lshift+0xc8>
 8009158:	e7ea      	b.n	8009130 <__lshift+0xac>
 800915a:	bf00      	nop
 800915c:	0800a867 	.word	0x0800a867
 8009160:	0800a8d8 	.word	0x0800a8d8

08009164 <__mcmp>:
 8009164:	b530      	push	{r4, r5, lr}
 8009166:	6902      	ldr	r2, [r0, #16]
 8009168:	690c      	ldr	r4, [r1, #16]
 800916a:	1b12      	subs	r2, r2, r4
 800916c:	d10e      	bne.n	800918c <__mcmp+0x28>
 800916e:	f100 0314 	add.w	r3, r0, #20
 8009172:	3114      	adds	r1, #20
 8009174:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009178:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800917c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009180:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009184:	42a5      	cmp	r5, r4
 8009186:	d003      	beq.n	8009190 <__mcmp+0x2c>
 8009188:	d305      	bcc.n	8009196 <__mcmp+0x32>
 800918a:	2201      	movs	r2, #1
 800918c:	4610      	mov	r0, r2
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	4283      	cmp	r3, r0
 8009192:	d3f3      	bcc.n	800917c <__mcmp+0x18>
 8009194:	e7fa      	b.n	800918c <__mcmp+0x28>
 8009196:	f04f 32ff 	mov.w	r2, #4294967295
 800919a:	e7f7      	b.n	800918c <__mcmp+0x28>

0800919c <__mdiff>:
 800919c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	460c      	mov	r4, r1
 80091a2:	4606      	mov	r6, r0
 80091a4:	4611      	mov	r1, r2
 80091a6:	4620      	mov	r0, r4
 80091a8:	4690      	mov	r8, r2
 80091aa:	f7ff ffdb 	bl	8009164 <__mcmp>
 80091ae:	1e05      	subs	r5, r0, #0
 80091b0:	d110      	bne.n	80091d4 <__mdiff+0x38>
 80091b2:	4629      	mov	r1, r5
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff fd53 	bl	8008c60 <_Balloc>
 80091ba:	b930      	cbnz	r0, 80091ca <__mdiff+0x2e>
 80091bc:	4b3a      	ldr	r3, [pc, #232]	; (80092a8 <__mdiff+0x10c>)
 80091be:	4602      	mov	r2, r0
 80091c0:	f240 2132 	movw	r1, #562	; 0x232
 80091c4:	4839      	ldr	r0, [pc, #228]	; (80092ac <__mdiff+0x110>)
 80091c6:	f000 fda1 	bl	8009d0c <__assert_func>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	bfa4      	itt	ge
 80091d6:	4643      	movge	r3, r8
 80091d8:	46a0      	movge	r8, r4
 80091da:	4630      	mov	r0, r6
 80091dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091e0:	bfa6      	itte	ge
 80091e2:	461c      	movge	r4, r3
 80091e4:	2500      	movge	r5, #0
 80091e6:	2501      	movlt	r5, #1
 80091e8:	f7ff fd3a 	bl	8008c60 <_Balloc>
 80091ec:	b920      	cbnz	r0, 80091f8 <__mdiff+0x5c>
 80091ee:	4b2e      	ldr	r3, [pc, #184]	; (80092a8 <__mdiff+0x10c>)
 80091f0:	4602      	mov	r2, r0
 80091f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091f6:	e7e5      	b.n	80091c4 <__mdiff+0x28>
 80091f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091fc:	6926      	ldr	r6, [r4, #16]
 80091fe:	60c5      	str	r5, [r0, #12]
 8009200:	f104 0914 	add.w	r9, r4, #20
 8009204:	f108 0514 	add.w	r5, r8, #20
 8009208:	f100 0e14 	add.w	lr, r0, #20
 800920c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009210:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009214:	f108 0210 	add.w	r2, r8, #16
 8009218:	46f2      	mov	sl, lr
 800921a:	2100      	movs	r1, #0
 800921c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009224:	fa1f f883 	uxth.w	r8, r3
 8009228:	fa11 f18b 	uxtah	r1, r1, fp
 800922c:	0c1b      	lsrs	r3, r3, #16
 800922e:	eba1 0808 	sub.w	r8, r1, r8
 8009232:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009236:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800923a:	fa1f f888 	uxth.w	r8, r8
 800923e:	1419      	asrs	r1, r3, #16
 8009240:	454e      	cmp	r6, r9
 8009242:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009246:	f84a 3b04 	str.w	r3, [sl], #4
 800924a:	d8e7      	bhi.n	800921c <__mdiff+0x80>
 800924c:	1b33      	subs	r3, r6, r4
 800924e:	3b15      	subs	r3, #21
 8009250:	f023 0303 	bic.w	r3, r3, #3
 8009254:	3304      	adds	r3, #4
 8009256:	3415      	adds	r4, #21
 8009258:	42a6      	cmp	r6, r4
 800925a:	bf38      	it	cc
 800925c:	2304      	movcc	r3, #4
 800925e:	441d      	add	r5, r3
 8009260:	4473      	add	r3, lr
 8009262:	469e      	mov	lr, r3
 8009264:	462e      	mov	r6, r5
 8009266:	4566      	cmp	r6, ip
 8009268:	d30e      	bcc.n	8009288 <__mdiff+0xec>
 800926a:	f10c 0203 	add.w	r2, ip, #3
 800926e:	1b52      	subs	r2, r2, r5
 8009270:	f022 0203 	bic.w	r2, r2, #3
 8009274:	3d03      	subs	r5, #3
 8009276:	45ac      	cmp	ip, r5
 8009278:	bf38      	it	cc
 800927a:	2200      	movcc	r2, #0
 800927c:	441a      	add	r2, r3
 800927e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009282:	b17b      	cbz	r3, 80092a4 <__mdiff+0x108>
 8009284:	6107      	str	r7, [r0, #16]
 8009286:	e7a3      	b.n	80091d0 <__mdiff+0x34>
 8009288:	f856 8b04 	ldr.w	r8, [r6], #4
 800928c:	fa11 f288 	uxtah	r2, r1, r8
 8009290:	1414      	asrs	r4, r2, #16
 8009292:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009296:	b292      	uxth	r2, r2
 8009298:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800929c:	f84e 2b04 	str.w	r2, [lr], #4
 80092a0:	1421      	asrs	r1, r4, #16
 80092a2:	e7e0      	b.n	8009266 <__mdiff+0xca>
 80092a4:	3f01      	subs	r7, #1
 80092a6:	e7ea      	b.n	800927e <__mdiff+0xe2>
 80092a8:	0800a867 	.word	0x0800a867
 80092ac:	0800a8d8 	.word	0x0800a8d8

080092b0 <__d2b>:
 80092b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092b4:	4689      	mov	r9, r1
 80092b6:	2101      	movs	r1, #1
 80092b8:	ec57 6b10 	vmov	r6, r7, d0
 80092bc:	4690      	mov	r8, r2
 80092be:	f7ff fccf 	bl	8008c60 <_Balloc>
 80092c2:	4604      	mov	r4, r0
 80092c4:	b930      	cbnz	r0, 80092d4 <__d2b+0x24>
 80092c6:	4602      	mov	r2, r0
 80092c8:	4b25      	ldr	r3, [pc, #148]	; (8009360 <__d2b+0xb0>)
 80092ca:	4826      	ldr	r0, [pc, #152]	; (8009364 <__d2b+0xb4>)
 80092cc:	f240 310a 	movw	r1, #778	; 0x30a
 80092d0:	f000 fd1c 	bl	8009d0c <__assert_func>
 80092d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092dc:	bb35      	cbnz	r5, 800932c <__d2b+0x7c>
 80092de:	2e00      	cmp	r6, #0
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	d028      	beq.n	8009336 <__d2b+0x86>
 80092e4:	4668      	mov	r0, sp
 80092e6:	9600      	str	r6, [sp, #0]
 80092e8:	f7ff fd82 	bl	8008df0 <__lo0bits>
 80092ec:	9900      	ldr	r1, [sp, #0]
 80092ee:	b300      	cbz	r0, 8009332 <__d2b+0x82>
 80092f0:	9a01      	ldr	r2, [sp, #4]
 80092f2:	f1c0 0320 	rsb	r3, r0, #32
 80092f6:	fa02 f303 	lsl.w	r3, r2, r3
 80092fa:	430b      	orrs	r3, r1
 80092fc:	40c2      	lsrs	r2, r0
 80092fe:	6163      	str	r3, [r4, #20]
 8009300:	9201      	str	r2, [sp, #4]
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	61a3      	str	r3, [r4, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	bf14      	ite	ne
 800930a:	2202      	movne	r2, #2
 800930c:	2201      	moveq	r2, #1
 800930e:	6122      	str	r2, [r4, #16]
 8009310:	b1d5      	cbz	r5, 8009348 <__d2b+0x98>
 8009312:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009316:	4405      	add	r5, r0
 8009318:	f8c9 5000 	str.w	r5, [r9]
 800931c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009320:	f8c8 0000 	str.w	r0, [r8]
 8009324:	4620      	mov	r0, r4
 8009326:	b003      	add	sp, #12
 8009328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009330:	e7d5      	b.n	80092de <__d2b+0x2e>
 8009332:	6161      	str	r1, [r4, #20]
 8009334:	e7e5      	b.n	8009302 <__d2b+0x52>
 8009336:	a801      	add	r0, sp, #4
 8009338:	f7ff fd5a 	bl	8008df0 <__lo0bits>
 800933c:	9b01      	ldr	r3, [sp, #4]
 800933e:	6163      	str	r3, [r4, #20]
 8009340:	2201      	movs	r2, #1
 8009342:	6122      	str	r2, [r4, #16]
 8009344:	3020      	adds	r0, #32
 8009346:	e7e3      	b.n	8009310 <__d2b+0x60>
 8009348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800934c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009350:	f8c9 0000 	str.w	r0, [r9]
 8009354:	6918      	ldr	r0, [r3, #16]
 8009356:	f7ff fd2b 	bl	8008db0 <__hi0bits>
 800935a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800935e:	e7df      	b.n	8009320 <__d2b+0x70>
 8009360:	0800a867 	.word	0x0800a867
 8009364:	0800a8d8 	.word	0x0800a8d8

08009368 <_calloc_r>:
 8009368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800936a:	fba1 2402 	umull	r2, r4, r1, r2
 800936e:	b94c      	cbnz	r4, 8009384 <_calloc_r+0x1c>
 8009370:	4611      	mov	r1, r2
 8009372:	9201      	str	r2, [sp, #4]
 8009374:	f000 f87a 	bl	800946c <_malloc_r>
 8009378:	9a01      	ldr	r2, [sp, #4]
 800937a:	4605      	mov	r5, r0
 800937c:	b930      	cbnz	r0, 800938c <_calloc_r+0x24>
 800937e:	4628      	mov	r0, r5
 8009380:	b003      	add	sp, #12
 8009382:	bd30      	pop	{r4, r5, pc}
 8009384:	220c      	movs	r2, #12
 8009386:	6002      	str	r2, [r0, #0]
 8009388:	2500      	movs	r5, #0
 800938a:	e7f8      	b.n	800937e <_calloc_r+0x16>
 800938c:	4621      	mov	r1, r4
 800938e:	f7fe f8e3 	bl	8007558 <memset>
 8009392:	e7f4      	b.n	800937e <_calloc_r+0x16>

08009394 <_free_r>:
 8009394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009396:	2900      	cmp	r1, #0
 8009398:	d044      	beq.n	8009424 <_free_r+0x90>
 800939a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800939e:	9001      	str	r0, [sp, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f1a1 0404 	sub.w	r4, r1, #4
 80093a6:	bfb8      	it	lt
 80093a8:	18e4      	addlt	r4, r4, r3
 80093aa:	f000 fe55 	bl	800a058 <__malloc_lock>
 80093ae:	4a1e      	ldr	r2, [pc, #120]	; (8009428 <_free_r+0x94>)
 80093b0:	9801      	ldr	r0, [sp, #4]
 80093b2:	6813      	ldr	r3, [r2, #0]
 80093b4:	b933      	cbnz	r3, 80093c4 <_free_r+0x30>
 80093b6:	6063      	str	r3, [r4, #4]
 80093b8:	6014      	str	r4, [r2, #0]
 80093ba:	b003      	add	sp, #12
 80093bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093c0:	f000 be50 	b.w	800a064 <__malloc_unlock>
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d908      	bls.n	80093da <_free_r+0x46>
 80093c8:	6825      	ldr	r5, [r4, #0]
 80093ca:	1961      	adds	r1, r4, r5
 80093cc:	428b      	cmp	r3, r1
 80093ce:	bf01      	itttt	eq
 80093d0:	6819      	ldreq	r1, [r3, #0]
 80093d2:	685b      	ldreq	r3, [r3, #4]
 80093d4:	1949      	addeq	r1, r1, r5
 80093d6:	6021      	streq	r1, [r4, #0]
 80093d8:	e7ed      	b.n	80093b6 <_free_r+0x22>
 80093da:	461a      	mov	r2, r3
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	b10b      	cbz	r3, 80093e4 <_free_r+0x50>
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d9fa      	bls.n	80093da <_free_r+0x46>
 80093e4:	6811      	ldr	r1, [r2, #0]
 80093e6:	1855      	adds	r5, r2, r1
 80093e8:	42a5      	cmp	r5, r4
 80093ea:	d10b      	bne.n	8009404 <_free_r+0x70>
 80093ec:	6824      	ldr	r4, [r4, #0]
 80093ee:	4421      	add	r1, r4
 80093f0:	1854      	adds	r4, r2, r1
 80093f2:	42a3      	cmp	r3, r4
 80093f4:	6011      	str	r1, [r2, #0]
 80093f6:	d1e0      	bne.n	80093ba <_free_r+0x26>
 80093f8:	681c      	ldr	r4, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	6053      	str	r3, [r2, #4]
 80093fe:	4421      	add	r1, r4
 8009400:	6011      	str	r1, [r2, #0]
 8009402:	e7da      	b.n	80093ba <_free_r+0x26>
 8009404:	d902      	bls.n	800940c <_free_r+0x78>
 8009406:	230c      	movs	r3, #12
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	e7d6      	b.n	80093ba <_free_r+0x26>
 800940c:	6825      	ldr	r5, [r4, #0]
 800940e:	1961      	adds	r1, r4, r5
 8009410:	428b      	cmp	r3, r1
 8009412:	bf04      	itt	eq
 8009414:	6819      	ldreq	r1, [r3, #0]
 8009416:	685b      	ldreq	r3, [r3, #4]
 8009418:	6063      	str	r3, [r4, #4]
 800941a:	bf04      	itt	eq
 800941c:	1949      	addeq	r1, r1, r5
 800941e:	6021      	streq	r1, [r4, #0]
 8009420:	6054      	str	r4, [r2, #4]
 8009422:	e7ca      	b.n	80093ba <_free_r+0x26>
 8009424:	b003      	add	sp, #12
 8009426:	bd30      	pop	{r4, r5, pc}
 8009428:	24000570 	.word	0x24000570

0800942c <sbrk_aligned>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4e0e      	ldr	r6, [pc, #56]	; (8009468 <sbrk_aligned+0x3c>)
 8009430:	460c      	mov	r4, r1
 8009432:	6831      	ldr	r1, [r6, #0]
 8009434:	4605      	mov	r5, r0
 8009436:	b911      	cbnz	r1, 800943e <sbrk_aligned+0x12>
 8009438:	f000 fb42 	bl	8009ac0 <_sbrk_r>
 800943c:	6030      	str	r0, [r6, #0]
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f000 fb3d 	bl	8009ac0 <_sbrk_r>
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	d00a      	beq.n	8009460 <sbrk_aligned+0x34>
 800944a:	1cc4      	adds	r4, r0, #3
 800944c:	f024 0403 	bic.w	r4, r4, #3
 8009450:	42a0      	cmp	r0, r4
 8009452:	d007      	beq.n	8009464 <sbrk_aligned+0x38>
 8009454:	1a21      	subs	r1, r4, r0
 8009456:	4628      	mov	r0, r5
 8009458:	f000 fb32 	bl	8009ac0 <_sbrk_r>
 800945c:	3001      	adds	r0, #1
 800945e:	d101      	bne.n	8009464 <sbrk_aligned+0x38>
 8009460:	f04f 34ff 	mov.w	r4, #4294967295
 8009464:	4620      	mov	r0, r4
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	24000574 	.word	0x24000574

0800946c <_malloc_r>:
 800946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	1ccd      	adds	r5, r1, #3
 8009472:	f025 0503 	bic.w	r5, r5, #3
 8009476:	3508      	adds	r5, #8
 8009478:	2d0c      	cmp	r5, #12
 800947a:	bf38      	it	cc
 800947c:	250c      	movcc	r5, #12
 800947e:	2d00      	cmp	r5, #0
 8009480:	4607      	mov	r7, r0
 8009482:	db01      	blt.n	8009488 <_malloc_r+0x1c>
 8009484:	42a9      	cmp	r1, r5
 8009486:	d905      	bls.n	8009494 <_malloc_r+0x28>
 8009488:	230c      	movs	r3, #12
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	2600      	movs	r6, #0
 800948e:	4630      	mov	r0, r6
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	4e2e      	ldr	r6, [pc, #184]	; (8009550 <_malloc_r+0xe4>)
 8009496:	f000 fddf 	bl	800a058 <__malloc_lock>
 800949a:	6833      	ldr	r3, [r6, #0]
 800949c:	461c      	mov	r4, r3
 800949e:	bb34      	cbnz	r4, 80094ee <_malloc_r+0x82>
 80094a0:	4629      	mov	r1, r5
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7ff ffc2 	bl	800942c <sbrk_aligned>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	4604      	mov	r4, r0
 80094ac:	d14d      	bne.n	800954a <_malloc_r+0xde>
 80094ae:	6834      	ldr	r4, [r6, #0]
 80094b0:	4626      	mov	r6, r4
 80094b2:	2e00      	cmp	r6, #0
 80094b4:	d140      	bne.n	8009538 <_malloc_r+0xcc>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	4631      	mov	r1, r6
 80094ba:	4638      	mov	r0, r7
 80094bc:	eb04 0803 	add.w	r8, r4, r3
 80094c0:	f000 fafe 	bl	8009ac0 <_sbrk_r>
 80094c4:	4580      	cmp	r8, r0
 80094c6:	d13a      	bne.n	800953e <_malloc_r+0xd2>
 80094c8:	6821      	ldr	r1, [r4, #0]
 80094ca:	3503      	adds	r5, #3
 80094cc:	1a6d      	subs	r5, r5, r1
 80094ce:	f025 0503 	bic.w	r5, r5, #3
 80094d2:	3508      	adds	r5, #8
 80094d4:	2d0c      	cmp	r5, #12
 80094d6:	bf38      	it	cc
 80094d8:	250c      	movcc	r5, #12
 80094da:	4629      	mov	r1, r5
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff ffa5 	bl	800942c <sbrk_aligned>
 80094e2:	3001      	adds	r0, #1
 80094e4:	d02b      	beq.n	800953e <_malloc_r+0xd2>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	442b      	add	r3, r5
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	e00e      	b.n	800950c <_malloc_r+0xa0>
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	1b52      	subs	r2, r2, r5
 80094f2:	d41e      	bmi.n	8009532 <_malloc_r+0xc6>
 80094f4:	2a0b      	cmp	r2, #11
 80094f6:	d916      	bls.n	8009526 <_malloc_r+0xba>
 80094f8:	1961      	adds	r1, r4, r5
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	6025      	str	r5, [r4, #0]
 80094fe:	bf18      	it	ne
 8009500:	6059      	strne	r1, [r3, #4]
 8009502:	6863      	ldr	r3, [r4, #4]
 8009504:	bf08      	it	eq
 8009506:	6031      	streq	r1, [r6, #0]
 8009508:	5162      	str	r2, [r4, r5]
 800950a:	604b      	str	r3, [r1, #4]
 800950c:	4638      	mov	r0, r7
 800950e:	f104 060b 	add.w	r6, r4, #11
 8009512:	f000 fda7 	bl	800a064 <__malloc_unlock>
 8009516:	f026 0607 	bic.w	r6, r6, #7
 800951a:	1d23      	adds	r3, r4, #4
 800951c:	1af2      	subs	r2, r6, r3
 800951e:	d0b6      	beq.n	800948e <_malloc_r+0x22>
 8009520:	1b9b      	subs	r3, r3, r6
 8009522:	50a3      	str	r3, [r4, r2]
 8009524:	e7b3      	b.n	800948e <_malloc_r+0x22>
 8009526:	6862      	ldr	r2, [r4, #4]
 8009528:	42a3      	cmp	r3, r4
 800952a:	bf0c      	ite	eq
 800952c:	6032      	streq	r2, [r6, #0]
 800952e:	605a      	strne	r2, [r3, #4]
 8009530:	e7ec      	b.n	800950c <_malloc_r+0xa0>
 8009532:	4623      	mov	r3, r4
 8009534:	6864      	ldr	r4, [r4, #4]
 8009536:	e7b2      	b.n	800949e <_malloc_r+0x32>
 8009538:	4634      	mov	r4, r6
 800953a:	6876      	ldr	r6, [r6, #4]
 800953c:	e7b9      	b.n	80094b2 <_malloc_r+0x46>
 800953e:	230c      	movs	r3, #12
 8009540:	603b      	str	r3, [r7, #0]
 8009542:	4638      	mov	r0, r7
 8009544:	f000 fd8e 	bl	800a064 <__malloc_unlock>
 8009548:	e7a1      	b.n	800948e <_malloc_r+0x22>
 800954a:	6025      	str	r5, [r4, #0]
 800954c:	e7de      	b.n	800950c <_malloc_r+0xa0>
 800954e:	bf00      	nop
 8009550:	24000570 	.word	0x24000570

08009554 <__ssputs_r>:
 8009554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	688e      	ldr	r6, [r1, #8]
 800955a:	429e      	cmp	r6, r3
 800955c:	4682      	mov	sl, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4690      	mov	r8, r2
 8009562:	461f      	mov	r7, r3
 8009564:	d838      	bhi.n	80095d8 <__ssputs_r+0x84>
 8009566:	898a      	ldrh	r2, [r1, #12]
 8009568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800956c:	d032      	beq.n	80095d4 <__ssputs_r+0x80>
 800956e:	6825      	ldr	r5, [r4, #0]
 8009570:	6909      	ldr	r1, [r1, #16]
 8009572:	eba5 0901 	sub.w	r9, r5, r1
 8009576:	6965      	ldr	r5, [r4, #20]
 8009578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800957c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009580:	3301      	adds	r3, #1
 8009582:	444b      	add	r3, r9
 8009584:	106d      	asrs	r5, r5, #1
 8009586:	429d      	cmp	r5, r3
 8009588:	bf38      	it	cc
 800958a:	461d      	movcc	r5, r3
 800958c:	0553      	lsls	r3, r2, #21
 800958e:	d531      	bpl.n	80095f4 <__ssputs_r+0xa0>
 8009590:	4629      	mov	r1, r5
 8009592:	f7ff ff6b 	bl	800946c <_malloc_r>
 8009596:	4606      	mov	r6, r0
 8009598:	b950      	cbnz	r0, 80095b0 <__ssputs_r+0x5c>
 800959a:	230c      	movs	r3, #12
 800959c:	f8ca 3000 	str.w	r3, [sl]
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b0:	6921      	ldr	r1, [r4, #16]
 80095b2:	464a      	mov	r2, r9
 80095b4:	f7fd ffc2 	bl	800753c <memcpy>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	6126      	str	r6, [r4, #16]
 80095c6:	6165      	str	r5, [r4, #20]
 80095c8:	444e      	add	r6, r9
 80095ca:	eba5 0509 	sub.w	r5, r5, r9
 80095ce:	6026      	str	r6, [r4, #0]
 80095d0:	60a5      	str	r5, [r4, #8]
 80095d2:	463e      	mov	r6, r7
 80095d4:	42be      	cmp	r6, r7
 80095d6:	d900      	bls.n	80095da <__ssputs_r+0x86>
 80095d8:	463e      	mov	r6, r7
 80095da:	6820      	ldr	r0, [r4, #0]
 80095dc:	4632      	mov	r2, r6
 80095de:	4641      	mov	r1, r8
 80095e0:	f000 fd20 	bl	800a024 <memmove>
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	1b9b      	subs	r3, r3, r6
 80095e8:	60a3      	str	r3, [r4, #8]
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	4433      	add	r3, r6
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7db      	b.n	80095ac <__ssputs_r+0x58>
 80095f4:	462a      	mov	r2, r5
 80095f6:	f000 fd3b 	bl	800a070 <_realloc_r>
 80095fa:	4606      	mov	r6, r0
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d1e1      	bne.n	80095c4 <__ssputs_r+0x70>
 8009600:	6921      	ldr	r1, [r4, #16]
 8009602:	4650      	mov	r0, sl
 8009604:	f7ff fec6 	bl	8009394 <_free_r>
 8009608:	e7c7      	b.n	800959a <__ssputs_r+0x46>
	...

0800960c <_svfiprintf_r>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	4698      	mov	r8, r3
 8009612:	898b      	ldrh	r3, [r1, #12]
 8009614:	061b      	lsls	r3, r3, #24
 8009616:	b09d      	sub	sp, #116	; 0x74
 8009618:	4607      	mov	r7, r0
 800961a:	460d      	mov	r5, r1
 800961c:	4614      	mov	r4, r2
 800961e:	d50e      	bpl.n	800963e <_svfiprintf_r+0x32>
 8009620:	690b      	ldr	r3, [r1, #16]
 8009622:	b963      	cbnz	r3, 800963e <_svfiprintf_r+0x32>
 8009624:	2140      	movs	r1, #64	; 0x40
 8009626:	f7ff ff21 	bl	800946c <_malloc_r>
 800962a:	6028      	str	r0, [r5, #0]
 800962c:	6128      	str	r0, [r5, #16]
 800962e:	b920      	cbnz	r0, 800963a <_svfiprintf_r+0x2e>
 8009630:	230c      	movs	r3, #12
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	e0d1      	b.n	80097de <_svfiprintf_r+0x1d2>
 800963a:	2340      	movs	r3, #64	; 0x40
 800963c:	616b      	str	r3, [r5, #20]
 800963e:	2300      	movs	r3, #0
 8009640:	9309      	str	r3, [sp, #36]	; 0x24
 8009642:	2320      	movs	r3, #32
 8009644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009648:	f8cd 800c 	str.w	r8, [sp, #12]
 800964c:	2330      	movs	r3, #48	; 0x30
 800964e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097f8 <_svfiprintf_r+0x1ec>
 8009652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009656:	f04f 0901 	mov.w	r9, #1
 800965a:	4623      	mov	r3, r4
 800965c:	469a      	mov	sl, r3
 800965e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009662:	b10a      	cbz	r2, 8009668 <_svfiprintf_r+0x5c>
 8009664:	2a25      	cmp	r2, #37	; 0x25
 8009666:	d1f9      	bne.n	800965c <_svfiprintf_r+0x50>
 8009668:	ebba 0b04 	subs.w	fp, sl, r4
 800966c:	d00b      	beq.n	8009686 <_svfiprintf_r+0x7a>
 800966e:	465b      	mov	r3, fp
 8009670:	4622      	mov	r2, r4
 8009672:	4629      	mov	r1, r5
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ff6d 	bl	8009554 <__ssputs_r>
 800967a:	3001      	adds	r0, #1
 800967c:	f000 80aa 	beq.w	80097d4 <_svfiprintf_r+0x1c8>
 8009680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009682:	445a      	add	r2, fp
 8009684:	9209      	str	r2, [sp, #36]	; 0x24
 8009686:	f89a 3000 	ldrb.w	r3, [sl]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80a2 	beq.w	80097d4 <_svfiprintf_r+0x1c8>
 8009690:	2300      	movs	r3, #0
 8009692:	f04f 32ff 	mov.w	r2, #4294967295
 8009696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800969a:	f10a 0a01 	add.w	sl, sl, #1
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a6:	931a      	str	r3, [sp, #104]	; 0x68
 80096a8:	4654      	mov	r4, sl
 80096aa:	2205      	movs	r2, #5
 80096ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b0:	4851      	ldr	r0, [pc, #324]	; (80097f8 <_svfiprintf_r+0x1ec>)
 80096b2:	f7f6 fe1d 	bl	80002f0 <memchr>
 80096b6:	9a04      	ldr	r2, [sp, #16]
 80096b8:	b9d8      	cbnz	r0, 80096f2 <_svfiprintf_r+0xe6>
 80096ba:	06d0      	lsls	r0, r2, #27
 80096bc:	bf44      	itt	mi
 80096be:	2320      	movmi	r3, #32
 80096c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c4:	0711      	lsls	r1, r2, #28
 80096c6:	bf44      	itt	mi
 80096c8:	232b      	movmi	r3, #43	; 0x2b
 80096ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ce:	f89a 3000 	ldrb.w	r3, [sl]
 80096d2:	2b2a      	cmp	r3, #42	; 0x2a
 80096d4:	d015      	beq.n	8009702 <_svfiprintf_r+0xf6>
 80096d6:	9a07      	ldr	r2, [sp, #28]
 80096d8:	4654      	mov	r4, sl
 80096da:	2000      	movs	r0, #0
 80096dc:	f04f 0c0a 	mov.w	ip, #10
 80096e0:	4621      	mov	r1, r4
 80096e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e6:	3b30      	subs	r3, #48	; 0x30
 80096e8:	2b09      	cmp	r3, #9
 80096ea:	d94e      	bls.n	800978a <_svfiprintf_r+0x17e>
 80096ec:	b1b0      	cbz	r0, 800971c <_svfiprintf_r+0x110>
 80096ee:	9207      	str	r2, [sp, #28]
 80096f0:	e014      	b.n	800971c <_svfiprintf_r+0x110>
 80096f2:	eba0 0308 	sub.w	r3, r0, r8
 80096f6:	fa09 f303 	lsl.w	r3, r9, r3
 80096fa:	4313      	orrs	r3, r2
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	46a2      	mov	sl, r4
 8009700:	e7d2      	b.n	80096a8 <_svfiprintf_r+0x9c>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	1d19      	adds	r1, r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	9103      	str	r1, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbb      	ittet	lt
 800970e:	425b      	neglt	r3, r3
 8009710:	f042 0202 	orrlt.w	r2, r2, #2
 8009714:	9307      	strge	r3, [sp, #28]
 8009716:	9307      	strlt	r3, [sp, #28]
 8009718:	bfb8      	it	lt
 800971a:	9204      	strlt	r2, [sp, #16]
 800971c:	7823      	ldrb	r3, [r4, #0]
 800971e:	2b2e      	cmp	r3, #46	; 0x2e
 8009720:	d10c      	bne.n	800973c <_svfiprintf_r+0x130>
 8009722:	7863      	ldrb	r3, [r4, #1]
 8009724:	2b2a      	cmp	r3, #42	; 0x2a
 8009726:	d135      	bne.n	8009794 <_svfiprintf_r+0x188>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	9203      	str	r2, [sp, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	bfb8      	it	lt
 8009734:	f04f 33ff 	movlt.w	r3, #4294967295
 8009738:	3402      	adds	r4, #2
 800973a:	9305      	str	r3, [sp, #20]
 800973c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009808 <_svfiprintf_r+0x1fc>
 8009740:	7821      	ldrb	r1, [r4, #0]
 8009742:	2203      	movs	r2, #3
 8009744:	4650      	mov	r0, sl
 8009746:	f7f6 fdd3 	bl	80002f0 <memchr>
 800974a:	b140      	cbz	r0, 800975e <_svfiprintf_r+0x152>
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	eba0 000a 	sub.w	r0, r0, sl
 8009752:	fa03 f000 	lsl.w	r0, r3, r0
 8009756:	9b04      	ldr	r3, [sp, #16]
 8009758:	4303      	orrs	r3, r0
 800975a:	3401      	adds	r4, #1
 800975c:	9304      	str	r3, [sp, #16]
 800975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009762:	4826      	ldr	r0, [pc, #152]	; (80097fc <_svfiprintf_r+0x1f0>)
 8009764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009768:	2206      	movs	r2, #6
 800976a:	f7f6 fdc1 	bl	80002f0 <memchr>
 800976e:	2800      	cmp	r0, #0
 8009770:	d038      	beq.n	80097e4 <_svfiprintf_r+0x1d8>
 8009772:	4b23      	ldr	r3, [pc, #140]	; (8009800 <_svfiprintf_r+0x1f4>)
 8009774:	bb1b      	cbnz	r3, 80097be <_svfiprintf_r+0x1b2>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	3307      	adds	r3, #7
 800977a:	f023 0307 	bic.w	r3, r3, #7
 800977e:	3308      	adds	r3, #8
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009784:	4433      	add	r3, r6
 8009786:	9309      	str	r3, [sp, #36]	; 0x24
 8009788:	e767      	b.n	800965a <_svfiprintf_r+0x4e>
 800978a:	fb0c 3202 	mla	r2, ip, r2, r3
 800978e:	460c      	mov	r4, r1
 8009790:	2001      	movs	r0, #1
 8009792:	e7a5      	b.n	80096e0 <_svfiprintf_r+0xd4>
 8009794:	2300      	movs	r3, #0
 8009796:	3401      	adds	r4, #1
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	4619      	mov	r1, r3
 800979c:	f04f 0c0a 	mov.w	ip, #10
 80097a0:	4620      	mov	r0, r4
 80097a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a6:	3a30      	subs	r2, #48	; 0x30
 80097a8:	2a09      	cmp	r2, #9
 80097aa:	d903      	bls.n	80097b4 <_svfiprintf_r+0x1a8>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0c5      	beq.n	800973c <_svfiprintf_r+0x130>
 80097b0:	9105      	str	r1, [sp, #20]
 80097b2:	e7c3      	b.n	800973c <_svfiprintf_r+0x130>
 80097b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b8:	4604      	mov	r4, r0
 80097ba:	2301      	movs	r3, #1
 80097bc:	e7f0      	b.n	80097a0 <_svfiprintf_r+0x194>
 80097be:	ab03      	add	r3, sp, #12
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	462a      	mov	r2, r5
 80097c4:	4b0f      	ldr	r3, [pc, #60]	; (8009804 <_svfiprintf_r+0x1f8>)
 80097c6:	a904      	add	r1, sp, #16
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7fd ff5d 	bl	8007688 <_printf_float>
 80097ce:	1c42      	adds	r2, r0, #1
 80097d0:	4606      	mov	r6, r0
 80097d2:	d1d6      	bne.n	8009782 <_svfiprintf_r+0x176>
 80097d4:	89ab      	ldrh	r3, [r5, #12]
 80097d6:	065b      	lsls	r3, r3, #25
 80097d8:	f53f af2c 	bmi.w	8009634 <_svfiprintf_r+0x28>
 80097dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097de:	b01d      	add	sp, #116	; 0x74
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	ab03      	add	r3, sp, #12
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	462a      	mov	r2, r5
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <_svfiprintf_r+0x1f8>)
 80097ec:	a904      	add	r1, sp, #16
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7fe f9d6 	bl	8007ba0 <_printf_i>
 80097f4:	e7eb      	b.n	80097ce <_svfiprintf_r+0x1c2>
 80097f6:	bf00      	nop
 80097f8:	0800aa34 	.word	0x0800aa34
 80097fc:	0800aa3e 	.word	0x0800aa3e
 8009800:	08007689 	.word	0x08007689
 8009804:	08009555 	.word	0x08009555
 8009808:	0800aa3a 	.word	0x0800aa3a

0800980c <__sfputc_r>:
 800980c:	6893      	ldr	r3, [r2, #8]
 800980e:	3b01      	subs	r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	b410      	push	{r4}
 8009814:	6093      	str	r3, [r2, #8]
 8009816:	da08      	bge.n	800982a <__sfputc_r+0x1e>
 8009818:	6994      	ldr	r4, [r2, #24]
 800981a:	42a3      	cmp	r3, r4
 800981c:	db01      	blt.n	8009822 <__sfputc_r+0x16>
 800981e:	290a      	cmp	r1, #10
 8009820:	d103      	bne.n	800982a <__sfputc_r+0x1e>
 8009822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009826:	f000 b99f 	b.w	8009b68 <__swbuf_r>
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	1c58      	adds	r0, r3, #1
 800982e:	6010      	str	r0, [r2, #0]
 8009830:	7019      	strb	r1, [r3, #0]
 8009832:	4608      	mov	r0, r1
 8009834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009838:	4770      	bx	lr

0800983a <__sfputs_r>:
 800983a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983c:	4606      	mov	r6, r0
 800983e:	460f      	mov	r7, r1
 8009840:	4614      	mov	r4, r2
 8009842:	18d5      	adds	r5, r2, r3
 8009844:	42ac      	cmp	r4, r5
 8009846:	d101      	bne.n	800984c <__sfputs_r+0x12>
 8009848:	2000      	movs	r0, #0
 800984a:	e007      	b.n	800985c <__sfputs_r+0x22>
 800984c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009850:	463a      	mov	r2, r7
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff ffda 	bl	800980c <__sfputc_r>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d1f3      	bne.n	8009844 <__sfputs_r+0xa>
 800985c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009860 <_vfiprintf_r>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	460d      	mov	r5, r1
 8009866:	b09d      	sub	sp, #116	; 0x74
 8009868:	4614      	mov	r4, r2
 800986a:	4698      	mov	r8, r3
 800986c:	4606      	mov	r6, r0
 800986e:	b118      	cbz	r0, 8009878 <_vfiprintf_r+0x18>
 8009870:	6983      	ldr	r3, [r0, #24]
 8009872:	b90b      	cbnz	r3, 8009878 <_vfiprintf_r+0x18>
 8009874:	f7ff f946 	bl	8008b04 <__sinit>
 8009878:	4b89      	ldr	r3, [pc, #548]	; (8009aa0 <_vfiprintf_r+0x240>)
 800987a:	429d      	cmp	r5, r3
 800987c:	d11b      	bne.n	80098b6 <_vfiprintf_r+0x56>
 800987e:	6875      	ldr	r5, [r6, #4]
 8009880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009882:	07d9      	lsls	r1, r3, #31
 8009884:	d405      	bmi.n	8009892 <_vfiprintf_r+0x32>
 8009886:	89ab      	ldrh	r3, [r5, #12]
 8009888:	059a      	lsls	r2, r3, #22
 800988a:	d402      	bmi.n	8009892 <_vfiprintf_r+0x32>
 800988c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800988e:	f7ff f9dc 	bl	8008c4a <__retarget_lock_acquire_recursive>
 8009892:	89ab      	ldrh	r3, [r5, #12]
 8009894:	071b      	lsls	r3, r3, #28
 8009896:	d501      	bpl.n	800989c <_vfiprintf_r+0x3c>
 8009898:	692b      	ldr	r3, [r5, #16]
 800989a:	b9eb      	cbnz	r3, 80098d8 <_vfiprintf_r+0x78>
 800989c:	4629      	mov	r1, r5
 800989e:	4630      	mov	r0, r6
 80098a0:	f000 f9c6 	bl	8009c30 <__swsetup_r>
 80098a4:	b1c0      	cbz	r0, 80098d8 <_vfiprintf_r+0x78>
 80098a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098a8:	07dc      	lsls	r4, r3, #31
 80098aa:	d50e      	bpl.n	80098ca <_vfiprintf_r+0x6a>
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
 80098b0:	b01d      	add	sp, #116	; 0x74
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b6:	4b7b      	ldr	r3, [pc, #492]	; (8009aa4 <_vfiprintf_r+0x244>)
 80098b8:	429d      	cmp	r5, r3
 80098ba:	d101      	bne.n	80098c0 <_vfiprintf_r+0x60>
 80098bc:	68b5      	ldr	r5, [r6, #8]
 80098be:	e7df      	b.n	8009880 <_vfiprintf_r+0x20>
 80098c0:	4b79      	ldr	r3, [pc, #484]	; (8009aa8 <_vfiprintf_r+0x248>)
 80098c2:	429d      	cmp	r5, r3
 80098c4:	bf08      	it	eq
 80098c6:	68f5      	ldreq	r5, [r6, #12]
 80098c8:	e7da      	b.n	8009880 <_vfiprintf_r+0x20>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	0598      	lsls	r0, r3, #22
 80098ce:	d4ed      	bmi.n	80098ac <_vfiprintf_r+0x4c>
 80098d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d2:	f7ff f9bb 	bl	8008c4c <__retarget_lock_release_recursive>
 80098d6:	e7e9      	b.n	80098ac <_vfiprintf_r+0x4c>
 80098d8:	2300      	movs	r3, #0
 80098da:	9309      	str	r3, [sp, #36]	; 0x24
 80098dc:	2320      	movs	r3, #32
 80098de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e6:	2330      	movs	r3, #48	; 0x30
 80098e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009aac <_vfiprintf_r+0x24c>
 80098ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098f0:	f04f 0901 	mov.w	r9, #1
 80098f4:	4623      	mov	r3, r4
 80098f6:	469a      	mov	sl, r3
 80098f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fc:	b10a      	cbz	r2, 8009902 <_vfiprintf_r+0xa2>
 80098fe:	2a25      	cmp	r2, #37	; 0x25
 8009900:	d1f9      	bne.n	80098f6 <_vfiprintf_r+0x96>
 8009902:	ebba 0b04 	subs.w	fp, sl, r4
 8009906:	d00b      	beq.n	8009920 <_vfiprintf_r+0xc0>
 8009908:	465b      	mov	r3, fp
 800990a:	4622      	mov	r2, r4
 800990c:	4629      	mov	r1, r5
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff ff93 	bl	800983a <__sfputs_r>
 8009914:	3001      	adds	r0, #1
 8009916:	f000 80aa 	beq.w	8009a6e <_vfiprintf_r+0x20e>
 800991a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800991c:	445a      	add	r2, fp
 800991e:	9209      	str	r2, [sp, #36]	; 0x24
 8009920:	f89a 3000 	ldrb.w	r3, [sl]
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80a2 	beq.w	8009a6e <_vfiprintf_r+0x20e>
 800992a:	2300      	movs	r3, #0
 800992c:	f04f 32ff 	mov.w	r2, #4294967295
 8009930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009934:	f10a 0a01 	add.w	sl, sl, #1
 8009938:	9304      	str	r3, [sp, #16]
 800993a:	9307      	str	r3, [sp, #28]
 800993c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009940:	931a      	str	r3, [sp, #104]	; 0x68
 8009942:	4654      	mov	r4, sl
 8009944:	2205      	movs	r2, #5
 8009946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994a:	4858      	ldr	r0, [pc, #352]	; (8009aac <_vfiprintf_r+0x24c>)
 800994c:	f7f6 fcd0 	bl	80002f0 <memchr>
 8009950:	9a04      	ldr	r2, [sp, #16]
 8009952:	b9d8      	cbnz	r0, 800998c <_vfiprintf_r+0x12c>
 8009954:	06d1      	lsls	r1, r2, #27
 8009956:	bf44      	itt	mi
 8009958:	2320      	movmi	r3, #32
 800995a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800995e:	0713      	lsls	r3, r2, #28
 8009960:	bf44      	itt	mi
 8009962:	232b      	movmi	r3, #43	; 0x2b
 8009964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009968:	f89a 3000 	ldrb.w	r3, [sl]
 800996c:	2b2a      	cmp	r3, #42	; 0x2a
 800996e:	d015      	beq.n	800999c <_vfiprintf_r+0x13c>
 8009970:	9a07      	ldr	r2, [sp, #28]
 8009972:	4654      	mov	r4, sl
 8009974:	2000      	movs	r0, #0
 8009976:	f04f 0c0a 	mov.w	ip, #10
 800997a:	4621      	mov	r1, r4
 800997c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009980:	3b30      	subs	r3, #48	; 0x30
 8009982:	2b09      	cmp	r3, #9
 8009984:	d94e      	bls.n	8009a24 <_vfiprintf_r+0x1c4>
 8009986:	b1b0      	cbz	r0, 80099b6 <_vfiprintf_r+0x156>
 8009988:	9207      	str	r2, [sp, #28]
 800998a:	e014      	b.n	80099b6 <_vfiprintf_r+0x156>
 800998c:	eba0 0308 	sub.w	r3, r0, r8
 8009990:	fa09 f303 	lsl.w	r3, r9, r3
 8009994:	4313      	orrs	r3, r2
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	46a2      	mov	sl, r4
 800999a:	e7d2      	b.n	8009942 <_vfiprintf_r+0xe2>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	1d19      	adds	r1, r3, #4
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	9103      	str	r1, [sp, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bfbb      	ittet	lt
 80099a8:	425b      	neglt	r3, r3
 80099aa:	f042 0202 	orrlt.w	r2, r2, #2
 80099ae:	9307      	strge	r3, [sp, #28]
 80099b0:	9307      	strlt	r3, [sp, #28]
 80099b2:	bfb8      	it	lt
 80099b4:	9204      	strlt	r2, [sp, #16]
 80099b6:	7823      	ldrb	r3, [r4, #0]
 80099b8:	2b2e      	cmp	r3, #46	; 0x2e
 80099ba:	d10c      	bne.n	80099d6 <_vfiprintf_r+0x176>
 80099bc:	7863      	ldrb	r3, [r4, #1]
 80099be:	2b2a      	cmp	r3, #42	; 0x2a
 80099c0:	d135      	bne.n	8009a2e <_vfiprintf_r+0x1ce>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	1d1a      	adds	r2, r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9203      	str	r2, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfb8      	it	lt
 80099ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80099d2:	3402      	adds	r4, #2
 80099d4:	9305      	str	r3, [sp, #20]
 80099d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009abc <_vfiprintf_r+0x25c>
 80099da:	7821      	ldrb	r1, [r4, #0]
 80099dc:	2203      	movs	r2, #3
 80099de:	4650      	mov	r0, sl
 80099e0:	f7f6 fc86 	bl	80002f0 <memchr>
 80099e4:	b140      	cbz	r0, 80099f8 <_vfiprintf_r+0x198>
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	eba0 000a 	sub.w	r0, r0, sl
 80099ec:	fa03 f000 	lsl.w	r0, r3, r0
 80099f0:	9b04      	ldr	r3, [sp, #16]
 80099f2:	4303      	orrs	r3, r0
 80099f4:	3401      	adds	r4, #1
 80099f6:	9304      	str	r3, [sp, #16]
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	482c      	ldr	r0, [pc, #176]	; (8009ab0 <_vfiprintf_r+0x250>)
 80099fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a02:	2206      	movs	r2, #6
 8009a04:	f7f6 fc74 	bl	80002f0 <memchr>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d03f      	beq.n	8009a8c <_vfiprintf_r+0x22c>
 8009a0c:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <_vfiprintf_r+0x254>)
 8009a0e:	bb1b      	cbnz	r3, 8009a58 <_vfiprintf_r+0x1f8>
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	3307      	adds	r3, #7
 8009a14:	f023 0307 	bic.w	r3, r3, #7
 8009a18:	3308      	adds	r3, #8
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a1e:	443b      	add	r3, r7
 8009a20:	9309      	str	r3, [sp, #36]	; 0x24
 8009a22:	e767      	b.n	80098f4 <_vfiprintf_r+0x94>
 8009a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a28:	460c      	mov	r4, r1
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	e7a5      	b.n	800997a <_vfiprintf_r+0x11a>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	3401      	adds	r4, #1
 8009a32:	9305      	str	r3, [sp, #20]
 8009a34:	4619      	mov	r1, r3
 8009a36:	f04f 0c0a 	mov.w	ip, #10
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a40:	3a30      	subs	r2, #48	; 0x30
 8009a42:	2a09      	cmp	r2, #9
 8009a44:	d903      	bls.n	8009a4e <_vfiprintf_r+0x1ee>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0c5      	beq.n	80099d6 <_vfiprintf_r+0x176>
 8009a4a:	9105      	str	r1, [sp, #20]
 8009a4c:	e7c3      	b.n	80099d6 <_vfiprintf_r+0x176>
 8009a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a52:	4604      	mov	r4, r0
 8009a54:	2301      	movs	r3, #1
 8009a56:	e7f0      	b.n	8009a3a <_vfiprintf_r+0x1da>
 8009a58:	ab03      	add	r3, sp, #12
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	4b16      	ldr	r3, [pc, #88]	; (8009ab8 <_vfiprintf_r+0x258>)
 8009a60:	a904      	add	r1, sp, #16
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7fd fe10 	bl	8007688 <_printf_float>
 8009a68:	4607      	mov	r7, r0
 8009a6a:	1c78      	adds	r0, r7, #1
 8009a6c:	d1d6      	bne.n	8009a1c <_vfiprintf_r+0x1bc>
 8009a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a70:	07d9      	lsls	r1, r3, #31
 8009a72:	d405      	bmi.n	8009a80 <_vfiprintf_r+0x220>
 8009a74:	89ab      	ldrh	r3, [r5, #12]
 8009a76:	059a      	lsls	r2, r3, #22
 8009a78:	d402      	bmi.n	8009a80 <_vfiprintf_r+0x220>
 8009a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7c:	f7ff f8e6 	bl	8008c4c <__retarget_lock_release_recursive>
 8009a80:	89ab      	ldrh	r3, [r5, #12]
 8009a82:	065b      	lsls	r3, r3, #25
 8009a84:	f53f af12 	bmi.w	80098ac <_vfiprintf_r+0x4c>
 8009a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a8a:	e711      	b.n	80098b0 <_vfiprintf_r+0x50>
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	462a      	mov	r2, r5
 8009a92:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <_vfiprintf_r+0x258>)
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7fe f882 	bl	8007ba0 <_printf_i>
 8009a9c:	e7e4      	b.n	8009a68 <_vfiprintf_r+0x208>
 8009a9e:	bf00      	nop
 8009aa0:	0800a898 	.word	0x0800a898
 8009aa4:	0800a8b8 	.word	0x0800a8b8
 8009aa8:	0800a878 	.word	0x0800a878
 8009aac:	0800aa34 	.word	0x0800aa34
 8009ab0:	0800aa3e 	.word	0x0800aa3e
 8009ab4:	08007689 	.word	0x08007689
 8009ab8:	0800983b 	.word	0x0800983b
 8009abc:	0800aa3a 	.word	0x0800aa3a

08009ac0 <_sbrk_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d06      	ldr	r5, [pc, #24]	; (8009adc <_sbrk_r+0x1c>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	602b      	str	r3, [r5, #0]
 8009acc:	f7f8 fc34 	bl	8002338 <_sbrk>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_sbrk_r+0x1a>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_sbrk_r+0x1a>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	24000578 	.word	0x24000578

08009ae0 <__sread>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae8:	f000 faf2 	bl	800a0d0 <_read_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	bfab      	itete	ge
 8009af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009af2:	89a3      	ldrhlt	r3, [r4, #12]
 8009af4:	181b      	addge	r3, r3, r0
 8009af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009afa:	bfac      	ite	ge
 8009afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009afe:	81a3      	strhlt	r3, [r4, #12]
 8009b00:	bd10      	pop	{r4, pc}

08009b02 <__swrite>:
 8009b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b06:	461f      	mov	r7, r3
 8009b08:	898b      	ldrh	r3, [r1, #12]
 8009b0a:	05db      	lsls	r3, r3, #23
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	4616      	mov	r6, r2
 8009b12:	d505      	bpl.n	8009b20 <__swrite+0x1e>
 8009b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b18:	2302      	movs	r3, #2
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f000 f9f8 	bl	8009f10 <_lseek_r>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4628      	mov	r0, r5
 8009b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	f000 b869 	b.w	8009c0c <_write_r>

08009b3a <__sseek>:
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b42:	f000 f9e5 	bl	8009f10 <_lseek_r>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	bf15      	itete	ne
 8009b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b56:	81a3      	strheq	r3, [r4, #12]
 8009b58:	bf18      	it	ne
 8009b5a:	81a3      	strhne	r3, [r4, #12]
 8009b5c:	bd10      	pop	{r4, pc}

08009b5e <__sclose>:
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 b8f1 	b.w	8009d48 <_close_r>
	...

08009b68 <__swbuf_r>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	460e      	mov	r6, r1
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	4605      	mov	r5, r0
 8009b70:	b118      	cbz	r0, 8009b7a <__swbuf_r+0x12>
 8009b72:	6983      	ldr	r3, [r0, #24]
 8009b74:	b90b      	cbnz	r3, 8009b7a <__swbuf_r+0x12>
 8009b76:	f7fe ffc5 	bl	8008b04 <__sinit>
 8009b7a:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <__swbuf_r+0x98>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	d12b      	bne.n	8009bd8 <__swbuf_r+0x70>
 8009b80:	686c      	ldr	r4, [r5, #4]
 8009b82:	69a3      	ldr	r3, [r4, #24]
 8009b84:	60a3      	str	r3, [r4, #8]
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	071a      	lsls	r2, r3, #28
 8009b8a:	d52f      	bpl.n	8009bec <__swbuf_r+0x84>
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	b36b      	cbz	r3, 8009bec <__swbuf_r+0x84>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	1ac0      	subs	r0, r0, r3
 8009b96:	6963      	ldr	r3, [r4, #20]
 8009b98:	b2f6      	uxtb	r6, r6
 8009b9a:	4283      	cmp	r3, r0
 8009b9c:	4637      	mov	r7, r6
 8009b9e:	dc04      	bgt.n	8009baa <__swbuf_r+0x42>
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 f966 	bl	8009e74 <_fflush_r>
 8009ba8:	bb30      	cbnz	r0, 8009bf8 <__swbuf_r+0x90>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	60a3      	str	r3, [r4, #8]
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	6022      	str	r2, [r4, #0]
 8009bb6:	701e      	strb	r6, [r3, #0]
 8009bb8:	6963      	ldr	r3, [r4, #20]
 8009bba:	3001      	adds	r0, #1
 8009bbc:	4283      	cmp	r3, r0
 8009bbe:	d004      	beq.n	8009bca <__swbuf_r+0x62>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	07db      	lsls	r3, r3, #31
 8009bc4:	d506      	bpl.n	8009bd4 <__swbuf_r+0x6c>
 8009bc6:	2e0a      	cmp	r6, #10
 8009bc8:	d104      	bne.n	8009bd4 <__swbuf_r+0x6c>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 f951 	bl	8009e74 <_fflush_r>
 8009bd2:	b988      	cbnz	r0, 8009bf8 <__swbuf_r+0x90>
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <__swbuf_r+0x9c>)
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d101      	bne.n	8009be2 <__swbuf_r+0x7a>
 8009bde:	68ac      	ldr	r4, [r5, #8]
 8009be0:	e7cf      	b.n	8009b82 <__swbuf_r+0x1a>
 8009be2:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <__swbuf_r+0xa0>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	bf08      	it	eq
 8009be8:	68ec      	ldreq	r4, [r5, #12]
 8009bea:	e7ca      	b.n	8009b82 <__swbuf_r+0x1a>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f81e 	bl	8009c30 <__swsetup_r>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d0cb      	beq.n	8009b90 <__swbuf_r+0x28>
 8009bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8009bfc:	e7ea      	b.n	8009bd4 <__swbuf_r+0x6c>
 8009bfe:	bf00      	nop
 8009c00:	0800a898 	.word	0x0800a898
 8009c04:	0800a8b8 	.word	0x0800a8b8
 8009c08:	0800a878 	.word	0x0800a878

08009c0c <_write_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d07      	ldr	r5, [pc, #28]	; (8009c2c <_write_r+0x20>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	4611      	mov	r1, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f7f8 fb3b 	bl	8002296 <_write>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_write_r+0x1e>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_write_r+0x1e>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	24000578 	.word	0x24000578

08009c30 <__swsetup_r>:
 8009c30:	4b32      	ldr	r3, [pc, #200]	; (8009cfc <__swsetup_r+0xcc>)
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	681d      	ldr	r5, [r3, #0]
 8009c36:	4606      	mov	r6, r0
 8009c38:	460c      	mov	r4, r1
 8009c3a:	b125      	cbz	r5, 8009c46 <__swsetup_r+0x16>
 8009c3c:	69ab      	ldr	r3, [r5, #24]
 8009c3e:	b913      	cbnz	r3, 8009c46 <__swsetup_r+0x16>
 8009c40:	4628      	mov	r0, r5
 8009c42:	f7fe ff5f 	bl	8008b04 <__sinit>
 8009c46:	4b2e      	ldr	r3, [pc, #184]	; (8009d00 <__swsetup_r+0xd0>)
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	d10f      	bne.n	8009c6c <__swsetup_r+0x3c>
 8009c4c:	686c      	ldr	r4, [r5, #4]
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c54:	0719      	lsls	r1, r3, #28
 8009c56:	d42c      	bmi.n	8009cb2 <__swsetup_r+0x82>
 8009c58:	06dd      	lsls	r5, r3, #27
 8009c5a:	d411      	bmi.n	8009c80 <__swsetup_r+0x50>
 8009c5c:	2309      	movs	r3, #9
 8009c5e:	6033      	str	r3, [r6, #0]
 8009c60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6a:	e03e      	b.n	8009cea <__swsetup_r+0xba>
 8009c6c:	4b25      	ldr	r3, [pc, #148]	; (8009d04 <__swsetup_r+0xd4>)
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	d101      	bne.n	8009c76 <__swsetup_r+0x46>
 8009c72:	68ac      	ldr	r4, [r5, #8]
 8009c74:	e7eb      	b.n	8009c4e <__swsetup_r+0x1e>
 8009c76:	4b24      	ldr	r3, [pc, #144]	; (8009d08 <__swsetup_r+0xd8>)
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	bf08      	it	eq
 8009c7c:	68ec      	ldreq	r4, [r5, #12]
 8009c7e:	e7e6      	b.n	8009c4e <__swsetup_r+0x1e>
 8009c80:	0758      	lsls	r0, r3, #29
 8009c82:	d512      	bpl.n	8009caa <__swsetup_r+0x7a>
 8009c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c86:	b141      	cbz	r1, 8009c9a <__swsetup_r+0x6a>
 8009c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <__swsetup_r+0x66>
 8009c90:	4630      	mov	r0, r6
 8009c92:	f7ff fb7f 	bl	8009394 <_free_r>
 8009c96:	2300      	movs	r3, #0
 8009c98:	6363      	str	r3, [r4, #52]	; 0x34
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	f043 0308 	orr.w	r3, r3, #8
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	b94b      	cbnz	r3, 8009cca <__swsetup_r+0x9a>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc0:	d003      	beq.n	8009cca <__swsetup_r+0x9a>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 f95b 	bl	8009f80 <__smakebuf_r>
 8009cca:	89a0      	ldrh	r0, [r4, #12]
 8009ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cd0:	f010 0301 	ands.w	r3, r0, #1
 8009cd4:	d00a      	beq.n	8009cec <__swsetup_r+0xbc>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60a3      	str	r3, [r4, #8]
 8009cda:	6963      	ldr	r3, [r4, #20]
 8009cdc:	425b      	negs	r3, r3
 8009cde:	61a3      	str	r3, [r4, #24]
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	b943      	cbnz	r3, 8009cf6 <__swsetup_r+0xc6>
 8009ce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ce8:	d1ba      	bne.n	8009c60 <__swsetup_r+0x30>
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	0781      	lsls	r1, r0, #30
 8009cee:	bf58      	it	pl
 8009cf0:	6963      	ldrpl	r3, [r4, #20]
 8009cf2:	60a3      	str	r3, [r4, #8]
 8009cf4:	e7f4      	b.n	8009ce0 <__swsetup_r+0xb0>
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e7f7      	b.n	8009cea <__swsetup_r+0xba>
 8009cfa:	bf00      	nop
 8009cfc:	24000018 	.word	0x24000018
 8009d00:	0800a898 	.word	0x0800a898
 8009d04:	0800a8b8 	.word	0x0800a8b8
 8009d08:	0800a878 	.word	0x0800a878

08009d0c <__assert_func>:
 8009d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d0e:	4614      	mov	r4, r2
 8009d10:	461a      	mov	r2, r3
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <__assert_func+0x2c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4605      	mov	r5, r0
 8009d18:	68d8      	ldr	r0, [r3, #12]
 8009d1a:	b14c      	cbz	r4, 8009d30 <__assert_func+0x24>
 8009d1c:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <__assert_func+0x30>)
 8009d1e:	9100      	str	r1, [sp, #0]
 8009d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d24:	4906      	ldr	r1, [pc, #24]	; (8009d40 <__assert_func+0x34>)
 8009d26:	462b      	mov	r3, r5
 8009d28:	f000 f8e0 	bl	8009eec <fiprintf>
 8009d2c:	f000 f9ef 	bl	800a10e <abort>
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <__assert_func+0x38>)
 8009d32:	461c      	mov	r4, r3
 8009d34:	e7f3      	b.n	8009d1e <__assert_func+0x12>
 8009d36:	bf00      	nop
 8009d38:	24000018 	.word	0x24000018
 8009d3c:	0800aa45 	.word	0x0800aa45
 8009d40:	0800aa52 	.word	0x0800aa52
 8009d44:	0800aa80 	.word	0x0800aa80

08009d48 <_close_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d06      	ldr	r5, [pc, #24]	; (8009d64 <_close_r+0x1c>)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4608      	mov	r0, r1
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	f7f8 fabb 	bl	80022ce <_close>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_close_r+0x1a>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_close_r+0x1a>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	24000578 	.word	0x24000578

08009d68 <__sflush_r>:
 8009d68:	898a      	ldrh	r2, [r1, #12]
 8009d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	4605      	mov	r5, r0
 8009d70:	0710      	lsls	r0, r2, #28
 8009d72:	460c      	mov	r4, r1
 8009d74:	d458      	bmi.n	8009e28 <__sflush_r+0xc0>
 8009d76:	684b      	ldr	r3, [r1, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dc05      	bgt.n	8009d88 <__sflush_r+0x20>
 8009d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dc02      	bgt.n	8009d88 <__sflush_r+0x20>
 8009d82:	2000      	movs	r0, #0
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	d0f9      	beq.n	8009d82 <__sflush_r+0x1a>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d94:	682f      	ldr	r7, [r5, #0]
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	d032      	beq.n	8009e00 <__sflush_r+0x98>
 8009d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	075a      	lsls	r2, r3, #29
 8009da0:	d505      	bpl.n	8009dae <__sflush_r+0x46>
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	1ac0      	subs	r0, r0, r3
 8009da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da8:	b10b      	cbz	r3, 8009dae <__sflush_r+0x46>
 8009daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dac:	1ac0      	subs	r0, r0, r3
 8009dae:	2300      	movs	r3, #0
 8009db0:	4602      	mov	r2, r0
 8009db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009db4:	6a21      	ldr	r1, [r4, #32]
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b0      	blx	r6
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	d106      	bne.n	8009dce <__sflush_r+0x66>
 8009dc0:	6829      	ldr	r1, [r5, #0]
 8009dc2:	291d      	cmp	r1, #29
 8009dc4:	d82c      	bhi.n	8009e20 <__sflush_r+0xb8>
 8009dc6:	4a2a      	ldr	r2, [pc, #168]	; (8009e70 <__sflush_r+0x108>)
 8009dc8:	40ca      	lsrs	r2, r1
 8009dca:	07d6      	lsls	r6, r2, #31
 8009dcc:	d528      	bpl.n	8009e20 <__sflush_r+0xb8>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	6062      	str	r2, [r4, #4]
 8009dd2:	04d9      	lsls	r1, r3, #19
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	6022      	str	r2, [r4, #0]
 8009dd8:	d504      	bpl.n	8009de4 <__sflush_r+0x7c>
 8009dda:	1c42      	adds	r2, r0, #1
 8009ddc:	d101      	bne.n	8009de2 <__sflush_r+0x7a>
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	b903      	cbnz	r3, 8009de4 <__sflush_r+0x7c>
 8009de2:	6560      	str	r0, [r4, #84]	; 0x54
 8009de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de6:	602f      	str	r7, [r5, #0]
 8009de8:	2900      	cmp	r1, #0
 8009dea:	d0ca      	beq.n	8009d82 <__sflush_r+0x1a>
 8009dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df0:	4299      	cmp	r1, r3
 8009df2:	d002      	beq.n	8009dfa <__sflush_r+0x92>
 8009df4:	4628      	mov	r0, r5
 8009df6:	f7ff facd 	bl	8009394 <_free_r>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8009dfe:	e7c1      	b.n	8009d84 <__sflush_r+0x1c>
 8009e00:	6a21      	ldr	r1, [r4, #32]
 8009e02:	2301      	movs	r3, #1
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b0      	blx	r6
 8009e08:	1c41      	adds	r1, r0, #1
 8009e0a:	d1c7      	bne.n	8009d9c <__sflush_r+0x34>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0c4      	beq.n	8009d9c <__sflush_r+0x34>
 8009e12:	2b1d      	cmp	r3, #29
 8009e14:	d001      	beq.n	8009e1a <__sflush_r+0xb2>
 8009e16:	2b16      	cmp	r3, #22
 8009e18:	d101      	bne.n	8009e1e <__sflush_r+0xb6>
 8009e1a:	602f      	str	r7, [r5, #0]
 8009e1c:	e7b1      	b.n	8009d82 <__sflush_r+0x1a>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	e7ad      	b.n	8009d84 <__sflush_r+0x1c>
 8009e28:	690f      	ldr	r7, [r1, #16]
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	d0a9      	beq.n	8009d82 <__sflush_r+0x1a>
 8009e2e:	0793      	lsls	r3, r2, #30
 8009e30:	680e      	ldr	r6, [r1, #0]
 8009e32:	bf08      	it	eq
 8009e34:	694b      	ldreq	r3, [r1, #20]
 8009e36:	600f      	str	r7, [r1, #0]
 8009e38:	bf18      	it	ne
 8009e3a:	2300      	movne	r3, #0
 8009e3c:	eba6 0807 	sub.w	r8, r6, r7
 8009e40:	608b      	str	r3, [r1, #8]
 8009e42:	f1b8 0f00 	cmp.w	r8, #0
 8009e46:	dd9c      	ble.n	8009d82 <__sflush_r+0x1a>
 8009e48:	6a21      	ldr	r1, [r4, #32]
 8009e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e4c:	4643      	mov	r3, r8
 8009e4e:	463a      	mov	r2, r7
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b0      	blx	r6
 8009e54:	2800      	cmp	r0, #0
 8009e56:	dc06      	bgt.n	8009e66 <__sflush_r+0xfe>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	e78e      	b.n	8009d84 <__sflush_r+0x1c>
 8009e66:	4407      	add	r7, r0
 8009e68:	eba8 0800 	sub.w	r8, r8, r0
 8009e6c:	e7e9      	b.n	8009e42 <__sflush_r+0xda>
 8009e6e:	bf00      	nop
 8009e70:	20400001 	.word	0x20400001

08009e74 <_fflush_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	690b      	ldr	r3, [r1, #16]
 8009e78:	4605      	mov	r5, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	b913      	cbnz	r3, 8009e84 <_fflush_r+0x10>
 8009e7e:	2500      	movs	r5, #0
 8009e80:	4628      	mov	r0, r5
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	b118      	cbz	r0, 8009e8e <_fflush_r+0x1a>
 8009e86:	6983      	ldr	r3, [r0, #24]
 8009e88:	b90b      	cbnz	r3, 8009e8e <_fflush_r+0x1a>
 8009e8a:	f7fe fe3b 	bl	8008b04 <__sinit>
 8009e8e:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <_fflush_r+0x6c>)
 8009e90:	429c      	cmp	r4, r3
 8009e92:	d11b      	bne.n	8009ecc <_fflush_r+0x58>
 8009e94:	686c      	ldr	r4, [r5, #4]
 8009e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0ef      	beq.n	8009e7e <_fflush_r+0xa>
 8009e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ea0:	07d0      	lsls	r0, r2, #31
 8009ea2:	d404      	bmi.n	8009eae <_fflush_r+0x3a>
 8009ea4:	0599      	lsls	r1, r3, #22
 8009ea6:	d402      	bmi.n	8009eae <_fflush_r+0x3a>
 8009ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eaa:	f7fe fece 	bl	8008c4a <__retarget_lock_acquire_recursive>
 8009eae:	4628      	mov	r0, r5
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	f7ff ff59 	bl	8009d68 <__sflush_r>
 8009eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eb8:	07da      	lsls	r2, r3, #31
 8009eba:	4605      	mov	r5, r0
 8009ebc:	d4e0      	bmi.n	8009e80 <_fflush_r+0xc>
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	059b      	lsls	r3, r3, #22
 8009ec2:	d4dd      	bmi.n	8009e80 <_fflush_r+0xc>
 8009ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ec6:	f7fe fec1 	bl	8008c4c <__retarget_lock_release_recursive>
 8009eca:	e7d9      	b.n	8009e80 <_fflush_r+0xc>
 8009ecc:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <_fflush_r+0x70>)
 8009ece:	429c      	cmp	r4, r3
 8009ed0:	d101      	bne.n	8009ed6 <_fflush_r+0x62>
 8009ed2:	68ac      	ldr	r4, [r5, #8]
 8009ed4:	e7df      	b.n	8009e96 <_fflush_r+0x22>
 8009ed6:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <_fflush_r+0x74>)
 8009ed8:	429c      	cmp	r4, r3
 8009eda:	bf08      	it	eq
 8009edc:	68ec      	ldreq	r4, [r5, #12]
 8009ede:	e7da      	b.n	8009e96 <_fflush_r+0x22>
 8009ee0:	0800a898 	.word	0x0800a898
 8009ee4:	0800a8b8 	.word	0x0800a8b8
 8009ee8:	0800a878 	.word	0x0800a878

08009eec <fiprintf>:
 8009eec:	b40e      	push	{r1, r2, r3}
 8009eee:	b503      	push	{r0, r1, lr}
 8009ef0:	4601      	mov	r1, r0
 8009ef2:	ab03      	add	r3, sp, #12
 8009ef4:	4805      	ldr	r0, [pc, #20]	; (8009f0c <fiprintf+0x20>)
 8009ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efa:	6800      	ldr	r0, [r0, #0]
 8009efc:	9301      	str	r3, [sp, #4]
 8009efe:	f7ff fcaf 	bl	8009860 <_vfiprintf_r>
 8009f02:	b002      	add	sp, #8
 8009f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f08:	b003      	add	sp, #12
 8009f0a:	4770      	bx	lr
 8009f0c:	24000018 	.word	0x24000018

08009f10 <_lseek_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d07      	ldr	r5, [pc, #28]	; (8009f30 <_lseek_r+0x20>)
 8009f14:	4604      	mov	r4, r0
 8009f16:	4608      	mov	r0, r1
 8009f18:	4611      	mov	r1, r2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	602a      	str	r2, [r5, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f7f8 f9fc 	bl	800231c <_lseek>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_lseek_r+0x1e>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_lseek_r+0x1e>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	24000578 	.word	0x24000578

08009f34 <__swhatbuf_r>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	460e      	mov	r6, r1
 8009f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	b096      	sub	sp, #88	; 0x58
 8009f40:	4614      	mov	r4, r2
 8009f42:	461d      	mov	r5, r3
 8009f44:	da08      	bge.n	8009f58 <__swhatbuf_r+0x24>
 8009f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	602a      	str	r2, [r5, #0]
 8009f4e:	061a      	lsls	r2, r3, #24
 8009f50:	d410      	bmi.n	8009f74 <__swhatbuf_r+0x40>
 8009f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f56:	e00e      	b.n	8009f76 <__swhatbuf_r+0x42>
 8009f58:	466a      	mov	r2, sp
 8009f5a:	f000 f8df 	bl	800a11c <_fstat_r>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	dbf1      	blt.n	8009f46 <__swhatbuf_r+0x12>
 8009f62:	9a01      	ldr	r2, [sp, #4]
 8009f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f6c:	425a      	negs	r2, r3
 8009f6e:	415a      	adcs	r2, r3
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	e7ee      	b.n	8009f52 <__swhatbuf_r+0x1e>
 8009f74:	2340      	movs	r3, #64	; 0x40
 8009f76:	2000      	movs	r0, #0
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	b016      	add	sp, #88	; 0x58
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f80 <__smakebuf_r>:
 8009f80:	898b      	ldrh	r3, [r1, #12]
 8009f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f84:	079d      	lsls	r5, r3, #30
 8009f86:	4606      	mov	r6, r0
 8009f88:	460c      	mov	r4, r1
 8009f8a:	d507      	bpl.n	8009f9c <__smakebuf_r+0x1c>
 8009f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	6123      	str	r3, [r4, #16]
 8009f94:	2301      	movs	r3, #1
 8009f96:	6163      	str	r3, [r4, #20]
 8009f98:	b002      	add	sp, #8
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	ab01      	add	r3, sp, #4
 8009f9e:	466a      	mov	r2, sp
 8009fa0:	f7ff ffc8 	bl	8009f34 <__swhatbuf_r>
 8009fa4:	9900      	ldr	r1, [sp, #0]
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff fa5f 	bl	800946c <_malloc_r>
 8009fae:	b948      	cbnz	r0, 8009fc4 <__smakebuf_r+0x44>
 8009fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb4:	059a      	lsls	r2, r3, #22
 8009fb6:	d4ef      	bmi.n	8009f98 <__smakebuf_r+0x18>
 8009fb8:	f023 0303 	bic.w	r3, r3, #3
 8009fbc:	f043 0302 	orr.w	r3, r3, #2
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	e7e3      	b.n	8009f8c <__smakebuf_r+0xc>
 8009fc4:	4b0d      	ldr	r3, [pc, #52]	; (8009ffc <__smakebuf_r+0x7c>)
 8009fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	6020      	str	r0, [r4, #0]
 8009fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd0:	81a3      	strh	r3, [r4, #12]
 8009fd2:	9b00      	ldr	r3, [sp, #0]
 8009fd4:	6163      	str	r3, [r4, #20]
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	6120      	str	r0, [r4, #16]
 8009fda:	b15b      	cbz	r3, 8009ff4 <__smakebuf_r+0x74>
 8009fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f000 f8ad 	bl	800a140 <_isatty_r>
 8009fe6:	b128      	cbz	r0, 8009ff4 <__smakebuf_r+0x74>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	f023 0303 	bic.w	r3, r3, #3
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	89a0      	ldrh	r0, [r4, #12]
 8009ff6:	4305      	orrs	r5, r0
 8009ff8:	81a5      	strh	r5, [r4, #12]
 8009ffa:	e7cd      	b.n	8009f98 <__smakebuf_r+0x18>
 8009ffc:	08008a9d 	.word	0x08008a9d

0800a000 <__ascii_mbtowc>:
 800a000:	b082      	sub	sp, #8
 800a002:	b901      	cbnz	r1, 800a006 <__ascii_mbtowc+0x6>
 800a004:	a901      	add	r1, sp, #4
 800a006:	b142      	cbz	r2, 800a01a <__ascii_mbtowc+0x1a>
 800a008:	b14b      	cbz	r3, 800a01e <__ascii_mbtowc+0x1e>
 800a00a:	7813      	ldrb	r3, [r2, #0]
 800a00c:	600b      	str	r3, [r1, #0]
 800a00e:	7812      	ldrb	r2, [r2, #0]
 800a010:	1e10      	subs	r0, r2, #0
 800a012:	bf18      	it	ne
 800a014:	2001      	movne	r0, #1
 800a016:	b002      	add	sp, #8
 800a018:	4770      	bx	lr
 800a01a:	4610      	mov	r0, r2
 800a01c:	e7fb      	b.n	800a016 <__ascii_mbtowc+0x16>
 800a01e:	f06f 0001 	mvn.w	r0, #1
 800a022:	e7f8      	b.n	800a016 <__ascii_mbtowc+0x16>

0800a024 <memmove>:
 800a024:	4288      	cmp	r0, r1
 800a026:	b510      	push	{r4, lr}
 800a028:	eb01 0402 	add.w	r4, r1, r2
 800a02c:	d902      	bls.n	800a034 <memmove+0x10>
 800a02e:	4284      	cmp	r4, r0
 800a030:	4623      	mov	r3, r4
 800a032:	d807      	bhi.n	800a044 <memmove+0x20>
 800a034:	1e43      	subs	r3, r0, #1
 800a036:	42a1      	cmp	r1, r4
 800a038:	d008      	beq.n	800a04c <memmove+0x28>
 800a03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a042:	e7f8      	b.n	800a036 <memmove+0x12>
 800a044:	4402      	add	r2, r0
 800a046:	4601      	mov	r1, r0
 800a048:	428a      	cmp	r2, r1
 800a04a:	d100      	bne.n	800a04e <memmove+0x2a>
 800a04c:	bd10      	pop	{r4, pc}
 800a04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a056:	e7f7      	b.n	800a048 <memmove+0x24>

0800a058 <__malloc_lock>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__malloc_lock+0x8>)
 800a05a:	f7fe bdf6 	b.w	8008c4a <__retarget_lock_acquire_recursive>
 800a05e:	bf00      	nop
 800a060:	2400056c 	.word	0x2400056c

0800a064 <__malloc_unlock>:
 800a064:	4801      	ldr	r0, [pc, #4]	; (800a06c <__malloc_unlock+0x8>)
 800a066:	f7fe bdf1 	b.w	8008c4c <__retarget_lock_release_recursive>
 800a06a:	bf00      	nop
 800a06c:	2400056c 	.word	0x2400056c

0800a070 <_realloc_r>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	4680      	mov	r8, r0
 800a076:	4614      	mov	r4, r2
 800a078:	460e      	mov	r6, r1
 800a07a:	b921      	cbnz	r1, 800a086 <_realloc_r+0x16>
 800a07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	4611      	mov	r1, r2
 800a082:	f7ff b9f3 	b.w	800946c <_malloc_r>
 800a086:	b92a      	cbnz	r2, 800a094 <_realloc_r+0x24>
 800a088:	f7ff f984 	bl	8009394 <_free_r>
 800a08c:	4625      	mov	r5, r4
 800a08e:	4628      	mov	r0, r5
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	f000 f864 	bl	800a160 <_malloc_usable_size_r>
 800a098:	4284      	cmp	r4, r0
 800a09a:	4607      	mov	r7, r0
 800a09c:	d802      	bhi.n	800a0a4 <_realloc_r+0x34>
 800a09e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0a2:	d812      	bhi.n	800a0ca <_realloc_r+0x5a>
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	f7ff f9e0 	bl	800946c <_malloc_r>
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d0ed      	beq.n	800a08e <_realloc_r+0x1e>
 800a0b2:	42bc      	cmp	r4, r7
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	bf28      	it	cs
 800a0ba:	463a      	movcs	r2, r7
 800a0bc:	f7fd fa3e 	bl	800753c <memcpy>
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	f7ff f966 	bl	8009394 <_free_r>
 800a0c8:	e7e1      	b.n	800a08e <_realloc_r+0x1e>
 800a0ca:	4635      	mov	r5, r6
 800a0cc:	e7df      	b.n	800a08e <_realloc_r+0x1e>
	...

0800a0d0 <_read_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	; (800a0f0 <_read_r+0x20>)
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f8 f8bc 	bl	800225c <_read>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_read_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_read_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	24000578 	.word	0x24000578

0800a0f4 <__ascii_wctomb>:
 800a0f4:	b149      	cbz	r1, 800a10a <__ascii_wctomb+0x16>
 800a0f6:	2aff      	cmp	r2, #255	; 0xff
 800a0f8:	bf85      	ittet	hi
 800a0fa:	238a      	movhi	r3, #138	; 0x8a
 800a0fc:	6003      	strhi	r3, [r0, #0]
 800a0fe:	700a      	strbls	r2, [r1, #0]
 800a100:	f04f 30ff 	movhi.w	r0, #4294967295
 800a104:	bf98      	it	ls
 800a106:	2001      	movls	r0, #1
 800a108:	4770      	bx	lr
 800a10a:	4608      	mov	r0, r1
 800a10c:	4770      	bx	lr

0800a10e <abort>:
 800a10e:	b508      	push	{r3, lr}
 800a110:	2006      	movs	r0, #6
 800a112:	f000 f855 	bl	800a1c0 <raise>
 800a116:	2001      	movs	r0, #1
 800a118:	f7f8 f896 	bl	8002248 <_exit>

0800a11c <_fstat_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d07      	ldr	r5, [pc, #28]	; (800a13c <_fstat_r+0x20>)
 800a120:	2300      	movs	r3, #0
 800a122:	4604      	mov	r4, r0
 800a124:	4608      	mov	r0, r1
 800a126:	4611      	mov	r1, r2
 800a128:	602b      	str	r3, [r5, #0]
 800a12a:	f7f8 f8dc 	bl	80022e6 <_fstat>
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	d102      	bne.n	800a138 <_fstat_r+0x1c>
 800a132:	682b      	ldr	r3, [r5, #0]
 800a134:	b103      	cbz	r3, 800a138 <_fstat_r+0x1c>
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	bd38      	pop	{r3, r4, r5, pc}
 800a13a:	bf00      	nop
 800a13c:	24000578 	.word	0x24000578

0800a140 <_isatty_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d06      	ldr	r5, [pc, #24]	; (800a15c <_isatty_r+0x1c>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	f7f8 f8db 	bl	8002306 <_isatty>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_isatty_r+0x1a>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_isatty_r+0x1a>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	24000578 	.word	0x24000578

0800a160 <_malloc_usable_size_r>:
 800a160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a164:	1f18      	subs	r0, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfbc      	itt	lt
 800a16a:	580b      	ldrlt	r3, [r1, r0]
 800a16c:	18c0      	addlt	r0, r0, r3
 800a16e:	4770      	bx	lr

0800a170 <_raise_r>:
 800a170:	291f      	cmp	r1, #31
 800a172:	b538      	push	{r3, r4, r5, lr}
 800a174:	4604      	mov	r4, r0
 800a176:	460d      	mov	r5, r1
 800a178:	d904      	bls.n	800a184 <_raise_r+0x14>
 800a17a:	2316      	movs	r3, #22
 800a17c:	6003      	str	r3, [r0, #0]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a186:	b112      	cbz	r2, 800a18e <_raise_r+0x1e>
 800a188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a18c:	b94b      	cbnz	r3, 800a1a2 <_raise_r+0x32>
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 f830 	bl	800a1f4 <_getpid_r>
 800a194:	462a      	mov	r2, r5
 800a196:	4601      	mov	r1, r0
 800a198:	4620      	mov	r0, r4
 800a19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a19e:	f000 b817 	b.w	800a1d0 <_kill_r>
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d00a      	beq.n	800a1bc <_raise_r+0x4c>
 800a1a6:	1c59      	adds	r1, r3, #1
 800a1a8:	d103      	bne.n	800a1b2 <_raise_r+0x42>
 800a1aa:	2316      	movs	r3, #22
 800a1ac:	6003      	str	r3, [r0, #0]
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	e7e7      	b.n	800a182 <_raise_r+0x12>
 800a1b2:	2400      	movs	r4, #0
 800a1b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	4798      	blx	r3
 800a1bc:	2000      	movs	r0, #0
 800a1be:	e7e0      	b.n	800a182 <_raise_r+0x12>

0800a1c0 <raise>:
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <raise+0xc>)
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	f7ff bfd3 	b.w	800a170 <_raise_r>
 800a1ca:	bf00      	nop
 800a1cc:	24000018 	.word	0x24000018

0800a1d0 <_kill_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_kill_r+0x20>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	4611      	mov	r1, r2
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	f7f8 f823 	bl	8002228 <_kill>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	d102      	bne.n	800a1ec <_kill_r+0x1c>
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	b103      	cbz	r3, 800a1ec <_kill_r+0x1c>
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	bd38      	pop	{r3, r4, r5, pc}
 800a1ee:	bf00      	nop
 800a1f0:	24000578 	.word	0x24000578

0800a1f4 <_getpid_r>:
 800a1f4:	f7f8 b810 	b.w	8002218 <_getpid>

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

0800a204 <_fini>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr
