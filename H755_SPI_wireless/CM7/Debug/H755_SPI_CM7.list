
H755_SPI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08007978  08007978  00017978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f40  08007f40  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  08007f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  24000098  08007fdc  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000354  08007fdc  00020354  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d14  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002493  00000000  00000000  00033dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00036270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a4f6  00000000  00000000  00037eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012320  00000000  00000000  000723ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017fd43  00000000  00000000  000846ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00204411  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004020  00000000  00000000  00204464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007960 	.word	0x08007960

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08007960 	.word	0x08007960

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f001 ff8f 	bl	8002740 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff86 	bl	8002740 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000c4 	.word	0x240000c4
 8000840:	240000c8 	.word	0x240000c8

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f001 ff6f 	bl	8002740 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ff66 	bl	8002740 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000c4 	.word	0x240000c4
 8000880:	240000ca 	.word	0x240000ca

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fc14 	bl	80050d4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f004 fdfe 	bl	80054b8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000cc 	.word	0x240000cc

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fbe9 	bl	80050d4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f004 fdd4 	bl	80054b8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000cc 	.word	0x240000cc

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fbbf 	bl	80050d4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000cc 	.word	0x240000cc

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fb9f 	bl	80050d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fb98 	bl	80050d4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000cc 	.word	0x240000cc

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f004 fb6f 	bl	80050d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f004 fd5a 	bl	80054b8 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000cc 	.word	0x240000cc

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f006 fafe 	bl	8007074 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fb8e 	bl	80021b8 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa75 	bl	8001090 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa85 	bl	80010c4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f94b 	bl	8000e5e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f981 	bl	8000ed0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9c4 	bl	8000f5c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f916 	bl	8000e04 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa4e 	bl	800107e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 f9dc 	bl	8000fac <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000cc 	.word	0x240000cc
 8000c08:	240000c4 	.word	0x240000c4
 8000c0c:	240000c8 	.word	0x240000c8
 8000c10:	240000ca 	.word	0x240000ca

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000b8 	.word	0x240000b8

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9b0 	bl	8000fca <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000b8 	.word	0x240000b8
 8000d40:	08007ecc 	.word	0x08007ecc
 8000d44:	08007ed4 	.word	0x08007ed4
 8000d48:	240000c0 	.word	0x240000c0

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000c0 	.word	0x240000c0

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000c0 	.word	0x240000c0

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	201c      	movs	r0, #28
 8000e22:	f7ff fd7f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e26:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <NRF24_disableDynamicPayloads+0x2c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240000c1 	.word	0x240000c1

08000e34 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e44:	213f      	movs	r1, #63	; 0x3f
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fd6c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e4c:	e003      	b.n	8000e56 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fd67 	bl	8000924 <NRF24_write_register>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff fd0b 	bl	8000884 <NRF24_read_register>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f023 0306 	bic.w	r3, r3, #6
 8000e78:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d104      	bne.n	8000e8a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 0306 	orr.w	r3, r3, #6
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d104      	bne.n	8000e9a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e011      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d104      	bne.n	8000eaa <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e009      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d103      	bne.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0306 	orr.w	r3, r3, #6
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fd2e 	bl	8000924 <NRF24_write_register>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f7ff fcd0 	bl	8000884 <NRF24_read_register>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000ef4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	73bb      	strb	r3, [r7, #14]
 8000f0a:	e00d      	b.n	8000f28 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d107      	bne.n	8000f22 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	e002      	b.n	8000f28 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f7ff fcf9 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f32:	2006      	movs	r0, #6
 8000f34:	f7ff fca6 	bl	8000884 <NRF24_read_register>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d102      	bne.n	8000f48 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e002      	b.n	8000f4e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	240000c2 	.word	0x240000c2

08000f5c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fc8c 	bl	8000884 <NRF24_read_register>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f023 030c 	bic.w	r3, r3, #12
 8000f72:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00f      	beq.n	8000f9a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d104      	bne.n	8000f8a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e007      	b.n	8000f9a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fcc0 	bl	8000924 <NRF24_write_register>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fc67 	bl	8000884 <NRF24_read_register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f023 0302 	bic.w	r3, r3, #2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fcaf 	bl	8000924 <NRF24_write_register>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fd2:	f7ff fd31 	bl	8000a38 <NRF24_get_status>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d017      	beq.n	8001020 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	2007      	movs	r0, #7
 800100a:	f7ff fc8b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001018:	2120      	movs	r1, #32
 800101a:	2007      	movs	r0, #7
 800101c:	f7ff fc82 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001020:	7bbb      	ldrb	r3, [r7, #14]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	6039      	str	r1, [r7, #0]
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	4613      	mov	r3, r2
 8001038:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800103e:	2320      	movs	r3, #32
 8001040:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001042:	7afa      	ldrb	r2, [r7, #11]
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	4293      	cmp	r3, r2
 8001048:	bf28      	it	cs
 800104a:	4613      	movcs	r3, r2
 800104c:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(0);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fbd8 	bl	8000804 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	b25b      	sxtb	r3, r3
 800105e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001062:	b25b      	sxtb	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	7aba      	ldrb	r2, [r7, #10]
 8001068:	68f9      	ldr	r1, [r7, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fc7c 	bl	8000968 <NRF24_write_registerN>
  NRF24_csn(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff fbc7 	bl	8000804 <NRF24_csn>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001082:	2170      	movs	r1, #112	; 0x70
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff fc4d 	bl	8000924 <NRF24_write_register>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff fbb4 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800109c:	2350      	movs	r3, #80	; 0x50
 800109e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010a0:	2373      	movs	r3, #115	; 0x73
 80010a2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010a4:	1d39      	adds	r1, r7, #4
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2202      	movs	r2, #2
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <NRF24_ACTIVATE_cmd+0x30>)
 80010ac:	f004 f812 	bl	80050d4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fba7 	bl	8000804 <NRF24_csn>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	240000cc 	.word	0x240000cc

080010c4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b0a1      	sub	sp, #132	; 0x84
 80010c8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	49c3      	ldr	r1, [pc, #780]	; (80013dc <printRadioSettings+0x318>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 ffe5 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f900 	bl	80002e0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 0108 	add.w	r1, r7, #8
 80010e8:	230a      	movs	r3, #10
 80010ea:	48bd      	ldr	r0, [pc, #756]	; (80013e0 <printRadioSettings+0x31c>)
 80010ec:	f004 fee1 	bl	8005eb2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fbc7 	bl	8000884 <NRF24_read_register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001108:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <printRadioSettings+0x5e>
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	49b2      	ldr	r1, [pc, #712]	; (80013e4 <printRadioSettings+0x320>)
 800111a:	4618      	mov	r0, r3
 800111c:	f005 ffc0 	bl	80070a0 <siprintf>
 8001120:	e00c      	b.n	800113c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	49b0      	ldr	r1, [pc, #704]	; (80013e8 <printRadioSettings+0x324>)
 8001128:	4618      	mov	r0, r3
 800112a:	f005 ffb9 	bl	80070a0 <siprintf>
 800112e:	e005      	b.n	800113c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	49ad      	ldr	r1, [pc, #692]	; (80013ec <printRadioSettings+0x328>)
 8001136:	4618      	mov	r0, r3
 8001138:	f005 ffb2 	bl	80070a0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f8cd 	bl	80002e0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	230a      	movs	r3, #10
 8001150:	48a3      	ldr	r0, [pc, #652]	; (80013e0 <printRadioSettings+0x31c>)
 8001152:	f004 feae 	bl	8005eb2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fb94 	bl	8000884 <NRF24_read_register>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001166:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800116a:	2b00      	cmp	r3, #0
 800116c:	bfcc      	ite	gt
 800116e:	2301      	movgt	r3, #1
 8001170:	2300      	movle	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001176:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800117a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117e:	2b00      	cmp	r3, #0
 8001180:	bfcc      	ite	gt
 8001182:	2301      	movgt	r3, #1
 8001184:	2300      	movle	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800118a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001192:	2b00      	cmp	r3, #0
 8001194:	bfcc      	ite	gt
 8001196:	2301      	movgt	r3, #1
 8001198:	2300      	movle	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bfcc      	ite	gt
 80011aa:	2301      	movgt	r3, #1
 80011ac:	2300      	movle	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bfcc      	ite	gt
 80011be:	2301      	movgt	r3, #1
 80011c0:	2300      	movle	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ca:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bfcc      	ite	gt
 80011d2:	2301      	movgt	r3, #1
 80011d4:	2300      	movle	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f107 0008 	add.w	r0, r7, #8
 80011dc:	9303      	str	r3, [sp, #12]
 80011de:	9402      	str	r4, [sp, #8]
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	4633      	mov	r3, r6
 80011e6:	462a      	mov	r2, r5
 80011e8:	4981      	ldr	r1, [pc, #516]	; (80013f0 <printRadioSettings+0x32c>)
 80011ea:	f005 ff59 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f874 	bl	80002e0 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f107 0108 	add.w	r1, r7, #8
 8001200:	230a      	movs	r3, #10
 8001202:	4877      	ldr	r0, [pc, #476]	; (80013e0 <printRadioSettings+0x31c>)
 8001204:	f004 fe55 	bl	8005eb2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff fb3b 	bl	8000884 <NRF24_read_register>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001218:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800121c:	2b00      	cmp	r3, #0
 800121e:	bfcc      	ite	gt
 8001220:	2301      	movgt	r3, #1
 8001222:	2300      	movle	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001228:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800122c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001230:	2b00      	cmp	r3, #0
 8001232:	bfcc      	ite	gt
 8001234:	2301      	movgt	r3, #1
 8001236:	2300      	movle	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800123c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001240:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001244:	2b00      	cmp	r3, #0
 8001246:	bfcc      	ite	gt
 8001248:	2301      	movgt	r3, #1
 800124a:	2300      	movle	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001250:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001254:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001258:	2b00      	cmp	r3, #0
 800125a:	bfcc      	ite	gt
 800125c:	2301      	movgt	r3, #1
 800125e:	2300      	movle	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001264:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001268:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800126c:	2b00      	cmp	r3, #0
 800126e:	bfcc      	ite	gt
 8001270:	2301      	movgt	r3, #1
 8001272:	2300      	movle	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001278:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800127c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001280:	2b00      	cmp	r3, #0
 8001282:	bfcc      	ite	gt
 8001284:	2301      	movgt	r3, #1
 8001286:	2300      	movle	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f107 0008 	add.w	r0, r7, #8
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	9402      	str	r4, [sp, #8]
 8001292:	9101      	str	r1, [sp, #4]
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	4633      	mov	r3, r6
 8001298:	462a      	mov	r2, r5
 800129a:	4956      	ldr	r1, [pc, #344]	; (80013f4 <printRadioSettings+0x330>)
 800129c:	f005 ff00 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f81b 	bl	80002e0 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f107 0108 	add.w	r1, r7, #8
 80012b2:	230a      	movs	r3, #10
 80012b4:	484a      	ldr	r0, [pc, #296]	; (80013e0 <printRadioSettings+0x31c>)
 80012b6:	f004 fdfc 	bl	8005eb2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ba:	2003      	movs	r0, #3
 80012bc:	f7ff fae2 	bl	8000884 <NRF24_read_register>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ce:	3302      	adds	r3, #2
 80012d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012d4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4946      	ldr	r1, [pc, #280]	; (80013f8 <printRadioSettings+0x334>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f005 fede 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe fff9 	bl	80002e0 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f107 0108 	add.w	r1, r7, #8
 80012f6:	230a      	movs	r3, #10
 80012f8:	4839      	ldr	r0, [pc, #228]	; (80013e0 <printRadioSettings+0x31c>)
 80012fa:	f004 fdda 	bl	8005eb2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012fe:	2005      	movs	r0, #5
 8001300:	f7ff fac0 	bl	8000884 <NRF24_read_register>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800130a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800130e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4939      	ldr	r1, [pc, #228]	; (80013fc <printRadioSettings+0x338>)
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fec1 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ffdc 	bl	80002e0 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	f107 0108 	add.w	r1, r7, #8
 8001330:	230a      	movs	r3, #10
 8001332:	482b      	ldr	r0, [pc, #172]	; (80013e0 <printRadioSettings+0x31c>)
 8001334:	f004 fdbd 	bl	8005eb2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001338:	2006      	movs	r0, #6
 800133a:	f7ff faa3 	bl	8000884 <NRF24_read_register>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001344:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <printRadioSettings+0x29a>
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	492a      	ldr	r1, [pc, #168]	; (8001400 <printRadioSettings+0x33c>)
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fea2 	bl	80070a0 <siprintf>
 800135c:	e005      	b.n	800136a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4928      	ldr	r1, [pc, #160]	; (8001404 <printRadioSettings+0x340>)
 8001364:	4618      	mov	r0, r3
 8001366:	f005 fe9b 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ffb6 	bl	80002e0 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	f107 0108 	add.w	r1, r7, #8
 800137c:	230a      	movs	r3, #10
 800137e:	4818      	ldr	r0, [pc, #96]	; (80013e0 <printRadioSettings+0x31c>)
 8001380:	f004 fd97 	bl	8005eb2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001384:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001388:	f003 0306 	and.w	r3, r3, #6
 800138c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001390:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800139a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <printRadioSettings+0x2ec>
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4918      	ldr	r1, [pc, #96]	; (8001408 <printRadioSettings+0x344>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 fe79 	bl	80070a0 <siprintf>
 80013ae:	e03b      	b.n	8001428 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <printRadioSettings+0x302>
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4913      	ldr	r1, [pc, #76]	; (800140c <printRadioSettings+0x348>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 fe6e 	bl	80070a0 <siprintf>
 80013c4:	e030      	b.n	8001428 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d122      	bne.n	8001414 <printRadioSettings+0x350>
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	490f      	ldr	r1, [pc, #60]	; (8001410 <printRadioSettings+0x34c>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 fe63 	bl	80070a0 <siprintf>
 80013da:	e025      	b.n	8001428 <printRadioSettings+0x364>
 80013dc:	08007978 	.word	0x08007978
 80013e0:	24000154 	.word	0x24000154
 80013e4:	080079ac 	.word	0x080079ac
 80013e8:	080079c8 	.word	0x080079c8
 80013ec:	080079e4 	.word	0x080079e4
 80013f0:	080079f8 	.word	0x080079f8
 80013f4:	08007a3c 	.word	0x08007a3c
 80013f8:	08007a88 	.word	0x08007a88
 80013fc:	08007aa4 	.word	0x08007aa4
 8001400:	08007ab8 	.word	0x08007ab8
 8001404:	08007ad0 	.word	0x08007ad0
 8001408:	08007ae8 	.word	0x08007ae8
 800140c:	08007afc 	.word	0x08007afc
 8001410:	08007b10 	.word	0x08007b10
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001414:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001418:	2b03      	cmp	r3, #3
 800141a:	d105      	bne.n	8001428 <printRadioSettings+0x364>
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	49d7      	ldr	r1, [pc, #860]	; (8001780 <printRadioSettings+0x6bc>)
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fe3c 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ff57 	bl	80002e0 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	f107 0108 	add.w	r1, r7, #8
 800143a:	230a      	movs	r3, #10
 800143c:	48d1      	ldr	r0, [pc, #836]	; (8001784 <printRadioSettings+0x6c0>)
 800143e:	f004 fd38 	bl	8005eb2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001442:	463b      	mov	r3, r7
 8001444:	2205      	movs	r2, #5
 8001446:	4619      	mov	r1, r3
 8001448:	200a      	movs	r0, #10
 800144a:	f7ff fa43 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800144e:	793b      	ldrb	r3, [r7, #4]
 8001450:	461c      	mov	r4, r3
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	461d      	mov	r5, r3
 8001456:	78bb      	ldrb	r3, [r7, #2]
 8001458:	787a      	ldrb	r2, [r7, #1]
 800145a:	7839      	ldrb	r1, [r7, #0]
 800145c:	f107 0008 	add.w	r0, r7, #8
 8001460:	9102      	str	r1, [sp, #8]
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	462b      	mov	r3, r5
 8001468:	4622      	mov	r2, r4
 800146a:	49c7      	ldr	r1, [pc, #796]	; (8001788 <printRadioSettings+0x6c4>)
 800146c:	f005 fe18 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ff33 	bl	80002e0 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f107 0108 	add.w	r1, r7, #8
 8001482:	230a      	movs	r3, #10
 8001484:	48bf      	ldr	r0, [pc, #764]	; (8001784 <printRadioSettings+0x6c0>)
 8001486:	f004 fd14 	bl	8005eb2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800148a:	463b      	mov	r3, r7
 800148c:	2205      	movs	r2, #5
 800148e:	4619      	mov	r1, r3
 8001490:	200b      	movs	r0, #11
 8001492:	f7ff fa1f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001496:	793b      	ldrb	r3, [r7, #4]
 8001498:	461c      	mov	r4, r3
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	461d      	mov	r5, r3
 800149e:	78bb      	ldrb	r3, [r7, #2]
 80014a0:	787a      	ldrb	r2, [r7, #1]
 80014a2:	7839      	ldrb	r1, [r7, #0]
 80014a4:	f107 0008 	add.w	r0, r7, #8
 80014a8:	9102      	str	r1, [sp, #8]
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	462b      	mov	r3, r5
 80014b0:	4622      	mov	r2, r4
 80014b2:	49b6      	ldr	r1, [pc, #728]	; (800178c <printRadioSettings+0x6c8>)
 80014b4:	f005 fdf4 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ff0f 	bl	80002e0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f107 0108 	add.w	r1, r7, #8
 80014ca:	230a      	movs	r3, #10
 80014cc:	48ad      	ldr	r0, [pc, #692]	; (8001784 <printRadioSettings+0x6c0>)
 80014ce:	f004 fcf0 	bl	8005eb2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014d2:	463b      	mov	r3, r7
 80014d4:	2201      	movs	r2, #1
 80014d6:	4619      	mov	r1, r3
 80014d8:	200c      	movs	r0, #12
 80014da:	f7ff f9fb 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014de:	783b      	ldrb	r3, [r7, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	49aa      	ldr	r1, [pc, #680]	; (8001790 <printRadioSettings+0x6cc>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f005 fdd9 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fef4 	bl	80002e0 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f107 0108 	add.w	r1, r7, #8
 8001500:	230a      	movs	r3, #10
 8001502:	48a0      	ldr	r0, [pc, #640]	; (8001784 <printRadioSettings+0x6c0>)
 8001504:	f004 fcd5 	bl	8005eb2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001508:	463b      	mov	r3, r7
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	200d      	movs	r0, #13
 8001510:	f7ff f9e0 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001514:	783b      	ldrb	r3, [r7, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	499d      	ldr	r1, [pc, #628]	; (8001794 <printRadioSettings+0x6d0>)
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fdbe 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fed9 	bl	80002e0 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f107 0108 	add.w	r1, r7, #8
 8001536:	230a      	movs	r3, #10
 8001538:	4892      	ldr	r0, [pc, #584]	; (8001784 <printRadioSettings+0x6c0>)
 800153a:	f004 fcba 	bl	8005eb2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800153e:	463b      	mov	r3, r7
 8001540:	2201      	movs	r2, #1
 8001542:	4619      	mov	r1, r3
 8001544:	200e      	movs	r0, #14
 8001546:	f7ff f9c5 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800154a:	783b      	ldrb	r3, [r7, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4991      	ldr	r1, [pc, #580]	; (8001798 <printRadioSettings+0x6d4>)
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fda3 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe febe 	bl	80002e0 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f107 0108 	add.w	r1, r7, #8
 800156c:	230a      	movs	r3, #10
 800156e:	4885      	ldr	r0, [pc, #532]	; (8001784 <printRadioSettings+0x6c0>)
 8001570:	f004 fc9f 	bl	8005eb2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001574:	463b      	mov	r3, r7
 8001576:	2201      	movs	r2, #1
 8001578:	4619      	mov	r1, r3
 800157a:	200f      	movs	r0, #15
 800157c:	f7ff f9aa 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001580:	783b      	ldrb	r3, [r7, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4984      	ldr	r1, [pc, #528]	; (800179c <printRadioSettings+0x6d8>)
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fd88 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fea3 	bl	80002e0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	230a      	movs	r3, #10
 80015a4:	4877      	ldr	r0, [pc, #476]	; (8001784 <printRadioSettings+0x6c0>)
 80015a6:	f004 fc84 	bl	8005eb2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015aa:	463b      	mov	r3, r7
 80015ac:	2205      	movs	r2, #5
 80015ae:	4619      	mov	r1, r3
 80015b0:	2010      	movs	r0, #16
 80015b2:	f7ff f98f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015b6:	793b      	ldrb	r3, [r7, #4]
 80015b8:	461c      	mov	r4, r3
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	461d      	mov	r5, r3
 80015be:	78bb      	ldrb	r3, [r7, #2]
 80015c0:	787a      	ldrb	r2, [r7, #1]
 80015c2:	7839      	ldrb	r1, [r7, #0]
 80015c4:	f107 0008 	add.w	r0, r7, #8
 80015c8:	9102      	str	r1, [sp, #8]
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	462b      	mov	r3, r5
 80015d0:	4622      	mov	r2, r4
 80015d2:	4973      	ldr	r1, [pc, #460]	; (80017a0 <printRadioSettings+0x6dc>)
 80015d4:	f005 fd64 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fe7f 	bl	80002e0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f107 0108 	add.w	r1, r7, #8
 80015ea:	230a      	movs	r3, #10
 80015ec:	4865      	ldr	r0, [pc, #404]	; (8001784 <printRadioSettings+0x6c0>)
 80015ee:	f004 fc60 	bl	8005eb2 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80015f2:	2011      	movs	r0, #17
 80015f4:	f7ff f946 	bl	8000884 <NRF24_read_register>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4966      	ldr	r1, [pc, #408]	; (80017a4 <printRadioSettings+0x6e0>)
 800160c:	4618      	mov	r0, r3
 800160e:	f005 fd47 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fe62 	bl	80002e0 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	b29a      	uxth	r2, r3
 8001620:	f107 0108 	add.w	r1, r7, #8
 8001624:	230a      	movs	r3, #10
 8001626:	4857      	ldr	r0, [pc, #348]	; (8001784 <printRadioSettings+0x6c0>)
 8001628:	f004 fc43 	bl	8005eb2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800162c:	2012      	movs	r0, #18
 800162e:	f7ff f929 	bl	8000884 <NRF24_read_register>
 8001632:	4603      	mov	r3, r0
 8001634:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001638:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800163c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4958      	ldr	r1, [pc, #352]	; (80017a8 <printRadioSettings+0x6e4>)
 8001646:	4618      	mov	r0, r3
 8001648:	f005 fd2a 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fe45 	bl	80002e0 <strlen>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	f107 0108 	add.w	r1, r7, #8
 800165e:	230a      	movs	r3, #10
 8001660:	4848      	ldr	r0, [pc, #288]	; (8001784 <printRadioSettings+0x6c0>)
 8001662:	f004 fc26 	bl	8005eb2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001666:	2013      	movs	r0, #19
 8001668:	f7ff f90c 	bl	8000884 <NRF24_read_register>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001672:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	494b      	ldr	r1, [pc, #300]	; (80017ac <printRadioSettings+0x6e8>)
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fd0d 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fe28 	bl	80002e0 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f107 0108 	add.w	r1, r7, #8
 8001698:	230a      	movs	r3, #10
 800169a:	483a      	ldr	r0, [pc, #232]	; (8001784 <printRadioSettings+0x6c0>)
 800169c:	f004 fc09 	bl	8005eb2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016a0:	2014      	movs	r0, #20
 80016a2:	f7ff f8ef 	bl	8000884 <NRF24_read_register>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	493d      	ldr	r1, [pc, #244]	; (80017b0 <printRadioSettings+0x6ec>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f005 fcf0 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fe0b 	bl	80002e0 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f107 0108 	add.w	r1, r7, #8
 80016d2:	230a      	movs	r3, #10
 80016d4:	482b      	ldr	r0, [pc, #172]	; (8001784 <printRadioSettings+0x6c0>)
 80016d6:	f004 fbec 	bl	8005eb2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016da:	2015      	movs	r0, #21
 80016dc:	f7ff f8d2 	bl	8000884 <NRF24_read_register>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4930      	ldr	r1, [pc, #192]	; (80017b4 <printRadioSettings+0x6f0>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f005 fcd3 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fdee 	bl	80002e0 <strlen>
 8001704:	4603      	mov	r3, r0
 8001706:	b29a      	uxth	r2, r3
 8001708:	f107 0108 	add.w	r1, r7, #8
 800170c:	230a      	movs	r3, #10
 800170e:	481d      	ldr	r0, [pc, #116]	; (8001784 <printRadioSettings+0x6c0>)
 8001710:	f004 fbcf 	bl	8005eb2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001714:	2016      	movs	r0, #22
 8001716:	f7ff f8b5 	bl	8000884 <NRF24_read_register>
 800171a:	4603      	mov	r3, r0
 800171c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001720:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <printRadioSettings+0x6f4>)
 800172e:	4618      	mov	r0, r3
 8001730:	f005 fcb6 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdd1 	bl	80002e0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	230a      	movs	r3, #10
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <printRadioSettings+0x6c0>)
 800174a:	f004 fbb2 	bl	8005eb2 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800174e:	201c      	movs	r0, #28
 8001750:	f7ff f898 	bl	8000884 <NRF24_read_register>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800175a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800175e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001762:	2b00      	cmp	r3, #0
 8001764:	bfcc      	ite	gt
 8001766:	2301      	movgt	r3, #1
 8001768:	2300      	movle	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001772:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001776:	2b00      	cmp	r3, #0
 8001778:	bfcc      	ite	gt
 800177a:	2301      	movgt	r3, #1
 800177c:	2300      	movle	r3, #0
 800177e:	e01d      	b.n	80017bc <printRadioSettings+0x6f8>
 8001780:	08007b24 	.word	0x08007b24
 8001784:	24000154 	.word	0x24000154
 8001788:	08007b38 	.word	0x08007b38
 800178c:	08007b68 	.word	0x08007b68
 8001790:	08007b98 	.word	0x08007b98
 8001794:	08007bc0 	.word	0x08007bc0
 8001798:	08007be8 	.word	0x08007be8
 800179c:	08007c10 	.word	0x08007c10
 80017a0:	08007c38 	.word	0x08007c38
 80017a4:	08007c64 	.word	0x08007c64
 80017a8:	08007c80 	.word	0x08007c80
 80017ac:	08007c9c 	.word	0x08007c9c
 80017b0:	08007cb8 	.word	0x08007cb8
 80017b4:	08007cd4 	.word	0x08007cd4
 80017b8:	08007cf0 	.word	0x08007cf0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017c4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bfcc      	ite	gt
 80017cc:	2301      	movgt	r3, #1
 80017ce:	2300      	movle	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bfcc      	ite	gt
 80017e0:	2301      	movgt	r3, #1
 80017e2:	2300      	movle	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ec:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bfcc      	ite	gt
 80017f4:	2301      	movgt	r3, #1
 80017f6:	2300      	movle	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001800:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfcc      	ite	gt
 8001808:	2301      	movgt	r3, #1
 800180a:	2300      	movle	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f107 0008 	add.w	r0, r7, #8
 8001812:	9303      	str	r3, [sp, #12]
 8001814:	9402      	str	r4, [sp, #8]
 8001816:	9101      	str	r1, [sp, #4]
 8001818:	9200      	str	r2, [sp, #0]
 800181a:	4633      	mov	r3, r6
 800181c:	462a      	mov	r2, r5
 800181e:	4936      	ldr	r1, [pc, #216]	; (80018f8 <printRadioSettings+0x834>)
 8001820:	f005 fc3e 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fd59 	bl	80002e0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f107 0108 	add.w	r1, r7, #8
 8001836:	230a      	movs	r3, #10
 8001838:	4830      	ldr	r0, [pc, #192]	; (80018fc <printRadioSettings+0x838>)
 800183a:	f004 fb3a 	bl	8005eb2 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800183e:	201d      	movs	r0, #29
 8001840:	f7ff f820 	bl	8000884 <NRF24_read_register>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800184a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <printRadioSettings+0x7a0>
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4929      	ldr	r1, [pc, #164]	; (8001900 <printRadioSettings+0x83c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f005 fc1f 	bl	80070a0 <siprintf>
 8001862:	e005      	b.n	8001870 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4926      	ldr	r1, [pc, #152]	; (8001904 <printRadioSettings+0x840>)
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fc18 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fd33 	bl	80002e0 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	f107 0108 	add.w	r1, r7, #8
 8001882:	230a      	movs	r3, #10
 8001884:	481d      	ldr	r0, [pc, #116]	; (80018fc <printRadioSettings+0x838>)
 8001886:	f004 fb14 	bl	8005eb2 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800188a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <printRadioSettings+0x7e0>
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	491b      	ldr	r1, [pc, #108]	; (8001908 <printRadioSettings+0x844>)
 800189c:	4618      	mov	r0, r3
 800189e:	f005 fbff 	bl	80070a0 <siprintf>
 80018a2:	e005      	b.n	80018b0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4918      	ldr	r1, [pc, #96]	; (800190c <printRadioSettings+0x848>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 fbf8 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fd13 	bl	80002e0 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f107 0108 	add.w	r1, r7, #8
 80018c2:	230a      	movs	r3, #10
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <printRadioSettings+0x838>)
 80018c6:	f004 faf4 	bl	8005eb2 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4910      	ldr	r1, [pc, #64]	; (8001910 <printRadioSettings+0x84c>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f005 fbe5 	bl	80070a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fd00 	bl	80002e0 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f107 0108 	add.w	r1, r7, #8
 80018e8:	230a      	movs	r3, #10
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <printRadioSettings+0x838>)
 80018ec:	f004 fae1 	bl	8005eb2 <HAL_UART_Transmit>
}
 80018f0:	bf00      	nop
 80018f2:	3774      	adds	r7, #116	; 0x74
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f8:	08007d0c 	.word	0x08007d0c
 80018fc:	24000154 	.word	0x24000154
 8001900:	08007d58 	.word	0x08007d58
 8001904:	08007d70 	.word	0x08007d70
 8001908:	08007d88 	.word	0x08007d88
 800190c:	08007da4 	.word	0x08007da4
 8001910:	08007978 	.word	0x08007978

08001914 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001914:	b084      	sub	sp, #16
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
 800191a:	f107 0c08 	add.w	ip, r7, #8
 800191e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <nrf24_DebugUART_Init+0x2c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2290      	movs	r2, #144	; 0x90
 800192c:	4619      	mov	r1, r3
 800192e:	f005 fba1 	bl	8007074 <memcpy>
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800193a:	b004      	add	sp, #16
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	24000154 	.word	0x24000154
 8001944:	00000000 	.word	0x00000000

08001948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b0a9      	sub	sp, #164	; 0xa4
 800194c:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800194e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001952:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001954:	bf00      	nop
 8001956:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <main+0x148>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <main+0x24>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	617a      	str	r2, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	dcf4      	bgt.n	8001956 <main+0xe>
  if ( timeout < 0 )
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da01      	bge.n	8001976 <main+0x2e>
  {
  Error_Handler();
 8001972:	f000 fa1b 	bl	8001dac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001976:	f000 fb8d 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197a:	f000 f895 	bl	8001aa8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <main+0x148>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001984:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <main+0x148>)
 8001986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <main+0x148>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 fee9 	bl	8002774 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 feff 	bl	80027a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80019aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ae:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019b0:	bf00      	nop
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <main+0x148>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d104      	bne.n	80019c8 <main+0x80>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	617a      	str	r2, [r7, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	dcf4      	bgt.n	80019b2 <main+0x6a>
if ( timeout < 0 )
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da01      	bge.n	80019d2 <main+0x8a>
{
Error_Handler();
 80019ce:	f000 f9ed 	bl	8001dac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d2:	f000 f987 	bl	8001ce4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80019d6:	f000 f8e3 	bl	8001ba0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80019da:	f000 f937 	bl	8001c4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint64_t RxpipeAddrs = 0x11223344AA;
 80019de:	a32a      	add	r3, pc, #168	; (adr r3, 8001a88 <main+0x140>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  NRF24_begin(GPIOB,GPIO_PIN_15,GPIO_PIN_12,hspi1);
 80019e8:	4c2a      	ldr	r4, [pc, #168]	; (8001a94 <main+0x14c>)
 80019ea:	4668      	mov	r0, sp
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	2284      	movs	r2, #132	; 0x84
 80019f0:	4619      	mov	r1, r3
 80019f2:	f005 fb3f 	bl	8007074 <memcpy>
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a00:	4825      	ldr	r0, [pc, #148]	; (8001a98 <main+0x150>)
 8001a02:	f7ff f827 	bl	8000a54 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 8001a06:	4c25      	ldr	r4, [pc, #148]	; (8001a9c <main+0x154>)
 8001a08:	4668      	mov	r0, sp
 8001a0a:	f104 0310 	add.w	r3, r4, #16
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	4619      	mov	r1, r3
 8001a12:	f005 fb2f 	bl	8007074 <memcpy>
 8001a16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a1a:	f7ff ff7b 	bl	8001914 <nrf24_DebugUART_Init>
  NRF24_setAutoAck(true);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff fa08 	bl	8000e34 <NRF24_setAutoAck>
  NRF24_setChannel(60);
 8001a24:	203c      	movs	r0, #60	; 0x3c
 8001a26:	f7ff f9ac 	bl	8000d82 <NRF24_setChannel>
  NRF24_setPayloadSize(64);
 8001a2a:	2040      	movs	r0, #64	; 0x40
 8001a2c:	f7ff f9be 	bl	8000dac <NRF24_setPayloadSize>
  NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff f93b 	bl	8000cb0 <NRF24_openReadingPipe>
  NRF24_setDataRate(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fa48 	bl	8000ed0 <NRF24_setDataRate>
  printRadioSettings();
 8001a40:	f7ff fb40 	bl	80010c4 <printRadioSettings>
  NRF24_startListening();
 8001a44:	f7ff f8e6 	bl	8000c14 <NRF24_startListening>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(NRF24_available()){
 8001a48:	f7ff f90a 	bl	8000c60 <NRF24_available>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <main+0x138>
	  			NRF24_read(myRxData, 64);
 8001a52:	2140      	movs	r1, #64	; 0x40
 8001a54:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <main+0x158>)
 8001a56:	f7ff f90b 	bl	8000c70 <NRF24_read>
	  			NRF24_writeAckPayload(1, myAckPayload, 64);
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	4911      	ldr	r1, [pc, #68]	; (8001aa4 <main+0x15c>)
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fae3 	bl	800102a <NRF24_writeAckPayload>
	  			myRxData[64] = '\r';
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <main+0x158>)
 8001a66:	220d      	movs	r2, #13
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  			myRxData[64+1] = '\n';
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <main+0x158>)
 8001a6e:	220a      	movs	r2, #10
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	  			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 64+2, 10);
 8001a74:	230a      	movs	r3, #10
 8001a76:	2242      	movs	r2, #66	; 0x42
 8001a78:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <main+0x158>)
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <main+0x154>)
 8001a7c:	f004 fa19 	bl	8005eb2 <HAL_UART_Transmit>
	  		}
	  HAL_Delay(250);
 8001a80:	20fa      	movs	r0, #250	; 0xfa
 8001a82:	f000 fb99 	bl	80021b8 <HAL_Delay>
	  if(NRF24_available()){
 8001a86:	e7df      	b.n	8001a48 <main+0x100>
 8001a88:	223344aa 	.word	0x223344aa
 8001a8c:	00000011 	.word	0x00000011
 8001a90:	58024400 	.word	0x58024400
 8001a94:	240001e4 	.word	0x240001e4
 8001a98:	58020400 	.word	0x58020400
 8001a9c:	2400026c 	.word	0x2400026c
 8001aa0:	240002fc 	.word	0x240002fc
 8001aa4:	24000008 	.word	0x24000008

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09c      	sub	sp, #112	; 0x70
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab2:	224c      	movs	r2, #76	; 0x4c
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 faea 	bl	8007090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2220      	movs	r2, #32
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f005 fae4 	bl	8007090 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f000 fe81 	bl	80027d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <SystemClock_Config+0xf0>)
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <SystemClock_Config+0xf0>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <SystemClock_Config+0xf0>)
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <SystemClock_Config+0xf4>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001af0:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <SystemClock_Config+0xf4>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <SystemClock_Config+0xf4>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b04:	bf00      	nop
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <SystemClock_Config+0xf4>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b12:	d1f8      	bne.n	8001b06 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b22:	2302      	movs	r3, #2
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001b2a:	2312      	movs	r3, #18
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001b42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fe99 	bl	8002884 <HAL_RCC_OscConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b58:	f000 f928 	bl	8001dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5c:	233f      	movs	r3, #63	; 0x3f
 8001b5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b60:	2303      	movs	r3, #3
 8001b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 faad 	bl	80030e0 <HAL_RCC_ClockConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001b8c:	f000 f90e 	bl	8001dac <Error_Handler>
  }
}
 8001b90:	bf00      	nop
 8001b92:	3770      	adds	r7, #112	; 0x70
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	58000400 	.word	0x58000400
 8001b9c:	58024800 	.word	0x58024800

08001ba0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001ba6:	4a28      	ldr	r2, [pc, #160]	; (8001c48 <MX_SPI1_Init+0xa8>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI1_Init+0xa4>)
 8001c32:	f003 f949 	bl	8004ec8 <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001c3c:	f000 f8b6 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	240001e4 	.word	0x240001e4
 8001c48:	40013000 	.word	0x40013000

08001c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <MX_USART3_UART_Init+0x94>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c96:	f004 f8bc 	bl	8005e12 <HAL_UART_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ca0:	f000 f884 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001ca8:	f005 f8f0 	bl	8006e8c <HAL_UARTEx_SetTxFifoThreshold>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f000 f87b 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cba:	f005 f925 	bl	8006f08 <HAL_UARTEx_SetRxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f000 f872 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cca:	f005 f8a6 	bl	8006e1a <HAL_UARTEx_DisableFifoMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd4:	f000 f86a 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2400026c 	.word	0x2400026c
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1e:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_GPIO_Init+0xc0>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <MX_GPIO_Init+0xc4>)
 8001d7a:	f000 fce1 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001d7e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_GPIO_Init+0xc4>)
 8001d98:	f000 fb22 	bl	80023e0 <HAL_GPIO_Init>

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58024400 	.word	0x58024400
 8001da8:	58020400 	.word	0x58020400

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x30>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x30>)
 8001dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58024400 	.word	0x58024400

08001dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b8      	sub	sp, #224	; 0xe0
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	22bc      	movs	r2, #188	; 0xbc
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 f93f 	bl	8007090 <memset>
  if(hspi->Instance==SPI1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <HAL_SPI_MspInit+0xbc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d141      	bne.n	8001ea0 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fce4 	bl	80037f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e36:	f7ff ffb9 	bl	8001dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_SPI_MspInit+0xc0>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e40:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_SPI_MspInit+0xc0>)
 8001e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_SPI_MspInit+0xc0>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_SPI_MspInit+0xc0>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_SPI_MspInit+0xc0>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_SPI_MspInit+0xc0>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e76:	2338      	movs	r3, #56	; 0x38
 8001e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_SPI_MspInit+0xc4>)
 8001e9c:	f000 faa0 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	37e0      	adds	r7, #224	; 0xe0
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40013000 	.word	0x40013000
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	58020400 	.word	0x58020400

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0b8      	sub	sp, #224	; 0xe0
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	22bc      	movs	r2, #188	; 0xbc
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 f8db 	bl	8007090 <memset>
  if(huart->Instance==USART3)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <HAL_UART_MspInit+0xc0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d142      	bne.n	8001f6a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fc80 	bl	80037f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001efe:	f7ff ff55 	bl	8001dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f26:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f66:	f000 fa3b 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	37e0      	adds	r7, #224	; 0xe0
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40004800 	.word	0x40004800
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020c00 	.word	0x58020c00

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <NMI_Handler+0x4>

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f8d4 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <_sbrk+0x5c>)
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <_sbrk+0x60>)
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <_sbrk+0x64>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <_sbrk+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d207      	bcs.n	8002014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002004:	f005 f80c 	bl	8007020 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e009      	b.n	8002028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <_sbrk+0x64>)
 8002024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	24080000 	.word	0x24080000
 8002034:	00000400 	.word	0x00000400
 8002038:	2400033c 	.word	0x2400033c
 800203c:	24000358 	.word	0x24000358

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002044:	f7fe fb26 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	; (8002080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	; (800208c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f004 ffdd 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7ff fc69 	bl	8001948 <main>
  bx  lr
 8002076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002078:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800207c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002080:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8002084:	08007f48 	.word	0x08007f48
  ldr r2, =_sbss
 8002088:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 800208c:	24000354 	.word	0x24000354

08002090 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC3_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209a:	2003      	movs	r0, #3
 800209c:	f000 f96e 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020a0:	f001 f9d4 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_Init+0x68>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	4913      	ldr	r1, [pc, #76]	; (8002100 <HAL_Init+0x6c>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_Init+0x68>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_Init+0x6c>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_Init+0x70>)
 80020d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_Init+0x74>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f814 	bl	800210c <HAL_InitTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e002      	b.n	80020f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020ee:	f7ff fe63 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	58024400 	.word	0x58024400
 8002100:	08007ebc 	.word	0x08007ebc
 8002104:	24000004 	.word	0x24000004
 8002108:	24000000 	.word	0x24000000

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_InitTick+0x60>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e021      	b.n	8002164 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_InitTick+0x64>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_InitTick+0x60>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f945 	bl	80023c6 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f91d 	bl	8002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x68>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2400002c 	.word	0x2400002c
 8002170:	24000000 	.word	0x24000000
 8002174:	24000028 	.word	0x24000028

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2400002c 	.word	0x2400002c
 800219c:	24000340 	.word	0x24000340

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	24000340 	.word	0x24000340

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2400002c 	.word	0x2400002c

08002200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetREVID+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0c1b      	lsrs	r3, r3, #16
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	5c001000 	.word	0x5c001000

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <__NVIC_SetPriorityGrouping+0x40>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	4313      	orrs	r3, r2
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <__NVIC_SetPriorityGrouping+0x40>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00
 800225c:	05fa0000 	.word	0x05fa0000

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228c:	2b00      	cmp	r3, #0
 800228e:	db0a      	blt.n	80022a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <__NVIC_SetPriority+0x4c>)
 8002296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	440b      	add	r3, r1
 80022a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a4:	e00a      	b.n	80022bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <__NVIC_SetPriority+0x50>)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3b04      	subs	r3, #4
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	440b      	add	r3, r1
 80022ba:	761a      	strb	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f1c3 0307 	rsb	r3, r3, #7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf28      	it	cs
 80022ee:	2304      	movcs	r3, #4
 80022f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d902      	bls.n	8002300 <NVIC_EncodePriority+0x30>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3b03      	subs	r3, #3
 80022fe:	e000      	b.n	8002302 <NVIC_EncodePriority+0x32>
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	43d9      	mvns	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	4313      	orrs	r3, r2
         );
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff8e 	bl	800227c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff47 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff5e 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff90 	bl	80022d0 <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5f 	bl	800227c <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffb2 	bl	8002338 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_GPIO_Init+0x234>)
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023f2:	e194      	b.n	800271e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8186 	beq.w	8002718 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_GPIO_Init+0x44>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0201 	and.w	r2, r3, #1
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b03      	cmp	r3, #3
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	69b9      	ldr	r1, [r7, #24]
 8002512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80e0 	beq.w	8002718 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_GPIO_Init+0x238>)
 800255a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800255e:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_GPIO_Init+0x238>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_GPIO_Init+0x238>)
 800256a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002576:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_GPIO_Init+0x23c>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_GPIO_Init+0x240>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d052      	beq.n	8002648 <HAL_GPIO_Init+0x268>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_GPIO_Init+0x244>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d031      	beq.n	800260e <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_GPIO_Init+0x248>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x22a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x24c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_GPIO_Init+0x250>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_GPIO_Init+0x254>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x258>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_GPIO_Init+0x25c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_GPIO_Init+0x260>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_GPIO_Init+0x264>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x20e>
 80025ea:	2309      	movs	r3, #9
 80025ec:	e02d      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025ee:	230a      	movs	r3, #10
 80025f0:	e02b      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e029      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e027      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e025      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025fe:	2305      	movs	r3, #5
 8002600:	e023      	b.n	800264a <HAL_GPIO_Init+0x26a>
 8002602:	2304      	movs	r3, #4
 8002604:	e021      	b.n	800264a <HAL_GPIO_Init+0x26a>
 8002606:	2303      	movs	r3, #3
 8002608:	e01f      	b.n	800264a <HAL_GPIO_Init+0x26a>
 800260a:	2302      	movs	r3, #2
 800260c:	e01d      	b.n	800264a <HAL_GPIO_Init+0x26a>
 800260e:	2301      	movs	r3, #1
 8002610:	e01b      	b.n	800264a <HAL_GPIO_Init+0x26a>
 8002612:	bf00      	nop
 8002614:	58000080 	.word	0x58000080
 8002618:	58024400 	.word	0x58024400
 800261c:	58000400 	.word	0x58000400
 8002620:	58020000 	.word	0x58020000
 8002624:	58020400 	.word	0x58020400
 8002628:	58020800 	.word	0x58020800
 800262c:	58020c00 	.word	0x58020c00
 8002630:	58021000 	.word	0x58021000
 8002634:	58021400 	.word	0x58021400
 8002638:	58021800 	.word	0x58021800
 800263c:	58021c00 	.word	0x58021c00
 8002640:	58022000 	.word	0x58022000
 8002644:	58022400 	.word	0x58022400
 8002648:	2300      	movs	r3, #0
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265a:	4938      	ldr	r1, [pc, #224]	; (800273c <HAL_GPIO_Init+0x35c>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3301      	adds	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f ae63 	bne.w	80023f4 <HAL_GPIO_Init+0x14>
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	3724      	adds	r7, #36	; 0x24
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58000400 	.word	0x58000400

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_HSEM_FastTake+0x2c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3320      	adds	r3, #32
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_HSEM_FastTake+0x30>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	58026400 	.word	0x58026400
 80027a4:	80000300 	.word	0x80000300

080027a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80027b2:	4906      	ldr	r1, [pc, #24]	; (80027cc <HAL_HSEM_Release+0x24>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	58026400 	.word	0x58026400

080027d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_PWREx_ConfigSupply+0xb0>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d00a      	beq.n	80027fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <HAL_PWREx_ConfigSupply+0xb0>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e040      	b.n	8002878 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e03e      	b.n	8002878 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_PWREx_ConfigSupply+0xb0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002802:	491f      	ldr	r1, [pc, #124]	; (8002880 <HAL_PWREx_ConfigSupply+0xb0>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800280a:	f7ff fcc9 	bl	80021a0 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002810:	e009      	b.n	8002826 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002812:	f7ff fcc5 	bl	80021a0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002820:	d901      	bls.n	8002826 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e028      	b.n	8002878 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_PWREx_ConfigSupply+0xb0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002832:	d1ee      	bne.n	8002812 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b1e      	cmp	r3, #30
 8002838:	d008      	beq.n	800284c <HAL_PWREx_ConfigSupply+0x7c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b2e      	cmp	r3, #46	; 0x2e
 800283e:	d005      	beq.n	800284c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b1d      	cmp	r3, #29
 8002844:	d002      	beq.n	800284c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b2d      	cmp	r3, #45	; 0x2d
 800284a:	d114      	bne.n	8002876 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800284c:	f7ff fca8 	bl	80021a0 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002852:	e009      	b.n	8002868 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002854:	f7ff fca4 	bl	80021a0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002862:	d901      	bls.n	8002868 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_PWREx_ConfigSupply+0xb0>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002874:	d1ee      	bne.n	8002854 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	58024800 	.word	0x58024800

08002884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f000 bc1d 	b.w	80030d2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8087 	beq.w	80029b4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b99      	ldr	r3, [pc, #612]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028b0:	4b96      	ldr	r3, [pc, #600]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d007      	beq.n	80028cc <HAL_RCC_OscConfig+0x48>
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b18      	cmp	r3, #24
 80028c0:	d110      	bne.n	80028e4 <HAL_RCC_OscConfig+0x60>
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d06c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x12e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d168      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e3f6      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0x78>
 80028ee:	4b87      	ldr	r3, [pc, #540]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a86      	ldr	r2, [pc, #536]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e02e      	b.n	800295a <HAL_RCC_OscConfig+0xd6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x9a>
 8002904:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a7d      	ldr	r2, [pc, #500]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e01d      	b.n	800295a <HAL_RCC_OscConfig+0xd6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0xbe>
 8002928:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 800292e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a74      	ldr	r2, [pc, #464]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e00b      	b.n	800295a <HAL_RCC_OscConfig+0xd6>
 8002942:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a71      	ldr	r2, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002958:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d013      	beq.n	800298a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7ff fc1d 	bl	80021a0 <HAL_GetTick>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296a:	f7ff fc19 	bl	80021a0 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b64      	cmp	r3, #100	; 0x64
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e3aa      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800297c:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0xe6>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff fc09 	bl	80021a0 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002992:	f7ff fc05 	bl	80021a0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b64      	cmp	r3, #100	; 0x64
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e396      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x10e>
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80cb 	beq.w	8002b58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c2:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029cc:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_RCC_OscConfig+0x164>
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	2b18      	cmp	r3, #24
 80029dc:	d156      	bne.n	8002a8c <HAL_RCC_OscConfig+0x208>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d151      	bne.n	8002a8c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x17c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e368      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0219 	bic.w	r2, r3, #25
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	493f      	ldr	r1, [pc, #252]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a12:	f7ff fbc5 	bl	80021a0 <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fbc1 	bl	80021a0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e352      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	f7ff fbe2 	bl	8002200 <HAL_GetREVID>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d817      	bhi.n	8002a76 <HAL_RCC_OscConfig+0x1f2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1dc>
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a56:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5e:	e07b      	b.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	031b      	lsls	r3, r3, #12
 8002a6e:	4927      	ldr	r1, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a74:	e070      	b.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	4921      	ldr	r1, [pc, #132]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8a:	e065      	b.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d048      	beq.n	8002b26 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 0219 	bic.w	r2, r3, #25
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	491a      	ldr	r1, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7ff fb7b 	bl	80021a0 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aae:	f7ff fb77 	bl	80021a0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e308      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	f7ff fb98 	bl	8002200 <HAL_GetREVID>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d81a      	bhi.n	8002b10 <HAL_RCC_OscConfig+0x28c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x270>
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002aea:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	6053      	str	r3, [r2, #4]
 8002af2:	e031      	b.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	4902      	ldr	r1, [pc, #8]	; (8002b0c <HAL_RCC_OscConfig+0x288>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e026      	b.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
 8002b0a:	bf00      	nop
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	4b9a      	ldr	r3, [pc, #616]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	4997      	ldr	r1, [pc, #604]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
 8002b24:	e018      	b.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b95      	ldr	r3, [pc, #596]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a94      	ldr	r2, [pc, #592]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7ff fb35 	bl	80021a0 <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff fb31 	bl	80021a0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e2c2      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b4c:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80a9 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b85      	ldr	r3, [pc, #532]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b70:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d007      	beq.n	8002b8c <HAL_RCC_OscConfig+0x308>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	d13a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x374>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d135      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b8c:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x320>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e296      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ba4:	f7ff fb2c 	bl	8002200 <HAL_GetREVID>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d817      	bhi.n	8002be2 <HAL_RCC_OscConfig+0x35e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d108      	bne.n	8002bcc <HAL_RCC_OscConfig+0x348>
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bca:	e075      	b.n	8002cb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	069b      	lsls	r3, r3, #26
 8002bda:	4968      	ldr	r1, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002be0:	e06a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002be2:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	061b      	lsls	r3, r3, #24
 8002bf0:	4962      	ldr	r1, [pc, #392]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf6:	e05f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d042      	beq.n	8002c86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c00:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5d      	ldr	r2, [pc, #372]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fac8 	bl	80021a0 <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c14:	f7ff fac4 	bl	80021a0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e255      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c26:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c32:	f7ff fae5 	bl	8002200 <HAL_GetREVID>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d817      	bhi.n	8002c70 <HAL_RCC_OscConfig+0x3ec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d108      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3d6>
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c50:	4a4a      	ldr	r2, [pc, #296]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c56:	6053      	str	r3, [r2, #4]
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x434>
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	4944      	ldr	r1, [pc, #272]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
 8002c6e:	e023      	b.n	8002cb8 <HAL_RCC_OscConfig+0x434>
 8002c70:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	493f      	ldr	r1, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
 8002c84:	e018      	b.n	8002cb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3c      	ldr	r2, [pc, #240]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7ff fa85 	bl	80021a0 <HAL_GetTick>
 8002c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c9a:	f7ff fa81 	bl	80021a0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e212      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d036      	beq.n	8002d32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d019      	beq.n	8002d00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fa62 	bl	80021a0 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fa5e 	bl	80021a0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1ef      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x45c>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7ff fa48 	bl	80021a0 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d14:	f7ff fa44 	bl	80021a0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1d5      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d039      	beq.n	8002db2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d52:	f7ff fa25 	bl	80021a0 <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d5a:	f7ff fa21 	bl	80021a0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1b2      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x4d6>
 8002d78:	e01b      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
 8002d7a:	bf00      	nop
 8002d7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d80:	4b9b      	ldr	r3, [pc, #620]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a9a      	ldr	r2, [pc, #616]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d8c:	f7ff fa08 	bl	80021a0 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d94:	f7ff fa04 	bl	80021a0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e195      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da6:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8081 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x770>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a8b      	ldr	r2, [pc, #556]	; (8002ff4 <HAL_RCC_OscConfig+0x770>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dcc:	f7ff f9e8 	bl	80021a0 <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7ff f9e4 	bl	80021a0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e175      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de6:	4b83      	ldr	r3, [pc, #524]	; (8002ff4 <HAL_RCC_OscConfig+0x770>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d106      	bne.n	8002e08 <HAL_RCC_OscConfig+0x584>
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a7c      	ldr	r2, [pc, #496]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	e02d      	b.n	8002e64 <HAL_RCC_OscConfig+0x5e0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5a6>
 8002e10:	4b77      	ldr	r3, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a76      	ldr	r2, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	4b74      	ldr	r3, [pc, #464]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a73      	ldr	r2, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e22:	f023 0304 	bic.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x5e0>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5c8>
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a6e      	ldr	r2, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a6b      	ldr	r2, [pc, #428]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCC_OscConfig+0x5e0>
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a67      	ldr	r2, [pc, #412]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e5e:	f023 0304 	bic.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7ff f998 	bl	80021a0 <HAL_GetTick>
 8002e70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7ff f994 	bl	80021a0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e123      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8a:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ee      	beq.n	8002e74 <HAL_RCC_OscConfig+0x5f0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7ff f982 	bl	80021a0 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7ff f97e 	bl	80021a0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e10d      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8102 	beq.w	80030d0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ecc:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed4:	2b18      	cmp	r3, #24
 8002ed6:	f000 80bd 	beq.w	8003054 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	f040 809e 	bne.w	8003020 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a41      	ldr	r2, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f956 	bl	80021a0 <HAL_GetTick>
 8002ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7ff f952 	bl	80021a0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0e3      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCC_OscConfig+0x774>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4931      	ldr	r1, [pc, #196]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	3b01      	subs	r3, #1
 8002f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	025b      	lsls	r3, r3, #9
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	061b      	lsls	r3, r3, #24
 8002f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f60:	4923      	ldr	r1, [pc, #140]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f7e:	00d2      	lsls	r2, r2, #3
 8002f80:	491b      	ldr	r1, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f023 020c 	bic.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4917      	ldr	r1, [pc, #92]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f023 0202 	bic.w	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	4912      	ldr	r1, [pc, #72]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f8db 	bl	80021a0 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fec:	e011      	b.n	8003012 <HAL_RCC_OscConfig+0x78e>
 8002fee:	bf00      	nop
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	58024800 	.word	0x58024800
 8002ff8:	fffffc0c 	.word	0xfffffc0c
 8002ffc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7ff f8ce 	bl	80021a0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e05f      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_RCC_OscConfig+0x858>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x77c>
 800301e:	e057      	b.n	80030d0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003020:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_RCC_OscConfig+0x858>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x858>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff f8b8 	bl	80021a0 <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7ff f8b4 	bl	80021a0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e045      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x858>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x7b0>
 8003052:	e03d      	b.n	80030d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003054:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x858>)
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_OscConfig+0x858>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b01      	cmp	r3, #1
 8003066:	d031      	beq.n	80030cc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d12a      	bne.n	80030cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d122      	bne.n	80030cc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d11a      	bne.n	80030cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	0a5b      	lsrs	r3, r3, #9
 800309a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d111      	bne.n	80030cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d108      	bne.n	80030cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	0e1b      	lsrs	r3, r3, #24
 80030be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3730      	adds	r7, #48	; 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400

080030e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e19c      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b8a      	ldr	r3, [pc, #552]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b87      	ldr	r3, [pc, #540]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	4985      	ldr	r1, [pc, #532]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b83      	ldr	r3, [pc, #524]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e184      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	4b7b      	ldr	r3, [pc, #492]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800313c:	429a      	cmp	r2, r3
 800313e:	d908      	bls.n	8003152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003140:	4b78      	ldr	r3, [pc, #480]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	4975      	ldr	r1, [pc, #468]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 800314e:	4313      	orrs	r3, r2
 8003150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d010      	beq.n	8003180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800316a:	429a      	cmp	r2, r3
 800316c:	d908      	bls.n	8003180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800316e:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	496a      	ldr	r1, [pc, #424]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 800317c:	4313      	orrs	r3, r2
 800317e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003198:	429a      	cmp	r2, r3
 800319a:	d908      	bls.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	495e      	ldr	r1, [pc, #376]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d010      	beq.n	80031dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d908      	bls.n	80031dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031ca:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4953      	ldr	r1, [pc, #332]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d010      	beq.n	800320a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d908      	bls.n	800320a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f023 020f 	bic.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4947      	ldr	r1, [pc, #284]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003206:	4313      	orrs	r3, r2
 8003208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d055      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003216:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4940      	ldr	r1, [pc, #256]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003224:	4313      	orrs	r3, r2
 8003226:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003230:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d121      	bne.n	8003280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0f6      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d115      	bne.n	8003280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0ea      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0de      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0d6      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f023 0207 	bic.w	r2, r3, #7
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4925      	ldr	r1, [pc, #148]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 800328e:	4313      	orrs	r3, r2
 8003290:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe ff85 	bl	80021a0 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329a:	f7fe ff81 	bl	80021a0 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0be      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	429a      	cmp	r2, r3
 80032c0:	d1eb      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d010      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	429a      	cmp	r2, r3
 80032dc:	d208      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f023 020f 	bic.w	r2, r3, #15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	490e      	ldr	r1, [pc, #56]	; (8003324 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d214      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 020f 	bic.w	r2, r3, #15
 8003306:	4906      	ldr	r1, [pc, #24]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_RCC_ClockConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e086      	b.n	800342e <HAL_RCC_ClockConfig+0x34e>
 8003320:	52002000 	.word	0x52002000
 8003324:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003340:	429a      	cmp	r2, r3
 8003342:	d208      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003344:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4939      	ldr	r1, [pc, #228]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003352:	4313      	orrs	r3, r2
 8003354:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d010      	beq.n	8003384 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800336e:	429a      	cmp	r2, r3
 8003370:	d208      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	492e      	ldr	r1, [pc, #184]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003380:	4313      	orrs	r3, r2
 8003382:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d010      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800339c:	429a      	cmp	r2, r3
 800339e:	d208      	bcs.n	80033b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	4922      	ldr	r1, [pc, #136]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d010      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d208      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4917      	ldr	r1, [pc, #92]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033e0:	f000 f834 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	4912      	ldr	r1, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x35c>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
 80033fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_RCC_ClockConfig+0x358>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_RCC_ClockConfig+0x35c>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x360>)
 8003416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x364>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x368>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fe72 	bl	800210c <HAL_InitTick>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
 800343c:	08007ebc 	.word	0x08007ebc
 8003440:	24000004 	.word	0x24000004
 8003444:	24000000 	.word	0x24000000
 8003448:	24000028 	.word	0x24000028

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003452:	4bb3      	ldr	r3, [pc, #716]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345a:	2b18      	cmp	r3, #24
 800345c:	f200 8155 	bhi.w	800370a <HAL_RCC_GetSysClockFreq+0x2be>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	080034cd 	.word	0x080034cd
 800346c:	0800370b 	.word	0x0800370b
 8003470:	0800370b 	.word	0x0800370b
 8003474:	0800370b 	.word	0x0800370b
 8003478:	0800370b 	.word	0x0800370b
 800347c:	0800370b 	.word	0x0800370b
 8003480:	0800370b 	.word	0x0800370b
 8003484:	0800370b 	.word	0x0800370b
 8003488:	080034f3 	.word	0x080034f3
 800348c:	0800370b 	.word	0x0800370b
 8003490:	0800370b 	.word	0x0800370b
 8003494:	0800370b 	.word	0x0800370b
 8003498:	0800370b 	.word	0x0800370b
 800349c:	0800370b 	.word	0x0800370b
 80034a0:	0800370b 	.word	0x0800370b
 80034a4:	0800370b 	.word	0x0800370b
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	0800370b 	.word	0x0800370b
 80034b0:	0800370b 	.word	0x0800370b
 80034b4:	0800370b 	.word	0x0800370b
 80034b8:	0800370b 	.word	0x0800370b
 80034bc:	0800370b 	.word	0x0800370b
 80034c0:	0800370b 	.word	0x0800370b
 80034c4:	0800370b 	.word	0x0800370b
 80034c8:	080034ff 	.word	0x080034ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034cc:	4b94      	ldr	r3, [pc, #592]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034d8:	4b91      	ldr	r3, [pc, #580]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	4a90      	ldr	r2, [pc, #576]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034ea:	e111      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034ec:	4b8d      	ldr	r3, [pc, #564]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ee:	61bb      	str	r3, [r7, #24]
    break;
 80034f0:	e10e      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034f2:	4b8d      	ldr	r3, [pc, #564]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f4:	61bb      	str	r3, [r7, #24]
    break;
 80034f6:	e10b      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034f8:	4b8c      	ldr	r3, [pc, #560]	; (800372c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034fa:	61bb      	str	r3, [r7, #24]
    break;
 80034fc:	e108      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003508:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003512:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003514:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800351e:	4b80      	ldr	r3, [pc, #512]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80e1 	beq.w	8003704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b02      	cmp	r3, #2
 8003546:	f000 8083 	beq.w	8003650 <HAL_RCC_GetSysClockFreq+0x204>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b02      	cmp	r3, #2
 800354e:	f200 80a1 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x248>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x114>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d056      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x1c0>
 800355e:	e099      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d02d      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800356c:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003596:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035c6:	e087      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800360a:	e065      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364e:	e043      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800373c <HAL_RCC_GetSysClockFreq+0x2f0>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a02 	vldr	s12, [r7, #8]
 8003676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003692:	e021      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	0a5b      	lsrs	r3, r3, #9
 80036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e2:	3301      	adds	r3, #1
 80036e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fc:	ee17 3a90 	vmov	r3, s15
 8003700:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
    break;
 8003708:	e002      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800370c:	61bb      	str	r3, [r7, #24]
    break;
 800370e:	bf00      	nop
  }

  return sysclockfreq;
 8003710:	69bb      	ldr	r3, [r7, #24]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	58024400 	.word	0x58024400
 8003724:	03d09000 	.word	0x03d09000
 8003728:	003d0900 	.word	0x003d0900
 800372c:	007a1200 	.word	0x007a1200
 8003730:	46000000 	.word	0x46000000
 8003734:	4c742400 	.word	0x4c742400
 8003738:	4a742400 	.word	0x4a742400
 800373c:	4af42400 	.word	0x4af42400

08003740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003746:	f7ff fe81 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_RCC_GetHCLKFreq+0x50>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490f      	ldr	r1, [pc, #60]	; (8003794 <HAL_RCC_GetHCLKFreq+0x54>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_GetHCLKFreq+0x50>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_GetHCLKFreq+0x54>)
 800376e:	5cd3      	ldrb	r3, [r2, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_RCC_GetHCLKFreq+0x58>)
 800377c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_RCC_GetHCLKFreq+0x58>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024400 	.word	0x58024400
 8003794:	08007ebc 	.word	0x08007ebc
 8003798:	24000004 	.word	0x24000004
 800379c:	24000000 	.word	0x24000000

080037a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037a4:	f7ff ffcc 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	58024400 	.word	0x58024400
 80037c8:	08007ebc 	.word	0x08007ebc

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037d0:	f7ff ffb6 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4904      	ldr	r1, [pc, #16]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	58024400 	.word	0x58024400
 80037f4:	08007ebc 	.word	0x08007ebc

080037f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003804:	2300      	movs	r3, #0
 8003806:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d03f      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800381c:	d02a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800381e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003822:	d824      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003828:	d018      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800382a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382e:	d81e      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003838:	d007      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800383a:	e018      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4ba3      	ldr	r3, [pc, #652]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4aa2      	ldr	r2, [pc, #648]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003848:	e015      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f9d5 	bl	8004c00 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800385a:	e00c      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3324      	adds	r3, #36	; 0x24
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fa7e 	bl	8004d64 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800386c:	e003      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
      break;
 8003872:	e000      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800387c:	4b93      	ldr	r3, [pc, #588]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003888:	4990      	ldr	r1, [pc, #576]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	650b      	str	r3, [r1, #80]	; 0x50
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d826      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038c5 	.word	0x080038c5
 80038b4:	080038d3 	.word	0x080038d3
 80038b8:	080038e5 	.word	0x080038e5
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c4:	4b81      	ldr	r3, [pc, #516]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a80      	ldr	r2, [pc, #512]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038d0:	e015      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 f991 	bl	8004c00 <RCCEx_PLL2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e2:	e00c      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3324      	adds	r3, #36	; 0x24
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fa3a 	bl	8004d64 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
      break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003904:	4b71      	ldr	r3, [pc, #452]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003908:	f023 0207 	bic.w	r2, r3, #7
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	496e      	ldr	r1, [pc, #440]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	650b      	str	r3, [r1, #80]	; 0x50
 8003916:	e001      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003924:	2b00      	cmp	r3, #0
 8003926:	d042      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003930:	d02b      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003936:	d825      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003938:	2bc0      	cmp	r3, #192	; 0xc0
 800393a:	d028      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800393c:	2bc0      	cmp	r3, #192	; 0xc0
 800393e:	d821      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d016      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d81d      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d007      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003950:	e018      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003952:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	4a5d      	ldr	r2, [pc, #372]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800395e:	e017      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f94a 	bl	8004c00 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003970:	e00e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3324      	adds	r3, #36	; 0x24
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f001 f9f3 	bl	8004d64 <RCCEx_PLL3_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
      break;
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800398e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003996:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	494a      	ldr	r1, [pc, #296]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	650b      	str	r3, [r1, #80]	; 0x50
 80039a8:	e001      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d049      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039c4:	d030      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ca:	d82a      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039d0:	d02c      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80039d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039d6:	d824      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039dc:	d018      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d81e      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ec:	d007      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039ee:	e018      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a35      	ldr	r2, [pc, #212]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039fc:	e017      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 f8fb 	bl	8004c00 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a0e:	e00e      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3324      	adds	r3, #36	; 0x24
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f9a4 	bl	8004d64 <RCCEx_PLL3_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a20:	e005      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a42:	4922      	ldr	r1, [pc, #136]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	658b      	str	r3, [r1, #88]	; 0x58
 8003a48:	e001      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04b      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a64:	d030      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a6a:	d82a      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a70:	d02e      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a76:	d824      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a7c:	d018      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a82:	d81e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a8c:	d007      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a9c:	e019      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 f8ab 	bl	8004c00 <RCCEx_PLL2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aae:	e010      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3324      	adds	r3, #36	; 0x24
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f954 	bl	8004d64 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ac0:	e007      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac6:	e004      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003ac8:	bf00      	nop
 8003aca:	e002      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003acc:	58024400 	.word	0x58024400
      break;
 8003ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ad8:	4b99      	ldr	r3, [pc, #612]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ae6:	4996      	ldr	r1, [pc, #600]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	658b      	str	r3, [r1, #88]	; 0x58
 8003aec:	e001      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d032      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	2b30      	cmp	r3, #48	; 0x30
 8003b04:	d01c      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b06:	2b30      	cmp	r3, #48	; 0x30
 8003b08:	d817      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d00c      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d813      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d10f      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1a:	4b89      	ldr	r3, [pc, #548]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	4a88      	ldr	r2, [pc, #544]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b26:	e00e      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f866 	bl	8004c00 <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b38:	e005      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b40:	bf00      	nop
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b4c:	4b7c      	ldr	r3, [pc, #496]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	4979      	ldr	r1, [pc, #484]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d047      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b78:	d030      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b7e:	d82a      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b84:	d02c      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b8a:	d824      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d018      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	d81e      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba0:	d007      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003ba2:	e018      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba4:	4b66      	ldr	r3, [pc, #408]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	4a65      	ldr	r2, [pc, #404]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e017      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f821 	bl	8004c00 <RCCEx_PLL2_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bc2:	e00e      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3324      	adds	r3, #36	; 0x24
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f8ca 	bl	8004d64 <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bd4:	e005      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003bdc:	bf00      	nop
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003be8:	4b55      	ldr	r3, [pc, #340]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	4952      	ldr	r1, [pc, #328]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d049      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d02e      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1a:	d828      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c20:	d02a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c26:	d822      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c2c:	d026      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c32:	d81c      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c38:	d010      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c3e:	d816      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01d      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d111      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 ffd5 	bl	8004c00 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c5a:	e012      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3324      	adds	r3, #36	; 0x24
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f87e 	bl	8004d64 <RCCEx_PLL3_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c6c:	e009      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
      break;
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c74:	bf00      	nop
 8003c76:	e004      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c78:	bf00      	nop
 8003c7a:	e002      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c94:	492a      	ldr	r1, [pc, #168]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	650b      	str	r3, [r1, #80]	; 0x50
 8003c9a:	e001      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d04d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb6:	d02e      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cbc:	d828      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d02a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d822      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cce:	d026      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cd4:	d81c      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cda:	d010      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d816      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01d      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cea:	d111      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 ff84 	bl	8004c00 <RCCEx_PLL2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cfc:	e012      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3324      	adds	r3, #36	; 0x24
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 f82d 	bl	8004d64 <RCCEx_PLL3_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d0e:	e009      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      break;
 8003d14:	e006      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d16:	bf00      	nop
 8003d18:	e004      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d38:	4901      	ldr	r1, [pc, #4]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d3e:	e003      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d02f      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5c:	d00e      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d62:	d814      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6e:	4baf      	ldr	r3, [pc, #700]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4aae      	ldr	r2, [pc, #696]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d7a:	e00c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 ff3c 	bl	8004c00 <RCCEx_PLL2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
      break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d9c:	4ba3      	ldr	r3, [pc, #652]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	49a0      	ldr	r1, [pc, #640]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	650b      	str	r3, [r1, #80]	; 0x50
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d032      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d81b      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003de1 	.word	0x08003de1
 8003dd8:	08003def 	.word	0x08003def
 8003ddc:	08003e07 	.word	0x08003e07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a91      	ldr	r2, [pc, #580]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2102      	movs	r1, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 ff03 	bl	8004c00 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e0e:	4b87      	ldr	r3, [pc, #540]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	4984      	ldr	r1, [pc, #528]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e20:	e001      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8086 	beq.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e34:	4b7e      	ldr	r3, [pc, #504]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a7d      	ldr	r2, [pc, #500]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e40:	f7fe f9ae 	bl	80021a0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e46:	e009      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fe f9aa 	bl	80021a0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d902      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	75fb      	strb	r3, [r7, #23]
        break;
 8003e5a:	e005      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5c:	4b74      	ldr	r3, [pc, #464]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d166      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e6e:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e78:	4053      	eors	r3, r2
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d013      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e82:	4b6a      	ldr	r3, [pc, #424]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b67      	ldr	r3, [pc, #412]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a66      	ldr	r2, [pc, #408]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e98:	4b64      	ldr	r3, [pc, #400]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a63      	ldr	r2, [pc, #396]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ea4:	4a61      	ldr	r2, [pc, #388]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d115      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fe f973 	bl	80021a0 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ebc:	e00b      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe f96f 	bl	80021a0 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d902      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ed4:	e005      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed6:	4b55      	ldr	r3, [pc, #340]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d126      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f06:	0919      	lsrs	r1, r3, #4
 8003f08:	4b4a      	ldr	r3, [pc, #296]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	4947      	ldr	r1, [pc, #284]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
 8003f12:	e005      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f14:	4b45      	ldr	r3, [pc, #276]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a44      	ldr	r2, [pc, #272]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f1e:	6113      	str	r3, [r2, #16]
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2e:	493f      	ldr	r1, [pc, #252]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	670b      	str	r3, [r1, #112]	; 0x70
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	75bb      	strb	r3, [r7, #22]
 8003f3a:	e001      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8085 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f52:	2b28      	cmp	r3, #40	; 0x28
 8003f54:	d866      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08004039 	.word	0x08004039
 8003f60:	08004025 	.word	0x08004025
 8003f64:	08004025 	.word	0x08004025
 8003f68:	08004025 	.word	0x08004025
 8003f6c:	08004025 	.word	0x08004025
 8003f70:	08004025 	.word	0x08004025
 8003f74:	08004025 	.word	0x08004025
 8003f78:	08004025 	.word	0x08004025
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	08004025 	.word	0x08004025
 8003f84:	08004025 	.word	0x08004025
 8003f88:	08004025 	.word	0x08004025
 8003f8c:	08004025 	.word	0x08004025
 8003f90:	08004025 	.word	0x08004025
 8003f94:	08004025 	.word	0x08004025
 8003f98:	08004025 	.word	0x08004025
 8003f9c:	08004013 	.word	0x08004013
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	08004025 	.word	0x08004025
 8003fa8:	08004025 	.word	0x08004025
 8003fac:	08004025 	.word	0x08004025
 8003fb0:	08004025 	.word	0x08004025
 8003fb4:	08004025 	.word	0x08004025
 8003fb8:	08004025 	.word	0x08004025
 8003fbc:	08004039 	.word	0x08004039
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004025 	.word	0x08004025
 8003fc8:	08004025 	.word	0x08004025
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08004025 	.word	0x08004025
 8003fdc:	08004039 	.word	0x08004039
 8003fe0:	08004025 	.word	0x08004025
 8003fe4:	08004025 	.word	0x08004025
 8003fe8:	08004025 	.word	0x08004025
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	08004025 	.word	0x08004025
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	08004039 	.word	0x08004039
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fdfa 	bl	8004c00 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004010:	e013      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3324      	adds	r3, #36	; 0x24
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fea3 	bl	8004d64 <RCCEx_PLL3_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004022:	e00a      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e007      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800402a:	bf00      	nop
 800402c:	58024400 	.word	0x58024400
 8004030:	58024800 	.word	0x58024800
 8004034:	00ffffcf 	.word	0x00ffffcf
      break;
 8004038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004040:	4b96      	ldr	r3, [pc, #600]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404c:	4993      	ldr	r1, [pc, #588]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	654b      	str	r3, [r1, #84]	; 0x54
 8004052:	e001      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d038      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	2b05      	cmp	r3, #5
 800406a:	d821      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	080040b7 	.word	0x080040b7
 8004078:	0800408d 	.word	0x0800408d
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fdb4 	bl	8004c00 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800409c:	e00c      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3324      	adds	r3, #36	; 0x24
 80040a2:	2101      	movs	r1, #1
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fe5d 	bl	8004d64 <RCCEx_PLL3_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	75fb      	strb	r3, [r7, #23]
      break;
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80040b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040be:	4b77      	ldr	r3, [pc, #476]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f023 0207 	bic.w	r2, r3, #7
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	4974      	ldr	r1, [pc, #464]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	654b      	str	r3, [r1, #84]	; 0x54
 80040d0:	e001      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d03a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d821      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004137 	.word	0x08004137
 80040f8:	0800410d 	.word	0x0800410d
 80040fc:	0800411f 	.word	0x0800411f
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	2101      	movs	r1, #1
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fd74 	bl	8004c00 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800411c:	e00c      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	; 0x24
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fe1d 	bl	8004d64 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
      break;
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413e:	4b57      	ldr	r3, [pc, #348]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	4953      	ldr	r1, [pc, #332]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	658b      	str	r3, [r1, #88]	; 0x58
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d828      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d02a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004180:	d822      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004186:	d026      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800418c:	d81c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800418e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004198:	d816      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01d      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800419e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a2:	d111      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fd28 	bl	8004c00 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041b4:	e012      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fdd1 	bl	8004d64 <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f0:	492a      	ldr	r1, [pc, #168]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	654b      	str	r3, [r1, #84]	; 0x54
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04d      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800420e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004212:	d02e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004214:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004218:	d828      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d02a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d822      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422a:	d026      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800422c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004230:	d81c      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004236:	d010      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d816      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d111      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fcd6 	bl	8004c00 <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004258:	e012      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fd7f 	bl	8004d64 <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800427e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10c      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	4901      	ldr	r1, [pc, #4]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	658b      	str	r3, [r1, #88]	; 0x58
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800429c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d04b      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042ba:	d02e      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042c0:	d828      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c6:	d02a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d822      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d2:	d026      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80042d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d8:	d81c      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042de:	d010      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d816      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01d      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	d111      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fc82 	bl	8004c00 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004300:	e012      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd2b 	bl	8004d64 <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004312:	e009      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
      break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800432e:	4b9d      	ldr	r3, [pc, #628]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433c:	4999      	ldr	r1, [pc, #612]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800433e:	4313      	orrs	r3, r2
 8004340:	658b      	str	r3, [r1, #88]	; 0x58
 8004342:	e001      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d10a      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fcfc 	bl	8004d64 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004376:	4b8b      	ldr	r3, [pc, #556]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004384:	4987      	ldr	r1, [pc, #540]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004386:	4313      	orrs	r3, r2
 8004388:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d10a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fcdb 	bl	8004d64 <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b8:	4b7a      	ldr	r3, [pc, #488]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	4977      	ldr	r1, [pc, #476]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d034      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e2:	d01d      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e8:	d817      	bhi.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d009      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80043f4:	e011      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fbff 	bl	8004c00 <RCCEx_PLL2_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004406:	e00c      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3324      	adds	r3, #36	; 0x24
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fca8 	bl	8004d64 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004418:	e003      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
      break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004436:	495b      	ldr	r1, [pc, #364]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004438:	4313      	orrs	r3, r2
 800443a:	658b      	str	r3, [r1, #88]	; 0x58
 800443c:	e001      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d033      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004454:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004458:	d01c      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800445a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800445e:	d816      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004464:	d003      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446a:	d007      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800446c:	e00f      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a4c      	ldr	r2, [pc, #304]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800447a:	e00c      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3324      	adds	r3, #36	; 0x24
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc6e 	bl	8004d64 <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800448c:	e003      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
      break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449c:	4b41      	ldr	r3, [pc, #260]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	493e      	ldr	r1, [pc, #248]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	654b      	str	r3, [r1, #84]	; 0x54
 80044b0:	e001      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d029      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d007      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80044d0:	e00f      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d2:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044de:	e00b      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb8a 	bl	8004c00 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044f0:	e002      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
      break;
 80044f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	4926      	ldr	r1, [pc, #152]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800450c:	4313      	orrs	r3, r2
 800450e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004510:	e001      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3324      	adds	r3, #36	; 0x24
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc1b 	bl	8004d64 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d033      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454c:	d017      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800454e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004552:	d811      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004558:	d013      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800455a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455e:	d80b      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d010      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004568:	d106      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456a:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004576:	e007      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
      break;
 800457c:	e004      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459a:	4902      	ldr	r1, [pc, #8]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800459c:	4313      	orrs	r3, r2
 800459e:	654b      	str	r3, [r1, #84]	; 0x54
 80045a0:	e004      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b8:	4b31      	ldr	r3, [pc, #196]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	492e      	ldr	r1, [pc, #184]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045e4:	4926      	ldr	r1, [pc, #152]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f6:	4b22      	ldr	r3, [pc, #136]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004602:	491f      	ldr	r1, [pc, #124]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004604:	4313      	orrs	r3, r2
 8004606:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800461a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800461e:	6113      	str	r3, [r2, #16]
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800462a:	4915      	ldr	r1, [pc, #84]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	da08      	bge.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	490e      	ldr	r1, [pc, #56]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004646:	4313      	orrs	r3, r2
 8004648:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	4906      	ldr	r1, [pc, #24]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004666:	4313      	orrs	r3, r2
 8004668:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800466a:	7dbb      	ldrb	r3, [r7, #22]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	58024400 	.word	0x58024400

08004684 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004688:	f7ff f85a 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4904      	ldr	r1, [pc, #16]	; (80046ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	58024400 	.word	0x58024400
 80046ac:	08007ebc 	.word	0x08007ebc

080046b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046b8:	4ba1      	ldr	r3, [pc, #644]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046c2:	4b9f      	ldr	r3, [pc, #636]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	0b1b      	lsrs	r3, r3, #12
 80046c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046ce:	4b9c      	ldr	r3, [pc, #624]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046da:	4b99      	ldr	r3, [pc, #612]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8111 	beq.w	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b02      	cmp	r3, #2
 8004702:	f000 8083 	beq.w	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b02      	cmp	r3, #2
 800470a:	f200 80a1 	bhi.w	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d056      	beq.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800471a:	e099      	b.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b88      	ldr	r3, [pc, #544]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02d      	beq.n	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004728:	4b85      	ldr	r3, [pc, #532]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a84      	ldr	r2, [pc, #528]	; (8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a03 	vldr	s12, [r7, #12]
 8004766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004782:	e087      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c6:	e065      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800480a:	e043      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b48      	ldr	r3, [pc, #288]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800484e:	e021      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a03 	vldr	s12, [r7, #12]
 8004876:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004892:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	0a5b      	lsrs	r3, r3, #9
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ba:	ee17 2a90 	vmov	r2, s15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80048c2:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e8:	ee17 2a90 	vmov	r2, s15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800490a:	edd7 6a07 	vldr	s13, [r7, #28]
 800490e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004916:	ee17 2a90 	vmov	r2, s15
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800491e:	e008      	b.n	8004932 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
}
 8004932:	bf00      	nop
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
 8004944:	03d09000 	.word	0x03d09000
 8004948:	46000000 	.word	0x46000000
 800494c:	4c742400 	.word	0x4c742400
 8004950:	4a742400 	.word	0x4a742400
 8004954:	4af42400 	.word	0x4af42400

08004958 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004960:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800496a:	4b9f      	ldr	r3, [pc, #636]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	0d1b      	lsrs	r3, r3, #20
 8004970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004974:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004976:	4b9c      	ldr	r3, [pc, #624]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004982:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	08db      	lsrs	r3, r3, #3
 8004988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8111 	beq.w	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	f000 8083 	beq.w	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f200 80a1 	bhi.w	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d056      	beq.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049c2:	e099      	b.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c4:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02d      	beq.n	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049d0:	4b85      	ldr	r3, [pc, #532]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	08db      	lsrs	r3, r3, #3
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	4a84      	ldr	r2, [pc, #528]	; (8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a2a:	e087      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a6e:	e065      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b59      	ldr	r3, [pc, #356]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ab2:	e043      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ada:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af6:	e021      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b3c:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	0a5b      	lsrs	r3, r3, #9
 8004b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 2a90 	vmov	r2, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	0c1b      	lsrs	r3, r3, #16
 8004b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b90:	ee17 2a90 	vmov	r2, s15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbe:	ee17 2a90 	vmov	r2, s15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bc6:	e008      	b.n	8004bda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
}
 8004bda:	bf00      	nop
 8004bdc:	3724      	adds	r7, #36	; 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	58024400 	.word	0x58024400
 8004bec:	03d09000 	.word	0x03d09000
 8004bf0:	46000000 	.word	0x46000000
 8004bf4:	4c742400 	.word	0x4c742400
 8004bf8:	4a742400 	.word	0x4a742400
 8004bfc:	4af42400 	.word	0x4af42400

08004c00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0e:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d101      	bne.n	8004c1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e099      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fd fab9 	bl	80021a0 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c32:	f7fd fab5 	bl	80021a0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e086      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c50:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	493f      	ldr	r1, [pc, #252]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	628b      	str	r3, [r1, #40]	; 0x28
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c94:	4931      	ldr	r1, [pc, #196]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f023 0220 	bic.w	r2, r3, #32
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4928      	ldr	r1, [pc, #160]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <RCCEx_PLL2_Config+0x160>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	00d2      	lsls	r2, r2, #3
 8004cd8:	4920      	ldr	r1, [pc, #128]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	f043 0310 	orr.w	r3, r3, #16
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cfc:	e00f      	b.n	8004d1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d10:	e005      	b.n	8004d1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fd fa39 	bl	80021a0 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d32:	f7fd fa35 	bl	80021a0 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	ffff0007 	.word	0xffff0007

08004d64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d72:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d101      	bne.n	8004d82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e099      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d82:	4b4f      	ldr	r3, [pc, #316]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a4e      	ldr	r2, [pc, #312]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8e:	f7fd fa07 	bl	80021a0 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d96:	f7fd fa03 	bl	80021a0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e086      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da8:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004db4:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	051b      	lsls	r3, r3, #20
 8004dc2:	493f      	ldr	r1, [pc, #252]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	061b      	lsls	r3, r3, #24
 8004df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004df8:	4931      	ldr	r1, [pc, #196]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dfe:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	4928      	ldr	r1, [pc, #160]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <RCCEx_PLL3_Config+0x160>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	69d2      	ldr	r2, [r2, #28]
 8004e3a:	00d2      	lsls	r2, r2, #3
 8004e3c:	4920      	ldr	r1, [pc, #128]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e60:	e00f      	b.n	8004e82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e74:	e005      	b.n	8004e82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a0e      	ldr	r2, [pc, #56]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fd f987 	bl	80021a0 <HAL_GetTick>
 8004e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e96:	f7fd f983 	bl	80021a0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	ffff0007 	.word	0xffff0007

08004ec8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e0f1      	b.n	80050be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a78      	ldr	r2, [pc, #480]	; (80050c8 <HAL_SPI_Init+0x200>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <HAL_SPI_Init+0x42>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a77      	ldr	r2, [pc, #476]	; (80050cc <HAL_SPI_Init+0x204>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00a      	beq.n	8004f0a <HAL_SPI_Init+0x42>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_SPI_Init+0x208>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d005      	beq.n	8004f0a <HAL_SPI_Init+0x42>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d901      	bls.n	8004f0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0d9      	b.n	80050be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 ff66 	bl	8005ddc <SPI_GetPacketSize>
 8004f10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6c      	ldr	r2, [pc, #432]	; (80050c8 <HAL_SPI_Init+0x200>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00c      	beq.n	8004f36 <HAL_SPI_Init+0x6e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a6a      	ldr	r2, [pc, #424]	; (80050cc <HAL_SPI_Init+0x204>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_Init+0x6e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a69      	ldr	r2, [pc, #420]	; (80050d0 <HAL_SPI_Init+0x208>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Init+0x6e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d811      	bhi.n	8004f5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f3a:	4a63      	ldr	r2, [pc, #396]	; (80050c8 <HAL_SPI_Init+0x200>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a61      	ldr	r2, [pc, #388]	; (80050cc <HAL_SPI_Init+0x204>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_SPI_Init+0x8c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a60      	ldr	r2, [pc, #384]	; (80050d0 <HAL_SPI_Init+0x208>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d104      	bne.n	8004f5e <HAL_SPI_Init+0x96>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d901      	bls.n	8004f5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0af      	b.n	80050be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fc ff3a 	bl	8001dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004f9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d119      	bne.n	8004fda <HAL_SPI_Init+0x112>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fae:	d103      	bne.n	8004fb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10c      	bne.n	8004fda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc8:	d107      	bne.n	8004fda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	ea42 0103 	orr.w	r1, r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005064:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005078:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40013000 	.word	0x40013000
 80050cc:	40003800 	.word	0x40003800
 80050d0:	40003c00 	.word	0x40003c00

080050d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3320      	adds	r3, #32
 80050ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Transmit+0x2a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e1d7      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005106:	f7fd f84b 	bl	80021a0 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d007      	beq.n	8005128 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005118:	2302      	movs	r3, #2
 800511a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005124:	7efb      	ldrb	r3, [r7, #27]
 8005126:	e1c2      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_Transmit+0x60>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005140:	7efb      	ldrb	r3, [r7, #27]
 8005142:	e1b4      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2203      	movs	r2, #3
 8005148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005194:	d107      	bne.n	80051a6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b96      	ldr	r3, [pc, #600]	; (8005408 <HAL_SPI_Transmit+0x334>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	88f9      	ldrh	r1, [r7, #6]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d2:	d107      	bne.n	80051e4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d947      	bls.n	800527c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80051ec:	e03f      	b.n	800526e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d114      	bne.n	8005226 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005224:	e023      	b.n	800526e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005226:	f7fc ffbb 	bl	80021a0 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_Transmit+0x16a>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d102      	bne.n	8005244 <HAL_SPI_Transmit+0x170>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d114      	bne.n	800526e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fcfb 	bl	8005c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e11f      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1b9      	bne.n	80051ee <HAL_SPI_Transmit+0x11a>
 800527a:	e0f2      	b.n	8005462 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b07      	cmp	r3, #7
 8005282:	f240 80e7 	bls.w	8005454 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005286:	e05d      	b.n	8005344 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d132      	bne.n	80052fc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d918      	bls.n	80052d4 <HAL_SPI_Transmit+0x200>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052d2:	e037      	b.n	8005344 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052fa:	e023      	b.n	8005344 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052fc:	f7fc ff50 	bl	80021a0 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d803      	bhi.n	8005314 <HAL_SPI_Transmit+0x240>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <HAL_SPI_Transmit+0x246>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d114      	bne.n	8005344 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fc90 	bl	8005c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0b4      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d19b      	bne.n	8005288 <HAL_SPI_Transmit+0x1b4>
 8005350:	e087      	b.n	8005462 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d155      	bne.n	800540c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b03      	cmp	r3, #3
 800536a:	d918      	bls.n	800539e <HAL_SPI_Transmit+0x2ca>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d914      	bls.n	800539e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b04      	subs	r3, #4
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800539c:	e05a      	b.n	8005454 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d917      	bls.n	80053da <HAL_SPI_Transmit+0x306>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d013      	beq.n	80053da <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b02      	subs	r3, #2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80053d8:	e03c      	b.n	8005454 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3320      	adds	r3, #32
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005404:	e026      	b.n	8005454 <HAL_SPI_Transmit+0x380>
 8005406:	bf00      	nop
 8005408:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800540c:	f7fc fec8 	bl	80021a0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d803      	bhi.n	8005424 <HAL_SPI_Transmit+0x350>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d102      	bne.n	800542a <HAL_SPI_Transmit+0x356>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d114      	bne.n	8005454 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fc08 	bl	8005c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e02c      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	f47f af78 	bne.w	8005352 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2108      	movs	r1, #8
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fc87 	bl	8005d80 <SPI_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fbd9 	bl	8005c40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80054ac:	7efb      	ldrb	r3, [r7, #27]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop

080054b8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3330      	adds	r3, #48	; 0x30
 80054d2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054dc:	d112      	bne.n	8005504 <HAL_SPI_Receive+0x4c>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10e      	bne.n	8005504 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2204      	movs	r2, #4
 80054ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f978 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8005500:	4603      	mov	r3, r0
 8005502:	e16f      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_SPI_Receive+0x5a>
 800550e:	2302      	movs	r3, #2
 8005510:	e168      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551a:	f7fc fe41 	bl	80021a0 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d007      	beq.n	800553c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800552c:	2302      	movs	r3, #2
 800552e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005538:	7ffb      	ldrb	r3, [r7, #31]
 800553a:	e153      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Receive+0x90>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
 8005556:	e145      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2204      	movs	r2, #4
 800555c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80055a8:	d107      	bne.n	80055ba <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4b8a      	ldr	r3, [pc, #552]	; (80057ec <HAL_SPI_Receive+0x334>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	88f9      	ldrh	r1, [r7, #6]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e6:	d107      	bne.n	80055f8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d948      	bls.n	8005692 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005600:	e040      	b.n	8005684 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	f248 0308 	movw	r3, #32776	; 0x8008
 800560c:	4013      	ands	r3, r2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d014      	beq.n	800563c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800561a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800561c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005622:	1d1a      	adds	r2, r3, #4
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800563a:	e023      	b.n	8005684 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563c:	f7fc fdb0 	bl	80021a0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d803      	bhi.n	8005654 <HAL_SPI_Receive+0x19c>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d102      	bne.n	800565a <HAL_SPI_Receive+0x1a2>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d114      	bne.n	8005684 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 faf0 	bl	8005c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e0af      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1b8      	bne.n	8005602 <HAL_SPI_Receive+0x14a>
 8005690:	e095      	b.n	80057be <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b07      	cmp	r3, #7
 8005698:	f240 808b 	bls.w	80057b2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800569c:	e03f      	b.n	800571e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d114      	bne.n	80056d6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	8812      	ldrh	r2, [r2, #0]
 80056b4:	b292      	uxth	r2, r2
 80056b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80056d4:	e023      	b.n	800571e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fc fd63 	bl	80021a0 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Receive+0x236>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Receive+0x23c>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d114      	bne.n	800571e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 faa3 	bl	8005c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005708:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e062      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1b9      	bne.n	800569e <HAL_SPI_Receive+0x1e6>
 800572a:	e048      	b.n	80057be <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d117      	bne.n	800576a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005768:	e023      	b.n	80057b2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576a:	f7fc fd19 	bl	80021a0 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d803      	bhi.n	8005782 <HAL_SPI_Receive+0x2ca>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d102      	bne.n	8005788 <HAL_SPI_Receive+0x2d0>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d114      	bne.n	80057b2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fa59 	bl	8005c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e018      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1b6      	bne.n	800572c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa3e 	bl	8005c40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	ffff0000 	.word	0xffff0000

080057f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08e      	sub	sp, #56	; 0x38
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3320      	adds	r3, #32
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3330      	adds	r3, #48	; 0x30
 8005812:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x32>
 800581e:	2302      	movs	r3, #2
 8005820:	e209      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582a:	f7fc fcb9 	bl	80021a0 <HAL_GetTick>
 800582e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005830:	887b      	ldrh	r3, [r7, #2]
 8005832:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005834:	887b      	ldrh	r3, [r7, #2]
 8005836:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800583e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005846:	7efb      	ldrb	r3, [r7, #27]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d014      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x86>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005852:	d106      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800585c:	7efb      	ldrb	r3, [r7, #27]
 800585e:	2b04      	cmp	r3, #4
 8005860:	d009      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005862:	2302      	movs	r3, #2
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005874:	e1df      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x98>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x98>
 8005882:	887b      	ldrh	r3, [r7, #2]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800589a:	e1cc      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d003      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2205      	movs	r2, #5
 80058ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	887a      	ldrh	r2, [r7, #2]
 80058c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	887a      	ldrh	r2, [r7, #2]
 80058d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4b82      	ldr	r3, [pc, #520]	; (8005b00 <HAL_SPI_TransmitReceive+0x310>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	8879      	ldrh	r1, [r7, #2]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	430b      	orrs	r3, r1
 8005902:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800591c:	d107      	bne.n	800592e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b0f      	cmp	r3, #15
 8005934:	d970      	bls.n	8005a18 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005936:	e068      	b.n	8005a0a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d11a      	bne.n	800597c <HAL_SPI_TransmitReceive+0x18c>
 8005946:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005948:	2b00      	cmp	r3, #0
 800594a:	d017      	beq.n	800597c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800597a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	f248 0308 	movw	r3, #32776	; 0x8008
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01a      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x1d2>
 800598c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d017      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800599c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a2:	1d1a      	adds	r2, r3, #4
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c2:	f7fc fbed 	bl	80021a0 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d803      	bhi.n	80059da <HAL_SPI_TransmitReceive+0x1ea>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d102      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x1f0>
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d114      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f92d 	bl	8005c40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e115      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d193      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x148>
 8005a10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d190      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x148>
 8005a16:	e0e7      	b.n	8005be8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b07      	cmp	r3, #7
 8005a1e:	f240 80dd 	bls.w	8005bdc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a22:	e066      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d119      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x276>
 8005a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d016      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	881a      	ldrh	r2, [r3, #0]
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	1c9a      	adds	r2, r3, #2
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a64:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d11a      	bne.n	8005aaa <HAL_SPI_TransmitReceive+0x2ba>
 8005a74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	b292      	uxth	r2, r2
 8005a84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8a:	1c9a      	adds	r2, r3, #2
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005aa8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aaa:	f7fc fb79 	bl	80021a0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d803      	bhi.n	8005ac2 <HAL_SPI_TransmitReceive+0x2d2>
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x2d8>
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d114      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f8b9 	bl	8005c40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005adc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0a1      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005af2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d195      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x234>
 8005af8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d192      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x234>
 8005afe:	e073      	b.n	8005be8 <HAL_SPI_TransmitReceive+0x3f8>
 8005b00:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d11b      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x35a>
 8005b12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d018      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3320      	adds	r3, #32
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b48:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d11d      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x3a4>
 8005b58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01a      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6a:	7812      	ldrb	r2, [r2, #0]
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b92:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b94:	f7fc fb04 	bl	80021a0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d803      	bhi.n	8005bac <HAL_SPI_TransmitReceive+0x3bc>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d102      	bne.n	8005bb2 <HAL_SPI_TransmitReceive+0x3c2>
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d114      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f844 	bl	8005c40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e02c      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d190      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x314>
 8005be2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d18d      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2108      	movs	r1, #8
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f8c4 	bl	8005d80 <SPI_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f816 	bl	8005c40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e001      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3730      	adds	r7, #48	; 0x30
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop

08005c40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0208 	orr.w	r2, r2, #8
 8005c5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0210 	orr.w	r2, r2, #16
 8005c6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6919      	ldr	r1, [r3, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b3c      	ldr	r3, [pc, #240]	; (8005d7c <SPI_CloseTransfer+0x13c>)
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005c9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d014      	beq.n	8005cd6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00f      	beq.n	8005cd6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0220 	orr.w	r2, r2, #32
 8005cd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d014      	beq.n	8005d0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00f      	beq.n	8005d0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	f043 0201 	orr.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699a      	ldr	r2, [r3, #24]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00f      	beq.n	8005d60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d46:	f043 0208 	orr.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	fffffc90 	.word	0xfffffc90

08005d80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005d90:	e010      	b.n	8005db4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d92:	f7fc fa05 	bl	80021a0 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d803      	bhi.n	8005daa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d102      	bne.n	8005db0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e00f      	b.n	8005dd4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d0df      	beq.n	8005d92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3307      	adds	r3, #7
 8005dfa:	08db      	lsrs	r3, r3, #3
 8005dfc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e042      	b.n	8005eaa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc f83c 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f8c3 	bl	8005fe0 <UART_SetConfig>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e022      	b.n	8005eaa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fe1f 	bl	8006ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fea6 	bl	8006bf4 <UART_CheckIdleState>
 8005ea8:	4603      	mov	r3, r0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b08a      	sub	sp, #40	; 0x28
 8005eb6:	af02      	add	r7, sp, #8
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	f040 8083 	bne.w	8005fd4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_UART_Transmit+0x28>
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e07b      	b.n	8005fd6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_UART_Transmit+0x3a>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e074      	b.n	8005fd6 <HAL_UART_Transmit+0x124>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2221      	movs	r2, #33	; 0x21
 8005f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f04:	f7fc f94c 	bl	80021a0 <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f22:	d108      	bne.n	8005f36 <HAL_UART_Transmit+0x84>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e003      	b.n	8005f3e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f46:	e02c      	b.n	8005fa2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fe99 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e039      	b.n	8005fd6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e007      	b.n	8005f90 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1cc      	bne.n	8005f48 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2140      	movs	r1, #64	; 0x40
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fe66 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e000      	b.n	8005fd6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005fd4:	2302      	movs	r3, #2
  }
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe4:	b092      	sub	sp, #72	; 0x48
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	4313      	orrs	r3, r2
 8006006:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4bbe      	ldr	r3, [pc, #760]	; (8006308 <UART_SetConfig+0x328>)
 8006010:	4013      	ands	r3, r2
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006018:	430b      	orrs	r3, r1
 800601a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4ab3      	ldr	r2, [pc, #716]	; (800630c <UART_SetConfig+0x32c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006048:	4313      	orrs	r3, r2
 800604a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	4baf      	ldr	r3, [pc, #700]	; (8006310 <UART_SetConfig+0x330>)
 8006054:	4013      	ands	r3, r2
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800605c:	430b      	orrs	r3, r1
 800605e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f023 010f 	bic.w	r1, r3, #15
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4aa6      	ldr	r2, [pc, #664]	; (8006314 <UART_SetConfig+0x334>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d177      	bne.n	8006170 <UART_SetConfig+0x190>
 8006080:	4ba5      	ldr	r3, [pc, #660]	; (8006318 <UART_SetConfig+0x338>)
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006088:	2b28      	cmp	r3, #40	; 0x28
 800608a:	d86d      	bhi.n	8006168 <UART_SetConfig+0x188>
 800608c:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0xb4>)
 800608e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006092:	bf00      	nop
 8006094:	08006139 	.word	0x08006139
 8006098:	08006169 	.word	0x08006169
 800609c:	08006169 	.word	0x08006169
 80060a0:	08006169 	.word	0x08006169
 80060a4:	08006169 	.word	0x08006169
 80060a8:	08006169 	.word	0x08006169
 80060ac:	08006169 	.word	0x08006169
 80060b0:	08006169 	.word	0x08006169
 80060b4:	08006141 	.word	0x08006141
 80060b8:	08006169 	.word	0x08006169
 80060bc:	08006169 	.word	0x08006169
 80060c0:	08006169 	.word	0x08006169
 80060c4:	08006169 	.word	0x08006169
 80060c8:	08006169 	.word	0x08006169
 80060cc:	08006169 	.word	0x08006169
 80060d0:	08006169 	.word	0x08006169
 80060d4:	08006149 	.word	0x08006149
 80060d8:	08006169 	.word	0x08006169
 80060dc:	08006169 	.word	0x08006169
 80060e0:	08006169 	.word	0x08006169
 80060e4:	08006169 	.word	0x08006169
 80060e8:	08006169 	.word	0x08006169
 80060ec:	08006169 	.word	0x08006169
 80060f0:	08006169 	.word	0x08006169
 80060f4:	08006151 	.word	0x08006151
 80060f8:	08006169 	.word	0x08006169
 80060fc:	08006169 	.word	0x08006169
 8006100:	08006169 	.word	0x08006169
 8006104:	08006169 	.word	0x08006169
 8006108:	08006169 	.word	0x08006169
 800610c:	08006169 	.word	0x08006169
 8006110:	08006169 	.word	0x08006169
 8006114:	08006159 	.word	0x08006159
 8006118:	08006169 	.word	0x08006169
 800611c:	08006169 	.word	0x08006169
 8006120:	08006169 	.word	0x08006169
 8006124:	08006169 	.word	0x08006169
 8006128:	08006169 	.word	0x08006169
 800612c:	08006169 	.word	0x08006169
 8006130:	08006169 	.word	0x08006169
 8006134:	08006161 	.word	0x08006161
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613e:	e222      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006146:	e21e      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e21a      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e216      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006158:	2320      	movs	r3, #32
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e212      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e20e      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e20a      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a69      	ldr	r2, [pc, #420]	; (800631c <UART_SetConfig+0x33c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d130      	bne.n	80061dc <UART_SetConfig+0x1fc>
 800617a:	4b67      	ldr	r3, [pc, #412]	; (8006318 <UART_SetConfig+0x338>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	2b05      	cmp	r3, #5
 8006184:	d826      	bhi.n	80061d4 <UART_SetConfig+0x1f4>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <UART_SetConfig+0x1ac>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061a5 	.word	0x080061a5
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061b5 	.word	0x080061b5
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e1ec      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b2:	e1e8      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e1e4      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e1e0      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061c4:	2320      	movs	r3, #32
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e1dc      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d2:	e1d8      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e1d4      	b.n	8006586 <UART_SetConfig+0x5a6>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a4f      	ldr	r2, [pc, #316]	; (8006320 <UART_SetConfig+0x340>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d130      	bne.n	8006248 <UART_SetConfig+0x268>
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <UART_SetConfig+0x338>)
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b05      	cmp	r3, #5
 80061f0:	d826      	bhi.n	8006240 <UART_SetConfig+0x260>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x218>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006211 	.word	0x08006211
 80061fc:	08006219 	.word	0x08006219
 8006200:	08006221 	.word	0x08006221
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	2300      	movs	r3, #0
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006216:	e1b6      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006218:	2304      	movs	r3, #4
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621e:	e1b2      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006220:	2308      	movs	r3, #8
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006226:	e1ae      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006228:	2310      	movs	r3, #16
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e1aa      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006230:	2320      	movs	r3, #32
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e1a6      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006238:	2340      	movs	r3, #64	; 0x40
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e1a2      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e19e      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a35      	ldr	r2, [pc, #212]	; (8006324 <UART_SetConfig+0x344>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d130      	bne.n	80062b4 <UART_SetConfig+0x2d4>
 8006252:	4b31      	ldr	r3, [pc, #196]	; (8006318 <UART_SetConfig+0x338>)
 8006254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b05      	cmp	r3, #5
 800625c:	d826      	bhi.n	80062ac <UART_SetConfig+0x2cc>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <UART_SetConfig+0x284>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	0800627d 	.word	0x0800627d
 8006268:	08006285 	.word	0x08006285
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006295 	.word	0x08006295
 8006274:	0800629d 	.word	0x0800629d
 8006278:	080062a5 	.word	0x080062a5
 800627c:	2300      	movs	r3, #0
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006282:	e180      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e17c      	b.n	8006586 <UART_SetConfig+0x5a6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e178      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e174      	b.n	8006586 <UART_SetConfig+0x5a6>
 800629c:	2320      	movs	r3, #32
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e170      	b.n	8006586 <UART_SetConfig+0x5a6>
 80062a4:	2340      	movs	r3, #64	; 0x40
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062aa:	e16c      	b.n	8006586 <UART_SetConfig+0x5a6>
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e168      	b.n	8006586 <UART_SetConfig+0x5a6>
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <UART_SetConfig+0x348>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d142      	bne.n	8006344 <UART_SetConfig+0x364>
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <UART_SetConfig+0x338>)
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d838      	bhi.n	800633c <UART_SetConfig+0x35c>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0x2f0>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062e9 	.word	0x080062e9
 80062d4:	080062f1 	.word	0x080062f1
 80062d8:	080062f9 	.word	0x080062f9
 80062dc:	08006301 	.word	0x08006301
 80062e0:	0800632d 	.word	0x0800632d
 80062e4:	08006335 	.word	0x08006335
 80062e8:	2300      	movs	r3, #0
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e14a      	b.n	8006586 <UART_SetConfig+0x5a6>
 80062f0:	2304      	movs	r3, #4
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f6:	e146      	b.n	8006586 <UART_SetConfig+0x5a6>
 80062f8:	2308      	movs	r3, #8
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fe:	e142      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006300:	2310      	movs	r3, #16
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006306:	e13e      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006308:	cfff69f3 	.word	0xcfff69f3
 800630c:	58000c00 	.word	0x58000c00
 8006310:	11fff4ff 	.word	0x11fff4ff
 8006314:	40011000 	.word	0x40011000
 8006318:	58024400 	.word	0x58024400
 800631c:	40004400 	.word	0x40004400
 8006320:	40004800 	.word	0x40004800
 8006324:	40004c00 	.word	0x40004c00
 8006328:	40005000 	.word	0x40005000
 800632c:	2320      	movs	r3, #32
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e128      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e124      	b.n	8006586 <UART_SetConfig+0x5a6>
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e120      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4acb      	ldr	r2, [pc, #812]	; (8006678 <UART_SetConfig+0x698>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d176      	bne.n	800643c <UART_SetConfig+0x45c>
 800634e:	4bcb      	ldr	r3, [pc, #812]	; (800667c <UART_SetConfig+0x69c>)
 8006350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006356:	2b28      	cmp	r3, #40	; 0x28
 8006358:	d86c      	bhi.n	8006434 <UART_SetConfig+0x454>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0x380>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006405 	.word	0x08006405
 8006364:	08006435 	.word	0x08006435
 8006368:	08006435 	.word	0x08006435
 800636c:	08006435 	.word	0x08006435
 8006370:	08006435 	.word	0x08006435
 8006374:	08006435 	.word	0x08006435
 8006378:	08006435 	.word	0x08006435
 800637c:	08006435 	.word	0x08006435
 8006380:	0800640d 	.word	0x0800640d
 8006384:	08006435 	.word	0x08006435
 8006388:	08006435 	.word	0x08006435
 800638c:	08006435 	.word	0x08006435
 8006390:	08006435 	.word	0x08006435
 8006394:	08006435 	.word	0x08006435
 8006398:	08006435 	.word	0x08006435
 800639c:	08006435 	.word	0x08006435
 80063a0:	08006415 	.word	0x08006415
 80063a4:	08006435 	.word	0x08006435
 80063a8:	08006435 	.word	0x08006435
 80063ac:	08006435 	.word	0x08006435
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006435 	.word	0x08006435
 80063b8:	08006435 	.word	0x08006435
 80063bc:	08006435 	.word	0x08006435
 80063c0:	0800641d 	.word	0x0800641d
 80063c4:	08006435 	.word	0x08006435
 80063c8:	08006435 	.word	0x08006435
 80063cc:	08006435 	.word	0x08006435
 80063d0:	08006435 	.word	0x08006435
 80063d4:	08006435 	.word	0x08006435
 80063d8:	08006435 	.word	0x08006435
 80063dc:	08006435 	.word	0x08006435
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006435 	.word	0x08006435
 80063f0:	08006435 	.word	0x08006435
 80063f4:	08006435 	.word	0x08006435
 80063f8:	08006435 	.word	0x08006435
 80063fc:	08006435 	.word	0x08006435
 8006400:	0800642d 	.word	0x0800642d
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e0bc      	b.n	8006586 <UART_SetConfig+0x5a6>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e0b8      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e0b4      	b.n	8006586 <UART_SetConfig+0x5a6>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e0b0      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006424:	2320      	movs	r3, #32
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e0ac      	b.n	8006586 <UART_SetConfig+0x5a6>
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e0a8      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e0a4      	b.n	8006586 <UART_SetConfig+0x5a6>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a8f      	ldr	r2, [pc, #572]	; (8006680 <UART_SetConfig+0x6a0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d130      	bne.n	80064a8 <UART_SetConfig+0x4c8>
 8006446:	4b8d      	ldr	r3, [pc, #564]	; (800667c <UART_SetConfig+0x69c>)
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b05      	cmp	r3, #5
 8006450:	d826      	bhi.n	80064a0 <UART_SetConfig+0x4c0>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <UART_SetConfig+0x478>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006471 	.word	0x08006471
 800645c:	08006479 	.word	0x08006479
 8006460:	08006481 	.word	0x08006481
 8006464:	08006489 	.word	0x08006489
 8006468:	08006491 	.word	0x08006491
 800646c:	08006499 	.word	0x08006499
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006476:	e086      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006478:	2304      	movs	r3, #4
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647e:	e082      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006480:	2308      	movs	r3, #8
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e07e      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006488:	2310      	movs	r3, #16
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e07a      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006490:	2320      	movs	r3, #32
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e076      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006498:	2340      	movs	r3, #64	; 0x40
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e072      	b.n	8006586 <UART_SetConfig+0x5a6>
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e06e      	b.n	8006586 <UART_SetConfig+0x5a6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a75      	ldr	r2, [pc, #468]	; (8006684 <UART_SetConfig+0x6a4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d130      	bne.n	8006514 <UART_SetConfig+0x534>
 80064b2:	4b72      	ldr	r3, [pc, #456]	; (800667c <UART_SetConfig+0x69c>)
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d826      	bhi.n	800650c <UART_SetConfig+0x52c>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x4e4>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064dd 	.word	0x080064dd
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e2:	e050      	b.n	8006586 <UART_SetConfig+0x5a6>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ea:	e04c      	b.n	8006586 <UART_SetConfig+0x5a6>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e048      	b.n	8006586 <UART_SetConfig+0x5a6>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e044      	b.n	8006586 <UART_SetConfig+0x5a6>
 80064fc:	2320      	movs	r3, #32
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e040      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e03c      	b.n	8006586 <UART_SetConfig+0x5a6>
 800650c:	2380      	movs	r3, #128	; 0x80
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e038      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a5b      	ldr	r2, [pc, #364]	; (8006688 <UART_SetConfig+0x6a8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d130      	bne.n	8006580 <UART_SetConfig+0x5a0>
 800651e:	4b57      	ldr	r3, [pc, #348]	; (800667c <UART_SetConfig+0x69c>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	2b05      	cmp	r3, #5
 8006528:	d826      	bhi.n	8006578 <UART_SetConfig+0x598>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x550>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006549 	.word	0x08006549
 8006534:	08006551 	.word	0x08006551
 8006538:	08006559 	.word	0x08006559
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	2302      	movs	r3, #2
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654e:	e01a      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006550:	2304      	movs	r3, #4
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006556:	e016      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006558:	2308      	movs	r3, #8
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e012      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006560:	2310      	movs	r3, #16
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e00e      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006568:	2320      	movs	r3, #32
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e00a      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006570:	2340      	movs	r3, #64	; 0x40
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e006      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e002      	b.n	8006586 <UART_SetConfig+0x5a6>
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <UART_SetConfig+0x6a8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	f040 80f8 	bne.w	8006782 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006592:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006596:	2b20      	cmp	r3, #32
 8006598:	dc46      	bgt.n	8006628 <UART_SetConfig+0x648>
 800659a:	2b02      	cmp	r3, #2
 800659c:	f2c0 8082 	blt.w	80066a4 <UART_SetConfig+0x6c4>
 80065a0:	3b02      	subs	r3, #2
 80065a2:	2b1e      	cmp	r3, #30
 80065a4:	d87e      	bhi.n	80066a4 <UART_SetConfig+0x6c4>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <UART_SetConfig+0x5cc>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	0800662f 	.word	0x0800662f
 80065b0:	080066a5 	.word	0x080066a5
 80065b4:	08006637 	.word	0x08006637
 80065b8:	080066a5 	.word	0x080066a5
 80065bc:	080066a5 	.word	0x080066a5
 80065c0:	080066a5 	.word	0x080066a5
 80065c4:	08006647 	.word	0x08006647
 80065c8:	080066a5 	.word	0x080066a5
 80065cc:	080066a5 	.word	0x080066a5
 80065d0:	080066a5 	.word	0x080066a5
 80065d4:	080066a5 	.word	0x080066a5
 80065d8:	080066a5 	.word	0x080066a5
 80065dc:	080066a5 	.word	0x080066a5
 80065e0:	080066a5 	.word	0x080066a5
 80065e4:	08006657 	.word	0x08006657
 80065e8:	080066a5 	.word	0x080066a5
 80065ec:	080066a5 	.word	0x080066a5
 80065f0:	080066a5 	.word	0x080066a5
 80065f4:	080066a5 	.word	0x080066a5
 80065f8:	080066a5 	.word	0x080066a5
 80065fc:	080066a5 	.word	0x080066a5
 8006600:	080066a5 	.word	0x080066a5
 8006604:	080066a5 	.word	0x080066a5
 8006608:	080066a5 	.word	0x080066a5
 800660c:	080066a5 	.word	0x080066a5
 8006610:	080066a5 	.word	0x080066a5
 8006614:	080066a5 	.word	0x080066a5
 8006618:	080066a5 	.word	0x080066a5
 800661c:	080066a5 	.word	0x080066a5
 8006620:	080066a5 	.word	0x080066a5
 8006624:	08006697 	.word	0x08006697
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d037      	beq.n	800669c <UART_SetConfig+0x6bc>
 800662c:	e03a      	b.n	80066a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800662e:	f7fe f829 	bl	8004684 <HAL_RCCEx_GetD3PCLK1Freq>
 8006632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006634:	e03c      	b.n	80066b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe f838 	bl	80046b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006644:	e034      	b.n	80066b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006646:	f107 0318 	add.w	r3, r7, #24
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe f984 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006654:	e02c      	b.n	80066b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <UART_SetConfig+0x69c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d016      	beq.n	8006690 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <UART_SetConfig+0x69c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	4a07      	ldr	r2, [pc, #28]	; (800668c <UART_SetConfig+0x6ac>)
 800666e:	fa22 f303 	lsr.w	r3, r2, r3
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006674:	e01c      	b.n	80066b0 <UART_SetConfig+0x6d0>
 8006676:	bf00      	nop
 8006678:	40011400 	.word	0x40011400
 800667c:	58024400 	.word	0x58024400
 8006680:	40007800 	.word	0x40007800
 8006684:	40007c00 	.word	0x40007c00
 8006688:	58000c00 	.word	0x58000c00
 800668c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006690:	4b9d      	ldr	r3, [pc, #628]	; (8006908 <UART_SetConfig+0x928>)
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006694:	e00c      	b.n	80066b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006696:	4b9d      	ldr	r3, [pc, #628]	; (800690c <UART_SetConfig+0x92c>)
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669a:	e009      	b.n	80066b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a2:	e005      	b.n	80066b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80066ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 81de 	beq.w	8006a74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	4a94      	ldr	r2, [pc, #592]	; (8006910 <UART_SetConfig+0x930>)
 80066be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4413      	add	r3, r2
 80066d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d8:	429a      	cmp	r2, r3
 80066da:	d305      	bcc.n	80066e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d903      	bls.n	80066f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066ee:	e1c1      	b.n	8006a74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f2:	2200      	movs	r2, #0
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	60fa      	str	r2, [r7, #12]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	4a84      	ldr	r2, [pc, #528]	; (8006910 <UART_SetConfig+0x930>)
 80066fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006702:	b29b      	uxth	r3, r3
 8006704:	2200      	movs	r2, #0
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006712:	f7f9 fe3d 	bl	8000390 <__aeabi_uldivmod>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4610      	mov	r0, r2
 800671c:	4619      	mov	r1, r3
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	020b      	lsls	r3, r1, #8
 8006728:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800672c:	0202      	lsls	r2, r0, #8
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	6849      	ldr	r1, [r1, #4]
 8006732:	0849      	lsrs	r1, r1, #1
 8006734:	2000      	movs	r0, #0
 8006736:	460c      	mov	r4, r1
 8006738:	4605      	mov	r5, r0
 800673a:	eb12 0804 	adds.w	r8, r2, r4
 800673e:	eb43 0905 	adc.w	r9, r3, r5
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	469a      	mov	sl, r3
 800674a:	4693      	mov	fp, r2
 800674c:	4652      	mov	r2, sl
 800674e:	465b      	mov	r3, fp
 8006750:	4640      	mov	r0, r8
 8006752:	4649      	mov	r1, r9
 8006754:	f7f9 fe1c 	bl	8000390 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4613      	mov	r3, r2
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006766:	d308      	bcc.n	800677a <UART_SetConfig+0x79a>
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676e:	d204      	bcs.n	800677a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006776:	60da      	str	r2, [r3, #12]
 8006778:	e17c      	b.n	8006a74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006780:	e178      	b.n	8006a74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678a:	f040 80c5 	bne.w	8006918 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800678e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006792:	2b20      	cmp	r3, #32
 8006794:	dc48      	bgt.n	8006828 <UART_SetConfig+0x848>
 8006796:	2b00      	cmp	r3, #0
 8006798:	db7b      	blt.n	8006892 <UART_SetConfig+0x8b2>
 800679a:	2b20      	cmp	r3, #32
 800679c:	d879      	bhi.n	8006892 <UART_SetConfig+0x8b2>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x7c4>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	0800682f 	.word	0x0800682f
 80067a8:	08006837 	.word	0x08006837
 80067ac:	08006893 	.word	0x08006893
 80067b0:	08006893 	.word	0x08006893
 80067b4:	0800683f 	.word	0x0800683f
 80067b8:	08006893 	.word	0x08006893
 80067bc:	08006893 	.word	0x08006893
 80067c0:	08006893 	.word	0x08006893
 80067c4:	0800684f 	.word	0x0800684f
 80067c8:	08006893 	.word	0x08006893
 80067cc:	08006893 	.word	0x08006893
 80067d0:	08006893 	.word	0x08006893
 80067d4:	08006893 	.word	0x08006893
 80067d8:	08006893 	.word	0x08006893
 80067dc:	08006893 	.word	0x08006893
 80067e0:	08006893 	.word	0x08006893
 80067e4:	0800685f 	.word	0x0800685f
 80067e8:	08006893 	.word	0x08006893
 80067ec:	08006893 	.word	0x08006893
 80067f0:	08006893 	.word	0x08006893
 80067f4:	08006893 	.word	0x08006893
 80067f8:	08006893 	.word	0x08006893
 80067fc:	08006893 	.word	0x08006893
 8006800:	08006893 	.word	0x08006893
 8006804:	08006893 	.word	0x08006893
 8006808:	08006893 	.word	0x08006893
 800680c:	08006893 	.word	0x08006893
 8006810:	08006893 	.word	0x08006893
 8006814:	08006893 	.word	0x08006893
 8006818:	08006893 	.word	0x08006893
 800681c:	08006893 	.word	0x08006893
 8006820:	08006893 	.word	0x08006893
 8006824:	08006885 	.word	0x08006885
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	d02e      	beq.n	800688a <UART_SetConfig+0x8aa>
 800682c:	e031      	b.n	8006892 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682e:	f7fc ffb7 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 8006832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006834:	e033      	b.n	800689e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006836:	f7fc ffc9 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 800683a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800683c:	e02f      	b.n	800689e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800683e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006842:	4618      	mov	r0, r3
 8006844:	f7fd ff34 	bl	80046b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800684c:	e027      	b.n	800689e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800684e:	f107 0318 	add.w	r3, r7, #24
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe f880 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685c:	e01f      	b.n	800689e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800685e:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <UART_SetConfig+0x934>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800686a:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <UART_SetConfig+0x934>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	4a24      	ldr	r2, [pc, #144]	; (8006908 <UART_SetConfig+0x928>)
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800687c:	e00f      	b.n	800689e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800687e:	4b22      	ldr	r3, [pc, #136]	; (8006908 <UART_SetConfig+0x928>)
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006882:	e00c      	b.n	800689e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006884:	4b21      	ldr	r3, [pc, #132]	; (800690c <UART_SetConfig+0x92c>)
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800689c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800689e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80e7 	beq.w	8006a74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <UART_SetConfig+0x930>)
 80068ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b8:	005a      	lsls	r2, r3, #1
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	441a      	add	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	2b0f      	cmp	r3, #15
 80068d0:	d916      	bls.n	8006900 <UART_SetConfig+0x920>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d8:	d212      	bcs.n	8006900 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f023 030f 	bic.w	r3, r3, #15
 80068e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068f2:	4313      	orrs	r3, r2
 80068f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80068fc:	60da      	str	r2, [r3, #12]
 80068fe:	e0b9      	b.n	8006a74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006906:	e0b5      	b.n	8006a74 <UART_SetConfig+0xa94>
 8006908:	03d09000 	.word	0x03d09000
 800690c:	003d0900 	.word	0x003d0900
 8006910:	08007edc 	.word	0x08007edc
 8006914:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006918:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800691c:	2b20      	cmp	r3, #32
 800691e:	dc49      	bgt.n	80069b4 <UART_SetConfig+0x9d4>
 8006920:	2b00      	cmp	r3, #0
 8006922:	db7c      	blt.n	8006a1e <UART_SetConfig+0xa3e>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d87a      	bhi.n	8006a1e <UART_SetConfig+0xa3e>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x950>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	080069bb 	.word	0x080069bb
 8006934:	080069c3 	.word	0x080069c3
 8006938:	08006a1f 	.word	0x08006a1f
 800693c:	08006a1f 	.word	0x08006a1f
 8006940:	080069cb 	.word	0x080069cb
 8006944:	08006a1f 	.word	0x08006a1f
 8006948:	08006a1f 	.word	0x08006a1f
 800694c:	08006a1f 	.word	0x08006a1f
 8006950:	080069db 	.word	0x080069db
 8006954:	08006a1f 	.word	0x08006a1f
 8006958:	08006a1f 	.word	0x08006a1f
 800695c:	08006a1f 	.word	0x08006a1f
 8006960:	08006a1f 	.word	0x08006a1f
 8006964:	08006a1f 	.word	0x08006a1f
 8006968:	08006a1f 	.word	0x08006a1f
 800696c:	08006a1f 	.word	0x08006a1f
 8006970:	080069eb 	.word	0x080069eb
 8006974:	08006a1f 	.word	0x08006a1f
 8006978:	08006a1f 	.word	0x08006a1f
 800697c:	08006a1f 	.word	0x08006a1f
 8006980:	08006a1f 	.word	0x08006a1f
 8006984:	08006a1f 	.word	0x08006a1f
 8006988:	08006a1f 	.word	0x08006a1f
 800698c:	08006a1f 	.word	0x08006a1f
 8006990:	08006a1f 	.word	0x08006a1f
 8006994:	08006a1f 	.word	0x08006a1f
 8006998:	08006a1f 	.word	0x08006a1f
 800699c:	08006a1f 	.word	0x08006a1f
 80069a0:	08006a1f 	.word	0x08006a1f
 80069a4:	08006a1f 	.word	0x08006a1f
 80069a8:	08006a1f 	.word	0x08006a1f
 80069ac:	08006a1f 	.word	0x08006a1f
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d02e      	beq.n	8006a16 <UART_SetConfig+0xa36>
 80069b8:	e031      	b.n	8006a1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ba:	f7fc fef1 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 80069be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c0:	e033      	b.n	8006a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c2:	f7fc ff03 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 80069c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c8:	e02f      	b.n	8006a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd fe6e 	bl	80046b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d8:	e027      	b.n	8006a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069da:	f107 0318 	add.w	r3, r7, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fd ffba 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e8:	e01f      	b.n	8006a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ea:	4b2d      	ldr	r3, [pc, #180]	; (8006aa0 <UART_SetConfig+0xac0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069f6:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <UART_SetConfig+0xac0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <UART_SetConfig+0xac4>)
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a08:	e00f      	b.n	8006a2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006a0a:	4b26      	ldr	r3, [pc, #152]	; (8006aa4 <UART_SetConfig+0xac4>)
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0e:	e00c      	b.n	8006a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a10:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <UART_SetConfig+0xac8>)
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a14:	e009      	b.n	8006a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a1c:	e005      	b.n	8006a2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a28:	bf00      	nop
    }

    if (pclk != 0U)
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d021      	beq.n	8006a74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	4a1d      	ldr	r2, [pc, #116]	; (8006aac <UART_SetConfig+0xacc>)
 8006a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	441a      	add	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d909      	bls.n	8006a6e <UART_SetConfig+0xa8e>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a60:	d205      	bcs.n	8006a6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
 8006a6c:	e002      	b.n	8006a74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3748      	adds	r7, #72	; 0x48
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	03d09000 	.word	0x03d09000
 8006aa8:	003d0900 	.word	0x003d0900
 8006aac:	08007edc 	.word	0x08007edc

08006ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bae:	d10a      	bne.n	8006bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c04:	f7fb facc 	bl	80021a0 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d10e      	bne.n	8006c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f82f 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e025      	b.n	8006c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d10e      	bne.n	8006c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f819 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00f      	b.n	8006c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b09c      	sub	sp, #112	; 0x70
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	e0a9      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	f000 80a5 	beq.w	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca6:	f7fb fa7b 	bl	80021a0 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d302      	bcc.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8006cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d140      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	663b      	str	r3, [r7, #96]	; 0x60
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e069      	b.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d051      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5a:	d149      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d84:	637b      	str	r3, [r7, #52]	; 0x34
 8006d86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	613b      	str	r3, [r7, #16]
   return(result);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006db8:	623a      	str	r2, [r7, #32]
 8006dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e010      	b.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	f43f af46 	beq.w	8006c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3770      	adds	r7, #112	; 0x70
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e027      	b.n	8006e80 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	; 0x24
 8006e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0201 	bic.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e02d      	b.n	8006f00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2224      	movs	r2, #36	; 0x24
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f84f 	bl	8006f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e02d      	b.n	8006f7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	; 0x24
 8006f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f811 	bl	8006f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d108      	bne.n	8006fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fa4:	e031      	b.n	800700a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fa6:	2310      	movs	r3, #16
 8006fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006faa:	2310      	movs	r3, #16
 8006fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0e5b      	lsrs	r3, r3, #25
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	0f5b      	lsrs	r3, r3, #29
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	7b3a      	ldrb	r2, [r7, #12]
 8006fd2:	4911      	ldr	r1, [pc, #68]	; (8007018 <UARTEx_SetNbDataToProcess+0x94>)
 8006fd4:	5c8a      	ldrb	r2, [r1, r2]
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fda:	7b3a      	ldrb	r2, [r7, #12]
 8006fdc:	490f      	ldr	r1, [pc, #60]	; (800701c <UARTEx_SetNbDataToProcess+0x98>)
 8006fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	7b7a      	ldrb	r2, [r7, #13]
 8006ff0:	4909      	ldr	r1, [pc, #36]	; (8007018 <UARTEx_SetNbDataToProcess+0x94>)
 8006ff2:	5c8a      	ldrb	r2, [r1, r2]
 8006ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ff8:	7b7a      	ldrb	r2, [r7, #13]
 8006ffa:	4908      	ldr	r1, [pc, #32]	; (800701c <UARTEx_SetNbDataToProcess+0x98>)
 8006ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	08007ef4 	.word	0x08007ef4
 800701c:	08007efc 	.word	0x08007efc

08007020 <__errno>:
 8007020:	4b01      	ldr	r3, [pc, #4]	; (8007028 <__errno+0x8>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	24000030 	.word	0x24000030

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4d0d      	ldr	r5, [pc, #52]	; (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <__libc_init_array+0x3c>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2600      	movs	r6, #0
 8007038:	42a6      	cmp	r6, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4d0b      	ldr	r5, [pc, #44]	; (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	; (8007070 <__libc_init_array+0x44>)
 8007040:	f000 fc8e 	bl	8007960 <_init>
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2600      	movs	r6, #0
 800704a:	42a6      	cmp	r6, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f855 3b04 	ldr.w	r3, [r5], #4
 8007054:	4798      	blx	r3
 8007056:	3601      	adds	r6, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f855 3b04 	ldr.w	r3, [r5], #4
 800705e:	4798      	blx	r3
 8007060:	3601      	adds	r6, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	08007f40 	.word	0x08007f40
 8007068:	08007f40 	.word	0x08007f40
 800706c:	08007f40 	.word	0x08007f40
 8007070:	08007f44 	.word	0x08007f44

08007074 <memcpy>:
 8007074:	440a      	add	r2, r1
 8007076:	4291      	cmp	r1, r2
 8007078:	f100 33ff 	add.w	r3, r0, #4294967295
 800707c:	d100      	bne.n	8007080 <memcpy+0xc>
 800707e:	4770      	bx	lr
 8007080:	b510      	push	{r4, lr}
 8007082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708a:	4291      	cmp	r1, r2
 800708c:	d1f9      	bne.n	8007082 <memcpy+0xe>
 800708e:	bd10      	pop	{r4, pc}

08007090 <memset>:
 8007090:	4402      	add	r2, r0
 8007092:	4603      	mov	r3, r0
 8007094:	4293      	cmp	r3, r2
 8007096:	d100      	bne.n	800709a <memset+0xa>
 8007098:	4770      	bx	lr
 800709a:	f803 1b01 	strb.w	r1, [r3], #1
 800709e:	e7f9      	b.n	8007094 <memset+0x4>

080070a0 <siprintf>:
 80070a0:	b40e      	push	{r1, r2, r3}
 80070a2:	b500      	push	{lr}
 80070a4:	b09c      	sub	sp, #112	; 0x70
 80070a6:	ab1d      	add	r3, sp, #116	; 0x74
 80070a8:	9002      	str	r0, [sp, #8]
 80070aa:	9006      	str	r0, [sp, #24]
 80070ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070b0:	4809      	ldr	r0, [pc, #36]	; (80070d8 <siprintf+0x38>)
 80070b2:	9107      	str	r1, [sp, #28]
 80070b4:	9104      	str	r1, [sp, #16]
 80070b6:	4909      	ldr	r1, [pc, #36]	; (80070dc <siprintf+0x3c>)
 80070b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070bc:	9105      	str	r1, [sp, #20]
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	a902      	add	r1, sp, #8
 80070c4:	f000 f868 	bl	8007198 <_svfiprintf_r>
 80070c8:	9b02      	ldr	r3, [sp, #8]
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	b01c      	add	sp, #112	; 0x70
 80070d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070d4:	b003      	add	sp, #12
 80070d6:	4770      	bx	lr
 80070d8:	24000030 	.word	0x24000030
 80070dc:	ffff0208 	.word	0xffff0208

080070e0 <__ssputs_r>:
 80070e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	688e      	ldr	r6, [r1, #8]
 80070e6:	429e      	cmp	r6, r3
 80070e8:	4682      	mov	sl, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4690      	mov	r8, r2
 80070ee:	461f      	mov	r7, r3
 80070f0:	d838      	bhi.n	8007164 <__ssputs_r+0x84>
 80070f2:	898a      	ldrh	r2, [r1, #12]
 80070f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070f8:	d032      	beq.n	8007160 <__ssputs_r+0x80>
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	6909      	ldr	r1, [r1, #16]
 80070fe:	eba5 0901 	sub.w	r9, r5, r1
 8007102:	6965      	ldr	r5, [r4, #20]
 8007104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800710c:	3301      	adds	r3, #1
 800710e:	444b      	add	r3, r9
 8007110:	106d      	asrs	r5, r5, #1
 8007112:	429d      	cmp	r5, r3
 8007114:	bf38      	it	cc
 8007116:	461d      	movcc	r5, r3
 8007118:	0553      	lsls	r3, r2, #21
 800711a:	d531      	bpl.n	8007180 <__ssputs_r+0xa0>
 800711c:	4629      	mov	r1, r5
 800711e:	f000 fb55 	bl	80077cc <_malloc_r>
 8007122:	4606      	mov	r6, r0
 8007124:	b950      	cbnz	r0, 800713c <__ssputs_r+0x5c>
 8007126:	230c      	movs	r3, #12
 8007128:	f8ca 3000 	str.w	r3, [sl]
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713c:	6921      	ldr	r1, [r4, #16]
 800713e:	464a      	mov	r2, r9
 8007140:	f7ff ff98 	bl	8007074 <memcpy>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	6126      	str	r6, [r4, #16]
 8007152:	6165      	str	r5, [r4, #20]
 8007154:	444e      	add	r6, r9
 8007156:	eba5 0509 	sub.w	r5, r5, r9
 800715a:	6026      	str	r6, [r4, #0]
 800715c:	60a5      	str	r5, [r4, #8]
 800715e:	463e      	mov	r6, r7
 8007160:	42be      	cmp	r6, r7
 8007162:	d900      	bls.n	8007166 <__ssputs_r+0x86>
 8007164:	463e      	mov	r6, r7
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	4632      	mov	r2, r6
 800716a:	4641      	mov	r1, r8
 800716c:	f000 faa8 	bl	80076c0 <memmove>
 8007170:	68a3      	ldr	r3, [r4, #8]
 8007172:	1b9b      	subs	r3, r3, r6
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	4433      	add	r3, r6
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	2000      	movs	r0, #0
 800717e:	e7db      	b.n	8007138 <__ssputs_r+0x58>
 8007180:	462a      	mov	r2, r5
 8007182:	f000 fb97 	bl	80078b4 <_realloc_r>
 8007186:	4606      	mov	r6, r0
 8007188:	2800      	cmp	r0, #0
 800718a:	d1e1      	bne.n	8007150 <__ssputs_r+0x70>
 800718c:	6921      	ldr	r1, [r4, #16]
 800718e:	4650      	mov	r0, sl
 8007190:	f000 fab0 	bl	80076f4 <_free_r>
 8007194:	e7c7      	b.n	8007126 <__ssputs_r+0x46>
	...

08007198 <_svfiprintf_r>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4698      	mov	r8, r3
 800719e:	898b      	ldrh	r3, [r1, #12]
 80071a0:	061b      	lsls	r3, r3, #24
 80071a2:	b09d      	sub	sp, #116	; 0x74
 80071a4:	4607      	mov	r7, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	4614      	mov	r4, r2
 80071aa:	d50e      	bpl.n	80071ca <_svfiprintf_r+0x32>
 80071ac:	690b      	ldr	r3, [r1, #16]
 80071ae:	b963      	cbnz	r3, 80071ca <_svfiprintf_r+0x32>
 80071b0:	2140      	movs	r1, #64	; 0x40
 80071b2:	f000 fb0b 	bl	80077cc <_malloc_r>
 80071b6:	6028      	str	r0, [r5, #0]
 80071b8:	6128      	str	r0, [r5, #16]
 80071ba:	b920      	cbnz	r0, 80071c6 <_svfiprintf_r+0x2e>
 80071bc:	230c      	movs	r3, #12
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e0d1      	b.n	800736a <_svfiprintf_r+0x1d2>
 80071c6:	2340      	movs	r3, #64	; 0x40
 80071c8:	616b      	str	r3, [r5, #20]
 80071ca:	2300      	movs	r3, #0
 80071cc:	9309      	str	r3, [sp, #36]	; 0x24
 80071ce:	2320      	movs	r3, #32
 80071d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d8:	2330      	movs	r3, #48	; 0x30
 80071da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007384 <_svfiprintf_r+0x1ec>
 80071de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071e2:	f04f 0901 	mov.w	r9, #1
 80071e6:	4623      	mov	r3, r4
 80071e8:	469a      	mov	sl, r3
 80071ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ee:	b10a      	cbz	r2, 80071f4 <_svfiprintf_r+0x5c>
 80071f0:	2a25      	cmp	r2, #37	; 0x25
 80071f2:	d1f9      	bne.n	80071e8 <_svfiprintf_r+0x50>
 80071f4:	ebba 0b04 	subs.w	fp, sl, r4
 80071f8:	d00b      	beq.n	8007212 <_svfiprintf_r+0x7a>
 80071fa:	465b      	mov	r3, fp
 80071fc:	4622      	mov	r2, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff ff6d 	bl	80070e0 <__ssputs_r>
 8007206:	3001      	adds	r0, #1
 8007208:	f000 80aa 	beq.w	8007360 <_svfiprintf_r+0x1c8>
 800720c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800720e:	445a      	add	r2, fp
 8007210:	9209      	str	r2, [sp, #36]	; 0x24
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80a2 	beq.w	8007360 <_svfiprintf_r+0x1c8>
 800721c:	2300      	movs	r3, #0
 800721e:	f04f 32ff 	mov.w	r2, #4294967295
 8007222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007226:	f10a 0a01 	add.w	sl, sl, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007232:	931a      	str	r3, [sp, #104]	; 0x68
 8007234:	4654      	mov	r4, sl
 8007236:	2205      	movs	r2, #5
 8007238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723c:	4851      	ldr	r0, [pc, #324]	; (8007384 <_svfiprintf_r+0x1ec>)
 800723e:	f7f9 f857 	bl	80002f0 <memchr>
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	b9d8      	cbnz	r0, 800727e <_svfiprintf_r+0xe6>
 8007246:	06d0      	lsls	r0, r2, #27
 8007248:	bf44      	itt	mi
 800724a:	2320      	movmi	r3, #32
 800724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007250:	0711      	lsls	r1, r2, #28
 8007252:	bf44      	itt	mi
 8007254:	232b      	movmi	r3, #43	; 0x2b
 8007256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800725a:	f89a 3000 	ldrb.w	r3, [sl]
 800725e:	2b2a      	cmp	r3, #42	; 0x2a
 8007260:	d015      	beq.n	800728e <_svfiprintf_r+0xf6>
 8007262:	9a07      	ldr	r2, [sp, #28]
 8007264:	4654      	mov	r4, sl
 8007266:	2000      	movs	r0, #0
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4621      	mov	r1, r4
 800726e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007272:	3b30      	subs	r3, #48	; 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d94e      	bls.n	8007316 <_svfiprintf_r+0x17e>
 8007278:	b1b0      	cbz	r0, 80072a8 <_svfiprintf_r+0x110>
 800727a:	9207      	str	r2, [sp, #28]
 800727c:	e014      	b.n	80072a8 <_svfiprintf_r+0x110>
 800727e:	eba0 0308 	sub.w	r3, r0, r8
 8007282:	fa09 f303 	lsl.w	r3, r9, r3
 8007286:	4313      	orrs	r3, r2
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	46a2      	mov	sl, r4
 800728c:	e7d2      	b.n	8007234 <_svfiprintf_r+0x9c>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	9103      	str	r1, [sp, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfbb      	ittet	lt
 800729a:	425b      	neglt	r3, r3
 800729c:	f042 0202 	orrlt.w	r2, r2, #2
 80072a0:	9307      	strge	r3, [sp, #28]
 80072a2:	9307      	strlt	r3, [sp, #28]
 80072a4:	bfb8      	it	lt
 80072a6:	9204      	strlt	r2, [sp, #16]
 80072a8:	7823      	ldrb	r3, [r4, #0]
 80072aa:	2b2e      	cmp	r3, #46	; 0x2e
 80072ac:	d10c      	bne.n	80072c8 <_svfiprintf_r+0x130>
 80072ae:	7863      	ldrb	r3, [r4, #1]
 80072b0:	2b2a      	cmp	r3, #42	; 0x2a
 80072b2:	d135      	bne.n	8007320 <_svfiprintf_r+0x188>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	1d1a      	adds	r2, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	9203      	str	r2, [sp, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfb8      	it	lt
 80072c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80072c4:	3402      	adds	r4, #2
 80072c6:	9305      	str	r3, [sp, #20]
 80072c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007394 <_svfiprintf_r+0x1fc>
 80072cc:	7821      	ldrb	r1, [r4, #0]
 80072ce:	2203      	movs	r2, #3
 80072d0:	4650      	mov	r0, sl
 80072d2:	f7f9 f80d 	bl	80002f0 <memchr>
 80072d6:	b140      	cbz	r0, 80072ea <_svfiprintf_r+0x152>
 80072d8:	2340      	movs	r3, #64	; 0x40
 80072da:	eba0 000a 	sub.w	r0, r0, sl
 80072de:	fa03 f000 	lsl.w	r0, r3, r0
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	4303      	orrs	r3, r0
 80072e6:	3401      	adds	r4, #1
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ee:	4826      	ldr	r0, [pc, #152]	; (8007388 <_svfiprintf_r+0x1f0>)
 80072f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072f4:	2206      	movs	r2, #6
 80072f6:	f7f8 fffb 	bl	80002f0 <memchr>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d038      	beq.n	8007370 <_svfiprintf_r+0x1d8>
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <_svfiprintf_r+0x1f4>)
 8007300:	bb1b      	cbnz	r3, 800734a <_svfiprintf_r+0x1b2>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	3307      	adds	r3, #7
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	3308      	adds	r3, #8
 800730c:	9303      	str	r3, [sp, #12]
 800730e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007310:	4433      	add	r3, r6
 8007312:	9309      	str	r3, [sp, #36]	; 0x24
 8007314:	e767      	b.n	80071e6 <_svfiprintf_r+0x4e>
 8007316:	fb0c 3202 	mla	r2, ip, r2, r3
 800731a:	460c      	mov	r4, r1
 800731c:	2001      	movs	r0, #1
 800731e:	e7a5      	b.n	800726c <_svfiprintf_r+0xd4>
 8007320:	2300      	movs	r3, #0
 8007322:	3401      	adds	r4, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	4619      	mov	r1, r3
 8007328:	f04f 0c0a 	mov.w	ip, #10
 800732c:	4620      	mov	r0, r4
 800732e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007332:	3a30      	subs	r2, #48	; 0x30
 8007334:	2a09      	cmp	r2, #9
 8007336:	d903      	bls.n	8007340 <_svfiprintf_r+0x1a8>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0c5      	beq.n	80072c8 <_svfiprintf_r+0x130>
 800733c:	9105      	str	r1, [sp, #20]
 800733e:	e7c3      	b.n	80072c8 <_svfiprintf_r+0x130>
 8007340:	fb0c 2101 	mla	r1, ip, r1, r2
 8007344:	4604      	mov	r4, r0
 8007346:	2301      	movs	r3, #1
 8007348:	e7f0      	b.n	800732c <_svfiprintf_r+0x194>
 800734a:	ab03      	add	r3, sp, #12
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	462a      	mov	r2, r5
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <_svfiprintf_r+0x1f8>)
 8007352:	a904      	add	r1, sp, #16
 8007354:	4638      	mov	r0, r7
 8007356:	f3af 8000 	nop.w
 800735a:	1c42      	adds	r2, r0, #1
 800735c:	4606      	mov	r6, r0
 800735e:	d1d6      	bne.n	800730e <_svfiprintf_r+0x176>
 8007360:	89ab      	ldrh	r3, [r5, #12]
 8007362:	065b      	lsls	r3, r3, #25
 8007364:	f53f af2c 	bmi.w	80071c0 <_svfiprintf_r+0x28>
 8007368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800736a:	b01d      	add	sp, #116	; 0x74
 800736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007370:	ab03      	add	r3, sp, #12
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	462a      	mov	r2, r5
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <_svfiprintf_r+0x1f8>)
 8007378:	a904      	add	r1, sp, #16
 800737a:	4638      	mov	r0, r7
 800737c:	f000 f87a 	bl	8007474 <_printf_i>
 8007380:	e7eb      	b.n	800735a <_svfiprintf_r+0x1c2>
 8007382:	bf00      	nop
 8007384:	08007f04 	.word	0x08007f04
 8007388:	08007f0e 	.word	0x08007f0e
 800738c:	00000000 	.word	0x00000000
 8007390:	080070e1 	.word	0x080070e1
 8007394:	08007f0a 	.word	0x08007f0a

08007398 <_printf_common>:
 8007398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	4616      	mov	r6, r2
 800739e:	4699      	mov	r9, r3
 80073a0:	688a      	ldr	r2, [r1, #8]
 80073a2:	690b      	ldr	r3, [r1, #16]
 80073a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	bfb8      	it	lt
 80073ac:	4613      	movlt	r3, r2
 80073ae:	6033      	str	r3, [r6, #0]
 80073b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073b4:	4607      	mov	r7, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	b10a      	cbz	r2, 80073be <_printf_common+0x26>
 80073ba:	3301      	adds	r3, #1
 80073bc:	6033      	str	r3, [r6, #0]
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	0699      	lsls	r1, r3, #26
 80073c2:	bf42      	ittt	mi
 80073c4:	6833      	ldrmi	r3, [r6, #0]
 80073c6:	3302      	addmi	r3, #2
 80073c8:	6033      	strmi	r3, [r6, #0]
 80073ca:	6825      	ldr	r5, [r4, #0]
 80073cc:	f015 0506 	ands.w	r5, r5, #6
 80073d0:	d106      	bne.n	80073e0 <_printf_common+0x48>
 80073d2:	f104 0a19 	add.w	sl, r4, #25
 80073d6:	68e3      	ldr	r3, [r4, #12]
 80073d8:	6832      	ldr	r2, [r6, #0]
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	42ab      	cmp	r3, r5
 80073de:	dc26      	bgt.n	800742e <_printf_common+0x96>
 80073e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073e4:	1e13      	subs	r3, r2, #0
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	bf18      	it	ne
 80073ea:	2301      	movne	r3, #1
 80073ec:	0692      	lsls	r2, r2, #26
 80073ee:	d42b      	bmi.n	8007448 <_printf_common+0xb0>
 80073f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073f4:	4649      	mov	r1, r9
 80073f6:	4638      	mov	r0, r7
 80073f8:	47c0      	blx	r8
 80073fa:	3001      	adds	r0, #1
 80073fc:	d01e      	beq.n	800743c <_printf_common+0xa4>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	68e5      	ldr	r5, [r4, #12]
 8007402:	6832      	ldr	r2, [r6, #0]
 8007404:	f003 0306 	and.w	r3, r3, #6
 8007408:	2b04      	cmp	r3, #4
 800740a:	bf08      	it	eq
 800740c:	1aad      	subeq	r5, r5, r2
 800740e:	68a3      	ldr	r3, [r4, #8]
 8007410:	6922      	ldr	r2, [r4, #16]
 8007412:	bf0c      	ite	eq
 8007414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007418:	2500      	movne	r5, #0
 800741a:	4293      	cmp	r3, r2
 800741c:	bfc4      	itt	gt
 800741e:	1a9b      	subgt	r3, r3, r2
 8007420:	18ed      	addgt	r5, r5, r3
 8007422:	2600      	movs	r6, #0
 8007424:	341a      	adds	r4, #26
 8007426:	42b5      	cmp	r5, r6
 8007428:	d11a      	bne.n	8007460 <_printf_common+0xc8>
 800742a:	2000      	movs	r0, #0
 800742c:	e008      	b.n	8007440 <_printf_common+0xa8>
 800742e:	2301      	movs	r3, #1
 8007430:	4652      	mov	r2, sl
 8007432:	4649      	mov	r1, r9
 8007434:	4638      	mov	r0, r7
 8007436:	47c0      	blx	r8
 8007438:	3001      	adds	r0, #1
 800743a:	d103      	bne.n	8007444 <_printf_common+0xac>
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007444:	3501      	adds	r5, #1
 8007446:	e7c6      	b.n	80073d6 <_printf_common+0x3e>
 8007448:	18e1      	adds	r1, r4, r3
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	2030      	movs	r0, #48	; 0x30
 800744e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007452:	4422      	add	r2, r4
 8007454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800745c:	3302      	adds	r3, #2
 800745e:	e7c7      	b.n	80073f0 <_printf_common+0x58>
 8007460:	2301      	movs	r3, #1
 8007462:	4622      	mov	r2, r4
 8007464:	4649      	mov	r1, r9
 8007466:	4638      	mov	r0, r7
 8007468:	47c0      	blx	r8
 800746a:	3001      	adds	r0, #1
 800746c:	d0e6      	beq.n	800743c <_printf_common+0xa4>
 800746e:	3601      	adds	r6, #1
 8007470:	e7d9      	b.n	8007426 <_printf_common+0x8e>
	...

08007474 <_printf_i>:
 8007474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	7e0f      	ldrb	r7, [r1, #24]
 800747a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800747c:	2f78      	cmp	r7, #120	; 0x78
 800747e:	4691      	mov	r9, r2
 8007480:	4680      	mov	r8, r0
 8007482:	460c      	mov	r4, r1
 8007484:	469a      	mov	sl, r3
 8007486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800748a:	d807      	bhi.n	800749c <_printf_i+0x28>
 800748c:	2f62      	cmp	r7, #98	; 0x62
 800748e:	d80a      	bhi.n	80074a6 <_printf_i+0x32>
 8007490:	2f00      	cmp	r7, #0
 8007492:	f000 80d8 	beq.w	8007646 <_printf_i+0x1d2>
 8007496:	2f58      	cmp	r7, #88	; 0x58
 8007498:	f000 80a3 	beq.w	80075e2 <_printf_i+0x16e>
 800749c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074a4:	e03a      	b.n	800751c <_printf_i+0xa8>
 80074a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074aa:	2b15      	cmp	r3, #21
 80074ac:	d8f6      	bhi.n	800749c <_printf_i+0x28>
 80074ae:	a101      	add	r1, pc, #4	; (adr r1, 80074b4 <_printf_i+0x40>)
 80074b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b4:	0800750d 	.word	0x0800750d
 80074b8:	08007521 	.word	0x08007521
 80074bc:	0800749d 	.word	0x0800749d
 80074c0:	0800749d 	.word	0x0800749d
 80074c4:	0800749d 	.word	0x0800749d
 80074c8:	0800749d 	.word	0x0800749d
 80074cc:	08007521 	.word	0x08007521
 80074d0:	0800749d 	.word	0x0800749d
 80074d4:	0800749d 	.word	0x0800749d
 80074d8:	0800749d 	.word	0x0800749d
 80074dc:	0800749d 	.word	0x0800749d
 80074e0:	0800762d 	.word	0x0800762d
 80074e4:	08007551 	.word	0x08007551
 80074e8:	0800760f 	.word	0x0800760f
 80074ec:	0800749d 	.word	0x0800749d
 80074f0:	0800749d 	.word	0x0800749d
 80074f4:	0800764f 	.word	0x0800764f
 80074f8:	0800749d 	.word	0x0800749d
 80074fc:	08007551 	.word	0x08007551
 8007500:	0800749d 	.word	0x0800749d
 8007504:	0800749d 	.word	0x0800749d
 8007508:	08007617 	.word	0x08007617
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	1d1a      	adds	r2, r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	602a      	str	r2, [r5, #0]
 8007514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800751c:	2301      	movs	r3, #1
 800751e:	e0a3      	b.n	8007668 <_printf_i+0x1f4>
 8007520:	6820      	ldr	r0, [r4, #0]
 8007522:	6829      	ldr	r1, [r5, #0]
 8007524:	0606      	lsls	r6, r0, #24
 8007526:	f101 0304 	add.w	r3, r1, #4
 800752a:	d50a      	bpl.n	8007542 <_printf_i+0xce>
 800752c:	680e      	ldr	r6, [r1, #0]
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	2e00      	cmp	r6, #0
 8007532:	da03      	bge.n	800753c <_printf_i+0xc8>
 8007534:	232d      	movs	r3, #45	; 0x2d
 8007536:	4276      	negs	r6, r6
 8007538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753c:	485e      	ldr	r0, [pc, #376]	; (80076b8 <_printf_i+0x244>)
 800753e:	230a      	movs	r3, #10
 8007540:	e019      	b.n	8007576 <_printf_i+0x102>
 8007542:	680e      	ldr	r6, [r1, #0]
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800754a:	bf18      	it	ne
 800754c:	b236      	sxthne	r6, r6
 800754e:	e7ef      	b.n	8007530 <_printf_i+0xbc>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	1d19      	adds	r1, r3, #4
 8007556:	6029      	str	r1, [r5, #0]
 8007558:	0601      	lsls	r1, r0, #24
 800755a:	d501      	bpl.n	8007560 <_printf_i+0xec>
 800755c:	681e      	ldr	r6, [r3, #0]
 800755e:	e002      	b.n	8007566 <_printf_i+0xf2>
 8007560:	0646      	lsls	r6, r0, #25
 8007562:	d5fb      	bpl.n	800755c <_printf_i+0xe8>
 8007564:	881e      	ldrh	r6, [r3, #0]
 8007566:	4854      	ldr	r0, [pc, #336]	; (80076b8 <_printf_i+0x244>)
 8007568:	2f6f      	cmp	r7, #111	; 0x6f
 800756a:	bf0c      	ite	eq
 800756c:	2308      	moveq	r3, #8
 800756e:	230a      	movne	r3, #10
 8007570:	2100      	movs	r1, #0
 8007572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007576:	6865      	ldr	r5, [r4, #4]
 8007578:	60a5      	str	r5, [r4, #8]
 800757a:	2d00      	cmp	r5, #0
 800757c:	bfa2      	ittt	ge
 800757e:	6821      	ldrge	r1, [r4, #0]
 8007580:	f021 0104 	bicge.w	r1, r1, #4
 8007584:	6021      	strge	r1, [r4, #0]
 8007586:	b90e      	cbnz	r6, 800758c <_printf_i+0x118>
 8007588:	2d00      	cmp	r5, #0
 800758a:	d04d      	beq.n	8007628 <_printf_i+0x1b4>
 800758c:	4615      	mov	r5, r2
 800758e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007592:	fb03 6711 	mls	r7, r3, r1, r6
 8007596:	5dc7      	ldrb	r7, [r0, r7]
 8007598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800759c:	4637      	mov	r7, r6
 800759e:	42bb      	cmp	r3, r7
 80075a0:	460e      	mov	r6, r1
 80075a2:	d9f4      	bls.n	800758e <_printf_i+0x11a>
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d10b      	bne.n	80075c0 <_printf_i+0x14c>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	07de      	lsls	r6, r3, #31
 80075ac:	d508      	bpl.n	80075c0 <_printf_i+0x14c>
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	6861      	ldr	r1, [r4, #4]
 80075b2:	4299      	cmp	r1, r3
 80075b4:	bfde      	ittt	le
 80075b6:	2330      	movle	r3, #48	; 0x30
 80075b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075c0:	1b52      	subs	r2, r2, r5
 80075c2:	6122      	str	r2, [r4, #16]
 80075c4:	f8cd a000 	str.w	sl, [sp]
 80075c8:	464b      	mov	r3, r9
 80075ca:	aa03      	add	r2, sp, #12
 80075cc:	4621      	mov	r1, r4
 80075ce:	4640      	mov	r0, r8
 80075d0:	f7ff fee2 	bl	8007398 <_printf_common>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d14c      	bne.n	8007672 <_printf_i+0x1fe>
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	b004      	add	sp, #16
 80075de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e2:	4835      	ldr	r0, [pc, #212]	; (80076b8 <_printf_i+0x244>)
 80075e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075e8:	6829      	ldr	r1, [r5, #0]
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80075f0:	6029      	str	r1, [r5, #0]
 80075f2:	061d      	lsls	r5, r3, #24
 80075f4:	d514      	bpl.n	8007620 <_printf_i+0x1ac>
 80075f6:	07df      	lsls	r7, r3, #31
 80075f8:	bf44      	itt	mi
 80075fa:	f043 0320 	orrmi.w	r3, r3, #32
 80075fe:	6023      	strmi	r3, [r4, #0]
 8007600:	b91e      	cbnz	r6, 800760a <_printf_i+0x196>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	f023 0320 	bic.w	r3, r3, #32
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	2310      	movs	r3, #16
 800760c:	e7b0      	b.n	8007570 <_printf_i+0xfc>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	f043 0320 	orr.w	r3, r3, #32
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	2378      	movs	r3, #120	; 0x78
 8007618:	4828      	ldr	r0, [pc, #160]	; (80076bc <_printf_i+0x248>)
 800761a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800761e:	e7e3      	b.n	80075e8 <_printf_i+0x174>
 8007620:	0659      	lsls	r1, r3, #25
 8007622:	bf48      	it	mi
 8007624:	b2b6      	uxthmi	r6, r6
 8007626:	e7e6      	b.n	80075f6 <_printf_i+0x182>
 8007628:	4615      	mov	r5, r2
 800762a:	e7bb      	b.n	80075a4 <_printf_i+0x130>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	6826      	ldr	r6, [r4, #0]
 8007630:	6961      	ldr	r1, [r4, #20]
 8007632:	1d18      	adds	r0, r3, #4
 8007634:	6028      	str	r0, [r5, #0]
 8007636:	0635      	lsls	r5, r6, #24
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	d501      	bpl.n	8007640 <_printf_i+0x1cc>
 800763c:	6019      	str	r1, [r3, #0]
 800763e:	e002      	b.n	8007646 <_printf_i+0x1d2>
 8007640:	0670      	lsls	r0, r6, #25
 8007642:	d5fb      	bpl.n	800763c <_printf_i+0x1c8>
 8007644:	8019      	strh	r1, [r3, #0]
 8007646:	2300      	movs	r3, #0
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	4615      	mov	r5, r2
 800764c:	e7ba      	b.n	80075c4 <_printf_i+0x150>
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	1d1a      	adds	r2, r3, #4
 8007652:	602a      	str	r2, [r5, #0]
 8007654:	681d      	ldr	r5, [r3, #0]
 8007656:	6862      	ldr	r2, [r4, #4]
 8007658:	2100      	movs	r1, #0
 800765a:	4628      	mov	r0, r5
 800765c:	f7f8 fe48 	bl	80002f0 <memchr>
 8007660:	b108      	cbz	r0, 8007666 <_printf_i+0x1f2>
 8007662:	1b40      	subs	r0, r0, r5
 8007664:	6060      	str	r0, [r4, #4]
 8007666:	6863      	ldr	r3, [r4, #4]
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	2300      	movs	r3, #0
 800766c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007670:	e7a8      	b.n	80075c4 <_printf_i+0x150>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	462a      	mov	r2, r5
 8007676:	4649      	mov	r1, r9
 8007678:	4640      	mov	r0, r8
 800767a:	47d0      	blx	sl
 800767c:	3001      	adds	r0, #1
 800767e:	d0ab      	beq.n	80075d8 <_printf_i+0x164>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	079b      	lsls	r3, r3, #30
 8007684:	d413      	bmi.n	80076ae <_printf_i+0x23a>
 8007686:	68e0      	ldr	r0, [r4, #12]
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	4298      	cmp	r0, r3
 800768c:	bfb8      	it	lt
 800768e:	4618      	movlt	r0, r3
 8007690:	e7a4      	b.n	80075dc <_printf_i+0x168>
 8007692:	2301      	movs	r3, #1
 8007694:	4632      	mov	r2, r6
 8007696:	4649      	mov	r1, r9
 8007698:	4640      	mov	r0, r8
 800769a:	47d0      	blx	sl
 800769c:	3001      	adds	r0, #1
 800769e:	d09b      	beq.n	80075d8 <_printf_i+0x164>
 80076a0:	3501      	adds	r5, #1
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	9903      	ldr	r1, [sp, #12]
 80076a6:	1a5b      	subs	r3, r3, r1
 80076a8:	42ab      	cmp	r3, r5
 80076aa:	dcf2      	bgt.n	8007692 <_printf_i+0x21e>
 80076ac:	e7eb      	b.n	8007686 <_printf_i+0x212>
 80076ae:	2500      	movs	r5, #0
 80076b0:	f104 0619 	add.w	r6, r4, #25
 80076b4:	e7f5      	b.n	80076a2 <_printf_i+0x22e>
 80076b6:	bf00      	nop
 80076b8:	08007f15 	.word	0x08007f15
 80076bc:	08007f26 	.word	0x08007f26

080076c0 <memmove>:
 80076c0:	4288      	cmp	r0, r1
 80076c2:	b510      	push	{r4, lr}
 80076c4:	eb01 0402 	add.w	r4, r1, r2
 80076c8:	d902      	bls.n	80076d0 <memmove+0x10>
 80076ca:	4284      	cmp	r4, r0
 80076cc:	4623      	mov	r3, r4
 80076ce:	d807      	bhi.n	80076e0 <memmove+0x20>
 80076d0:	1e43      	subs	r3, r0, #1
 80076d2:	42a1      	cmp	r1, r4
 80076d4:	d008      	beq.n	80076e8 <memmove+0x28>
 80076d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076de:	e7f8      	b.n	80076d2 <memmove+0x12>
 80076e0:	4402      	add	r2, r0
 80076e2:	4601      	mov	r1, r0
 80076e4:	428a      	cmp	r2, r1
 80076e6:	d100      	bne.n	80076ea <memmove+0x2a>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076f2:	e7f7      	b.n	80076e4 <memmove+0x24>

080076f4 <_free_r>:
 80076f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d044      	beq.n	8007784 <_free_r+0x90>
 80076fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076fe:	9001      	str	r0, [sp, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f1a1 0404 	sub.w	r4, r1, #4
 8007706:	bfb8      	it	lt
 8007708:	18e4      	addlt	r4, r4, r3
 800770a:	f000 f913 	bl	8007934 <__malloc_lock>
 800770e:	4a1e      	ldr	r2, [pc, #120]	; (8007788 <_free_r+0x94>)
 8007710:	9801      	ldr	r0, [sp, #4]
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	b933      	cbnz	r3, 8007724 <_free_r+0x30>
 8007716:	6063      	str	r3, [r4, #4]
 8007718:	6014      	str	r4, [r2, #0]
 800771a:	b003      	add	sp, #12
 800771c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007720:	f000 b90e 	b.w	8007940 <__malloc_unlock>
 8007724:	42a3      	cmp	r3, r4
 8007726:	d908      	bls.n	800773a <_free_r+0x46>
 8007728:	6825      	ldr	r5, [r4, #0]
 800772a:	1961      	adds	r1, r4, r5
 800772c:	428b      	cmp	r3, r1
 800772e:	bf01      	itttt	eq
 8007730:	6819      	ldreq	r1, [r3, #0]
 8007732:	685b      	ldreq	r3, [r3, #4]
 8007734:	1949      	addeq	r1, r1, r5
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	e7ed      	b.n	8007716 <_free_r+0x22>
 800773a:	461a      	mov	r2, r3
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	b10b      	cbz	r3, 8007744 <_free_r+0x50>
 8007740:	42a3      	cmp	r3, r4
 8007742:	d9fa      	bls.n	800773a <_free_r+0x46>
 8007744:	6811      	ldr	r1, [r2, #0]
 8007746:	1855      	adds	r5, r2, r1
 8007748:	42a5      	cmp	r5, r4
 800774a:	d10b      	bne.n	8007764 <_free_r+0x70>
 800774c:	6824      	ldr	r4, [r4, #0]
 800774e:	4421      	add	r1, r4
 8007750:	1854      	adds	r4, r2, r1
 8007752:	42a3      	cmp	r3, r4
 8007754:	6011      	str	r1, [r2, #0]
 8007756:	d1e0      	bne.n	800771a <_free_r+0x26>
 8007758:	681c      	ldr	r4, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	6053      	str	r3, [r2, #4]
 800775e:	4421      	add	r1, r4
 8007760:	6011      	str	r1, [r2, #0]
 8007762:	e7da      	b.n	800771a <_free_r+0x26>
 8007764:	d902      	bls.n	800776c <_free_r+0x78>
 8007766:	230c      	movs	r3, #12
 8007768:	6003      	str	r3, [r0, #0]
 800776a:	e7d6      	b.n	800771a <_free_r+0x26>
 800776c:	6825      	ldr	r5, [r4, #0]
 800776e:	1961      	adds	r1, r4, r5
 8007770:	428b      	cmp	r3, r1
 8007772:	bf04      	itt	eq
 8007774:	6819      	ldreq	r1, [r3, #0]
 8007776:	685b      	ldreq	r3, [r3, #4]
 8007778:	6063      	str	r3, [r4, #4]
 800777a:	bf04      	itt	eq
 800777c:	1949      	addeq	r1, r1, r5
 800777e:	6021      	streq	r1, [r4, #0]
 8007780:	6054      	str	r4, [r2, #4]
 8007782:	e7ca      	b.n	800771a <_free_r+0x26>
 8007784:	b003      	add	sp, #12
 8007786:	bd30      	pop	{r4, r5, pc}
 8007788:	24000344 	.word	0x24000344

0800778c <sbrk_aligned>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4e0e      	ldr	r6, [pc, #56]	; (80077c8 <sbrk_aligned+0x3c>)
 8007790:	460c      	mov	r4, r1
 8007792:	6831      	ldr	r1, [r6, #0]
 8007794:	4605      	mov	r5, r0
 8007796:	b911      	cbnz	r1, 800779e <sbrk_aligned+0x12>
 8007798:	f000 f8bc 	bl	8007914 <_sbrk_r>
 800779c:	6030      	str	r0, [r6, #0]
 800779e:	4621      	mov	r1, r4
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 f8b7 	bl	8007914 <_sbrk_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d00a      	beq.n	80077c0 <sbrk_aligned+0x34>
 80077aa:	1cc4      	adds	r4, r0, #3
 80077ac:	f024 0403 	bic.w	r4, r4, #3
 80077b0:	42a0      	cmp	r0, r4
 80077b2:	d007      	beq.n	80077c4 <sbrk_aligned+0x38>
 80077b4:	1a21      	subs	r1, r4, r0
 80077b6:	4628      	mov	r0, r5
 80077b8:	f000 f8ac 	bl	8007914 <_sbrk_r>
 80077bc:	3001      	adds	r0, #1
 80077be:	d101      	bne.n	80077c4 <sbrk_aligned+0x38>
 80077c0:	f04f 34ff 	mov.w	r4, #4294967295
 80077c4:	4620      	mov	r0, r4
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	24000348 	.word	0x24000348

080077cc <_malloc_r>:
 80077cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d0:	1ccd      	adds	r5, r1, #3
 80077d2:	f025 0503 	bic.w	r5, r5, #3
 80077d6:	3508      	adds	r5, #8
 80077d8:	2d0c      	cmp	r5, #12
 80077da:	bf38      	it	cc
 80077dc:	250c      	movcc	r5, #12
 80077de:	2d00      	cmp	r5, #0
 80077e0:	4607      	mov	r7, r0
 80077e2:	db01      	blt.n	80077e8 <_malloc_r+0x1c>
 80077e4:	42a9      	cmp	r1, r5
 80077e6:	d905      	bls.n	80077f4 <_malloc_r+0x28>
 80077e8:	230c      	movs	r3, #12
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	2600      	movs	r6, #0
 80077ee:	4630      	mov	r0, r6
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f4:	4e2e      	ldr	r6, [pc, #184]	; (80078b0 <_malloc_r+0xe4>)
 80077f6:	f000 f89d 	bl	8007934 <__malloc_lock>
 80077fa:	6833      	ldr	r3, [r6, #0]
 80077fc:	461c      	mov	r4, r3
 80077fe:	bb34      	cbnz	r4, 800784e <_malloc_r+0x82>
 8007800:	4629      	mov	r1, r5
 8007802:	4638      	mov	r0, r7
 8007804:	f7ff ffc2 	bl	800778c <sbrk_aligned>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	4604      	mov	r4, r0
 800780c:	d14d      	bne.n	80078aa <_malloc_r+0xde>
 800780e:	6834      	ldr	r4, [r6, #0]
 8007810:	4626      	mov	r6, r4
 8007812:	2e00      	cmp	r6, #0
 8007814:	d140      	bne.n	8007898 <_malloc_r+0xcc>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	4631      	mov	r1, r6
 800781a:	4638      	mov	r0, r7
 800781c:	eb04 0803 	add.w	r8, r4, r3
 8007820:	f000 f878 	bl	8007914 <_sbrk_r>
 8007824:	4580      	cmp	r8, r0
 8007826:	d13a      	bne.n	800789e <_malloc_r+0xd2>
 8007828:	6821      	ldr	r1, [r4, #0]
 800782a:	3503      	adds	r5, #3
 800782c:	1a6d      	subs	r5, r5, r1
 800782e:	f025 0503 	bic.w	r5, r5, #3
 8007832:	3508      	adds	r5, #8
 8007834:	2d0c      	cmp	r5, #12
 8007836:	bf38      	it	cc
 8007838:	250c      	movcc	r5, #12
 800783a:	4629      	mov	r1, r5
 800783c:	4638      	mov	r0, r7
 800783e:	f7ff ffa5 	bl	800778c <sbrk_aligned>
 8007842:	3001      	adds	r0, #1
 8007844:	d02b      	beq.n	800789e <_malloc_r+0xd2>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	442b      	add	r3, r5
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	e00e      	b.n	800786c <_malloc_r+0xa0>
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	1b52      	subs	r2, r2, r5
 8007852:	d41e      	bmi.n	8007892 <_malloc_r+0xc6>
 8007854:	2a0b      	cmp	r2, #11
 8007856:	d916      	bls.n	8007886 <_malloc_r+0xba>
 8007858:	1961      	adds	r1, r4, r5
 800785a:	42a3      	cmp	r3, r4
 800785c:	6025      	str	r5, [r4, #0]
 800785e:	bf18      	it	ne
 8007860:	6059      	strne	r1, [r3, #4]
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	bf08      	it	eq
 8007866:	6031      	streq	r1, [r6, #0]
 8007868:	5162      	str	r2, [r4, r5]
 800786a:	604b      	str	r3, [r1, #4]
 800786c:	4638      	mov	r0, r7
 800786e:	f104 060b 	add.w	r6, r4, #11
 8007872:	f000 f865 	bl	8007940 <__malloc_unlock>
 8007876:	f026 0607 	bic.w	r6, r6, #7
 800787a:	1d23      	adds	r3, r4, #4
 800787c:	1af2      	subs	r2, r6, r3
 800787e:	d0b6      	beq.n	80077ee <_malloc_r+0x22>
 8007880:	1b9b      	subs	r3, r3, r6
 8007882:	50a3      	str	r3, [r4, r2]
 8007884:	e7b3      	b.n	80077ee <_malloc_r+0x22>
 8007886:	6862      	ldr	r2, [r4, #4]
 8007888:	42a3      	cmp	r3, r4
 800788a:	bf0c      	ite	eq
 800788c:	6032      	streq	r2, [r6, #0]
 800788e:	605a      	strne	r2, [r3, #4]
 8007890:	e7ec      	b.n	800786c <_malloc_r+0xa0>
 8007892:	4623      	mov	r3, r4
 8007894:	6864      	ldr	r4, [r4, #4]
 8007896:	e7b2      	b.n	80077fe <_malloc_r+0x32>
 8007898:	4634      	mov	r4, r6
 800789a:	6876      	ldr	r6, [r6, #4]
 800789c:	e7b9      	b.n	8007812 <_malloc_r+0x46>
 800789e:	230c      	movs	r3, #12
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	4638      	mov	r0, r7
 80078a4:	f000 f84c 	bl	8007940 <__malloc_unlock>
 80078a8:	e7a1      	b.n	80077ee <_malloc_r+0x22>
 80078aa:	6025      	str	r5, [r4, #0]
 80078ac:	e7de      	b.n	800786c <_malloc_r+0xa0>
 80078ae:	bf00      	nop
 80078b0:	24000344 	.word	0x24000344

080078b4 <_realloc_r>:
 80078b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b8:	4680      	mov	r8, r0
 80078ba:	4614      	mov	r4, r2
 80078bc:	460e      	mov	r6, r1
 80078be:	b921      	cbnz	r1, 80078ca <_realloc_r+0x16>
 80078c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c4:	4611      	mov	r1, r2
 80078c6:	f7ff bf81 	b.w	80077cc <_malloc_r>
 80078ca:	b92a      	cbnz	r2, 80078d8 <_realloc_r+0x24>
 80078cc:	f7ff ff12 	bl	80076f4 <_free_r>
 80078d0:	4625      	mov	r5, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d8:	f000 f838 	bl	800794c <_malloc_usable_size_r>
 80078dc:	4284      	cmp	r4, r0
 80078de:	4607      	mov	r7, r0
 80078e0:	d802      	bhi.n	80078e8 <_realloc_r+0x34>
 80078e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078e6:	d812      	bhi.n	800790e <_realloc_r+0x5a>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4640      	mov	r0, r8
 80078ec:	f7ff ff6e 	bl	80077cc <_malloc_r>
 80078f0:	4605      	mov	r5, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d0ed      	beq.n	80078d2 <_realloc_r+0x1e>
 80078f6:	42bc      	cmp	r4, r7
 80078f8:	4622      	mov	r2, r4
 80078fa:	4631      	mov	r1, r6
 80078fc:	bf28      	it	cs
 80078fe:	463a      	movcs	r2, r7
 8007900:	f7ff fbb8 	bl	8007074 <memcpy>
 8007904:	4631      	mov	r1, r6
 8007906:	4640      	mov	r0, r8
 8007908:	f7ff fef4 	bl	80076f4 <_free_r>
 800790c:	e7e1      	b.n	80078d2 <_realloc_r+0x1e>
 800790e:	4635      	mov	r5, r6
 8007910:	e7df      	b.n	80078d2 <_realloc_r+0x1e>
	...

08007914 <_sbrk_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	; (8007930 <_sbrk_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7fa fb58 	bl	8001fd4 <_sbrk>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_sbrk_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_sbrk_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	2400034c 	.word	0x2400034c

08007934 <__malloc_lock>:
 8007934:	4801      	ldr	r0, [pc, #4]	; (800793c <__malloc_lock+0x8>)
 8007936:	f000 b811 	b.w	800795c <__retarget_lock_acquire_recursive>
 800793a:	bf00      	nop
 800793c:	24000350 	.word	0x24000350

08007940 <__malloc_unlock>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__malloc_unlock+0x8>)
 8007942:	f000 b80c 	b.w	800795e <__retarget_lock_release_recursive>
 8007946:	bf00      	nop
 8007948:	24000350 	.word	0x24000350

0800794c <_malloc_usable_size_r>:
 800794c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007950:	1f18      	subs	r0, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	bfbc      	itt	lt
 8007956:	580b      	ldrlt	r3, [r1, r0]
 8007958:	18c0      	addlt	r0, r0, r3
 800795a:	4770      	bx	lr

0800795c <__retarget_lock_acquire_recursive>:
 800795c:	4770      	bx	lr

0800795e <__retarget_lock_release_recursive>:
 800795e:	4770      	bx	lr

08007960 <_init>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	bf00      	nop
 8007964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007966:	bc08      	pop	{r3}
 8007968:	469e      	mov	lr, r3
 800796a:	4770      	bx	lr

0800796c <_fini>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr
