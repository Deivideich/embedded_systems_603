
H755_SPI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08009f50  08009f50  00019f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c4  0800a8c4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8cc  0800a8cc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800a8d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  240001e8  0800aabc  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000498  0800aabc  00020498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161fe  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb0  00000000  00000000  00036414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00038fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00039f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bbff  00000000  00000000  0003ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a52  00000000  00000000  000769ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001812b4  00000000  00000000  0008d451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020e705  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  0020e758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009f38 	.word	0x08009f38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08009f38 	.word	0x08009f38

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f83b 	bl	8002898 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f832 	bl	8002898 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000214 	.word	0x24000214
 8000840:	24000218 	.word	0x24000218

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f81b 	bl	8002898 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f812 	bl	8002898 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000214 	.word	0x24000214
 8000880:	2400021a 	.word	0x2400021a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fcc0 	bl	800522c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f004 feaa 	bl	8005610 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400021c 	.word	0x2400021c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fc95 	bl	800522c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f004 fe80 	bl	8005610 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400021c 	.word	0x2400021c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fc6b 	bl	800522c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400021c 	.word	0x2400021c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fc4b 	bl	800522c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fc44 	bl	800522c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400021c 	.word	0x2400021c

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f004 fc1b 	bl	800522c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f004 fe06 	bl	8005610 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400021c 	.word	0x2400021c

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f006 fbaa 	bl	80071cc <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fc3a 	bl	8002310 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa4b 	bl	800103c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa5b 	bl	8001070 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f94b 	bl	8000e5e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f981 	bl	8000ed0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9c4 	bl	8000f5c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f916 	bl	8000e04 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa24 	bl	800102a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 f9dc 	bl	8000fac <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400021c 	.word	0x2400021c
 8000c08:	24000214 	.word	0x24000214
 8000c0c:	24000218 	.word	0x24000218
 8000c10:	2400021a 	.word	0x2400021a

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000208 	.word	0x24000208

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9b0 	bl	8000fca <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000208 	.word	0x24000208
 8000d40:	0800a4b4 	.word	0x0800a4b4
 8000d44:	0800a4bc 	.word	0x0800a4bc
 8000d48:	24000210 	.word	0x24000210

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000210 	.word	0x24000210

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000210 	.word	0x24000210

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	201c      	movs	r0, #28
 8000e22:	f7ff fd7f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e26:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <NRF24_disableDynamicPayloads+0x2c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000211 	.word	0x24000211

08000e34 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e44:	213f      	movs	r1, #63	; 0x3f
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fd6c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e4c:	e003      	b.n	8000e56 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fd67 	bl	8000924 <NRF24_write_register>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff fd0b 	bl	8000884 <NRF24_read_register>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f023 0306 	bic.w	r3, r3, #6
 8000e78:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d104      	bne.n	8000e8a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 0306 	orr.w	r3, r3, #6
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d104      	bne.n	8000e9a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e011      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d104      	bne.n	8000eaa <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e009      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d103      	bne.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0306 	orr.w	r3, r3, #6
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fd2e 	bl	8000924 <NRF24_write_register>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f7ff fcd0 	bl	8000884 <NRF24_read_register>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000ef4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	73bb      	strb	r3, [r7, #14]
 8000f0a:	e00d      	b.n	8000f28 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d107      	bne.n	8000f22 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	e002      	b.n	8000f28 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f7ff fcf9 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f32:	2006      	movs	r0, #6
 8000f34:	f7ff fca6 	bl	8000884 <NRF24_read_register>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d102      	bne.n	8000f48 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e002      	b.n	8000f4e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	24000212 	.word	0x24000212

08000f5c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fc8c 	bl	8000884 <NRF24_read_register>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f023 030c 	bic.w	r3, r3, #12
 8000f72:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00f      	beq.n	8000f9a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d104      	bne.n	8000f8a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e007      	b.n	8000f9a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fcc0 	bl	8000924 <NRF24_write_register>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fc67 	bl	8000884 <NRF24_read_register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f023 0302 	bic.w	r3, r3, #2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fcaf 	bl	8000924 <NRF24_write_register>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fd2:	f7ff fd31 	bl	8000a38 <NRF24_get_status>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d017      	beq.n	8001020 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	2007      	movs	r0, #7
 800100a:	f7ff fc8b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001018:	2120      	movs	r1, #32
 800101a:	2007      	movs	r0, #7
 800101c:	f7ff fc82 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001020:	7bbb      	ldrb	r3, [r7, #14]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800102e:	2170      	movs	r1, #112	; 0x70
 8001030:	2007      	movs	r0, #7
 8001032:	f7ff fc77 	bl	8000924 <NRF24_write_register>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fbde 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001048:	2350      	movs	r3, #80	; 0x50
 800104a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800104c:	2373      	movs	r3, #115	; 0x73
 800104e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2202      	movs	r2, #2
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <NRF24_ACTIVATE_cmd+0x30>)
 8001058:	f004 f8e8 	bl	800522c <HAL_SPI_Transmit>
	NRF24_csn(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fbd1 	bl	8000804 <NRF24_csn>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2400021c 	.word	0x2400021c

08001070 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b0a1      	sub	sp, #132	; 0x84
 8001074:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	49c3      	ldr	r1, [pc, #780]	; (8001388 <printRadioSettings+0x318>)
 800107c:	4618      	mov	r0, r3
 800107e:	f006 fd73 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f92a 	bl	80002e0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f107 0108 	add.w	r1, r7, #8
 8001094:	230a      	movs	r3, #10
 8001096:	48bd      	ldr	r0, [pc, #756]	; (800138c <printRadioSettings+0x31c>)
 8001098:	f004 ffb7 	bl	800600a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fbf1 	bl	8000884 <NRF24_read_register>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <printRadioSettings+0x5e>
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	49b2      	ldr	r1, [pc, #712]	; (8001390 <printRadioSettings+0x320>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 fd4e 	bl	8007b68 <siprintf>
 80010cc:	e00c      	b.n	80010e8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	49b0      	ldr	r1, [pc, #704]	; (8001394 <printRadioSettings+0x324>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 fd47 	bl	8007b68 <siprintf>
 80010da:	e005      	b.n	80010e8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	49ad      	ldr	r1, [pc, #692]	; (8001398 <printRadioSettings+0x328>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f006 fd40 	bl	8007b68 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f8f7 	bl	80002e0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	230a      	movs	r3, #10
 80010fc:	48a3      	ldr	r0, [pc, #652]	; (800138c <printRadioSettings+0x31c>)
 80010fe:	f004 ff84 	bl	800600a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fbbe 	bl	8000884 <NRF24_read_register>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800110e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001112:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfcc      	ite	gt
 800111a:	2301      	movgt	r3, #1
 800111c:	2300      	movle	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800112a:	2b00      	cmp	r3, #0
 800112c:	bfcc      	ite	gt
 800112e:	2301      	movgt	r3, #1
 8001130:	2300      	movle	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfcc      	ite	gt
 8001142:	2301      	movgt	r3, #1
 8001144:	2300      	movle	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800114a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfcc      	ite	gt
 8001156:	2301      	movgt	r3, #1
 8001158:	2300      	movle	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800115e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001162:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfcc      	ite	gt
 800116a:	2301      	movgt	r3, #1
 800116c:	2300      	movle	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f107 0008 	add.w	r0, r7, #8
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	9402      	str	r4, [sp, #8]
 800118c:	9101      	str	r1, [sp, #4]
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	4633      	mov	r3, r6
 8001192:	462a      	mov	r2, r5
 8001194:	4981      	ldr	r1, [pc, #516]	; (800139c <printRadioSettings+0x32c>)
 8001196:	f006 fce7 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f89e 	bl	80002e0 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f107 0108 	add.w	r1, r7, #8
 80011ac:	230a      	movs	r3, #10
 80011ae:	4877      	ldr	r0, [pc, #476]	; (800138c <printRadioSettings+0x31c>)
 80011b0:	f004 ff2b 	bl	800600a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f7ff fb65 	bl	8000884 <NRF24_read_register>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bfcc      	ite	gt
 80011cc:	2301      	movgt	r3, #1
 80011ce:	2300      	movle	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bfcc      	ite	gt
 80011e0:	2301      	movgt	r3, #1
 80011e2:	2300      	movle	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfcc      	ite	gt
 80011f4:	2301      	movgt	r3, #1
 80011f6:	2300      	movle	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001204:	2b00      	cmp	r3, #0
 8001206:	bfcc      	ite	gt
 8001208:	2301      	movgt	r3, #1
 800120a:	2300      	movle	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001214:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfcc      	ite	gt
 800121c:	2301      	movgt	r3, #1
 800121e:	2300      	movle	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f107 0008 	add.w	r0, r7, #8
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	9402      	str	r4, [sp, #8]
 800123e:	9101      	str	r1, [sp, #4]
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	4633      	mov	r3, r6
 8001244:	462a      	mov	r2, r5
 8001246:	4956      	ldr	r1, [pc, #344]	; (80013a0 <printRadioSettings+0x330>)
 8001248:	f006 fc8e 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f845 	bl	80002e0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	230a      	movs	r3, #10
 8001260:	484a      	ldr	r0, [pc, #296]	; (800138c <printRadioSettings+0x31c>)
 8001262:	f004 fed2 	bl	800600a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001266:	2003      	movs	r0, #3
 8001268:	f7ff fb0c 	bl	8000884 <NRF24_read_register>
 800126c:	4603      	mov	r3, r0
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001276:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800127a:	3302      	adds	r3, #2
 800127c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001280:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4946      	ldr	r1, [pc, #280]	; (80013a4 <printRadioSettings+0x334>)
 800128a:	4618      	mov	r0, r3
 800128c:	f006 fc6c 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f823 	bl	80002e0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f107 0108 	add.w	r1, r7, #8
 80012a2:	230a      	movs	r3, #10
 80012a4:	4839      	ldr	r0, [pc, #228]	; (800138c <printRadioSettings+0x31c>)
 80012a6:	f004 feb0 	bl	800600a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f7ff faea 	bl	8000884 <NRF24_read_register>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4939      	ldr	r1, [pc, #228]	; (80013a8 <printRadioSettings+0x338>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fc4f 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f806 	bl	80002e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	230a      	movs	r3, #10
 80012de:	482b      	ldr	r0, [pc, #172]	; (800138c <printRadioSettings+0x31c>)
 80012e0:	f004 fe93 	bl	800600a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80012e4:	2006      	movs	r0, #6
 80012e6:	f7ff facd 	bl	8000884 <NRF24_read_register>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80012f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <printRadioSettings+0x29a>
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	492a      	ldr	r1, [pc, #168]	; (80013ac <printRadioSettings+0x33c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f006 fc30 	bl	8007b68 <siprintf>
 8001308:	e005      	b.n	8001316 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4928      	ldr	r1, [pc, #160]	; (80013b0 <printRadioSettings+0x340>)
 8001310:	4618      	mov	r0, r3
 8001312:	f006 fc29 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffe0 	bl	80002e0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 0108 	add.w	r1, r7, #8
 8001328:	230a      	movs	r3, #10
 800132a:	4818      	ldr	r0, [pc, #96]	; (800138c <printRadioSettings+0x31c>)
 800132c:	f004 fe6d 	bl	800600a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001330:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001334:	f003 0306 	and.w	r3, r3, #6
 8001338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800133c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001346:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <printRadioSettings+0x2ec>
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <printRadioSettings+0x344>)
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fc07 	bl	8007b68 <siprintf>
 800135a:	e03b      	b.n	80013d4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800135c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <printRadioSettings+0x302>
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <printRadioSettings+0x348>)
 800136a:	4618      	mov	r0, r3
 800136c:	f006 fbfc 	bl	8007b68 <siprintf>
 8001370:	e030      	b.n	80013d4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001372:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001376:	2b02      	cmp	r3, #2
 8001378:	d122      	bne.n	80013c0 <printRadioSettings+0x350>
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	490f      	ldr	r1, [pc, #60]	; (80013bc <printRadioSettings+0x34c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f006 fbf1 	bl	8007b68 <siprintf>
 8001386:	e025      	b.n	80013d4 <printRadioSettings+0x364>
 8001388:	08009f50 	.word	0x08009f50
 800138c:	240002a4 	.word	0x240002a4
 8001390:	08009f84 	.word	0x08009f84
 8001394:	08009fa0 	.word	0x08009fa0
 8001398:	08009fbc 	.word	0x08009fbc
 800139c:	08009fd0 	.word	0x08009fd0
 80013a0:	0800a014 	.word	0x0800a014
 80013a4:	0800a060 	.word	0x0800a060
 80013a8:	0800a07c 	.word	0x0800a07c
 80013ac:	0800a090 	.word	0x0800a090
 80013b0:	0800a0a8 	.word	0x0800a0a8
 80013b4:	0800a0c0 	.word	0x0800a0c0
 80013b8:	0800a0d4 	.word	0x0800a0d4
 80013bc:	0800a0e8 	.word	0x0800a0e8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d105      	bne.n	80013d4 <printRadioSettings+0x364>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	49d7      	ldr	r1, [pc, #860]	; (800172c <printRadioSettings+0x6bc>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 fbca 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff81 	bl	80002e0 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	230a      	movs	r3, #10
 80013e8:	48d1      	ldr	r0, [pc, #836]	; (8001730 <printRadioSettings+0x6c0>)
 80013ea:	f004 fe0e 	bl	800600a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80013ee:	463b      	mov	r3, r7
 80013f0:	2205      	movs	r2, #5
 80013f2:	4619      	mov	r1, r3
 80013f4:	200a      	movs	r0, #10
 80013f6:	f7ff fa6d 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	461c      	mov	r4, r3
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	461d      	mov	r5, r3
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	787a      	ldrb	r2, [r7, #1]
 8001406:	7839      	ldrb	r1, [r7, #0]
 8001408:	f107 0008 	add.w	r0, r7, #8
 800140c:	9102      	str	r1, [sp, #8]
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	462b      	mov	r3, r5
 8001414:	4622      	mov	r2, r4
 8001416:	49c7      	ldr	r1, [pc, #796]	; (8001734 <printRadioSettings+0x6c4>)
 8001418:	f006 fba6 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ff5d 	bl	80002e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0108 	add.w	r1, r7, #8
 800142e:	230a      	movs	r3, #10
 8001430:	48bf      	ldr	r0, [pc, #764]	; (8001730 <printRadioSettings+0x6c0>)
 8001432:	f004 fdea 	bl	800600a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001436:	463b      	mov	r3, r7
 8001438:	2205      	movs	r2, #5
 800143a:	4619      	mov	r1, r3
 800143c:	200b      	movs	r0, #11
 800143e:	f7ff fa49 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	461c      	mov	r4, r3
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	461d      	mov	r5, r3
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	787a      	ldrb	r2, [r7, #1]
 800144e:	7839      	ldrb	r1, [r7, #0]
 8001450:	f107 0008 	add.w	r0, r7, #8
 8001454:	9102      	str	r1, [sp, #8]
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	462b      	mov	r3, r5
 800145c:	4622      	mov	r2, r4
 800145e:	49b6      	ldr	r1, [pc, #728]	; (8001738 <printRadioSettings+0x6c8>)
 8001460:	f006 fb82 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ff39 	bl	80002e0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	230a      	movs	r3, #10
 8001478:	48ad      	ldr	r0, [pc, #692]	; (8001730 <printRadioSettings+0x6c0>)
 800147a:	f004 fdc6 	bl	800600a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800147e:	463b      	mov	r3, r7
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	200c      	movs	r0, #12
 8001486:	f7ff fa25 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800148a:	783b      	ldrb	r3, [r7, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	49aa      	ldr	r1, [pc, #680]	; (800173c <printRadioSettings+0x6cc>)
 8001494:	4618      	mov	r0, r3
 8001496:	f006 fb67 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ff1e 	bl	80002e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	230a      	movs	r3, #10
 80014ae:	48a0      	ldr	r0, [pc, #640]	; (8001730 <printRadioSettings+0x6c0>)
 80014b0:	f004 fdab 	bl	800600a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80014b4:	463b      	mov	r3, r7
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	200d      	movs	r0, #13
 80014bc:	f7ff fa0a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014c0:	783b      	ldrb	r3, [r7, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	499d      	ldr	r1, [pc, #628]	; (8001740 <printRadioSettings+0x6d0>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 fb4c 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff03 	bl	80002e0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	230a      	movs	r3, #10
 80014e4:	4892      	ldr	r0, [pc, #584]	; (8001730 <printRadioSettings+0x6c0>)
 80014e6:	f004 fd90 	bl	800600a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80014ea:	463b      	mov	r3, r7
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	200e      	movs	r0, #14
 80014f2:	f7ff f9ef 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014f6:	783b      	ldrb	r3, [r7, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4991      	ldr	r1, [pc, #580]	; (8001744 <printRadioSettings+0x6d4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f006 fb31 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4885      	ldr	r0, [pc, #532]	; (8001730 <printRadioSettings+0x6c0>)
 800151c:	f004 fd75 	bl	800600a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001520:	463b      	mov	r3, r7
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	200f      	movs	r0, #15
 8001528:	f7ff f9d4 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800152c:	783b      	ldrb	r3, [r7, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4984      	ldr	r1, [pc, #528]	; (8001748 <printRadioSettings+0x6d8>)
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fb16 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fecd 	bl	80002e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	f107 0108 	add.w	r1, r7, #8
 800154e:	230a      	movs	r3, #10
 8001550:	4877      	ldr	r0, [pc, #476]	; (8001730 <printRadioSettings+0x6c0>)
 8001552:	f004 fd5a 	bl	800600a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001556:	463b      	mov	r3, r7
 8001558:	2205      	movs	r2, #5
 800155a:	4619      	mov	r1, r3
 800155c:	2010      	movs	r0, #16
 800155e:	f7ff f9b9 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001562:	793b      	ldrb	r3, [r7, #4]
 8001564:	461c      	mov	r4, r3
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	461d      	mov	r5, r3
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	787a      	ldrb	r2, [r7, #1]
 800156e:	7839      	ldrb	r1, [r7, #0]
 8001570:	f107 0008 	add.w	r0, r7, #8
 8001574:	9102      	str	r1, [sp, #8]
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	462b      	mov	r3, r5
 800157c:	4622      	mov	r2, r4
 800157e:	4973      	ldr	r1, [pc, #460]	; (800174c <printRadioSettings+0x6dc>)
 8001580:	f006 faf2 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fea9 	bl	80002e0 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f107 0108 	add.w	r1, r7, #8
 8001596:	230a      	movs	r3, #10
 8001598:	4865      	ldr	r0, [pc, #404]	; (8001730 <printRadioSettings+0x6c0>)
 800159a:	f004 fd36 	bl	800600a <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800159e:	2011      	movs	r0, #17
 80015a0:	f7ff f970 	bl	8000884 <NRF24_read_register>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4966      	ldr	r1, [pc, #408]	; (8001750 <printRadioSettings+0x6e0>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 fad5 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe8c 	bl	80002e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f107 0108 	add.w	r1, r7, #8
 80015d0:	230a      	movs	r3, #10
 80015d2:	4857      	ldr	r0, [pc, #348]	; (8001730 <printRadioSettings+0x6c0>)
 80015d4:	f004 fd19 	bl	800600a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80015d8:	2012      	movs	r0, #18
 80015da:	f7ff f953 	bl	8000884 <NRF24_read_register>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4958      	ldr	r1, [pc, #352]	; (8001754 <printRadioSettings+0x6e4>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 fab8 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fe6f 	bl	80002e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	230a      	movs	r3, #10
 800160c:	4848      	ldr	r0, [pc, #288]	; (8001730 <printRadioSettings+0x6c0>)
 800160e:	f004 fcfc 	bl	800600a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001612:	2013      	movs	r0, #19
 8001614:	f7ff f936 	bl	8000884 <NRF24_read_register>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	494b      	ldr	r1, [pc, #300]	; (8001758 <printRadioSettings+0x6e8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f006 fa9b 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fe52 	bl	80002e0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 0108 	add.w	r1, r7, #8
 8001644:	230a      	movs	r3, #10
 8001646:	483a      	ldr	r0, [pc, #232]	; (8001730 <printRadioSettings+0x6c0>)
 8001648:	f004 fcdf 	bl	800600a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800164c:	2014      	movs	r0, #20
 800164e:	f7ff f919 	bl	8000884 <NRF24_read_register>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	493d      	ldr	r1, [pc, #244]	; (800175c <printRadioSettings+0x6ec>)
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fa7e 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fe35 	bl	80002e0 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	f107 0108 	add.w	r1, r7, #8
 800167e:	230a      	movs	r3, #10
 8001680:	482b      	ldr	r0, [pc, #172]	; (8001730 <printRadioSettings+0x6c0>)
 8001682:	f004 fcc2 	bl	800600a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001686:	2015      	movs	r0, #21
 8001688:	f7ff f8fc 	bl	8000884 <NRF24_read_register>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001692:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4930      	ldr	r1, [pc, #192]	; (8001760 <printRadioSettings+0x6f0>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fa61 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fe18 	bl	80002e0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0108 	add.w	r1, r7, #8
 80016b8:	230a      	movs	r3, #10
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <printRadioSettings+0x6c0>)
 80016bc:	f004 fca5 	bl	800600a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80016c0:	2016      	movs	r0, #22
 80016c2:	f7ff f8df 	bl	8000884 <NRF24_read_register>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4922      	ldr	r1, [pc, #136]	; (8001764 <printRadioSettings+0x6f4>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f006 fa44 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fdfb 	bl	80002e0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 0108 	add.w	r1, r7, #8
 80016f2:	230a      	movs	r3, #10
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <printRadioSettings+0x6c0>)
 80016f6:	f004 fc88 	bl	800600a <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80016fa:	201c      	movs	r0, #28
 80016fc:	f7ff f8c2 	bl	8000884 <NRF24_read_register>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800170a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfcc      	ite	gt
 8001712:	2301      	movgt	r3, #1
 8001714:	2300      	movle	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800171a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800171e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001722:	2b00      	cmp	r3, #0
 8001724:	bfcc      	ite	gt
 8001726:	2301      	movgt	r3, #1
 8001728:	2300      	movle	r3, #0
 800172a:	e01d      	b.n	8001768 <printRadioSettings+0x6f8>
 800172c:	0800a0fc 	.word	0x0800a0fc
 8001730:	240002a4 	.word	0x240002a4
 8001734:	0800a110 	.word	0x0800a110
 8001738:	0800a140 	.word	0x0800a140
 800173c:	0800a170 	.word	0x0800a170
 8001740:	0800a198 	.word	0x0800a198
 8001744:	0800a1c0 	.word	0x0800a1c0
 8001748:	0800a1e8 	.word	0x0800a1e8
 800174c:	0800a210 	.word	0x0800a210
 8001750:	0800a23c 	.word	0x0800a23c
 8001754:	0800a258 	.word	0x0800a258
 8001758:	0800a274 	.word	0x0800a274
 800175c:	0800a290 	.word	0x0800a290
 8001760:	0800a2ac 	.word	0x0800a2ac
 8001764:	0800a2c8 	.word	0x0800a2c8
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfcc      	ite	gt
 8001778:	2301      	movgt	r3, #1
 800177a:	2300      	movle	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001780:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001784:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfcc      	ite	gt
 800178c:	2301      	movgt	r3, #1
 800178e:	2300      	movle	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001794:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001798:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800179c:	2b00      	cmp	r3, #0
 800179e:	bfcc      	ite	gt
 80017a0:	2301      	movgt	r3, #1
 80017a2:	2300      	movle	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bfcc      	ite	gt
 80017b4:	2301      	movgt	r3, #1
 80017b6:	2300      	movle	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f107 0008 	add.w	r0, r7, #8
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	9402      	str	r4, [sp, #8]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	4633      	mov	r3, r6
 80017c8:	462a      	mov	r2, r5
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <printRadioSettings+0x834>)
 80017cc:	f006 f9cc 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd83 	bl	80002e0 <strlen>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f107 0108 	add.w	r1, r7, #8
 80017e2:	230a      	movs	r3, #10
 80017e4:	4830      	ldr	r0, [pc, #192]	; (80018a8 <printRadioSettings+0x838>)
 80017e6:	f004 fc10 	bl	800600a <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017ea:	201d      	movs	r0, #29
 80017ec:	f7ff f84a 	bl	8000884 <NRF24_read_register>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <printRadioSettings+0x7a0>
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4929      	ldr	r1, [pc, #164]	; (80018ac <printRadioSettings+0x83c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f006 f9ad 	bl	8007b68 <siprintf>
 800180e:	e005      	b.n	800181c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4926      	ldr	r1, [pc, #152]	; (80018b0 <printRadioSettings+0x840>)
 8001816:	4618      	mov	r0, r3
 8001818:	f006 f9a6 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fd5d 	bl	80002e0 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f107 0108 	add.w	r1, r7, #8
 800182e:	230a      	movs	r3, #10
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <printRadioSettings+0x838>)
 8001832:	f004 fbea 	bl	800600a <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001836:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <printRadioSettings+0x7e0>
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <printRadioSettings+0x844>)
 8001848:	4618      	mov	r0, r3
 800184a:	f006 f98d 	bl	8007b68 <siprintf>
 800184e:	e005      	b.n	800185c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4918      	ldr	r1, [pc, #96]	; (80018b8 <printRadioSettings+0x848>)
 8001856:	4618      	mov	r0, r3
 8001858:	f006 f986 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fd3d 	bl	80002e0 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	230a      	movs	r3, #10
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <printRadioSettings+0x838>)
 8001872:	f004 fbca 	bl	800600a <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4910      	ldr	r1, [pc, #64]	; (80018bc <printRadioSettings+0x84c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f006 f973 	bl	8007b68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd2a 	bl	80002e0 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	f107 0108 	add.w	r1, r7, #8
 8001894:	230a      	movs	r3, #10
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <printRadioSettings+0x838>)
 8001898:	f004 fbb7 	bl	800600a <HAL_UART_Transmit>
}
 800189c:	bf00      	nop
 800189e:	3774      	adds	r7, #116	; 0x74
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	0800a2e4 	.word	0x0800a2e4
 80018a8:	240002a4 	.word	0x240002a4
 80018ac:	0800a330 	.word	0x0800a330
 80018b0:	0800a348 	.word	0x0800a348
 80018b4:	0800a360 	.word	0x0800a360
 80018b8:	0800a37c 	.word	0x0800a37c
 80018bc:	08009f50 	.word	0x08009f50

080018c0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80018c0:	b084      	sub	sp, #16
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	f107 0c08 	add.w	ip, r7, #8
 80018ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <nrf24_DebugUART_Init+0x2c>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2290      	movs	r2, #144	; 0x90
 80018d8:	4619      	mov	r1, r3
 80018da:	f005 fc77 	bl	80071cc <memcpy>
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018e6:	b004      	add	sp, #16
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	240002a4 	.word	0x240002a4

080018f0 <mySetupNRF24>:
//********** My Function ************//
//Collects setup NRF24 functions
//Group Port, CSN Pin, CE Pin, SPI handle, UART handle, channel, address, speed
void mySetupNRF24(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin,
		SPI_HandleTypeDef nrfSPI,UART_HandleTypeDef nrf24Uart,
		uint8_t channel, uint64_t address, rf24_datarate_e speed){
 80018f0:	b082      	sub	sp, #8
 80018f2:	b5b0      	push	{r4, r5, r7, lr}
 80018f4:	b0a4      	sub	sp, #144	; 0x90
 80018f6:	af22      	add	r7, sp, #136	; 0x88
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	803b      	strh	r3, [r7, #0]
	NRF24_begin(nrf24PORT,nrfCSN_Pin,nrfCE_Pin,nrfSPI);
 8001904:	883d      	ldrh	r5, [r7, #0]
 8001906:	887c      	ldrh	r4, [r7, #2]
 8001908:	4668      	mov	r0, sp
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2284      	movs	r2, #132	; 0x84
 8001910:	4619      	mov	r1, r3
 8001912:	f005 fc5b 	bl	80071cc <memcpy>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	462a      	mov	r2, r5
 800191a:	4621      	mov	r1, r4
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f899 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(nrf24Uart);
 8001922:	4668      	mov	r0, sp
 8001924:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	4619      	mov	r1, r3
 800192c:	f005 fc4e 	bl	80071cc <memcpy>
 8001930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001936:	f7ff ffc3 	bl	80018c0 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(true);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fa7a 	bl	8000e34 <NRF24_setAutoAck>
	NRF24_setChannel(channel);
 8001940:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fa1c 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800194a:	2020      	movs	r0, #32
 800194c:	f7ff fa2e 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_openReadingPipe(0, address);
 8001950:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff f9ab 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_setDataRate(speed);
 800195a:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fab6 	bl	8000ed0 <NRF24_setDataRate>
	printRadioSettings();
 8001964:	f7ff fb84 	bl	8001070 <printRadioSettings>
	NRF24_startListening();
 8001968:	f7ff f954 	bl	8000c14 <NRF24_startListening>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001976:	b002      	add	sp, #8
 8001978:	4770      	bx	lr

0800197a <myReadData>:

//Read Data
void myReadData(char* myRxData){
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  if(NRF24_available()){
 8001982:	f7ff f96d 	bl	8000c60 <NRF24_available>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <myReadData+0x2a>
			NRF24_read(myRxData, 32);
 800198c:	2120      	movs	r1, #32
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff f96e 	bl	8000c70 <NRF24_read>
//			NRF24_writeAckPayload(1, myAckPayload, 32); //Sends acknowledgement to receiver
			myRxData[32] = '\r';
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3320      	adds	r3, #32
 8001998:	220d      	movs	r2, #13
 800199a:	701a      	strb	r2, [r3, #0]
			myRxData[32+1] = '\n';
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3321      	adds	r3, #33	; 0x21
 80019a0:	220a      	movs	r2, #10
 80019a2:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_GPIO_Init+0xc0>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <MX_GPIO_Init+0xc4>)
 8001a42:	f000 ff29 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8001a46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_GPIO_Init+0xc4>)
 8001a60:	f000 fd6a 	bl	8002538 <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58020c00 	.word	0x58020c00

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b0cd      	sub	sp, #308	; 0x134
 8001a78:	af4a      	add	r7, sp, #296	; 0x128
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a80:	bf00      	nop
 8001a82:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <main+0xf4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <main+0x24>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dcf4      	bgt.n	8001a82 <main+0xe>
  if ( timeout < 0 )
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	da01      	bge.n	8001aa2 <main+0x2e>
  {
  Error_Handler();
 8001a9e:	f000 f8ed 	bl	8001c7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa2:	f000 fba3 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa6:	f000 f86d 	bl	8001b84 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <main+0xf4>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <main+0xf4>)
 8001ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <main+0xf4>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 feff 	bl	80028cc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 ff15 	bl	8002900 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ada:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001adc:	bf00      	nop
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <main+0xf4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <main+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dcf4      	bgt.n	8001ade <main+0x6a>
if ( timeout < 0 )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da01      	bge.n	8001afe <main+0x8a>
{
Error_Handler();
 8001afa:	f000 f8bf 	bl	8001c7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afe:	f7ff ff55 	bl	80019ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b02:	f000 f8d3 	bl	8001cac <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001b06:	f000 fa95 	bl	8002034 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  mySetupNRF24(nrf_CSN_PORT, nrf_CSN_PIN, nrf_CE_PIN,
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <main+0xf8>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	4c17      	ldr	r4, [pc, #92]	; (8001b70 <main+0xfc>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	9148      	str	r1, [sp, #288]	; 0x120
 8001b16:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 8001b1a:	233c      	movs	r3, #60	; 0x3c
 8001b1c:	9345      	str	r3, [sp, #276]	; 0x114
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <main+0x100>)
 8001b20:	ab21      	add	r3, sp, #132	; 0x84
 8001b22:	4611      	mov	r1, r2
 8001b24:	2290      	movs	r2, #144	; 0x90
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 fb50 	bl	80071cc <memcpy>
 8001b2c:	4668      	mov	r0, sp
 8001b2e:	1d23      	adds	r3, r4, #4
 8001b30:	2284      	movs	r2, #132	; 0x84
 8001b32:	4619      	mov	r1, r3
 8001b34:	f005 fb4a 	bl	80071cc <memcpy>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b42:	480d      	ldr	r0, [pc, #52]	; (8001b78 <main+0x104>)
 8001b44:	f7ff fed4 	bl	80018f0 <mySetupNRF24>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myReadData(myRxData);
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <main+0x108>)
 8001b4a:	f7ff ff16 	bl	800197a <myReadData>
	  HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, sizeof(myRxData), 10);
 8001b4e:	230a      	movs	r3, #10
 8001b50:	2232      	movs	r2, #50	; 0x32
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <main+0x108>)
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <main+0x100>)
 8001b56:	f004 fa58 	bl	800600a <HAL_UART_Transmit>
	  printf("Working UART\r\n");
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <main+0x10c>)
 8001b5c:	f005 fffc 	bl	8007b58 <puts>
	  HAL_Delay(250);
 8001b60:	20fa      	movs	r0, #250	; 0xfa
 8001b62:	f000 fbd5 	bl	8002310 <HAL_Delay>
	  myReadData(myRxData);
 8001b66:	e7ef      	b.n	8001b48 <main+0xd4>
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	24000008 	.word	0x24000008
 8001b70:	24000368 	.word	0x24000368
 8001b74:	240003f4 	.word	0x240003f4
 8001b78:	58020c00 	.word	0x58020c00
 8001b7c:	24000334 	.word	0x24000334
 8001b80:	0800a494 	.word	0x0800a494

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b09c      	sub	sp, #112	; 0x70
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	224c      	movs	r2, #76	; 0x4c
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 fb28 	bl	80071e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 fb22 	bl	80071e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f000 febf 	bl	8002928 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <SystemClock_Config+0xf0>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <SystemClock_Config+0xf0>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <SystemClock_Config+0xf0>)
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <SystemClock_Config+0xf4>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bcc:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <SystemClock_Config+0xf4>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <SystemClock_Config+0xf4>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001be0:	bf00      	nop
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <SystemClock_Config+0xf4>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bee:	d1f8      	bne.n	8001be2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001c06:	2312      	movs	r3, #18
 8001c08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c12:	2302      	movs	r3, #2
 8001c14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c16:	230c      	movs	r3, #12
 8001c18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001c1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fed7 	bl	80029dc <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c34:	f000 f822 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	233f      	movs	r3, #63	; 0x3f
 8001c3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c4c:	2340      	movs	r3, #64	; 0x40
 8001c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 faeb 	bl	8003238 <HAL_RCC_ClockConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001c68:	f000 f808 	bl	8001c7c <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3770      	adds	r7, #112	; 0x70
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58000400 	.word	0x58000400
 8001c78:	58024800 	.word	0x58024800

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <Error_Handler+0x8>
	...

08001c88 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c90:	1d39      	adds	r1, r7, #4
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	2201      	movs	r2, #1
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <__io_putchar+0x20>)
 8001c9a:	f004 f9b6 	bl	800600a <HAL_UART_Transmit>
  return ch;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	240003f4 	.word	0x240003f4

08001cac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cb2:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <MX_SPI1_Init+0xa8>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <MX_SPI1_Init+0xa4>)
 8001d3e:	f003 f96f 	bl	8005020 <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d48:	f7ff ff98 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	24000368 	.word	0x24000368
 8001d54:	40013000 	.word	0x40013000

08001d58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0b8      	sub	sp, #224	; 0xe0
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	22bc      	movs	r2, #188	; 0xbc
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fa35 	bl	80071e8 <memset>
  if(spiHandle->Instance==SPI1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_SPI_MspInit+0xbc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d141      	bne.n	8001e0c <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fdda 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001da2:	f7ff ff6b 	bl	8001c7c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_SPI_MspInit+0xc0>)
 8001da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_SPI_MspInit+0xc0>)
 8001dae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_SPI_MspInit+0xc0>)
 8001db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_SPI_MspInit+0xc0>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_SPI_MspInit+0xc0>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_SPI_MspInit+0xc0>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001de2:	2338      	movs	r3, #56	; 0x38
 8001de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e04:	4619      	mov	r1, r3
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <HAL_SPI_MspInit+0xc4>)
 8001e08:	f000 fb96 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	37e0      	adds	r7, #224	; 0xe0
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013000 	.word	0x40013000
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58020400 	.word	0x58020400

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_MspInit+0x30>)
 8001e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_MspInit+0x30>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_MspInit+0x30>)
 8001e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	58024400 	.word	0x58024400

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 fa16 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ec2:	f005 f959 	bl	8007178 <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2216      	movs	r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
	return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_exit>:

void _exit (int status)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ffe7 	bl	8001eb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eea:	e7fe      	b.n	8001eea <_exit+0x12>

08001eec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e00a      	b.n	8001f14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001efe:	f3af 8000 	nop.w
 8001f02:	4601      	mov	r1, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	60ba      	str	r2, [r7, #8]
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf0      	blt.n	8001efe <_read+0x12>
	}

return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e009      	b.n	8001f4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60ba      	str	r2, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fea1 	bl	8001c88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf1      	blt.n	8001f38 <_write+0x12>
	}
	return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_close>:

int _close(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f86:	605a      	str	r2, [r3, #4]
	return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_isatty>:

int _isatty(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f005 f8be 	bl	8007178 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	24080000 	.word	0x24080000
 8002028:	00000400 	.word	0x00000400
 800202c:	240003f0 	.word	0x240003f0
 8002030:	24000498 	.word	0x24000498

08002034 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 800203a:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <MX_USART3_UART_Init+0x94>)
 800203c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 800207e:	f003 ff74 	bl	8005f6a <HAL_UART_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002088:	f7ff fdf8 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 8002090:	f004 ffa8 	bl	8006fe4 <HAL_UARTEx_SetTxFifoThreshold>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800209a:	f7ff fdef 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 80020a2:	f004 ffdd 	bl	8007060 <HAL_UARTEx_SetRxFifoThreshold>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f7ff fde6 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_USART3_UART_Init+0x90>)
 80020b2:	f004 ff5e 	bl	8006f72 <HAL_UARTEx_DisableFifoMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f7ff fdde 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	240003f4 	.word	0x240003f4
 80020c8:	40004800 	.word	0x40004800

080020cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0b8      	sub	sp, #224	; 0xe0
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	22bc      	movs	r2, #188	; 0xbc
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f005 f87b 	bl	80071e8 <memset>
  if(uartHandle->Instance==USART3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_UART_MspInit+0xc0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d142      	bne.n	8002182 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020fc:	2302      	movs	r3, #2
 80020fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	4618      	mov	r0, r3
 800210c:	f001 fc20 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002116:	f7ff fdb1 	bl	8001c7c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_UART_MspInit+0xc4>)
 800211c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_UART_MspInit+0xc4>)
 8002122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_UART_MspInit+0xc4>)
 800212c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_UART_MspInit+0xc4>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_UART_MspInit+0xc4>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_UART_MspInit+0xc4>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800215a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002170:	2307      	movs	r3, #7
 8002172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <HAL_UART_MspInit+0xc8>)
 800217e:	f000 f9db 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002182:	bf00      	nop
 8002184:	37e0      	adds	r7, #224	; 0xe0
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40004800 	.word	0x40004800
 8002190:	58024400 	.word	0x58024400
 8002194:	58020c00 	.word	0x58020c00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800219c:	f7fe fa7a 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f004 ffdd 	bl	8007184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fc53 	bl	8001a74 <main>
  bx  lr
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021d8:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80021dc:	0800a8d4 	.word	0x0800a8d4
  ldr r2, =_sbss
 80021e0:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80021e4:	24000498 	.word	0x24000498

080021e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC3_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 f96e 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f8:	f001 f9d4 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_Init+0x68>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	4913      	ldr	r1, [pc, #76]	; (8002258 <HAL_Init+0x6c>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_Init+0x68>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_Init+0x6c>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_Init+0x70>)
 800222e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002230:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_Init+0x74>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	200f      	movs	r0, #15
 8002238:	f000 f814 	bl	8002264 <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e002      	b.n	800224c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002246:	f7ff fdeb 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58024400 	.word	0x58024400
 8002258:	0800a4a4 	.word	0x0800a4a4
 800225c:	24000004 	.word	0x24000004
 8002260:	24000000 	.word	0x24000000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_InitTick+0x60>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e021      	b.n	80022bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_InitTick+0x64>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_InitTick+0x60>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f945 	bl	800251e <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 f91d 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x68>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	24000014 	.word	0x24000014
 80022c8:	24000000 	.word	0x24000000
 80022cc:	24000010 	.word	0x24000010

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	24000014 	.word	0x24000014
 80022f4:	24000484 	.word	0x24000484

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	24000484 	.word	0x24000484

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	24000014 	.word	0x24000014

08002358 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetREVID+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0c1b      	lsrs	r3, r3, #16
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	5c001000 	.word	0x5c001000

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	4313      	orrs	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00
 80023b4:	05fa0000 	.word	0x05fa0000

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff47 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff5e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff90 	bl	8002428 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5f 	bl	80023d4 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffb2 	bl	8002490 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_GPIO_Init+0x234>)
 8002548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800254a:	e194      	b.n	8002876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8186 	beq.w	8002870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d005      	beq.n	800257c <HAL_GPIO_Init+0x44>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d130      	bne.n	80025de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025b2:	2201      	movs	r2, #1
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 0201 	and.w	r2, r3, #1
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d017      	beq.n	800261a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d123      	bne.n	800266e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	69b9      	ldr	r1, [r7, #24]
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0203 	and.w	r2, r3, #3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80e0 	beq.w	8002870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b0:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_GPIO_Init+0x238>)
 80026b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026b6:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <HAL_GPIO_Init+0x238>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_GPIO_Init+0x238>)
 80026c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a29      	ldr	r2, [pc, #164]	; (8002774 <HAL_GPIO_Init+0x23c>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_GPIO_Init+0x240>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d052      	beq.n	80027a0 <HAL_GPIO_Init+0x268>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_GPIO_Init+0x244>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d031      	beq.n	8002766 <HAL_GPIO_Init+0x22e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_GPIO_Init+0x248>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d02b      	beq.n	8002762 <HAL_GPIO_Init+0x22a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <HAL_GPIO_Init+0x24c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_GPIO_Init+0x250>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_GPIO_Init+0x254>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_GPIO_Init+0x258>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x21a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_GPIO_Init+0x25c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x216>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_GPIO_Init+0x260>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x212>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_GPIO_Init+0x264>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x20e>
 8002742:	2309      	movs	r3, #9
 8002744:	e02d      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 8002746:	230a      	movs	r3, #10
 8002748:	e02b      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 800274a:	2308      	movs	r3, #8
 800274c:	e029      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 800274e:	2307      	movs	r3, #7
 8002750:	e027      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 8002752:	2306      	movs	r3, #6
 8002754:	e025      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 8002756:	2305      	movs	r3, #5
 8002758:	e023      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 800275a:	2304      	movs	r3, #4
 800275c:	e021      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 800275e:	2303      	movs	r3, #3
 8002760:	e01f      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 8002762:	2302      	movs	r3, #2
 8002764:	e01d      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 8002766:	2301      	movs	r3, #1
 8002768:	e01b      	b.n	80027a2 <HAL_GPIO_Init+0x26a>
 800276a:	bf00      	nop
 800276c:	58000080 	.word	0x58000080
 8002770:	58024400 	.word	0x58024400
 8002774:	58000400 	.word	0x58000400
 8002778:	58020000 	.word	0x58020000
 800277c:	58020400 	.word	0x58020400
 8002780:	58020800 	.word	0x58020800
 8002784:	58020c00 	.word	0x58020c00
 8002788:	58021000 	.word	0x58021000
 800278c:	58021400 	.word	0x58021400
 8002790:	58021800 	.word	0x58021800
 8002794:	58021c00 	.word	0x58021c00
 8002798:	58022000 	.word	0x58022000
 800279c:	58022400 	.word	0x58022400
 80027a0:	2300      	movs	r3, #0
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	4093      	lsls	r3, r2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b2:	4938      	ldr	r1, [pc, #224]	; (8002894 <HAL_GPIO_Init+0x35c>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3301      	adds	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f ae63 	bne.w	800254c <HAL_GPIO_Init+0x14>
  }
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	3724      	adds	r7, #36	; 0x24
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	58000400 	.word	0x58000400

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028b4:	e003      	b.n	80028be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80028d4:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_HSEM_FastTake+0x2c>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3320      	adds	r3, #32
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_HSEM_FastTake+0x30>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	58026400 	.word	0x58026400
 80028fc:	80000300 	.word	0x80000300

08002900 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800290a:	4906      	ldr	r1, [pc, #24]	; (8002924 <HAL_HSEM_Release+0x24>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	58026400 	.word	0x58026400

08002928 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	2b06      	cmp	r3, #6
 800293a:	d00a      	beq.n	8002952 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e040      	b.n	80029d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e03e      	b.n	80029d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800295a:	491f      	ldr	r1, [pc, #124]	; (80029d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002962:	f7ff fcc9 	bl	80022f8 <HAL_GetTick>
 8002966:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002968:	e009      	b.n	800297e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800296a:	f7ff fcc5 	bl	80022f8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002978:	d901      	bls.n	800297e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e028      	b.n	80029d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298a:	d1ee      	bne.n	800296a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b1e      	cmp	r3, #30
 8002990:	d008      	beq.n	80029a4 <HAL_PWREx_ConfigSupply+0x7c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b2e      	cmp	r3, #46	; 0x2e
 8002996:	d005      	beq.n	80029a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b1d      	cmp	r3, #29
 800299c:	d002      	beq.n	80029a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b2d      	cmp	r3, #45	; 0x2d
 80029a2:	d114      	bne.n	80029ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029a4:	f7ff fca8 	bl	80022f8 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029aa:	e009      	b.n	80029c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029ac:	f7ff fca4 	bl	80022f8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ba:	d901      	bls.n	80029c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d1ee      	bne.n	80029ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58024800 	.word	0x58024800

080029dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f000 bc1d 	b.w	800322a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8087 	beq.w	8002b0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4b99      	ldr	r3, [pc, #612]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a08:	4b96      	ldr	r3, [pc, #600]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d007      	beq.n	8002a24 <HAL_RCC_OscConfig+0x48>
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b18      	cmp	r3, #24
 8002a18:	d110      	bne.n	8002a3c <HAL_RCC_OscConfig+0x60>
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d06c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x12e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d168      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e3f6      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x78>
 8002a46:	4b87      	ldr	r3, [pc, #540]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a86      	ldr	r2, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e02e      	b.n	8002ab2 <HAL_RCC_OscConfig+0xd6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x9a>
 8002a5c:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b7e      	ldr	r3, [pc, #504]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7d      	ldr	r2, [pc, #500]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e01d      	b.n	8002ab2 <HAL_RCC_OscConfig+0xd6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0xbe>
 8002a80:	4b78      	ldr	r3, [pc, #480]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a74      	ldr	r2, [pc, #464]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e00b      	b.n	8002ab2 <HAL_RCC_OscConfig+0xd6>
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a71      	ldr	r2, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d013      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7ff fc1d 	bl	80022f8 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac2:	f7ff fc19 	bl	80022f8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e3aa      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad4:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0xe6>
 8002ae0:	e014      	b.n	8002b0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff fc09 	bl	80022f8 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aea:	f7ff fc05 	bl	80022f8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e396      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x10e>
 8002b08:	e000      	b.n	8002b0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80cb 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1a:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_RCC_OscConfig+0x164>
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b18      	cmp	r3, #24
 8002b34:	d156      	bne.n	8002be4 <HAL_RCC_OscConfig+0x208>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d151      	bne.n	8002be4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b40:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_OscConfig+0x17c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e368      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b58:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0219 	bic.w	r2, r3, #25
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	493f      	ldr	r1, [pc, #252]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b6a:	f7ff fbc5 	bl	80022f8 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7ff fbc1 	bl	80022f8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e352      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	f7ff fbe2 	bl	8002358 <HAL_GetREVID>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d817      	bhi.n	8002bce <HAL_RCC_OscConfig+0x1f2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d108      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1dc>
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bae:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb6:	e07b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	031b      	lsls	r3, r3, #12
 8002bc6:	4927      	ldr	r1, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	e070      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	4921      	ldr	r1, [pc, #132]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be2:	e065      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d048      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 0219 	bic.w	r2, r3, #25
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	491a      	ldr	r1, [pc, #104]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7ff fb7b 	bl	80022f8 <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c06:	f7ff fb77 	bl	80022f8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e308      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	f7ff fb98 	bl	8002358 <HAL_GetREVID>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d81a      	bhi.n	8002c68 <HAL_RCC_OscConfig+0x28c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x270>
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c48:	6053      	str	r3, [r2, #4]
 8002c4a:	e031      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	4902      	ldr	r1, [pc, #8]	; (8002c64 <HAL_RCC_OscConfig+0x288>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e026      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
 8002c62:	bf00      	nop
 8002c64:	58024400 	.word	0x58024400
 8002c68:	4b9a      	ldr	r3, [pc, #616]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4997      	ldr	r1, [pc, #604]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
 8002c7c:	e018      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7e:	4b95      	ldr	r3, [pc, #596]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a94      	ldr	r2, [pc, #592]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7ff fb35 	bl	80022f8 <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c92:	f7ff fb31 	bl	80022f8 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e2c2      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ca4:	4b8b      	ldr	r3, [pc, #556]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a9 	beq.w	8002e10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cc8:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d007      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x308>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b18      	cmp	r3, #24
 8002cd8:	d13a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x374>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d135      	bne.n	8002d50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce4:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x320>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e296      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cfc:	f7ff fb2c 	bl	8002358 <HAL_GetREVID>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d817      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x35e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d108      	bne.n	8002d24 <HAL_RCC_OscConfig+0x348>
 8002d12:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d1a:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d22:	e075      	b.n	8002e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d24:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	069b      	lsls	r3, r3, #26
 8002d32:	4968      	ldr	r1, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d38:	e06a      	b.n	8002e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	4962      	ldr	r1, [pc, #392]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d4e:	e05f      	b.n	8002e10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d042      	beq.n	8002dde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7ff fac8 	bl	80022f8 <HAL_GetTick>
 8002d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d6c:	f7ff fac4 	bl	80022f8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e255      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d8a:	f7ff fae5 	bl	8002358 <HAL_GetREVID>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d817      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x3ec>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d108      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3d6>
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002da8:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dae:	6053      	str	r3, [r2, #4]
 8002db0:	e02e      	b.n	8002e10 <HAL_RCC_OscConfig+0x434>
 8002db2:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	069b      	lsls	r3, r3, #26
 8002dc0:	4944      	ldr	r1, [pc, #272]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
 8002dc6:	e023      	b.n	8002e10 <HAL_RCC_OscConfig+0x434>
 8002dc8:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	493f      	ldr	r1, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7ff fa85 	bl	80022f8 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002df2:	f7ff fa81 	bl	80022f8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e212      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e04:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d036      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d019      	beq.n	8002e58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e24:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7ff fa62 	bl	80022f8 <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e38:	f7ff fa5e 	bl	80022f8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1ef      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x45c>
 8002e56:	e018      	b.n	8002e8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7ff fa48 	bl	80022f8 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fa44 	bl	80022f8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1d5      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d039      	beq.n	8002f0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fa25 	bl	80022f8 <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002eb2:	f7ff fa21 	bl	80022f8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1b2      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4d6>
 8002ed0:	e01b      	b.n	8002f0a <HAL_RCC_OscConfig+0x52e>
 8002ed2:	bf00      	nop
 8002ed4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ed8:	4b9b      	ldr	r3, [pc, #620]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a9a      	ldr	r2, [pc, #616]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ee4:	f7ff fa08 	bl	80022f8 <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002eec:	f7ff fa04 	bl	80022f8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e195      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002efe:	4b92      	ldr	r3, [pc, #584]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8081 	beq.w	800301a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f18:	4b8c      	ldr	r3, [pc, #560]	; (800314c <HAL_RCC_OscConfig+0x770>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a8b      	ldr	r2, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x770>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f24:	f7ff f9e8 	bl	80022f8 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7ff f9e4 	bl	80022f8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e175      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f3e:	4b83      	ldr	r3, [pc, #524]	; (800314c <HAL_RCC_OscConfig+0x770>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x584>
 8002f52:	4b7d      	ldr	r3, [pc, #500]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a7c      	ldr	r2, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	e02d      	b.n	8002fbc <HAL_RCC_OscConfig+0x5e0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5a6>
 8002f68:	4b77      	ldr	r3, [pc, #476]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a76      	ldr	r2, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	4b74      	ldr	r3, [pc, #464]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a73      	ldr	r2, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x5e0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5c8>
 8002f8a:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a6e      	ldr	r2, [pc, #440]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a6b      	ldr	r2, [pc, #428]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0x5e0>
 8002fa4:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a67      	ldr	r2, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a64      	ldr	r2, [pc, #400]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7ff f998 	bl	80022f8 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7ff f994 	bl	80022f8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e123      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe2:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ee      	beq.n	8002fcc <HAL_RCC_OscConfig+0x5f0>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7ff f982 	bl	80022f8 <HAL_GetTick>
 8002ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7ff f97e 	bl	80022f8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e10d      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800300e:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ee      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8102 	beq.w	8003228 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003024:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800302c:	2b18      	cmp	r3, #24
 800302e:	f000 80bd 	beq.w	80031ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b02      	cmp	r3, #2
 8003038:	f040 809e 	bne.w	8003178 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a41      	ldr	r2, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7ff f956 	bl	80022f8 <HAL_GetTick>
 800304c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003050:	f7ff f952 	bl	80022f8 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0e3      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003062:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306e:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003072:	4b37      	ldr	r3, [pc, #220]	; (8003150 <HAL_RCC_OscConfig+0x774>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	430a      	orrs	r2, r1
 8003082:	4931      	ldr	r1, [pc, #196]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	628b      	str	r3, [r1, #40]	; 0x28
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	3b01      	subs	r3, #1
 800308e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	3b01      	subs	r3, #1
 8003098:	025b      	lsls	r3, r3, #9
 800309a:	b29b      	uxth	r3, r3
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	3b01      	subs	r3, #1
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030b8:	4923      	ldr	r1, [pc, #140]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	4a21      	ldr	r2, [pc, #132]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ca:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x778>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030d6:	00d2      	lsls	r2, r2, #3
 80030d8:	491b      	ldr	r1, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f023 020c 	bic.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4917      	ldr	r1, [pc, #92]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f023 0202 	bic.w	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	4912      	ldr	r1, [pc, #72]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_RCC_OscConfig+0x76c>)
 8003138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7ff f8db 	bl	80022f8 <HAL_GetTick>
 8003142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003144:	e011      	b.n	800316a <HAL_RCC_OscConfig+0x78e>
 8003146:	bf00      	nop
 8003148:	58024400 	.word	0x58024400
 800314c:	58024800 	.word	0x58024800
 8003150:	fffffc0c 	.word	0xfffffc0c
 8003154:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7ff f8ce 	bl	80022f8 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e05f      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800316a:	4b32      	ldr	r3, [pc, #200]	; (8003234 <HAL_RCC_OscConfig+0x858>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x77c>
 8003176:	e057      	b.n	8003228 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <HAL_RCC_OscConfig+0x858>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <HAL_RCC_OscConfig+0x858>)
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7ff f8b8 	bl	80022f8 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff f8b4 	bl	80022f8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e045      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCC_OscConfig+0x858>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x7b0>
 80031aa:	e03d      	b.n	8003228 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCC_OscConfig+0x858>)
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_OscConfig+0x858>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d031      	beq.n	8003224 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d12a      	bne.n	8003224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d122      	bne.n	8003224 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d11a      	bne.n	8003224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	0a5b      	lsrs	r3, r3, #9
 80031f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d111      	bne.n	8003224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d108      	bne.n	8003224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3730      	adds	r7, #48	; 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	58024400 	.word	0x58024400

08003238 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e19c      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b8a      	ldr	r3, [pc, #552]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b87      	ldr	r3, [pc, #540]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 020f 	bic.w	r2, r3, #15
 8003262:	4985      	ldr	r1, [pc, #532]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b83      	ldr	r3, [pc, #524]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e184      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003294:	429a      	cmp	r2, r3
 8003296:	d908      	bls.n	80032aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003298:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	4975      	ldr	r1, [pc, #468]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	4b70      	ldr	r3, [pc, #448]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d908      	bls.n	80032d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032c6:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	496a      	ldr	r1, [pc, #424]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032f4:	4b61      	ldr	r3, [pc, #388]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	495e      	ldr	r1, [pc, #376]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003302:	4313      	orrs	r3, r2
 8003304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331e:	429a      	cmp	r2, r3
 8003320:	d908      	bls.n	8003334 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003322:	4b56      	ldr	r3, [pc, #344]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4953      	ldr	r1, [pc, #332]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003330:	4313      	orrs	r3, r2
 8003332:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	4b4d      	ldr	r3, [pc, #308]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	429a      	cmp	r2, r3
 800334e:	d908      	bls.n	8003362 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b4a      	ldr	r3, [pc, #296]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f023 020f 	bic.w	r2, r3, #15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4947      	ldr	r1, [pc, #284]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800335e:	4313      	orrs	r3, r2
 8003360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d055      	beq.n	800341a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4940      	ldr	r1, [pc, #256]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800337c:	4313      	orrs	r3, r2
 800337e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003388:	4b3c      	ldr	r3, [pc, #240]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d121      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0f6      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d115      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0ea      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0de      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d6      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4925      	ldr	r1, [pc, #148]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe ff85 	bl	80022f8 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe ff81 	bl	80022f8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0be      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	429a      	cmp	r2, r3
 8003418:	d1eb      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	429a      	cmp	r2, r3
 8003434:	d208      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	490e      	ldr	r1, [pc, #56]	; (800347c <HAL_RCC_ClockConfig+0x244>)
 8003444:	4313      	orrs	r3, r2
 8003446:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d214      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 020f 	bic.w	r2, r3, #15
 800345e:	4906      	ldr	r1, [pc, #24]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCC_ClockConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e086      	b.n	8003586 <HAL_RCC_ClockConfig+0x34e>
 8003478:	52002000 	.word	0x52002000
 800347c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003498:	429a      	cmp	r2, r3
 800349a:	d208      	bcs.n	80034ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800349c:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	4939      	ldr	r1, [pc, #228]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d208      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	492e      	ldr	r1, [pc, #184]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d208      	bcs.n	800350a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4922      	ldr	r1, [pc, #136]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003506:	4313      	orrs	r3, r2
 8003508:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003522:	429a      	cmp	r2, r3
 8003524:	d208      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4917      	ldr	r1, [pc, #92]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003534:	4313      	orrs	r3, r2
 8003536:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003538:	f000 f834 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	4912      	ldr	r1, [pc, #72]	; (8003594 <HAL_RCC_ClockConfig+0x35c>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCC_ClockConfig+0x358>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_RCC_ClockConfig+0x35c>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x360>)
 800356e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x364>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x368>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fe72 	bl	8002264 <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	0800a4a4 	.word	0x0800a4a4
 8003598:	24000004 	.word	0x24000004
 800359c:	24000000 	.word	0x24000000
 80035a0:	24000010 	.word	0x24000010

080035a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035aa:	4bb3      	ldr	r3, [pc, #716]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b2:	2b18      	cmp	r3, #24
 80035b4:	f200 8155 	bhi.w	8003862 <HAL_RCC_GetSysClockFreq+0x2be>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	08003625 	.word	0x08003625
 80035c4:	08003863 	.word	0x08003863
 80035c8:	08003863 	.word	0x08003863
 80035cc:	08003863 	.word	0x08003863
 80035d0:	08003863 	.word	0x08003863
 80035d4:	08003863 	.word	0x08003863
 80035d8:	08003863 	.word	0x08003863
 80035dc:	08003863 	.word	0x08003863
 80035e0:	0800364b 	.word	0x0800364b
 80035e4:	08003863 	.word	0x08003863
 80035e8:	08003863 	.word	0x08003863
 80035ec:	08003863 	.word	0x08003863
 80035f0:	08003863 	.word	0x08003863
 80035f4:	08003863 	.word	0x08003863
 80035f8:	08003863 	.word	0x08003863
 80035fc:	08003863 	.word	0x08003863
 8003600:	08003651 	.word	0x08003651
 8003604:	08003863 	.word	0x08003863
 8003608:	08003863 	.word	0x08003863
 800360c:	08003863 	.word	0x08003863
 8003610:	08003863 	.word	0x08003863
 8003614:	08003863 	.word	0x08003863
 8003618:	08003863 	.word	0x08003863
 800361c:	08003863 	.word	0x08003863
 8003620:	08003657 	.word	0x08003657
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003624:	4b94      	ldr	r3, [pc, #592]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003630:	4b91      	ldr	r3, [pc, #580]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	08db      	lsrs	r3, r3, #3
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	4a90      	ldr	r2, [pc, #576]	; (800387c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003642:	e111      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003644:	4b8d      	ldr	r3, [pc, #564]	; (800387c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003646:	61bb      	str	r3, [r7, #24]
    break;
 8003648:	e10e      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800364a:	4b8d      	ldr	r3, [pc, #564]	; (8003880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800364c:	61bb      	str	r3, [r7, #24]
    break;
 800364e:	e10b      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003650:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003652:	61bb      	str	r3, [r7, #24]
    break;
 8003654:	e108      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003660:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800366c:	4b82      	ldr	r3, [pc, #520]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	08db      	lsrs	r3, r3, #3
 800367c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80e1 	beq.w	800385c <HAL_RCC_GetSysClockFreq+0x2b8>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b02      	cmp	r3, #2
 800369e:	f000 8083 	beq.w	80037a8 <HAL_RCC_GetSysClockFreq+0x204>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	f200 80a1 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x248>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x114>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d056      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036b6:	e099      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02d      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	4a6b      	ldr	r2, [pc, #428]	; (800387c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003702:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800371e:	e087      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800388c <HAL_RCC_GetSysClockFreq+0x2e8>
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a02 	vldr	s12, [r7, #8]
 8003746:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003762:	e065      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003890 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b40      	ldr	r3, [pc, #256]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a02 	vldr	s12, [r7, #8]
 800378a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a6:	e043      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ea:	e021      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003890 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003812:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800382e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	0a5b      	lsrs	r3, r3, #9
 8003836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383a:	3301      	adds	r3, #1
 800383c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003848:	edd7 6a07 	vldr	s13, [r7, #28]
 800384c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800385a:	e005      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    break;
 8003860:	e002      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003864:	61bb      	str	r3, [r7, #24]
    break;
 8003866:	bf00      	nop
  }

  return sysclockfreq;
 8003868:	69bb      	ldr	r3, [r7, #24]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
 800387c:	03d09000 	.word	0x03d09000
 8003880:	003d0900 	.word	0x003d0900
 8003884:	007a1200 	.word	0x007a1200
 8003888:	46000000 	.word	0x46000000
 800388c:	4c742400 	.word	0x4c742400
 8003890:	4a742400 	.word	0x4a742400
 8003894:	4af42400 	.word	0x4af42400

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800389e:	f7ff fe81 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490f      	ldr	r1, [pc, #60]	; (80038ec <HAL_RCC_GetHCLKFreq+0x54>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_GetHCLKFreq+0x54>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58024400 	.word	0x58024400
 80038ec:	0800a4a4 	.word	0x0800a4a4
 80038f0:	24000004 	.word	0x24000004
 80038f4:	24000000 	.word	0x24000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038fc:	f7ff ffcc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	58024400 	.word	0x58024400
 8003920:	0800a4a4 	.word	0x0800a4a4

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003928:	f7ff ffb6 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4904      	ldr	r1, [pc, #16]	; (800394c <HAL_RCC_GetPCLK2Freq+0x28>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	58024400 	.word	0x58024400
 800394c:	0800a4a4 	.word	0x0800a4a4

08003950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800395c:	2300      	movs	r3, #0
 800395e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d03f      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003970:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003974:	d02a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800397a:	d824      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003980:	d018      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003986:	d81e      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800398c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003990:	d007      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003992:	e018      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003994:	4ba3      	ldr	r3, [pc, #652]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4aa2      	ldr	r2, [pc, #648]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039a0:	e015      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2102      	movs	r1, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 f9d5 	bl	8004d58 <RCCEx_PLL2_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039b2:	e00c      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3324      	adds	r3, #36	; 0x24
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fa7e 	bl	8004ebc <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039c4:	e003      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039d4:	4b93      	ldr	r3, [pc, #588]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e0:	4990      	ldr	r1, [pc, #576]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	650b      	str	r3, [r1, #80]	; 0x50
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d826      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a1d 	.word	0x08003a1d
 8003a0c:	08003a2b 	.word	0x08003a2b
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003a55 	.word	0x08003a55
 8003a18:	08003a55 	.word	0x08003a55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1c:	4b81      	ldr	r3, [pc, #516]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a80      	ldr	r2, [pc, #512]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a28:	e015      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f991 	bl	8004d58 <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a3a:	e00c      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 fa3a 	bl	8004ebc <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a4c:	e003      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
      break;
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a5c:	4b71      	ldr	r3, [pc, #452]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	f023 0207 	bic.w	r2, r3, #7
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	496e      	ldr	r1, [pc, #440]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d042      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a88:	d02b      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8e:	d825      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a90:	2bc0      	cmp	r3, #192	; 0xc0
 8003a92:	d028      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a94:	2bc0      	cmp	r3, #192	; 0xc0
 8003a96:	d821      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d016      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003a9c:	2b80      	cmp	r3, #128	; 0x80
 8003a9e:	d81d      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d007      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003aa8:	e018      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aaa:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ab6:	e017      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f94a 	bl	8004d58 <RCCEx_PLL2_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ac8:	e00e      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3324      	adds	r3, #36	; 0x24
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 f9f3 	bl	8004ebc <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003aee:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	494a      	ldr	r1, [pc, #296]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	650b      	str	r3, [r1, #80]	; 0x50
 8003b00:	e001      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d049      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b1c:	d030      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b22:	d82a      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b28:	d02c      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b2e:	d824      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b34:	d018      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3a:	d81e      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b44:	d007      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b46:	e018      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b54:	e017      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f8fb 	bl	8004d58 <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b66:	e00e      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f9a4 	bl	8004ebc <RCCEx_PLL3_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b78:	e005      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b9a:	4922      	ldr	r1, [pc, #136]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8003ba0:	e001      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04b      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bbc:	d030      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc2:	d82a      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bc8:	d02e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bce:	d824      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd4:	d018      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bda:	d81e      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be4:	d007      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003be6:	e018      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bf4:	e019      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f8ab 	bl	8004d58 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c06:	e010      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3324      	adds	r3, #36	; 0x24
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f954 	bl	8004ebc <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c18:	e007      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1e:	e004      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c24:	58024400 	.word	0x58024400
      break;
 8003c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c30:	4b99      	ldr	r3, [pc, #612]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c3e:	4996      	ldr	r1, [pc, #600]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	658b      	str	r3, [r1, #88]	; 0x58
 8003c44:	e001      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d032      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5a:	2b30      	cmp	r3, #48	; 0x30
 8003c5c:	d01c      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d817      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d00c      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d813      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d10f      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c72:	4b89      	ldr	r3, [pc, #548]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	4a88      	ldr	r2, [pc, #544]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c7e:	e00e      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	2102      	movs	r1, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f866 	bl	8004d58 <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c90:	e005      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ca4:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	4979      	ldr	r1, [pc, #484]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cb6:	e001      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d047      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd0:	d030      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd6:	d82a      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cdc:	d02c      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce2:	d824      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce8:	d018      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d81e      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d007      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfc:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4a65      	ldr	r2, [pc, #404]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d08:	e017      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 f821 	bl	8004d58 <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d1a:	e00e      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 f8ca 	bl	8004ebc <RCCEx_PLL3_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d2c:	e005      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d40:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	4952      	ldr	r1, [pc, #328]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	650b      	str	r3, [r1, #80]	; 0x50
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d049      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d02e      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d72:	d828      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d78:	d02a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d7e:	d822      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d84:	d026      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d8a:	d81c      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d90:	d010      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d96:	d816      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01d      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d111      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ffd5 	bl	8004d58 <RCCEx_PLL2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003db2:	e012      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 f87e 	bl	8004ebc <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dc4:	e009      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003dcc:	bf00      	nop
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	492a      	ldr	r1, [pc, #168]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	650b      	str	r3, [r1, #80]	; 0x50
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04d      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e0e:	d02e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e14:	d828      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d822      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e26:	d026      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e2c:	d81c      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e32:	d010      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e38:	d816      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01d      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e42:	d111      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ff84 	bl	8004d58 <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e54:	e012      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3324      	adds	r3, #36	; 0x24
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 f82d 	bl	8004ebc <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e66:	e009      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e90:	4901      	ldr	r1, [pc, #4]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	658b      	str	r3, [r1, #88]	; 0x58
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eba:	d814      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec6:	4baf      	ldr	r3, [pc, #700]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4aae      	ldr	r2, [pc, #696]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ed2:	e00c      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 ff3c 	bl	8004d58 <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ef4:	4ba3      	ldr	r3, [pc, #652]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f00:	49a0      	ldr	r1, [pc, #640]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	650b      	str	r3, [r1, #80]	; 0x50
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d032      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d81b      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f39 	.word	0x08003f39
 8003f30:	08003f47 	.word	0x08003f47
 8003f34:	08003f5f 	.word	0x08003f5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f38:	4b92      	ldr	r3, [pc, #584]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	4a91      	ldr	r2, [pc, #580]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f44:	e00c      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 ff03 	bl	8004d58 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f56:	e003      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f66:	4b87      	ldr	r3, [pc, #540]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	4984      	ldr	r1, [pc, #528]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f78:	e001      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8086 	beq.w	8004098 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4b7e      	ldr	r3, [pc, #504]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7d      	ldr	r2, [pc, #500]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f98:	f7fe f9ae 	bl	80022f8 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9e:	e009      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa0:	f7fe f9aa 	bl	80022f8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d902      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb4:	4b74      	ldr	r3, [pc, #464]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ef      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d166      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fc6:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd0:	4053      	eors	r3, r2
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d013      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe4:	4b67      	ldr	r3, [pc, #412]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	4a66      	ldr	r2, [pc, #408]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff0:	4b64      	ldr	r3, [pc, #400]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	4a63      	ldr	r2, [pc, #396]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ffc:	4a61      	ldr	r2, [pc, #388]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400c:	d115      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fe f973 	bl	80022f8 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004014:	e00b      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fe f96f 	bl	80022f8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d902      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	75fb      	strb	r3, [r7, #23]
            break;
 800402c:	e005      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800402e:	4b55      	ldr	r3, [pc, #340]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ed      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d126      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404e:	d10d      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004050:	4b4c      	ldr	r3, [pc, #304]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800405e:	0919      	lsrs	r1, r3, #4
 8004060:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004062:	400b      	ands	r3, r1
 8004064:	4947      	ldr	r1, [pc, #284]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
 800406a:	e005      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800406c:	4b45      	ldr	r3, [pc, #276]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4a44      	ldr	r2, [pc, #272]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004076:	6113      	str	r3, [r2, #16]
 8004078:	4b42      	ldr	r3, [pc, #264]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800407a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004086:	493f      	ldr	r1, [pc, #252]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004088:	4313      	orrs	r3, r2
 800408a:	670b      	str	r3, [r1, #112]	; 0x70
 800408c:	e004      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	75bb      	strb	r3, [r7, #22]
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8085 	beq.w	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	2b28      	cmp	r3, #40	; 0x28
 80040ac:	d866      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	08004191 	.word	0x08004191
 80040b8:	0800417d 	.word	0x0800417d
 80040bc:	0800417d 	.word	0x0800417d
 80040c0:	0800417d 	.word	0x0800417d
 80040c4:	0800417d 	.word	0x0800417d
 80040c8:	0800417d 	.word	0x0800417d
 80040cc:	0800417d 	.word	0x0800417d
 80040d0:	0800417d 	.word	0x0800417d
 80040d4:	08004159 	.word	0x08004159
 80040d8:	0800417d 	.word	0x0800417d
 80040dc:	0800417d 	.word	0x0800417d
 80040e0:	0800417d 	.word	0x0800417d
 80040e4:	0800417d 	.word	0x0800417d
 80040e8:	0800417d 	.word	0x0800417d
 80040ec:	0800417d 	.word	0x0800417d
 80040f0:	0800417d 	.word	0x0800417d
 80040f4:	0800416b 	.word	0x0800416b
 80040f8:	0800417d 	.word	0x0800417d
 80040fc:	0800417d 	.word	0x0800417d
 8004100:	0800417d 	.word	0x0800417d
 8004104:	0800417d 	.word	0x0800417d
 8004108:	0800417d 	.word	0x0800417d
 800410c:	0800417d 	.word	0x0800417d
 8004110:	0800417d 	.word	0x0800417d
 8004114:	08004191 	.word	0x08004191
 8004118:	0800417d 	.word	0x0800417d
 800411c:	0800417d 	.word	0x0800417d
 8004120:	0800417d 	.word	0x0800417d
 8004124:	0800417d 	.word	0x0800417d
 8004128:	0800417d 	.word	0x0800417d
 800412c:	0800417d 	.word	0x0800417d
 8004130:	0800417d 	.word	0x0800417d
 8004134:	08004191 	.word	0x08004191
 8004138:	0800417d 	.word	0x0800417d
 800413c:	0800417d 	.word	0x0800417d
 8004140:	0800417d 	.word	0x0800417d
 8004144:	0800417d 	.word	0x0800417d
 8004148:	0800417d 	.word	0x0800417d
 800414c:	0800417d 	.word	0x0800417d
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004191 	.word	0x08004191
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fdfa 	bl	8004d58 <RCCEx_PLL2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004168:	e013      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3324      	adds	r3, #36	; 0x24
 800416e:	2101      	movs	r1, #1
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fea3 	bl	8004ebc <RCCEx_PLL3_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800417a:	e00a      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	75fb      	strb	r3, [r7, #23]
      break;
 8004180:	e007      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
 8004188:	58024800 	.word	0x58024800
 800418c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004198:	4b96      	ldr	r3, [pc, #600]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a4:	4993      	ldr	r1, [pc, #588]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	654b      	str	r3, [r1, #84]	; 0x54
 80041aa:	e001      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d038      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	d821      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	0800420f 	.word	0x0800420f
 80041d0:	080041e5 	.word	0x080041e5
 80041d4:	080041f7 	.word	0x080041f7
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	0800420f 	.word	0x0800420f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fdb4 	bl	8004d58 <RCCEx_PLL2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041f4:	e00c      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3324      	adds	r3, #36	; 0x24
 80041fa:	2101      	movs	r1, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fe5d 	bl	8004ebc <RCCEx_PLL3_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
      break;
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800420e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004216:	4b77      	ldr	r3, [pc, #476]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f023 0207 	bic.w	r2, r3, #7
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	4974      	ldr	r1, [pc, #464]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	654b      	str	r3, [r1, #84]	; 0x54
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d03a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	2b05      	cmp	r3, #5
 8004242:	d821      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	0800428f 	.word	0x0800428f
 8004250:	08004265 	.word	0x08004265
 8004254:	08004277 	.word	0x08004277
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800428f 	.word	0x0800428f
 8004260:	0800428f 	.word	0x0800428f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fd74 	bl	8004d58 <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004274:	e00c      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3324      	adds	r3, #36	; 0x24
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fe1d 	bl	8004ebc <RCCEx_PLL3_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800428e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004296:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	4953      	ldr	r1, [pc, #332]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	658b      	str	r3, [r1, #88]	; 0x58
 80042aa:	e001      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c6:	d02e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80042c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042cc:	d828      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d02a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d822      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042de:	d026      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80042e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e4:	d81c      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ea:	d010      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f0:	d816      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01d      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d111      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fd28 	bl	8004d58 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800430c:	e012      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fdd1 	bl	8004ebc <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800431e:	e009      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	492a      	ldr	r1, [pc, #168]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	654b      	str	r3, [r1, #84]	; 0x54
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d04d      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800436a:	d02e      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800436c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004370:	d828      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d02a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d822      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800437e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004382:	d026      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004388:	d81c      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	d010      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	d816      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01d      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d111      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fcd6 	bl	8004d58 <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043b0:	e012      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fd7f 	bl	8004ebc <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
      break;
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80043d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ec:	4901      	ldr	r1, [pc, #4]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	658b      	str	r3, [r1, #88]	; 0x58
 80043f2:	e003      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d04b      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800440e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004412:	d02e      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004418:	d828      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d02a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	d822      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800442a:	d026      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800442c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004430:	d81c      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004436:	d010      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443c:	d816      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01d      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004446:	d111      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fc82 	bl	8004d58 <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004458:	e012      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3324      	adds	r3, #36	; 0x24
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fd2b 	bl	8004ebc <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800446a:	e009      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
      break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004472:	bf00      	nop
 8004474:	e004      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004476:	bf00      	nop
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800447e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004486:	4b9d      	ldr	r3, [pc, #628]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004494:	4999      	ldr	r1, [pc, #612]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004496:	4313      	orrs	r3, r2
 8004498:	658b      	str	r3, [r1, #88]	; 0x58
 800449a:	e001      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	d10a      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3324      	adds	r3, #36	; 0x24
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fcfc 	bl	8004ebc <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044ce:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044dc:	4987      	ldr	r1, [pc, #540]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f8:	d10a      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3324      	adds	r3, #36	; 0x24
 80044fe:	2102      	movs	r1, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fcdb 	bl	8004ebc <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004510:	4b7a      	ldr	r3, [pc, #488]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	4977      	ldr	r1, [pc, #476]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004520:	4313      	orrs	r3, r2
 8004522:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d034      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453a:	d01d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800453c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004540:	d817      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454a:	d009      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800454c:	e011      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fbff 	bl	8004d58 <RCCEx_PLL2_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800455e:	e00c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fca8 	bl	8004ebc <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
      break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004580:	4b5e      	ldr	r3, [pc, #376]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800458e:	495b      	ldr	r1, [pc, #364]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004590:	4313      	orrs	r3, r2
 8004592:	658b      	str	r3, [r1, #88]	; 0x58
 8004594:	e001      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d033      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045b0:	d01c      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80045b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045b6:	d816      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045bc:	d003      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80045be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c2:	d007      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80045c4:	e00f      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c6:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	4a4c      	ldr	r2, [pc, #304]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045d2:	e00c      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fc6e 	bl	8004ebc <RCCEx_PLL3_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80045ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f4:	4b41      	ldr	r3, [pc, #260]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004602:	493e      	ldr	r1, [pc, #248]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004604:	4313      	orrs	r3, r2
 8004606:	654b      	str	r3, [r1, #84]	; 0x54
 8004608:	e001      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d029      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004626:	d007      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004628:	e00f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a33      	ldr	r2, [pc, #204]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004636:	e00b      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fb8a 	bl	8004d58 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004648:	e002      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
      break;
 800464e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004662:	4926      	ldr	r1, [pc, #152]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004664:	4313      	orrs	r3, r2
 8004666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004668:	e001      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3324      	adds	r3, #36	; 0x24
 800467e:	2102      	movs	r1, #2
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fc1b 	bl	8004ebc <RCCEx_PLL3_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d033      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a4:	d017      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046aa:	d811      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b0:	d013      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80046b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b6:	d80b      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c0:	d106      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046ce:	e007      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
      break;
 80046d4:	e004      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80046de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f2:	4902      	ldr	r1, [pc, #8]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	654b      	str	r3, [r1, #84]	; 0x54
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80046fa:	bf00      	nop
 80046fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	492e      	ldr	r1, [pc, #184]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800471e:	4313      	orrs	r3, r2
 8004720:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800472e:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800473c:	4926      	ldr	r1, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800473e:	4313      	orrs	r3, r2
 8004740:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475a:	491f      	ldr	r1, [pc, #124]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800475c:	4313      	orrs	r3, r2
 800475e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800476c:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004776:	6113      	str	r3, [r2, #16]
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004782:	4915      	ldr	r1, [pc, #84]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004784:	4313      	orrs	r3, r2
 8004786:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	da08      	bge.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	490e      	ldr	r1, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80047c2:	7dbb      	ldrb	r3, [r7, #22]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400

080047dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047e0:	f7ff f85a 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4904      	ldr	r1, [pc, #16]	; (8004804 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	58024400 	.word	0x58024400
 8004804:	0800a4a4 	.word	0x0800a4a4

08004808 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004810:	4ba1      	ldr	r3, [pc, #644]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800481a:	4b9f      	ldr	r3, [pc, #636]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	0b1b      	lsrs	r3, r3, #12
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004824:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004826:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004832:	4b99      	ldr	r3, [pc, #612]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	08db      	lsrs	r3, r3, #3
 8004838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8111 	beq.w	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b02      	cmp	r3, #2
 800485a:	f000 8083 	beq.w	8004964 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f200 80a1 	bhi.w	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d056      	beq.n	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004872:	e099      	b.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004874:	4b88      	ldr	r3, [pc, #544]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02d      	beq.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004880:	4b85      	ldr	r3, [pc, #532]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	4a84      	ldr	r2, [pc, #528]	; (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80048be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048da:	e087      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004902:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800491e:	e065      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a03 	vldr	s12, [r7, #12]
 8004946:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004962:	e043      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b48      	ldr	r3, [pc, #288]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a03 	vldr	s12, [r7, #12]
 800498a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049a6:	e021      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	0a5b      	lsrs	r3, r3, #9
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a12:	ee17 2a90 	vmov	r2, s15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a40:	ee17 2a90 	vmov	r2, s15
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6e:	ee17 2a90 	vmov	r2, s15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a76:	e008      	b.n	8004a8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	03d09000 	.word	0x03d09000
 8004aa0:	46000000 	.word	0x46000000
 8004aa4:	4c742400 	.word	0x4c742400
 8004aa8:	4a742400 	.word	0x4a742400
 8004aac:	4af42400 	.word	0x4af42400

08004ab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab8:	4ba1      	ldr	r3, [pc, #644]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ac2:	4b9f      	ldr	r3, [pc, #636]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	0d1b      	lsrs	r3, r3, #20
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ace:	4b9c      	ldr	r3, [pc, #624]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004ada:	4b99      	ldr	r3, [pc, #612]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	08db      	lsrs	r3, r3, #3
 8004ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8111 	beq.w	8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	f000 8083 	beq.w	8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f200 80a1 	bhi.w	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d056      	beq.n	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b1a:	e099      	b.n	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b1c:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02d      	beq.n	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b28:	4b85      	ldr	r3, [pc, #532]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	4a84      	ldr	r2, [pc, #528]	; (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b82:	e087      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bc6:	e065      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c0a:	e043      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b48      	ldr	r3, [pc, #288]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c4e:	e021      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce8:	ee17 2a90 	vmov	r2, s15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	0e1b      	lsrs	r3, r3, #24
 8004cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	ee17 2a90 	vmov	r2, s15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d1e:	e008      	b.n	8004d32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	bf00      	nop
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	58024400 	.word	0x58024400
 8004d44:	03d09000 	.word	0x03d09000
 8004d48:	46000000 	.word	0x46000000
 8004d4c:	4c742400 	.word	0x4c742400
 8004d50:	4a742400 	.word	0x4a742400
 8004d54:	4af42400 	.word	0x4af42400

08004d58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d66:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d101      	bne.n	8004d76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e099      	b.n	8004eaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d76:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a4e      	ldr	r2, [pc, #312]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d82:	f7fd fab9 	bl	80022f8 <HAL_GetTick>
 8004d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d8a:	f7fd fab5 	bl	80022f8 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e086      	b.n	8004eaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d9c:	4b45      	ldr	r3, [pc, #276]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	493f      	ldr	r1, [pc, #252]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	628b      	str	r3, [r1, #40]	; 0x28
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	025b      	lsls	r3, r3, #9
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	061b      	lsls	r3, r3, #24
 8004de8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dec:	4931      	ldr	r1, [pc, #196]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004df2:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	492d      	ldr	r1, [pc, #180]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f023 0220 	bic.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4928      	ldr	r1, [pc, #160]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	f023 0310 	bic.w	r3, r3, #16
 8004e20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <RCCEx_PLL2_Config+0x160>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	69d2      	ldr	r2, [r2, #28]
 8004e2e:	00d2      	lsls	r2, r2, #3
 8004e30:	4920      	ldr	r1, [pc, #128]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e36:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f043 0310 	orr.w	r3, r3, #16
 8004e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e54:	e00f      	b.n	8004e76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d106      	bne.n	8004e6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e68:	e005      	b.n	8004e76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e82:	f7fd fa39 	bl	80022f8 <HAL_GetTick>
 8004e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e8a:	f7fd fa35 	bl	80022f8 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e006      	b.n	8004eaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	ffff0007 	.word	0xffff0007

08004ebc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eca:	4b53      	ldr	r3, [pc, #332]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d101      	bne.n	8004eda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e099      	b.n	800500e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eda:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a4e      	ldr	r2, [pc, #312]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fd fa07 	bl	80022f8 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eec:	e008      	b.n	8004f00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004eee:	f7fd fa03 	bl	80022f8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e086      	b.n	800500e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f00:	4b45      	ldr	r3, [pc, #276]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f0c:	4b42      	ldr	r3, [pc, #264]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	051b      	lsls	r3, r3, #20
 8004f1a:	493f      	ldr	r1, [pc, #252]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	025b      	lsls	r3, r3, #9
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f50:	4931      	ldr	r1, [pc, #196]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f56:	4b30      	ldr	r3, [pc, #192]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	492d      	ldr	r1, [pc, #180]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	4928      	ldr	r1, [pc, #160]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f7a:	4b27      	ldr	r3, [pc, #156]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <RCCEx_PLL3_Config+0x160>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	69d2      	ldr	r2, [r2, #28]
 8004f92:	00d2      	lsls	r2, r2, #3
 8004f94:	4920      	ldr	r1, [pc, #128]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a19      	ldr	r2, [pc, #100]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fb8:	e00f      	b.n	8004fda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fcc:	e005      	b.n	8004fda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a11      	ldr	r2, [pc, #68]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a0e      	ldr	r2, [pc, #56]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fd f987 	bl	80022f8 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fec:	e008      	b.n	8005000 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fee:	f7fd f983 	bl	80022f8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	ffff0007 	.word	0xffff0007

08005020 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0f1      	b.n	8005216 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a78      	ldr	r2, [pc, #480]	; (8005220 <HAL_SPI_Init+0x200>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <HAL_SPI_Init+0x42>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a77      	ldr	r2, [pc, #476]	; (8005224 <HAL_SPI_Init+0x204>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00a      	beq.n	8005062 <HAL_SPI_Init+0x42>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a75      	ldr	r2, [pc, #468]	; (8005228 <HAL_SPI_Init+0x208>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d005      	beq.n	8005062 <HAL_SPI_Init+0x42>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d901      	bls.n	8005062 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0d9      	b.n	8005216 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 ff66 	bl	8005f34 <SPI_GetPacketSize>
 8005068:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6c      	ldr	r2, [pc, #432]	; (8005220 <HAL_SPI_Init+0x200>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00c      	beq.n	800508e <HAL_SPI_Init+0x6e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6a      	ldr	r2, [pc, #424]	; (8005224 <HAL_SPI_Init+0x204>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <HAL_SPI_Init+0x6e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a69      	ldr	r2, [pc, #420]	; (8005228 <HAL_SPI_Init+0x208>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d002      	beq.n	800508e <HAL_SPI_Init+0x6e>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b08      	cmp	r3, #8
 800508c:	d811      	bhi.n	80050b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005092:	4a63      	ldr	r2, [pc, #396]	; (8005220 <HAL_SPI_Init+0x200>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a61      	ldr	r2, [pc, #388]	; (8005224 <HAL_SPI_Init+0x204>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_SPI_Init+0x8c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a60      	ldr	r2, [pc, #384]	; (8005228 <HAL_SPI_Init+0x208>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d104      	bne.n	80050b6 <HAL_SPI_Init+0x96>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d901      	bls.n	80050b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0af      	b.n	8005216 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc fe44 	bl	8001d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0201 	bic.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80050f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050fc:	d119      	bne.n	8005132 <HAL_SPI_Init+0x112>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005106:	d103      	bne.n	8005110 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10c      	bne.n	8005132 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800511c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005120:	d107      	bne.n	8005132 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	ea42 0103 	orr.w	r1, r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005192:	ea42 0103 	orr.w	r1, r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d113      	bne.n	80051d2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40013000 	.word	0x40013000
 8005224:	40003800 	.word	0x40003800
 8005228:	40003c00 	.word	0x40003c00

0800522c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3320      	adds	r3, #32
 8005242:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_SPI_Transmit+0x2a>
 8005252:	2302      	movs	r3, #2
 8005254:	e1d7      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800525e:	f7fd f84b 	bl	80022f8 <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d007      	beq.n	8005280 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005270:	2302      	movs	r3, #2
 8005272:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800527c:	7efb      	ldrb	r3, [r7, #27]
 800527e:	e1c2      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0x60>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d107      	bne.n	800529c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005298:	7efb      	ldrb	r3, [r7, #27]
 800529a:	e1b4      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2203      	movs	r2, #3
 80052a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	88fa      	ldrh	r2, [r7, #6]
 80052b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80052ec:	d107      	bne.n	80052fe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4b96      	ldr	r3, [pc, #600]	; (8005560 <HAL_SPI_Transmit+0x334>)
 8005306:	4013      	ands	r3, r2
 8005308:	88f9      	ldrh	r1, [r7, #6]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	430b      	orrs	r3, r1
 8005310:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800532a:	d107      	bne.n	800533c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d947      	bls.n	80053d4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005344:	e03f      	b.n	80053c6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b02      	cmp	r3, #2
 8005352:	d114      	bne.n	800537e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800537c:	e023      	b.n	80053c6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537e:	f7fc ffbb 	bl	80022f8 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d803      	bhi.n	8005396 <HAL_SPI_Transmit+0x16a>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d102      	bne.n	800539c <HAL_SPI_Transmit+0x170>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d114      	bne.n	80053c6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fcfb 	bl	8005d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e11f      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1b9      	bne.n	8005346 <HAL_SPI_Transmit+0x11a>
 80053d2:	e0f2      	b.n	80055ba <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b07      	cmp	r3, #7
 80053da:	f240 80e7 	bls.w	80055ac <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80053de:	e05d      	b.n	800549c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d132      	bne.n	8005454 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d918      	bls.n	800542c <HAL_SPI_Transmit+0x200>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d014      	beq.n	800542c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b02      	subs	r3, #2
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800542a:	e037      	b.n	800549c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	1c9a      	adds	r2, r3, #2
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005452:	e023      	b.n	800549c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005454:	f7fc ff50 	bl	80022f8 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d803      	bhi.n	800546c <HAL_SPI_Transmit+0x240>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d102      	bne.n	8005472 <HAL_SPI_Transmit+0x246>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d114      	bne.n	800549c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fc90 	bl	8005d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0b4      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d19b      	bne.n	80053e0 <HAL_SPI_Transmit+0x1b4>
 80054a8:	e087      	b.n	80055ba <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d155      	bne.n	8005564 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d918      	bls.n	80054f6 <HAL_SPI_Transmit+0x2ca>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d914      	bls.n	80054f6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	1d1a      	adds	r2, r3, #4
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b04      	subs	r3, #4
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054f4:	e05a      	b.n	80055ac <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d917      	bls.n	8005532 <HAL_SPI_Transmit+0x306>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b02      	subs	r3, #2
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005530:	e03c      	b.n	80055ac <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3320      	adds	r3, #32
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800555c:	e026      	b.n	80055ac <HAL_SPI_Transmit+0x380>
 800555e:	bf00      	nop
 8005560:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005564:	f7fc fec8 	bl	80022f8 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d803      	bhi.n	800557c <HAL_SPI_Transmit+0x350>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d102      	bne.n	8005582 <HAL_SPI_Transmit+0x356>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d114      	bne.n	80055ac <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fc08 	bl	8005d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e02c      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af78 	bne.w	80054aa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2200      	movs	r2, #0
 80055c2:	2108      	movs	r1, #8
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fc87 	bl	8005ed8 <SPI_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fbd9 	bl	8005d98 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005604:	7efb      	ldrb	r3, [r7, #27]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop

08005610 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3330      	adds	r3, #48	; 0x30
 800562a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005634:	d112      	bne.n	800565c <HAL_SPI_Receive+0x4c>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10e      	bne.n	800565c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2204      	movs	r2, #4
 8005642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f978 	bl	8005948 <HAL_SPI_TransmitReceive>
 8005658:	4603      	mov	r3, r0
 800565a:	e16f      	b.n	800593c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_SPI_Receive+0x5a>
 8005666:	2302      	movs	r3, #2
 8005668:	e168      	b.n	800593c <HAL_SPI_Receive+0x32c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005672:	f7fc fe41 	bl	80022f8 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d007      	beq.n	8005694 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005684:	2302      	movs	r3, #2
 8005686:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005690:	7ffb      	ldrb	r3, [r7, #31]
 8005692:	e153      	b.n	800593c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Receive+0x90>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d107      	bne.n	80056b0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80056ac:	7ffb      	ldrb	r3, [r7, #31]
 80056ae:	e145      	b.n	800593c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2204      	movs	r2, #4
 80056b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005700:	d107      	bne.n	8005712 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005710:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4b8a      	ldr	r3, [pc, #552]	; (8005944 <HAL_SPI_Receive+0x334>)
 800571a:	4013      	ands	r3, r2
 800571c:	88f9      	ldrh	r1, [r7, #6]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	430b      	orrs	r3, r1
 8005724:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573e:	d107      	bne.n	8005750 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b0f      	cmp	r3, #15
 8005756:	d948      	bls.n	80057ea <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005758:	e040      	b.n	80057dc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	f248 0308 	movw	r3, #32776	; 0x8008
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d014      	beq.n	8005794 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005772:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005774:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005792:	e023      	b.n	80057dc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005794:	f7fc fdb0 	bl	80022f8 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d803      	bhi.n	80057ac <HAL_SPI_Receive+0x19c>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d102      	bne.n	80057b2 <HAL_SPI_Receive+0x1a2>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d114      	bne.n	80057dc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 faf0 	bl	8005d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e0af      	b.n	800593c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1b8      	bne.n	800575a <HAL_SPI_Receive+0x14a>
 80057e8:	e095      	b.n	8005916 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2b07      	cmp	r3, #7
 80057f0:	f240 808b 	bls.w	800590a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80057f4:	e03f      	b.n	8005876 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d114      	bne.n	800582e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	8812      	ldrh	r2, [r2, #0]
 800580c:	b292      	uxth	r2, r2
 800580e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005814:	1c9a      	adds	r2, r3, #2
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800582c:	e023      	b.n	8005876 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582e:	f7fc fd63 	bl	80022f8 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d803      	bhi.n	8005846 <HAL_SPI_Receive+0x236>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d102      	bne.n	800584c <HAL_SPI_Receive+0x23c>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d114      	bne.n	8005876 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 faa3 	bl	8005d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e062      	b.n	800593c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1b9      	bne.n	80057f6 <HAL_SPI_Receive+0x1e6>
 8005882:	e048      	b.n	8005916 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b01      	cmp	r3, #1
 8005890:	d117      	bne.n	80058c2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058c0:	e023      	b.n	800590a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c2:	f7fc fd19 	bl	80022f8 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d803      	bhi.n	80058da <HAL_SPI_Receive+0x2ca>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d102      	bne.n	80058e0 <HAL_SPI_Receive+0x2d0>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d114      	bne.n	800590a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fa59 	bl	8005d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e018      	b.n	800593c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1b6      	bne.n	8005884 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fa3e 	bl	8005d98 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800593a:	7ffb      	ldrb	r3, [r7, #31]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	ffff0000 	.word	0xffff0000

08005948 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08e      	sub	sp, #56	; 0x38
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3320      	adds	r3, #32
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3330      	adds	r3, #48	; 0x30
 800596a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_SPI_TransmitReceive+0x32>
 8005976:	2302      	movs	r3, #2
 8005978:	e209      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005982:	f7fc fcb9 	bl	80022f8 <HAL_GetTick>
 8005986:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005988:	887b      	ldrh	r3, [r7, #2]
 800598a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800598c:	887b      	ldrh	r3, [r7, #2]
 800598e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005996:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800599e:	7efb      	ldrb	r3, [r7, #27]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d014      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x86>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d106      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80059b4:	7efb      	ldrb	r3, [r7, #27]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d009      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
 80059bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80059c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059cc:	e1df      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_SPI_TransmitReceive+0x98>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_TransmitReceive+0x98>
 80059da:	887b      	ldrh	r3, [r7, #2]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80059ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e1cc      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d003      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2205      	movs	r2, #5
 8005a04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	887a      	ldrh	r2, [r7, #2]
 8005a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <HAL_SPI_TransmitReceive+0x310>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	8879      	ldrh	r1, [r7, #2]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d107      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b0f      	cmp	r3, #15
 8005a8c:	d970      	bls.n	8005b70 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a8e:	e068      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d11a      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x18c>
 8005a9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab4:	1d1a      	adds	r2, r3, #4
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	f248 0308 	movw	r3, #32776	; 0x8008
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01a      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x1d2>
 8005ae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d017      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005af4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b18:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1a:	f7fc fbed 	bl	80022f8 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d803      	bhi.n	8005b32 <HAL_SPI_TransmitReceive+0x1ea>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d102      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x1f0>
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d114      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f92d 	bl	8005d98 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e115      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d193      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x148>
 8005b68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d190      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x148>
 8005b6e:	e0e7      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b07      	cmp	r3, #7
 8005b76:	f240 80dd 	bls.w	8005d34 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b7a:	e066      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d119      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x276>
 8005b8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d016      	beq.n	8005bbe <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	881a      	ldrh	r2, [r3, #0]
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d11a      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x2ba>
 8005bcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d017      	beq.n	8005c02 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c00:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c02:	f7fc fb79 	bl	80022f8 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d803      	bhi.n	8005c1a <HAL_SPI_TransmitReceive+0x2d2>
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d102      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x2d8>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d114      	bne.n	8005c4a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f8b9 	bl	8005d98 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e0a1      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d195      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x234>
 8005c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d192      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x234>
 8005c56:	e073      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3f8>
 8005c58:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d11b      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x35a>
 8005c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d018      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3320      	adds	r3, #32
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d11d      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x3a4>
 8005cb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01a      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cea:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cec:	f7fc fb04 	bl	80022f8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d803      	bhi.n	8005d04 <HAL_SPI_TransmitReceive+0x3bc>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x3c2>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d114      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f844 	bl	8005d98 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e02c      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d190      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x314>
 8005d3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d18d      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2108      	movs	r1, #8
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f8c4 	bl	8005ed8 <SPI_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f816 	bl	8005d98 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e001      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	; 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop

08005d98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0210 	orr.w	r2, r2, #16
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6919      	ldr	r1, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b3c      	ldr	r3, [pc, #240]	; (8005ed4 <SPI_CloseTransfer+0x13c>)
 8005de4:	400b      	ands	r3, r1
 8005de6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005df6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d014      	beq.n	8005e2e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00f      	beq.n	8005e2e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0220 	orr.w	r2, r2, #32
 8005e2c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d014      	beq.n	8005e64 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4a:	f043 0204 	orr.w	r2, r3, #4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e62:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e74:	f043 0201 	orr.w	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00f      	beq.n	8005eb8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e9e:	f043 0208 	orr.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	fffffc90 	.word	0xfffffc90

08005ed8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ee8:	e010      	b.n	8005f0c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eea:	f7fc fa05 	bl	80022f8 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d803      	bhi.n	8005f02 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d102      	bne.n	8005f08 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e00f      	b.n	8005f2c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4013      	ands	r3, r2
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d0df      	beq.n	8005eea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	3307      	adds	r3, #7
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e042      	b.n	8006002 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc f89c 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	; 0x24
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f8c3 	bl	8006138 <UART_SetConfig>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e022      	b.n	8006002 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fe1f 	bl	8006c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fea6 	bl	8006d4c <UART_CheckIdleState>
 8006000:	4603      	mov	r3, r0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b08a      	sub	sp, #40	; 0x28
 800600e:	af02      	add	r7, sp, #8
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 8083 	bne.w	800612c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_UART_Transmit+0x28>
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e07b      	b.n	800612e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UART_Transmit+0x3a>
 8006040:	2302      	movs	r3, #2
 8006042:	e074      	b.n	800612e <HAL_UART_Transmit+0x124>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	; 0x21
 8006058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800605c:	f7fc f94c 	bl	80022f8 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d108      	bne.n	800608e <HAL_UART_Transmit+0x84>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	e003      	b.n	8006096 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800609e:	e02c      	b.n	80060fa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fe99 	bl	8006de2 <UART_WaitOnFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e039      	b.n	800612e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	3302      	adds	r3, #2
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	e007      	b.n	80060e8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1cc      	bne.n	80060a0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2140      	movs	r1, #64	; 0x40
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fe66 	bl	8006de2 <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e006      	b.n	800612e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b092      	sub	sp, #72	; 0x48
 800613e:	af00      	add	r7, sp, #0
 8006140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	431a      	orrs	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4313      	orrs	r3, r2
 800615e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4bbe      	ldr	r3, [pc, #760]	; (8006460 <UART_SetConfig+0x328>)
 8006168:	4013      	ands	r3, r2
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006170:	430b      	orrs	r3, r1
 8006172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4ab3      	ldr	r2, [pc, #716]	; (8006464 <UART_SetConfig+0x32c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a0:	4313      	orrs	r3, r2
 80061a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	4baf      	ldr	r3, [pc, #700]	; (8006468 <UART_SetConfig+0x330>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f023 010f 	bic.w	r1, r3, #15
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4aa6      	ldr	r2, [pc, #664]	; (800646c <UART_SetConfig+0x334>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d177      	bne.n	80062c8 <UART_SetConfig+0x190>
 80061d8:	4ba5      	ldr	r3, [pc, #660]	; (8006470 <UART_SetConfig+0x338>)
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061e0:	2b28      	cmp	r3, #40	; 0x28
 80061e2:	d86d      	bhi.n	80062c0 <UART_SetConfig+0x188>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0xb4>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006291 	.word	0x08006291
 80061f0:	080062c1 	.word	0x080062c1
 80061f4:	080062c1 	.word	0x080062c1
 80061f8:	080062c1 	.word	0x080062c1
 80061fc:	080062c1 	.word	0x080062c1
 8006200:	080062c1 	.word	0x080062c1
 8006204:	080062c1 	.word	0x080062c1
 8006208:	080062c1 	.word	0x080062c1
 800620c:	08006299 	.word	0x08006299
 8006210:	080062c1 	.word	0x080062c1
 8006214:	080062c1 	.word	0x080062c1
 8006218:	080062c1 	.word	0x080062c1
 800621c:	080062c1 	.word	0x080062c1
 8006220:	080062c1 	.word	0x080062c1
 8006224:	080062c1 	.word	0x080062c1
 8006228:	080062c1 	.word	0x080062c1
 800622c:	080062a1 	.word	0x080062a1
 8006230:	080062c1 	.word	0x080062c1
 8006234:	080062c1 	.word	0x080062c1
 8006238:	080062c1 	.word	0x080062c1
 800623c:	080062c1 	.word	0x080062c1
 8006240:	080062c1 	.word	0x080062c1
 8006244:	080062c1 	.word	0x080062c1
 8006248:	080062c1 	.word	0x080062c1
 800624c:	080062a9 	.word	0x080062a9
 8006250:	080062c1 	.word	0x080062c1
 8006254:	080062c1 	.word	0x080062c1
 8006258:	080062c1 	.word	0x080062c1
 800625c:	080062c1 	.word	0x080062c1
 8006260:	080062c1 	.word	0x080062c1
 8006264:	080062c1 	.word	0x080062c1
 8006268:	080062c1 	.word	0x080062c1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062c1 	.word	0x080062c1
 8006274:	080062c1 	.word	0x080062c1
 8006278:	080062c1 	.word	0x080062c1
 800627c:	080062c1 	.word	0x080062c1
 8006280:	080062c1 	.word	0x080062c1
 8006284:	080062c1 	.word	0x080062c1
 8006288:	080062c1 	.word	0x080062c1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e222      	b.n	80066de <UART_SetConfig+0x5a6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e21e      	b.n	80066de <UART_SetConfig+0x5a6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e21a      	b.n	80066de <UART_SetConfig+0x5a6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e216      	b.n	80066de <UART_SetConfig+0x5a6>
 80062b0:	2320      	movs	r3, #32
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e212      	b.n	80066de <UART_SetConfig+0x5a6>
 80062b8:	2340      	movs	r3, #64	; 0x40
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e20e      	b.n	80066de <UART_SetConfig+0x5a6>
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e20a      	b.n	80066de <UART_SetConfig+0x5a6>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a69      	ldr	r2, [pc, #420]	; (8006474 <UART_SetConfig+0x33c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d130      	bne.n	8006334 <UART_SetConfig+0x1fc>
 80062d2:	4b67      	ldr	r3, [pc, #412]	; (8006470 <UART_SetConfig+0x338>)
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d826      	bhi.n	800632c <UART_SetConfig+0x1f4>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0x1ac>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	080062fd 	.word	0x080062fd
 80062e8:	08006305 	.word	0x08006305
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006315 	.word	0x08006315
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	08006325 	.word	0x08006325
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e1ec      	b.n	80066de <UART_SetConfig+0x5a6>
 8006304:	2304      	movs	r3, #4
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e1e8      	b.n	80066de <UART_SetConfig+0x5a6>
 800630c:	2308      	movs	r3, #8
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e1e4      	b.n	80066de <UART_SetConfig+0x5a6>
 8006314:	2310      	movs	r3, #16
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e1e0      	b.n	80066de <UART_SetConfig+0x5a6>
 800631c:	2320      	movs	r3, #32
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e1dc      	b.n	80066de <UART_SetConfig+0x5a6>
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e1d8      	b.n	80066de <UART_SetConfig+0x5a6>
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e1d4      	b.n	80066de <UART_SetConfig+0x5a6>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a4f      	ldr	r2, [pc, #316]	; (8006478 <UART_SetConfig+0x340>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d130      	bne.n	80063a0 <UART_SetConfig+0x268>
 800633e:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <UART_SetConfig+0x338>)
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	2b05      	cmp	r3, #5
 8006348:	d826      	bhi.n	8006398 <UART_SetConfig+0x260>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x218>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006369 	.word	0x08006369
 8006354:	08006371 	.word	0x08006371
 8006358:	08006379 	.word	0x08006379
 800635c:	08006381 	.word	0x08006381
 8006360:	08006389 	.word	0x08006389
 8006364:	08006391 	.word	0x08006391
 8006368:	2300      	movs	r3, #0
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e1b6      	b.n	80066de <UART_SetConfig+0x5a6>
 8006370:	2304      	movs	r3, #4
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006376:	e1b2      	b.n	80066de <UART_SetConfig+0x5a6>
 8006378:	2308      	movs	r3, #8
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e1ae      	b.n	80066de <UART_SetConfig+0x5a6>
 8006380:	2310      	movs	r3, #16
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e1aa      	b.n	80066de <UART_SetConfig+0x5a6>
 8006388:	2320      	movs	r3, #32
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e1a6      	b.n	80066de <UART_SetConfig+0x5a6>
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e1a2      	b.n	80066de <UART_SetConfig+0x5a6>
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e19e      	b.n	80066de <UART_SetConfig+0x5a6>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a35      	ldr	r2, [pc, #212]	; (800647c <UART_SetConfig+0x344>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d130      	bne.n	800640c <UART_SetConfig+0x2d4>
 80063aa:	4b31      	ldr	r3, [pc, #196]	; (8006470 <UART_SetConfig+0x338>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	d826      	bhi.n	8006404 <UART_SetConfig+0x2cc>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x284>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063d5 	.word	0x080063d5
 80063c0:	080063dd 	.word	0x080063dd
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	2300      	movs	r3, #0
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e180      	b.n	80066de <UART_SetConfig+0x5a6>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e17c      	b.n	80066de <UART_SetConfig+0x5a6>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ea:	e178      	b.n	80066de <UART_SetConfig+0x5a6>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e174      	b.n	80066de <UART_SetConfig+0x5a6>
 80063f4:	2320      	movs	r3, #32
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e170      	b.n	80066de <UART_SetConfig+0x5a6>
 80063fc:	2340      	movs	r3, #64	; 0x40
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e16c      	b.n	80066de <UART_SetConfig+0x5a6>
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e168      	b.n	80066de <UART_SetConfig+0x5a6>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <UART_SetConfig+0x348>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d142      	bne.n	800649c <UART_SetConfig+0x364>
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <UART_SetConfig+0x338>)
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b05      	cmp	r3, #5
 8006420:	d838      	bhi.n	8006494 <UART_SetConfig+0x35c>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x2f0>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006441 	.word	0x08006441
 800642c:	08006449 	.word	0x08006449
 8006430:	08006451 	.word	0x08006451
 8006434:	08006459 	.word	0x08006459
 8006438:	08006485 	.word	0x08006485
 800643c:	0800648d 	.word	0x0800648d
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006446:	e14a      	b.n	80066de <UART_SetConfig+0x5a6>
 8006448:	2304      	movs	r3, #4
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644e:	e146      	b.n	80066de <UART_SetConfig+0x5a6>
 8006450:	2308      	movs	r3, #8
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006456:	e142      	b.n	80066de <UART_SetConfig+0x5a6>
 8006458:	2310      	movs	r3, #16
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645e:	e13e      	b.n	80066de <UART_SetConfig+0x5a6>
 8006460:	cfff69f3 	.word	0xcfff69f3
 8006464:	58000c00 	.word	0x58000c00
 8006468:	11fff4ff 	.word	0x11fff4ff
 800646c:	40011000 	.word	0x40011000
 8006470:	58024400 	.word	0x58024400
 8006474:	40004400 	.word	0x40004400
 8006478:	40004800 	.word	0x40004800
 800647c:	40004c00 	.word	0x40004c00
 8006480:	40005000 	.word	0x40005000
 8006484:	2320      	movs	r3, #32
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e128      	b.n	80066de <UART_SetConfig+0x5a6>
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006492:	e124      	b.n	80066de <UART_SetConfig+0x5a6>
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649a:	e120      	b.n	80066de <UART_SetConfig+0x5a6>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4acb      	ldr	r2, [pc, #812]	; (80067d0 <UART_SetConfig+0x698>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d176      	bne.n	8006594 <UART_SetConfig+0x45c>
 80064a6:	4bcb      	ldr	r3, [pc, #812]	; (80067d4 <UART_SetConfig+0x69c>)
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ae:	2b28      	cmp	r3, #40	; 0x28
 80064b0:	d86c      	bhi.n	800658c <UART_SetConfig+0x454>
 80064b2:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <UART_SetConfig+0x380>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	0800655d 	.word	0x0800655d
 80064bc:	0800658d 	.word	0x0800658d
 80064c0:	0800658d 	.word	0x0800658d
 80064c4:	0800658d 	.word	0x0800658d
 80064c8:	0800658d 	.word	0x0800658d
 80064cc:	0800658d 	.word	0x0800658d
 80064d0:	0800658d 	.word	0x0800658d
 80064d4:	0800658d 	.word	0x0800658d
 80064d8:	08006565 	.word	0x08006565
 80064dc:	0800658d 	.word	0x0800658d
 80064e0:	0800658d 	.word	0x0800658d
 80064e4:	0800658d 	.word	0x0800658d
 80064e8:	0800658d 	.word	0x0800658d
 80064ec:	0800658d 	.word	0x0800658d
 80064f0:	0800658d 	.word	0x0800658d
 80064f4:	0800658d 	.word	0x0800658d
 80064f8:	0800656d 	.word	0x0800656d
 80064fc:	0800658d 	.word	0x0800658d
 8006500:	0800658d 	.word	0x0800658d
 8006504:	0800658d 	.word	0x0800658d
 8006508:	0800658d 	.word	0x0800658d
 800650c:	0800658d 	.word	0x0800658d
 8006510:	0800658d 	.word	0x0800658d
 8006514:	0800658d 	.word	0x0800658d
 8006518:	08006575 	.word	0x08006575
 800651c:	0800658d 	.word	0x0800658d
 8006520:	0800658d 	.word	0x0800658d
 8006524:	0800658d 	.word	0x0800658d
 8006528:	0800658d 	.word	0x0800658d
 800652c:	0800658d 	.word	0x0800658d
 8006530:	0800658d 	.word	0x0800658d
 8006534:	0800658d 	.word	0x0800658d
 8006538:	0800657d 	.word	0x0800657d
 800653c:	0800658d 	.word	0x0800658d
 8006540:	0800658d 	.word	0x0800658d
 8006544:	0800658d 	.word	0x0800658d
 8006548:	0800658d 	.word	0x0800658d
 800654c:	0800658d 	.word	0x0800658d
 8006550:	0800658d 	.word	0x0800658d
 8006554:	0800658d 	.word	0x0800658d
 8006558:	08006585 	.word	0x08006585
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e0bc      	b.n	80066de <UART_SetConfig+0x5a6>
 8006564:	2304      	movs	r3, #4
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e0b8      	b.n	80066de <UART_SetConfig+0x5a6>
 800656c:	2308      	movs	r3, #8
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e0b4      	b.n	80066de <UART_SetConfig+0x5a6>
 8006574:	2310      	movs	r3, #16
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657a:	e0b0      	b.n	80066de <UART_SetConfig+0x5a6>
 800657c:	2320      	movs	r3, #32
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006582:	e0ac      	b.n	80066de <UART_SetConfig+0x5a6>
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e0a8      	b.n	80066de <UART_SetConfig+0x5a6>
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e0a4      	b.n	80066de <UART_SetConfig+0x5a6>
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a8f      	ldr	r2, [pc, #572]	; (80067d8 <UART_SetConfig+0x6a0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d130      	bne.n	8006600 <UART_SetConfig+0x4c8>
 800659e:	4b8d      	ldr	r3, [pc, #564]	; (80067d4 <UART_SetConfig+0x69c>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d826      	bhi.n	80065f8 <UART_SetConfig+0x4c0>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <UART_SetConfig+0x478>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065c9 	.word	0x080065c9
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	080065d9 	.word	0x080065d9
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065f1 	.word	0x080065f1
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e086      	b.n	80066de <UART_SetConfig+0x5a6>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e082      	b.n	80066de <UART_SetConfig+0x5a6>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e07e      	b.n	80066de <UART_SetConfig+0x5a6>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e6:	e07a      	b.n	80066de <UART_SetConfig+0x5a6>
 80065e8:	2320      	movs	r3, #32
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e076      	b.n	80066de <UART_SetConfig+0x5a6>
 80065f0:	2340      	movs	r3, #64	; 0x40
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e072      	b.n	80066de <UART_SetConfig+0x5a6>
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e06e      	b.n	80066de <UART_SetConfig+0x5a6>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a75      	ldr	r2, [pc, #468]	; (80067dc <UART_SetConfig+0x6a4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d130      	bne.n	800666c <UART_SetConfig+0x534>
 800660a:	4b72      	ldr	r3, [pc, #456]	; (80067d4 <UART_SetConfig+0x69c>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b05      	cmp	r3, #5
 8006614:	d826      	bhi.n	8006664 <UART_SetConfig+0x52c>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x4e4>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006635 	.word	0x08006635
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006645 	.word	0x08006645
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006655 	.word	0x08006655
 8006630:	0800665d 	.word	0x0800665d
 8006634:	2300      	movs	r3, #0
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e050      	b.n	80066de <UART_SetConfig+0x5a6>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e04c      	b.n	80066de <UART_SetConfig+0x5a6>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e048      	b.n	80066de <UART_SetConfig+0x5a6>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e044      	b.n	80066de <UART_SetConfig+0x5a6>
 8006654:	2320      	movs	r3, #32
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e040      	b.n	80066de <UART_SetConfig+0x5a6>
 800665c:	2340      	movs	r3, #64	; 0x40
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e03c      	b.n	80066de <UART_SetConfig+0x5a6>
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e038      	b.n	80066de <UART_SetConfig+0x5a6>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5b      	ldr	r2, [pc, #364]	; (80067e0 <UART_SetConfig+0x6a8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d130      	bne.n	80066d8 <UART_SetConfig+0x5a0>
 8006676:	4b57      	ldr	r3, [pc, #348]	; (80067d4 <UART_SetConfig+0x69c>)
 8006678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b05      	cmp	r3, #5
 8006680:	d826      	bhi.n	80066d0 <UART_SetConfig+0x598>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0x550>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	080066a1 	.word	0x080066a1
 800668c:	080066a9 	.word	0x080066a9
 8006690:	080066b1 	.word	0x080066b1
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e01a      	b.n	80066de <UART_SetConfig+0x5a6>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e016      	b.n	80066de <UART_SetConfig+0x5a6>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e012      	b.n	80066de <UART_SetConfig+0x5a6>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e00e      	b.n	80066de <UART_SetConfig+0x5a6>
 80066c0:	2320      	movs	r3, #32
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e00a      	b.n	80066de <UART_SetConfig+0x5a6>
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e006      	b.n	80066de <UART_SetConfig+0x5a6>
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e002      	b.n	80066de <UART_SetConfig+0x5a6>
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3f      	ldr	r2, [pc, #252]	; (80067e0 <UART_SetConfig+0x6a8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	f040 80f8 	bne.w	80068da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	dc46      	bgt.n	8006780 <UART_SetConfig+0x648>
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	f2c0 8082 	blt.w	80067fc <UART_SetConfig+0x6c4>
 80066f8:	3b02      	subs	r3, #2
 80066fa:	2b1e      	cmp	r3, #30
 80066fc:	d87e      	bhi.n	80067fc <UART_SetConfig+0x6c4>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x5cc>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006787 	.word	0x08006787
 8006708:	080067fd 	.word	0x080067fd
 800670c:	0800678f 	.word	0x0800678f
 8006710:	080067fd 	.word	0x080067fd
 8006714:	080067fd 	.word	0x080067fd
 8006718:	080067fd 	.word	0x080067fd
 800671c:	0800679f 	.word	0x0800679f
 8006720:	080067fd 	.word	0x080067fd
 8006724:	080067fd 	.word	0x080067fd
 8006728:	080067fd 	.word	0x080067fd
 800672c:	080067fd 	.word	0x080067fd
 8006730:	080067fd 	.word	0x080067fd
 8006734:	080067fd 	.word	0x080067fd
 8006738:	080067fd 	.word	0x080067fd
 800673c:	080067af 	.word	0x080067af
 8006740:	080067fd 	.word	0x080067fd
 8006744:	080067fd 	.word	0x080067fd
 8006748:	080067fd 	.word	0x080067fd
 800674c:	080067fd 	.word	0x080067fd
 8006750:	080067fd 	.word	0x080067fd
 8006754:	080067fd 	.word	0x080067fd
 8006758:	080067fd 	.word	0x080067fd
 800675c:	080067fd 	.word	0x080067fd
 8006760:	080067fd 	.word	0x080067fd
 8006764:	080067fd 	.word	0x080067fd
 8006768:	080067fd 	.word	0x080067fd
 800676c:	080067fd 	.word	0x080067fd
 8006770:	080067fd 	.word	0x080067fd
 8006774:	080067fd 	.word	0x080067fd
 8006778:	080067fd 	.word	0x080067fd
 800677c:	080067ef 	.word	0x080067ef
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d037      	beq.n	80067f4 <UART_SetConfig+0x6bc>
 8006784:	e03a      	b.n	80067fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006786:	f7fe f829 	bl	80047dc <HAL_RCCEx_GetD3PCLK1Freq>
 800678a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800678c:	e03c      	b.n	8006808 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800678e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe f838 	bl	8004808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679c:	e034      	b.n	8006808 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800679e:	f107 0318 	add.w	r3, r7, #24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe f984 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ac:	e02c      	b.n	8006808 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <UART_SetConfig+0x69c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d016      	beq.n	80067e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <UART_SetConfig+0x69c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	08db      	lsrs	r3, r3, #3
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	4a07      	ldr	r2, [pc, #28]	; (80067e4 <UART_SetConfig+0x6ac>)
 80067c6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067cc:	e01c      	b.n	8006808 <UART_SetConfig+0x6d0>
 80067ce:	bf00      	nop
 80067d0:	40011400 	.word	0x40011400
 80067d4:	58024400 	.word	0x58024400
 80067d8:	40007800 	.word	0x40007800
 80067dc:	40007c00 	.word	0x40007c00
 80067e0:	58000c00 	.word	0x58000c00
 80067e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80067e8:	4b9d      	ldr	r3, [pc, #628]	; (8006a60 <UART_SetConfig+0x928>)
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ec:	e00c      	b.n	8006808 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067ee:	4b9d      	ldr	r3, [pc, #628]	; (8006a64 <UART_SetConfig+0x92c>)
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f2:	e009      	b.n	8006808 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fa:	e005      	b.n	8006808 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006806:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 81de 	beq.w	8006bcc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	4a94      	ldr	r2, [pc, #592]	; (8006a68 <UART_SetConfig+0x930>)
 8006816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800681a:	461a      	mov	r2, r3
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006822:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4413      	add	r3, r2
 800682e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006830:	429a      	cmp	r2, r3
 8006832:	d305      	bcc.n	8006840 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800683a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683c:	429a      	cmp	r2, r3
 800683e:	d903      	bls.n	8006848 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006846:	e1c1      	b.n	8006bcc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684a:	2200      	movs	r2, #0
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	60fa      	str	r2, [r7, #12]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	4a84      	ldr	r2, [pc, #528]	; (8006a68 <UART_SetConfig+0x930>)
 8006856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800685a:	b29b      	uxth	r3, r3
 800685c:	2200      	movs	r2, #0
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006866:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800686a:	f7f9 fd91 	bl	8000390 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4610      	mov	r0, r2
 8006874:	4619      	mov	r1, r3
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	020b      	lsls	r3, r1, #8
 8006880:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006884:	0202      	lsls	r2, r0, #8
 8006886:	6979      	ldr	r1, [r7, #20]
 8006888:	6849      	ldr	r1, [r1, #4]
 800688a:	0849      	lsrs	r1, r1, #1
 800688c:	2000      	movs	r0, #0
 800688e:	460c      	mov	r4, r1
 8006890:	4605      	mov	r5, r0
 8006892:	eb12 0804 	adds.w	r8, r2, r4
 8006896:	eb43 0905 	adc.w	r9, r3, r5
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	469a      	mov	sl, r3
 80068a2:	4693      	mov	fp, r2
 80068a4:	4652      	mov	r2, sl
 80068a6:	465b      	mov	r3, fp
 80068a8:	4640      	mov	r0, r8
 80068aa:	4649      	mov	r1, r9
 80068ac:	f7f9 fd70 	bl	8000390 <__aeabi_uldivmod>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4613      	mov	r3, r2
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068be:	d308      	bcc.n	80068d2 <UART_SetConfig+0x79a>
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c6:	d204      	bcs.n	80068d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ce:	60da      	str	r2, [r3, #12]
 80068d0:	e17c      	b.n	8006bcc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80068d8:	e178      	b.n	8006bcc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e2:	f040 80c5 	bne.w	8006a70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80068e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	dc48      	bgt.n	8006980 <UART_SetConfig+0x848>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	db7b      	blt.n	80069ea <UART_SetConfig+0x8b2>
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d879      	bhi.n	80069ea <UART_SetConfig+0x8b2>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x7c4>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006987 	.word	0x08006987
 8006900:	0800698f 	.word	0x0800698f
 8006904:	080069eb 	.word	0x080069eb
 8006908:	080069eb 	.word	0x080069eb
 800690c:	08006997 	.word	0x08006997
 8006910:	080069eb 	.word	0x080069eb
 8006914:	080069eb 	.word	0x080069eb
 8006918:	080069eb 	.word	0x080069eb
 800691c:	080069a7 	.word	0x080069a7
 8006920:	080069eb 	.word	0x080069eb
 8006924:	080069eb 	.word	0x080069eb
 8006928:	080069eb 	.word	0x080069eb
 800692c:	080069eb 	.word	0x080069eb
 8006930:	080069eb 	.word	0x080069eb
 8006934:	080069eb 	.word	0x080069eb
 8006938:	080069eb 	.word	0x080069eb
 800693c:	080069b7 	.word	0x080069b7
 8006940:	080069eb 	.word	0x080069eb
 8006944:	080069eb 	.word	0x080069eb
 8006948:	080069eb 	.word	0x080069eb
 800694c:	080069eb 	.word	0x080069eb
 8006950:	080069eb 	.word	0x080069eb
 8006954:	080069eb 	.word	0x080069eb
 8006958:	080069eb 	.word	0x080069eb
 800695c:	080069eb 	.word	0x080069eb
 8006960:	080069eb 	.word	0x080069eb
 8006964:	080069eb 	.word	0x080069eb
 8006968:	080069eb 	.word	0x080069eb
 800696c:	080069eb 	.word	0x080069eb
 8006970:	080069eb 	.word	0x080069eb
 8006974:	080069eb 	.word	0x080069eb
 8006978:	080069eb 	.word	0x080069eb
 800697c:	080069dd 	.word	0x080069dd
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d02e      	beq.n	80069e2 <UART_SetConfig+0x8aa>
 8006984:	e031      	b.n	80069ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006986:	f7fc ffb7 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 800698a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800698c:	e033      	b.n	80069f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800698e:	f7fc ffc9 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8006992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006994:	e02f      	b.n	80069f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800699a:	4618      	mov	r0, r3
 800699c:	f7fd ff34 	bl	8004808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a4:	e027      	b.n	80069f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069a6:	f107 0318 	add.w	r3, r7, #24
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe f880 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b4:	e01f      	b.n	80069f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b6:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <UART_SetConfig+0x934>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069c2:	4b2a      	ldr	r3, [pc, #168]	; (8006a6c <UART_SetConfig+0x934>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	08db      	lsrs	r3, r3, #3
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	4a24      	ldr	r2, [pc, #144]	; (8006a60 <UART_SetConfig+0x928>)
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069d4:	e00f      	b.n	80069f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80069d6:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <UART_SetConfig+0x928>)
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069da:	e00c      	b.n	80069f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069dc:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <UART_SetConfig+0x92c>)
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e0:	e009      	b.n	80069f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e8:	e005      	b.n	80069f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80e7 	beq.w	8006bcc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <UART_SetConfig+0x930>)
 8006a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a10:	005a      	lsls	r2, r3, #1
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	441a      	add	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2b0f      	cmp	r3, #15
 8006a28:	d916      	bls.n	8006a58 <UART_SetConfig+0x920>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a30:	d212      	bcs.n	8006a58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f023 030f 	bic.w	r3, r3, #15
 8006a3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a54:	60da      	str	r2, [r3, #12]
 8006a56:	e0b9      	b.n	8006bcc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a5e:	e0b5      	b.n	8006bcc <UART_SetConfig+0xa94>
 8006a60:	03d09000 	.word	0x03d09000
 8006a64:	003d0900 	.word	0x003d0900
 8006a68:	0800a4c4 	.word	0x0800a4c4
 8006a6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	dc49      	bgt.n	8006b0c <UART_SetConfig+0x9d4>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	db7c      	blt.n	8006b76 <UART_SetConfig+0xa3e>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d87a      	bhi.n	8006b76 <UART_SetConfig+0xa3e>
 8006a80:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x950>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006b13 	.word	0x08006b13
 8006a8c:	08006b1b 	.word	0x08006b1b
 8006a90:	08006b77 	.word	0x08006b77
 8006a94:	08006b77 	.word	0x08006b77
 8006a98:	08006b23 	.word	0x08006b23
 8006a9c:	08006b77 	.word	0x08006b77
 8006aa0:	08006b77 	.word	0x08006b77
 8006aa4:	08006b77 	.word	0x08006b77
 8006aa8:	08006b33 	.word	0x08006b33
 8006aac:	08006b77 	.word	0x08006b77
 8006ab0:	08006b77 	.word	0x08006b77
 8006ab4:	08006b77 	.word	0x08006b77
 8006ab8:	08006b77 	.word	0x08006b77
 8006abc:	08006b77 	.word	0x08006b77
 8006ac0:	08006b77 	.word	0x08006b77
 8006ac4:	08006b77 	.word	0x08006b77
 8006ac8:	08006b43 	.word	0x08006b43
 8006acc:	08006b77 	.word	0x08006b77
 8006ad0:	08006b77 	.word	0x08006b77
 8006ad4:	08006b77 	.word	0x08006b77
 8006ad8:	08006b77 	.word	0x08006b77
 8006adc:	08006b77 	.word	0x08006b77
 8006ae0:	08006b77 	.word	0x08006b77
 8006ae4:	08006b77 	.word	0x08006b77
 8006ae8:	08006b77 	.word	0x08006b77
 8006aec:	08006b77 	.word	0x08006b77
 8006af0:	08006b77 	.word	0x08006b77
 8006af4:	08006b77 	.word	0x08006b77
 8006af8:	08006b77 	.word	0x08006b77
 8006afc:	08006b77 	.word	0x08006b77
 8006b00:	08006b77 	.word	0x08006b77
 8006b04:	08006b77 	.word	0x08006b77
 8006b08:	08006b69 	.word	0x08006b69
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d02e      	beq.n	8006b6e <UART_SetConfig+0xa36>
 8006b10:	e031      	b.n	8006b76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b12:	f7fc fef1 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 8006b16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b18:	e033      	b.n	8006b82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1a:	f7fc ff03 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8006b1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b20:	e02f      	b.n	8006b82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fd fe6e 	bl	8004808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b30:	e027      	b.n	8006b82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b32:	f107 0318 	add.w	r3, r7, #24
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd ffba 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b40:	e01f      	b.n	8006b82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b42:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <UART_SetConfig+0xac0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <UART_SetConfig+0xac0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <UART_SetConfig+0xac4>)
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b60:	e00f      	b.n	8006b82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006b62:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <UART_SetConfig+0xac4>)
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b66:	e00c      	b.n	8006b82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <UART_SetConfig+0xac8>)
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6c:	e009      	b.n	8006b82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	e005      	b.n	8006b82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b80:	bf00      	nop
    }

    if (pclk != 0U)
 8006b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d021      	beq.n	8006bcc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <UART_SetConfig+0xacc>)
 8006b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b92:	461a      	mov	r2, r3
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	441a      	add	r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	2b0f      	cmp	r3, #15
 8006bb0:	d909      	bls.n	8006bc6 <UART_SetConfig+0xa8e>
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb8:	d205      	bcs.n	8006bc6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	e002      	b.n	8006bcc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2200      	movs	r2, #0
 8006be0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2200      	movs	r2, #0
 8006be6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006be8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3748      	adds	r7, #72	; 0x48
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bf6:	bf00      	nop
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	03d09000 	.word	0x03d09000
 8006c00:	003d0900 	.word	0x003d0900
 8006c04:	0800a4c4 	.word	0x0800a4c4

08006c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d06:	d10a      	bne.n	8006d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d5c:	f7fb facc 	bl	80022f8 <HAL_GetTick>
 8006d60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10e      	bne.n	8006d8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f82f 	bl	8006de2 <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e025      	b.n	8006dda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d10e      	bne.n	8006dba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f819 	bl	8006de2 <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e00f      	b.n	8006dda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b09c      	sub	sp, #112	; 0x70
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df2:	e0a9      	b.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	f000 80a5 	beq.w	8006f48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfe:	f7fb fa7b 	bl	80022f8 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d302      	bcc.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d140      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e28:	667b      	str	r3, [r7, #100]	; 0x64
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e6      	bne.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e5      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e069      	b.n	8006f6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d051      	beq.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb2:	d149      	bne.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ebc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e6      	bne.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f10:	623a      	str	r2, [r7, #32]
 8006f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	6a3a      	ldr	r2, [r7, #32]
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e010      	b.n	8006f6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4013      	ands	r3, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f43f af46 	beq.w	8006df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3770      	adds	r7, #112	; 0x70
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e027      	b.n	8006fd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2224      	movs	r2, #36	; 0x24
 8006f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e02d      	b.n	8007058 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f84f 	bl	80070dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e02d      	b.n	80070d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2224      	movs	r2, #36	; 0x24
 8007084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0201 	bic.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f811 	bl	80070dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070fc:	e031      	b.n	8007162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070fe:	2310      	movs	r3, #16
 8007100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007102:	2310      	movs	r3, #16
 8007104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	0e5b      	lsrs	r3, r3, #25
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	0f5b      	lsrs	r3, r3, #29
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	7b3a      	ldrb	r2, [r7, #12]
 800712a:	4911      	ldr	r1, [pc, #68]	; (8007170 <UARTEx_SetNbDataToProcess+0x94>)
 800712c:	5c8a      	ldrb	r2, [r1, r2]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007132:	7b3a      	ldrb	r2, [r7, #12]
 8007134:	490f      	ldr	r1, [pc, #60]	; (8007174 <UARTEx_SetNbDataToProcess+0x98>)
 8007136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007138:	fb93 f3f2 	sdiv	r3, r3, r2
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	7b7a      	ldrb	r2, [r7, #13]
 8007148:	4909      	ldr	r1, [pc, #36]	; (8007170 <UARTEx_SetNbDataToProcess+0x94>)
 800714a:	5c8a      	ldrb	r2, [r1, r2]
 800714c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007150:	7b7a      	ldrb	r2, [r7, #13]
 8007152:	4908      	ldr	r1, [pc, #32]	; (8007174 <UARTEx_SetNbDataToProcess+0x98>)
 8007154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007156:	fb93 f3f2 	sdiv	r3, r3, r2
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	0800a4dc 	.word	0x0800a4dc
 8007174:	0800a4e4 	.word	0x0800a4e4

08007178 <__errno>:
 8007178:	4b01      	ldr	r3, [pc, #4]	; (8007180 <__errno+0x8>)
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	24000018 	.word	0x24000018

08007184 <__libc_init_array>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4d0d      	ldr	r5, [pc, #52]	; (80071bc <__libc_init_array+0x38>)
 8007188:	4c0d      	ldr	r4, [pc, #52]	; (80071c0 <__libc_init_array+0x3c>)
 800718a:	1b64      	subs	r4, r4, r5
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	2600      	movs	r6, #0
 8007190:	42a6      	cmp	r6, r4
 8007192:	d109      	bne.n	80071a8 <__libc_init_array+0x24>
 8007194:	4d0b      	ldr	r5, [pc, #44]	; (80071c4 <__libc_init_array+0x40>)
 8007196:	4c0c      	ldr	r4, [pc, #48]	; (80071c8 <__libc_init_array+0x44>)
 8007198:	f002 fece 	bl	8009f38 <_init>
 800719c:	1b64      	subs	r4, r4, r5
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	2600      	movs	r6, #0
 80071a2:	42a6      	cmp	r6, r4
 80071a4:	d105      	bne.n	80071b2 <__libc_init_array+0x2e>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ac:	4798      	blx	r3
 80071ae:	3601      	adds	r6, #1
 80071b0:	e7ee      	b.n	8007190 <__libc_init_array+0xc>
 80071b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b6:	4798      	blx	r3
 80071b8:	3601      	adds	r6, #1
 80071ba:	e7f2      	b.n	80071a2 <__libc_init_array+0x1e>
 80071bc:	0800a8cc 	.word	0x0800a8cc
 80071c0:	0800a8cc 	.word	0x0800a8cc
 80071c4:	0800a8cc 	.word	0x0800a8cc
 80071c8:	0800a8d0 	.word	0x0800a8d0

080071cc <memcpy>:
 80071cc:	440a      	add	r2, r1
 80071ce:	4291      	cmp	r1, r2
 80071d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d4:	d100      	bne.n	80071d8 <memcpy+0xc>
 80071d6:	4770      	bx	lr
 80071d8:	b510      	push	{r4, lr}
 80071da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e2:	4291      	cmp	r1, r2
 80071e4:	d1f9      	bne.n	80071da <memcpy+0xe>
 80071e6:	bd10      	pop	{r4, pc}

080071e8 <memset>:
 80071e8:	4402      	add	r2, r0
 80071ea:	4603      	mov	r3, r0
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d100      	bne.n	80071f2 <memset+0xa>
 80071f0:	4770      	bx	lr
 80071f2:	f803 1b01 	strb.w	r1, [r3], #1
 80071f6:	e7f9      	b.n	80071ec <memset+0x4>

080071f8 <__cvt>:
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fa:	ed2d 8b02 	vpush	{d8}
 80071fe:	eeb0 8b40 	vmov.f64	d8, d0
 8007202:	b085      	sub	sp, #20
 8007204:	4617      	mov	r7, r2
 8007206:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007208:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800720a:	ee18 2a90 	vmov	r2, s17
 800720e:	f025 0520 	bic.w	r5, r5, #32
 8007212:	2a00      	cmp	r2, #0
 8007214:	bfb6      	itet	lt
 8007216:	222d      	movlt	r2, #45	; 0x2d
 8007218:	2200      	movge	r2, #0
 800721a:	eeb1 8b40 	vneglt.f64	d8, d0
 800721e:	2d46      	cmp	r5, #70	; 0x46
 8007220:	460c      	mov	r4, r1
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	d004      	beq.n	8007230 <__cvt+0x38>
 8007226:	2d45      	cmp	r5, #69	; 0x45
 8007228:	d100      	bne.n	800722c <__cvt+0x34>
 800722a:	3401      	adds	r4, #1
 800722c:	2102      	movs	r1, #2
 800722e:	e000      	b.n	8007232 <__cvt+0x3a>
 8007230:	2103      	movs	r1, #3
 8007232:	ab03      	add	r3, sp, #12
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	ab02      	add	r3, sp, #8
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4622      	mov	r2, r4
 800723c:	4633      	mov	r3, r6
 800723e:	eeb0 0b48 	vmov.f64	d0, d8
 8007242:	f000 fdfd 	bl	8007e40 <_dtoa_r>
 8007246:	2d47      	cmp	r5, #71	; 0x47
 8007248:	d101      	bne.n	800724e <__cvt+0x56>
 800724a:	07fb      	lsls	r3, r7, #31
 800724c:	d51a      	bpl.n	8007284 <__cvt+0x8c>
 800724e:	2d46      	cmp	r5, #70	; 0x46
 8007250:	eb00 0204 	add.w	r2, r0, r4
 8007254:	d10c      	bne.n	8007270 <__cvt+0x78>
 8007256:	7803      	ldrb	r3, [r0, #0]
 8007258:	2b30      	cmp	r3, #48	; 0x30
 800725a:	d107      	bne.n	800726c <__cvt+0x74>
 800725c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007264:	bf1c      	itt	ne
 8007266:	f1c4 0401 	rsbne	r4, r4, #1
 800726a:	6034      	strne	r4, [r6, #0]
 800726c:	6833      	ldr	r3, [r6, #0]
 800726e:	441a      	add	r2, r3
 8007270:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007278:	bf08      	it	eq
 800727a:	9203      	streq	r2, [sp, #12]
 800727c:	2130      	movs	r1, #48	; 0x30
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	4293      	cmp	r3, r2
 8007282:	d307      	bcc.n	8007294 <__cvt+0x9c>
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007288:	1a1b      	subs	r3, r3, r0
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	b005      	add	sp, #20
 800728e:	ecbd 8b02 	vpop	{d8}
 8007292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007294:	1c5c      	adds	r4, r3, #1
 8007296:	9403      	str	r4, [sp, #12]
 8007298:	7019      	strb	r1, [r3, #0]
 800729a:	e7f0      	b.n	800727e <__cvt+0x86>

0800729c <__exponent>:
 800729c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729e:	4603      	mov	r3, r0
 80072a0:	2900      	cmp	r1, #0
 80072a2:	bfb8      	it	lt
 80072a4:	4249      	neglt	r1, r1
 80072a6:	f803 2b02 	strb.w	r2, [r3], #2
 80072aa:	bfb4      	ite	lt
 80072ac:	222d      	movlt	r2, #45	; 0x2d
 80072ae:	222b      	movge	r2, #43	; 0x2b
 80072b0:	2909      	cmp	r1, #9
 80072b2:	7042      	strb	r2, [r0, #1]
 80072b4:	dd2a      	ble.n	800730c <__exponent+0x70>
 80072b6:	f10d 0407 	add.w	r4, sp, #7
 80072ba:	46a4      	mov	ip, r4
 80072bc:	270a      	movs	r7, #10
 80072be:	46a6      	mov	lr, r4
 80072c0:	460a      	mov	r2, r1
 80072c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80072c6:	fb07 1516 	mls	r5, r7, r6, r1
 80072ca:	3530      	adds	r5, #48	; 0x30
 80072cc:	2a63      	cmp	r2, #99	; 0x63
 80072ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80072d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072d6:	4631      	mov	r1, r6
 80072d8:	dcf1      	bgt.n	80072be <__exponent+0x22>
 80072da:	3130      	adds	r1, #48	; 0x30
 80072dc:	f1ae 0502 	sub.w	r5, lr, #2
 80072e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072e4:	1c44      	adds	r4, r0, #1
 80072e6:	4629      	mov	r1, r5
 80072e8:	4561      	cmp	r1, ip
 80072ea:	d30a      	bcc.n	8007302 <__exponent+0x66>
 80072ec:	f10d 0209 	add.w	r2, sp, #9
 80072f0:	eba2 020e 	sub.w	r2, r2, lr
 80072f4:	4565      	cmp	r5, ip
 80072f6:	bf88      	it	hi
 80072f8:	2200      	movhi	r2, #0
 80072fa:	4413      	add	r3, r2
 80072fc:	1a18      	subs	r0, r3, r0
 80072fe:	b003      	add	sp, #12
 8007300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800730a:	e7ed      	b.n	80072e8 <__exponent+0x4c>
 800730c:	2330      	movs	r3, #48	; 0x30
 800730e:	3130      	adds	r1, #48	; 0x30
 8007310:	7083      	strb	r3, [r0, #2]
 8007312:	70c1      	strb	r1, [r0, #3]
 8007314:	1d03      	adds	r3, r0, #4
 8007316:	e7f1      	b.n	80072fc <__exponent+0x60>

08007318 <_printf_float>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b08b      	sub	sp, #44	; 0x2c
 800731e:	460c      	mov	r4, r1
 8007320:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007324:	4616      	mov	r6, r2
 8007326:	461f      	mov	r7, r3
 8007328:	4605      	mov	r5, r0
 800732a:	f001 fcaf 	bl	8008c8c <_localeconv_r>
 800732e:	f8d0 b000 	ldr.w	fp, [r0]
 8007332:	4658      	mov	r0, fp
 8007334:	f7f8 ffd4 	bl	80002e0 <strlen>
 8007338:	2300      	movs	r3, #0
 800733a:	9308      	str	r3, [sp, #32]
 800733c:	f8d8 3000 	ldr.w	r3, [r8]
 8007340:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	3307      	adds	r3, #7
 8007348:	f023 0307 	bic.w	r3, r3, #7
 800734c:	f103 0108 	add.w	r1, r3, #8
 8007350:	f8c8 1000 	str.w	r1, [r8]
 8007354:	4682      	mov	sl, r0
 8007356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800735a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800735e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80075c0 <_printf_float+0x2a8>
 8007362:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007366:	eeb0 6bc0 	vabs.f64	d6, d0
 800736a:	eeb4 6b47 	vcmp.f64	d6, d7
 800736e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007372:	dd24      	ble.n	80073be <_printf_float+0xa6>
 8007374:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	d502      	bpl.n	8007384 <_printf_float+0x6c>
 800737e:	232d      	movs	r3, #45	; 0x2d
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	4b90      	ldr	r3, [pc, #576]	; (80075c8 <_printf_float+0x2b0>)
 8007386:	4891      	ldr	r0, [pc, #580]	; (80075cc <_printf_float+0x2b4>)
 8007388:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800738c:	bf94      	ite	ls
 800738e:	4698      	movls	r8, r3
 8007390:	4680      	movhi	r8, r0
 8007392:	2303      	movs	r3, #3
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	f022 0204 	bic.w	r2, r2, #4
 800739a:	2300      	movs	r3, #0
 800739c:	6022      	str	r2, [r4, #0]
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	9700      	str	r7, [sp, #0]
 80073a2:	4633      	mov	r3, r6
 80073a4:	aa09      	add	r2, sp, #36	; 0x24
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 f9d3 	bl	8007754 <_printf_common>
 80073ae:	3001      	adds	r0, #1
 80073b0:	f040 808a 	bne.w	80074c8 <_printf_float+0x1b0>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	b00b      	add	sp, #44	; 0x2c
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	eeb4 0b40 	vcmp.f64	d0, d0
 80073c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c6:	d709      	bvc.n	80073dc <_printf_float+0xc4>
 80073c8:	ee10 3a90 	vmov	r3, s1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfbc      	itt	lt
 80073d0:	232d      	movlt	r3, #45	; 0x2d
 80073d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073d6:	487e      	ldr	r0, [pc, #504]	; (80075d0 <_printf_float+0x2b8>)
 80073d8:	4b7e      	ldr	r3, [pc, #504]	; (80075d4 <_printf_float+0x2bc>)
 80073da:	e7d5      	b.n	8007388 <_printf_float+0x70>
 80073dc:	6863      	ldr	r3, [r4, #4]
 80073de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80073e2:	9104      	str	r1, [sp, #16]
 80073e4:	1c59      	adds	r1, r3, #1
 80073e6:	d13c      	bne.n	8007462 <_printf_float+0x14a>
 80073e8:	2306      	movs	r3, #6
 80073ea:	6063      	str	r3, [r4, #4]
 80073ec:	2300      	movs	r3, #0
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	ab08      	add	r3, sp, #32
 80073f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80073f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073fa:	ab07      	add	r3, sp, #28
 80073fc:	6861      	ldr	r1, [r4, #4]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	f10d 031b 	add.w	r3, sp, #27
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff fef6 	bl	80071f8 <__cvt>
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	9907      	ldr	r1, [sp, #28]
 8007410:	2b47      	cmp	r3, #71	; 0x47
 8007412:	4680      	mov	r8, r0
 8007414:	d108      	bne.n	8007428 <_printf_float+0x110>
 8007416:	1cc8      	adds	r0, r1, #3
 8007418:	db02      	blt.n	8007420 <_printf_float+0x108>
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	4299      	cmp	r1, r3
 800741e:	dd41      	ble.n	80074a4 <_printf_float+0x18c>
 8007420:	f1a9 0902 	sub.w	r9, r9, #2
 8007424:	fa5f f989 	uxtb.w	r9, r9
 8007428:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800742c:	d820      	bhi.n	8007470 <_printf_float+0x158>
 800742e:	3901      	subs	r1, #1
 8007430:	464a      	mov	r2, r9
 8007432:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007436:	9107      	str	r1, [sp, #28]
 8007438:	f7ff ff30 	bl	800729c <__exponent>
 800743c:	9a08      	ldr	r2, [sp, #32]
 800743e:	9004      	str	r0, [sp, #16]
 8007440:	1813      	adds	r3, r2, r0
 8007442:	2a01      	cmp	r2, #1
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	dc02      	bgt.n	800744e <_printf_float+0x136>
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	07d2      	lsls	r2, r2, #31
 800744c:	d501      	bpl.n	8007452 <_printf_float+0x13a>
 800744e:	3301      	adds	r3, #1
 8007450:	6123      	str	r3, [r4, #16]
 8007452:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0a2      	beq.n	80073a0 <_printf_float+0x88>
 800745a:	232d      	movs	r3, #45	; 0x2d
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007460:	e79e      	b.n	80073a0 <_printf_float+0x88>
 8007462:	9904      	ldr	r1, [sp, #16]
 8007464:	2947      	cmp	r1, #71	; 0x47
 8007466:	d1c1      	bne.n	80073ec <_printf_float+0xd4>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1bf      	bne.n	80073ec <_printf_float+0xd4>
 800746c:	2301      	movs	r3, #1
 800746e:	e7bc      	b.n	80073ea <_printf_float+0xd2>
 8007470:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007474:	d118      	bne.n	80074a8 <_printf_float+0x190>
 8007476:	2900      	cmp	r1, #0
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	dd0b      	ble.n	8007494 <_printf_float+0x17c>
 800747c:	6121      	str	r1, [r4, #16]
 800747e:	b913      	cbnz	r3, 8007486 <_printf_float+0x16e>
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	07d0      	lsls	r0, r2, #31
 8007484:	d502      	bpl.n	800748c <_printf_float+0x174>
 8007486:	3301      	adds	r3, #1
 8007488:	440b      	add	r3, r1
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	2300      	movs	r3, #0
 800748e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	e7de      	b.n	8007452 <_printf_float+0x13a>
 8007494:	b913      	cbnz	r3, 800749c <_printf_float+0x184>
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	07d2      	lsls	r2, r2, #31
 800749a:	d501      	bpl.n	80074a0 <_printf_float+0x188>
 800749c:	3302      	adds	r3, #2
 800749e:	e7f4      	b.n	800748a <_printf_float+0x172>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7f2      	b.n	800748a <_printf_float+0x172>
 80074a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80074a8:	9b08      	ldr	r3, [sp, #32]
 80074aa:	4299      	cmp	r1, r3
 80074ac:	db05      	blt.n	80074ba <_printf_float+0x1a2>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	6121      	str	r1, [r4, #16]
 80074b2:	07d8      	lsls	r0, r3, #31
 80074b4:	d5ea      	bpl.n	800748c <_printf_float+0x174>
 80074b6:	1c4b      	adds	r3, r1, #1
 80074b8:	e7e7      	b.n	800748a <_printf_float+0x172>
 80074ba:	2900      	cmp	r1, #0
 80074bc:	bfd4      	ite	le
 80074be:	f1c1 0202 	rsble	r2, r1, #2
 80074c2:	2201      	movgt	r2, #1
 80074c4:	4413      	add	r3, r2
 80074c6:	e7e0      	b.n	800748a <_printf_float+0x172>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	055a      	lsls	r2, r3, #21
 80074cc:	d407      	bmi.n	80074de <_printf_float+0x1c6>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	4642      	mov	r2, r8
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d12a      	bne.n	8007532 <_printf_float+0x21a>
 80074dc:	e76a      	b.n	80073b4 <_printf_float+0x9c>
 80074de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074e2:	f240 80e2 	bls.w	80076aa <_printf_float+0x392>
 80074e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80074ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	d133      	bne.n	800755c <_printf_float+0x244>
 80074f4:	4a38      	ldr	r2, [pc, #224]	; (80075d8 <_printf_float+0x2c0>)
 80074f6:	2301      	movs	r3, #1
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b8      	blx	r7
 80074fe:	3001      	adds	r0, #1
 8007500:	f43f af58 	beq.w	80073b4 <_printf_float+0x9c>
 8007504:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007508:	429a      	cmp	r2, r3
 800750a:	db02      	blt.n	8007512 <_printf_float+0x1fa>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	07d8      	lsls	r0, r3, #31
 8007510:	d50f      	bpl.n	8007532 <_printf_float+0x21a>
 8007512:	4653      	mov	r3, sl
 8007514:	465a      	mov	r2, fp
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f af49 	beq.w	80073b4 <_printf_float+0x9c>
 8007522:	f04f 0800 	mov.w	r8, #0
 8007526:	f104 091a 	add.w	r9, r4, #26
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	3b01      	subs	r3, #1
 800752e:	4543      	cmp	r3, r8
 8007530:	dc09      	bgt.n	8007546 <_printf_float+0x22e>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	079b      	lsls	r3, r3, #30
 8007536:	f100 8108 	bmi.w	800774a <_printf_float+0x432>
 800753a:	68e0      	ldr	r0, [r4, #12]
 800753c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753e:	4298      	cmp	r0, r3
 8007540:	bfb8      	it	lt
 8007542:	4618      	movlt	r0, r3
 8007544:	e738      	b.n	80073b8 <_printf_float+0xa0>
 8007546:	2301      	movs	r3, #1
 8007548:	464a      	mov	r2, r9
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f af2f 	beq.w	80073b4 <_printf_float+0x9c>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	e7e6      	b.n	800752a <_printf_float+0x212>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	dc3c      	bgt.n	80075dc <_printf_float+0x2c4>
 8007562:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <_printf_float+0x2c0>)
 8007564:	2301      	movs	r3, #1
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f af21 	beq.w	80073b4 <_printf_float+0x9c>
 8007572:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007576:	4313      	orrs	r3, r2
 8007578:	d102      	bne.n	8007580 <_printf_float+0x268>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	07d9      	lsls	r1, r3, #31
 800757e:	d5d8      	bpl.n	8007532 <_printf_float+0x21a>
 8007580:	4653      	mov	r3, sl
 8007582:	465a      	mov	r2, fp
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f af12 	beq.w	80073b4 <_printf_float+0x9c>
 8007590:	f04f 0900 	mov.w	r9, #0
 8007594:	f104 0a1a 	add.w	sl, r4, #26
 8007598:	9b07      	ldr	r3, [sp, #28]
 800759a:	425b      	negs	r3, r3
 800759c:	454b      	cmp	r3, r9
 800759e:	dc01      	bgt.n	80075a4 <_printf_float+0x28c>
 80075a0:	9b08      	ldr	r3, [sp, #32]
 80075a2:	e795      	b.n	80074d0 <_printf_float+0x1b8>
 80075a4:	2301      	movs	r3, #1
 80075a6:	4652      	mov	r2, sl
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f af00 	beq.w	80073b4 <_printf_float+0x9c>
 80075b4:	f109 0901 	add.w	r9, r9, #1
 80075b8:	e7ee      	b.n	8007598 <_printf_float+0x280>
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	ffffffff 	.word	0xffffffff
 80075c4:	7fefffff 	.word	0x7fefffff
 80075c8:	0800a4f0 	.word	0x0800a4f0
 80075cc:	0800a4f4 	.word	0x0800a4f4
 80075d0:	0800a4fc 	.word	0x0800a4fc
 80075d4:	0800a4f8 	.word	0x0800a4f8
 80075d8:	0800a500 	.word	0x0800a500
 80075dc:	9a08      	ldr	r2, [sp, #32]
 80075de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e0:	429a      	cmp	r2, r3
 80075e2:	bfa8      	it	ge
 80075e4:	461a      	movge	r2, r3
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	4691      	mov	r9, r2
 80075ea:	dc38      	bgt.n	800765e <_printf_float+0x346>
 80075ec:	2300      	movs	r3, #0
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075f4:	f104 021a 	add.w	r2, r4, #26
 80075f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	eba3 0309 	sub.w	r3, r3, r9
 8007602:	428b      	cmp	r3, r1
 8007604:	dc33      	bgt.n	800766e <_printf_float+0x356>
 8007606:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800760a:	429a      	cmp	r2, r3
 800760c:	db3c      	blt.n	8007688 <_printf_float+0x370>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	07da      	lsls	r2, r3, #31
 8007612:	d439      	bmi.n	8007688 <_printf_float+0x370>
 8007614:	9b08      	ldr	r3, [sp, #32]
 8007616:	9a04      	ldr	r2, [sp, #16]
 8007618:	9907      	ldr	r1, [sp, #28]
 800761a:	1a9a      	subs	r2, r3, r2
 800761c:	eba3 0901 	sub.w	r9, r3, r1
 8007620:	4591      	cmp	r9, r2
 8007622:	bfa8      	it	ge
 8007624:	4691      	movge	r9, r2
 8007626:	f1b9 0f00 	cmp.w	r9, #0
 800762a:	dc35      	bgt.n	8007698 <_printf_float+0x380>
 800762c:	f04f 0800 	mov.w	r8, #0
 8007630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007634:	f104 0a1a 	add.w	sl, r4, #26
 8007638:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800763c:	1a9b      	subs	r3, r3, r2
 800763e:	eba3 0309 	sub.w	r3, r3, r9
 8007642:	4543      	cmp	r3, r8
 8007644:	f77f af75 	ble.w	8007532 <_printf_float+0x21a>
 8007648:	2301      	movs	r3, #1
 800764a:	4652      	mov	r2, sl
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f aeae 	beq.w	80073b4 <_printf_float+0x9c>
 8007658:	f108 0801 	add.w	r8, r8, #1
 800765c:	e7ec      	b.n	8007638 <_printf_float+0x320>
 800765e:	4613      	mov	r3, r2
 8007660:	4631      	mov	r1, r6
 8007662:	4642      	mov	r2, r8
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	d1bf      	bne.n	80075ec <_printf_float+0x2d4>
 800766c:	e6a2      	b.n	80073b4 <_printf_float+0x9c>
 800766e:	2301      	movs	r3, #1
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	9204      	str	r2, [sp, #16]
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	f43f ae9b 	beq.w	80073b4 <_printf_float+0x9c>
 800767e:	9b05      	ldr	r3, [sp, #20]
 8007680:	9a04      	ldr	r2, [sp, #16]
 8007682:	3301      	adds	r3, #1
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	e7b7      	b.n	80075f8 <_printf_float+0x2e0>
 8007688:	4653      	mov	r3, sl
 800768a:	465a      	mov	r2, fp
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	d1be      	bne.n	8007614 <_printf_float+0x2fc>
 8007696:	e68d      	b.n	80073b4 <_printf_float+0x9c>
 8007698:	9a04      	ldr	r2, [sp, #16]
 800769a:	464b      	mov	r3, r9
 800769c:	4442      	add	r2, r8
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	d1c1      	bne.n	800762c <_printf_float+0x314>
 80076a8:	e684      	b.n	80073b4 <_printf_float+0x9c>
 80076aa:	9a08      	ldr	r2, [sp, #32]
 80076ac:	2a01      	cmp	r2, #1
 80076ae:	dc01      	bgt.n	80076b4 <_printf_float+0x39c>
 80076b0:	07db      	lsls	r3, r3, #31
 80076b2:	d537      	bpl.n	8007724 <_printf_float+0x40c>
 80076b4:	2301      	movs	r3, #1
 80076b6:	4642      	mov	r2, r8
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f ae78 	beq.w	80073b4 <_printf_float+0x9c>
 80076c4:	4653      	mov	r3, sl
 80076c6:	465a      	mov	r2, fp
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f ae70 	beq.w	80073b4 <_printf_float+0x9c>
 80076d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80076d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e0:	d01b      	beq.n	800771a <_printf_float+0x402>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	f108 0201 	add.w	r2, r8, #1
 80076e8:	3b01      	subs	r3, #1
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	d10e      	bne.n	8007712 <_printf_float+0x3fa>
 80076f4:	e65e      	b.n	80073b4 <_printf_float+0x9c>
 80076f6:	2301      	movs	r3, #1
 80076f8:	464a      	mov	r2, r9
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	f43f ae57 	beq.w	80073b4 <_printf_float+0x9c>
 8007706:	f108 0801 	add.w	r8, r8, #1
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	3b01      	subs	r3, #1
 800770e:	4543      	cmp	r3, r8
 8007710:	dcf1      	bgt.n	80076f6 <_printf_float+0x3de>
 8007712:	9b04      	ldr	r3, [sp, #16]
 8007714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007718:	e6db      	b.n	80074d2 <_printf_float+0x1ba>
 800771a:	f04f 0800 	mov.w	r8, #0
 800771e:	f104 091a 	add.w	r9, r4, #26
 8007722:	e7f2      	b.n	800770a <_printf_float+0x3f2>
 8007724:	2301      	movs	r3, #1
 8007726:	4642      	mov	r2, r8
 8007728:	e7df      	b.n	80076ea <_printf_float+0x3d2>
 800772a:	2301      	movs	r3, #1
 800772c:	464a      	mov	r2, r9
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	f43f ae3d 	beq.w	80073b4 <_printf_float+0x9c>
 800773a:	f108 0801 	add.w	r8, r8, #1
 800773e:	68e3      	ldr	r3, [r4, #12]
 8007740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007742:	1a5b      	subs	r3, r3, r1
 8007744:	4543      	cmp	r3, r8
 8007746:	dcf0      	bgt.n	800772a <_printf_float+0x412>
 8007748:	e6f7      	b.n	800753a <_printf_float+0x222>
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	f104 0919 	add.w	r9, r4, #25
 8007752:	e7f4      	b.n	800773e <_printf_float+0x426>

08007754 <_printf_common>:
 8007754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	4616      	mov	r6, r2
 800775a:	4699      	mov	r9, r3
 800775c:	688a      	ldr	r2, [r1, #8]
 800775e:	690b      	ldr	r3, [r1, #16]
 8007760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007764:	4293      	cmp	r3, r2
 8007766:	bfb8      	it	lt
 8007768:	4613      	movlt	r3, r2
 800776a:	6033      	str	r3, [r6, #0]
 800776c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007770:	4607      	mov	r7, r0
 8007772:	460c      	mov	r4, r1
 8007774:	b10a      	cbz	r2, 800777a <_printf_common+0x26>
 8007776:	3301      	adds	r3, #1
 8007778:	6033      	str	r3, [r6, #0]
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	0699      	lsls	r1, r3, #26
 800777e:	bf42      	ittt	mi
 8007780:	6833      	ldrmi	r3, [r6, #0]
 8007782:	3302      	addmi	r3, #2
 8007784:	6033      	strmi	r3, [r6, #0]
 8007786:	6825      	ldr	r5, [r4, #0]
 8007788:	f015 0506 	ands.w	r5, r5, #6
 800778c:	d106      	bne.n	800779c <_printf_common+0x48>
 800778e:	f104 0a19 	add.w	sl, r4, #25
 8007792:	68e3      	ldr	r3, [r4, #12]
 8007794:	6832      	ldr	r2, [r6, #0]
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	42ab      	cmp	r3, r5
 800779a:	dc26      	bgt.n	80077ea <_printf_common+0x96>
 800779c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077a0:	1e13      	subs	r3, r2, #0
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	bf18      	it	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	0692      	lsls	r2, r2, #26
 80077aa:	d42b      	bmi.n	8007804 <_printf_common+0xb0>
 80077ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077b0:	4649      	mov	r1, r9
 80077b2:	4638      	mov	r0, r7
 80077b4:	47c0      	blx	r8
 80077b6:	3001      	adds	r0, #1
 80077b8:	d01e      	beq.n	80077f8 <_printf_common+0xa4>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	68e5      	ldr	r5, [r4, #12]
 80077be:	6832      	ldr	r2, [r6, #0]
 80077c0:	f003 0306 	and.w	r3, r3, #6
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	bf08      	it	eq
 80077c8:	1aad      	subeq	r5, r5, r2
 80077ca:	68a3      	ldr	r3, [r4, #8]
 80077cc:	6922      	ldr	r2, [r4, #16]
 80077ce:	bf0c      	ite	eq
 80077d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d4:	2500      	movne	r5, #0
 80077d6:	4293      	cmp	r3, r2
 80077d8:	bfc4      	itt	gt
 80077da:	1a9b      	subgt	r3, r3, r2
 80077dc:	18ed      	addgt	r5, r5, r3
 80077de:	2600      	movs	r6, #0
 80077e0:	341a      	adds	r4, #26
 80077e2:	42b5      	cmp	r5, r6
 80077e4:	d11a      	bne.n	800781c <_printf_common+0xc8>
 80077e6:	2000      	movs	r0, #0
 80077e8:	e008      	b.n	80077fc <_printf_common+0xa8>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4652      	mov	r2, sl
 80077ee:	4649      	mov	r1, r9
 80077f0:	4638      	mov	r0, r7
 80077f2:	47c0      	blx	r8
 80077f4:	3001      	adds	r0, #1
 80077f6:	d103      	bne.n	8007800 <_printf_common+0xac>
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007800:	3501      	adds	r5, #1
 8007802:	e7c6      	b.n	8007792 <_printf_common+0x3e>
 8007804:	18e1      	adds	r1, r4, r3
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	2030      	movs	r0, #48	; 0x30
 800780a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800780e:	4422      	add	r2, r4
 8007810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007818:	3302      	adds	r3, #2
 800781a:	e7c7      	b.n	80077ac <_printf_common+0x58>
 800781c:	2301      	movs	r3, #1
 800781e:	4622      	mov	r2, r4
 8007820:	4649      	mov	r1, r9
 8007822:	4638      	mov	r0, r7
 8007824:	47c0      	blx	r8
 8007826:	3001      	adds	r0, #1
 8007828:	d0e6      	beq.n	80077f8 <_printf_common+0xa4>
 800782a:	3601      	adds	r6, #1
 800782c:	e7d9      	b.n	80077e2 <_printf_common+0x8e>
	...

08007830 <_printf_i>:
 8007830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007834:	7e0f      	ldrb	r7, [r1, #24]
 8007836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007838:	2f78      	cmp	r7, #120	; 0x78
 800783a:	4691      	mov	r9, r2
 800783c:	4680      	mov	r8, r0
 800783e:	460c      	mov	r4, r1
 8007840:	469a      	mov	sl, r3
 8007842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007846:	d807      	bhi.n	8007858 <_printf_i+0x28>
 8007848:	2f62      	cmp	r7, #98	; 0x62
 800784a:	d80a      	bhi.n	8007862 <_printf_i+0x32>
 800784c:	2f00      	cmp	r7, #0
 800784e:	f000 80d8 	beq.w	8007a02 <_printf_i+0x1d2>
 8007852:	2f58      	cmp	r7, #88	; 0x58
 8007854:	f000 80a3 	beq.w	800799e <_printf_i+0x16e>
 8007858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800785c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007860:	e03a      	b.n	80078d8 <_printf_i+0xa8>
 8007862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007866:	2b15      	cmp	r3, #21
 8007868:	d8f6      	bhi.n	8007858 <_printf_i+0x28>
 800786a:	a101      	add	r1, pc, #4	; (adr r1, 8007870 <_printf_i+0x40>)
 800786c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007870:	080078c9 	.word	0x080078c9
 8007874:	080078dd 	.word	0x080078dd
 8007878:	08007859 	.word	0x08007859
 800787c:	08007859 	.word	0x08007859
 8007880:	08007859 	.word	0x08007859
 8007884:	08007859 	.word	0x08007859
 8007888:	080078dd 	.word	0x080078dd
 800788c:	08007859 	.word	0x08007859
 8007890:	08007859 	.word	0x08007859
 8007894:	08007859 	.word	0x08007859
 8007898:	08007859 	.word	0x08007859
 800789c:	080079e9 	.word	0x080079e9
 80078a0:	0800790d 	.word	0x0800790d
 80078a4:	080079cb 	.word	0x080079cb
 80078a8:	08007859 	.word	0x08007859
 80078ac:	08007859 	.word	0x08007859
 80078b0:	08007a0b 	.word	0x08007a0b
 80078b4:	08007859 	.word	0x08007859
 80078b8:	0800790d 	.word	0x0800790d
 80078bc:	08007859 	.word	0x08007859
 80078c0:	08007859 	.word	0x08007859
 80078c4:	080079d3 	.word	0x080079d3
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	1d1a      	adds	r2, r3, #4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	602a      	str	r2, [r5, #0]
 80078d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d8:	2301      	movs	r3, #1
 80078da:	e0a3      	b.n	8007a24 <_printf_i+0x1f4>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	6829      	ldr	r1, [r5, #0]
 80078e0:	0606      	lsls	r6, r0, #24
 80078e2:	f101 0304 	add.w	r3, r1, #4
 80078e6:	d50a      	bpl.n	80078fe <_printf_i+0xce>
 80078e8:	680e      	ldr	r6, [r1, #0]
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	da03      	bge.n	80078f8 <_printf_i+0xc8>
 80078f0:	232d      	movs	r3, #45	; 0x2d
 80078f2:	4276      	negs	r6, r6
 80078f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f8:	485e      	ldr	r0, [pc, #376]	; (8007a74 <_printf_i+0x244>)
 80078fa:	230a      	movs	r3, #10
 80078fc:	e019      	b.n	8007932 <_printf_i+0x102>
 80078fe:	680e      	ldr	r6, [r1, #0]
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007906:	bf18      	it	ne
 8007908:	b236      	sxthne	r6, r6
 800790a:	e7ef      	b.n	80078ec <_printf_i+0xbc>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	6820      	ldr	r0, [r4, #0]
 8007910:	1d19      	adds	r1, r3, #4
 8007912:	6029      	str	r1, [r5, #0]
 8007914:	0601      	lsls	r1, r0, #24
 8007916:	d501      	bpl.n	800791c <_printf_i+0xec>
 8007918:	681e      	ldr	r6, [r3, #0]
 800791a:	e002      	b.n	8007922 <_printf_i+0xf2>
 800791c:	0646      	lsls	r6, r0, #25
 800791e:	d5fb      	bpl.n	8007918 <_printf_i+0xe8>
 8007920:	881e      	ldrh	r6, [r3, #0]
 8007922:	4854      	ldr	r0, [pc, #336]	; (8007a74 <_printf_i+0x244>)
 8007924:	2f6f      	cmp	r7, #111	; 0x6f
 8007926:	bf0c      	ite	eq
 8007928:	2308      	moveq	r3, #8
 800792a:	230a      	movne	r3, #10
 800792c:	2100      	movs	r1, #0
 800792e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007932:	6865      	ldr	r5, [r4, #4]
 8007934:	60a5      	str	r5, [r4, #8]
 8007936:	2d00      	cmp	r5, #0
 8007938:	bfa2      	ittt	ge
 800793a:	6821      	ldrge	r1, [r4, #0]
 800793c:	f021 0104 	bicge.w	r1, r1, #4
 8007940:	6021      	strge	r1, [r4, #0]
 8007942:	b90e      	cbnz	r6, 8007948 <_printf_i+0x118>
 8007944:	2d00      	cmp	r5, #0
 8007946:	d04d      	beq.n	80079e4 <_printf_i+0x1b4>
 8007948:	4615      	mov	r5, r2
 800794a:	fbb6 f1f3 	udiv	r1, r6, r3
 800794e:	fb03 6711 	mls	r7, r3, r1, r6
 8007952:	5dc7      	ldrb	r7, [r0, r7]
 8007954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007958:	4637      	mov	r7, r6
 800795a:	42bb      	cmp	r3, r7
 800795c:	460e      	mov	r6, r1
 800795e:	d9f4      	bls.n	800794a <_printf_i+0x11a>
 8007960:	2b08      	cmp	r3, #8
 8007962:	d10b      	bne.n	800797c <_printf_i+0x14c>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	07de      	lsls	r6, r3, #31
 8007968:	d508      	bpl.n	800797c <_printf_i+0x14c>
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	6861      	ldr	r1, [r4, #4]
 800796e:	4299      	cmp	r1, r3
 8007970:	bfde      	ittt	le
 8007972:	2330      	movle	r3, #48	; 0x30
 8007974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800797c:	1b52      	subs	r2, r2, r5
 800797e:	6122      	str	r2, [r4, #16]
 8007980:	f8cd a000 	str.w	sl, [sp]
 8007984:	464b      	mov	r3, r9
 8007986:	aa03      	add	r2, sp, #12
 8007988:	4621      	mov	r1, r4
 800798a:	4640      	mov	r0, r8
 800798c:	f7ff fee2 	bl	8007754 <_printf_common>
 8007990:	3001      	adds	r0, #1
 8007992:	d14c      	bne.n	8007a2e <_printf_i+0x1fe>
 8007994:	f04f 30ff 	mov.w	r0, #4294967295
 8007998:	b004      	add	sp, #16
 800799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799e:	4835      	ldr	r0, [pc, #212]	; (8007a74 <_printf_i+0x244>)
 80079a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079a4:	6829      	ldr	r1, [r5, #0]
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079ac:	6029      	str	r1, [r5, #0]
 80079ae:	061d      	lsls	r5, r3, #24
 80079b0:	d514      	bpl.n	80079dc <_printf_i+0x1ac>
 80079b2:	07df      	lsls	r7, r3, #31
 80079b4:	bf44      	itt	mi
 80079b6:	f043 0320 	orrmi.w	r3, r3, #32
 80079ba:	6023      	strmi	r3, [r4, #0]
 80079bc:	b91e      	cbnz	r6, 80079c6 <_printf_i+0x196>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	f023 0320 	bic.w	r3, r3, #32
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	2310      	movs	r3, #16
 80079c8:	e7b0      	b.n	800792c <_printf_i+0xfc>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	f043 0320 	orr.w	r3, r3, #32
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	2378      	movs	r3, #120	; 0x78
 80079d4:	4828      	ldr	r0, [pc, #160]	; (8007a78 <_printf_i+0x248>)
 80079d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079da:	e7e3      	b.n	80079a4 <_printf_i+0x174>
 80079dc:	0659      	lsls	r1, r3, #25
 80079de:	bf48      	it	mi
 80079e0:	b2b6      	uxthmi	r6, r6
 80079e2:	e7e6      	b.n	80079b2 <_printf_i+0x182>
 80079e4:	4615      	mov	r5, r2
 80079e6:	e7bb      	b.n	8007960 <_printf_i+0x130>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	6826      	ldr	r6, [r4, #0]
 80079ec:	6961      	ldr	r1, [r4, #20]
 80079ee:	1d18      	adds	r0, r3, #4
 80079f0:	6028      	str	r0, [r5, #0]
 80079f2:	0635      	lsls	r5, r6, #24
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	d501      	bpl.n	80079fc <_printf_i+0x1cc>
 80079f8:	6019      	str	r1, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <_printf_i+0x1d2>
 80079fc:	0670      	lsls	r0, r6, #25
 80079fe:	d5fb      	bpl.n	80079f8 <_printf_i+0x1c8>
 8007a00:	8019      	strh	r1, [r3, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	4615      	mov	r5, r2
 8007a08:	e7ba      	b.n	8007980 <_printf_i+0x150>
 8007a0a:	682b      	ldr	r3, [r5, #0]
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	602a      	str	r2, [r5, #0]
 8007a10:	681d      	ldr	r5, [r3, #0]
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	2100      	movs	r1, #0
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7f8 fc6a 	bl	80002f0 <memchr>
 8007a1c:	b108      	cbz	r0, 8007a22 <_printf_i+0x1f2>
 8007a1e:	1b40      	subs	r0, r0, r5
 8007a20:	6060      	str	r0, [r4, #4]
 8007a22:	6863      	ldr	r3, [r4, #4]
 8007a24:	6123      	str	r3, [r4, #16]
 8007a26:	2300      	movs	r3, #0
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a2c:	e7a8      	b.n	8007980 <_printf_i+0x150>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	462a      	mov	r2, r5
 8007a32:	4649      	mov	r1, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	47d0      	blx	sl
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d0ab      	beq.n	8007994 <_printf_i+0x164>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	079b      	lsls	r3, r3, #30
 8007a40:	d413      	bmi.n	8007a6a <_printf_i+0x23a>
 8007a42:	68e0      	ldr	r0, [r4, #12]
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	4298      	cmp	r0, r3
 8007a48:	bfb8      	it	lt
 8007a4a:	4618      	movlt	r0, r3
 8007a4c:	e7a4      	b.n	8007998 <_printf_i+0x168>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4632      	mov	r2, r6
 8007a52:	4649      	mov	r1, r9
 8007a54:	4640      	mov	r0, r8
 8007a56:	47d0      	blx	sl
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d09b      	beq.n	8007994 <_printf_i+0x164>
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	9903      	ldr	r1, [sp, #12]
 8007a62:	1a5b      	subs	r3, r3, r1
 8007a64:	42ab      	cmp	r3, r5
 8007a66:	dcf2      	bgt.n	8007a4e <_printf_i+0x21e>
 8007a68:	e7eb      	b.n	8007a42 <_printf_i+0x212>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	f104 0619 	add.w	r6, r4, #25
 8007a70:	e7f5      	b.n	8007a5e <_printf_i+0x22e>
 8007a72:	bf00      	nop
 8007a74:	0800a502 	.word	0x0800a502
 8007a78:	0800a513 	.word	0x0800a513

08007a7c <_puts_r>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	460e      	mov	r6, r1
 8007a80:	4605      	mov	r5, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_puts_r+0x10>
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_puts_r+0x10>
 8007a88:	f001 f862 	bl	8008b50 <__sinit>
 8007a8c:	69ab      	ldr	r3, [r5, #24]
 8007a8e:	68ac      	ldr	r4, [r5, #8]
 8007a90:	b913      	cbnz	r3, 8007a98 <_puts_r+0x1c>
 8007a92:	4628      	mov	r0, r5
 8007a94:	f001 f85c 	bl	8008b50 <__sinit>
 8007a98:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <_puts_r+0xd0>)
 8007a9a:	429c      	cmp	r4, r3
 8007a9c:	d120      	bne.n	8007ae0 <_puts_r+0x64>
 8007a9e:	686c      	ldr	r4, [r5, #4]
 8007aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aa2:	07db      	lsls	r3, r3, #31
 8007aa4:	d405      	bmi.n	8007ab2 <_puts_r+0x36>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	0598      	lsls	r0, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_puts_r+0x36>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f001 f8f2 	bl	8008c96 <__retarget_lock_acquire_recursive>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d51d      	bpl.n	8007af4 <_puts_r+0x78>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b1db      	cbz	r3, 8007af4 <_puts_r+0x78>
 8007abc:	3e01      	subs	r6, #1
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	60a3      	str	r3, [r4, #8]
 8007ac8:	bb39      	cbnz	r1, 8007b1a <_puts_r+0x9e>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da38      	bge.n	8007b40 <_puts_r+0xc4>
 8007ace:	4622      	mov	r2, r4
 8007ad0:	210a      	movs	r1, #10
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f868 	bl	8007ba8 <__swbuf_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d011      	beq.n	8007b00 <_puts_r+0x84>
 8007adc:	250a      	movs	r5, #10
 8007ade:	e011      	b.n	8007b04 <_puts_r+0x88>
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <_puts_r+0xd4>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <_puts_r+0x6e>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7da      	b.n	8007aa0 <_puts_r+0x24>
 8007aea:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <_puts_r+0xd8>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7d5      	b.n	8007aa0 <_puts_r+0x24>
 8007af4:	4621      	mov	r1, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 f8a8 	bl	8007c4c <__swsetup_r>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d0dd      	beq.n	8007abc <_puts_r+0x40>
 8007b00:	f04f 35ff 	mov.w	r5, #4294967295
 8007b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b06:	07da      	lsls	r2, r3, #31
 8007b08:	d405      	bmi.n	8007b16 <_puts_r+0x9a>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	059b      	lsls	r3, r3, #22
 8007b0e:	d402      	bmi.n	8007b16 <_puts_r+0x9a>
 8007b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b12:	f001 f8c1 	bl	8008c98 <__retarget_lock_release_recursive>
 8007b16:	4628      	mov	r0, r5
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	da04      	bge.n	8007b28 <_puts_r+0xac>
 8007b1e:	69a2      	ldr	r2, [r4, #24]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	dc06      	bgt.n	8007b32 <_puts_r+0xb6>
 8007b24:	290a      	cmp	r1, #10
 8007b26:	d004      	beq.n	8007b32 <_puts_r+0xb6>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	6022      	str	r2, [r4, #0]
 8007b2e:	7019      	strb	r1, [r3, #0]
 8007b30:	e7c5      	b.n	8007abe <_puts_r+0x42>
 8007b32:	4622      	mov	r2, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 f837 	bl	8007ba8 <__swbuf_r>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d1bf      	bne.n	8007abe <_puts_r+0x42>
 8007b3e:	e7df      	b.n	8007b00 <_puts_r+0x84>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	250a      	movs	r5, #10
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	6022      	str	r2, [r4, #0]
 8007b48:	701d      	strb	r5, [r3, #0]
 8007b4a:	e7db      	b.n	8007b04 <_puts_r+0x88>
 8007b4c:	0800a5d4 	.word	0x0800a5d4
 8007b50:	0800a5f4 	.word	0x0800a5f4
 8007b54:	0800a5b4 	.word	0x0800a5b4

08007b58 <puts>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <puts+0xc>)
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	f7ff bf8d 	b.w	8007a7c <_puts_r>
 8007b62:	bf00      	nop
 8007b64:	24000018 	.word	0x24000018

08007b68 <siprintf>:
 8007b68:	b40e      	push	{r1, r2, r3}
 8007b6a:	b500      	push	{lr}
 8007b6c:	b09c      	sub	sp, #112	; 0x70
 8007b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b70:	9002      	str	r0, [sp, #8]
 8007b72:	9006      	str	r0, [sp, #24]
 8007b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b78:	4809      	ldr	r0, [pc, #36]	; (8007ba0 <siprintf+0x38>)
 8007b7a:	9107      	str	r1, [sp, #28]
 8007b7c:	9104      	str	r1, [sp, #16]
 8007b7e:	4909      	ldr	r1, [pc, #36]	; (8007ba4 <siprintf+0x3c>)
 8007b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b84:	9105      	str	r1, [sp, #20]
 8007b86:	6800      	ldr	r0, [r0, #0]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	a902      	add	r1, sp, #8
 8007b8c:	f001 fdc8 	bl	8009720 <_svfiprintf_r>
 8007b90:	9b02      	ldr	r3, [sp, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	b01c      	add	sp, #112	; 0x70
 8007b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b9c:	b003      	add	sp, #12
 8007b9e:	4770      	bx	lr
 8007ba0:	24000018 	.word	0x24000018
 8007ba4:	ffff0208 	.word	0xffff0208

08007ba8 <__swbuf_r>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	460e      	mov	r6, r1
 8007bac:	4614      	mov	r4, r2
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b118      	cbz	r0, 8007bba <__swbuf_r+0x12>
 8007bb2:	6983      	ldr	r3, [r0, #24]
 8007bb4:	b90b      	cbnz	r3, 8007bba <__swbuf_r+0x12>
 8007bb6:	f000 ffcb 	bl	8008b50 <__sinit>
 8007bba:	4b21      	ldr	r3, [pc, #132]	; (8007c40 <__swbuf_r+0x98>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d12b      	bne.n	8007c18 <__swbuf_r+0x70>
 8007bc0:	686c      	ldr	r4, [r5, #4]
 8007bc2:	69a3      	ldr	r3, [r4, #24]
 8007bc4:	60a3      	str	r3, [r4, #8]
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	071a      	lsls	r2, r3, #28
 8007bca:	d52f      	bpl.n	8007c2c <__swbuf_r+0x84>
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	b36b      	cbz	r3, 8007c2c <__swbuf_r+0x84>
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	1ac0      	subs	r0, r0, r3
 8007bd6:	6963      	ldr	r3, [r4, #20]
 8007bd8:	b2f6      	uxtb	r6, r6
 8007bda:	4283      	cmp	r3, r0
 8007bdc:	4637      	mov	r7, r6
 8007bde:	dc04      	bgt.n	8007bea <__swbuf_r+0x42>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 ff20 	bl	8008a28 <_fflush_r>
 8007be8:	bb30      	cbnz	r0, 8007c38 <__swbuf_r+0x90>
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	60a3      	str	r3, [r4, #8]
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	6022      	str	r2, [r4, #0]
 8007bf6:	701e      	strb	r6, [r3, #0]
 8007bf8:	6963      	ldr	r3, [r4, #20]
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	4283      	cmp	r3, r0
 8007bfe:	d004      	beq.n	8007c0a <__swbuf_r+0x62>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	07db      	lsls	r3, r3, #31
 8007c04:	d506      	bpl.n	8007c14 <__swbuf_r+0x6c>
 8007c06:	2e0a      	cmp	r6, #10
 8007c08:	d104      	bne.n	8007c14 <__swbuf_r+0x6c>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 ff0b 	bl	8008a28 <_fflush_r>
 8007c12:	b988      	cbnz	r0, 8007c38 <__swbuf_r+0x90>
 8007c14:	4638      	mov	r0, r7
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <__swbuf_r+0x9c>)
 8007c1a:	429c      	cmp	r4, r3
 8007c1c:	d101      	bne.n	8007c22 <__swbuf_r+0x7a>
 8007c1e:	68ac      	ldr	r4, [r5, #8]
 8007c20:	e7cf      	b.n	8007bc2 <__swbuf_r+0x1a>
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <__swbuf_r+0xa0>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	bf08      	it	eq
 8007c28:	68ec      	ldreq	r4, [r5, #12]
 8007c2a:	e7ca      	b.n	8007bc2 <__swbuf_r+0x1a>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f80c 	bl	8007c4c <__swsetup_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0cb      	beq.n	8007bd0 <__swbuf_r+0x28>
 8007c38:	f04f 37ff 	mov.w	r7, #4294967295
 8007c3c:	e7ea      	b.n	8007c14 <__swbuf_r+0x6c>
 8007c3e:	bf00      	nop
 8007c40:	0800a5d4 	.word	0x0800a5d4
 8007c44:	0800a5f4 	.word	0x0800a5f4
 8007c48:	0800a5b4 	.word	0x0800a5b4

08007c4c <__swsetup_r>:
 8007c4c:	4b32      	ldr	r3, [pc, #200]	; (8007d18 <__swsetup_r+0xcc>)
 8007c4e:	b570      	push	{r4, r5, r6, lr}
 8007c50:	681d      	ldr	r5, [r3, #0]
 8007c52:	4606      	mov	r6, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	b125      	cbz	r5, 8007c62 <__swsetup_r+0x16>
 8007c58:	69ab      	ldr	r3, [r5, #24]
 8007c5a:	b913      	cbnz	r3, 8007c62 <__swsetup_r+0x16>
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 ff77 	bl	8008b50 <__sinit>
 8007c62:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <__swsetup_r+0xd0>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	d10f      	bne.n	8007c88 <__swsetup_r+0x3c>
 8007c68:	686c      	ldr	r4, [r5, #4]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c70:	0719      	lsls	r1, r3, #28
 8007c72:	d42c      	bmi.n	8007cce <__swsetup_r+0x82>
 8007c74:	06dd      	lsls	r5, r3, #27
 8007c76:	d411      	bmi.n	8007c9c <__swsetup_r+0x50>
 8007c78:	2309      	movs	r3, #9
 8007c7a:	6033      	str	r3, [r6, #0]
 8007c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	f04f 30ff 	mov.w	r0, #4294967295
 8007c86:	e03e      	b.n	8007d06 <__swsetup_r+0xba>
 8007c88:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <__swsetup_r+0xd4>)
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	d101      	bne.n	8007c92 <__swsetup_r+0x46>
 8007c8e:	68ac      	ldr	r4, [r5, #8]
 8007c90:	e7eb      	b.n	8007c6a <__swsetup_r+0x1e>
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <__swsetup_r+0xd8>)
 8007c94:	429c      	cmp	r4, r3
 8007c96:	bf08      	it	eq
 8007c98:	68ec      	ldreq	r4, [r5, #12]
 8007c9a:	e7e6      	b.n	8007c6a <__swsetup_r+0x1e>
 8007c9c:	0758      	lsls	r0, r3, #29
 8007c9e:	d512      	bpl.n	8007cc6 <__swsetup_r+0x7a>
 8007ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca2:	b141      	cbz	r1, 8007cb6 <__swsetup_r+0x6a>
 8007ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d002      	beq.n	8007cb2 <__swsetup_r+0x66>
 8007cac:	4630      	mov	r0, r6
 8007cae:	f001 fbfb 	bl	80094a8 <_free_r>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	b94b      	cbnz	r3, 8007ce6 <__swsetup_r+0x9a>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cdc:	d003      	beq.n	8007ce6 <__swsetup_r+0x9a>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 ffff 	bl	8008ce4 <__smakebuf_r>
 8007ce6:	89a0      	ldrh	r0, [r4, #12]
 8007ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cec:	f010 0301 	ands.w	r3, r0, #1
 8007cf0:	d00a      	beq.n	8007d08 <__swsetup_r+0xbc>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60a3      	str	r3, [r4, #8]
 8007cf6:	6963      	ldr	r3, [r4, #20]
 8007cf8:	425b      	negs	r3, r3
 8007cfa:	61a3      	str	r3, [r4, #24]
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	b943      	cbnz	r3, 8007d12 <__swsetup_r+0xc6>
 8007d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d04:	d1ba      	bne.n	8007c7c <__swsetup_r+0x30>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	0781      	lsls	r1, r0, #30
 8007d0a:	bf58      	it	pl
 8007d0c:	6963      	ldrpl	r3, [r4, #20]
 8007d0e:	60a3      	str	r3, [r4, #8]
 8007d10:	e7f4      	b.n	8007cfc <__swsetup_r+0xb0>
 8007d12:	2000      	movs	r0, #0
 8007d14:	e7f7      	b.n	8007d06 <__swsetup_r+0xba>
 8007d16:	bf00      	nop
 8007d18:	24000018 	.word	0x24000018
 8007d1c:	0800a5d4 	.word	0x0800a5d4
 8007d20:	0800a5f4 	.word	0x0800a5f4
 8007d24:	0800a5b4 	.word	0x0800a5b4

08007d28 <quorem>:
 8007d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	6903      	ldr	r3, [r0, #16]
 8007d2e:	690c      	ldr	r4, [r1, #16]
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	4607      	mov	r7, r0
 8007d34:	f2c0 8081 	blt.w	8007e3a <quorem+0x112>
 8007d38:	3c01      	subs	r4, #1
 8007d3a:	f101 0814 	add.w	r8, r1, #20
 8007d3e:	f100 0514 	add.w	r5, r0, #20
 8007d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d50:	3301      	adds	r3, #1
 8007d52:	429a      	cmp	r2, r3
 8007d54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d60:	d331      	bcc.n	8007dc6 <quorem+0x9e>
 8007d62:	f04f 0e00 	mov.w	lr, #0
 8007d66:	4640      	mov	r0, r8
 8007d68:	46ac      	mov	ip, r5
 8007d6a:	46f2      	mov	sl, lr
 8007d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d70:	b293      	uxth	r3, r2
 8007d72:	fb06 e303 	mla	r3, r6, r3, lr
 8007d76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d80:	f8dc a000 	ldr.w	sl, [ip]
 8007d84:	0c12      	lsrs	r2, r2, #16
 8007d86:	fa13 f38a 	uxtah	r3, r3, sl
 8007d8a:	fb06 e202 	mla	r2, r6, r2, lr
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	9b00      	ldr	r3, [sp, #0]
 8007d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d96:	b292      	uxth	r2, r2
 8007d98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007da0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007da4:	4581      	cmp	r9, r0
 8007da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007daa:	f84c 3b04 	str.w	r3, [ip], #4
 8007dae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007db2:	d2db      	bcs.n	8007d6c <quorem+0x44>
 8007db4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007db8:	b92b      	cbnz	r3, 8007dc6 <quorem+0x9e>
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	d32e      	bcc.n	8007e22 <quorem+0xfa>
 8007dc4:	613c      	str	r4, [r7, #16]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f001 fa56 	bl	8009278 <__mcmp>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	db24      	blt.n	8007e1a <quorem+0xf2>
 8007dd0:	3601      	adds	r6, #1
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f04f 0c00 	mov.w	ip, #0
 8007dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ddc:	f8d0 e000 	ldr.w	lr, [r0]
 8007de0:	b293      	uxth	r3, r2
 8007de2:	ebac 0303 	sub.w	r3, ip, r3
 8007de6:	0c12      	lsrs	r2, r2, #16
 8007de8:	fa13 f38e 	uxtah	r3, r3, lr
 8007dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dfa:	45c1      	cmp	r9, r8
 8007dfc:	f840 3b04 	str.w	r3, [r0], #4
 8007e00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e04:	d2e8      	bcs.n	8007dd8 <quorem+0xb0>
 8007e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e0e:	b922      	cbnz	r2, 8007e1a <quorem+0xf2>
 8007e10:	3b04      	subs	r3, #4
 8007e12:	429d      	cmp	r5, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	d30a      	bcc.n	8007e2e <quorem+0x106>
 8007e18:	613c      	str	r4, [r7, #16]
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	b003      	add	sp, #12
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	6812      	ldr	r2, [r2, #0]
 8007e24:	3b04      	subs	r3, #4
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	d1cc      	bne.n	8007dc4 <quorem+0x9c>
 8007e2a:	3c01      	subs	r4, #1
 8007e2c:	e7c7      	b.n	8007dbe <quorem+0x96>
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	3b04      	subs	r3, #4
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	d1f0      	bne.n	8007e18 <quorem+0xf0>
 8007e36:	3c01      	subs	r4, #1
 8007e38:	e7eb      	b.n	8007e12 <quorem+0xea>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7ee      	b.n	8007e1c <quorem+0xf4>
	...

08007e40 <_dtoa_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	ed2d 8b02 	vpush	{d8}
 8007e48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e4a:	b091      	sub	sp, #68	; 0x44
 8007e4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e50:	ec59 8b10 	vmov	r8, r9, d0
 8007e54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007e56:	9106      	str	r1, [sp, #24]
 8007e58:	4606      	mov	r6, r0
 8007e5a:	9208      	str	r2, [sp, #32]
 8007e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5e:	b975      	cbnz	r5, 8007e7e <_dtoa_r+0x3e>
 8007e60:	2010      	movs	r0, #16
 8007e62:	f000 ff7f 	bl	8008d64 <malloc>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6270      	str	r0, [r6, #36]	; 0x24
 8007e6a:	b920      	cbnz	r0, 8007e76 <_dtoa_r+0x36>
 8007e6c:	4baa      	ldr	r3, [pc, #680]	; (8008118 <_dtoa_r+0x2d8>)
 8007e6e:	21ea      	movs	r1, #234	; 0xea
 8007e70:	48aa      	ldr	r0, [pc, #680]	; (800811c <_dtoa_r+0x2dc>)
 8007e72:	f001 fdbb 	bl	80099ec <__assert_func>
 8007e76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e7a:	6005      	str	r5, [r0, #0]
 8007e7c:	60c5      	str	r5, [r0, #12]
 8007e7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e80:	6819      	ldr	r1, [r3, #0]
 8007e82:	b151      	cbz	r1, 8007e9a <_dtoa_r+0x5a>
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	604a      	str	r2, [r1, #4]
 8007e88:	2301      	movs	r3, #1
 8007e8a:	4093      	lsls	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 ffb0 	bl	8008df4 <_Bfree>
 8007e94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	f1b9 0300 	subs.w	r3, r9, #0
 8007e9e:	bfbb      	ittet	lt
 8007ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ea4:	9303      	strlt	r3, [sp, #12]
 8007ea6:	2300      	movge	r3, #0
 8007ea8:	2201      	movlt	r2, #1
 8007eaa:	bfac      	ite	ge
 8007eac:	6023      	strge	r3, [r4, #0]
 8007eae:	6022      	strlt	r2, [r4, #0]
 8007eb0:	4b9b      	ldr	r3, [pc, #620]	; (8008120 <_dtoa_r+0x2e0>)
 8007eb2:	9c03      	ldr	r4, [sp, #12]
 8007eb4:	43a3      	bics	r3, r4
 8007eb6:	d11c      	bne.n	8007ef2 <_dtoa_r+0xb2>
 8007eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eba:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ec4:	ea53 0308 	orrs.w	r3, r3, r8
 8007ec8:	f000 84fd 	beq.w	80088c6 <_dtoa_r+0xa86>
 8007ecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ece:	b963      	cbnz	r3, 8007eea <_dtoa_r+0xaa>
 8007ed0:	4b94      	ldr	r3, [pc, #592]	; (8008124 <_dtoa_r+0x2e4>)
 8007ed2:	e01f      	b.n	8007f14 <_dtoa_r+0xd4>
 8007ed4:	4b94      	ldr	r3, [pc, #592]	; (8008128 <_dtoa_r+0x2e8>)
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	9801      	ldr	r0, [sp, #4]
 8007ee0:	b011      	add	sp, #68	; 0x44
 8007ee2:	ecbd 8b02 	vpop	{d8}
 8007ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eea:	4b8e      	ldr	r3, [pc, #568]	; (8008124 <_dtoa_r+0x2e4>)
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	3303      	adds	r3, #3
 8007ef0:	e7f3      	b.n	8007eda <_dtoa_r+0x9a>
 8007ef2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007ef6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efe:	d10b      	bne.n	8007f18 <_dtoa_r+0xd8>
 8007f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f02:	2301      	movs	r3, #1
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 84d9 	beq.w	80088c0 <_dtoa_r+0xa80>
 8007f0e:	4887      	ldr	r0, [pc, #540]	; (800812c <_dtoa_r+0x2ec>)
 8007f10:	6018      	str	r0, [r3, #0]
 8007f12:	1e43      	subs	r3, r0, #1
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	e7e2      	b.n	8007ede <_dtoa_r+0x9e>
 8007f18:	a90f      	add	r1, sp, #60	; 0x3c
 8007f1a:	aa0e      	add	r2, sp, #56	; 0x38
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	eeb0 0b48 	vmov.f64	d0, d8
 8007f22:	f001 fa4f 	bl	80093c4 <__d2b>
 8007f26:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	d046      	beq.n	8007fc0 <_dtoa_r+0x180>
 8007f32:	ee18 4a90 	vmov	r4, s17
 8007f36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f3a:	ec53 2b18 	vmov	r2, r3, d8
 8007f3e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007f42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	ec43 2b16 	vmov	d6, r2, r3
 8007f50:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007f54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008100 <_dtoa_r+0x2c0>
 8007f58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f5c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008108 <_dtoa_r+0x2c8>
 8007f60:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007f64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008110 <_dtoa_r+0x2d0>
 8007f68:	ee07 1a90 	vmov	s15, r1
 8007f6c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007f70:	eeb0 7b46 	vmov.f64	d7, d6
 8007f74:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007f78:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007f7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f84:	ee16 ba90 	vmov	fp, s13
 8007f88:	940a      	str	r4, [sp, #40]	; 0x28
 8007f8a:	d508      	bpl.n	8007f9e <_dtoa_r+0x15e>
 8007f8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007f90:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f98:	bf18      	it	ne
 8007f9a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007f9e:	f1bb 0f16 	cmp.w	fp, #22
 8007fa2:	d82f      	bhi.n	8008004 <_dtoa_r+0x1c4>
 8007fa4:	4b62      	ldr	r3, [pc, #392]	; (8008130 <_dtoa_r+0x2f0>)
 8007fa6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007faa:	ed93 7b00 	vldr	d7, [r3]
 8007fae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb6:	d501      	bpl.n	8007fbc <_dtoa_r+0x17c>
 8007fb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e022      	b.n	8008006 <_dtoa_r+0x1c6>
 8007fc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fc2:	4401      	add	r1, r0
 8007fc4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	bfc1      	itttt	gt
 8007fcc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fd0:	fa04 f303 	lslgt.w	r3, r4, r3
 8007fd4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007fd8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007fdc:	bfd6      	itet	le
 8007fde:	f1c3 0320 	rsble	r3, r3, #32
 8007fe2:	ea43 0808 	orrgt.w	r8, r3, r8
 8007fe6:	fa08 f803 	lslle.w	r8, r8, r3
 8007fea:	ee07 8a90 	vmov	s15, r8
 8007fee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007ff2:	3901      	subs	r1, #1
 8007ff4:	ee17 4a90 	vmov	r4, s15
 8007ff8:	ec53 2b17 	vmov	r2, r3, d7
 8007ffc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008000:	2401      	movs	r4, #1
 8008002:	e7a3      	b.n	8007f4c <_dtoa_r+0x10c>
 8008004:	2301      	movs	r3, #1
 8008006:	930b      	str	r3, [sp, #44]	; 0x2c
 8008008:	1a43      	subs	r3, r0, r1
 800800a:	1e5a      	subs	r2, r3, #1
 800800c:	bf45      	ittet	mi
 800800e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008012:	9304      	strmi	r3, [sp, #16]
 8008014:	2300      	movpl	r3, #0
 8008016:	2300      	movmi	r3, #0
 8008018:	9205      	str	r2, [sp, #20]
 800801a:	bf54      	ite	pl
 800801c:	9304      	strpl	r3, [sp, #16]
 800801e:	9305      	strmi	r3, [sp, #20]
 8008020:	f1bb 0f00 	cmp.w	fp, #0
 8008024:	db18      	blt.n	8008058 <_dtoa_r+0x218>
 8008026:	9b05      	ldr	r3, [sp, #20]
 8008028:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800802c:	445b      	add	r3, fp
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	2300      	movs	r3, #0
 8008032:	9a06      	ldr	r2, [sp, #24]
 8008034:	2a09      	cmp	r2, #9
 8008036:	d849      	bhi.n	80080cc <_dtoa_r+0x28c>
 8008038:	2a05      	cmp	r2, #5
 800803a:	bfc4      	itt	gt
 800803c:	3a04      	subgt	r2, #4
 800803e:	9206      	strgt	r2, [sp, #24]
 8008040:	9a06      	ldr	r2, [sp, #24]
 8008042:	f1a2 0202 	sub.w	r2, r2, #2
 8008046:	bfcc      	ite	gt
 8008048:	2400      	movgt	r4, #0
 800804a:	2401      	movle	r4, #1
 800804c:	2a03      	cmp	r2, #3
 800804e:	d848      	bhi.n	80080e2 <_dtoa_r+0x2a2>
 8008050:	e8df f002 	tbb	[pc, r2]
 8008054:	3a2c2e0b 	.word	0x3a2c2e0b
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	2200      	movs	r2, #0
 800805c:	eba3 030b 	sub.w	r3, r3, fp
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	9209      	str	r2, [sp, #36]	; 0x24
 8008064:	f1cb 0300 	rsb	r3, fp, #0
 8008068:	e7e3      	b.n	8008032 <_dtoa_r+0x1f2>
 800806a:	2200      	movs	r2, #0
 800806c:	9207      	str	r2, [sp, #28]
 800806e:	9a08      	ldr	r2, [sp, #32]
 8008070:	2a00      	cmp	r2, #0
 8008072:	dc39      	bgt.n	80080e8 <_dtoa_r+0x2a8>
 8008074:	f04f 0a01 	mov.w	sl, #1
 8008078:	46d1      	mov	r9, sl
 800807a:	4652      	mov	r2, sl
 800807c:	f8cd a020 	str.w	sl, [sp, #32]
 8008080:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008082:	2100      	movs	r1, #0
 8008084:	6079      	str	r1, [r7, #4]
 8008086:	2004      	movs	r0, #4
 8008088:	f100 0c14 	add.w	ip, r0, #20
 800808c:	4594      	cmp	ip, r2
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	d92f      	bls.n	80080f2 <_dtoa_r+0x2b2>
 8008092:	4630      	mov	r0, r6
 8008094:	930d      	str	r3, [sp, #52]	; 0x34
 8008096:	f000 fe6d 	bl	8008d74 <_Balloc>
 800809a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800809c:	9001      	str	r0, [sp, #4]
 800809e:	4602      	mov	r2, r0
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d149      	bne.n	8008138 <_dtoa_r+0x2f8>
 80080a4:	4b23      	ldr	r3, [pc, #140]	; (8008134 <_dtoa_r+0x2f4>)
 80080a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080aa:	e6e1      	b.n	8007e70 <_dtoa_r+0x30>
 80080ac:	2201      	movs	r2, #1
 80080ae:	e7dd      	b.n	800806c <_dtoa_r+0x22c>
 80080b0:	2200      	movs	r2, #0
 80080b2:	9207      	str	r2, [sp, #28]
 80080b4:	9a08      	ldr	r2, [sp, #32]
 80080b6:	eb0b 0a02 	add.w	sl, fp, r2
 80080ba:	f10a 0901 	add.w	r9, sl, #1
 80080be:	464a      	mov	r2, r9
 80080c0:	2a01      	cmp	r2, #1
 80080c2:	bfb8      	it	lt
 80080c4:	2201      	movlt	r2, #1
 80080c6:	e7db      	b.n	8008080 <_dtoa_r+0x240>
 80080c8:	2201      	movs	r2, #1
 80080ca:	e7f2      	b.n	80080b2 <_dtoa_r+0x272>
 80080cc:	2401      	movs	r4, #1
 80080ce:	2200      	movs	r2, #0
 80080d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80080d4:	f04f 3aff 	mov.w	sl, #4294967295
 80080d8:	2100      	movs	r1, #0
 80080da:	46d1      	mov	r9, sl
 80080dc:	2212      	movs	r2, #18
 80080de:	9108      	str	r1, [sp, #32]
 80080e0:	e7ce      	b.n	8008080 <_dtoa_r+0x240>
 80080e2:	2201      	movs	r2, #1
 80080e4:	9207      	str	r2, [sp, #28]
 80080e6:	e7f5      	b.n	80080d4 <_dtoa_r+0x294>
 80080e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80080ec:	46d1      	mov	r9, sl
 80080ee:	4652      	mov	r2, sl
 80080f0:	e7c6      	b.n	8008080 <_dtoa_r+0x240>
 80080f2:	3101      	adds	r1, #1
 80080f4:	6079      	str	r1, [r7, #4]
 80080f6:	0040      	lsls	r0, r0, #1
 80080f8:	e7c6      	b.n	8008088 <_dtoa_r+0x248>
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w
 8008100:	636f4361 	.word	0x636f4361
 8008104:	3fd287a7 	.word	0x3fd287a7
 8008108:	8b60c8b3 	.word	0x8b60c8b3
 800810c:	3fc68a28 	.word	0x3fc68a28
 8008110:	509f79fb 	.word	0x509f79fb
 8008114:	3fd34413 	.word	0x3fd34413
 8008118:	0800a531 	.word	0x0800a531
 800811c:	0800a548 	.word	0x0800a548
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	0800a52d 	.word	0x0800a52d
 8008128:	0800a524 	.word	0x0800a524
 800812c:	0800a501 	.word	0x0800a501
 8008130:	0800a698 	.word	0x0800a698
 8008134:	0800a5a3 	.word	0x0800a5a3
 8008138:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800813a:	9901      	ldr	r1, [sp, #4]
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	f1b9 0f0e 	cmp.w	r9, #14
 8008142:	d86c      	bhi.n	800821e <_dtoa_r+0x3de>
 8008144:	2c00      	cmp	r4, #0
 8008146:	d06a      	beq.n	800821e <_dtoa_r+0x3de>
 8008148:	f1bb 0f00 	cmp.w	fp, #0
 800814c:	f340 80a0 	ble.w	8008290 <_dtoa_r+0x450>
 8008150:	49c1      	ldr	r1, [pc, #772]	; (8008458 <_dtoa_r+0x618>)
 8008152:	f00b 020f 	and.w	r2, fp, #15
 8008156:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800815a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800815e:	ed92 7b00 	vldr	d7, [r2]
 8008162:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008166:	f000 8087 	beq.w	8008278 <_dtoa_r+0x438>
 800816a:	4abc      	ldr	r2, [pc, #752]	; (800845c <_dtoa_r+0x61c>)
 800816c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008170:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008174:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008178:	f001 010f 	and.w	r1, r1, #15
 800817c:	2203      	movs	r2, #3
 800817e:	48b7      	ldr	r0, [pc, #732]	; (800845c <_dtoa_r+0x61c>)
 8008180:	2900      	cmp	r1, #0
 8008182:	d17b      	bne.n	800827c <_dtoa_r+0x43c>
 8008184:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008188:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800818c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008192:	2900      	cmp	r1, #0
 8008194:	f000 80a2 	beq.w	80082dc <_dtoa_r+0x49c>
 8008198:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800819c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a8:	f140 8098 	bpl.w	80082dc <_dtoa_r+0x49c>
 80081ac:	f1b9 0f00 	cmp.w	r9, #0
 80081b0:	f000 8094 	beq.w	80082dc <_dtoa_r+0x49c>
 80081b4:	f1ba 0f00 	cmp.w	sl, #0
 80081b8:	dd2f      	ble.n	800821a <_dtoa_r+0x3da>
 80081ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80081be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081c6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80081ca:	3201      	adds	r2, #1
 80081cc:	4650      	mov	r0, sl
 80081ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80081d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80081d6:	ee07 2a90 	vmov	s15, r2
 80081da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80081e2:	ee15 4a90 	vmov	r4, s11
 80081e6:	ec52 1b15 	vmov	r1, r2, d5
 80081ea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d177      	bne.n	80082e2 <_dtoa_r+0x4a2>
 80081f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80081f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80081fa:	ec42 1b17 	vmov	d7, r1, r2
 80081fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008206:	f300 8263 	bgt.w	80086d0 <_dtoa_r+0x890>
 800820a:	eeb1 7b47 	vneg.f64	d7, d7
 800820e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008216:	f100 8258 	bmi.w	80086ca <_dtoa_r+0x88a>
 800821a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800821e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008220:	2a00      	cmp	r2, #0
 8008222:	f2c0 811d 	blt.w	8008460 <_dtoa_r+0x620>
 8008226:	f1bb 0f0e 	cmp.w	fp, #14
 800822a:	f300 8119 	bgt.w	8008460 <_dtoa_r+0x620>
 800822e:	4b8a      	ldr	r3, [pc, #552]	; (8008458 <_dtoa_r+0x618>)
 8008230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008234:	ed93 6b00 	vldr	d6, [r3]
 8008238:	9b08      	ldr	r3, [sp, #32]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f280 80b7 	bge.w	80083ae <_dtoa_r+0x56e>
 8008240:	f1b9 0f00 	cmp.w	r9, #0
 8008244:	f300 80b3 	bgt.w	80083ae <_dtoa_r+0x56e>
 8008248:	f040 823f 	bne.w	80086ca <_dtoa_r+0x88a>
 800824c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008250:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008258:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800825c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008260:	464c      	mov	r4, r9
 8008262:	464f      	mov	r7, r9
 8008264:	f280 8215 	bge.w	8008692 <_dtoa_r+0x852>
 8008268:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800826c:	2331      	movs	r3, #49	; 0x31
 800826e:	f808 3b01 	strb.w	r3, [r8], #1
 8008272:	f10b 0b01 	add.w	fp, fp, #1
 8008276:	e211      	b.n	800869c <_dtoa_r+0x85c>
 8008278:	2202      	movs	r2, #2
 800827a:	e780      	b.n	800817e <_dtoa_r+0x33e>
 800827c:	07cc      	lsls	r4, r1, #31
 800827e:	d504      	bpl.n	800828a <_dtoa_r+0x44a>
 8008280:	ed90 6b00 	vldr	d6, [r0]
 8008284:	3201      	adds	r2, #1
 8008286:	ee27 7b06 	vmul.f64	d7, d7, d6
 800828a:	1049      	asrs	r1, r1, #1
 800828c:	3008      	adds	r0, #8
 800828e:	e777      	b.n	8008180 <_dtoa_r+0x340>
 8008290:	d022      	beq.n	80082d8 <_dtoa_r+0x498>
 8008292:	f1cb 0100 	rsb	r1, fp, #0
 8008296:	4a70      	ldr	r2, [pc, #448]	; (8008458 <_dtoa_r+0x618>)
 8008298:	f001 000f 	and.w	r0, r1, #15
 800829c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082a0:	ed92 7b00 	vldr	d7, [r2]
 80082a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80082a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082ac:	486b      	ldr	r0, [pc, #428]	; (800845c <_dtoa_r+0x61c>)
 80082ae:	1109      	asrs	r1, r1, #4
 80082b0:	2400      	movs	r4, #0
 80082b2:	2202      	movs	r2, #2
 80082b4:	b929      	cbnz	r1, 80082c2 <_dtoa_r+0x482>
 80082b6:	2c00      	cmp	r4, #0
 80082b8:	f43f af6a 	beq.w	8008190 <_dtoa_r+0x350>
 80082bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082c0:	e766      	b.n	8008190 <_dtoa_r+0x350>
 80082c2:	07cf      	lsls	r7, r1, #31
 80082c4:	d505      	bpl.n	80082d2 <_dtoa_r+0x492>
 80082c6:	ed90 6b00 	vldr	d6, [r0]
 80082ca:	3201      	adds	r2, #1
 80082cc:	2401      	movs	r4, #1
 80082ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082d2:	1049      	asrs	r1, r1, #1
 80082d4:	3008      	adds	r0, #8
 80082d6:	e7ed      	b.n	80082b4 <_dtoa_r+0x474>
 80082d8:	2202      	movs	r2, #2
 80082da:	e759      	b.n	8008190 <_dtoa_r+0x350>
 80082dc:	465f      	mov	r7, fp
 80082de:	4648      	mov	r0, r9
 80082e0:	e775      	b.n	80081ce <_dtoa_r+0x38e>
 80082e2:	ec42 1b17 	vmov	d7, r1, r2
 80082e6:	4a5c      	ldr	r2, [pc, #368]	; (8008458 <_dtoa_r+0x618>)
 80082e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 80082f0:	9a01      	ldr	r2, [sp, #4]
 80082f2:	1814      	adds	r4, r2, r0
 80082f4:	9a07      	ldr	r2, [sp, #28]
 80082f6:	b352      	cbz	r2, 800834e <_dtoa_r+0x50e>
 80082f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80082fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008300:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008304:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008308:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800830c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008310:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008314:	ee14 2a90 	vmov	r2, s9
 8008318:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800831c:	3230      	adds	r2, #48	; 0x30
 800831e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008322:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	f808 2b01 	strb.w	r2, [r8], #1
 800832e:	d439      	bmi.n	80083a4 <_dtoa_r+0x564>
 8008330:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008334:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833c:	d472      	bmi.n	8008424 <_dtoa_r+0x5e4>
 800833e:	45a0      	cmp	r8, r4
 8008340:	f43f af6b 	beq.w	800821a <_dtoa_r+0x3da>
 8008344:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008348:	ee26 6b03 	vmul.f64	d6, d6, d3
 800834c:	e7e0      	b.n	8008310 <_dtoa_r+0x4d0>
 800834e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008352:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008356:	4621      	mov	r1, r4
 8008358:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800835c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008360:	ee14 2a90 	vmov	r2, s9
 8008364:	3230      	adds	r2, #48	; 0x30
 8008366:	f808 2b01 	strb.w	r2, [r8], #1
 800836a:	45a0      	cmp	r8, r4
 800836c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008370:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008374:	d118      	bne.n	80083a8 <_dtoa_r+0x568>
 8008376:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800837a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800837e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008386:	dc4d      	bgt.n	8008424 <_dtoa_r+0x5e4>
 8008388:	ee35 7b47 	vsub.f64	d7, d5, d7
 800838c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	f57f af41 	bpl.w	800821a <_dtoa_r+0x3da>
 8008398:	4688      	mov	r8, r1
 800839a:	3901      	subs	r1, #1
 800839c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80083a0:	2b30      	cmp	r3, #48	; 0x30
 80083a2:	d0f9      	beq.n	8008398 <_dtoa_r+0x558>
 80083a4:	46bb      	mov	fp, r7
 80083a6:	e02a      	b.n	80083fe <_dtoa_r+0x5be>
 80083a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80083ac:	e7d6      	b.n	800835c <_dtoa_r+0x51c>
 80083ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80083b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80083be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80083c2:	ee15 3a10 	vmov	r3, s10
 80083c6:	3330      	adds	r3, #48	; 0x30
 80083c8:	f808 3b01 	strb.w	r3, [r8], #1
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	eba8 0303 	sub.w	r3, r8, r3
 80083d2:	4599      	cmp	r9, r3
 80083d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80083d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80083dc:	d133      	bne.n	8008446 <_dtoa_r+0x606>
 80083de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80083e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ea:	dc1a      	bgt.n	8008422 <_dtoa_r+0x5e2>
 80083ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80083f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f4:	d103      	bne.n	80083fe <_dtoa_r+0x5be>
 80083f6:	ee15 3a10 	vmov	r3, s10
 80083fa:	07d9      	lsls	r1, r3, #31
 80083fc:	d411      	bmi.n	8008422 <_dtoa_r+0x5e2>
 80083fe:	4629      	mov	r1, r5
 8008400:	4630      	mov	r0, r6
 8008402:	f000 fcf7 	bl	8008df4 <_Bfree>
 8008406:	2300      	movs	r3, #0
 8008408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800840a:	f888 3000 	strb.w	r3, [r8]
 800840e:	f10b 0301 	add.w	r3, fp, #1
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008416:	2b00      	cmp	r3, #0
 8008418:	f43f ad61 	beq.w	8007ede <_dtoa_r+0x9e>
 800841c:	f8c3 8000 	str.w	r8, [r3]
 8008420:	e55d      	b.n	8007ede <_dtoa_r+0x9e>
 8008422:	465f      	mov	r7, fp
 8008424:	4643      	mov	r3, r8
 8008426:	4698      	mov	r8, r3
 8008428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800842c:	2a39      	cmp	r2, #57	; 0x39
 800842e:	d106      	bne.n	800843e <_dtoa_r+0x5fe>
 8008430:	9a01      	ldr	r2, [sp, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d1f7      	bne.n	8008426 <_dtoa_r+0x5e6>
 8008436:	9901      	ldr	r1, [sp, #4]
 8008438:	2230      	movs	r2, #48	; 0x30
 800843a:	3701      	adds	r7, #1
 800843c:	700a      	strb	r2, [r1, #0]
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	3201      	adds	r2, #1
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e7ae      	b.n	80083a4 <_dtoa_r+0x564>
 8008446:	ee27 7b04 	vmul.f64	d7, d7, d4
 800844a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800844e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008452:	d1b2      	bne.n	80083ba <_dtoa_r+0x57a>
 8008454:	e7d3      	b.n	80083fe <_dtoa_r+0x5be>
 8008456:	bf00      	nop
 8008458:	0800a698 	.word	0x0800a698
 800845c:	0800a670 	.word	0x0800a670
 8008460:	9907      	ldr	r1, [sp, #28]
 8008462:	2900      	cmp	r1, #0
 8008464:	f000 80d0 	beq.w	8008608 <_dtoa_r+0x7c8>
 8008468:	9906      	ldr	r1, [sp, #24]
 800846a:	2901      	cmp	r1, #1
 800846c:	f300 80b4 	bgt.w	80085d8 <_dtoa_r+0x798>
 8008470:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008472:	2900      	cmp	r1, #0
 8008474:	f000 80ac 	beq.w	80085d0 <_dtoa_r+0x790>
 8008478:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800847c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008480:	461c      	mov	r4, r3
 8008482:	930a      	str	r3, [sp, #40]	; 0x28
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	4413      	add	r3, r2
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	2101      	movs	r1, #1
 800848e:	4413      	add	r3, r2
 8008490:	4630      	mov	r0, r6
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	f000 fd66 	bl	8008f64 <__i2b>
 8008498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849a:	4607      	mov	r7, r0
 800849c:	f1b8 0f00 	cmp.w	r8, #0
 80084a0:	dd0d      	ble.n	80084be <_dtoa_r+0x67e>
 80084a2:	9a05      	ldr	r2, [sp, #20]
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	dd0a      	ble.n	80084be <_dtoa_r+0x67e>
 80084a8:	4542      	cmp	r2, r8
 80084aa:	9904      	ldr	r1, [sp, #16]
 80084ac:	bfa8      	it	ge
 80084ae:	4642      	movge	r2, r8
 80084b0:	1a89      	subs	r1, r1, r2
 80084b2:	9104      	str	r1, [sp, #16]
 80084b4:	9905      	ldr	r1, [sp, #20]
 80084b6:	eba8 0802 	sub.w	r8, r8, r2
 80084ba:	1a8a      	subs	r2, r1, r2
 80084bc:	9205      	str	r2, [sp, #20]
 80084be:	b303      	cbz	r3, 8008502 <_dtoa_r+0x6c2>
 80084c0:	9a07      	ldr	r2, [sp, #28]
 80084c2:	2a00      	cmp	r2, #0
 80084c4:	f000 80a5 	beq.w	8008612 <_dtoa_r+0x7d2>
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	dd13      	ble.n	80084f4 <_dtoa_r+0x6b4>
 80084cc:	4639      	mov	r1, r7
 80084ce:	4622      	mov	r2, r4
 80084d0:	4630      	mov	r0, r6
 80084d2:	930d      	str	r3, [sp, #52]	; 0x34
 80084d4:	f000 fe06 	bl	80090e4 <__pow5mult>
 80084d8:	462a      	mov	r2, r5
 80084da:	4601      	mov	r1, r0
 80084dc:	4607      	mov	r7, r0
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 fd56 	bl	8008f90 <__multiply>
 80084e4:	4629      	mov	r1, r5
 80084e6:	900a      	str	r0, [sp, #40]	; 0x28
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fc83 	bl	8008df4 <_Bfree>
 80084ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f2:	4615      	mov	r5, r2
 80084f4:	1b1a      	subs	r2, r3, r4
 80084f6:	d004      	beq.n	8008502 <_dtoa_r+0x6c2>
 80084f8:	4629      	mov	r1, r5
 80084fa:	4630      	mov	r0, r6
 80084fc:	f000 fdf2 	bl	80090e4 <__pow5mult>
 8008500:	4605      	mov	r5, r0
 8008502:	2101      	movs	r1, #1
 8008504:	4630      	mov	r0, r6
 8008506:	f000 fd2d 	bl	8008f64 <__i2b>
 800850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	f340 8081 	ble.w	8008616 <_dtoa_r+0x7d6>
 8008514:	461a      	mov	r2, r3
 8008516:	4601      	mov	r1, r0
 8008518:	4630      	mov	r0, r6
 800851a:	f000 fde3 	bl	80090e4 <__pow5mult>
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	2b01      	cmp	r3, #1
 8008522:	4604      	mov	r4, r0
 8008524:	dd7a      	ble.n	800861c <_dtoa_r+0x7dc>
 8008526:	2300      	movs	r3, #0
 8008528:	930a      	str	r3, [sp, #40]	; 0x28
 800852a:	6922      	ldr	r2, [r4, #16]
 800852c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008530:	6910      	ldr	r0, [r2, #16]
 8008532:	f000 fcc7 	bl	8008ec4 <__hi0bits>
 8008536:	f1c0 0020 	rsb	r0, r0, #32
 800853a:	9b05      	ldr	r3, [sp, #20]
 800853c:	4418      	add	r0, r3
 800853e:	f010 001f 	ands.w	r0, r0, #31
 8008542:	f000 808c 	beq.w	800865e <_dtoa_r+0x81e>
 8008546:	f1c0 0220 	rsb	r2, r0, #32
 800854a:	2a04      	cmp	r2, #4
 800854c:	f340 8085 	ble.w	800865a <_dtoa_r+0x81a>
 8008550:	f1c0 001c 	rsb	r0, r0, #28
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	4403      	add	r3, r0
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	9b05      	ldr	r3, [sp, #20]
 800855c:	4403      	add	r3, r0
 800855e:	4480      	add	r8, r0
 8008560:	9305      	str	r3, [sp, #20]
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dd05      	ble.n	8008574 <_dtoa_r+0x734>
 8008568:	4629      	mov	r1, r5
 800856a:	461a      	mov	r2, r3
 800856c:	4630      	mov	r0, r6
 800856e:	f000 fe13 	bl	8009198 <__lshift>
 8008572:	4605      	mov	r5, r0
 8008574:	9b05      	ldr	r3, [sp, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd05      	ble.n	8008586 <_dtoa_r+0x746>
 800857a:	4621      	mov	r1, r4
 800857c:	461a      	mov	r2, r3
 800857e:	4630      	mov	r0, r6
 8008580:	f000 fe0a 	bl	8009198 <__lshift>
 8008584:	4604      	mov	r4, r0
 8008586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d06a      	beq.n	8008662 <_dtoa_r+0x822>
 800858c:	4621      	mov	r1, r4
 800858e:	4628      	mov	r0, r5
 8008590:	f000 fe72 	bl	8009278 <__mcmp>
 8008594:	2800      	cmp	r0, #0
 8008596:	da64      	bge.n	8008662 <_dtoa_r+0x822>
 8008598:	2300      	movs	r3, #0
 800859a:	4629      	mov	r1, r5
 800859c:	220a      	movs	r2, #10
 800859e:	4630      	mov	r0, r6
 80085a0:	f000 fc4a 	bl	8008e38 <__multadd>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085aa:	4605      	mov	r5, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8191 	beq.w	80088d4 <_dtoa_r+0xa94>
 80085b2:	4639      	mov	r1, r7
 80085b4:	2300      	movs	r3, #0
 80085b6:	220a      	movs	r2, #10
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 fc3d 	bl	8008e38 <__multadd>
 80085be:	f1ba 0f00 	cmp.w	sl, #0
 80085c2:	4607      	mov	r7, r0
 80085c4:	f300 808d 	bgt.w	80086e2 <_dtoa_r+0x8a2>
 80085c8:	9b06      	ldr	r3, [sp, #24]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	dc50      	bgt.n	8008670 <_dtoa_r+0x830>
 80085ce:	e088      	b.n	80086e2 <_dtoa_r+0x8a2>
 80085d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085d6:	e751      	b.n	800847c <_dtoa_r+0x63c>
 80085d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80085dc:	42a3      	cmp	r3, r4
 80085de:	bfbf      	itttt	lt
 80085e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80085e2:	1ae3      	sublt	r3, r4, r3
 80085e4:	18d2      	addlt	r2, r2, r3
 80085e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80085e8:	bfb6      	itet	lt
 80085ea:	4623      	movlt	r3, r4
 80085ec:	1b1c      	subge	r4, r3, r4
 80085ee:	2400      	movlt	r4, #0
 80085f0:	f1b9 0f00 	cmp.w	r9, #0
 80085f4:	bfb5      	itete	lt
 80085f6:	9a04      	ldrlt	r2, [sp, #16]
 80085f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80085fc:	eba2 0809 	sublt.w	r8, r2, r9
 8008600:	464a      	movge	r2, r9
 8008602:	bfb8      	it	lt
 8008604:	2200      	movlt	r2, #0
 8008606:	e73c      	b.n	8008482 <_dtoa_r+0x642>
 8008608:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800860c:	9f07      	ldr	r7, [sp, #28]
 800860e:	461c      	mov	r4, r3
 8008610:	e744      	b.n	800849c <_dtoa_r+0x65c>
 8008612:	461a      	mov	r2, r3
 8008614:	e770      	b.n	80084f8 <_dtoa_r+0x6b8>
 8008616:	9b06      	ldr	r3, [sp, #24]
 8008618:	2b01      	cmp	r3, #1
 800861a:	dc18      	bgt.n	800864e <_dtoa_r+0x80e>
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	b9b3      	cbnz	r3, 800864e <_dtoa_r+0x80e>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008626:	b9a2      	cbnz	r2, 8008652 <_dtoa_r+0x812>
 8008628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800862c:	0d12      	lsrs	r2, r2, #20
 800862e:	0512      	lsls	r2, r2, #20
 8008630:	b18a      	cbz	r2, 8008656 <_dtoa_r+0x816>
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	3301      	adds	r3, #1
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	9b05      	ldr	r3, [sp, #20]
 800863a:	3301      	adds	r3, #1
 800863c:	9305      	str	r3, [sp, #20]
 800863e:	2301      	movs	r3, #1
 8008640:	930a      	str	r3, [sp, #40]	; 0x28
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	f47f af70 	bne.w	800852a <_dtoa_r+0x6ea>
 800864a:	2001      	movs	r0, #1
 800864c:	e775      	b.n	800853a <_dtoa_r+0x6fa>
 800864e:	2300      	movs	r3, #0
 8008650:	e7f6      	b.n	8008640 <_dtoa_r+0x800>
 8008652:	9b02      	ldr	r3, [sp, #8]
 8008654:	e7f4      	b.n	8008640 <_dtoa_r+0x800>
 8008656:	920a      	str	r2, [sp, #40]	; 0x28
 8008658:	e7f3      	b.n	8008642 <_dtoa_r+0x802>
 800865a:	d082      	beq.n	8008562 <_dtoa_r+0x722>
 800865c:	4610      	mov	r0, r2
 800865e:	301c      	adds	r0, #28
 8008660:	e778      	b.n	8008554 <_dtoa_r+0x714>
 8008662:	f1b9 0f00 	cmp.w	r9, #0
 8008666:	dc37      	bgt.n	80086d8 <_dtoa_r+0x898>
 8008668:	9b06      	ldr	r3, [sp, #24]
 800866a:	2b02      	cmp	r3, #2
 800866c:	dd34      	ble.n	80086d8 <_dtoa_r+0x898>
 800866e:	46ca      	mov	sl, r9
 8008670:	f1ba 0f00 	cmp.w	sl, #0
 8008674:	d10d      	bne.n	8008692 <_dtoa_r+0x852>
 8008676:	4621      	mov	r1, r4
 8008678:	4653      	mov	r3, sl
 800867a:	2205      	movs	r2, #5
 800867c:	4630      	mov	r0, r6
 800867e:	f000 fbdb 	bl	8008e38 <__multadd>
 8008682:	4601      	mov	r1, r0
 8008684:	4604      	mov	r4, r0
 8008686:	4628      	mov	r0, r5
 8008688:	f000 fdf6 	bl	8009278 <__mcmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	f73f adeb 	bgt.w	8008268 <_dtoa_r+0x428>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008698:	ea6f 0b03 	mvn.w	fp, r3
 800869c:	f04f 0900 	mov.w	r9, #0
 80086a0:	4621      	mov	r1, r4
 80086a2:	4630      	mov	r0, r6
 80086a4:	f000 fba6 	bl	8008df4 <_Bfree>
 80086a8:	2f00      	cmp	r7, #0
 80086aa:	f43f aea8 	beq.w	80083fe <_dtoa_r+0x5be>
 80086ae:	f1b9 0f00 	cmp.w	r9, #0
 80086b2:	d005      	beq.n	80086c0 <_dtoa_r+0x880>
 80086b4:	45b9      	cmp	r9, r7
 80086b6:	d003      	beq.n	80086c0 <_dtoa_r+0x880>
 80086b8:	4649      	mov	r1, r9
 80086ba:	4630      	mov	r0, r6
 80086bc:	f000 fb9a 	bl	8008df4 <_Bfree>
 80086c0:	4639      	mov	r1, r7
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 fb96 	bl	8008df4 <_Bfree>
 80086c8:	e699      	b.n	80083fe <_dtoa_r+0x5be>
 80086ca:	2400      	movs	r4, #0
 80086cc:	4627      	mov	r7, r4
 80086ce:	e7e0      	b.n	8008692 <_dtoa_r+0x852>
 80086d0:	46bb      	mov	fp, r7
 80086d2:	4604      	mov	r4, r0
 80086d4:	4607      	mov	r7, r0
 80086d6:	e5c7      	b.n	8008268 <_dtoa_r+0x428>
 80086d8:	9b07      	ldr	r3, [sp, #28]
 80086da:	46ca      	mov	sl, r9
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8100 	beq.w	80088e2 <_dtoa_r+0xaa2>
 80086e2:	f1b8 0f00 	cmp.w	r8, #0
 80086e6:	dd05      	ble.n	80086f4 <_dtoa_r+0x8b4>
 80086e8:	4639      	mov	r1, r7
 80086ea:	4642      	mov	r2, r8
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 fd53 	bl	8009198 <__lshift>
 80086f2:	4607      	mov	r7, r0
 80086f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d05d      	beq.n	80087b6 <_dtoa_r+0x976>
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4630      	mov	r0, r6
 80086fe:	f000 fb39 	bl	8008d74 <_Balloc>
 8008702:	4680      	mov	r8, r0
 8008704:	b928      	cbnz	r0, 8008712 <_dtoa_r+0x8d2>
 8008706:	4b82      	ldr	r3, [pc, #520]	; (8008910 <_dtoa_r+0xad0>)
 8008708:	4602      	mov	r2, r0
 800870a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800870e:	f7ff bbaf 	b.w	8007e70 <_dtoa_r+0x30>
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	3202      	adds	r2, #2
 8008716:	0092      	lsls	r2, r2, #2
 8008718:	f107 010c 	add.w	r1, r7, #12
 800871c:	300c      	adds	r0, #12
 800871e:	f7fe fd55 	bl	80071cc <memcpy>
 8008722:	2201      	movs	r2, #1
 8008724:	4641      	mov	r1, r8
 8008726:	4630      	mov	r0, r6
 8008728:	f000 fd36 	bl	8009198 <__lshift>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	3301      	adds	r3, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	4453      	add	r3, sl
 8008736:	9308      	str	r3, [sp, #32]
 8008738:	9b02      	ldr	r3, [sp, #8]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	46b9      	mov	r9, r7
 8008740:	9307      	str	r3, [sp, #28]
 8008742:	4607      	mov	r7, r0
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	4621      	mov	r1, r4
 8008748:	3b01      	subs	r3, #1
 800874a:	4628      	mov	r0, r5
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	f7ff faeb 	bl	8007d28 <quorem>
 8008752:	4603      	mov	r3, r0
 8008754:	3330      	adds	r3, #48	; 0x30
 8008756:	9005      	str	r0, [sp, #20]
 8008758:	4649      	mov	r1, r9
 800875a:	4628      	mov	r0, r5
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	f000 fd8b 	bl	8009278 <__mcmp>
 8008762:	463a      	mov	r2, r7
 8008764:	4682      	mov	sl, r0
 8008766:	4621      	mov	r1, r4
 8008768:	4630      	mov	r0, r6
 800876a:	f000 fda1 	bl	80092b0 <__mdiff>
 800876e:	68c2      	ldr	r2, [r0, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008772:	4680      	mov	r8, r0
 8008774:	bb0a      	cbnz	r2, 80087ba <_dtoa_r+0x97a>
 8008776:	4601      	mov	r1, r0
 8008778:	4628      	mov	r0, r5
 800877a:	f000 fd7d 	bl	8009278 <__mcmp>
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	4602      	mov	r2, r0
 8008782:	4641      	mov	r1, r8
 8008784:	4630      	mov	r0, r6
 8008786:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800878a:	f000 fb33 	bl	8008df4 <_Bfree>
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008792:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008796:	ea43 0102 	orr.w	r1, r3, r2
 800879a:	9b07      	ldr	r3, [sp, #28]
 800879c:	430b      	orrs	r3, r1
 800879e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a0:	d10d      	bne.n	80087be <_dtoa_r+0x97e>
 80087a2:	2b39      	cmp	r3, #57	; 0x39
 80087a4:	d029      	beq.n	80087fa <_dtoa_r+0x9ba>
 80087a6:	f1ba 0f00 	cmp.w	sl, #0
 80087aa:	dd01      	ble.n	80087b0 <_dtoa_r+0x970>
 80087ac:	9b05      	ldr	r3, [sp, #20]
 80087ae:	3331      	adds	r3, #49	; 0x31
 80087b0:	9a02      	ldr	r2, [sp, #8]
 80087b2:	7013      	strb	r3, [r2, #0]
 80087b4:	e774      	b.n	80086a0 <_dtoa_r+0x860>
 80087b6:	4638      	mov	r0, r7
 80087b8:	e7b8      	b.n	800872c <_dtoa_r+0x8ec>
 80087ba:	2201      	movs	r2, #1
 80087bc:	e7e1      	b.n	8008782 <_dtoa_r+0x942>
 80087be:	f1ba 0f00 	cmp.w	sl, #0
 80087c2:	db06      	blt.n	80087d2 <_dtoa_r+0x992>
 80087c4:	9906      	ldr	r1, [sp, #24]
 80087c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80087ca:	9907      	ldr	r1, [sp, #28]
 80087cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80087d0:	d120      	bne.n	8008814 <_dtoa_r+0x9d4>
 80087d2:	2a00      	cmp	r2, #0
 80087d4:	ddec      	ble.n	80087b0 <_dtoa_r+0x970>
 80087d6:	4629      	mov	r1, r5
 80087d8:	2201      	movs	r2, #1
 80087da:	4630      	mov	r0, r6
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	f000 fcdb 	bl	8009198 <__lshift>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4605      	mov	r5, r0
 80087e6:	f000 fd47 	bl	8009278 <__mcmp>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	dc02      	bgt.n	80087f6 <_dtoa_r+0x9b6>
 80087f0:	d1de      	bne.n	80087b0 <_dtoa_r+0x970>
 80087f2:	07da      	lsls	r2, r3, #31
 80087f4:	d5dc      	bpl.n	80087b0 <_dtoa_r+0x970>
 80087f6:	2b39      	cmp	r3, #57	; 0x39
 80087f8:	d1d8      	bne.n	80087ac <_dtoa_r+0x96c>
 80087fa:	9a02      	ldr	r2, [sp, #8]
 80087fc:	2339      	movs	r3, #57	; 0x39
 80087fe:	7013      	strb	r3, [r2, #0]
 8008800:	4643      	mov	r3, r8
 8008802:	4698      	mov	r8, r3
 8008804:	3b01      	subs	r3, #1
 8008806:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800880a:	2a39      	cmp	r2, #57	; 0x39
 800880c:	d051      	beq.n	80088b2 <_dtoa_r+0xa72>
 800880e:	3201      	adds	r2, #1
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	e745      	b.n	80086a0 <_dtoa_r+0x860>
 8008814:	2a00      	cmp	r2, #0
 8008816:	dd03      	ble.n	8008820 <_dtoa_r+0x9e0>
 8008818:	2b39      	cmp	r3, #57	; 0x39
 800881a:	d0ee      	beq.n	80087fa <_dtoa_r+0x9ba>
 800881c:	3301      	adds	r3, #1
 800881e:	e7c7      	b.n	80087b0 <_dtoa_r+0x970>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	9908      	ldr	r1, [sp, #32]
 8008824:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008828:	428a      	cmp	r2, r1
 800882a:	d02b      	beq.n	8008884 <_dtoa_r+0xa44>
 800882c:	4629      	mov	r1, r5
 800882e:	2300      	movs	r3, #0
 8008830:	220a      	movs	r2, #10
 8008832:	4630      	mov	r0, r6
 8008834:	f000 fb00 	bl	8008e38 <__multadd>
 8008838:	45b9      	cmp	r9, r7
 800883a:	4605      	mov	r5, r0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	f04f 020a 	mov.w	r2, #10
 8008844:	4649      	mov	r1, r9
 8008846:	4630      	mov	r0, r6
 8008848:	d107      	bne.n	800885a <_dtoa_r+0xa1a>
 800884a:	f000 faf5 	bl	8008e38 <__multadd>
 800884e:	4681      	mov	r9, r0
 8008850:	4607      	mov	r7, r0
 8008852:	9b04      	ldr	r3, [sp, #16]
 8008854:	3301      	adds	r3, #1
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	e774      	b.n	8008744 <_dtoa_r+0x904>
 800885a:	f000 faed 	bl	8008e38 <__multadd>
 800885e:	4639      	mov	r1, r7
 8008860:	4681      	mov	r9, r0
 8008862:	2300      	movs	r3, #0
 8008864:	220a      	movs	r2, #10
 8008866:	4630      	mov	r0, r6
 8008868:	f000 fae6 	bl	8008e38 <__multadd>
 800886c:	4607      	mov	r7, r0
 800886e:	e7f0      	b.n	8008852 <_dtoa_r+0xa12>
 8008870:	f1ba 0f00 	cmp.w	sl, #0
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	bfcc      	ite	gt
 8008878:	46d0      	movgt	r8, sl
 800887a:	f04f 0801 	movle.w	r8, #1
 800887e:	4490      	add	r8, r2
 8008880:	f04f 0900 	mov.w	r9, #0
 8008884:	4629      	mov	r1, r5
 8008886:	2201      	movs	r2, #1
 8008888:	4630      	mov	r0, r6
 800888a:	9302      	str	r3, [sp, #8]
 800888c:	f000 fc84 	bl	8009198 <__lshift>
 8008890:	4621      	mov	r1, r4
 8008892:	4605      	mov	r5, r0
 8008894:	f000 fcf0 	bl	8009278 <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	dcb1      	bgt.n	8008800 <_dtoa_r+0x9c0>
 800889c:	d102      	bne.n	80088a4 <_dtoa_r+0xa64>
 800889e:	9b02      	ldr	r3, [sp, #8]
 80088a0:	07db      	lsls	r3, r3, #31
 80088a2:	d4ad      	bmi.n	8008800 <_dtoa_r+0x9c0>
 80088a4:	4643      	mov	r3, r8
 80088a6:	4698      	mov	r8, r3
 80088a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ac:	2a30      	cmp	r2, #48	; 0x30
 80088ae:	d0fa      	beq.n	80088a6 <_dtoa_r+0xa66>
 80088b0:	e6f6      	b.n	80086a0 <_dtoa_r+0x860>
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d1a4      	bne.n	8008802 <_dtoa_r+0x9c2>
 80088b8:	f10b 0b01 	add.w	fp, fp, #1
 80088bc:	2331      	movs	r3, #49	; 0x31
 80088be:	e778      	b.n	80087b2 <_dtoa_r+0x972>
 80088c0:	4b14      	ldr	r3, [pc, #80]	; (8008914 <_dtoa_r+0xad4>)
 80088c2:	f7ff bb27 	b.w	8007f14 <_dtoa_r+0xd4>
 80088c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f47f ab03 	bne.w	8007ed4 <_dtoa_r+0x94>
 80088ce:	4b12      	ldr	r3, [pc, #72]	; (8008918 <_dtoa_r+0xad8>)
 80088d0:	f7ff bb20 	b.w	8007f14 <_dtoa_r+0xd4>
 80088d4:	f1ba 0f00 	cmp.w	sl, #0
 80088d8:	dc03      	bgt.n	80088e2 <_dtoa_r+0xaa2>
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	f73f aec7 	bgt.w	8008670 <_dtoa_r+0x830>
 80088e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f7ff fa1d 	bl	8007d28 <quorem>
 80088ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088f2:	f808 3b01 	strb.w	r3, [r8], #1
 80088f6:	9a01      	ldr	r2, [sp, #4]
 80088f8:	eba8 0202 	sub.w	r2, r8, r2
 80088fc:	4592      	cmp	sl, r2
 80088fe:	ddb7      	ble.n	8008870 <_dtoa_r+0xa30>
 8008900:	4629      	mov	r1, r5
 8008902:	2300      	movs	r3, #0
 8008904:	220a      	movs	r2, #10
 8008906:	4630      	mov	r0, r6
 8008908:	f000 fa96 	bl	8008e38 <__multadd>
 800890c:	4605      	mov	r5, r0
 800890e:	e7ea      	b.n	80088e6 <_dtoa_r+0xaa6>
 8008910:	0800a5a3 	.word	0x0800a5a3
 8008914:	0800a500 	.word	0x0800a500
 8008918:	0800a524 	.word	0x0800a524

0800891c <__sflush_r>:
 800891c:	898a      	ldrh	r2, [r1, #12]
 800891e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008922:	4605      	mov	r5, r0
 8008924:	0710      	lsls	r0, r2, #28
 8008926:	460c      	mov	r4, r1
 8008928:	d458      	bmi.n	80089dc <__sflush_r+0xc0>
 800892a:	684b      	ldr	r3, [r1, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	dc05      	bgt.n	800893c <__sflush_r+0x20>
 8008930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	dc02      	bgt.n	800893c <__sflush_r+0x20>
 8008936:	2000      	movs	r0, #0
 8008938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800893e:	2e00      	cmp	r6, #0
 8008940:	d0f9      	beq.n	8008936 <__sflush_r+0x1a>
 8008942:	2300      	movs	r3, #0
 8008944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008948:	682f      	ldr	r7, [r5, #0]
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	d032      	beq.n	80089b4 <__sflush_r+0x98>
 800894e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	075a      	lsls	r2, r3, #29
 8008954:	d505      	bpl.n	8008962 <__sflush_r+0x46>
 8008956:	6863      	ldr	r3, [r4, #4]
 8008958:	1ac0      	subs	r0, r0, r3
 800895a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800895c:	b10b      	cbz	r3, 8008962 <__sflush_r+0x46>
 800895e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008960:	1ac0      	subs	r0, r0, r3
 8008962:	2300      	movs	r3, #0
 8008964:	4602      	mov	r2, r0
 8008966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008968:	6a21      	ldr	r1, [r4, #32]
 800896a:	4628      	mov	r0, r5
 800896c:	47b0      	blx	r6
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	d106      	bne.n	8008982 <__sflush_r+0x66>
 8008974:	6829      	ldr	r1, [r5, #0]
 8008976:	291d      	cmp	r1, #29
 8008978:	d82c      	bhi.n	80089d4 <__sflush_r+0xb8>
 800897a:	4a2a      	ldr	r2, [pc, #168]	; (8008a24 <__sflush_r+0x108>)
 800897c:	40ca      	lsrs	r2, r1
 800897e:	07d6      	lsls	r6, r2, #31
 8008980:	d528      	bpl.n	80089d4 <__sflush_r+0xb8>
 8008982:	2200      	movs	r2, #0
 8008984:	6062      	str	r2, [r4, #4]
 8008986:	04d9      	lsls	r1, r3, #19
 8008988:	6922      	ldr	r2, [r4, #16]
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	d504      	bpl.n	8008998 <__sflush_r+0x7c>
 800898e:	1c42      	adds	r2, r0, #1
 8008990:	d101      	bne.n	8008996 <__sflush_r+0x7a>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	b903      	cbnz	r3, 8008998 <__sflush_r+0x7c>
 8008996:	6560      	str	r0, [r4, #84]	; 0x54
 8008998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800899a:	602f      	str	r7, [r5, #0]
 800899c:	2900      	cmp	r1, #0
 800899e:	d0ca      	beq.n	8008936 <__sflush_r+0x1a>
 80089a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a4:	4299      	cmp	r1, r3
 80089a6:	d002      	beq.n	80089ae <__sflush_r+0x92>
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 fd7d 	bl	80094a8 <_free_r>
 80089ae:	2000      	movs	r0, #0
 80089b0:	6360      	str	r0, [r4, #52]	; 0x34
 80089b2:	e7c1      	b.n	8008938 <__sflush_r+0x1c>
 80089b4:	6a21      	ldr	r1, [r4, #32]
 80089b6:	2301      	movs	r3, #1
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b0      	blx	r6
 80089bc:	1c41      	adds	r1, r0, #1
 80089be:	d1c7      	bne.n	8008950 <__sflush_r+0x34>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0c4      	beq.n	8008950 <__sflush_r+0x34>
 80089c6:	2b1d      	cmp	r3, #29
 80089c8:	d001      	beq.n	80089ce <__sflush_r+0xb2>
 80089ca:	2b16      	cmp	r3, #22
 80089cc:	d101      	bne.n	80089d2 <__sflush_r+0xb6>
 80089ce:	602f      	str	r7, [r5, #0]
 80089d0:	e7b1      	b.n	8008936 <__sflush_r+0x1a>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	e7ad      	b.n	8008938 <__sflush_r+0x1c>
 80089dc:	690f      	ldr	r7, [r1, #16]
 80089de:	2f00      	cmp	r7, #0
 80089e0:	d0a9      	beq.n	8008936 <__sflush_r+0x1a>
 80089e2:	0793      	lsls	r3, r2, #30
 80089e4:	680e      	ldr	r6, [r1, #0]
 80089e6:	bf08      	it	eq
 80089e8:	694b      	ldreq	r3, [r1, #20]
 80089ea:	600f      	str	r7, [r1, #0]
 80089ec:	bf18      	it	ne
 80089ee:	2300      	movne	r3, #0
 80089f0:	eba6 0807 	sub.w	r8, r6, r7
 80089f4:	608b      	str	r3, [r1, #8]
 80089f6:	f1b8 0f00 	cmp.w	r8, #0
 80089fa:	dd9c      	ble.n	8008936 <__sflush_r+0x1a>
 80089fc:	6a21      	ldr	r1, [r4, #32]
 80089fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a00:	4643      	mov	r3, r8
 8008a02:	463a      	mov	r2, r7
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b0      	blx	r6
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dc06      	bgt.n	8008a1a <__sflush_r+0xfe>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e78e      	b.n	8008938 <__sflush_r+0x1c>
 8008a1a:	4407      	add	r7, r0
 8008a1c:	eba8 0800 	sub.w	r8, r8, r0
 8008a20:	e7e9      	b.n	80089f6 <__sflush_r+0xda>
 8008a22:	bf00      	nop
 8008a24:	20400001 	.word	0x20400001

08008a28 <_fflush_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	690b      	ldr	r3, [r1, #16]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	b913      	cbnz	r3, 8008a38 <_fflush_r+0x10>
 8008a32:	2500      	movs	r5, #0
 8008a34:	4628      	mov	r0, r5
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	b118      	cbz	r0, 8008a42 <_fflush_r+0x1a>
 8008a3a:	6983      	ldr	r3, [r0, #24]
 8008a3c:	b90b      	cbnz	r3, 8008a42 <_fflush_r+0x1a>
 8008a3e:	f000 f887 	bl	8008b50 <__sinit>
 8008a42:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <_fflush_r+0x6c>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d11b      	bne.n	8008a80 <_fflush_r+0x58>
 8008a48:	686c      	ldr	r4, [r5, #4]
 8008a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0ef      	beq.n	8008a32 <_fflush_r+0xa>
 8008a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a54:	07d0      	lsls	r0, r2, #31
 8008a56:	d404      	bmi.n	8008a62 <_fflush_r+0x3a>
 8008a58:	0599      	lsls	r1, r3, #22
 8008a5a:	d402      	bmi.n	8008a62 <_fflush_r+0x3a>
 8008a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5e:	f000 f91a 	bl	8008c96 <__retarget_lock_acquire_recursive>
 8008a62:	4628      	mov	r0, r5
 8008a64:	4621      	mov	r1, r4
 8008a66:	f7ff ff59 	bl	800891c <__sflush_r>
 8008a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a6c:	07da      	lsls	r2, r3, #31
 8008a6e:	4605      	mov	r5, r0
 8008a70:	d4e0      	bmi.n	8008a34 <_fflush_r+0xc>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	059b      	lsls	r3, r3, #22
 8008a76:	d4dd      	bmi.n	8008a34 <_fflush_r+0xc>
 8008a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a7a:	f000 f90d 	bl	8008c98 <__retarget_lock_release_recursive>
 8008a7e:	e7d9      	b.n	8008a34 <_fflush_r+0xc>
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <_fflush_r+0x70>)
 8008a82:	429c      	cmp	r4, r3
 8008a84:	d101      	bne.n	8008a8a <_fflush_r+0x62>
 8008a86:	68ac      	ldr	r4, [r5, #8]
 8008a88:	e7df      	b.n	8008a4a <_fflush_r+0x22>
 8008a8a:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <_fflush_r+0x74>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	bf08      	it	eq
 8008a90:	68ec      	ldreq	r4, [r5, #12]
 8008a92:	e7da      	b.n	8008a4a <_fflush_r+0x22>
 8008a94:	0800a5d4 	.word	0x0800a5d4
 8008a98:	0800a5f4 	.word	0x0800a5f4
 8008a9c:	0800a5b4 	.word	0x0800a5b4

08008aa0 <std>:
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	b510      	push	{r4, lr}
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8008aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aae:	6083      	str	r3, [r0, #8]
 8008ab0:	8181      	strh	r1, [r0, #12]
 8008ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ab4:	81c2      	strh	r2, [r0, #14]
 8008ab6:	6183      	str	r3, [r0, #24]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	2208      	movs	r2, #8
 8008abc:	305c      	adds	r0, #92	; 0x5c
 8008abe:	f7fe fb93 	bl	80071e8 <memset>
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <std+0x38>)
 8008ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <std+0x3c>)
 8008ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <std+0x40>)
 8008acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <std+0x44>)
 8008ad0:	6224      	str	r4, [r4, #32]
 8008ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	08009941 	.word	0x08009941
 8008adc:	08009963 	.word	0x08009963
 8008ae0:	0800999b 	.word	0x0800999b
 8008ae4:	080099bf 	.word	0x080099bf

08008ae8 <_cleanup_r>:
 8008ae8:	4901      	ldr	r1, [pc, #4]	; (8008af0 <_cleanup_r+0x8>)
 8008aea:	f000 b8af 	b.w	8008c4c <_fwalk_reent>
 8008aee:	bf00      	nop
 8008af0:	08008a29 	.word	0x08008a29

08008af4 <__sfmoreglue>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	2268      	movs	r2, #104	; 0x68
 8008af8:	1e4d      	subs	r5, r1, #1
 8008afa:	4355      	muls	r5, r2
 8008afc:	460e      	mov	r6, r1
 8008afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b02:	f000 fd3d 	bl	8009580 <_malloc_r>
 8008b06:	4604      	mov	r4, r0
 8008b08:	b140      	cbz	r0, 8008b1c <__sfmoreglue+0x28>
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8008b10:	300c      	adds	r0, #12
 8008b12:	60a0      	str	r0, [r4, #8]
 8008b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b18:	f7fe fb66 	bl	80071e8 <memset>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}

08008b20 <__sfp_lock_acquire>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__sfp_lock_acquire+0x8>)
 8008b22:	f000 b8b8 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8008b26:	bf00      	nop
 8008b28:	24000489 	.word	0x24000489

08008b2c <__sfp_lock_release>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__sfp_lock_release+0x8>)
 8008b2e:	f000 b8b3 	b.w	8008c98 <__retarget_lock_release_recursive>
 8008b32:	bf00      	nop
 8008b34:	24000489 	.word	0x24000489

08008b38 <__sinit_lock_acquire>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__sinit_lock_acquire+0x8>)
 8008b3a:	f000 b8ac 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8008b3e:	bf00      	nop
 8008b40:	2400048a 	.word	0x2400048a

08008b44 <__sinit_lock_release>:
 8008b44:	4801      	ldr	r0, [pc, #4]	; (8008b4c <__sinit_lock_release+0x8>)
 8008b46:	f000 b8a7 	b.w	8008c98 <__retarget_lock_release_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	2400048a 	.word	0x2400048a

08008b50 <__sinit>:
 8008b50:	b510      	push	{r4, lr}
 8008b52:	4604      	mov	r4, r0
 8008b54:	f7ff fff0 	bl	8008b38 <__sinit_lock_acquire>
 8008b58:	69a3      	ldr	r3, [r4, #24]
 8008b5a:	b11b      	cbz	r3, 8008b64 <__sinit+0x14>
 8008b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b60:	f7ff bff0 	b.w	8008b44 <__sinit_lock_release>
 8008b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b68:	6523      	str	r3, [r4, #80]	; 0x50
 8008b6a:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <__sinit+0x68>)
 8008b6c:	4a13      	ldr	r2, [pc, #76]	; (8008bbc <__sinit+0x6c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	bf04      	itt	eq
 8008b76:	2301      	moveq	r3, #1
 8008b78:	61a3      	streq	r3, [r4, #24]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f820 	bl	8008bc0 <__sfp>
 8008b80:	6060      	str	r0, [r4, #4]
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 f81c 	bl	8008bc0 <__sfp>
 8008b88:	60a0      	str	r0, [r4, #8]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 f818 	bl	8008bc0 <__sfp>
 8008b90:	2200      	movs	r2, #0
 8008b92:	60e0      	str	r0, [r4, #12]
 8008b94:	2104      	movs	r1, #4
 8008b96:	6860      	ldr	r0, [r4, #4]
 8008b98:	f7ff ff82 	bl	8008aa0 <std>
 8008b9c:	68a0      	ldr	r0, [r4, #8]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	2109      	movs	r1, #9
 8008ba2:	f7ff ff7d 	bl	8008aa0 <std>
 8008ba6:	68e0      	ldr	r0, [r4, #12]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	2112      	movs	r1, #18
 8008bac:	f7ff ff78 	bl	8008aa0 <std>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	61a3      	str	r3, [r4, #24]
 8008bb4:	e7d2      	b.n	8008b5c <__sinit+0xc>
 8008bb6:	bf00      	nop
 8008bb8:	0800a4ec 	.word	0x0800a4ec
 8008bbc:	08008ae9 	.word	0x08008ae9

08008bc0 <__sfp>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	f7ff ffac 	bl	8008b20 <__sfp_lock_acquire>
 8008bc8:	4b1e      	ldr	r3, [pc, #120]	; (8008c44 <__sfp+0x84>)
 8008bca:	681e      	ldr	r6, [r3, #0]
 8008bcc:	69b3      	ldr	r3, [r6, #24]
 8008bce:	b913      	cbnz	r3, 8008bd6 <__sfp+0x16>
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff ffbd 	bl	8008b50 <__sinit>
 8008bd6:	3648      	adds	r6, #72	; 0x48
 8008bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	d503      	bpl.n	8008be8 <__sfp+0x28>
 8008be0:	6833      	ldr	r3, [r6, #0]
 8008be2:	b30b      	cbz	r3, 8008c28 <__sfp+0x68>
 8008be4:	6836      	ldr	r6, [r6, #0]
 8008be6:	e7f7      	b.n	8008bd8 <__sfp+0x18>
 8008be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bec:	b9d5      	cbnz	r5, 8008c24 <__sfp+0x64>
 8008bee:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <__sfp+0x88>)
 8008bf0:	60e3      	str	r3, [r4, #12]
 8008bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8008bf8:	f000 f84c 	bl	8008c94 <__retarget_lock_init_recursive>
 8008bfc:	f7ff ff96 	bl	8008b2c <__sfp_lock_release>
 8008c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c08:	6025      	str	r5, [r4, #0]
 8008c0a:	61a5      	str	r5, [r4, #24]
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	4629      	mov	r1, r5
 8008c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c14:	f7fe fae8 	bl	80071e8 <memset>
 8008c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c20:	4620      	mov	r0, r4
 8008c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c24:	3468      	adds	r4, #104	; 0x68
 8008c26:	e7d9      	b.n	8008bdc <__sfp+0x1c>
 8008c28:	2104      	movs	r1, #4
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7ff ff62 	bl	8008af4 <__sfmoreglue>
 8008c30:	4604      	mov	r4, r0
 8008c32:	6030      	str	r0, [r6, #0]
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d1d5      	bne.n	8008be4 <__sfp+0x24>
 8008c38:	f7ff ff78 	bl	8008b2c <__sfp_lock_release>
 8008c3c:	230c      	movs	r3, #12
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	e7ee      	b.n	8008c20 <__sfp+0x60>
 8008c42:	bf00      	nop
 8008c44:	0800a4ec 	.word	0x0800a4ec
 8008c48:	ffff0001 	.word	0xffff0001

08008c4c <_fwalk_reent>:
 8008c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c50:	4606      	mov	r6, r0
 8008c52:	4688      	mov	r8, r1
 8008c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c58:	2700      	movs	r7, #0
 8008c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c62:	d505      	bpl.n	8008c70 <_fwalk_reent+0x24>
 8008c64:	6824      	ldr	r4, [r4, #0]
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	d1f7      	bne.n	8008c5a <_fwalk_reent+0xe>
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c70:	89ab      	ldrh	r3, [r5, #12]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d907      	bls.n	8008c86 <_fwalk_reent+0x3a>
 8008c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	d003      	beq.n	8008c86 <_fwalk_reent+0x3a>
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4630      	mov	r0, r6
 8008c82:	47c0      	blx	r8
 8008c84:	4307      	orrs	r7, r0
 8008c86:	3568      	adds	r5, #104	; 0x68
 8008c88:	e7e9      	b.n	8008c5e <_fwalk_reent+0x12>
	...

08008c8c <_localeconv_r>:
 8008c8c:	4800      	ldr	r0, [pc, #0]	; (8008c90 <_localeconv_r+0x4>)
 8008c8e:	4770      	bx	lr
 8008c90:	2400016c 	.word	0x2400016c

08008c94 <__retarget_lock_init_recursive>:
 8008c94:	4770      	bx	lr

08008c96 <__retarget_lock_acquire_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <__retarget_lock_release_recursive>:
 8008c98:	4770      	bx	lr

08008c9a <__swhatbuf_r>:
 8008c9a:	b570      	push	{r4, r5, r6, lr}
 8008c9c:	460e      	mov	r6, r1
 8008c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	b096      	sub	sp, #88	; 0x58
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	461d      	mov	r5, r3
 8008caa:	da08      	bge.n	8008cbe <__swhatbuf_r+0x24>
 8008cac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	602a      	str	r2, [r5, #0]
 8008cb4:	061a      	lsls	r2, r3, #24
 8008cb6:	d410      	bmi.n	8008cda <__swhatbuf_r+0x40>
 8008cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cbc:	e00e      	b.n	8008cdc <__swhatbuf_r+0x42>
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	f000 fed4 	bl	8009a6c <_fstat_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	dbf1      	blt.n	8008cac <__swhatbuf_r+0x12>
 8008cc8:	9a01      	ldr	r2, [sp, #4]
 8008cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cd2:	425a      	negs	r2, r3
 8008cd4:	415a      	adcs	r2, r3
 8008cd6:	602a      	str	r2, [r5, #0]
 8008cd8:	e7ee      	b.n	8008cb8 <__swhatbuf_r+0x1e>
 8008cda:	2340      	movs	r3, #64	; 0x40
 8008cdc:	2000      	movs	r0, #0
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	b016      	add	sp, #88	; 0x58
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}

08008ce4 <__smakebuf_r>:
 8008ce4:	898b      	ldrh	r3, [r1, #12]
 8008ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ce8:	079d      	lsls	r5, r3, #30
 8008cea:	4606      	mov	r6, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	d507      	bpl.n	8008d00 <__smakebuf_r+0x1c>
 8008cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	6163      	str	r3, [r4, #20]
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	ab01      	add	r3, sp, #4
 8008d02:	466a      	mov	r2, sp
 8008d04:	f7ff ffc9 	bl	8008c9a <__swhatbuf_r>
 8008d08:	9900      	ldr	r1, [sp, #0]
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f000 fc37 	bl	8009580 <_malloc_r>
 8008d12:	b948      	cbnz	r0, 8008d28 <__smakebuf_r+0x44>
 8008d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d18:	059a      	lsls	r2, r3, #22
 8008d1a:	d4ef      	bmi.n	8008cfc <__smakebuf_r+0x18>
 8008d1c:	f023 0303 	bic.w	r3, r3, #3
 8008d20:	f043 0302 	orr.w	r3, r3, #2
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	e7e3      	b.n	8008cf0 <__smakebuf_r+0xc>
 8008d28:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <__smakebuf_r+0x7c>)
 8008d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	6020      	str	r0, [r4, #0]
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	6163      	str	r3, [r4, #20]
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	6120      	str	r0, [r4, #16]
 8008d3e:	b15b      	cbz	r3, 8008d58 <__smakebuf_r+0x74>
 8008d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 fea3 	bl	8009a90 <_isatty_r>
 8008d4a:	b128      	cbz	r0, 8008d58 <__smakebuf_r+0x74>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f023 0303 	bic.w	r3, r3, #3
 8008d52:	f043 0301 	orr.w	r3, r3, #1
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	89a0      	ldrh	r0, [r4, #12]
 8008d5a:	4305      	orrs	r5, r0
 8008d5c:	81a5      	strh	r5, [r4, #12]
 8008d5e:	e7cd      	b.n	8008cfc <__smakebuf_r+0x18>
 8008d60:	08008ae9 	.word	0x08008ae9

08008d64 <malloc>:
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <malloc+0xc>)
 8008d66:	4601      	mov	r1, r0
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	f000 bc09 	b.w	8009580 <_malloc_r>
 8008d6e:	bf00      	nop
 8008d70:	24000018 	.word	0x24000018

08008d74 <_Balloc>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	b976      	cbnz	r6, 8008d9c <_Balloc+0x28>
 8008d7e:	2010      	movs	r0, #16
 8008d80:	f7ff fff0 	bl	8008d64 <malloc>
 8008d84:	4602      	mov	r2, r0
 8008d86:	6260      	str	r0, [r4, #36]	; 0x24
 8008d88:	b920      	cbnz	r0, 8008d94 <_Balloc+0x20>
 8008d8a:	4b18      	ldr	r3, [pc, #96]	; (8008dec <_Balloc+0x78>)
 8008d8c:	4818      	ldr	r0, [pc, #96]	; (8008df0 <_Balloc+0x7c>)
 8008d8e:	2166      	movs	r1, #102	; 0x66
 8008d90:	f000 fe2c 	bl	80099ec <__assert_func>
 8008d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d98:	6006      	str	r6, [r0, #0]
 8008d9a:	60c6      	str	r6, [r0, #12]
 8008d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d9e:	68f3      	ldr	r3, [r6, #12]
 8008da0:	b183      	cbz	r3, 8008dc4 <_Balloc+0x50>
 8008da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008daa:	b9b8      	cbnz	r0, 8008ddc <_Balloc+0x68>
 8008dac:	2101      	movs	r1, #1
 8008dae:	fa01 f605 	lsl.w	r6, r1, r5
 8008db2:	1d72      	adds	r2, r6, #5
 8008db4:	0092      	lsls	r2, r2, #2
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 fb60 	bl	800947c <_calloc_r>
 8008dbc:	b160      	cbz	r0, 8008dd8 <_Balloc+0x64>
 8008dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dc2:	e00e      	b.n	8008de2 <_Balloc+0x6e>
 8008dc4:	2221      	movs	r2, #33	; 0x21
 8008dc6:	2104      	movs	r1, #4
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fb57 	bl	800947c <_calloc_r>
 8008dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd0:	60f0      	str	r0, [r6, #12]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e4      	bne.n	8008da2 <_Balloc+0x2e>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	6802      	ldr	r2, [r0, #0]
 8008dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008de2:	2300      	movs	r3, #0
 8008de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008de8:	e7f7      	b.n	8008dda <_Balloc+0x66>
 8008dea:	bf00      	nop
 8008dec:	0800a531 	.word	0x0800a531
 8008df0:	0800a614 	.word	0x0800a614

08008df4 <_Bfree>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008df8:	4605      	mov	r5, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	b976      	cbnz	r6, 8008e1c <_Bfree+0x28>
 8008dfe:	2010      	movs	r0, #16
 8008e00:	f7ff ffb0 	bl	8008d64 <malloc>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6268      	str	r0, [r5, #36]	; 0x24
 8008e08:	b920      	cbnz	r0, 8008e14 <_Bfree+0x20>
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <_Bfree+0x3c>)
 8008e0c:	4809      	ldr	r0, [pc, #36]	; (8008e34 <_Bfree+0x40>)
 8008e0e:	218a      	movs	r1, #138	; 0x8a
 8008e10:	f000 fdec 	bl	80099ec <__assert_func>
 8008e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e18:	6006      	str	r6, [r0, #0]
 8008e1a:	60c6      	str	r6, [r0, #12]
 8008e1c:	b13c      	cbz	r4, 8008e2e <_Bfree+0x3a>
 8008e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e20:	6862      	ldr	r2, [r4, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e28:	6021      	str	r1, [r4, #0]
 8008e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	0800a531 	.word	0x0800a531
 8008e34:	0800a614 	.word	0x0800a614

08008e38 <__multadd>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	690d      	ldr	r5, [r1, #16]
 8008e3e:	4607      	mov	r7, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	461e      	mov	r6, r3
 8008e44:	f101 0c14 	add.w	ip, r1, #20
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e4e:	b299      	uxth	r1, r3
 8008e50:	fb02 6101 	mla	r1, r2, r1, r6
 8008e54:	0c1e      	lsrs	r6, r3, #16
 8008e56:	0c0b      	lsrs	r3, r1, #16
 8008e58:	fb02 3306 	mla	r3, r2, r6, r3
 8008e5c:	b289      	uxth	r1, r1
 8008e5e:	3001      	adds	r0, #1
 8008e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e64:	4285      	cmp	r5, r0
 8008e66:	f84c 1b04 	str.w	r1, [ip], #4
 8008e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e6e:	dcec      	bgt.n	8008e4a <__multadd+0x12>
 8008e70:	b30e      	cbz	r6, 8008eb6 <__multadd+0x7e>
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	42ab      	cmp	r3, r5
 8008e76:	dc19      	bgt.n	8008eac <__multadd+0x74>
 8008e78:	6861      	ldr	r1, [r4, #4]
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	3101      	adds	r1, #1
 8008e7e:	f7ff ff79 	bl	8008d74 <_Balloc>
 8008e82:	4680      	mov	r8, r0
 8008e84:	b928      	cbnz	r0, 8008e92 <__multadd+0x5a>
 8008e86:	4602      	mov	r2, r0
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <__multadd+0x84>)
 8008e8a:	480d      	ldr	r0, [pc, #52]	; (8008ec0 <__multadd+0x88>)
 8008e8c:	21b5      	movs	r1, #181	; 0xb5
 8008e8e:	f000 fdad 	bl	80099ec <__assert_func>
 8008e92:	6922      	ldr	r2, [r4, #16]
 8008e94:	3202      	adds	r2, #2
 8008e96:	f104 010c 	add.w	r1, r4, #12
 8008e9a:	0092      	lsls	r2, r2, #2
 8008e9c:	300c      	adds	r0, #12
 8008e9e:	f7fe f995 	bl	80071cc <memcpy>
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f7ff ffa5 	bl	8008df4 <_Bfree>
 8008eaa:	4644      	mov	r4, r8
 8008eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	615e      	str	r6, [r3, #20]
 8008eb4:	6125      	str	r5, [r4, #16]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ebc:	0800a5a3 	.word	0x0800a5a3
 8008ec0:	0800a614 	.word	0x0800a614

08008ec4 <__hi0bits>:
 8008ec4:	0c03      	lsrs	r3, r0, #16
 8008ec6:	041b      	lsls	r3, r3, #16
 8008ec8:	b9d3      	cbnz	r3, 8008f00 <__hi0bits+0x3c>
 8008eca:	0400      	lsls	r0, r0, #16
 8008ecc:	2310      	movs	r3, #16
 8008ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ed2:	bf04      	itt	eq
 8008ed4:	0200      	lsleq	r0, r0, #8
 8008ed6:	3308      	addeq	r3, #8
 8008ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008edc:	bf04      	itt	eq
 8008ede:	0100      	lsleq	r0, r0, #4
 8008ee0:	3304      	addeq	r3, #4
 8008ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ee6:	bf04      	itt	eq
 8008ee8:	0080      	lsleq	r0, r0, #2
 8008eea:	3302      	addeq	r3, #2
 8008eec:	2800      	cmp	r0, #0
 8008eee:	db05      	blt.n	8008efc <__hi0bits+0x38>
 8008ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ef4:	f103 0301 	add.w	r3, r3, #1
 8008ef8:	bf08      	it	eq
 8008efa:	2320      	moveq	r3, #32
 8008efc:	4618      	mov	r0, r3
 8008efe:	4770      	bx	lr
 8008f00:	2300      	movs	r3, #0
 8008f02:	e7e4      	b.n	8008ece <__hi0bits+0xa>

08008f04 <__lo0bits>:
 8008f04:	6803      	ldr	r3, [r0, #0]
 8008f06:	f013 0207 	ands.w	r2, r3, #7
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	d00b      	beq.n	8008f26 <__lo0bits+0x22>
 8008f0e:	07da      	lsls	r2, r3, #31
 8008f10:	d423      	bmi.n	8008f5a <__lo0bits+0x56>
 8008f12:	0798      	lsls	r0, r3, #30
 8008f14:	bf49      	itett	mi
 8008f16:	085b      	lsrmi	r3, r3, #1
 8008f18:	089b      	lsrpl	r3, r3, #2
 8008f1a:	2001      	movmi	r0, #1
 8008f1c:	600b      	strmi	r3, [r1, #0]
 8008f1e:	bf5c      	itt	pl
 8008f20:	600b      	strpl	r3, [r1, #0]
 8008f22:	2002      	movpl	r0, #2
 8008f24:	4770      	bx	lr
 8008f26:	b298      	uxth	r0, r3
 8008f28:	b9a8      	cbnz	r0, 8008f56 <__lo0bits+0x52>
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	2010      	movs	r0, #16
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	b90a      	cbnz	r2, 8008f36 <__lo0bits+0x32>
 8008f32:	3008      	adds	r0, #8
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	071a      	lsls	r2, r3, #28
 8008f38:	bf04      	itt	eq
 8008f3a:	091b      	lsreq	r3, r3, #4
 8008f3c:	3004      	addeq	r0, #4
 8008f3e:	079a      	lsls	r2, r3, #30
 8008f40:	bf04      	itt	eq
 8008f42:	089b      	lsreq	r3, r3, #2
 8008f44:	3002      	addeq	r0, #2
 8008f46:	07da      	lsls	r2, r3, #31
 8008f48:	d403      	bmi.n	8008f52 <__lo0bits+0x4e>
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	f100 0001 	add.w	r0, r0, #1
 8008f50:	d005      	beq.n	8008f5e <__lo0bits+0x5a>
 8008f52:	600b      	str	r3, [r1, #0]
 8008f54:	4770      	bx	lr
 8008f56:	4610      	mov	r0, r2
 8008f58:	e7e9      	b.n	8008f2e <__lo0bits+0x2a>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	4770      	bx	lr
 8008f5e:	2020      	movs	r0, #32
 8008f60:	4770      	bx	lr
	...

08008f64 <__i2b>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	460c      	mov	r4, r1
 8008f68:	2101      	movs	r1, #1
 8008f6a:	f7ff ff03 	bl	8008d74 <_Balloc>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	b928      	cbnz	r0, 8008f7e <__i2b+0x1a>
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <__i2b+0x24>)
 8008f74:	4805      	ldr	r0, [pc, #20]	; (8008f8c <__i2b+0x28>)
 8008f76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f7a:	f000 fd37 	bl	80099ec <__assert_func>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	6144      	str	r4, [r0, #20]
 8008f82:	6103      	str	r3, [r0, #16]
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	bf00      	nop
 8008f88:	0800a5a3 	.word	0x0800a5a3
 8008f8c:	0800a614 	.word	0x0800a614

08008f90 <__multiply>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	4691      	mov	r9, r2
 8008f96:	690a      	ldr	r2, [r1, #16]
 8008f98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	bfb8      	it	lt
 8008fa0:	460b      	movlt	r3, r1
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	bfbc      	itt	lt
 8008fa6:	464c      	movlt	r4, r9
 8008fa8:	4699      	movlt	r9, r3
 8008faa:	6927      	ldr	r7, [r4, #16]
 8008fac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	6861      	ldr	r1, [r4, #4]
 8008fb4:	eb07 060a 	add.w	r6, r7, sl
 8008fb8:	42b3      	cmp	r3, r6
 8008fba:	b085      	sub	sp, #20
 8008fbc:	bfb8      	it	lt
 8008fbe:	3101      	addlt	r1, #1
 8008fc0:	f7ff fed8 	bl	8008d74 <_Balloc>
 8008fc4:	b930      	cbnz	r0, 8008fd4 <__multiply+0x44>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	4b44      	ldr	r3, [pc, #272]	; (80090dc <__multiply+0x14c>)
 8008fca:	4845      	ldr	r0, [pc, #276]	; (80090e0 <__multiply+0x150>)
 8008fcc:	f240 115d 	movw	r1, #349	; 0x15d
 8008fd0:	f000 fd0c 	bl	80099ec <__assert_func>
 8008fd4:	f100 0514 	add.w	r5, r0, #20
 8008fd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fdc:	462b      	mov	r3, r5
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4543      	cmp	r3, r8
 8008fe2:	d321      	bcc.n	8009028 <__multiply+0x98>
 8008fe4:	f104 0314 	add.w	r3, r4, #20
 8008fe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fec:	f109 0314 	add.w	r3, r9, #20
 8008ff0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ff4:	9202      	str	r2, [sp, #8]
 8008ff6:	1b3a      	subs	r2, r7, r4
 8008ff8:	3a15      	subs	r2, #21
 8008ffa:	f022 0203 	bic.w	r2, r2, #3
 8008ffe:	3204      	adds	r2, #4
 8009000:	f104 0115 	add.w	r1, r4, #21
 8009004:	428f      	cmp	r7, r1
 8009006:	bf38      	it	cc
 8009008:	2204      	movcc	r2, #4
 800900a:	9201      	str	r2, [sp, #4]
 800900c:	9a02      	ldr	r2, [sp, #8]
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	429a      	cmp	r2, r3
 8009012:	d80c      	bhi.n	800902e <__multiply+0x9e>
 8009014:	2e00      	cmp	r6, #0
 8009016:	dd03      	ble.n	8009020 <__multiply+0x90>
 8009018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800901c:	2b00      	cmp	r3, #0
 800901e:	d05a      	beq.n	80090d6 <__multiply+0x146>
 8009020:	6106      	str	r6, [r0, #16]
 8009022:	b005      	add	sp, #20
 8009024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009028:	f843 2b04 	str.w	r2, [r3], #4
 800902c:	e7d8      	b.n	8008fe0 <__multiply+0x50>
 800902e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009032:	f1ba 0f00 	cmp.w	sl, #0
 8009036:	d024      	beq.n	8009082 <__multiply+0xf2>
 8009038:	f104 0e14 	add.w	lr, r4, #20
 800903c:	46a9      	mov	r9, r5
 800903e:	f04f 0c00 	mov.w	ip, #0
 8009042:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009046:	f8d9 1000 	ldr.w	r1, [r9]
 800904a:	fa1f fb82 	uxth.w	fp, r2
 800904e:	b289      	uxth	r1, r1
 8009050:	fb0a 110b 	mla	r1, sl, fp, r1
 8009054:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009058:	f8d9 2000 	ldr.w	r2, [r9]
 800905c:	4461      	add	r1, ip
 800905e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009062:	fb0a c20b 	mla	r2, sl, fp, ip
 8009066:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800906a:	b289      	uxth	r1, r1
 800906c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009070:	4577      	cmp	r7, lr
 8009072:	f849 1b04 	str.w	r1, [r9], #4
 8009076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800907a:	d8e2      	bhi.n	8009042 <__multiply+0xb2>
 800907c:	9a01      	ldr	r2, [sp, #4]
 800907e:	f845 c002 	str.w	ip, [r5, r2]
 8009082:	9a03      	ldr	r2, [sp, #12]
 8009084:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009088:	3304      	adds	r3, #4
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	d020      	beq.n	80090d2 <__multiply+0x142>
 8009090:	6829      	ldr	r1, [r5, #0]
 8009092:	f104 0c14 	add.w	ip, r4, #20
 8009096:	46ae      	mov	lr, r5
 8009098:	f04f 0a00 	mov.w	sl, #0
 800909c:	f8bc b000 	ldrh.w	fp, [ip]
 80090a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090a4:	fb09 220b 	mla	r2, r9, fp, r2
 80090a8:	4492      	add	sl, r2
 80090aa:	b289      	uxth	r1, r1
 80090ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090b0:	f84e 1b04 	str.w	r1, [lr], #4
 80090b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090b8:	f8be 1000 	ldrh.w	r1, [lr]
 80090bc:	0c12      	lsrs	r2, r2, #16
 80090be:	fb09 1102 	mla	r1, r9, r2, r1
 80090c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090c6:	4567      	cmp	r7, ip
 80090c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090cc:	d8e6      	bhi.n	800909c <__multiply+0x10c>
 80090ce:	9a01      	ldr	r2, [sp, #4]
 80090d0:	50a9      	str	r1, [r5, r2]
 80090d2:	3504      	adds	r5, #4
 80090d4:	e79a      	b.n	800900c <__multiply+0x7c>
 80090d6:	3e01      	subs	r6, #1
 80090d8:	e79c      	b.n	8009014 <__multiply+0x84>
 80090da:	bf00      	nop
 80090dc:	0800a5a3 	.word	0x0800a5a3
 80090e0:	0800a614 	.word	0x0800a614

080090e4 <__pow5mult>:
 80090e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e8:	4615      	mov	r5, r2
 80090ea:	f012 0203 	ands.w	r2, r2, #3
 80090ee:	4606      	mov	r6, r0
 80090f0:	460f      	mov	r7, r1
 80090f2:	d007      	beq.n	8009104 <__pow5mult+0x20>
 80090f4:	4c25      	ldr	r4, [pc, #148]	; (800918c <__pow5mult+0xa8>)
 80090f6:	3a01      	subs	r2, #1
 80090f8:	2300      	movs	r3, #0
 80090fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090fe:	f7ff fe9b 	bl	8008e38 <__multadd>
 8009102:	4607      	mov	r7, r0
 8009104:	10ad      	asrs	r5, r5, #2
 8009106:	d03d      	beq.n	8009184 <__pow5mult+0xa0>
 8009108:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800910a:	b97c      	cbnz	r4, 800912c <__pow5mult+0x48>
 800910c:	2010      	movs	r0, #16
 800910e:	f7ff fe29 	bl	8008d64 <malloc>
 8009112:	4602      	mov	r2, r0
 8009114:	6270      	str	r0, [r6, #36]	; 0x24
 8009116:	b928      	cbnz	r0, 8009124 <__pow5mult+0x40>
 8009118:	4b1d      	ldr	r3, [pc, #116]	; (8009190 <__pow5mult+0xac>)
 800911a:	481e      	ldr	r0, [pc, #120]	; (8009194 <__pow5mult+0xb0>)
 800911c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009120:	f000 fc64 	bl	80099ec <__assert_func>
 8009124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009128:	6004      	str	r4, [r0, #0]
 800912a:	60c4      	str	r4, [r0, #12]
 800912c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009134:	b94c      	cbnz	r4, 800914a <__pow5mult+0x66>
 8009136:	f240 2171 	movw	r1, #625	; 0x271
 800913a:	4630      	mov	r0, r6
 800913c:	f7ff ff12 	bl	8008f64 <__i2b>
 8009140:	2300      	movs	r3, #0
 8009142:	f8c8 0008 	str.w	r0, [r8, #8]
 8009146:	4604      	mov	r4, r0
 8009148:	6003      	str	r3, [r0, #0]
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	07eb      	lsls	r3, r5, #31
 8009150:	d50a      	bpl.n	8009168 <__pow5mult+0x84>
 8009152:	4639      	mov	r1, r7
 8009154:	4622      	mov	r2, r4
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ff1a 	bl	8008f90 <__multiply>
 800915c:	4639      	mov	r1, r7
 800915e:	4680      	mov	r8, r0
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff fe47 	bl	8008df4 <_Bfree>
 8009166:	4647      	mov	r7, r8
 8009168:	106d      	asrs	r5, r5, #1
 800916a:	d00b      	beq.n	8009184 <__pow5mult+0xa0>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	b938      	cbnz	r0, 8009180 <__pow5mult+0x9c>
 8009170:	4622      	mov	r2, r4
 8009172:	4621      	mov	r1, r4
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff ff0b 	bl	8008f90 <__multiply>
 800917a:	6020      	str	r0, [r4, #0]
 800917c:	f8c0 9000 	str.w	r9, [r0]
 8009180:	4604      	mov	r4, r0
 8009182:	e7e4      	b.n	800914e <__pow5mult+0x6a>
 8009184:	4638      	mov	r0, r7
 8009186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918a:	bf00      	nop
 800918c:	0800a760 	.word	0x0800a760
 8009190:	0800a531 	.word	0x0800a531
 8009194:	0800a614 	.word	0x0800a614

08009198 <__lshift>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	460c      	mov	r4, r1
 800919e:	6849      	ldr	r1, [r1, #4]
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	4607      	mov	r7, r0
 80091aa:	4691      	mov	r9, r2
 80091ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091b0:	f108 0601 	add.w	r6, r8, #1
 80091b4:	42b3      	cmp	r3, r6
 80091b6:	db0b      	blt.n	80091d0 <__lshift+0x38>
 80091b8:	4638      	mov	r0, r7
 80091ba:	f7ff fddb 	bl	8008d74 <_Balloc>
 80091be:	4605      	mov	r5, r0
 80091c0:	b948      	cbnz	r0, 80091d6 <__lshift+0x3e>
 80091c2:	4602      	mov	r2, r0
 80091c4:	4b2a      	ldr	r3, [pc, #168]	; (8009270 <__lshift+0xd8>)
 80091c6:	482b      	ldr	r0, [pc, #172]	; (8009274 <__lshift+0xdc>)
 80091c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091cc:	f000 fc0e 	bl	80099ec <__assert_func>
 80091d0:	3101      	adds	r1, #1
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	e7ee      	b.n	80091b4 <__lshift+0x1c>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f100 0114 	add.w	r1, r0, #20
 80091dc:	f100 0210 	add.w	r2, r0, #16
 80091e0:	4618      	mov	r0, r3
 80091e2:	4553      	cmp	r3, sl
 80091e4:	db37      	blt.n	8009256 <__lshift+0xbe>
 80091e6:	6920      	ldr	r0, [r4, #16]
 80091e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091ec:	f104 0314 	add.w	r3, r4, #20
 80091f0:	f019 091f 	ands.w	r9, r9, #31
 80091f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80091fc:	d02f      	beq.n	800925e <__lshift+0xc6>
 80091fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009202:	468a      	mov	sl, r1
 8009204:	f04f 0c00 	mov.w	ip, #0
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	fa02 f209 	lsl.w	r2, r2, r9
 800920e:	ea42 020c 	orr.w	r2, r2, ip
 8009212:	f84a 2b04 	str.w	r2, [sl], #4
 8009216:	f853 2b04 	ldr.w	r2, [r3], #4
 800921a:	4298      	cmp	r0, r3
 800921c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009220:	d8f2      	bhi.n	8009208 <__lshift+0x70>
 8009222:	1b03      	subs	r3, r0, r4
 8009224:	3b15      	subs	r3, #21
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	3304      	adds	r3, #4
 800922c:	f104 0215 	add.w	r2, r4, #21
 8009230:	4290      	cmp	r0, r2
 8009232:	bf38      	it	cc
 8009234:	2304      	movcc	r3, #4
 8009236:	f841 c003 	str.w	ip, [r1, r3]
 800923a:	f1bc 0f00 	cmp.w	ip, #0
 800923e:	d001      	beq.n	8009244 <__lshift+0xac>
 8009240:	f108 0602 	add.w	r6, r8, #2
 8009244:	3e01      	subs	r6, #1
 8009246:	4638      	mov	r0, r7
 8009248:	612e      	str	r6, [r5, #16]
 800924a:	4621      	mov	r1, r4
 800924c:	f7ff fdd2 	bl	8008df4 <_Bfree>
 8009250:	4628      	mov	r0, r5
 8009252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009256:	f842 0f04 	str.w	r0, [r2, #4]!
 800925a:	3301      	adds	r3, #1
 800925c:	e7c1      	b.n	80091e2 <__lshift+0x4a>
 800925e:	3904      	subs	r1, #4
 8009260:	f853 2b04 	ldr.w	r2, [r3], #4
 8009264:	f841 2f04 	str.w	r2, [r1, #4]!
 8009268:	4298      	cmp	r0, r3
 800926a:	d8f9      	bhi.n	8009260 <__lshift+0xc8>
 800926c:	e7ea      	b.n	8009244 <__lshift+0xac>
 800926e:	bf00      	nop
 8009270:	0800a5a3 	.word	0x0800a5a3
 8009274:	0800a614 	.word	0x0800a614

08009278 <__mcmp>:
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	6902      	ldr	r2, [r0, #16]
 800927c:	690c      	ldr	r4, [r1, #16]
 800927e:	1b12      	subs	r2, r2, r4
 8009280:	d10e      	bne.n	80092a0 <__mcmp+0x28>
 8009282:	f100 0314 	add.w	r3, r0, #20
 8009286:	3114      	adds	r1, #20
 8009288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800928c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009298:	42a5      	cmp	r5, r4
 800929a:	d003      	beq.n	80092a4 <__mcmp+0x2c>
 800929c:	d305      	bcc.n	80092aa <__mcmp+0x32>
 800929e:	2201      	movs	r2, #1
 80092a0:	4610      	mov	r0, r2
 80092a2:	bd30      	pop	{r4, r5, pc}
 80092a4:	4283      	cmp	r3, r0
 80092a6:	d3f3      	bcc.n	8009290 <__mcmp+0x18>
 80092a8:	e7fa      	b.n	80092a0 <__mcmp+0x28>
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	e7f7      	b.n	80092a0 <__mcmp+0x28>

080092b0 <__mdiff>:
 80092b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	4606      	mov	r6, r0
 80092b8:	4611      	mov	r1, r2
 80092ba:	4620      	mov	r0, r4
 80092bc:	4690      	mov	r8, r2
 80092be:	f7ff ffdb 	bl	8009278 <__mcmp>
 80092c2:	1e05      	subs	r5, r0, #0
 80092c4:	d110      	bne.n	80092e8 <__mdiff+0x38>
 80092c6:	4629      	mov	r1, r5
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff fd53 	bl	8008d74 <_Balloc>
 80092ce:	b930      	cbnz	r0, 80092de <__mdiff+0x2e>
 80092d0:	4b3a      	ldr	r3, [pc, #232]	; (80093bc <__mdiff+0x10c>)
 80092d2:	4602      	mov	r2, r0
 80092d4:	f240 2132 	movw	r1, #562	; 0x232
 80092d8:	4839      	ldr	r0, [pc, #228]	; (80093c0 <__mdiff+0x110>)
 80092da:	f000 fb87 	bl	80099ec <__assert_func>
 80092de:	2301      	movs	r3, #1
 80092e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e8:	bfa4      	itt	ge
 80092ea:	4643      	movge	r3, r8
 80092ec:	46a0      	movge	r8, r4
 80092ee:	4630      	mov	r0, r6
 80092f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092f4:	bfa6      	itte	ge
 80092f6:	461c      	movge	r4, r3
 80092f8:	2500      	movge	r5, #0
 80092fa:	2501      	movlt	r5, #1
 80092fc:	f7ff fd3a 	bl	8008d74 <_Balloc>
 8009300:	b920      	cbnz	r0, 800930c <__mdiff+0x5c>
 8009302:	4b2e      	ldr	r3, [pc, #184]	; (80093bc <__mdiff+0x10c>)
 8009304:	4602      	mov	r2, r0
 8009306:	f44f 7110 	mov.w	r1, #576	; 0x240
 800930a:	e7e5      	b.n	80092d8 <__mdiff+0x28>
 800930c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009310:	6926      	ldr	r6, [r4, #16]
 8009312:	60c5      	str	r5, [r0, #12]
 8009314:	f104 0914 	add.w	r9, r4, #20
 8009318:	f108 0514 	add.w	r5, r8, #20
 800931c:	f100 0e14 	add.w	lr, r0, #20
 8009320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009328:	f108 0210 	add.w	r2, r8, #16
 800932c:	46f2      	mov	sl, lr
 800932e:	2100      	movs	r1, #0
 8009330:	f859 3b04 	ldr.w	r3, [r9], #4
 8009334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009338:	fa1f f883 	uxth.w	r8, r3
 800933c:	fa11 f18b 	uxtah	r1, r1, fp
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	eba1 0808 	sub.w	r8, r1, r8
 8009346:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800934a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800934e:	fa1f f888 	uxth.w	r8, r8
 8009352:	1419      	asrs	r1, r3, #16
 8009354:	454e      	cmp	r6, r9
 8009356:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800935a:	f84a 3b04 	str.w	r3, [sl], #4
 800935e:	d8e7      	bhi.n	8009330 <__mdiff+0x80>
 8009360:	1b33      	subs	r3, r6, r4
 8009362:	3b15      	subs	r3, #21
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	3304      	adds	r3, #4
 800936a:	3415      	adds	r4, #21
 800936c:	42a6      	cmp	r6, r4
 800936e:	bf38      	it	cc
 8009370:	2304      	movcc	r3, #4
 8009372:	441d      	add	r5, r3
 8009374:	4473      	add	r3, lr
 8009376:	469e      	mov	lr, r3
 8009378:	462e      	mov	r6, r5
 800937a:	4566      	cmp	r6, ip
 800937c:	d30e      	bcc.n	800939c <__mdiff+0xec>
 800937e:	f10c 0203 	add.w	r2, ip, #3
 8009382:	1b52      	subs	r2, r2, r5
 8009384:	f022 0203 	bic.w	r2, r2, #3
 8009388:	3d03      	subs	r5, #3
 800938a:	45ac      	cmp	ip, r5
 800938c:	bf38      	it	cc
 800938e:	2200      	movcc	r2, #0
 8009390:	441a      	add	r2, r3
 8009392:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009396:	b17b      	cbz	r3, 80093b8 <__mdiff+0x108>
 8009398:	6107      	str	r7, [r0, #16]
 800939a:	e7a3      	b.n	80092e4 <__mdiff+0x34>
 800939c:	f856 8b04 	ldr.w	r8, [r6], #4
 80093a0:	fa11 f288 	uxtah	r2, r1, r8
 80093a4:	1414      	asrs	r4, r2, #16
 80093a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093aa:	b292      	uxth	r2, r2
 80093ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093b0:	f84e 2b04 	str.w	r2, [lr], #4
 80093b4:	1421      	asrs	r1, r4, #16
 80093b6:	e7e0      	b.n	800937a <__mdiff+0xca>
 80093b8:	3f01      	subs	r7, #1
 80093ba:	e7ea      	b.n	8009392 <__mdiff+0xe2>
 80093bc:	0800a5a3 	.word	0x0800a5a3
 80093c0:	0800a614 	.word	0x0800a614

080093c4 <__d2b>:
 80093c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	4689      	mov	r9, r1
 80093ca:	2101      	movs	r1, #1
 80093cc:	ec57 6b10 	vmov	r6, r7, d0
 80093d0:	4690      	mov	r8, r2
 80093d2:	f7ff fccf 	bl	8008d74 <_Balloc>
 80093d6:	4604      	mov	r4, r0
 80093d8:	b930      	cbnz	r0, 80093e8 <__d2b+0x24>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b25      	ldr	r3, [pc, #148]	; (8009474 <__d2b+0xb0>)
 80093de:	4826      	ldr	r0, [pc, #152]	; (8009478 <__d2b+0xb4>)
 80093e0:	f240 310a 	movw	r1, #778	; 0x30a
 80093e4:	f000 fb02 	bl	80099ec <__assert_func>
 80093e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093f0:	bb35      	cbnz	r5, 8009440 <__d2b+0x7c>
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	d028      	beq.n	800944a <__d2b+0x86>
 80093f8:	4668      	mov	r0, sp
 80093fa:	9600      	str	r6, [sp, #0]
 80093fc:	f7ff fd82 	bl	8008f04 <__lo0bits>
 8009400:	9900      	ldr	r1, [sp, #0]
 8009402:	b300      	cbz	r0, 8009446 <__d2b+0x82>
 8009404:	9a01      	ldr	r2, [sp, #4]
 8009406:	f1c0 0320 	rsb	r3, r0, #32
 800940a:	fa02 f303 	lsl.w	r3, r2, r3
 800940e:	430b      	orrs	r3, r1
 8009410:	40c2      	lsrs	r2, r0
 8009412:	6163      	str	r3, [r4, #20]
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	61a3      	str	r3, [r4, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	bf14      	ite	ne
 800941e:	2202      	movne	r2, #2
 8009420:	2201      	moveq	r2, #1
 8009422:	6122      	str	r2, [r4, #16]
 8009424:	b1d5      	cbz	r5, 800945c <__d2b+0x98>
 8009426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800942a:	4405      	add	r5, r0
 800942c:	f8c9 5000 	str.w	r5, [r9]
 8009430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009434:	f8c8 0000 	str.w	r0, [r8]
 8009438:	4620      	mov	r0, r4
 800943a:	b003      	add	sp, #12
 800943c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009444:	e7d5      	b.n	80093f2 <__d2b+0x2e>
 8009446:	6161      	str	r1, [r4, #20]
 8009448:	e7e5      	b.n	8009416 <__d2b+0x52>
 800944a:	a801      	add	r0, sp, #4
 800944c:	f7ff fd5a 	bl	8008f04 <__lo0bits>
 8009450:	9b01      	ldr	r3, [sp, #4]
 8009452:	6163      	str	r3, [r4, #20]
 8009454:	2201      	movs	r2, #1
 8009456:	6122      	str	r2, [r4, #16]
 8009458:	3020      	adds	r0, #32
 800945a:	e7e3      	b.n	8009424 <__d2b+0x60>
 800945c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009464:	f8c9 0000 	str.w	r0, [r9]
 8009468:	6918      	ldr	r0, [r3, #16]
 800946a:	f7ff fd2b 	bl	8008ec4 <__hi0bits>
 800946e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009472:	e7df      	b.n	8009434 <__d2b+0x70>
 8009474:	0800a5a3 	.word	0x0800a5a3
 8009478:	0800a614 	.word	0x0800a614

0800947c <_calloc_r>:
 800947c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800947e:	fba1 2402 	umull	r2, r4, r1, r2
 8009482:	b94c      	cbnz	r4, 8009498 <_calloc_r+0x1c>
 8009484:	4611      	mov	r1, r2
 8009486:	9201      	str	r2, [sp, #4]
 8009488:	f000 f87a 	bl	8009580 <_malloc_r>
 800948c:	9a01      	ldr	r2, [sp, #4]
 800948e:	4605      	mov	r5, r0
 8009490:	b930      	cbnz	r0, 80094a0 <_calloc_r+0x24>
 8009492:	4628      	mov	r0, r5
 8009494:	b003      	add	sp, #12
 8009496:	bd30      	pop	{r4, r5, pc}
 8009498:	220c      	movs	r2, #12
 800949a:	6002      	str	r2, [r0, #0]
 800949c:	2500      	movs	r5, #0
 800949e:	e7f8      	b.n	8009492 <_calloc_r+0x16>
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7fd fea1 	bl	80071e8 <memset>
 80094a6:	e7f4      	b.n	8009492 <_calloc_r+0x16>

080094a8 <_free_r>:
 80094a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094aa:	2900      	cmp	r1, #0
 80094ac:	d044      	beq.n	8009538 <_free_r+0x90>
 80094ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b2:	9001      	str	r0, [sp, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f1a1 0404 	sub.w	r4, r1, #4
 80094ba:	bfb8      	it	lt
 80094bc:	18e4      	addlt	r4, r4, r3
 80094be:	f000 fb35 	bl	8009b2c <__malloc_lock>
 80094c2:	4a1e      	ldr	r2, [pc, #120]	; (800953c <_free_r+0x94>)
 80094c4:	9801      	ldr	r0, [sp, #4]
 80094c6:	6813      	ldr	r3, [r2, #0]
 80094c8:	b933      	cbnz	r3, 80094d8 <_free_r+0x30>
 80094ca:	6063      	str	r3, [r4, #4]
 80094cc:	6014      	str	r4, [r2, #0]
 80094ce:	b003      	add	sp, #12
 80094d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d4:	f000 bb30 	b.w	8009b38 <__malloc_unlock>
 80094d8:	42a3      	cmp	r3, r4
 80094da:	d908      	bls.n	80094ee <_free_r+0x46>
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf01      	itttt	eq
 80094e4:	6819      	ldreq	r1, [r3, #0]
 80094e6:	685b      	ldreq	r3, [r3, #4]
 80094e8:	1949      	addeq	r1, r1, r5
 80094ea:	6021      	streq	r1, [r4, #0]
 80094ec:	e7ed      	b.n	80094ca <_free_r+0x22>
 80094ee:	461a      	mov	r2, r3
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	b10b      	cbz	r3, 80094f8 <_free_r+0x50>
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	d9fa      	bls.n	80094ee <_free_r+0x46>
 80094f8:	6811      	ldr	r1, [r2, #0]
 80094fa:	1855      	adds	r5, r2, r1
 80094fc:	42a5      	cmp	r5, r4
 80094fe:	d10b      	bne.n	8009518 <_free_r+0x70>
 8009500:	6824      	ldr	r4, [r4, #0]
 8009502:	4421      	add	r1, r4
 8009504:	1854      	adds	r4, r2, r1
 8009506:	42a3      	cmp	r3, r4
 8009508:	6011      	str	r1, [r2, #0]
 800950a:	d1e0      	bne.n	80094ce <_free_r+0x26>
 800950c:	681c      	ldr	r4, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	6053      	str	r3, [r2, #4]
 8009512:	4421      	add	r1, r4
 8009514:	6011      	str	r1, [r2, #0]
 8009516:	e7da      	b.n	80094ce <_free_r+0x26>
 8009518:	d902      	bls.n	8009520 <_free_r+0x78>
 800951a:	230c      	movs	r3, #12
 800951c:	6003      	str	r3, [r0, #0]
 800951e:	e7d6      	b.n	80094ce <_free_r+0x26>
 8009520:	6825      	ldr	r5, [r4, #0]
 8009522:	1961      	adds	r1, r4, r5
 8009524:	428b      	cmp	r3, r1
 8009526:	bf04      	itt	eq
 8009528:	6819      	ldreq	r1, [r3, #0]
 800952a:	685b      	ldreq	r3, [r3, #4]
 800952c:	6063      	str	r3, [r4, #4]
 800952e:	bf04      	itt	eq
 8009530:	1949      	addeq	r1, r1, r5
 8009532:	6021      	streq	r1, [r4, #0]
 8009534:	6054      	str	r4, [r2, #4]
 8009536:	e7ca      	b.n	80094ce <_free_r+0x26>
 8009538:	b003      	add	sp, #12
 800953a:	bd30      	pop	{r4, r5, pc}
 800953c:	2400048c 	.word	0x2400048c

08009540 <sbrk_aligned>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	4e0e      	ldr	r6, [pc, #56]	; (800957c <sbrk_aligned+0x3c>)
 8009544:	460c      	mov	r4, r1
 8009546:	6831      	ldr	r1, [r6, #0]
 8009548:	4605      	mov	r5, r0
 800954a:	b911      	cbnz	r1, 8009552 <sbrk_aligned+0x12>
 800954c:	f000 f9e8 	bl	8009920 <_sbrk_r>
 8009550:	6030      	str	r0, [r6, #0]
 8009552:	4621      	mov	r1, r4
 8009554:	4628      	mov	r0, r5
 8009556:	f000 f9e3 	bl	8009920 <_sbrk_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d00a      	beq.n	8009574 <sbrk_aligned+0x34>
 800955e:	1cc4      	adds	r4, r0, #3
 8009560:	f024 0403 	bic.w	r4, r4, #3
 8009564:	42a0      	cmp	r0, r4
 8009566:	d007      	beq.n	8009578 <sbrk_aligned+0x38>
 8009568:	1a21      	subs	r1, r4, r0
 800956a:	4628      	mov	r0, r5
 800956c:	f000 f9d8 	bl	8009920 <_sbrk_r>
 8009570:	3001      	adds	r0, #1
 8009572:	d101      	bne.n	8009578 <sbrk_aligned+0x38>
 8009574:	f04f 34ff 	mov.w	r4, #4294967295
 8009578:	4620      	mov	r0, r4
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	24000490 	.word	0x24000490

08009580 <_malloc_r>:
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	1ccd      	adds	r5, r1, #3
 8009586:	f025 0503 	bic.w	r5, r5, #3
 800958a:	3508      	adds	r5, #8
 800958c:	2d0c      	cmp	r5, #12
 800958e:	bf38      	it	cc
 8009590:	250c      	movcc	r5, #12
 8009592:	2d00      	cmp	r5, #0
 8009594:	4607      	mov	r7, r0
 8009596:	db01      	blt.n	800959c <_malloc_r+0x1c>
 8009598:	42a9      	cmp	r1, r5
 800959a:	d905      	bls.n	80095a8 <_malloc_r+0x28>
 800959c:	230c      	movs	r3, #12
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	2600      	movs	r6, #0
 80095a2:	4630      	mov	r0, r6
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	4e2e      	ldr	r6, [pc, #184]	; (8009664 <_malloc_r+0xe4>)
 80095aa:	f000 fabf 	bl	8009b2c <__malloc_lock>
 80095ae:	6833      	ldr	r3, [r6, #0]
 80095b0:	461c      	mov	r4, r3
 80095b2:	bb34      	cbnz	r4, 8009602 <_malloc_r+0x82>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ffc2 	bl	8009540 <sbrk_aligned>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	4604      	mov	r4, r0
 80095c0:	d14d      	bne.n	800965e <_malloc_r+0xde>
 80095c2:	6834      	ldr	r4, [r6, #0]
 80095c4:	4626      	mov	r6, r4
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	d140      	bne.n	800964c <_malloc_r+0xcc>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	4631      	mov	r1, r6
 80095ce:	4638      	mov	r0, r7
 80095d0:	eb04 0803 	add.w	r8, r4, r3
 80095d4:	f000 f9a4 	bl	8009920 <_sbrk_r>
 80095d8:	4580      	cmp	r8, r0
 80095da:	d13a      	bne.n	8009652 <_malloc_r+0xd2>
 80095dc:	6821      	ldr	r1, [r4, #0]
 80095de:	3503      	adds	r5, #3
 80095e0:	1a6d      	subs	r5, r5, r1
 80095e2:	f025 0503 	bic.w	r5, r5, #3
 80095e6:	3508      	adds	r5, #8
 80095e8:	2d0c      	cmp	r5, #12
 80095ea:	bf38      	it	cc
 80095ec:	250c      	movcc	r5, #12
 80095ee:	4629      	mov	r1, r5
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ffa5 	bl	8009540 <sbrk_aligned>
 80095f6:	3001      	adds	r0, #1
 80095f8:	d02b      	beq.n	8009652 <_malloc_r+0xd2>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	442b      	add	r3, r5
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	e00e      	b.n	8009620 <_malloc_r+0xa0>
 8009602:	6822      	ldr	r2, [r4, #0]
 8009604:	1b52      	subs	r2, r2, r5
 8009606:	d41e      	bmi.n	8009646 <_malloc_r+0xc6>
 8009608:	2a0b      	cmp	r2, #11
 800960a:	d916      	bls.n	800963a <_malloc_r+0xba>
 800960c:	1961      	adds	r1, r4, r5
 800960e:	42a3      	cmp	r3, r4
 8009610:	6025      	str	r5, [r4, #0]
 8009612:	bf18      	it	ne
 8009614:	6059      	strne	r1, [r3, #4]
 8009616:	6863      	ldr	r3, [r4, #4]
 8009618:	bf08      	it	eq
 800961a:	6031      	streq	r1, [r6, #0]
 800961c:	5162      	str	r2, [r4, r5]
 800961e:	604b      	str	r3, [r1, #4]
 8009620:	4638      	mov	r0, r7
 8009622:	f104 060b 	add.w	r6, r4, #11
 8009626:	f000 fa87 	bl	8009b38 <__malloc_unlock>
 800962a:	f026 0607 	bic.w	r6, r6, #7
 800962e:	1d23      	adds	r3, r4, #4
 8009630:	1af2      	subs	r2, r6, r3
 8009632:	d0b6      	beq.n	80095a2 <_malloc_r+0x22>
 8009634:	1b9b      	subs	r3, r3, r6
 8009636:	50a3      	str	r3, [r4, r2]
 8009638:	e7b3      	b.n	80095a2 <_malloc_r+0x22>
 800963a:	6862      	ldr	r2, [r4, #4]
 800963c:	42a3      	cmp	r3, r4
 800963e:	bf0c      	ite	eq
 8009640:	6032      	streq	r2, [r6, #0]
 8009642:	605a      	strne	r2, [r3, #4]
 8009644:	e7ec      	b.n	8009620 <_malloc_r+0xa0>
 8009646:	4623      	mov	r3, r4
 8009648:	6864      	ldr	r4, [r4, #4]
 800964a:	e7b2      	b.n	80095b2 <_malloc_r+0x32>
 800964c:	4634      	mov	r4, r6
 800964e:	6876      	ldr	r6, [r6, #4]
 8009650:	e7b9      	b.n	80095c6 <_malloc_r+0x46>
 8009652:	230c      	movs	r3, #12
 8009654:	603b      	str	r3, [r7, #0]
 8009656:	4638      	mov	r0, r7
 8009658:	f000 fa6e 	bl	8009b38 <__malloc_unlock>
 800965c:	e7a1      	b.n	80095a2 <_malloc_r+0x22>
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	e7de      	b.n	8009620 <_malloc_r+0xa0>
 8009662:	bf00      	nop
 8009664:	2400048c 	.word	0x2400048c

08009668 <__ssputs_r>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	688e      	ldr	r6, [r1, #8]
 800966e:	429e      	cmp	r6, r3
 8009670:	4682      	mov	sl, r0
 8009672:	460c      	mov	r4, r1
 8009674:	4690      	mov	r8, r2
 8009676:	461f      	mov	r7, r3
 8009678:	d838      	bhi.n	80096ec <__ssputs_r+0x84>
 800967a:	898a      	ldrh	r2, [r1, #12]
 800967c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009680:	d032      	beq.n	80096e8 <__ssputs_r+0x80>
 8009682:	6825      	ldr	r5, [r4, #0]
 8009684:	6909      	ldr	r1, [r1, #16]
 8009686:	eba5 0901 	sub.w	r9, r5, r1
 800968a:	6965      	ldr	r5, [r4, #20]
 800968c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009694:	3301      	adds	r3, #1
 8009696:	444b      	add	r3, r9
 8009698:	106d      	asrs	r5, r5, #1
 800969a:	429d      	cmp	r5, r3
 800969c:	bf38      	it	cc
 800969e:	461d      	movcc	r5, r3
 80096a0:	0553      	lsls	r3, r2, #21
 80096a2:	d531      	bpl.n	8009708 <__ssputs_r+0xa0>
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff ff6b 	bl	8009580 <_malloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	b950      	cbnz	r0, 80096c4 <__ssputs_r+0x5c>
 80096ae:	230c      	movs	r3, #12
 80096b0:	f8ca 3000 	str.w	r3, [sl]
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c4:	6921      	ldr	r1, [r4, #16]
 80096c6:	464a      	mov	r2, r9
 80096c8:	f7fd fd80 	bl	80071cc <memcpy>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	6126      	str	r6, [r4, #16]
 80096da:	6165      	str	r5, [r4, #20]
 80096dc:	444e      	add	r6, r9
 80096de:	eba5 0509 	sub.w	r5, r5, r9
 80096e2:	6026      	str	r6, [r4, #0]
 80096e4:	60a5      	str	r5, [r4, #8]
 80096e6:	463e      	mov	r6, r7
 80096e8:	42be      	cmp	r6, r7
 80096ea:	d900      	bls.n	80096ee <__ssputs_r+0x86>
 80096ec:	463e      	mov	r6, r7
 80096ee:	6820      	ldr	r0, [r4, #0]
 80096f0:	4632      	mov	r2, r6
 80096f2:	4641      	mov	r1, r8
 80096f4:	f000 fa00 	bl	8009af8 <memmove>
 80096f8:	68a3      	ldr	r3, [r4, #8]
 80096fa:	1b9b      	subs	r3, r3, r6
 80096fc:	60a3      	str	r3, [r4, #8]
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	4433      	add	r3, r6
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	2000      	movs	r0, #0
 8009706:	e7db      	b.n	80096c0 <__ssputs_r+0x58>
 8009708:	462a      	mov	r2, r5
 800970a:	f000 fa1b 	bl	8009b44 <_realloc_r>
 800970e:	4606      	mov	r6, r0
 8009710:	2800      	cmp	r0, #0
 8009712:	d1e1      	bne.n	80096d8 <__ssputs_r+0x70>
 8009714:	6921      	ldr	r1, [r4, #16]
 8009716:	4650      	mov	r0, sl
 8009718:	f7ff fec6 	bl	80094a8 <_free_r>
 800971c:	e7c7      	b.n	80096ae <__ssputs_r+0x46>
	...

08009720 <_svfiprintf_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	4698      	mov	r8, r3
 8009726:	898b      	ldrh	r3, [r1, #12]
 8009728:	061b      	lsls	r3, r3, #24
 800972a:	b09d      	sub	sp, #116	; 0x74
 800972c:	4607      	mov	r7, r0
 800972e:	460d      	mov	r5, r1
 8009730:	4614      	mov	r4, r2
 8009732:	d50e      	bpl.n	8009752 <_svfiprintf_r+0x32>
 8009734:	690b      	ldr	r3, [r1, #16]
 8009736:	b963      	cbnz	r3, 8009752 <_svfiprintf_r+0x32>
 8009738:	2140      	movs	r1, #64	; 0x40
 800973a:	f7ff ff21 	bl	8009580 <_malloc_r>
 800973e:	6028      	str	r0, [r5, #0]
 8009740:	6128      	str	r0, [r5, #16]
 8009742:	b920      	cbnz	r0, 800974e <_svfiprintf_r+0x2e>
 8009744:	230c      	movs	r3, #12
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	e0d1      	b.n	80098f2 <_svfiprintf_r+0x1d2>
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	616b      	str	r3, [r5, #20]
 8009752:	2300      	movs	r3, #0
 8009754:	9309      	str	r3, [sp, #36]	; 0x24
 8009756:	2320      	movs	r3, #32
 8009758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800975c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009760:	2330      	movs	r3, #48	; 0x30
 8009762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800990c <_svfiprintf_r+0x1ec>
 8009766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800976a:	f04f 0901 	mov.w	r9, #1
 800976e:	4623      	mov	r3, r4
 8009770:	469a      	mov	sl, r3
 8009772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009776:	b10a      	cbz	r2, 800977c <_svfiprintf_r+0x5c>
 8009778:	2a25      	cmp	r2, #37	; 0x25
 800977a:	d1f9      	bne.n	8009770 <_svfiprintf_r+0x50>
 800977c:	ebba 0b04 	subs.w	fp, sl, r4
 8009780:	d00b      	beq.n	800979a <_svfiprintf_r+0x7a>
 8009782:	465b      	mov	r3, fp
 8009784:	4622      	mov	r2, r4
 8009786:	4629      	mov	r1, r5
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ff6d 	bl	8009668 <__ssputs_r>
 800978e:	3001      	adds	r0, #1
 8009790:	f000 80aa 	beq.w	80098e8 <_svfiprintf_r+0x1c8>
 8009794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009796:	445a      	add	r2, fp
 8009798:	9209      	str	r2, [sp, #36]	; 0x24
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80a2 	beq.w	80098e8 <_svfiprintf_r+0x1c8>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f04f 32ff 	mov.w	r2, #4294967295
 80097aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ae:	f10a 0a01 	add.w	sl, sl, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ba:	931a      	str	r3, [sp, #104]	; 0x68
 80097bc:	4654      	mov	r4, sl
 80097be:	2205      	movs	r2, #5
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	4851      	ldr	r0, [pc, #324]	; (800990c <_svfiprintf_r+0x1ec>)
 80097c6:	f7f6 fd93 	bl	80002f0 <memchr>
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	b9d8      	cbnz	r0, 8009806 <_svfiprintf_r+0xe6>
 80097ce:	06d0      	lsls	r0, r2, #27
 80097d0:	bf44      	itt	mi
 80097d2:	2320      	movmi	r3, #32
 80097d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d8:	0711      	lsls	r1, r2, #28
 80097da:	bf44      	itt	mi
 80097dc:	232b      	movmi	r3, #43	; 0x2b
 80097de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b2a      	cmp	r3, #42	; 0x2a
 80097e8:	d015      	beq.n	8009816 <_svfiprintf_r+0xf6>
 80097ea:	9a07      	ldr	r2, [sp, #28]
 80097ec:	4654      	mov	r4, sl
 80097ee:	2000      	movs	r0, #0
 80097f0:	f04f 0c0a 	mov.w	ip, #10
 80097f4:	4621      	mov	r1, r4
 80097f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097fa:	3b30      	subs	r3, #48	; 0x30
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d94e      	bls.n	800989e <_svfiprintf_r+0x17e>
 8009800:	b1b0      	cbz	r0, 8009830 <_svfiprintf_r+0x110>
 8009802:	9207      	str	r2, [sp, #28]
 8009804:	e014      	b.n	8009830 <_svfiprintf_r+0x110>
 8009806:	eba0 0308 	sub.w	r3, r0, r8
 800980a:	fa09 f303 	lsl.w	r3, r9, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	46a2      	mov	sl, r4
 8009814:	e7d2      	b.n	80097bc <_svfiprintf_r+0x9c>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	1d19      	adds	r1, r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9103      	str	r1, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfbb      	ittet	lt
 8009822:	425b      	neglt	r3, r3
 8009824:	f042 0202 	orrlt.w	r2, r2, #2
 8009828:	9307      	strge	r3, [sp, #28]
 800982a:	9307      	strlt	r3, [sp, #28]
 800982c:	bfb8      	it	lt
 800982e:	9204      	strlt	r2, [sp, #16]
 8009830:	7823      	ldrb	r3, [r4, #0]
 8009832:	2b2e      	cmp	r3, #46	; 0x2e
 8009834:	d10c      	bne.n	8009850 <_svfiprintf_r+0x130>
 8009836:	7863      	ldrb	r3, [r4, #1]
 8009838:	2b2a      	cmp	r3, #42	; 0x2a
 800983a:	d135      	bne.n	80098a8 <_svfiprintf_r+0x188>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9203      	str	r2, [sp, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfb8      	it	lt
 8009848:	f04f 33ff 	movlt.w	r3, #4294967295
 800984c:	3402      	adds	r4, #2
 800984e:	9305      	str	r3, [sp, #20]
 8009850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800991c <_svfiprintf_r+0x1fc>
 8009854:	7821      	ldrb	r1, [r4, #0]
 8009856:	2203      	movs	r2, #3
 8009858:	4650      	mov	r0, sl
 800985a:	f7f6 fd49 	bl	80002f0 <memchr>
 800985e:	b140      	cbz	r0, 8009872 <_svfiprintf_r+0x152>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	eba0 000a 	sub.w	r0, r0, sl
 8009866:	fa03 f000 	lsl.w	r0, r3, r0
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	4303      	orrs	r3, r0
 800986e:	3401      	adds	r4, #1
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009876:	4826      	ldr	r0, [pc, #152]	; (8009910 <_svfiprintf_r+0x1f0>)
 8009878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800987c:	2206      	movs	r2, #6
 800987e:	f7f6 fd37 	bl	80002f0 <memchr>
 8009882:	2800      	cmp	r0, #0
 8009884:	d038      	beq.n	80098f8 <_svfiprintf_r+0x1d8>
 8009886:	4b23      	ldr	r3, [pc, #140]	; (8009914 <_svfiprintf_r+0x1f4>)
 8009888:	bb1b      	cbnz	r3, 80098d2 <_svfiprintf_r+0x1b2>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	3307      	adds	r3, #7
 800988e:	f023 0307 	bic.w	r3, r3, #7
 8009892:	3308      	adds	r3, #8
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009898:	4433      	add	r3, r6
 800989a:	9309      	str	r3, [sp, #36]	; 0x24
 800989c:	e767      	b.n	800976e <_svfiprintf_r+0x4e>
 800989e:	fb0c 3202 	mla	r2, ip, r2, r3
 80098a2:	460c      	mov	r4, r1
 80098a4:	2001      	movs	r0, #1
 80098a6:	e7a5      	b.n	80097f4 <_svfiprintf_r+0xd4>
 80098a8:	2300      	movs	r3, #0
 80098aa:	3401      	adds	r4, #1
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	4619      	mov	r1, r3
 80098b0:	f04f 0c0a 	mov.w	ip, #10
 80098b4:	4620      	mov	r0, r4
 80098b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ba:	3a30      	subs	r2, #48	; 0x30
 80098bc:	2a09      	cmp	r2, #9
 80098be:	d903      	bls.n	80098c8 <_svfiprintf_r+0x1a8>
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0c5      	beq.n	8009850 <_svfiprintf_r+0x130>
 80098c4:	9105      	str	r1, [sp, #20]
 80098c6:	e7c3      	b.n	8009850 <_svfiprintf_r+0x130>
 80098c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098cc:	4604      	mov	r4, r0
 80098ce:	2301      	movs	r3, #1
 80098d0:	e7f0      	b.n	80098b4 <_svfiprintf_r+0x194>
 80098d2:	ab03      	add	r3, sp, #12
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	462a      	mov	r2, r5
 80098d8:	4b0f      	ldr	r3, [pc, #60]	; (8009918 <_svfiprintf_r+0x1f8>)
 80098da:	a904      	add	r1, sp, #16
 80098dc:	4638      	mov	r0, r7
 80098de:	f7fd fd1b 	bl	8007318 <_printf_float>
 80098e2:	1c42      	adds	r2, r0, #1
 80098e4:	4606      	mov	r6, r0
 80098e6:	d1d6      	bne.n	8009896 <_svfiprintf_r+0x176>
 80098e8:	89ab      	ldrh	r3, [r5, #12]
 80098ea:	065b      	lsls	r3, r3, #25
 80098ec:	f53f af2c 	bmi.w	8009748 <_svfiprintf_r+0x28>
 80098f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098f2:	b01d      	add	sp, #116	; 0x74
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	ab03      	add	r3, sp, #12
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	462a      	mov	r2, r5
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <_svfiprintf_r+0x1f8>)
 8009900:	a904      	add	r1, sp, #16
 8009902:	4638      	mov	r0, r7
 8009904:	f7fd ff94 	bl	8007830 <_printf_i>
 8009908:	e7eb      	b.n	80098e2 <_svfiprintf_r+0x1c2>
 800990a:	bf00      	nop
 800990c:	0800a76c 	.word	0x0800a76c
 8009910:	0800a776 	.word	0x0800a776
 8009914:	08007319 	.word	0x08007319
 8009918:	08009669 	.word	0x08009669
 800991c:	0800a772 	.word	0x0800a772

08009920 <_sbrk_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4d06      	ldr	r5, [pc, #24]	; (800993c <_sbrk_r+0x1c>)
 8009924:	2300      	movs	r3, #0
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	f7f8 fb4c 	bl	8001fc8 <_sbrk>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_sbrk_r+0x1a>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_sbrk_r+0x1a>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	24000494 	.word	0x24000494

08009940 <__sread>:
 8009940:	b510      	push	{r4, lr}
 8009942:	460c      	mov	r4, r1
 8009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009948:	f000 fa84 	bl	8009e54 <_read_r>
 800994c:	2800      	cmp	r0, #0
 800994e:	bfab      	itete	ge
 8009950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009952:	89a3      	ldrhlt	r3, [r4, #12]
 8009954:	181b      	addge	r3, r3, r0
 8009956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800995a:	bfac      	ite	ge
 800995c:	6563      	strge	r3, [r4, #84]	; 0x54
 800995e:	81a3      	strhlt	r3, [r4, #12]
 8009960:	bd10      	pop	{r4, pc}

08009962 <__swrite>:
 8009962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	461f      	mov	r7, r3
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	05db      	lsls	r3, r3, #23
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	4616      	mov	r6, r2
 8009972:	d505      	bpl.n	8009980 <__swrite+0x1e>
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2302      	movs	r3, #2
 800997a:	2200      	movs	r2, #0
 800997c:	f000 f898 	bl	8009ab0 <_lseek_r>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	4632      	mov	r2, r6
 800998e:	463b      	mov	r3, r7
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	f000 b817 	b.w	80099c8 <_write_r>

0800999a <__sseek>:
 800999a:	b510      	push	{r4, lr}
 800999c:	460c      	mov	r4, r1
 800999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a2:	f000 f885 	bl	8009ab0 <_lseek_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	bf15      	itete	ne
 80099ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099b6:	81a3      	strheq	r3, [r4, #12]
 80099b8:	bf18      	it	ne
 80099ba:	81a3      	strhne	r3, [r4, #12]
 80099bc:	bd10      	pop	{r4, pc}

080099be <__sclose>:
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 b831 	b.w	8009a28 <_close_r>
	...

080099c8 <_write_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	; (80099e8 <_write_r+0x20>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	4611      	mov	r1, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f8 faa5 	bl	8001f26 <_write>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_write_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_write_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	24000494 	.word	0x24000494

080099ec <__assert_func>:
 80099ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ee:	4614      	mov	r4, r2
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <__assert_func+0x2c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4605      	mov	r5, r0
 80099f8:	68d8      	ldr	r0, [r3, #12]
 80099fa:	b14c      	cbz	r4, 8009a10 <__assert_func+0x24>
 80099fc:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <__assert_func+0x30>)
 80099fe:	9100      	str	r1, [sp, #0]
 8009a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a04:	4906      	ldr	r1, [pc, #24]	; (8009a20 <__assert_func+0x34>)
 8009a06:	462b      	mov	r3, r5
 8009a08:	f000 f81e 	bl	8009a48 <fiprintf>
 8009a0c:	f000 fa41 	bl	8009e92 <abort>
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <__assert_func+0x38>)
 8009a12:	461c      	mov	r4, r3
 8009a14:	e7f3      	b.n	80099fe <__assert_func+0x12>
 8009a16:	bf00      	nop
 8009a18:	24000018 	.word	0x24000018
 8009a1c:	0800a77d 	.word	0x0800a77d
 8009a20:	0800a78a 	.word	0x0800a78a
 8009a24:	0800a7b8 	.word	0x0800a7b8

08009a28 <_close_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_close_r+0x1c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7f8 fa93 	bl	8001f5e <_close>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_close_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_close_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	24000494 	.word	0x24000494

08009a48 <fiprintf>:
 8009a48:	b40e      	push	{r1, r2, r3}
 8009a4a:	b503      	push	{r0, r1, lr}
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	ab03      	add	r3, sp, #12
 8009a50:	4805      	ldr	r0, [pc, #20]	; (8009a68 <fiprintf+0x20>)
 8009a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a56:	6800      	ldr	r0, [r0, #0]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f000 f8cb 	bl	8009bf4 <_vfiprintf_r>
 8009a5e:	b002      	add	sp, #8
 8009a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a64:	b003      	add	sp, #12
 8009a66:	4770      	bx	lr
 8009a68:	24000018 	.word	0x24000018

08009a6c <_fstat_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	; (8009a8c <_fstat_r+0x20>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	f7f8 fa7c 	bl	8001f76 <_fstat>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d102      	bne.n	8009a88 <_fstat_r+0x1c>
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	b103      	cbz	r3, 8009a88 <_fstat_r+0x1c>
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
 8009a8a:	bf00      	nop
 8009a8c:	24000494 	.word	0x24000494

08009a90 <_isatty_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_isatty_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f8 fa7b 	bl	8001f96 <_isatty>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_isatty_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_isatty_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	24000494 	.word	0x24000494

08009ab0 <_lseek_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	; (8009ad0 <_lseek_r+0x20>)
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f8 fa74 	bl	8001fac <_lseek>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_lseek_r+0x1e>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_lseek_r+0x1e>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	24000494 	.word	0x24000494

08009ad4 <__ascii_mbtowc>:
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	b901      	cbnz	r1, 8009ada <__ascii_mbtowc+0x6>
 8009ad8:	a901      	add	r1, sp, #4
 8009ada:	b142      	cbz	r2, 8009aee <__ascii_mbtowc+0x1a>
 8009adc:	b14b      	cbz	r3, 8009af2 <__ascii_mbtowc+0x1e>
 8009ade:	7813      	ldrb	r3, [r2, #0]
 8009ae0:	600b      	str	r3, [r1, #0]
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	1e10      	subs	r0, r2, #0
 8009ae6:	bf18      	it	ne
 8009ae8:	2001      	movne	r0, #1
 8009aea:	b002      	add	sp, #8
 8009aec:	4770      	bx	lr
 8009aee:	4610      	mov	r0, r2
 8009af0:	e7fb      	b.n	8009aea <__ascii_mbtowc+0x16>
 8009af2:	f06f 0001 	mvn.w	r0, #1
 8009af6:	e7f8      	b.n	8009aea <__ascii_mbtowc+0x16>

08009af8 <memmove>:
 8009af8:	4288      	cmp	r0, r1
 8009afa:	b510      	push	{r4, lr}
 8009afc:	eb01 0402 	add.w	r4, r1, r2
 8009b00:	d902      	bls.n	8009b08 <memmove+0x10>
 8009b02:	4284      	cmp	r4, r0
 8009b04:	4623      	mov	r3, r4
 8009b06:	d807      	bhi.n	8009b18 <memmove+0x20>
 8009b08:	1e43      	subs	r3, r0, #1
 8009b0a:	42a1      	cmp	r1, r4
 8009b0c:	d008      	beq.n	8009b20 <memmove+0x28>
 8009b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b16:	e7f8      	b.n	8009b0a <memmove+0x12>
 8009b18:	4402      	add	r2, r0
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	428a      	cmp	r2, r1
 8009b1e:	d100      	bne.n	8009b22 <memmove+0x2a>
 8009b20:	bd10      	pop	{r4, pc}
 8009b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b2a:	e7f7      	b.n	8009b1c <memmove+0x24>

08009b2c <__malloc_lock>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__malloc_lock+0x8>)
 8009b2e:	f7ff b8b2 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8009b32:	bf00      	nop
 8009b34:	24000488 	.word	0x24000488

08009b38 <__malloc_unlock>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__malloc_unlock+0x8>)
 8009b3a:	f7ff b8ad 	b.w	8008c98 <__retarget_lock_release_recursive>
 8009b3e:	bf00      	nop
 8009b40:	24000488 	.word	0x24000488

08009b44 <_realloc_r>:
 8009b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b48:	4680      	mov	r8, r0
 8009b4a:	4614      	mov	r4, r2
 8009b4c:	460e      	mov	r6, r1
 8009b4e:	b921      	cbnz	r1, 8009b5a <_realloc_r+0x16>
 8009b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	4611      	mov	r1, r2
 8009b56:	f7ff bd13 	b.w	8009580 <_malloc_r>
 8009b5a:	b92a      	cbnz	r2, 8009b68 <_realloc_r+0x24>
 8009b5c:	f7ff fca4 	bl	80094a8 <_free_r>
 8009b60:	4625      	mov	r5, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b68:	f000 f99a 	bl	8009ea0 <_malloc_usable_size_r>
 8009b6c:	4284      	cmp	r4, r0
 8009b6e:	4607      	mov	r7, r0
 8009b70:	d802      	bhi.n	8009b78 <_realloc_r+0x34>
 8009b72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b76:	d812      	bhi.n	8009b9e <_realloc_r+0x5a>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f7ff fd00 	bl	8009580 <_malloc_r>
 8009b80:	4605      	mov	r5, r0
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0ed      	beq.n	8009b62 <_realloc_r+0x1e>
 8009b86:	42bc      	cmp	r4, r7
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	bf28      	it	cs
 8009b8e:	463a      	movcs	r2, r7
 8009b90:	f7fd fb1c 	bl	80071cc <memcpy>
 8009b94:	4631      	mov	r1, r6
 8009b96:	4640      	mov	r0, r8
 8009b98:	f7ff fc86 	bl	80094a8 <_free_r>
 8009b9c:	e7e1      	b.n	8009b62 <_realloc_r+0x1e>
 8009b9e:	4635      	mov	r5, r6
 8009ba0:	e7df      	b.n	8009b62 <_realloc_r+0x1e>

08009ba2 <__sfputc_r>:
 8009ba2:	6893      	ldr	r3, [r2, #8]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	b410      	push	{r4}
 8009baa:	6093      	str	r3, [r2, #8]
 8009bac:	da08      	bge.n	8009bc0 <__sfputc_r+0x1e>
 8009bae:	6994      	ldr	r4, [r2, #24]
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	db01      	blt.n	8009bb8 <__sfputc_r+0x16>
 8009bb4:	290a      	cmp	r1, #10
 8009bb6:	d103      	bne.n	8009bc0 <__sfputc_r+0x1e>
 8009bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbc:	f7fd bff4 	b.w	8007ba8 <__swbuf_r>
 8009bc0:	6813      	ldr	r3, [r2, #0]
 8009bc2:	1c58      	adds	r0, r3, #1
 8009bc4:	6010      	str	r0, [r2, #0]
 8009bc6:	7019      	strb	r1, [r3, #0]
 8009bc8:	4608      	mov	r0, r1
 8009bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <__sfputs_r>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	4614      	mov	r4, r2
 8009bd8:	18d5      	adds	r5, r2, r3
 8009bda:	42ac      	cmp	r4, r5
 8009bdc:	d101      	bne.n	8009be2 <__sfputs_r+0x12>
 8009bde:	2000      	movs	r0, #0
 8009be0:	e007      	b.n	8009bf2 <__sfputs_r+0x22>
 8009be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be6:	463a      	mov	r2, r7
 8009be8:	4630      	mov	r0, r6
 8009bea:	f7ff ffda 	bl	8009ba2 <__sfputc_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d1f3      	bne.n	8009bda <__sfputs_r+0xa>
 8009bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bf4 <_vfiprintf_r>:
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	b09d      	sub	sp, #116	; 0x74
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	4698      	mov	r8, r3
 8009c00:	4606      	mov	r6, r0
 8009c02:	b118      	cbz	r0, 8009c0c <_vfiprintf_r+0x18>
 8009c04:	6983      	ldr	r3, [r0, #24]
 8009c06:	b90b      	cbnz	r3, 8009c0c <_vfiprintf_r+0x18>
 8009c08:	f7fe ffa2 	bl	8008b50 <__sinit>
 8009c0c:	4b89      	ldr	r3, [pc, #548]	; (8009e34 <_vfiprintf_r+0x240>)
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	d11b      	bne.n	8009c4a <_vfiprintf_r+0x56>
 8009c12:	6875      	ldr	r5, [r6, #4]
 8009c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c16:	07d9      	lsls	r1, r3, #31
 8009c18:	d405      	bmi.n	8009c26 <_vfiprintf_r+0x32>
 8009c1a:	89ab      	ldrh	r3, [r5, #12]
 8009c1c:	059a      	lsls	r2, r3, #22
 8009c1e:	d402      	bmi.n	8009c26 <_vfiprintf_r+0x32>
 8009c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c22:	f7ff f838 	bl	8008c96 <__retarget_lock_acquire_recursive>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	071b      	lsls	r3, r3, #28
 8009c2a:	d501      	bpl.n	8009c30 <_vfiprintf_r+0x3c>
 8009c2c:	692b      	ldr	r3, [r5, #16]
 8009c2e:	b9eb      	cbnz	r3, 8009c6c <_vfiprintf_r+0x78>
 8009c30:	4629      	mov	r1, r5
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7fe f80a 	bl	8007c4c <__swsetup_r>
 8009c38:	b1c0      	cbz	r0, 8009c6c <_vfiprintf_r+0x78>
 8009c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c3c:	07dc      	lsls	r4, r3, #31
 8009c3e:	d50e      	bpl.n	8009c5e <_vfiprintf_r+0x6a>
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	b01d      	add	sp, #116	; 0x74
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	4b7b      	ldr	r3, [pc, #492]	; (8009e38 <_vfiprintf_r+0x244>)
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	d101      	bne.n	8009c54 <_vfiprintf_r+0x60>
 8009c50:	68b5      	ldr	r5, [r6, #8]
 8009c52:	e7df      	b.n	8009c14 <_vfiprintf_r+0x20>
 8009c54:	4b79      	ldr	r3, [pc, #484]	; (8009e3c <_vfiprintf_r+0x248>)
 8009c56:	429d      	cmp	r5, r3
 8009c58:	bf08      	it	eq
 8009c5a:	68f5      	ldreq	r5, [r6, #12]
 8009c5c:	e7da      	b.n	8009c14 <_vfiprintf_r+0x20>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	0598      	lsls	r0, r3, #22
 8009c62:	d4ed      	bmi.n	8009c40 <_vfiprintf_r+0x4c>
 8009c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c66:	f7ff f817 	bl	8008c98 <__retarget_lock_release_recursive>
 8009c6a:	e7e9      	b.n	8009c40 <_vfiprintf_r+0x4c>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c70:	2320      	movs	r3, #32
 8009c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c7a:	2330      	movs	r3, #48	; 0x30
 8009c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e40 <_vfiprintf_r+0x24c>
 8009c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c84:	f04f 0901 	mov.w	r9, #1
 8009c88:	4623      	mov	r3, r4
 8009c8a:	469a      	mov	sl, r3
 8009c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c90:	b10a      	cbz	r2, 8009c96 <_vfiprintf_r+0xa2>
 8009c92:	2a25      	cmp	r2, #37	; 0x25
 8009c94:	d1f9      	bne.n	8009c8a <_vfiprintf_r+0x96>
 8009c96:	ebba 0b04 	subs.w	fp, sl, r4
 8009c9a:	d00b      	beq.n	8009cb4 <_vfiprintf_r+0xc0>
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ff94 	bl	8009bd0 <__sfputs_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	f000 80aa 	beq.w	8009e02 <_vfiprintf_r+0x20e>
 8009cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb0:	445a      	add	r2, fp
 8009cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80a2 	beq.w	8009e02 <_vfiprintf_r+0x20e>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc8:	f10a 0a01 	add.w	sl, sl, #1
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd6:	4654      	mov	r4, sl
 8009cd8:	2205      	movs	r2, #5
 8009cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cde:	4858      	ldr	r0, [pc, #352]	; (8009e40 <_vfiprintf_r+0x24c>)
 8009ce0:	f7f6 fb06 	bl	80002f0 <memchr>
 8009ce4:	9a04      	ldr	r2, [sp, #16]
 8009ce6:	b9d8      	cbnz	r0, 8009d20 <_vfiprintf_r+0x12c>
 8009ce8:	06d1      	lsls	r1, r2, #27
 8009cea:	bf44      	itt	mi
 8009cec:	2320      	movmi	r3, #32
 8009cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf2:	0713      	lsls	r3, r2, #28
 8009cf4:	bf44      	itt	mi
 8009cf6:	232b      	movmi	r3, #43	; 0x2b
 8009cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009d00:	2b2a      	cmp	r3, #42	; 0x2a
 8009d02:	d015      	beq.n	8009d30 <_vfiprintf_r+0x13c>
 8009d04:	9a07      	ldr	r2, [sp, #28]
 8009d06:	4654      	mov	r4, sl
 8009d08:	2000      	movs	r0, #0
 8009d0a:	f04f 0c0a 	mov.w	ip, #10
 8009d0e:	4621      	mov	r1, r4
 8009d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d14:	3b30      	subs	r3, #48	; 0x30
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d94e      	bls.n	8009db8 <_vfiprintf_r+0x1c4>
 8009d1a:	b1b0      	cbz	r0, 8009d4a <_vfiprintf_r+0x156>
 8009d1c:	9207      	str	r2, [sp, #28]
 8009d1e:	e014      	b.n	8009d4a <_vfiprintf_r+0x156>
 8009d20:	eba0 0308 	sub.w	r3, r0, r8
 8009d24:	fa09 f303 	lsl.w	r3, r9, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	46a2      	mov	sl, r4
 8009d2e:	e7d2      	b.n	8009cd6 <_vfiprintf_r+0xe2>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	1d19      	adds	r1, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9103      	str	r1, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfbb      	ittet	lt
 8009d3c:	425b      	neglt	r3, r3
 8009d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d42:	9307      	strge	r3, [sp, #28]
 8009d44:	9307      	strlt	r3, [sp, #28]
 8009d46:	bfb8      	it	lt
 8009d48:	9204      	strlt	r2, [sp, #16]
 8009d4a:	7823      	ldrb	r3, [r4, #0]
 8009d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4e:	d10c      	bne.n	8009d6a <_vfiprintf_r+0x176>
 8009d50:	7863      	ldrb	r3, [r4, #1]
 8009d52:	2b2a      	cmp	r3, #42	; 0x2a
 8009d54:	d135      	bne.n	8009dc2 <_vfiprintf_r+0x1ce>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	1d1a      	adds	r2, r3, #4
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	9203      	str	r2, [sp, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb8      	it	lt
 8009d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d66:	3402      	adds	r4, #2
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e50 <_vfiprintf_r+0x25c>
 8009d6e:	7821      	ldrb	r1, [r4, #0]
 8009d70:	2203      	movs	r2, #3
 8009d72:	4650      	mov	r0, sl
 8009d74:	f7f6 fabc 	bl	80002f0 <memchr>
 8009d78:	b140      	cbz	r0, 8009d8c <_vfiprintf_r+0x198>
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	eba0 000a 	sub.w	r0, r0, sl
 8009d80:	fa03 f000 	lsl.w	r0, r3, r0
 8009d84:	9b04      	ldr	r3, [sp, #16]
 8009d86:	4303      	orrs	r3, r0
 8009d88:	3401      	adds	r4, #1
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d90:	482c      	ldr	r0, [pc, #176]	; (8009e44 <_vfiprintf_r+0x250>)
 8009d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d96:	2206      	movs	r2, #6
 8009d98:	f7f6 faaa 	bl	80002f0 <memchr>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d03f      	beq.n	8009e20 <_vfiprintf_r+0x22c>
 8009da0:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <_vfiprintf_r+0x254>)
 8009da2:	bb1b      	cbnz	r3, 8009dec <_vfiprintf_r+0x1f8>
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	3307      	adds	r3, #7
 8009da8:	f023 0307 	bic.w	r3, r3, #7
 8009dac:	3308      	adds	r3, #8
 8009dae:	9303      	str	r3, [sp, #12]
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	443b      	add	r3, r7
 8009db4:	9309      	str	r3, [sp, #36]	; 0x24
 8009db6:	e767      	b.n	8009c88 <_vfiprintf_r+0x94>
 8009db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	e7a5      	b.n	8009d0e <_vfiprintf_r+0x11a>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	3401      	adds	r4, #1
 8009dc6:	9305      	str	r3, [sp, #20]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f04f 0c0a 	mov.w	ip, #10
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd4:	3a30      	subs	r2, #48	; 0x30
 8009dd6:	2a09      	cmp	r2, #9
 8009dd8:	d903      	bls.n	8009de2 <_vfiprintf_r+0x1ee>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0c5      	beq.n	8009d6a <_vfiprintf_r+0x176>
 8009dde:	9105      	str	r1, [sp, #20]
 8009de0:	e7c3      	b.n	8009d6a <_vfiprintf_r+0x176>
 8009de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de6:	4604      	mov	r4, r0
 8009de8:	2301      	movs	r3, #1
 8009dea:	e7f0      	b.n	8009dce <_vfiprintf_r+0x1da>
 8009dec:	ab03      	add	r3, sp, #12
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	462a      	mov	r2, r5
 8009df2:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <_vfiprintf_r+0x258>)
 8009df4:	a904      	add	r1, sp, #16
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7fd fa8e 	bl	8007318 <_printf_float>
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	1c78      	adds	r0, r7, #1
 8009e00:	d1d6      	bne.n	8009db0 <_vfiprintf_r+0x1bc>
 8009e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e04:	07d9      	lsls	r1, r3, #31
 8009e06:	d405      	bmi.n	8009e14 <_vfiprintf_r+0x220>
 8009e08:	89ab      	ldrh	r3, [r5, #12]
 8009e0a:	059a      	lsls	r2, r3, #22
 8009e0c:	d402      	bmi.n	8009e14 <_vfiprintf_r+0x220>
 8009e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e10:	f7fe ff42 	bl	8008c98 <__retarget_lock_release_recursive>
 8009e14:	89ab      	ldrh	r3, [r5, #12]
 8009e16:	065b      	lsls	r3, r3, #25
 8009e18:	f53f af12 	bmi.w	8009c40 <_vfiprintf_r+0x4c>
 8009e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e1e:	e711      	b.n	8009c44 <_vfiprintf_r+0x50>
 8009e20:	ab03      	add	r3, sp, #12
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	462a      	mov	r2, r5
 8009e26:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <_vfiprintf_r+0x258>)
 8009e28:	a904      	add	r1, sp, #16
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7fd fd00 	bl	8007830 <_printf_i>
 8009e30:	e7e4      	b.n	8009dfc <_vfiprintf_r+0x208>
 8009e32:	bf00      	nop
 8009e34:	0800a5d4 	.word	0x0800a5d4
 8009e38:	0800a5f4 	.word	0x0800a5f4
 8009e3c:	0800a5b4 	.word	0x0800a5b4
 8009e40:	0800a76c 	.word	0x0800a76c
 8009e44:	0800a776 	.word	0x0800a776
 8009e48:	08007319 	.word	0x08007319
 8009e4c:	08009bd1 	.word	0x08009bd1
 8009e50:	0800a772 	.word	0x0800a772

08009e54 <_read_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	; (8009e74 <_read_r+0x20>)
 8009e58:	4604      	mov	r4, r0
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	602a      	str	r2, [r5, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f7f8 f842 	bl	8001eec <_read>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_read_r+0x1e>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_read_r+0x1e>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	24000494 	.word	0x24000494

08009e78 <__ascii_wctomb>:
 8009e78:	b149      	cbz	r1, 8009e8e <__ascii_wctomb+0x16>
 8009e7a:	2aff      	cmp	r2, #255	; 0xff
 8009e7c:	bf85      	ittet	hi
 8009e7e:	238a      	movhi	r3, #138	; 0x8a
 8009e80:	6003      	strhi	r3, [r0, #0]
 8009e82:	700a      	strbls	r2, [r1, #0]
 8009e84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e88:	bf98      	it	ls
 8009e8a:	2001      	movls	r0, #1
 8009e8c:	4770      	bx	lr
 8009e8e:	4608      	mov	r0, r1
 8009e90:	4770      	bx	lr

08009e92 <abort>:
 8009e92:	b508      	push	{r3, lr}
 8009e94:	2006      	movs	r0, #6
 8009e96:	f000 f833 	bl	8009f00 <raise>
 8009e9a:	2001      	movs	r0, #1
 8009e9c:	f7f8 f81c 	bl	8001ed8 <_exit>

08009ea0 <_malloc_usable_size_r>:
 8009ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea4:	1f18      	subs	r0, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfbc      	itt	lt
 8009eaa:	580b      	ldrlt	r3, [r1, r0]
 8009eac:	18c0      	addlt	r0, r0, r3
 8009eae:	4770      	bx	lr

08009eb0 <_raise_r>:
 8009eb0:	291f      	cmp	r1, #31
 8009eb2:	b538      	push	{r3, r4, r5, lr}
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	d904      	bls.n	8009ec4 <_raise_r+0x14>
 8009eba:	2316      	movs	r3, #22
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ec6:	b112      	cbz	r2, 8009ece <_raise_r+0x1e>
 8009ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ecc:	b94b      	cbnz	r3, 8009ee2 <_raise_r+0x32>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 f830 	bl	8009f34 <_getpid_r>
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	4620      	mov	r0, r4
 8009eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ede:	f000 b817 	b.w	8009f10 <_kill_r>
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d00a      	beq.n	8009efc <_raise_r+0x4c>
 8009ee6:	1c59      	adds	r1, r3, #1
 8009ee8:	d103      	bne.n	8009ef2 <_raise_r+0x42>
 8009eea:	2316      	movs	r3, #22
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	2001      	movs	r0, #1
 8009ef0:	e7e7      	b.n	8009ec2 <_raise_r+0x12>
 8009ef2:	2400      	movs	r4, #0
 8009ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ef8:	4628      	mov	r0, r5
 8009efa:	4798      	blx	r3
 8009efc:	2000      	movs	r0, #0
 8009efe:	e7e0      	b.n	8009ec2 <_raise_r+0x12>

08009f00 <raise>:
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <raise+0xc>)
 8009f02:	4601      	mov	r1, r0
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	f7ff bfd3 	b.w	8009eb0 <_raise_r>
 8009f0a:	bf00      	nop
 8009f0c:	24000018 	.word	0x24000018

08009f10 <_kill_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d07      	ldr	r5, [pc, #28]	; (8009f30 <_kill_r+0x20>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	602b      	str	r3, [r5, #0]
 8009f1e:	f7f7 ffcb 	bl	8001eb8 <_kill>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d102      	bne.n	8009f2c <_kill_r+0x1c>
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b103      	cbz	r3, 8009f2c <_kill_r+0x1c>
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	bf00      	nop
 8009f30:	24000494 	.word	0x24000494

08009f34 <_getpid_r>:
 8009f34:	f7f7 bfb8 	b.w	8001ea8 <_getpid>

08009f38 <_init>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr

08009f44 <_fini>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	bf00      	nop
 8009f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4a:	bc08      	pop	{r3}
 8009f4c:	469e      	mov	lr, r3
 8009f4e:	4770      	bx	lr
