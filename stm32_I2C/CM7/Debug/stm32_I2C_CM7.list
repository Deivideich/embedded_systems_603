
stm32_I2C_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f6c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007244  08007244  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800724c  0800724c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  24000010  08007264  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400028c  08007264  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001574b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257f  00000000  00000000  00035789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00037d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038dfa  00000000  00000000  00039970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001680b  00000000  00000000  0007276a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178a7c  00000000  00000000  00088f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002019f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d10  00000000  00000000  00201a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080071ec 	.word	0x080071ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080071ec 	.word	0x080071ec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <main+0xc8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa57 	bl	8000be4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc67 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f84f 	bl	80007dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <main+0xc8>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <main+0xc8>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <main+0xc8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f002 fccb 	bl	80030f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f002 fce1 	bl	800312c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <main+0xc8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa29 	bl	8000be4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f99f 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f929 	bl	80009ec <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800079e:	f000 f897 	bl	80008d0 <MX_I2C2_Init>
  MX_DMA_Init();
 80007a2:	f000 f96f 	bl	8000a84 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TX_Buffer [] = "B" ; // DATA to send
 80007a6:	2342      	movs	r3, #66	; 0x42
 80007a8:	813b      	strh	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Master_Transmit(&hi2c2,10,TX_Buffer,1,1000); //Sending in Blocking mode
 80007aa:	f107 0208 	add.w	r2, r7, #8
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	210a      	movs	r1, #10
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0xcc>)
 80007ba:	f002 fd5b 	bl	8003274 <HAL_I2C_Master_Transmit>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007be:	2101      	movs	r1, #1
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <main+0xd0>)
 80007c2:	f002 fc7e 	bl	80030c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ca:	f000 fcaf 	bl	800112c <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c2,10,TX_Buffer,1,1000); //Sending in Blocking mode
 80007ce:	e7ec      	b.n	80007aa <main+0xa2>
 80007d0:	58024400 	.word	0x58024400
 80007d4:	2400002c 	.word	0x2400002c
 80007d8:	58020400 	.word	0x58020400

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fcf6 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 fcf0 	bl	80071dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f003 f8dd 	bl	80039bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <SystemClock_Config+0xec>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <SystemClock_Config+0xec>)
 800080c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <SystemClock_Config+0xec>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <SystemClock_Config+0xf0>)
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <SystemClock_Config+0xf0>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xf0>)
 800082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <SystemClock_Config+0xec>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800085a:	23f0      	movs	r3, #240	; 0xf0
 800085c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800086a:	2308      	movs	r3, #8
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800086e:	2300      	movs	r3, #0
 8000870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4618      	mov	r0, r3
 800087c:	f003 f8f8 	bl	8003a70 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000886:	f000 f9ad 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	233f      	movs	r3, #63	; 0x3f
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000896:	2308      	movs	r3, #8
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2104      	movs	r1, #4
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fd0b 	bl	80042cc <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008bc:	f000 f992 	bl	8000be4 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3770      	adds	r7, #112	; 0x70
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024800 	.word	0x58024800
 80008cc:	58000400 	.word	0x58000400

080008d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C2_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C2_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C2_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C2_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C2_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C2_Init+0x74>)
 800090c:	f002 fc22 	bl	8003154 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 f965 	bl	8000be4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C2_Init+0x74>)
 800091e:	f002 ffb5 	bl	800388c <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 f95c 	bl	8000be4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C2_Init+0x74>)
 8000930:	f002 fff7 	bl	8003922 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f953 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2400002c 	.word	0x2400002c
 8000948:	40005800 	.word	0x40005800
 800094c:	307075b1 	.word	0x307075b1

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <MX_USART2_UART_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800095c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000974:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000978:	220c      	movs	r2, #12
 800097a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800099c:	f005 fb8a 	bl	80060b4 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80009a6:	f000 f91d 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 80009ae:	f006 fb27 	bl	8007000 <HAL_UARTEx_SetTxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80009b8:	f000 f914 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 80009c0:	f006 fb5c 	bl	800707c <HAL_UARTEx_SetRxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80009ca:	f000 f90b 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 80009d0:	f006 fadd 	bl	8006f8e <HAL_UARTEx_DisableFifoMode>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80009da:	f000 f903 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000168 	.word	0x24000168
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_USART3_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a36:	f005 fb3d 	bl	80060b4 <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f8d0 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a48:	f006 fada 	bl	8007000 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f8c7 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f006 fb0f 	bl	800707c <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f8be 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a6a:	f006 fa90 	bl	8006f8e <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f8b6 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240001f8 	.word	0x240001f8
 8000a80:	40004800 	.word	0x40004800

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_DMA_Init+0x4c>)
 8000a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a90:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <MX_DMA_Init+0x4c>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_DMA_Init+0x4c>)
 8000a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	200b      	movs	r0, #11
 8000aae:	f000 fc48 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f000 fc5f 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	200c      	movs	r0, #12
 8000abe:	f000 fc40 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ac2:	200c      	movs	r0, #12
 8000ac4:	f000 fc57 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b68:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <MX_GPIO_Init+0x104>)
 8000b6a:	f002 fa91 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_TEST_GPIO_Port, Pin_TEST_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2110      	movs	r1, #16
 8000b72:	481a      	ldr	r0, [pc, #104]	; (8000bdc <MX_GPIO_Init+0x108>)
 8000b74:	f002 fa8c 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b8e:	f002 f8cf 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b92:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0x104>)
 8000bac:	f002 f8c0 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_TEST_Pin */
  GPIO_InitStruct.Pin = Pin_TEST_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_TEST_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_GPIO_Init+0x108>)
 8000bc8:	f002 f8b2 	bl	8002d30 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	58020c00 	.word	0x58020c00
 8000be0:	58020800 	.word	0x58020800

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_MspInit+0x30>)
 8000bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x30>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x30>)
 8000c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	58024400 	.word	0x58024400

08000c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0b8      	sub	sp, #224	; 0xe0
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	22bc      	movs	r2, #188	; 0xbc
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f006 fac9 	bl	80071dc <memset>
  if(hi2c->Instance==I2C2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a56      	ldr	r2, [pc, #344]	; (8000da8 <HAL_I2C_MspInit+0x184>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	f040 80a5 	bne.w	8000da0 <HAL_I2C_MspInit+0x17c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c56:	2308      	movs	r3, #8
 8000c58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 febd 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000c70:	f7ff ffb8 	bl	8000be4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <HAL_I2C_MspInit+0x188>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a4c      	ldr	r2, [pc, #304]	; (8000dac <HAL_I2C_MspInit+0x188>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_I2C_MspInit+0x188>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	483d      	ldr	r0, [pc, #244]	; (8000db0 <HAL_I2C_MspInit+0x18c>)
 8000cba:	f002 f839 	bl	8002d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <HAL_I2C_MspInit+0x188>)
 8000cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc4:	4a39      	ldr	r2, [pc, #228]	; (8000dac <HAL_I2C_MspInit+0x188>)
 8000cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <HAL_I2C_MspInit+0x188>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream0;
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000cde:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <HAL_I2C_MspInit+0x194>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000ce4:	2224      	movs	r2, #36	; 0x24
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce8:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000d1a:	4826      	ldr	r0, [pc, #152]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d1c:	f000 fb46 	bl	80013ac <HAL_DMA_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8000d26:	f7ff ff5d 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d30:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <HAL_I2C_MspInit+0x190>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream1;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_I2C_MspInit+0x19c>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d3e:	2223      	movs	r2, #35	; 0x23
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d76:	f000 fb19 	bl	80013ac <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8000d80:	f7ff ff30 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_I2C_MspInit+0x198>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2021      	movs	r0, #33	; 0x21
 8000d96:	f000 fad4 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d9a:	2021      	movs	r0, #33	; 0x21
 8000d9c:	f000 faeb 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	37e0      	adds	r7, #224	; 0xe0
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40005800 	.word	0x40005800
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58020400 	.word	0x58020400
 8000db4:	24000078 	.word	0x24000078
 8000db8:	40020010 	.word	0x40020010
 8000dbc:	240000f0 	.word	0x240000f0
 8000dc0:	40020028 	.word	0x40020028

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ba      	sub	sp, #232	; 0xe8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	22bc      	movs	r2, #188	; 0xbc
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 f9f9 	bl	80071dc <memset>
  if(huart->Instance==USART2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_UART_MspInit+0x150>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d142      	bne.n	8000e7a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fdee 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e0e:	f7ff fee9 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e18:	4a3f      	ldr	r2, [pc, #252]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e22:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e66:	2307      	movs	r3, #7
 8000e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e70:	4619      	mov	r1, r3
 8000e72:	482a      	ldr	r0, [pc, #168]	; (8000f1c <HAL_UART_MspInit+0x158>)
 8000e74:	f001 ff5c 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e78:	e047      	b.n	8000f0a <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <HAL_UART_MspInit+0x15c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d142      	bne.n	8000f0a <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fda6 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000e9e:	f7ff fea1 	bl	8000be4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_UART_MspInit+0x154>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0x158>)
 8000f06:	f001 ff13 	bl	8002d30 <HAL_GPIO_Init>
}
 8000f0a:	bf00      	nop
 8000f0c:	37e8      	adds	r7, #232	; 0xe8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004400 	.word	0x40004400
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020c00 	.word	0x58020c00
 8000f20:	40004800 	.word	0x40004800

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f8bc 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA1_Stream0_IRQHandler+0x10>)
 8000f7e:	f000 fd71 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000078 	.word	0x24000078

08000f8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA1_Stream1_IRQHandler+0x10>)
 8000f92:	f000 fd67 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	240000f0 	.word	0x240000f0

08000fa0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <I2C2_EV_IRQHandler+0x10>)
 8000fa6:	f002 fa59 	bl	800345c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2400002c 	.word	0x2400002c

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff fb10 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f006 f8d7 	bl	8007194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fb8f 	bl	8000708 <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ff8:	08007254 	.word	0x08007254
  ldr r2, =_sbss
 8000ffc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001000:	2400028c 	.word	0x2400028c

08001004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f98c 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001014:	f003 fb10 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	; (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	200f      	movs	r0, #15
 8001054:	f000 f814 	bl	8001080 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fdc5 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	08007204 	.word	0x08007204
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e021      	b.n	80010d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_InitTick+0x64>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f971 	bl	8001392 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f93b 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x68>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2400000c 	.word	0x2400000c
 80010e4:	24000000 	.word	0x24000000
 80010e8:	24000008 	.word	0x24000008

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2400000c 	.word	0x2400000c
 8001110:	24000288 	.word	0x24000288

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	24000288 	.word	0x24000288

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2400000c 	.word	0x2400000c

08001174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetREVID+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0c1b      	lsrs	r3, r3, #16
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	5c001000 	.word	0x5c001000

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	05fa0000 	.word	0x05fa0000

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff feae 	bl	8001114 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e316      	b.n	80019f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a66      	ldr	r2, [pc, #408]	; (8001564 <HAL_DMA_Init+0x1b8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d04a      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_DMA_Init+0x1bc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d045      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_DMA_Init+0x1c0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d040      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a62      	ldr	r2, [pc, #392]	; (8001570 <HAL_DMA_Init+0x1c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d03b      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_DMA_Init+0x1c8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d036      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_DMA_Init+0x1cc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d031      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_DMA_Init+0x1d0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02c      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <HAL_DMA_Init+0x1d4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d027      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_DMA_Init+0x1d8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d022      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a59      	ldr	r2, [pc, #356]	; (8001588 <HAL_DMA_Init+0x1dc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d01d      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_DMA_Init+0x1e0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d018      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_DMA_Init+0x1e4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_DMA_Init+0x1e8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00e      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a53      	ldr	r2, [pc, #332]	; (8001598 <HAL_DMA_Init+0x1ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d009      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_DMA_Init+0x1f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_DMA_Init+0x1f4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Init+0xbc>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_DMA_Init+0xbe>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 813b 	beq.w	80016e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a37      	ldr	r2, [pc, #220]	; (8001564 <HAL_DMA_Init+0x1b8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d04a      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a36      	ldr	r2, [pc, #216]	; (8001568 <HAL_DMA_Init+0x1bc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d045      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a34      	ldr	r2, [pc, #208]	; (800156c <HAL_DMA_Init+0x1c0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d040      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a33      	ldr	r2, [pc, #204]	; (8001570 <HAL_DMA_Init+0x1c4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d03b      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_DMA_Init+0x1c8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d036      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_DMA_Init+0x1cc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d031      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2e      	ldr	r2, [pc, #184]	; (800157c <HAL_DMA_Init+0x1d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d02c      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_DMA_Init+0x1d4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d027      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <HAL_DMA_Init+0x1d8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d022      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <HAL_DMA_Init+0x1dc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d01d      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_DMA_Init+0x1e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d018      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_DMA_Init+0x1e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_DMA_Init+0x1e8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00e      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a24      	ldr	r2, [pc, #144]	; (8001598 <HAL_DMA_Init+0x1ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d009      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_DMA_Init+0x1f0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_DMA_Init+0x1f4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d108      	bne.n	8001532 <HAL_DMA_Init+0x186>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e007      	b.n	8001542 <HAL_DMA_Init+0x196>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001542:	e02f      	b.n	80015a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001544:	f7ff fde6 	bl	8001114 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b05      	cmp	r3, #5
 8001550:	d928      	bls.n	80015a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e246      	b.n	80019f2 <HAL_DMA_Init+0x646>
 8001564:	40020010 	.word	0x40020010
 8001568:	40020028 	.word	0x40020028
 800156c:	40020040 	.word	0x40020040
 8001570:	40020058 	.word	0x40020058
 8001574:	40020070 	.word	0x40020070
 8001578:	40020088 	.word	0x40020088
 800157c:	400200a0 	.word	0x400200a0
 8001580:	400200b8 	.word	0x400200b8
 8001584:	40020410 	.word	0x40020410
 8001588:	40020428 	.word	0x40020428
 800158c:	40020440 	.word	0x40020440
 8001590:	40020458 	.word	0x40020458
 8001594:	40020470 	.word	0x40020470
 8001598:	40020488 	.word	0x40020488
 800159c:	400204a0 	.word	0x400204a0
 80015a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1c8      	bne.n	8001544 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4b83      	ldr	r3, [pc, #524]	; (80017cc <HAL_DMA_Init+0x420>)
 80015be:	4013      	ands	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d107      	bne.n	8001608 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4313      	orrs	r3, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_DMA_Init+0x424>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <HAL_DMA_Init+0x428>)
 800160e:	4013      	ands	r3, r2
 8001610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001614:	d328      	bcc.n	8001668 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b28      	cmp	r3, #40	; 0x28
 800161c:	d903      	bls.n	8001626 <HAL_DMA_Init+0x27a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b2e      	cmp	r3, #46	; 0x2e
 8001624:	d917      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b3e      	cmp	r3, #62	; 0x3e
 800162c:	d903      	bls.n	8001636 <HAL_DMA_Init+0x28a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b42      	cmp	r3, #66	; 0x42
 8001634:	d90f      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b46      	cmp	r3, #70	; 0x46
 800163c:	d903      	bls.n	8001646 <HAL_DMA_Init+0x29a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b48      	cmp	r3, #72	; 0x48
 8001644:	d907      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b4e      	cmp	r3, #78	; 0x4e
 800164c:	d905      	bls.n	800165a <HAL_DMA_Init+0x2ae>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b52      	cmp	r3, #82	; 0x52
 8001654:	d801      	bhi.n	800165a <HAL_DMA_Init+0x2ae>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_DMA_Init+0x2b0>
 800165a:	2300      	movs	r3, #0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001666:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f023 0307 	bic.w	r3, r3, #7
 800167e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b04      	cmp	r3, #4
 8001690:	d117      	bne.n	80016c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00e      	beq.n	80016c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f001 f9b9 	bl	8002a1c <DMA_CheckFifoParam>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e197      	b.n	80019f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 f8f4 	bl	80028b8 <DMA_CalcBaseAndBitshift>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	223f      	movs	r2, #63	; 0x3f
 80016de:	409a      	lsls	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e0cd      	b.n	8001882 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <HAL_DMA_Init+0x42c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_DMA_Init+0x430>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01d      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_DMA_Init+0x434>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d018      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <HAL_DMA_Init+0x438>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <HAL_DMA_Init+0x43c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00e      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <HAL_DMA_Init+0x440>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d009      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <HAL_DMA_Init+0x444>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d004      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_DMA_Init+0x448>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_DMA_Init+0x38e>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_DMA_Init+0x390>
 800173a:	2300      	movs	r3, #0
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8097 	beq.w	8001870 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_DMA_Init+0x42c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d021      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Init+0x430>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01c      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_DMA_Init+0x434>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d017      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Init+0x438>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d012      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_DMA_Init+0x43c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Init+0x440>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_DMA_Init+0x444>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d003      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_DMA_Init+0x448>)
 800178e:	4293      	cmp	r3, r2
 8001790:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_DMA_Init+0x44c>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d020      	beq.n	80017fc <HAL_DMA_Init+0x450>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d102      	bne.n	80017c8 <HAL_DMA_Init+0x41c>
 80017c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c6:	e01a      	b.n	80017fe <HAL_DMA_Init+0x452>
 80017c8:	2300      	movs	r3, #0
 80017ca:	e018      	b.n	80017fe <HAL_DMA_Init+0x452>
 80017cc:	fe10803f 	.word	0xfe10803f
 80017d0:	5c001000 	.word	0x5c001000
 80017d4:	ffff0000 	.word	0xffff0000
 80017d8:	58025408 	.word	0x58025408
 80017dc:	5802541c 	.word	0x5802541c
 80017e0:	58025430 	.word	0x58025430
 80017e4:	58025444 	.word	0x58025444
 80017e8:	58025458 	.word	0x58025458
 80017ec:	5802546c 	.word	0x5802546c
 80017f0:	58025480 	.word	0x58025480
 80017f4:	58025494 	.word	0x58025494
 80017f8:	fffe000f 	.word	0xfffe000f
 80017fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68d2      	ldr	r2, [r2, #12]
 8001802:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800180c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800181c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800182c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_DMA_Init+0x650>)
 8001844:	4413      	add	r3, r2
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_DMA_Init+0x654>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 f82f 	bl	80028b8 <DMA_CalcBaseAndBitshift>
 800185a:	4603      	mov	r3, r0
 800185c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e008      	b.n	8001882 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0b7      	b.n	80019f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5f      	ldr	r2, [pc, #380]	; (8001a04 <HAL_DMA_Init+0x658>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d072      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <HAL_DMA_Init+0x65c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d06d      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_DMA_Init+0x660>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d068      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <HAL_DMA_Init+0x664>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d063      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <HAL_DMA_Init+0x668>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d05e      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a57      	ldr	r2, [pc, #348]	; (8001a18 <HAL_DMA_Init+0x66c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d059      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_DMA_Init+0x670>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d054      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_DMA_Init+0x674>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d04f      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_DMA_Init+0x678>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04a      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_DMA_Init+0x67c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d045      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_DMA_Init+0x680>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d040      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_DMA_Init+0x684>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d03b      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_DMA_Init+0x688>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d036      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_DMA_Init+0x68c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d031      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_DMA_Init+0x690>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d02c      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_DMA_Init+0x694>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d027      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_DMA_Init+0x698>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d022      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_DMA_Init+0x69c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01d      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_DMA_Init+0x6a0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d018      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_DMA_Init+0x6a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_DMA_Init+0x6a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <HAL_DMA_Init+0x6ac>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d009      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_DMA_Init+0x6b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_DMA_Init+0x6b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_DMA_Init+0x5ca>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_DMA_Init+0x5cc>
 8001976:	2300      	movs	r3, #0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f001 f8c9 	bl	8002b14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b80      	cmp	r3, #128	; 0x80
 8001988:	d102      	bne.n	8001990 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <HAL_DMA_Init+0x624>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d80c      	bhi.n	80019d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 f946 	bl	8002c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e008      	b.n	80019e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	a7fdabf8 	.word	0xa7fdabf8
 8001a00:	cccccccd 	.word	0xcccccccd
 8001a04:	40020010 	.word	0x40020010
 8001a08:	40020028 	.word	0x40020028
 8001a0c:	40020040 	.word	0x40020040
 8001a10:	40020058 	.word	0x40020058
 8001a14:	40020070 	.word	0x40020070
 8001a18:	40020088 	.word	0x40020088
 8001a1c:	400200a0 	.word	0x400200a0
 8001a20:	400200b8 	.word	0x400200b8
 8001a24:	40020410 	.word	0x40020410
 8001a28:	40020428 	.word	0x40020428
 8001a2c:	40020440 	.word	0x40020440
 8001a30:	40020458 	.word	0x40020458
 8001a34:	40020470 	.word	0x40020470
 8001a38:	40020488 	.word	0x40020488
 8001a3c:	400204a0 	.word	0x400204a0
 8001a40:	400204b8 	.word	0x400204b8
 8001a44:	58025408 	.word	0x58025408
 8001a48:	5802541c 	.word	0x5802541c
 8001a4c:	58025430 	.word	0x58025430
 8001a50:	58025444 	.word	0x58025444
 8001a54:	58025458 	.word	0x58025458
 8001a58:	5802546c 	.word	0x5802546c
 8001a5c:	58025480 	.word	0x58025480
 8001a60:	58025494 	.word	0x58025494

08001a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a70:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_DMA_IRQHandler+0x1ac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_DMA_IRQHandler+0x1b0>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a9b      	lsrs	r3, r3, #10
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <HAL_DMA_IRQHandler+0x1b4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04a      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_DMA_IRQHandler+0x1b8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d045      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_DMA_IRQHandler+0x1bc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d040      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_DMA_IRQHandler+0x1c0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d03b      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_DMA_IRQHandler+0x1c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d036      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_IRQHandler+0x1c8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_DMA_IRQHandler+0x1cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d02c      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_DMA_IRQHandler+0x1d0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d027      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_DMA_IRQHandler+0x1d4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_DMA_IRQHandler+0x1d8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a50      	ldr	r2, [pc, #320]	; (8001c40 <HAL_DMA_IRQHandler+0x1dc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_DMA_IRQHandler+0x1e0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <HAL_DMA_IRQHandler+0x1e4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_DMA_IRQHandler+0x1e8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_DMA_IRQHandler+0x1ec>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xd2>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a48      	ldr	r2, [pc, #288]	; (8001c54 <HAL_DMA_IRQHandler+0x1f0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_DMA_IRQHandler+0xd6>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_IRQHandler+0xd8>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 842b 	beq.w	8002398 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80a2 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_DMA_IRQHandler+0x1b4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d04a      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2d      	ldr	r2, [pc, #180]	; (8001c1c <HAL_DMA_IRQHandler+0x1b8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d045      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <HAL_DMA_IRQHandler+0x1bc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d040      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <HAL_DMA_IRQHandler+0x1c0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d03b      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <HAL_DMA_IRQHandler+0x1c4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d036      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_DMA_IRQHandler+0x1c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d031      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <HAL_DMA_IRQHandler+0x1cc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02c      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_DMA_IRQHandler+0x1d0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d027      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_DMA_IRQHandler+0x1d4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d022      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_DMA_IRQHandler+0x1d8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01d      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_DMA_IRQHandler+0x1dc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d018      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_DMA_IRQHandler+0x1e0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_DMA_IRQHandler+0x1e4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1b      	ldr	r2, [pc, #108]	; (8001c4c <HAL_DMA_IRQHandler+0x1e8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_DMA_IRQHandler+0x1ec>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x194>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_DMA_IRQHandler+0x1f0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d12f      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x1f4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e02e      	b.n	8001c6c <HAL_DMA_IRQHandler+0x208>
 8001c0e:	bf00      	nop
 8001c10:	24000000 	.word	0x24000000
 8001c14:	1b4e81b5 	.word	0x1b4e81b5
 8001c18:	40020010 	.word	0x40020010
 8001c1c:	40020028 	.word	0x40020028
 8001c20:	40020040 	.word	0x40020040
 8001c24:	40020058 	.word	0x40020058
 8001c28:	40020070 	.word	0x40020070
 8001c2c:	40020088 	.word	0x40020088
 8001c30:	400200a0 	.word	0x400200a0
 8001c34:	400200b8 	.word	0x400200b8
 8001c38:	40020410 	.word	0x40020410
 8001c3c:	40020428 	.word	0x40020428
 8001c40:	40020440 	.word	0x40020440
 8001c44:	40020458 	.word	0x40020458
 8001c48:	40020470 	.word	0x40020470
 8001c4c:	40020488 	.word	0x40020488
 8001c50:	400204a0 	.word	0x400204a0
 8001c54:	400204b8 	.word	0x400204b8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d015      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2208      	movs	r2, #8
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d06e      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a69      	ldr	r2, [pc, #420]	; (8001e5c <HAL_DMA_IRQHandler+0x3f8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a67      	ldr	r2, [pc, #412]	; (8001e60 <HAL_DMA_IRQHandler+0x3fc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d045      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_DMA_IRQHandler+0x400>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d040      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a64      	ldr	r2, [pc, #400]	; (8001e68 <HAL_DMA_IRQHandler+0x404>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_DMA_IRQHandler+0x408>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d036      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a61      	ldr	r2, [pc, #388]	; (8001e70 <HAL_DMA_IRQHandler+0x40c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a60      	ldr	r2, [pc, #384]	; (8001e74 <HAL_DMA_IRQHandler+0x410>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02c      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5e      	ldr	r2, [pc, #376]	; (8001e78 <HAL_DMA_IRQHandler+0x414>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <HAL_DMA_IRQHandler+0x418>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5b      	ldr	r2, [pc, #364]	; (8001e80 <HAL_DMA_IRQHandler+0x41c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_DMA_IRQHandler+0x420>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_DMA_IRQHandler+0x424>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_DMA_IRQHandler+0x428>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_DMA_IRQHandler+0x42c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_DMA_IRQHandler+0x430>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2ee>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <HAL_DMA_IRQHandler+0x434>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10a      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x304>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e003      	b.n	8001d70 <HAL_DMA_IRQHandler+0x30c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0202 	orr.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2204      	movs	r2, #4
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 808f 	beq.w	8001ec4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <HAL_DMA_IRQHandler+0x3f8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d04a      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <HAL_DMA_IRQHandler+0x3fc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d045      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <HAL_DMA_IRQHandler+0x400>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d040      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_DMA_IRQHandler+0x404>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d03b      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_DMA_IRQHandler+0x408>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d036      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_DMA_IRQHandler+0x40c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d031      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <HAL_DMA_IRQHandler+0x410>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d02c      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_DMA_IRQHandler+0x414>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d027      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a20      	ldr	r2, [pc, #128]	; (8001e7c <HAL_DMA_IRQHandler+0x418>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_DMA_IRQHandler+0x41c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01d      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_DMA_IRQHandler+0x420>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d018      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_DMA_IRQHandler+0x424>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_DMA_IRQHandler+0x428>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_DMA_IRQHandler+0x42c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_DMA_IRQHandler+0x430>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x3e2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_DMA_IRQHandler+0x434>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12a      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x438>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e023      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x440>
 8001e5c:	40020010 	.word	0x40020010
 8001e60:	40020028 	.word	0x40020028
 8001e64:	40020040 	.word	0x40020040
 8001e68:	40020058 	.word	0x40020058
 8001e6c:	40020070 	.word	0x40020070
 8001e70:	40020088 	.word	0x40020088
 8001e74:	400200a0 	.word	0x400200a0
 8001e78:	400200b8 	.word	0x400200b8
 8001e7c:	40020410 	.word	0x40020410
 8001e80:	40020428 	.word	0x40020428
 8001e84:	40020440 	.word	0x40020440
 8001e88:	40020458 	.word	0x40020458
 8001e8c:	40020470 	.word	0x40020470
 8001e90:	40020488 	.word	0x40020488
 8001e94:	400204a0 	.word	0x400204a0
 8001e98:	400204b8 	.word	0x400204b8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2210      	movs	r2, #16
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a6 	beq.w	8002026 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a85      	ldr	r2, [pc, #532]	; (80020f4 <HAL_DMA_IRQHandler+0x690>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04a      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a83      	ldr	r2, [pc, #524]	; (80020f8 <HAL_DMA_IRQHandler+0x694>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d045      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a82      	ldr	r2, [pc, #520]	; (80020fc <HAL_DMA_IRQHandler+0x698>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d040      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a80      	ldr	r2, [pc, #512]	; (8002100 <HAL_DMA_IRQHandler+0x69c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d03b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7f      	ldr	r2, [pc, #508]	; (8002104 <HAL_DMA_IRQHandler+0x6a0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d036      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a7d      	ldr	r2, [pc, #500]	; (8002108 <HAL_DMA_IRQHandler+0x6a4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d031      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	; (800210c <HAL_DMA_IRQHandler+0x6a8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d02c      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7a      	ldr	r2, [pc, #488]	; (8002110 <HAL_DMA_IRQHandler+0x6ac>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d027      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a79      	ldr	r2, [pc, #484]	; (8002114 <HAL_DMA_IRQHandler+0x6b0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a77      	ldr	r2, [pc, #476]	; (8002118 <HAL_DMA_IRQHandler+0x6b4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01d      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a76      	ldr	r2, [pc, #472]	; (800211c <HAL_DMA_IRQHandler+0x6b8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d018      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a74      	ldr	r2, [pc, #464]	; (8002120 <HAL_DMA_IRQHandler+0x6bc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a73      	ldr	r2, [pc, #460]	; (8002124 <HAL_DMA_IRQHandler+0x6c0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a71      	ldr	r2, [pc, #452]	; (8002128 <HAL_DMA_IRQHandler+0x6c4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a70      	ldr	r2, [pc, #448]	; (800212c <HAL_DMA_IRQHandler+0x6c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x516>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_DMA_IRQHandler+0x6cc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10a      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x52c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e009      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x540>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03e      	beq.n	8002026 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d018      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d108      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d024      	beq.n	8002026 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e01f      	b.n	8002026 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01b      	beq.n	8002026 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e016      	b.n	8002026 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2220      	movs	r2, #32
 8002030:	409a      	lsls	r2, r3
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8110 	beq.w	800225c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <HAL_DMA_IRQHandler+0x690>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <HAL_DMA_IRQHandler+0x694>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d045      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_DMA_IRQHandler+0x698>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d040      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_DMA_IRQHandler+0x69c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d03b      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <HAL_DMA_IRQHandler+0x6a0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d036      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_DMA_IRQHandler+0x6a4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d031      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <HAL_DMA_IRQHandler+0x6a8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02c      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_DMA_IRQHandler+0x6ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d027      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_DMA_IRQHandler+0x6b0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d022      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_DMA_IRQHandler+0x6b4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d01d      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_DMA_IRQHandler+0x6b8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_DMA_IRQHandler+0x6bc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <HAL_DMA_IRQHandler+0x6c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_DMA_IRQHandler+0x6c4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_DMA_IRQHandler+0x6c8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_IRQHandler+0x678>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a16      	ldr	r2, [pc, #88]	; (8002130 <HAL_DMA_IRQHandler+0x6cc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d12b      	bne.n	8002134 <HAL_DMA_IRQHandler+0x6d0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	e02a      	b.n	8002148 <HAL_DMA_IRQHandler+0x6e4>
 80020f2:	bf00      	nop
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8087 	beq.w	800225c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2220      	movs	r2, #32
 8002158:	409a      	lsls	r2, r3
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b04      	cmp	r3, #4
 8002168:	d139      	bne.n	80021de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0216 	bic.w	r2, r2, #22
 8002178:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002188:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <HAL_DMA_IRQHandler+0x736>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0208 	bic.w	r2, r2, #8
 80021a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	223f      	movs	r2, #63	; 0x3f
 80021b4:	409a      	lsls	r2, r3
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 834a 	beq.w	8002868 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
          }
          return;
 80021dc:	e344      	b.n	8002868 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d02c      	beq.n	800225c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e027      	b.n	800225c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e01e      	b.n	800225c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0210 	bic.w	r2, r2, #16
 800223a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8306 	beq.w	8002872 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8088 	beq.w	8002384 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_DMA_IRQHandler+0xa08>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04a      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a79      	ldr	r2, [pc, #484]	; (8002470 <HAL_DMA_IRQHandler+0xa0c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d045      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a77      	ldr	r2, [pc, #476]	; (8002474 <HAL_DMA_IRQHandler+0xa10>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d040      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a76      	ldr	r2, [pc, #472]	; (8002478 <HAL_DMA_IRQHandler+0xa14>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d03b      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a74      	ldr	r2, [pc, #464]	; (800247c <HAL_DMA_IRQHandler+0xa18>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d036      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a73      	ldr	r2, [pc, #460]	; (8002480 <HAL_DMA_IRQHandler+0xa1c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d031      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a71      	ldr	r2, [pc, #452]	; (8002484 <HAL_DMA_IRQHandler+0xa20>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02c      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a70      	ldr	r2, [pc, #448]	; (8002488 <HAL_DMA_IRQHandler+0xa24>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_DMA_IRQHandler+0xa28>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6d      	ldr	r2, [pc, #436]	; (8002490 <HAL_DMA_IRQHandler+0xa2c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d01d      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6b      	ldr	r2, [pc, #428]	; (8002494 <HAL_DMA_IRQHandler+0xa30>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <HAL_DMA_IRQHandler+0xa34>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a68      	ldr	r2, [pc, #416]	; (800249c <HAL_DMA_IRQHandler+0xa38>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_DMA_IRQHandler+0xa3c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a65      	ldr	r2, [pc, #404]	; (80024a4 <HAL_DMA_IRQHandler+0xa40>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_DMA_IRQHandler+0x8b8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <HAL_DMA_IRQHandler+0xa44>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <HAL_DMA_IRQHandler+0x8ca>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e007      	b.n	800233e <HAL_DMA_IRQHandler+0x8da>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	429a      	cmp	r2, r3
 8002348:	d307      	bcc.n	800235a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f2      	bne.n	800233e <HAL_DMA_IRQHandler+0x8da>
 8002358:	e000      	b.n	800235c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800235a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002372:	e003      	b.n	800237c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8272 	beq.w	8002872 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
 8002396:	e26c      	b.n	8002872 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a43      	ldr	r2, [pc, #268]	; (80024ac <HAL_DMA_IRQHandler+0xa48>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d022      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_DMA_IRQHandler+0xa4c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d01d      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <HAL_DMA_IRQHandler+0xa50>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d018      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_DMA_IRQHandler+0xa54>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <HAL_DMA_IRQHandler+0xa58>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <HAL_DMA_IRQHandler+0xa5c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_DMA_IRQHandler+0xa60>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x984>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <HAL_DMA_IRQHandler+0xa64>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_DMA_IRQHandler+0x988>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_DMA_IRQHandler+0x98a>
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 823f 	beq.w	8002872 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2204      	movs	r2, #4
 8002406:	409a      	lsls	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80cd 	beq.w	80025ac <HAL_DMA_IRQHandler+0xb48>
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80c7 	beq.w	80025ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2204      	movs	r2, #4
 8002428:	409a      	lsls	r2, r3
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d049      	beq.n	80024cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8210 	beq.w	800286c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002454:	e20a      	b.n	800286c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8206 	beq.w	800286c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002468:	e200      	b.n	800286c <HAL_DMA_IRQHandler+0xe08>
 800246a:	bf00      	nop
 800246c:	40020010 	.word	0x40020010
 8002470:	40020028 	.word	0x40020028
 8002474:	40020040 	.word	0x40020040
 8002478:	40020058 	.word	0x40020058
 800247c:	40020070 	.word	0x40020070
 8002480:	40020088 	.word	0x40020088
 8002484:	400200a0 	.word	0x400200a0
 8002488:	400200b8 	.word	0x400200b8
 800248c:	40020410 	.word	0x40020410
 8002490:	40020428 	.word	0x40020428
 8002494:	40020440 	.word	0x40020440
 8002498:	40020458 	.word	0x40020458
 800249c:	40020470 	.word	0x40020470
 80024a0:	40020488 	.word	0x40020488
 80024a4:	400204a0 	.word	0x400204a0
 80024a8:	400204b8 	.word	0x400204b8
 80024ac:	58025408 	.word	0x58025408
 80024b0:	5802541c 	.word	0x5802541c
 80024b4:	58025430 	.word	0x58025430
 80024b8:	58025444 	.word	0x58025444
 80024bc:	58025458 	.word	0x58025458
 80024c0:	5802546c 	.word	0x5802546c
 80024c4:	58025480 	.word	0x58025480
 80024c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d160      	bne.n	8002598 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7f      	ldr	r2, [pc, #508]	; (80026d8 <HAL_DMA_IRQHandler+0xc74>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d04a      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7d      	ldr	r2, [pc, #500]	; (80026dc <HAL_DMA_IRQHandler+0xc78>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d045      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7c      	ldr	r2, [pc, #496]	; (80026e0 <HAL_DMA_IRQHandler+0xc7c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d040      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7a      	ldr	r2, [pc, #488]	; (80026e4 <HAL_DMA_IRQHandler+0xc80>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d03b      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a79      	ldr	r2, [pc, #484]	; (80026e8 <HAL_DMA_IRQHandler+0xc84>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d036      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a77      	ldr	r2, [pc, #476]	; (80026ec <HAL_DMA_IRQHandler+0xc88>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d031      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a76      	ldr	r2, [pc, #472]	; (80026f0 <HAL_DMA_IRQHandler+0xc8c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d02c      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <HAL_DMA_IRQHandler+0xc90>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d027      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	; (80026f8 <HAL_DMA_IRQHandler+0xc94>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_DMA_IRQHandler+0xc98>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01d      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a70      	ldr	r2, [pc, #448]	; (8002700 <HAL_DMA_IRQHandler+0xc9c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d018      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_DMA_IRQHandler+0xca0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6d      	ldr	r2, [pc, #436]	; (8002708 <HAL_DMA_IRQHandler+0xca4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d00e      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6b      	ldr	r2, [pc, #428]	; (800270c <HAL_DMA_IRQHandler+0xca8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6a      	ldr	r2, [pc, #424]	; (8002710 <HAL_DMA_IRQHandler+0xcac>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_DMA_IRQHandler+0xb12>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	; (8002714 <HAL_DMA_IRQHandler+0xcb0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d108      	bne.n	8002588 <HAL_DMA_IRQHandler+0xb24>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0208 	bic.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e007      	b.n	8002598 <HAL_DMA_IRQHandler+0xb34>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8165 	beq.w	800286c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025aa:	e15f      	b.n	800286c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2202      	movs	r2, #2
 80025b6:	409a      	lsls	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80c5 	beq.w	800274c <HAL_DMA_IRQHandler+0xce8>
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80bf 	beq.w	800274c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2202      	movs	r2, #2
 80025d8:	409a      	lsls	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d018      	beq.n	800261a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 813a 	beq.w	8002870 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002604:	e134      	b.n	8002870 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8130 	beq.w	8002870 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002618:	e12a      	b.n	8002870 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 8089 	bne.w	8002738 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <HAL_DMA_IRQHandler+0xc74>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04a      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a29      	ldr	r2, [pc, #164]	; (80026dc <HAL_DMA_IRQHandler+0xc78>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d045      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_DMA_IRQHandler+0xc7c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d040      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_DMA_IRQHandler+0xc80>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d03b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <HAL_DMA_IRQHandler+0xc84>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d036      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a23      	ldr	r2, [pc, #140]	; (80026ec <HAL_DMA_IRQHandler+0xc88>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_DMA_IRQHandler+0xc8c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02c      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_DMA_IRQHandler+0xc90>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d027      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_DMA_IRQHandler+0xc94>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_DMA_IRQHandler+0xc98>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_DMA_IRQHandler+0xc9c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_DMA_IRQHandler+0xca0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_DMA_IRQHandler+0xca4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_DMA_IRQHandler+0xca8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a16      	ldr	r2, [pc, #88]	; (8002710 <HAL_DMA_IRQHandler+0xcac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xc62>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <HAL_DMA_IRQHandler+0xcb0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d128      	bne.n	8002718 <HAL_DMA_IRQHandler+0xcb4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0214 	bic.w	r2, r2, #20
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e027      	b.n	8002728 <HAL_DMA_IRQHandler+0xcc4>
 80026d8:	40020010 	.word	0x40020010
 80026dc:	40020028 	.word	0x40020028
 80026e0:	40020040 	.word	0x40020040
 80026e4:	40020058 	.word	0x40020058
 80026e8:	40020070 	.word	0x40020070
 80026ec:	40020088 	.word	0x40020088
 80026f0:	400200a0 	.word	0x400200a0
 80026f4:	400200b8 	.word	0x400200b8
 80026f8:	40020410 	.word	0x40020410
 80026fc:	40020428 	.word	0x40020428
 8002700:	40020440 	.word	0x40020440
 8002704:	40020458 	.word	0x40020458
 8002708:	40020470 	.word	0x40020470
 800270c:	40020488 	.word	0x40020488
 8002710:	400204a0 	.word	0x400204a0
 8002714:	400204b8 	.word	0x400204b8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020a 	bic.w	r2, r2, #10
 8002726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8097 	beq.w	8002870 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800274a:	e091      	b.n	8002870 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	2208      	movs	r2, #8
 8002756:	409a      	lsls	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8088 	beq.w	8002872 <HAL_DMA_IRQHandler+0xe0e>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8082 	beq.w	8002872 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a41      	ldr	r2, [pc, #260]	; (8002878 <HAL_DMA_IRQHandler+0xe14>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3f      	ldr	r2, [pc, #252]	; (800287c <HAL_DMA_IRQHandler+0xe18>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3e      	ldr	r2, [pc, #248]	; (8002880 <HAL_DMA_IRQHandler+0xe1c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3c      	ldr	r2, [pc, #240]	; (8002884 <HAL_DMA_IRQHandler+0xe20>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <HAL_DMA_IRQHandler+0xe24>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a39      	ldr	r2, [pc, #228]	; (800288c <HAL_DMA_IRQHandler+0xe28>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a38      	ldr	r2, [pc, #224]	; (8002890 <HAL_DMA_IRQHandler+0xe2c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a36      	ldr	r2, [pc, #216]	; (8002894 <HAL_DMA_IRQHandler+0xe30>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a35      	ldr	r2, [pc, #212]	; (8002898 <HAL_DMA_IRQHandler+0xe34>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_DMA_IRQHandler+0xe38>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_DMA_IRQHandler+0xe3c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_DMA_IRQHandler+0xe40>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <HAL_DMA_IRQHandler+0xe44>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <HAL_DMA_IRQHandler+0xe48>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2c      	ldr	r2, [pc, #176]	; (80028b0 <HAL_DMA_IRQHandler+0xe4c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_IRQHandler+0xdaa>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_DMA_IRQHandler+0xe50>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <HAL_DMA_IRQHandler+0xdbc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 021c 	bic.w	r2, r2, #28
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e007      	b.n	8002830 <HAL_DMA_IRQHandler+0xdcc>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 020e 	bic.w	r2, r2, #14
 800282e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2201      	movs	r2, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	e004      	b.n	8002872 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002868:	bf00      	nop
 800286a:	e002      	b.n	8002872 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002870:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	40020088 	.word	0x40020088
 8002890:	400200a0 	.word	0x400200a0
 8002894:	400200b8 	.word	0x400200b8
 8002898:	40020410 	.word	0x40020410
 800289c:	40020428 	.word	0x40020428
 80028a0:	40020440 	.word	0x40020440
 80028a4:	40020458 	.word	0x40020458
 80028a8:	40020470 	.word	0x40020470
 80028ac:	40020488 	.word	0x40020488
 80028b0:	400204a0 	.word	0x400204a0
 80028b4:	400204b8 	.word	0x400204b8

080028b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a42      	ldr	r2, [pc, #264]	; (80029d0 <DMA_CalcBaseAndBitshift+0x118>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04a      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a41      	ldr	r2, [pc, #260]	; (80029d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a3f      	ldr	r2, [pc, #252]	; (80029d8 <DMA_CalcBaseAndBitshift+0x120>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3e      	ldr	r2, [pc, #248]	; (80029dc <DMA_CalcBaseAndBitshift+0x124>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d03b      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3c      	ldr	r2, [pc, #240]	; (80029e0 <DMA_CalcBaseAndBitshift+0x128>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d036      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3b      	ldr	r2, [pc, #236]	; (80029e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d031      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <DMA_CalcBaseAndBitshift+0x130>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02c      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a38      	ldr	r2, [pc, #224]	; (80029ec <DMA_CalcBaseAndBitshift+0x134>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d027      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a36      	ldr	r2, [pc, #216]	; (80029f0 <DMA_CalcBaseAndBitshift+0x138>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01d      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a33      	ldr	r2, [pc, #204]	; (80029f8 <DMA_CalcBaseAndBitshift+0x140>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a32      	ldr	r2, [pc, #200]	; (80029fc <DMA_CalcBaseAndBitshift+0x144>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <DMA_CalcBaseAndBitshift+0x148>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2f      	ldr	r2, [pc, #188]	; (8002a04 <DMA_CalcBaseAndBitshift+0x14c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2d      	ldr	r2, [pc, #180]	; (8002a08 <DMA_CalcBaseAndBitshift+0x150>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <DMA_CalcBaseAndBitshift+0xa8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <DMA_CalcBaseAndBitshift+0x154>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <DMA_CalcBaseAndBitshift+0xac>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <DMA_CalcBaseAndBitshift+0xae>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3b10      	subs	r3, #16
 8002972:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <DMA_CalcBaseAndBitshift+0x158>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <DMA_CalcBaseAndBitshift+0x15c>)
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d908      	bls.n	80029a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <DMA_CalcBaseAndBitshift+0x160>)
 800299a:	4013      	ands	r3, r2
 800299c:	1d1a      	adds	r2, r3, #4
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58
 80029a2:	e00d      	b.n	80029c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <DMA_CalcBaseAndBitshift+0x160>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6593      	str	r3, [r2, #88]	; 0x58
 80029b2:	e005      	b.n	80029c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40020010 	.word	0x40020010
 80029d4:	40020028 	.word	0x40020028
 80029d8:	40020040 	.word	0x40020040
 80029dc:	40020058 	.word	0x40020058
 80029e0:	40020070 	.word	0x40020070
 80029e4:	40020088 	.word	0x40020088
 80029e8:	400200a0 	.word	0x400200a0
 80029ec:	400200b8 	.word	0x400200b8
 80029f0:	40020410 	.word	0x40020410
 80029f4:	40020428 	.word	0x40020428
 80029f8:	40020440 	.word	0x40020440
 80029fc:	40020458 	.word	0x40020458
 8002a00:	40020470 	.word	0x40020470
 8002a04:	40020488 	.word	0x40020488
 8002a08:	400204a0 	.word	0x400204a0
 8002a0c:	400204b8 	.word	0x400204b8
 8002a10:	aaaaaaab 	.word	0xaaaaaaab
 8002a14:	08007214 	.word	0x08007214
 8002a18:	fffffc00 	.word	0xfffffc00

08002a1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d120      	bne.n	8002a72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d858      	bhi.n	8002aea <DMA_CheckFifoParam+0xce>
 8002a38:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <DMA_CheckFifoParam+0x24>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a63 	.word	0x08002a63
 8002a48:	08002a51 	.word	0x08002a51
 8002a4c:	08002aeb 	.word	0x08002aeb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d048      	beq.n	8002aee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a60:	e045      	b.n	8002aee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a6a:	d142      	bne.n	8002af2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a70:	e03f      	b.n	8002af2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7a:	d123      	bne.n	8002ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d838      	bhi.n	8002af6 <DMA_CheckFifoParam+0xda>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <DMA_CheckFifoParam+0x70>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa3 	.word	0x08002aa3
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002ab5 	.word	0x08002ab5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa0:	e030      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ab2:	e022      	b.n	8002afa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abc:	d11f      	bne.n	8002afe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ac2:	e01c      	b.n	8002afe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d902      	bls.n	8002ad2 <DMA_CheckFifoParam+0xb6>
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ad0:	e018      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ad6:	e015      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8002ae8:	e00b      	b.n	8002b02 <DMA_CheckFifoParam+0xe6>
        break;
 8002aea:	bf00      	nop
 8002aec:	e00a      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
        break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
    break;
 8002b02:	bf00      	nop
    }
  }

  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01d      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d018      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a32      	ldr	r2, [pc, #200]	; (8002c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01a      	beq.n	8002bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b08      	subs	r3, #8
 8002b84:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a24      	ldr	r2, [pc, #144]	; (8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002ba0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2201      	movs	r2, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002bb0:	e024      	b.n	8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3b10      	subs	r3, #16
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d806      	bhi.n	8002bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d902      	bls.n	8002bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	461a      	mov	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002bec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	58025408 	.word	0x58025408
 8002c0c:	5802541c 	.word	0x5802541c
 8002c10:	58025430 	.word	0x58025430
 8002c14:	58025444 	.word	0x58025444
 8002c18:	58025458 	.word	0x58025458
 8002c1c:	5802546c 	.word	0x5802546c
 8002c20:	58025480 	.word	0x58025480
 8002c24:	58025494 	.word	0x58025494
 8002c28:	cccccccd 	.word	0xcccccccd
 8002c2c:	16009600 	.word	0x16009600
 8002c30:	58025880 	.word	0x58025880
 8002c34:	aaaaaaab 	.word	0xaaaaaaab
 8002c38:	400204b8 	.word	0x400204b8
 8002c3c:	4002040f 	.word	0x4002040f
 8002c40:	10008200 	.word	0x10008200
 8002c44:	40020880 	.word	0x40020880

08002c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04a      	beq.n	8002cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d847      	bhi.n	8002cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d022      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d01d      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d018      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002cd0:	671a      	str	r2, [r3, #112]	; 0x70
 8002cd2:	e009      	b.n	8002ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002ce6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	58025408 	.word	0x58025408
 8002d04:	5802541c 	.word	0x5802541c
 8002d08:	58025430 	.word	0x58025430
 8002d0c:	58025444 	.word	0x58025444
 8002d10:	58025458 	.word	0x58025458
 8002d14:	5802546c 	.word	0x5802546c
 8002d18:	58025480 	.word	0x58025480
 8002d1c:	58025494 	.word	0x58025494
 8002d20:	1600963f 	.word	0x1600963f
 8002d24:	58025940 	.word	0x58025940
 8002d28:	1000823f 	.word	0x1000823f
 8002d2c:	40020940 	.word	0x40020940

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d3e:	4b89      	ldr	r3, [pc, #548]	; (8002f64 <HAL_GPIO_Init+0x234>)
 8002d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d42:	e194      	b.n	800306e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8186 	beq.w	8003068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d005      	beq.n	8002d74 <HAL_GPIO_Init+0x44>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d130      	bne.n	8002dd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002daa:	2201      	movs	r2, #1
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0201 	and.w	r2, r3, #1
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d017      	beq.n	8002e12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d123      	bne.n	8002e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	69b9      	ldr	r1, [r7, #24]
 8002e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80e0 	beq.w	8003068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_GPIO_Init+0x238>)
 8002eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eae:	4a2e      	ldr	r2, [pc, #184]	; (8002f68 <HAL_GPIO_Init+0x238>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_GPIO_Init+0x238>)
 8002eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_GPIO_Init+0x23c>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <HAL_GPIO_Init+0x240>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d052      	beq.n	8002f98 <HAL_GPIO_Init+0x268>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_GPIO_Init+0x244>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_GPIO_Init+0x22e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_GPIO_Init+0x248>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02b      	beq.n	8002f5a <HAL_GPIO_Init+0x22a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_GPIO_Init+0x24c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d025      	beq.n	8002f56 <HAL_GPIO_Init+0x226>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_GPIO_Init+0x250>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01f      	beq.n	8002f52 <HAL_GPIO_Init+0x222>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_GPIO_Init+0x254>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d019      	beq.n	8002f4e <HAL_GPIO_Init+0x21e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <HAL_GPIO_Init+0x258>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_GPIO_Init+0x21a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <HAL_GPIO_Init+0x25c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00d      	beq.n	8002f46 <HAL_GPIO_Init+0x216>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_GPIO_Init+0x260>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x212>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_GPIO_Init+0x264>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_GPIO_Init+0x20e>
 8002f3a:	2309      	movs	r3, #9
 8002f3c:	e02d      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f3e:	230a      	movs	r3, #10
 8002f40:	e02b      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f42:	2308      	movs	r3, #8
 8002f44:	e029      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f46:	2307      	movs	r3, #7
 8002f48:	e027      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	e025      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f4e:	2305      	movs	r3, #5
 8002f50:	e023      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e021      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f56:	2303      	movs	r3, #3
 8002f58:	e01f      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e01d      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e01b      	b.n	8002f9a <HAL_GPIO_Init+0x26a>
 8002f62:	bf00      	nop
 8002f64:	58000080 	.word	0x58000080
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	58000400 	.word	0x58000400
 8002f70:	58020000 	.word	0x58020000
 8002f74:	58020400 	.word	0x58020400
 8002f78:	58020800 	.word	0x58020800
 8002f7c:	58020c00 	.word	0x58020c00
 8002f80:	58021000 	.word	0x58021000
 8002f84:	58021400 	.word	0x58021400
 8002f88:	58021800 	.word	0x58021800
 8002f8c:	58021c00 	.word	0x58021c00
 8002f90:	58022000 	.word	0x58022000
 8002f94:	58022400 	.word	0x58022400
 8002f98:	2300      	movs	r3, #0
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	f002 0203 	and.w	r2, r2, #3
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	4093      	lsls	r3, r2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002faa:	4938      	ldr	r1, [pc, #224]	; (800308c <HAL_GPIO_Init+0x35c>)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800300c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	3301      	adds	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f ae63 	bne.w	8002d44 <HAL_GPIO_Init+0x14>
  }
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	3724      	adds	r7, #36	; 0x24
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	58000400 	.word	0x58000400

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	041a      	lsls	r2, r3, #16
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43d9      	mvns	r1, r3
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	400b      	ands	r3, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003100:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_HSEM_FastTake+0x2c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3320      	adds	r3, #32
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_HSEM_FastTake+0x30>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	58026400 	.word	0x58026400
 8003128:	80000300 	.word	0x80000300

0800312c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003136:	4906      	ldr	r1, [pc, #24]	; (8003150 <HAL_HSEM_Release+0x24>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58026400 	.word	0x58026400

08003154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fd52 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e006      	b.n	80031dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d104      	bne.n	80031ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_I2C_Init+0x11c>)
 80031fa:	430b      	orrs	r3, r1
 80031fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800320c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69d9      	ldr	r1, [r3, #28]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	02008000 	.word	0x02008000

08003274 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	f040 80da 	bne.w	800344a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x30>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0d3      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ac:	f7fd ff32 	bl	8001114 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2319      	movs	r3, #25
 80032b8:	2201      	movs	r2, #1
 80032ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f90a 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0be      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	893a      	ldrh	r2, [r7, #8]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2bff      	cmp	r3, #255	; 0xff
 80032fe:	d90e      	bls.n	800331e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_I2C_Master_Transmit+0x1e0>)
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa86 	bl	8003828 <I2C_TransferConfig>
 800331c:	e06c      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	b2da      	uxtb	r2, r3
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <HAL_I2C_Master_Transmit+0x1e0>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fa75 	bl	8003828 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800333e:	e05b      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	6a39      	ldr	r1, [r7, #32]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f907 	bl	8003558 <I2C_WaitOnTXISFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e07b      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	781a      	ldrb	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d034      	beq.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d130      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2200      	movs	r2, #0
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f899 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e04d      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2bff      	cmp	r3, #255	; 0xff
 80033b8:	d90e      	bls.n	80033d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fa29 	bl	8003828 <I2C_TransferConfig>
 80033d6:	e00f      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	8979      	ldrh	r1, [r7, #10]
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa18 	bl	8003828 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d19e      	bne.n	8003340 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8e6 	bl	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01a      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2220      	movs	r2, #32
 800341c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_I2C_Master_Transmit+0x1e4>)
 800342a:	400b      	ands	r3, r1
 800342c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	80002000 	.word	0x80002000
 8003458:	fe00e800 	.word	0xfe00e800

0800345c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
  }
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d103      	bne.n	80034ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d007      	beq.n	80034cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	619a      	str	r2, [r3, #24]
  }
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	e022      	b.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d01e      	beq.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fd fe0f 	bl	8001114 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e00f      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d0cd      	beq.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003564:	e02c      	b.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f870 	bl	8003650 <I2C_IsErrorOccurred>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e02a      	b.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d01e      	beq.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003582:	f7fd fdc7 	bl	8001114 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	d302      	bcc.n	8003598 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e007      	b.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d1cb      	bne.n	8003566 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e4:	e028      	b.n	8003638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f830 	bl	8003650 <I2C_IsErrorOccurred>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e026      	b.n	8003648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fd fd8b 	bl	8001114 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d113      	bne.n	8003638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e007      	b.n	8003648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b20      	cmp	r3, #32
 8003644:	d1cf      	bne.n	80035e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d075      	beq.n	8003768 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2210      	movs	r2, #16
 8003682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003684:	e056      	b.n	8003734 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d052      	beq.n	8003734 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fd fd41 	bl	8001114 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_IsErrorOccurred+0x54>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d147      	bne.n	8003734 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c6:	d12e      	bne.n	8003726 <I2C_IsErrorOccurred+0xd6>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ce:	d02a      	beq.n	8003726 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d027      	beq.n	8003726 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036e6:	f7fd fd15 	bl	8001114 <HAL_GetTick>
 80036ea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ec:	e01b      	b.n	8003726 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036ee:	f7fd fd11 	bl	8001114 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b19      	cmp	r3, #25
 80036fa:	d914      	bls.n	8003726 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b20      	cmp	r3, #32
 8003732:	d1dc      	bne.n	80036ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d003      	beq.n	800374a <I2C_IsErrorOccurred+0xfa>
 8003742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003746:	2b00      	cmp	r3, #0
 8003748:	d09d      	beq.n	8003686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800374a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2220      	movs	r2, #32
 8003758:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800378a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01c      	beq.n	8003818 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff fe56 	bl	8003490 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <I2C_IsErrorOccurred+0x1d4>)
 80037f0:	400b      	ands	r3, r1
 80037f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800381c:	4618      	mov	r0, r3
 800381e:	3728      	adds	r7, #40	; 0x28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	fe00e800 	.word	0xfe00e800

08003828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	817b      	strh	r3, [r7, #10]
 8003836:	4613      	mov	r3, r2
 8003838:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383a:	897b      	ldrh	r3, [r7, #10]
 800383c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003840:	7a7b      	ldrb	r3, [r7, #9]
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003848:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	4313      	orrs	r3, r2
 8003852:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003856:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	0d5b      	lsrs	r3, r3, #21
 8003862:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <I2C_TransferConfig+0x60>)
 8003868:	430b      	orrs	r3, r1
 800386a:	43db      	mvns	r3, r3
 800386c:	ea02 0103 	and.w	r1, r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	03ff63ff 	.word	0x03ff63ff

0800388c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d138      	bne.n	8003914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e032      	b.n	8003916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	; 0x24
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	d139      	bne.n	80039ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003942:	2302      	movs	r3, #2
 8003944:	e033      	b.n	80039ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2224      	movs	r2, #36	; 0x24
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039c4:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	2b06      	cmp	r3, #6
 80039ce:	d00a      	beq.n	80039e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039d0:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e040      	b.n	8003a64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e03e      	b.n	8003a64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80039ee:	491f      	ldr	r1, [pc, #124]	; (8003a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039f6:	f7fd fb8d 	bl	8001114 <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039fc:	e009      	b.n	8003a12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039fe:	f7fd fb89 	bl	8001114 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a0c:	d901      	bls.n	8003a12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e028      	b.n	8003a64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d1ee      	bne.n	80039fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b1e      	cmp	r3, #30
 8003a24:	d008      	beq.n	8003a38 <HAL_PWREx_ConfigSupply+0x7c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b2e      	cmp	r3, #46	; 0x2e
 8003a2a:	d005      	beq.n	8003a38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b1d      	cmp	r3, #29
 8003a30:	d002      	beq.n	8003a38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b2d      	cmp	r3, #45	; 0x2d
 8003a36:	d114      	bne.n	8003a62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a38:	f7fd fb6c 	bl	8001114 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a3e:	e009      	b.n	8003a54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a40:	f7fd fb68 	bl	8001114 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4e:	d901      	bls.n	8003a54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d1ee      	bne.n	8003a40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	58024800 	.word	0x58024800

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	; 0x30
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f000 bc1d 	b.w	80042be <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8087 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a92:	4b99      	ldr	r3, [pc, #612]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a9c:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d007      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x48>
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	2b18      	cmp	r3, #24
 8003aac:	d110      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x60>
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	4b8f      	ldr	r3, [pc, #572]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d06c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x12e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d168      	bne.n	8003b9e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e3f6      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x78>
 8003ada:	4b87      	ldr	r3, [pc, #540]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a86      	ldr	r2, [pc, #536]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e02e      	b.n	8003b46 <HAL_RCC_OscConfig+0xd6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCC_OscConfig+0x9a>
 8003af0:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a80      	ldr	r2, [pc, #512]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b7e      	ldr	r3, [pc, #504]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e01d      	b.n	8003b46 <HAL_RCC_OscConfig+0xd6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCC_OscConfig+0xbe>
 8003b14:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b75      	ldr	r3, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e00b      	b.n	8003b46 <HAL_RCC_OscConfig+0xd6>
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a71      	ldr	r2, [pc, #452]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fae1 	bl	8001114 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b56:	f7fd fadd 	bl	8001114 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e3aa      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b68:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0xe6>
 8003b74:	e014      	b.n	8003ba0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd facd 	bl	8001114 <HAL_GetTick>
 8003b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fac9 	bl	8001114 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e396      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x10e>
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80cb 	beq.w	8003d44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bae:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x164>
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2b18      	cmp	r3, #24
 8003bc8:	d156      	bne.n	8003c78 <HAL_RCC_OscConfig+0x208>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d151      	bne.n	8003c78 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd4:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_OscConfig+0x17c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e368      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bec:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 0219 	bic.w	r2, r3, #25
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	493f      	ldr	r1, [pc, #252]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bfe:	f7fd fa89 	bl	8001114 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd fa85 	bl	8001114 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e352      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c18:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	f7fd faa6 	bl	8001174 <HAL_GetREVID>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d817      	bhi.n	8003c62 <HAL_RCC_OscConfig+0x1f2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d108      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1dc>
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c42:	4a2d      	ldr	r2, [pc, #180]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4a:	e07b      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	4927      	ldr	r1, [pc, #156]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c60:	e070      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	4921      	ldr	r1, [pc, #132]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c76:	e065      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d048      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 0219 	bic.w	r2, r3, #25
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	491a      	ldr	r1, [pc, #104]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd fa3f 	bl	8001114 <HAL_GetTick>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fd fa3b 	bl	8001114 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e308      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	f7fd fa5c 	bl	8001174 <HAL_GetREVID>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d81a      	bhi.n	8003cfc <HAL_RCC_OscConfig+0x28c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x270>
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	6053      	str	r3, [r2, #4]
 8003cde:	e031      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	4902      	ldr	r1, [pc, #8]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
 8003cf4:	e026      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
 8003cf6:	bf00      	nop
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	4b9a      	ldr	r3, [pc, #616]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	4997      	ldr	r1, [pc, #604]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	e018      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d12:	4b95      	ldr	r3, [pc, #596]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a94      	ldr	r2, [pc, #592]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fd f9f9 	bl	8001114 <HAL_GetTick>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d26:	f7fd f9f5 	bl	8001114 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e2c2      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d38:	4b8b      	ldr	r3, [pc, #556]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a9 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d5c:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d007      	beq.n	8003d78 <HAL_RCC_OscConfig+0x308>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b18      	cmp	r3, #24
 8003d6c:	d13a      	bne.n	8003de4 <HAL_RCC_OscConfig+0x374>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d135      	bne.n	8003de4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d78:	4b7b      	ldr	r3, [pc, #492]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x320>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e296      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d90:	f7fd f9f0 	bl	8001174 <HAL_GetREVID>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d817      	bhi.n	8003dce <HAL_RCC_OscConfig+0x35e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x348>
 8003da6:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003dae:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003db4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db6:	e075      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003db8:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	069b      	lsls	r3, r3, #26
 8003dc6:	4968      	ldr	r1, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dcc:	e06a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dce:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	4962      	ldr	r1, [pc, #392]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003de2:	e05f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d042      	beq.n	8003e72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dec:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd f98c 	bl	8001114 <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e00:	f7fd f988 	bl	8001114 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e255      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e12:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e1e:	f7fd f9a9 	bl	8001174 <HAL_GetREVID>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d817      	bhi.n	8003e5c <HAL_RCC_OscConfig+0x3ec>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d108      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3d6>
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	6053      	str	r3, [r2, #4]
 8003e44:	e02e      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
 8003e46:	4b48      	ldr	r3, [pc, #288]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	4944      	ldr	r1, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
 8003e5a:	e023      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	493f      	ldr	r1, [pc, #252]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd f949 	bl	8001114 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e86:	f7fd f945 	bl	8001114 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e212      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d036      	beq.n	8003f1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fd f926 	bl	8001114 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fd f922 	bl	8001114 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1ef      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x45c>
 8003eea:	e018      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fd f90c 	bl	8001114 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fd f908 	bl	8001114 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1d5      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d039      	beq.n	8003f9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f8e9 	bl	8001114 <HAL_GetTick>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f46:	f7fd f8e5 	bl	8001114 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1b2      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x4d6>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
 8003f66:	bf00      	nop
 8003f68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f6c:	4b9b      	ldr	r3, [pc, #620]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a9a      	ldr	r2, [pc, #616]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f78:	f7fd f8cc 	bl	8001114 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f80:	f7fd f8c8 	bl	8001114 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e195      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f92:	4b92      	ldr	r3, [pc, #584]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8081 	beq.w	80040ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fac:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <HAL_RCC_OscConfig+0x770>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8b      	ldr	r2, [pc, #556]	; (80041e0 <HAL_RCC_OscConfig+0x770>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd f8ac 	bl	8001114 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fd f8a8 	bl	8001114 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e175      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd2:	4b83      	ldr	r3, [pc, #524]	; (80041e0 <HAL_RCC_OscConfig+0x770>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x584>
 8003fe6:	4b7d      	ldr	r3, [pc, #500]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a7c      	ldr	r2, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	e02d      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0x5a6>
 8003ffc:	4b77      	ldr	r3, [pc, #476]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a76      	ldr	r2, [pc, #472]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	4b74      	ldr	r3, [pc, #464]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a73      	ldr	r2, [pc, #460]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
 8004014:	e01c      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0x5c8>
 800401e:	4b6f      	ldr	r3, [pc, #444]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a6b      	ldr	r2, [pc, #428]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
 8004038:	4b68      	ldr	r3, [pc, #416]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a67      	ldr	r2, [pc, #412]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a64      	ldr	r2, [pc, #400]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800404a:	f023 0304 	bic.w	r3, r3, #4
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd f85c 	bl	8001114 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405e:	e00a      	b.n	8004076 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fd f858 	bl	8001114 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e123      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004076:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ee      	beq.n	8004060 <HAL_RCC_OscConfig+0x5f0>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fd f846 	bl	8001114 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fd f842 	bl	8001114 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e10d      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040a2:	4b4e      	ldr	r3, [pc, #312]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ee      	bne.n	800408c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8102 	beq.w	80042bc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040b8:	4b48      	ldr	r3, [pc, #288]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c0:	2b18      	cmp	r3, #24
 80040c2:	f000 80bd 	beq.w	8004240 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	f040 809e 	bne.w	800420c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b42      	ldr	r3, [pc, #264]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a41      	ldr	r2, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd f81a 	bl	8001114 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd f816 	bl	8001114 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e0e3      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004106:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCC_OscConfig+0x774>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004112:	0112      	lsls	r2, r2, #4
 8004114:	430a      	orrs	r2, r1
 8004116:	4931      	ldr	r1, [pc, #196]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	628b      	str	r3, [r1, #40]	; 0x28
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	3b01      	subs	r3, #1
 8004122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	3b01      	subs	r3, #1
 800412c:	025b      	lsls	r3, r3, #9
 800412e:	b29b      	uxth	r3, r3
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	3b01      	subs	r3, #1
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	3b01      	subs	r3, #1
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800414c:	4923      	ldr	r1, [pc, #140]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004152:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <HAL_RCC_OscConfig+0x778>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800416a:	00d2      	lsls	r2, r2, #3
 800416c:	491b      	ldr	r1, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f023 020c 	bic.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4917      	ldr	r1, [pc, #92]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f023 0202 	bic.w	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	4912      	ldr	r1, [pc, #72]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a2:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a04      	ldr	r2, [pc, #16]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fc ff9f 	bl	8001114 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d8:	e011      	b.n	80041fe <HAL_RCC_OscConfig+0x78e>
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
 80041e0:	58024800 	.word	0x58024800
 80041e4:	fffffc0c 	.word	0xfffffc0c
 80041e8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fc ff92 	bl	8001114 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e05f      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041fe:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <HAL_RCC_OscConfig+0x858>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x77c>
 800420a:	e057      	b.n	80042bc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_RCC_OscConfig+0x858>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x858>)
 8004212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fc ff7c 	bl	8001114 <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004220:	f7fc ff78 	bl	8001114 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e045      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004232:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <HAL_RCC_OscConfig+0x858>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x7b0>
 800423e:	e03d      	b.n	80042bc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004240:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <HAL_RCC_OscConfig+0x858>)
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <HAL_RCC_OscConfig+0x858>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b01      	cmp	r3, #1
 8004252:	d031      	beq.n	80042b8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d12a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d122      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d11a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	0a5b      	lsrs	r3, r3, #9
 8004286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d111      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d108      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3730      	adds	r7, #48	; 0x30
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	58024400 	.word	0x58024400

080042cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e19c      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b8a      	ldr	r3, [pc, #552]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d910      	bls.n	8004310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b87      	ldr	r3, [pc, #540]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 020f 	bic.w	r2, r3, #15
 80042f6:	4985      	ldr	r1, [pc, #532]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b83      	ldr	r3, [pc, #524]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e184      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	4b7b      	ldr	r3, [pc, #492]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004328:	429a      	cmp	r2, r3
 800432a:	d908      	bls.n	800433e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800432c:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	4975      	ldr	r1, [pc, #468]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800433a:	4313      	orrs	r3, r2
 800433c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d010      	beq.n	800436c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004356:	429a      	cmp	r2, r3
 8004358:	d908      	bls.n	800436c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800435a:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	496a      	ldr	r1, [pc, #424]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004368:	4313      	orrs	r3, r2
 800436a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d010      	beq.n	800439a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004384:	429a      	cmp	r2, r3
 8004386:	d908      	bls.n	800439a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004388:	4b61      	ldr	r3, [pc, #388]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	495e      	ldr	r1, [pc, #376]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004396:	4313      	orrs	r3, r2
 8004398:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d908      	bls.n	80043c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043b6:	4b56      	ldr	r3, [pc, #344]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4953      	ldr	r1, [pc, #332]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d908      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b4a      	ldr	r3, [pc, #296]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f023 020f 	bic.w	r2, r3, #15
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4947      	ldr	r1, [pc, #284]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d055      	beq.n	80044ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4940      	ldr	r1, [pc, #256]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004410:	4313      	orrs	r3, r2
 8004412:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d107      	bne.n	800442c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800441c:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d121      	bne.n	800446c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0f6      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d107      	bne.n	8004444 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d115      	bne.n	800446c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0ea      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0de      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800445c:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0d6      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800446c:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f023 0207 	bic.w	r2, r3, #7
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4925      	ldr	r1, [pc, #148]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fc fe49 	bl	8001114 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004484:	e00a      	b.n	800449c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004486:	f7fc fe45 	bl	8001114 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0be      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d1eb      	bne.n	8004486 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d010      	beq.n	80044dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d208      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f023 020f 	bic.w	r2, r3, #15
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	490e      	ldr	r1, [pc, #56]	; (8004510 <HAL_RCC_ClockConfig+0x244>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d214      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 020f 	bic.w	r2, r3, #15
 80044f2:	4906      	ldr	r1, [pc, #24]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b04      	ldr	r3, [pc, #16]	; (800450c <HAL_RCC_ClockConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e086      	b.n	800461a <HAL_RCC_ClockConfig+0x34e>
 800450c:	52002000 	.word	0x52002000
 8004510:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d010      	beq.n	8004542 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800452c:	429a      	cmp	r2, r3
 800452e:	d208      	bcs.n	8004542 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004530:	4b3c      	ldr	r3, [pc, #240]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	4939      	ldr	r1, [pc, #228]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 800453e:	4313      	orrs	r3, r2
 8004540:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d010      	beq.n	8004570 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	4b34      	ldr	r3, [pc, #208]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800455a:	429a      	cmp	r2, r3
 800455c:	d208      	bcs.n	8004570 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	492e      	ldr	r1, [pc, #184]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 800456c:	4313      	orrs	r3, r2
 800456e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004588:	429a      	cmp	r2, r3
 800458a:	d208      	bcs.n	800459e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800458c:	4b25      	ldr	r3, [pc, #148]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	4922      	ldr	r1, [pc, #136]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 800459a:	4313      	orrs	r3, r2
 800459c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d208      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045ba:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4917      	ldr	r1, [pc, #92]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045cc:	f000 f834 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	4912      	ldr	r1, [pc, #72]	; (8004628 <HAL_RCC_ClockConfig+0x35c>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ea:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <HAL_RCC_ClockConfig+0x358>)
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_RCC_ClockConfig+0x35c>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <HAL_RCC_ClockConfig+0x360>)
 8004602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x364>)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_RCC_ClockConfig+0x368>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fc fd36 	bl	8001080 <HAL_InitTick>
 8004614:	4603      	mov	r3, r0
 8004616:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400
 8004628:	08007204 	.word	0x08007204
 800462c:	24000004 	.word	0x24000004
 8004630:	24000000 	.word	0x24000000
 8004634:	24000008 	.word	0x24000008

08004638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463e:	4bb3      	ldr	r3, [pc, #716]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004646:	2b18      	cmp	r3, #24
 8004648:	f200 8155 	bhi.w	80048f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_RCC_GetSysClockFreq+0x1c>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	080046b9 	.word	0x080046b9
 8004658:	080048f7 	.word	0x080048f7
 800465c:	080048f7 	.word	0x080048f7
 8004660:	080048f7 	.word	0x080048f7
 8004664:	080048f7 	.word	0x080048f7
 8004668:	080048f7 	.word	0x080048f7
 800466c:	080048f7 	.word	0x080048f7
 8004670:	080048f7 	.word	0x080048f7
 8004674:	080046df 	.word	0x080046df
 8004678:	080048f7 	.word	0x080048f7
 800467c:	080048f7 	.word	0x080048f7
 8004680:	080048f7 	.word	0x080048f7
 8004684:	080048f7 	.word	0x080048f7
 8004688:	080048f7 	.word	0x080048f7
 800468c:	080048f7 	.word	0x080048f7
 8004690:	080048f7 	.word	0x080048f7
 8004694:	080046e5 	.word	0x080046e5
 8004698:	080048f7 	.word	0x080048f7
 800469c:	080048f7 	.word	0x080048f7
 80046a0:	080048f7 	.word	0x080048f7
 80046a4:	080048f7 	.word	0x080048f7
 80046a8:	080048f7 	.word	0x080048f7
 80046ac:	080048f7 	.word	0x080048f7
 80046b0:	080048f7 	.word	0x080048f7
 80046b4:	080046eb 	.word	0x080046eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b8:	4b94      	ldr	r3, [pc, #592]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046c4:	4b91      	ldr	r3, [pc, #580]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	4a90      	ldr	r2, [pc, #576]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046d6:	e111      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046d8:	4b8d      	ldr	r3, [pc, #564]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046da:	61bb      	str	r3, [r7, #24]
    break;
 80046dc:	e10e      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046de:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046e0:	61bb      	str	r3, [r7, #24]
    break;
 80046e2:	e10b      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046e4:	4b8c      	ldr	r3, [pc, #560]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046e6:	61bb      	str	r3, [r7, #24]
    break;
 80046e8:	e108      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ea:	4b88      	ldr	r3, [pc, #544]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046f4:	4b85      	ldr	r3, [pc, #532]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004700:	4b82      	ldr	r3, [pc, #520]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800470a:	4b80      	ldr	r3, [pc, #512]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	08db      	lsrs	r3, r3, #3
 8004710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80e1 	beq.w	80048f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b02      	cmp	r3, #2
 8004732:	f000 8083 	beq.w	800483c <HAL_RCC_GetSysClockFreq+0x204>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b02      	cmp	r3, #2
 800473a:	f200 80a1 	bhi.w	8004880 <HAL_RCC_GetSysClockFreq+0x248>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x114>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d056      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800474a:	e099      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800474c:	4b6f      	ldr	r3, [pc, #444]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02d      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004758:	4b6c      	ldr	r3, [pc, #432]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	08db      	lsrs	r3, r3, #3
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	4a6b      	ldr	r2, [pc, #428]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b62      	ldr	r3, [pc, #392]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a02 	vldr	s12, [r7, #8]
 8004796:	eddf 5a61 	vldr	s11, [pc, #388]	; 800491c <HAL_RCC_GetSysClockFreq+0x2e4>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80047b2:	e087      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004920 <HAL_RCC_GetSysClockFreq+0x2e8>
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b51      	ldr	r3, [pc, #324]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800491c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f6:	e065      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004924 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b40      	ldr	r3, [pc, #256]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a02 	vldr	s12, [r7, #8]
 800481e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800491c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800483a:	e043      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2f0>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b2f      	ldr	r3, [pc, #188]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004862:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800491c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487e:	e021      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004924 <HAL_RCC_GetSysClockFreq+0x2ec>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800491c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	0a5b      	lsrs	r3, r3, #9
 80048ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ce:	3301      	adds	r3, #1
 80048d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e8:	ee17 3a90 	vmov	r3, s15
 80048ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048ee:	e005      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]
    break;
 80048f4:	e002      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048f8:	61bb      	str	r3, [r7, #24]
    break;
 80048fa:	bf00      	nop
  }

  return sysclockfreq;
 80048fc:	69bb      	ldr	r3, [r7, #24]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3724      	adds	r7, #36	; 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	03d09000 	.word	0x03d09000
 8004914:	003d0900 	.word	0x003d0900
 8004918:	007a1200 	.word	0x007a1200
 800491c:	46000000 	.word	0x46000000
 8004920:	4c742400 	.word	0x4c742400
 8004924:	4a742400 	.word	0x4a742400
 8004928:	4af42400 	.word	0x4af42400

0800492c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004932:	f7ff fe81 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_GetHCLKFreq+0x50>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490f      	ldr	r1, [pc, #60]	; (8004980 <HAL_RCC_GetHCLKFreq+0x54>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_RCC_GetHCLKFreq+0x50>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <HAL_RCC_GetHCLKFreq+0x54>)
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <HAL_RCC_GetHCLKFreq+0x58>)
 8004968:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_RCC_GetHCLKFreq+0x5c>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <HAL_RCC_GetHCLKFreq+0x58>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	58024400 	.word	0x58024400
 8004980:	08007204 	.word	0x08007204
 8004984:	24000004 	.word	0x24000004
 8004988:	24000000 	.word	0x24000000

0800498c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004990:	f7ff ffcc 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	58024400 	.word	0x58024400
 80049b4:	08007204 	.word	0x08007204

080049b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049bc:	f7ff ffb6 	bl	800492c <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024400 	.word	0x58024400
 80049e0:	08007204 	.word	0x08007204

080049e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ec:	2300      	movs	r3, #0
 80049ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f0:	2300      	movs	r3, #0
 80049f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d03f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a08:	d02a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a0e:	d824      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a14:	d018      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a1a:	d81e      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a24:	d007      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a26:	e018      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4ba3      	ldr	r3, [pc, #652]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4aa2      	ldr	r2, [pc, #648]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a34:	e015      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 f9d5 	bl	8005dec <RCCEx_PLL2_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a46:	e00c      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3324      	adds	r3, #36	; 0x24
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 fa7e 	bl	8005f50 <RCCEx_PLL3_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a68:	4b93      	ldr	r3, [pc, #588]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a74:	4990      	ldr	r1, [pc, #576]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	650b      	str	r3, [r1, #80]	; 0x50
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03d      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d826      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004ab1 	.word	0x08004ab1
 8004aa0:	08004abf 	.word	0x08004abf
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ae9 	.word	0x08004ae9
 8004aac:	08004ae9 	.word	0x08004ae9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab0:	4b81      	ldr	r3, [pc, #516]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4a80      	ldr	r2, [pc, #512]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004abc:	e015      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 f991 	bl	8005dec <RCCEx_PLL2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ace:	e00c      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3324      	adds	r3, #36	; 0x24
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 fa3a 	bl	8005f50 <RCCEx_PLL3_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af0:	4b71      	ldr	r3, [pc, #452]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	f023 0207 	bic.w	r2, r3, #7
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	496e      	ldr	r1, [pc, #440]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	650b      	str	r3, [r1, #80]	; 0x50
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d042      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1c:	d02b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d825      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b24:	2bc0      	cmp	r3, #192	; 0xc0
 8004b26:	d028      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b28:	2bc0      	cmp	r3, #192	; 0xc0
 8004b2a:	d821      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d016      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d81d      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d007      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b3c:	e018      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4b5e      	ldr	r3, [pc, #376]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a5d      	ldr	r2, [pc, #372]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b4a:	e017      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f94a 	bl	8005dec <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b5c:	e00e      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3324      	adds	r3, #36	; 0x24
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 f9f3 	bl	8005f50 <RCCEx_PLL3_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b6e:	e005      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b82:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	494a      	ldr	r1, [pc, #296]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	650b      	str	r3, [r1, #80]	; 0x50
 8004b94:	e001      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d049      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bb0:	d030      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bb6:	d82a      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bbc:	d02c      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004bbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bc2:	d824      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc8:	d018      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bce:	d81e      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd8:	d007      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004bda:	e018      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004be8:	e017      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f8fb 	bl	8005dec <RCCEx_PLL2_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bfa:	e00e      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 f9a4 	bl	8005f50 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c0c:	e005      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	e002      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c14:	bf00      	nop
 8004c16:	e000      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c2e:	4922      	ldr	r1, [pc, #136]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	658b      	str	r3, [r1, #88]	; 0x58
 8004c34:	e001      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d04b      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c50:	d030      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c56:	d82a      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c5c:	d02e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004c5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c62:	d824      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c68:	d018      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c6e:	d81e      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c78:	d007      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004c7a:	e018      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c88:	e019      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 f8ab 	bl	8005dec <RCCEx_PLL2_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c9a:	e010      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3324      	adds	r3, #36	; 0x24
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f954 	bl	8005f50 <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cac:	e007      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004cb8:	58024400 	.word	0x58024400
      break;
 8004cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cc4:	4b99      	ldr	r3, [pc, #612]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cd2:	4996      	ldr	r1, [pc, #600]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	658b      	str	r3, [r1, #88]	; 0x58
 8004cd8:	e001      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d032      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	2b30      	cmp	r3, #48	; 0x30
 8004cf0:	d01c      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004cf2:	2b30      	cmp	r3, #48	; 0x30
 8004cf4:	d817      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d00c      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d813      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d10f      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d06:	4b89      	ldr	r3, [pc, #548]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	4a88      	ldr	r2, [pc, #544]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d12:	e00e      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	2102      	movs	r1, #2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 f866 	bl	8005dec <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d24:	e005      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d38:	4b7c      	ldr	r3, [pc, #496]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	4979      	ldr	r1, [pc, #484]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d4a:	e001      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d047      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d64:	d030      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6a:	d82a      	bhi.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d70:	d02c      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d76:	d824      	bhi.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7c:	d018      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d82:	d81e      	bhi.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8c:	d007      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004d8e:	e018      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d90:	4b66      	ldr	r3, [pc, #408]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d9c:	e017      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 f821 	bl	8005dec <RCCEx_PLL2_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dae:	e00e      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3324      	adds	r3, #36	; 0x24
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 f8ca 	bl	8005f50 <RCCEx_PLL3_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dc0:	e005      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004dd4:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	4952      	ldr	r1, [pc, #328]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	650b      	str	r3, [r1, #80]	; 0x50
 8004de6:	e001      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d049      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e00:	d02e      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e06:	d828      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e0c:	d02a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004e0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e12:	d822      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e18:	d026      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e1e:	d81c      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e24:	d010      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2a:	d816      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01d      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d111      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 ffd5 	bl	8005dec <RCCEx_PLL2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e46:	e012      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3324      	adds	r3, #36	; 0x24
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f87e 	bl	8005f50 <RCCEx_PLL3_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e58:	e009      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5e:	e006      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e60:	bf00      	nop
 8004e62:	e004      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e80:	492a      	ldr	r1, [pc, #168]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	650b      	str	r3, [r1, #80]	; 0x50
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d04d      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea2:	d02e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea8:	d828      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d02a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d822      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eba:	d026      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ebc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ec0:	d81c      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec6:	d010      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ecc:	d816      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01d      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed6:	d111      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 ff84 	bl	8005dec <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ee8:	e012      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f82d 	bl	8005f50 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f24:	4901      	ldr	r1, [pc, #4]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	658b      	str	r3, [r1, #88]	; 0x58
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02f      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f48:	d00e      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4e:	d814      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f58:	d10f      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5a:	4baf      	ldr	r3, [pc, #700]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	4aae      	ldr	r2, [pc, #696]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f66:	e00c      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 ff3c 	bl	8005dec <RCCEx_PLL2_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f78:	e003      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f7e:	e000      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f88:	4ba3      	ldr	r3, [pc, #652]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f94:	49a0      	ldr	r1, [pc, #640]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	650b      	str	r3, [r1, #80]	; 0x50
 8004f9a:	e001      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d032      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d81b      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004ff3 	.word	0x08004ff3
 8004fc0:	08004fcd 	.word	0x08004fcd
 8004fc4:	08004fdb 	.word	0x08004fdb
 8004fc8:	08004ff3 	.word	0x08004ff3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fcc:	4b92      	ldr	r3, [pc, #584]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	4a91      	ldr	r2, [pc, #580]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fd8:	e00c      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2102      	movs	r1, #2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 ff03 	bl	8005dec <RCCEx_PLL2_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ffa:	4b87      	ldr	r3, [pc, #540]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	f023 0203 	bic.w	r2, r3, #3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	4984      	ldr	r1, [pc, #528]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005008:	4313      	orrs	r3, r2
 800500a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800500c:	e001      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8086 	beq.w	800512c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005020:	4b7e      	ldr	r3, [pc, #504]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a7d      	ldr	r2, [pc, #500]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502c:	f7fc f872 	bl	8001114 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fc f86e 	bl	8001114 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d902      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	75fb      	strb	r3, [r7, #23]
        break;
 8005046:	e005      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005048:	4b74      	ldr	r3, [pc, #464]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d166      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800505a:	4b6f      	ldr	r3, [pc, #444]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800505c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005064:	4053      	eors	r3, r2
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d013      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800506e:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005078:	4b67      	ldr	r3, [pc, #412]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	4a66      	ldr	r2, [pc, #408]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800507e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005082:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005084:	4b64      	ldr	r3, [pc, #400]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a63      	ldr	r2, [pc, #396]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800508a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005090:	4a61      	ldr	r2, [pc, #388]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800509c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a0:	d115      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc f837 	bl	8001114 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a8:	e00b      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fc f833 	bl	8001114 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d902      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	75fb      	strb	r3, [r7, #23]
            break;
 80050c0:	e005      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050c2:	4b55      	ldr	r3, [pc, #340]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0ed      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d126      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e2:	d10d      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80050e4:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f2:	0919      	lsrs	r1, r3, #4
 80050f4:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80050f6:	400b      	ands	r3, r1
 80050f8:	4947      	ldr	r1, [pc, #284]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
 80050fe:	e005      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005100:	4b45      	ldr	r3, [pc, #276]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	4a44      	ldr	r2, [pc, #272]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005106:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800510a:	6113      	str	r3, [r2, #16]
 800510c:	4b42      	ldr	r3, [pc, #264]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800510e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511a:	493f      	ldr	r1, [pc, #252]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800511c:	4313      	orrs	r3, r2
 800511e:	670b      	str	r3, [r1, #112]	; 0x70
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	75bb      	strb	r3, [r7, #22]
 8005126:	e001      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8085 	beq.w	8005244 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513e:	2b28      	cmp	r3, #40	; 0x28
 8005140:	d866      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005225 	.word	0x08005225
 800514c:	08005211 	.word	0x08005211
 8005150:	08005211 	.word	0x08005211
 8005154:	08005211 	.word	0x08005211
 8005158:	08005211 	.word	0x08005211
 800515c:	08005211 	.word	0x08005211
 8005160:	08005211 	.word	0x08005211
 8005164:	08005211 	.word	0x08005211
 8005168:	080051ed 	.word	0x080051ed
 800516c:	08005211 	.word	0x08005211
 8005170:	08005211 	.word	0x08005211
 8005174:	08005211 	.word	0x08005211
 8005178:	08005211 	.word	0x08005211
 800517c:	08005211 	.word	0x08005211
 8005180:	08005211 	.word	0x08005211
 8005184:	08005211 	.word	0x08005211
 8005188:	080051ff 	.word	0x080051ff
 800518c:	08005211 	.word	0x08005211
 8005190:	08005211 	.word	0x08005211
 8005194:	08005211 	.word	0x08005211
 8005198:	08005211 	.word	0x08005211
 800519c:	08005211 	.word	0x08005211
 80051a0:	08005211 	.word	0x08005211
 80051a4:	08005211 	.word	0x08005211
 80051a8:	08005225 	.word	0x08005225
 80051ac:	08005211 	.word	0x08005211
 80051b0:	08005211 	.word	0x08005211
 80051b4:	08005211 	.word	0x08005211
 80051b8:	08005211 	.word	0x08005211
 80051bc:	08005211 	.word	0x08005211
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005211 	.word	0x08005211
 80051c8:	08005225 	.word	0x08005225
 80051cc:	08005211 	.word	0x08005211
 80051d0:	08005211 	.word	0x08005211
 80051d4:	08005211 	.word	0x08005211
 80051d8:	08005211 	.word	0x08005211
 80051dc:	08005211 	.word	0x08005211
 80051e0:	08005211 	.word	0x08005211
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005225 	.word	0x08005225
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	2101      	movs	r1, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fdfa 	bl	8005dec <RCCEx_PLL2_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051fc:	e013      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fea3 	bl	8005f50 <RCCEx_PLL3_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800520e:	e00a      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
      break;
 8005214:	e007      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
 800521c:	58024800 	.word	0x58024800
 8005220:	00ffffcf 	.word	0x00ffffcf
      break;
 8005224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800522c:	4b96      	ldr	r3, [pc, #600]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005238:	4993      	ldr	r1, [pc, #588]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800523a:	4313      	orrs	r3, r2
 800523c:	654b      	str	r3, [r1, #84]	; 0x54
 800523e:	e001      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
 8005242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d038      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005254:	2b05      	cmp	r3, #5
 8005256:	d821      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	080052a3 	.word	0x080052a3
 8005264:	08005279 	.word	0x08005279
 8005268:	0800528b 	.word	0x0800528b
 800526c:	080052a3 	.word	0x080052a3
 8005270:	080052a3 	.word	0x080052a3
 8005274:	080052a3 	.word	0x080052a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fdb4 	bl	8005dec <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005288:	e00c      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3324      	adds	r3, #36	; 0x24
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fe5d 	bl	8005f50 <RCCEx_PLL3_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800529a:	e003      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
      break;
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80052a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052aa:	4b77      	ldr	r3, [pc, #476]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	4974      	ldr	r1, [pc, #464]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	654b      	str	r3, [r1, #84]	; 0x54
 80052bc:	e001      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d03a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	d821      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005323 	.word	0x08005323
 80052e4:	080052f9 	.word	0x080052f9
 80052e8:	0800530b 	.word	0x0800530b
 80052ec:	08005323 	.word	0x08005323
 80052f0:	08005323 	.word	0x08005323
 80052f4:	08005323 	.word	0x08005323
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd74 	bl	8005dec <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005308:	e00c      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fe1d 	bl	8005f50 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800531a:	e003      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800532a:	4b57      	ldr	r3, [pc, #348]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	f023 0207 	bic.w	r2, r3, #7
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	4953      	ldr	r1, [pc, #332]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	658b      	str	r3, [r1, #88]	; 0x58
 800533e:	e001      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d04b      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800535a:	d02e      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800535c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005360:	d828      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d02a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536c:	d822      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800536e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005372:	d026      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005374:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005378:	d81c      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800537a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800537e:	d010      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005384:	d816      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01d      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800538a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538e:	d111      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fd28 	bl	8005dec <RCCEx_PLL2_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053a0:	e012      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3324      	adds	r3, #36	; 0x24
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fdd1 	bl	8005f50 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053b2:	e009      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
      break;
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053ba:	bf00      	nop
 80053bc:	e004      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ce:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	492a      	ldr	r1, [pc, #168]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	654b      	str	r3, [r1, #84]	; 0x54
 80053e2:	e001      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d04d      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053fe:	d02e      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005400:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005404:	d828      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d02a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d822      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005416:	d026      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800541c:	d81c      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005422:	d010      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005428:	d816      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01d      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	d111      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fcd6 	bl	8005dec <RCCEx_PLL2_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005444:	e012      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3324      	adds	r3, #36	; 0x24
 800544a:	2102      	movs	r1, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fd7f 	bl	8005f50 <RCCEx_PLL3_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005456:	e009      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
      break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800546a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10c      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005480:	4901      	ldr	r1, [pc, #4]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	658b      	str	r3, [r1, #88]	; 0x58
 8005486:	e003      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d04b      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054a6:	d02e      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80054a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054ac:	d828      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d02a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80054b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b8:	d822      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054be:	d026      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80054c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054c4:	d81c      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ca:	d010      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d816      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01d      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054da:	d111      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fc82 	bl	8005dec <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054ec:	e012      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3324      	adds	r3, #36	; 0x24
 80054f2:	2102      	movs	r1, #2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fd2b 	bl	8005f50 <RCCEx_PLL3_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054fe:	e009      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75fb      	strb	r3, [r7, #23]
      break;
 8005504:	e006      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005506:	bf00      	nop
 8005508:	e004      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800551a:	4b9d      	ldr	r3, [pc, #628]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005528:	4999      	ldr	r1, [pc, #612]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800552a:	4313      	orrs	r3, r2
 800552c:	658b      	str	r3, [r1, #88]	; 0x58
 800552e:	e001      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554a:	d10a      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3324      	adds	r3, #36	; 0x24
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fcfc 	bl	8005f50 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005562:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005570:	4987      	ldr	r1, [pc, #540]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005572:	4313      	orrs	r3, r2
 8005574:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558c:	d10a      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3324      	adds	r3, #36	; 0x24
 8005592:	2102      	movs	r1, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fcdb 	bl	8005f50 <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055a4:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b2:	4977      	ldr	r1, [pc, #476]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d034      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ce:	d01d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80055d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d4:	d817      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055de:	d009      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80055e0:	e011      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fbff 	bl	8005dec <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055f2:	e00c      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3324      	adds	r3, #36	; 0x24
 80055f8:	2102      	movs	r1, #2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fca8 	bl	8005f50 <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005604:	e003      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800560c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005614:	4b5e      	ldr	r3, [pc, #376]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005622:	495b      	ldr	r1, [pc, #364]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005624:	4313      	orrs	r3, r2
 8005626:	658b      	str	r3, [r1, #88]	; 0x58
 8005628:	e001      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d033      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005644:	d01c      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005646:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800564a:	d816      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	d003      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005656:	d007      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005658:	e00f      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565a:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a4c      	ldr	r2, [pc, #304]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005666:	e00c      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3324      	adds	r3, #36	; 0x24
 800566c:	2101      	movs	r1, #1
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fc6e 	bl	8005f50 <RCCEx_PLL3_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
      break;
 800567e:	e000      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005688:	4b41      	ldr	r3, [pc, #260]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005696:	493e      	ldr	r1, [pc, #248]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005698:	4313      	orrs	r3, r2
 800569a:	654b      	str	r3, [r1, #84]	; 0x54
 800569c:	e001      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d029      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d007      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80056bc:	e00f      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	4a33      	ldr	r2, [pc, #204]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056ca:	e00b      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	2102      	movs	r1, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb8a 	bl	8005dec <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056dc:	e002      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
      break;
 80056e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f6:	4926      	ldr	r1, [pc, #152]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056fc:	e001      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3324      	adds	r3, #36	; 0x24
 8005712:	2102      	movs	r1, #2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fc1b 	bl	8005f50 <RCCEx_PLL3_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d033      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005738:	d017      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800573a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800573e:	d811      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005744:	d013      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574a:	d80b      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005754:	d106      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005756:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005760:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005762:	e007      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
      break;
 8005768:	e004      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800576a:	bf00      	nop
 800576c:	e002      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10c      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005786:	4902      	ldr	r1, [pc, #8]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005788:	4313      	orrs	r3, r2
 800578a:	654b      	str	r3, [r1, #84]	; 0x54
 800578c:	e004      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057a4:	4b31      	ldr	r3, [pc, #196]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	492e      	ldr	r1, [pc, #184]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057c2:	4b2a      	ldr	r3, [pc, #168]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057d0:	4926      	ldr	r1, [pc, #152]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ee:	491f      	ldr	r1, [pc, #124]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00d      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800580a:	6113      	str	r3, [r2, #16]
 800580c:	4b17      	ldr	r3, [pc, #92]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005816:	4915      	ldr	r1, [pc, #84]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da08      	bge.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005828:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	490e      	ldr	r1, [pc, #56]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005832:	4313      	orrs	r3, r2
 8005834:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	4906      	ldr	r1, [pc, #24]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005852:	4313      	orrs	r3, r2
 8005854:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005856:	7dbb      	ldrb	r3, [r7, #22]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	58024400 	.word	0x58024400

08005870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005874:	f7ff f85a 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	4904      	ldr	r1, [pc, #16]	; (8005898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	58024400 	.word	0x58024400
 8005898:	08007204 	.word	0x08007204

0800589c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058a4:	4ba1      	ldr	r3, [pc, #644]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058ae:	4b9f      	ldr	r3, [pc, #636]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	0b1b      	lsrs	r3, r3, #12
 80058b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058ba:	4b9c      	ldr	r3, [pc, #624]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80058c6:	4b99      	ldr	r3, [pc, #612]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8111 	beq.w	8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	f000 8083 	beq.w	80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	f200 80a1 	bhi.w	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d056      	beq.n	80059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005906:	e099      	b.n	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005908:	4b88      	ldr	r3, [pc, #544]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02d      	beq.n	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005914:	4b85      	ldr	r3, [pc, #532]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	4a84      	ldr	r2, [pc, #528]	; (8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b7b      	ldr	r3, [pc, #492]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005952:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800596e:	e087      	b.n	8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a03 	vldr	s12, [r7, #12]
 8005996:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b2:	e065      	b.n	8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b59      	ldr	r3, [pc, #356]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f6:	e043      	b.n	8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b48      	ldr	r3, [pc, #288]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a3a:	e021      	b.n	8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a80:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 2a90 	vmov	r2, s15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005aae:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad4:	ee17 2a90 	vmov	r2, s15
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b02:	ee17 2a90 	vmov	r2, s15
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b0a:	e008      	b.n	8005b1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
}
 8005b1e:	bf00      	nop
 8005b20:	3724      	adds	r7, #36	; 0x24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	58024400 	.word	0x58024400
 8005b30:	03d09000 	.word	0x03d09000
 8005b34:	46000000 	.word	0x46000000
 8005b38:	4c742400 	.word	0x4c742400
 8005b3c:	4a742400 	.word	0x4a742400
 8005b40:	4af42400 	.word	0x4af42400

08005b44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b4c:	4ba1      	ldr	r3, [pc, #644]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b56:	4b9f      	ldr	r3, [pc, #636]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	0d1b      	lsrs	r3, r3, #20
 8005b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b62:	4b9c      	ldr	r3, [pc, #624]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b6e:	4b99      	ldr	r3, [pc, #612]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	08db      	lsrs	r3, r3, #3
 8005b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8111 	beq.w	8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	f000 8083 	beq.w	8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	f200 80a1 	bhi.w	8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d056      	beq.n	8005c5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bae:	e099      	b.n	8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb0:	4b88      	ldr	r3, [pc, #544]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02d      	beq.n	8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bbc:	4b85      	ldr	r3, [pc, #532]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	08db      	lsrs	r3, r3, #3
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	4a84      	ldr	r2, [pc, #528]	; (8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b7b      	ldr	r3, [pc, #492]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c16:	e087      	b.n	8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005de0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c5a:	e065      	b.n	8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6e:	4b59      	ldr	r3, [pc, #356]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c9e:	e043      	b.n	8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b48      	ldr	r3, [pc, #288]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ce2:	e021      	b.n	8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	0a5b      	lsrs	r3, r3, #9
 8005d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4e:	ee17 2a90 	vmov	r2, s15
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d56:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7c:	ee17 2a90 	vmov	r2, s15
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d84:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	0e1b      	lsrs	r3, r3, #24
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005daa:	ee17 2a90 	vmov	r2, s15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005db2:	e008      	b.n	8005dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	3724      	adds	r7, #36	; 0x24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	03d09000 	.word	0x03d09000
 8005ddc:	46000000 	.word	0x46000000
 8005de0:	4c742400 	.word	0x4c742400
 8005de4:	4a742400 	.word	0x4a742400
 8005de8:	4af42400 	.word	0x4af42400

08005dec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dfa:	4b53      	ldr	r3, [pc, #332]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d101      	bne.n	8005e0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e099      	b.n	8005f3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e0a:	4b4f      	ldr	r3, [pc, #316]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4e      	ldr	r2, [pc, #312]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e16:	f7fb f97d 	bl	8001114 <HAL_GetTick>
 8005e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e1c:	e008      	b.n	8005e30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e1e:	f7fb f979 	bl	8001114 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e086      	b.n	8005f3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e30:	4b45      	ldr	r3, [pc, #276]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f0      	bne.n	8005e1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e3c:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	031b      	lsls	r3, r3, #12
 8005e4a:	493f      	ldr	r1, [pc, #252]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	025b      	lsls	r3, r3, #9
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	061b      	lsls	r3, r3, #24
 8005e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e80:	4931      	ldr	r1, [pc, #196]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e86:	4b30      	ldr	r3, [pc, #192]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	492d      	ldr	r1, [pc, #180]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e98:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	f023 0220 	bic.w	r2, r3, #32
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	4928      	ldr	r1, [pc, #160]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005eaa:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	4a26      	ldr	r2, [pc, #152]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	f023 0310 	bic.w	r3, r3, #16
 8005eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eba:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <RCCEx_PLL2_Config+0x160>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	69d2      	ldr	r2, [r2, #28]
 8005ec2:	00d2      	lsls	r2, r2, #3
 8005ec4:	4920      	ldr	r1, [pc, #128]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eca:	4b1f      	ldr	r3, [pc, #124]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ed0:	f043 0310 	orr.w	r3, r3, #16
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee8:	e00f      	b.n	8005f0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d106      	bne.n	8005efe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ef0:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005efc:	e005      	b.n	8005f0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a0e      	ldr	r2, [pc, #56]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f16:	f7fb f8fd 	bl	8001114 <HAL_GetTick>
 8005f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f1c:	e008      	b.n	8005f30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f1e:	f7fb f8f9 	bl	8001114 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e006      	b.n	8005f3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <RCCEx_PLL2_Config+0x15c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	ffff0007 	.word	0xffff0007

08005f50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f5e:	4b53      	ldr	r3, [pc, #332]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d101      	bne.n	8005f6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e099      	b.n	80060a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a4e      	ldr	r2, [pc, #312]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7a:	f7fb f8cb 	bl	8001114 <HAL_GetTick>
 8005f7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f80:	e008      	b.n	8005f94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f82:	f7fb f8c7 	bl	8001114 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e086      	b.n	80060a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f94:	4b45      	ldr	r3, [pc, #276]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f0      	bne.n	8005f82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fa0:	4b42      	ldr	r3, [pc, #264]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	051b      	lsls	r3, r3, #20
 8005fae:	493f      	ldr	r1, [pc, #252]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	025b      	lsls	r3, r3, #9
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fe4:	4931      	ldr	r1, [pc, #196]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fea:	4b30      	ldr	r3, [pc, #192]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	492d      	ldr	r1, [pc, #180]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ffc:	4b2b      	ldr	r3, [pc, #172]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	4928      	ldr	r1, [pc, #160]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 800600a:	4313      	orrs	r3, r2
 800600c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800600e:	4b27      	ldr	r3, [pc, #156]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a26      	ldr	r2, [pc, #152]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800601a:	4b24      	ldr	r3, [pc, #144]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 800601c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601e:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <RCCEx_PLL3_Config+0x160>)
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	69d2      	ldr	r2, [r2, #28]
 8006026:	00d2      	lsls	r2, r2, #3
 8006028:	4920      	ldr	r1, [pc, #128]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800602e:	4b1f      	ldr	r3, [pc, #124]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006040:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	4a19      	ldr	r2, [pc, #100]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800604a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800604c:	e00f      	b.n	800606e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d106      	bne.n	8006062 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	4a14      	ldr	r2, [pc, #80]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 800605a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800605e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006060:	e005      	b.n	800606e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006062:	4b12      	ldr	r3, [pc, #72]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	4a11      	ldr	r2, [pc, #68]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a0e      	ldr	r2, [pc, #56]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607a:	f7fb f84b 	bl	8001114 <HAL_GetTick>
 800607e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006080:	e008      	b.n	8006094 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006082:	f7fb f847 	bl	8001114 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e006      	b.n	80060a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <RCCEx_PLL3_Config+0x15c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	58024400 	.word	0x58024400
 80060b0:	ffff0007 	.word	0xffff0007

080060b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e042      	b.n	800614c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fa fe73 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2224      	movs	r2, #36	; 0x24
 80060e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f82c 	bl	8006154 <UART_SetConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e022      	b.n	800614c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fd88 	bl	8006c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fe0f 	bl	8006d68 <UART_CheckIdleState>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006158:	b092      	sub	sp, #72	; 0x48
 800615a:	af00      	add	r7, sp, #0
 800615c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	431a      	orrs	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	431a      	orrs	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	4313      	orrs	r3, r2
 800617a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4bbe      	ldr	r3, [pc, #760]	; (800647c <UART_SetConfig+0x328>)
 8006184:	4013      	ands	r3, r2
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800618c:	430b      	orrs	r3, r1
 800618e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4ab3      	ldr	r2, [pc, #716]	; (8006480 <UART_SetConfig+0x32c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061bc:	4313      	orrs	r3, r2
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	4baf      	ldr	r3, [pc, #700]	; (8006484 <UART_SetConfig+0x330>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	f023 010f 	bic.w	r1, r3, #15
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4aa6      	ldr	r2, [pc, #664]	; (8006488 <UART_SetConfig+0x334>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d177      	bne.n	80062e4 <UART_SetConfig+0x190>
 80061f4:	4ba5      	ldr	r3, [pc, #660]	; (800648c <UART_SetConfig+0x338>)
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061fc:	2b28      	cmp	r3, #40	; 0x28
 80061fe:	d86d      	bhi.n	80062dc <UART_SetConfig+0x188>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0xb4>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	080062ad 	.word	0x080062ad
 800620c:	080062dd 	.word	0x080062dd
 8006210:	080062dd 	.word	0x080062dd
 8006214:	080062dd 	.word	0x080062dd
 8006218:	080062dd 	.word	0x080062dd
 800621c:	080062dd 	.word	0x080062dd
 8006220:	080062dd 	.word	0x080062dd
 8006224:	080062dd 	.word	0x080062dd
 8006228:	080062b5 	.word	0x080062b5
 800622c:	080062dd 	.word	0x080062dd
 8006230:	080062dd 	.word	0x080062dd
 8006234:	080062dd 	.word	0x080062dd
 8006238:	080062dd 	.word	0x080062dd
 800623c:	080062dd 	.word	0x080062dd
 8006240:	080062dd 	.word	0x080062dd
 8006244:	080062dd 	.word	0x080062dd
 8006248:	080062bd 	.word	0x080062bd
 800624c:	080062dd 	.word	0x080062dd
 8006250:	080062dd 	.word	0x080062dd
 8006254:	080062dd 	.word	0x080062dd
 8006258:	080062dd 	.word	0x080062dd
 800625c:	080062dd 	.word	0x080062dd
 8006260:	080062dd 	.word	0x080062dd
 8006264:	080062dd 	.word	0x080062dd
 8006268:	080062c5 	.word	0x080062c5
 800626c:	080062dd 	.word	0x080062dd
 8006270:	080062dd 	.word	0x080062dd
 8006274:	080062dd 	.word	0x080062dd
 8006278:	080062dd 	.word	0x080062dd
 800627c:	080062dd 	.word	0x080062dd
 8006280:	080062dd 	.word	0x080062dd
 8006284:	080062dd 	.word	0x080062dd
 8006288:	080062cd 	.word	0x080062cd
 800628c:	080062dd 	.word	0x080062dd
 8006290:	080062dd 	.word	0x080062dd
 8006294:	080062dd 	.word	0x080062dd
 8006298:	080062dd 	.word	0x080062dd
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062dd 	.word	0x080062dd
 80062a4:	080062dd 	.word	0x080062dd
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e222      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e21e      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e21a      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e216      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062cc:	2320      	movs	r3, #32
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e212      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062d4:	2340      	movs	r3, #64	; 0x40
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e20e      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e20a      	b.n	80066fa <UART_SetConfig+0x5a6>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a69      	ldr	r2, [pc, #420]	; (8006490 <UART_SetConfig+0x33c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d130      	bne.n	8006350 <UART_SetConfig+0x1fc>
 80062ee:	4b67      	ldr	r3, [pc, #412]	; (800648c <UART_SetConfig+0x338>)
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d826      	bhi.n	8006348 <UART_SetConfig+0x1f4>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0x1ac>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006319 	.word	0x08006319
 8006304:	08006321 	.word	0x08006321
 8006308:	08006329 	.word	0x08006329
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631e:	e1ec      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e1e8      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632e:	e1e4      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e1e0      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006338:	2320      	movs	r3, #32
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e1dc      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e1d8      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006348:	2380      	movs	r3, #128	; 0x80
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e1d4      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a4f      	ldr	r2, [pc, #316]	; (8006494 <UART_SetConfig+0x340>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d130      	bne.n	80063bc <UART_SetConfig+0x268>
 800635a:	4b4c      	ldr	r3, [pc, #304]	; (800648c <UART_SetConfig+0x338>)
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b05      	cmp	r3, #5
 8006364:	d826      	bhi.n	80063b4 <UART_SetConfig+0x260>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <UART_SetConfig+0x218>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006385 	.word	0x08006385
 8006370:	0800638d 	.word	0x0800638d
 8006374:	08006395 	.word	0x08006395
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063ad 	.word	0x080063ad
 8006384:	2300      	movs	r3, #0
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e1b6      	b.n	80066fa <UART_SetConfig+0x5a6>
 800638c:	2304      	movs	r3, #4
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e1b2      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006394:	2308      	movs	r3, #8
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e1ae      	b.n	80066fa <UART_SetConfig+0x5a6>
 800639c:	2310      	movs	r3, #16
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e1aa      	b.n	80066fa <UART_SetConfig+0x5a6>
 80063a4:	2320      	movs	r3, #32
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063aa:	e1a6      	b.n	80066fa <UART_SetConfig+0x5a6>
 80063ac:	2340      	movs	r3, #64	; 0x40
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b2:	e1a2      	b.n	80066fa <UART_SetConfig+0x5a6>
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ba:	e19e      	b.n	80066fa <UART_SetConfig+0x5a6>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a35      	ldr	r2, [pc, #212]	; (8006498 <UART_SetConfig+0x344>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d130      	bne.n	8006428 <UART_SetConfig+0x2d4>
 80063c6:	4b31      	ldr	r3, [pc, #196]	; (800648c <UART_SetConfig+0x338>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d826      	bhi.n	8006420 <UART_SetConfig+0x2cc>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x284>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	08006401 	.word	0x08006401
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006419 	.word	0x08006419
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e180      	b.n	80066fa <UART_SetConfig+0x5a6>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e17c      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e178      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e174      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006410:	2320      	movs	r3, #32
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e170      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006418:	2340      	movs	r3, #64	; 0x40
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e16c      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006426:	e168      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1b      	ldr	r2, [pc, #108]	; (800649c <UART_SetConfig+0x348>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d142      	bne.n	80064b8 <UART_SetConfig+0x364>
 8006432:	4b16      	ldr	r3, [pc, #88]	; (800648c <UART_SetConfig+0x338>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b05      	cmp	r3, #5
 800643c:	d838      	bhi.n	80064b0 <UART_SetConfig+0x35c>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x2f0>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	0800645d 	.word	0x0800645d
 8006448:	08006465 	.word	0x08006465
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006475 	.word	0x08006475
 8006454:	080064a1 	.word	0x080064a1
 8006458:	080064a9 	.word	0x080064a9
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e14a      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e146      	b.n	80066fa <UART_SetConfig+0x5a6>
 800646c:	2308      	movs	r3, #8
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e142      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006474:	2310      	movs	r3, #16
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e13e      	b.n	80066fa <UART_SetConfig+0x5a6>
 800647c:	cfff69f3 	.word	0xcfff69f3
 8006480:	58000c00 	.word	0x58000c00
 8006484:	11fff4ff 	.word	0x11fff4ff
 8006488:	40011000 	.word	0x40011000
 800648c:	58024400 	.word	0x58024400
 8006490:	40004400 	.word	0x40004400
 8006494:	40004800 	.word	0x40004800
 8006498:	40004c00 	.word	0x40004c00
 800649c:	40005000 	.word	0x40005000
 80064a0:	2320      	movs	r3, #32
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e128      	b.n	80066fa <UART_SetConfig+0x5a6>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e124      	b.n	80066fa <UART_SetConfig+0x5a6>
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e120      	b.n	80066fa <UART_SetConfig+0x5a6>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4acb      	ldr	r2, [pc, #812]	; (80067ec <UART_SetConfig+0x698>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d176      	bne.n	80065b0 <UART_SetConfig+0x45c>
 80064c2:	4bcb      	ldr	r3, [pc, #812]	; (80067f0 <UART_SetConfig+0x69c>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ca:	2b28      	cmp	r3, #40	; 0x28
 80064cc:	d86c      	bhi.n	80065a8 <UART_SetConfig+0x454>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x380>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	08006579 	.word	0x08006579
 80064d8:	080065a9 	.word	0x080065a9
 80064dc:	080065a9 	.word	0x080065a9
 80064e0:	080065a9 	.word	0x080065a9
 80064e4:	080065a9 	.word	0x080065a9
 80064e8:	080065a9 	.word	0x080065a9
 80064ec:	080065a9 	.word	0x080065a9
 80064f0:	080065a9 	.word	0x080065a9
 80064f4:	08006581 	.word	0x08006581
 80064f8:	080065a9 	.word	0x080065a9
 80064fc:	080065a9 	.word	0x080065a9
 8006500:	080065a9 	.word	0x080065a9
 8006504:	080065a9 	.word	0x080065a9
 8006508:	080065a9 	.word	0x080065a9
 800650c:	080065a9 	.word	0x080065a9
 8006510:	080065a9 	.word	0x080065a9
 8006514:	08006589 	.word	0x08006589
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065a9 	.word	0x080065a9
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	080065a9 	.word	0x080065a9
 8006534:	08006591 	.word	0x08006591
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	080065a9 	.word	0x080065a9
 8006550:	080065a9 	.word	0x080065a9
 8006554:	08006599 	.word	0x08006599
 8006558:	080065a9 	.word	0x080065a9
 800655c:	080065a9 	.word	0x080065a9
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
 8006574:	080065a1 	.word	0x080065a1
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e0bc      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e0b8      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e0b4      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e0b0      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006598:	2320      	movs	r3, #32
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e0ac      	b.n	80066fa <UART_SetConfig+0x5a6>
 80065a0:	2340      	movs	r3, #64	; 0x40
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e0a8      	b.n	80066fa <UART_SetConfig+0x5a6>
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e0a4      	b.n	80066fa <UART_SetConfig+0x5a6>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a8f      	ldr	r2, [pc, #572]	; (80067f4 <UART_SetConfig+0x6a0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d130      	bne.n	800661c <UART_SetConfig+0x4c8>
 80065ba:	4b8d      	ldr	r3, [pc, #564]	; (80067f0 <UART_SetConfig+0x69c>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d826      	bhi.n	8006614 <UART_SetConfig+0x4c0>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0x478>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065e5 	.word	0x080065e5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ea:	e086      	b.n	80066fa <UART_SetConfig+0x5a6>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e082      	b.n	80066fa <UART_SetConfig+0x5a6>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e07e      	b.n	80066fa <UART_SetConfig+0x5a6>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e07a      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006604:	2320      	movs	r3, #32
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e076      	b.n	80066fa <UART_SetConfig+0x5a6>
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e072      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e06e      	b.n	80066fa <UART_SetConfig+0x5a6>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a75      	ldr	r2, [pc, #468]	; (80067f8 <UART_SetConfig+0x6a4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d130      	bne.n	8006688 <UART_SetConfig+0x534>
 8006626:	4b72      	ldr	r3, [pc, #456]	; (80067f0 <UART_SetConfig+0x69c>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	2b05      	cmp	r3, #5
 8006630:	d826      	bhi.n	8006680 <UART_SetConfig+0x52c>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x4e4>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006651 	.word	0x08006651
 800663c:	08006659 	.word	0x08006659
 8006640:	08006661 	.word	0x08006661
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e050      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e04c      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e048      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e044      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006670:	2320      	movs	r3, #32
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e040      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e03c      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e038      	b.n	80066fa <UART_SetConfig+0x5a6>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a5b      	ldr	r2, [pc, #364]	; (80067fc <UART_SetConfig+0x6a8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d130      	bne.n	80066f4 <UART_SetConfig+0x5a0>
 8006692:	4b57      	ldr	r3, [pc, #348]	; (80067f0 <UART_SetConfig+0x69c>)
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b05      	cmp	r3, #5
 800669c:	d826      	bhi.n	80066ec <UART_SetConfig+0x598>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x550>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066bd 	.word	0x080066bd
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	080066cd 	.word	0x080066cd
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066dd 	.word	0x080066dd
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e01a      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e016      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e012      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e00e      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066dc:	2320      	movs	r3, #32
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e00a      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e006      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f2:	e002      	b.n	80066fa <UART_SetConfig+0x5a6>
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a3f      	ldr	r2, [pc, #252]	; (80067fc <UART_SetConfig+0x6a8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	f040 80f8 	bne.w	80068f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006706:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800670a:	2b20      	cmp	r3, #32
 800670c:	dc46      	bgt.n	800679c <UART_SetConfig+0x648>
 800670e:	2b02      	cmp	r3, #2
 8006710:	f2c0 8082 	blt.w	8006818 <UART_SetConfig+0x6c4>
 8006714:	3b02      	subs	r3, #2
 8006716:	2b1e      	cmp	r3, #30
 8006718:	d87e      	bhi.n	8006818 <UART_SetConfig+0x6c4>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x5cc>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	080067a3 	.word	0x080067a3
 8006724:	08006819 	.word	0x08006819
 8006728:	080067ab 	.word	0x080067ab
 800672c:	08006819 	.word	0x08006819
 8006730:	08006819 	.word	0x08006819
 8006734:	08006819 	.word	0x08006819
 8006738:	080067bb 	.word	0x080067bb
 800673c:	08006819 	.word	0x08006819
 8006740:	08006819 	.word	0x08006819
 8006744:	08006819 	.word	0x08006819
 8006748:	08006819 	.word	0x08006819
 800674c:	08006819 	.word	0x08006819
 8006750:	08006819 	.word	0x08006819
 8006754:	08006819 	.word	0x08006819
 8006758:	080067cb 	.word	0x080067cb
 800675c:	08006819 	.word	0x08006819
 8006760:	08006819 	.word	0x08006819
 8006764:	08006819 	.word	0x08006819
 8006768:	08006819 	.word	0x08006819
 800676c:	08006819 	.word	0x08006819
 8006770:	08006819 	.word	0x08006819
 8006774:	08006819 	.word	0x08006819
 8006778:	08006819 	.word	0x08006819
 800677c:	08006819 	.word	0x08006819
 8006780:	08006819 	.word	0x08006819
 8006784:	08006819 	.word	0x08006819
 8006788:	08006819 	.word	0x08006819
 800678c:	08006819 	.word	0x08006819
 8006790:	08006819 	.word	0x08006819
 8006794:	08006819 	.word	0x08006819
 8006798:	0800680b 	.word	0x0800680b
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d037      	beq.n	8006810 <UART_SetConfig+0x6bc>
 80067a0:	e03a      	b.n	8006818 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80067a2:	f7ff f865 	bl	8005870 <HAL_RCCEx_GetD3PCLK1Freq>
 80067a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067a8:	e03c      	b.n	8006824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff f874 	bl	800589c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b8:	e034      	b.n	8006824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ba:	f107 0318 	add.w	r3, r7, #24
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff f9c0 	bl	8005b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c8:	e02c      	b.n	8006824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <UART_SetConfig+0x69c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <UART_SetConfig+0x69c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	4a07      	ldr	r2, [pc, #28]	; (8006800 <UART_SetConfig+0x6ac>)
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067e8:	e01c      	b.n	8006824 <UART_SetConfig+0x6d0>
 80067ea:	bf00      	nop
 80067ec:	40011400 	.word	0x40011400
 80067f0:	58024400 	.word	0x58024400
 80067f4:	40007800 	.word	0x40007800
 80067f8:	40007c00 	.word	0x40007c00
 80067fc:	58000c00 	.word	0x58000c00
 8006800:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006804:	4b9d      	ldr	r3, [pc, #628]	; (8006a7c <UART_SetConfig+0x928>)
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006808:	e00c      	b.n	8006824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800680a:	4b9d      	ldr	r3, [pc, #628]	; (8006a80 <UART_SetConfig+0x92c>)
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800680e:	e009      	b.n	8006824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006816:	e005      	b.n	8006824 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006822:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 81de 	beq.w	8006be8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	4a94      	ldr	r2, [pc, #592]	; (8006a84 <UART_SetConfig+0x930>)
 8006832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006836:	461a      	mov	r2, r3
 8006838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683a:	fbb3 f3f2 	udiv	r3, r3, r2
 800683e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684c:	429a      	cmp	r2, r3
 800684e:	d305      	bcc.n	800685c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006858:	429a      	cmp	r2, r3
 800685a:	d903      	bls.n	8006864 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006862:	e1c1      	b.n	8006be8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	2200      	movs	r2, #0
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	60fa      	str	r2, [r7, #12]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	4a84      	ldr	r2, [pc, #528]	; (8006a84 <UART_SetConfig+0x930>)
 8006872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006876:	b29b      	uxth	r3, r3
 8006878:	2200      	movs	r2, #0
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006886:	f7f9 fd27 	bl	80002d8 <__aeabi_uldivmod>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	020b      	lsls	r3, r1, #8
 800689c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068a0:	0202      	lsls	r2, r0, #8
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	6849      	ldr	r1, [r1, #4]
 80068a6:	0849      	lsrs	r1, r1, #1
 80068a8:	2000      	movs	r0, #0
 80068aa:	460c      	mov	r4, r1
 80068ac:	4605      	mov	r5, r0
 80068ae:	eb12 0804 	adds.w	r8, r2, r4
 80068b2:	eb43 0905 	adc.w	r9, r3, r5
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	469a      	mov	sl, r3
 80068be:	4693      	mov	fp, r2
 80068c0:	4652      	mov	r2, sl
 80068c2:	465b      	mov	r3, fp
 80068c4:	4640      	mov	r0, r8
 80068c6:	4649      	mov	r1, r9
 80068c8:	f7f9 fd06 	bl	80002d8 <__aeabi_uldivmod>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4613      	mov	r3, r2
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068da:	d308      	bcc.n	80068ee <UART_SetConfig+0x79a>
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e2:	d204      	bcs.n	80068ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e17c      	b.n	8006be8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80068f4:	e178      	b.n	8006be8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068fe:	f040 80c5 	bne.w	8006a8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006902:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006906:	2b20      	cmp	r3, #32
 8006908:	dc48      	bgt.n	800699c <UART_SetConfig+0x848>
 800690a:	2b00      	cmp	r3, #0
 800690c:	db7b      	blt.n	8006a06 <UART_SetConfig+0x8b2>
 800690e:	2b20      	cmp	r3, #32
 8006910:	d879      	bhi.n	8006a06 <UART_SetConfig+0x8b2>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x7c4>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	080069a3 	.word	0x080069a3
 800691c:	080069ab 	.word	0x080069ab
 8006920:	08006a07 	.word	0x08006a07
 8006924:	08006a07 	.word	0x08006a07
 8006928:	080069b3 	.word	0x080069b3
 800692c:	08006a07 	.word	0x08006a07
 8006930:	08006a07 	.word	0x08006a07
 8006934:	08006a07 	.word	0x08006a07
 8006938:	080069c3 	.word	0x080069c3
 800693c:	08006a07 	.word	0x08006a07
 8006940:	08006a07 	.word	0x08006a07
 8006944:	08006a07 	.word	0x08006a07
 8006948:	08006a07 	.word	0x08006a07
 800694c:	08006a07 	.word	0x08006a07
 8006950:	08006a07 	.word	0x08006a07
 8006954:	08006a07 	.word	0x08006a07
 8006958:	080069d3 	.word	0x080069d3
 800695c:	08006a07 	.word	0x08006a07
 8006960:	08006a07 	.word	0x08006a07
 8006964:	08006a07 	.word	0x08006a07
 8006968:	08006a07 	.word	0x08006a07
 800696c:	08006a07 	.word	0x08006a07
 8006970:	08006a07 	.word	0x08006a07
 8006974:	08006a07 	.word	0x08006a07
 8006978:	08006a07 	.word	0x08006a07
 800697c:	08006a07 	.word	0x08006a07
 8006980:	08006a07 	.word	0x08006a07
 8006984:	08006a07 	.word	0x08006a07
 8006988:	08006a07 	.word	0x08006a07
 800698c:	08006a07 	.word	0x08006a07
 8006990:	08006a07 	.word	0x08006a07
 8006994:	08006a07 	.word	0x08006a07
 8006998:	080069f9 	.word	0x080069f9
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d02e      	beq.n	80069fe <UART_SetConfig+0x8aa>
 80069a0:	e031      	b.n	8006a06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a2:	f7fd fff3 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 80069a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069a8:	e033      	b.n	8006a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069aa:	f7fe f805 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 80069ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069b0:	e02f      	b.n	8006a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe ff70 	bl	800589c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c0:	e027      	b.n	8006a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c2:	f107 0318 	add.w	r3, r7, #24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff f8bc 	bl	8005b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d0:	e01f      	b.n	8006a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069d2:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <UART_SetConfig+0x934>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069de:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <UART_SetConfig+0x934>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	4a24      	ldr	r2, [pc, #144]	; (8006a7c <UART_SetConfig+0x928>)
 80069ea:	fa22 f303 	lsr.w	r3, r2, r3
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069f0:	e00f      	b.n	8006a12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80069f2:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <UART_SetConfig+0x928>)
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f6:	e00c      	b.n	8006a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069f8:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <UART_SetConfig+0x92c>)
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	e009      	b.n	8006a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a04:	e005      	b.n	8006a12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80e7 	beq.w	8006be8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	4a19      	ldr	r2, [pc, #100]	; (8006a84 <UART_SetConfig+0x930>)
 8006a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a2c:	005a      	lsls	r2, r3, #1
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	441a      	add	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	2b0f      	cmp	r3, #15
 8006a44:	d916      	bls.n	8006a74 <UART_SetConfig+0x920>
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4c:	d212      	bcs.n	8006a74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f023 030f 	bic.w	r3, r3, #15
 8006a56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a66:	4313      	orrs	r3, r2
 8006a68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e0b9      	b.n	8006be8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a7a:	e0b5      	b.n	8006be8 <UART_SetConfig+0xa94>
 8006a7c:	03d09000 	.word	0x03d09000
 8006a80:	003d0900 	.word	0x003d0900
 8006a84:	0800721c 	.word	0x0800721c
 8006a88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	dc49      	bgt.n	8006b28 <UART_SetConfig+0x9d4>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	db7c      	blt.n	8006b92 <UART_SetConfig+0xa3e>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d87a      	bhi.n	8006b92 <UART_SetConfig+0xa3e>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x950>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006b2f 	.word	0x08006b2f
 8006aa8:	08006b37 	.word	0x08006b37
 8006aac:	08006b93 	.word	0x08006b93
 8006ab0:	08006b93 	.word	0x08006b93
 8006ab4:	08006b3f 	.word	0x08006b3f
 8006ab8:	08006b93 	.word	0x08006b93
 8006abc:	08006b93 	.word	0x08006b93
 8006ac0:	08006b93 	.word	0x08006b93
 8006ac4:	08006b4f 	.word	0x08006b4f
 8006ac8:	08006b93 	.word	0x08006b93
 8006acc:	08006b93 	.word	0x08006b93
 8006ad0:	08006b93 	.word	0x08006b93
 8006ad4:	08006b93 	.word	0x08006b93
 8006ad8:	08006b93 	.word	0x08006b93
 8006adc:	08006b93 	.word	0x08006b93
 8006ae0:	08006b93 	.word	0x08006b93
 8006ae4:	08006b5f 	.word	0x08006b5f
 8006ae8:	08006b93 	.word	0x08006b93
 8006aec:	08006b93 	.word	0x08006b93
 8006af0:	08006b93 	.word	0x08006b93
 8006af4:	08006b93 	.word	0x08006b93
 8006af8:	08006b93 	.word	0x08006b93
 8006afc:	08006b93 	.word	0x08006b93
 8006b00:	08006b93 	.word	0x08006b93
 8006b04:	08006b93 	.word	0x08006b93
 8006b08:	08006b93 	.word	0x08006b93
 8006b0c:	08006b93 	.word	0x08006b93
 8006b10:	08006b93 	.word	0x08006b93
 8006b14:	08006b93 	.word	0x08006b93
 8006b18:	08006b93 	.word	0x08006b93
 8006b1c:	08006b93 	.word	0x08006b93
 8006b20:	08006b93 	.word	0x08006b93
 8006b24:	08006b85 	.word	0x08006b85
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d02e      	beq.n	8006b8a <UART_SetConfig+0xa36>
 8006b2c:	e031      	b.n	8006b92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7fd ff2d 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 8006b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b34:	e033      	b.n	8006b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b36:	f7fd ff3f 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 8006b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b3c:	e02f      	b.n	8006b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe feaa 	bl	800589c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b4c:	e027      	b.n	8006b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4e:	f107 0318 	add.w	r3, r7, #24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fff6 	bl	8005b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5c:	e01f      	b.n	8006b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b5e:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <UART_SetConfig+0xac0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b6a:	4b2a      	ldr	r3, [pc, #168]	; (8006c14 <UART_SetConfig+0xac0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	4a28      	ldr	r2, [pc, #160]	; (8006c18 <UART_SetConfig+0xac4>)
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b7c:	e00f      	b.n	8006b9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <UART_SetConfig+0xac4>)
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b82:	e00c      	b.n	8006b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <UART_SetConfig+0xac8>)
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b88:	e009      	b.n	8006b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b90:	e005      	b.n	8006b9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b9c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d021      	beq.n	8006be8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <UART_SetConfig+0xacc>)
 8006baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	441a      	add	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	2b0f      	cmp	r3, #15
 8006bcc:	d909      	bls.n	8006be2 <UART_SetConfig+0xa8e>
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d205      	bcs.n	8006be2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60da      	str	r2, [r3, #12]
 8006be0:	e002      	b.n	8006be8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c04:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3748      	adds	r7, #72	; 0x48
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c12:	bf00      	nop
 8006c14:	58024400 	.word	0x58024400
 8006c18:	03d09000 	.word	0x03d09000
 8006c1c:	003d0900 	.word	0x003d0900
 8006c20:	0800721c 	.word	0x0800721c

08006c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01a      	beq.n	8006d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d22:	d10a      	bne.n	8006d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d78:	f7fa f9cc 	bl	8001114 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d10e      	bne.n	8006daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f82f 	bl	8006dfe <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e025      	b.n	8006df6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d10e      	bne.n	8006dd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f819 	bl	8006dfe <UART_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e00f      	b.n	8006df6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b09c      	sub	sp, #112	; 0x70
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0e:	e0a9      	b.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	f000 80a5 	beq.w	8006f64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fa f97b 	bl	8001114 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d140      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e44:	667b      	str	r3, [r7, #100]	; 0x64
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e069      	b.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d051      	beq.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ece:	d149      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8006efa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f023 0301 	bic.w	r3, r3, #1
 8006f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f2c:	623a      	str	r2, [r7, #32]
 8006f2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	6a3a      	ldr	r2, [r7, #32]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e010      	b.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69da      	ldr	r2, [r3, #28]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	bf0c      	ite	eq
 8006f74:	2301      	moveq	r3, #1
 8006f76:	2300      	movne	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	f43f af46 	beq.w	8006e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3770      	adds	r7, #112	; 0x70
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e027      	b.n	8006ff4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2224      	movs	r2, #36	; 0x24
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0201 	bic.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007014:	2302      	movs	r3, #2
 8007016:	e02d      	b.n	8007074 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2224      	movs	r2, #36	; 0x24
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0201 	bic.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f84f 	bl	80070f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e02d      	b.n	80070f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0201 	bic.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f811 	bl	80070f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007104:	2b00      	cmp	r3, #0
 8007106:	d108      	bne.n	800711a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007118:	e031      	b.n	800717e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800711a:	2310      	movs	r3, #16
 800711c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800711e:	2310      	movs	r3, #16
 8007120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	0e5b      	lsrs	r3, r3, #25
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	0f5b      	lsrs	r3, r3, #29
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	7b3a      	ldrb	r2, [r7, #12]
 8007146:	4911      	ldr	r1, [pc, #68]	; (800718c <UARTEx_SetNbDataToProcess+0x94>)
 8007148:	5c8a      	ldrb	r2, [r1, r2]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800714e:	7b3a      	ldrb	r2, [r7, #12]
 8007150:	490f      	ldr	r1, [pc, #60]	; (8007190 <UARTEx_SetNbDataToProcess+0x98>)
 8007152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007154:	fb93 f3f2 	sdiv	r3, r3, r2
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	7b7a      	ldrb	r2, [r7, #13]
 8007164:	4909      	ldr	r1, [pc, #36]	; (800718c <UARTEx_SetNbDataToProcess+0x94>)
 8007166:	5c8a      	ldrb	r2, [r1, r2]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800716c:	7b7a      	ldrb	r2, [r7, #13]
 800716e:	4908      	ldr	r1, [pc, #32]	; (8007190 <UARTEx_SetNbDataToProcess+0x98>)
 8007170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007172:	fb93 f3f2 	sdiv	r3, r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	08007234 	.word	0x08007234
 8007190:	0800723c 	.word	0x0800723c

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4d0d      	ldr	r5, [pc, #52]	; (80071cc <__libc_init_array+0x38>)
 8007198:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	2600      	movs	r6, #0
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	4d0b      	ldr	r5, [pc, #44]	; (80071d4 <__libc_init_array+0x40>)
 80071a6:	4c0c      	ldr	r4, [pc, #48]	; (80071d8 <__libc_init_array+0x44>)
 80071a8:	f000 f820 	bl	80071ec <_init>
 80071ac:	1b64      	subs	r4, r4, r5
 80071ae:	10a4      	asrs	r4, r4, #2
 80071b0:	2600      	movs	r6, #0
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	0800724c 	.word	0x0800724c
 80071d0:	0800724c 	.word	0x0800724c
 80071d4:	0800724c 	.word	0x0800724c
 80071d8:	08007250 	.word	0x08007250

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_init>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr

080071f8 <_fini>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr
