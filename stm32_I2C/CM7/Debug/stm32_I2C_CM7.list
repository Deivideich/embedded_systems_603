
stm32_I2C_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd4  08008dd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ddc  08008ddc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08008de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000074  08008e58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000304  08008e58  00020304  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001690f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002939  00000000  00000000  000369b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  0003a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a39c  00000000  00000000  0003b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b25  00000000  00000000  00075494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b237  00000000  00000000  0008bfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002071f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004804  00000000  00000000  00207240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008c98 	.word	0x08008c98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08008c98 	.word	0x08008c98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b091      	sub	sp, #68	; 0x44
 80007b4:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4bc0      	ldr	r3, [pc, #768]	; (8000ac0 <main+0x310>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fbdf 	bl	8000f9c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fea5 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f9d7 	bl	8000b94 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4bb6      	ldr	r3, [pc, #728]	; (8000ac0 <main+0x310>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4ab4      	ldr	r2, [pc, #720]	; (8000ac0 <main+0x310>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4bb2      	ldr	r3, [pc, #712]	; (8000ac0 <main+0x310>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f002 fecb 	bl	80035a0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f002 fee1 	bl	80035d4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4ba9      	ldr	r3, [pc, #676]	; (8000ac0 <main+0x310>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fbb1 	bl	8000f9c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fb27 	bl	8000e8c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 fab1 	bl	8000da4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000842:	f000 fa61 	bl	8000d08 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000846:	f000 fa1f 	bl	8000c88 <MX_I2C2_Init>
  MX_DMA_Init();
 800084a:	f000 faf7 	bl	8000e3c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  uint16_t dev_addr_w = (0x68<<1);
 800084e:	23d0      	movs	r3, #208	; 0xd0
 8000850:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t dev_addr_r = (0x68<<1)+1;
 8000852:	23d1      	movs	r3, #209	; 0xd1
 8000854:	853b      	strh	r3, [r7, #40]	; 0x28
  uint8_t seconds_addr = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t week_day_addr = 0x03;
 800085c:	2303      	movs	r3, #3
 800085e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t minutes_addr = 0x01;
 8000862:	2301      	movs	r3, #1
 8000864:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t hour_addr = 0x02;
 8000868:	2302      	movs	r3, #2
 800086a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t date_addr = 0x04;
 800086e:	2304      	movs	r3, #4
 8000870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t month_addr = 0x05;
 8000874:	2305      	movs	r3, #5
 8000876:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t year_addr = 0x06;
 800087a:	2306      	movs	r3, #6
 800087c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t date[] = {0x8, 0x9, 0x23, 0x23, 0x3, 0x50};
 8000880:	4a90      	ldr	r2, [pc, #576]	; (8000ac4 <main+0x314>)
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088a:	6018      	str	r0, [r3, #0]
 800088c:	3304      	adds	r3, #4
 800088e:	8019      	strh	r1, [r3, #0]
  uint8_t date_d = date[0];
 8000890:	7e3b      	ldrb	r3, [r7, #24]
 8000892:	75fb      	strb	r3, [r7, #23]
  uint8_t week_day_d = 0x05;
 8000894:	2305      	movs	r3, #5
 8000896:	75bb      	strb	r3, [r7, #22]
  uint8_t month_d = date[1];
 8000898:	7e7b      	ldrb	r3, [r7, #25]
 800089a:	757b      	strb	r3, [r7, #21]
  uint8_t year_d = date[2];
 800089c:	7ebb      	ldrb	r3, [r7, #26]
 800089e:	753b      	strb	r3, [r7, #20]
  uint8_t hour_d = date[3];
 80008a0:	7efb      	ldrb	r3, [r7, #27]
 80008a2:	74fb      	strb	r3, [r7, #19]
  uint8_t minutes_d = date[4];
 80008a4:	7f3b      	ldrb	r3, [r7, #28]
 80008a6:	74bb      	strb	r3, [r7, #18]
  uint8_t seconds_d = date[5];
 80008a8:	7f7b      	ldrb	r3, [r7, #29]
 80008aa:	747b      	strb	r3, [r7, #17]
  uint8_t msg[8];
  uint8_t delay_time = 500;
 80008ac:	23f4      	movs	r3, #244	; 0xf4
 80008ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)minutes_addr, sizeof(minutes_addr), &minutes_d, sizeof(minutes_d), HAL_MAX_DELAY);
 80008b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	2301      	movs	r3, #1
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	f107 0312 	add.w	r3, r7, #18
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	487e      	ldr	r0, [pc, #504]	; (8000ac8 <main+0x318>)
 80008ce:	f003 f90f 	bl	8003af0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)seconds_addr, sizeof(seconds_addr), &seconds_d, sizeof(seconds_d), HAL_MAX_DELAY);
 80008d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	f107 0311 	add.w	r3, r7, #17
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	4876      	ldr	r0, [pc, #472]	; (8000ac8 <main+0x318>)
 80008ee:	f003 f8ff 	bl	8003af0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)hour_addr, sizeof(hour_addr), &hour_d, sizeof(hour_d), HAL_MAX_DELAY);
 80008f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	2301      	movs	r3, #1
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	f107 0313 	add.w	r3, r7, #19
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	486e      	ldr	r0, [pc, #440]	; (8000ac8 <main+0x318>)
 800090e:	f003 f8ef 	bl	8003af0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)date_addr, sizeof(date_addr), &date_d, sizeof(date_d), HAL_MAX_DELAY);
 8000912:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000916:	b29a      	uxth	r2, r3
 8000918:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	2301      	movs	r3, #1
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	f107 0317 	add.w	r3, r7, #23
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2301      	movs	r3, #1
 800092c:	4866      	ldr	r0, [pc, #408]	; (8000ac8 <main+0x318>)
 800092e:	f003 f8df 	bl	8003af0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)month_addr, sizeof(month_addr), &month_d, sizeof(month_d), HAL_MAX_DELAY);
 8000932:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000936:	b29a      	uxth	r2, r3
 8000938:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2301      	movs	r3, #1
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	f107 0315 	add.w	r3, r7, #21
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2301      	movs	r3, #1
 800094c:	485e      	ldr	r0, [pc, #376]	; (8000ac8 <main+0x318>)
 800094e:	f003 f8cf 	bl	8003af0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)year_addr, sizeof(year_addr), &year_d, sizeof(year_d), HAL_MAX_DELAY);
 8000952:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000956:	b29a      	uxth	r2, r3
 8000958:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	2301      	movs	r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	4856      	ldr	r0, [pc, #344]	; (8000ac8 <main+0x318>)
 800096e:	f003 f8bf 	bl	8003af0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, dev_addr_w, (uint16_t)week_day_addr, sizeof(week_day_addr), &week_day_d, sizeof(week_day_d), HAL_MAX_DELAY);
 8000972:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000976:	b29a      	uxth	r2, r3
 8000978:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	f107 0316 	add.w	r3, r7, #22
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	484e      	ldr	r0, [pc, #312]	; (8000ac8 <main+0x318>)
 800098e:	f003 f8af 	bl	8003af0 <HAL_I2C_Mem_Write>

  while (1)
  {

	  //HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&seconds_addr,sizeof(seconds_addr),HAL_MAX_DELAY);
 8000992:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000996:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	4849      	ldr	r0, [pc, #292]	; (8000ac8 <main+0x318>)
 80009a2:	f002 febb 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[0], sizeof(msg), HAL_MAX_DELAY);
 80009a6:	f107 0208 	add.w	r2, r7, #8
 80009aa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2308      	movs	r3, #8
 80009b4:	4844      	ldr	r0, [pc, #272]	; (8000ac8 <main+0x318>)
 80009b6:	f002 ffa5 	bl	8003904 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&minutes_addr,sizeof(minutes_addr),HAL_MAX_DELAY);
 80009ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009be:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <main+0x318>)
 80009ca:	f002 fea7 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[1], sizeof(msg), HAL_MAX_DELAY);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2308      	movs	r3, #8
 80009de:	483a      	ldr	r0, [pc, #232]	; (8000ac8 <main+0x318>)
 80009e0:	f002 ff90 	bl	8003904 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&hour_addr,sizeof(hour_addr),HAL_MAX_DELAY);
 80009e4:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80009e8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <main+0x318>)
 80009f4:	f002 fe92 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[2], sizeof(msg), HAL_MAX_DELAY);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	1c9a      	adds	r2, r3, #2
 80009fe:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2308      	movs	r3, #8
 8000a08:	482f      	ldr	r0, [pc, #188]	; (8000ac8 <main+0x318>)
 8000a0a:	f002 ff7b 	bl	8003904 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&week_day_addr,sizeof(week_day_addr),HAL_MAX_DELAY);
 8000a0e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8000a12:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <main+0x318>)
 8000a1e:	f002 fe7d 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[6], sizeof(msg), HAL_MAX_DELAY);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	1d9a      	adds	r2, r3, #6
 8000a28:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2308      	movs	r3, #8
 8000a32:	4825      	ldr	r0, [pc, #148]	; (8000ac8 <main+0x318>)
 8000a34:	f002 ff66 	bl	8003904 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&date_addr,sizeof(date_addr),HAL_MAX_DELAY);
 8000a38:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000a3c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	4820      	ldr	r0, [pc, #128]	; (8000ac8 <main+0x318>)
 8000a48:	f002 fe68 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[3], sizeof(msg), HAL_MAX_DELAY);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	1cda      	adds	r2, r3, #3
 8000a52:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <main+0x318>)
 8000a5e:	f002 ff51 	bl	8003904 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&month_addr,sizeof(month_addr),HAL_MAX_DELAY);
 8000a62:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000a66:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <main+0x318>)
 8000a72:	f002 fe53 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[4], sizeof(msg), HAL_MAX_DELAY);
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	1d1a      	adds	r2, r3, #4
 8000a7c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2308      	movs	r3, #8
 8000a86:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <main+0x318>)
 8000a88:	f002 ff3c 	bl	8003904 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&year_addr,sizeof(year_addr),HAL_MAX_DELAY);
 8000a8c:	f107 0220 	add.w	r2, r7, #32
 8000a90:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <main+0x318>)
 8000a9c:	f002 fe3e 	bl	800371c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2 , dev_addr_r,&msg[5], sizeof(msg), HAL_MAX_DELAY);
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	1d5a      	adds	r2, r3, #5
 8000aa6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2308      	movs	r3, #8
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <main+0x318>)
 8000ab2:	f002 ff27 	bl	8003904 <HAL_I2C_Master_Receive>

	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&hour_addr,sizeof(hour_addr),HAL_MAX_DELAY);
 8000ab6:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000aba:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000abc:	e006      	b.n	8000acc <main+0x31c>
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	08008cf4 	.word	0x08008cf4
 8000ac8:	24000090 	.word	0x24000090
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	482d      	ldr	r0, [pc, #180]	; (8000b8c <main+0x3dc>)
 8000ad6:	f002 fe21 	bl	800371c <HAL_I2C_Master_Transmit>

	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",

				  ((msg[3] & 0x30)>>4)*10 + (msg[3] & 0x0F),
 8000ada:	7afb      	ldrb	r3, [r7, #11]
 8000adc:	111b      	asrs	r3, r3, #4
 8000ade:	f003 0203 	and.w	r2, r3, #3
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	461a      	mov	r2, r3
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	f003 030f 	and.w	r3, r3, #15
	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",
 8000af2:	18d4      	adds	r4, r2, r3
	  	  	  	  ((msg[4] & 0x10)>>4)*10 + (msg[4] & 0x0F),
 8000af4:	7b3b      	ldrb	r3, [r7, #12]
 8000af6:	111b      	asrs	r3, r3, #4
 8000af8:	f003 0201 	and.w	r2, r3, #1
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	461a      	mov	r2, r3
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	f003 030f 	and.w	r3, r3, #15
	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",
 8000b0c:	18d5      	adds	r5, r2, r3
	  	  	  	  ((msg[5] & 0xF0)>>4)*10 + (msg[5] & 0x0F),
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	461a      	mov	r2, r3
 8000b20:	7b7b      	ldrb	r3, [r7, #13]
 8000b22:	f003 030f 	and.w	r3, r3, #15
	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",
 8000b26:	18d6      	adds	r6, r2, r3
	  	  	  	  ((msg[2] & 0x70)>>4)*10 + (msg[2] & 0x0F),
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	111b      	asrs	r3, r3, #4
 8000b2c:	f003 0207 	and.w	r2, r3, #7
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	461a      	mov	r2, r3
 8000b3a:	7abb      	ldrb	r3, [r7, #10]
 8000b3c:	f003 030f 	and.w	r3, r3, #15
	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",
 8000b40:	18d1      	adds	r1, r2, r3
	  	  	  	  ((msg[1] & 0x70)>>4)*10 + (msg[1] & 0x0F),
 8000b42:	7a7b      	ldrb	r3, [r7, #9]
 8000b44:	111b      	asrs	r3, r3, #4
 8000b46:	f003 0207 	and.w	r2, r3, #7
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	461a      	mov	r2, r3
 8000b54:	7a7b      	ldrb	r3, [r7, #9]
 8000b56:	f003 030f 	and.w	r3, r3, #15
	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",
 8000b5a:	18d0      	adds	r0, r2, r3
	  	  	  	  ((msg[0] & 0x70)>>4)*10 + (msg[0] & 0x0F));
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	111b      	asrs	r3, r3, #4
 8000b60:	f003 0207 	and.w	r2, r3, #7
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	7a3b      	ldrb	r3, [r7, #8]
 8000b70:	f003 030f 	and.w	r3, r3, #15
	  printf("Day: %d, Month: %d, Year: %d, Hours: %d, Minutes: %d, Seconds: %d\r\n",
 8000b74:	4413      	add	r3, r2
 8000b76:	9302      	str	r3, [sp, #8]
 8000b78:	9001      	str	r0, [sp, #4]
 8000b7a:	9100      	str	r1, [sp, #0]
 8000b7c:	4633      	mov	r3, r6
 8000b7e:	462a      	mov	r2, r5
 8000b80:	4621      	mov	r1, r4
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <main+0x3e0>)
 8000b84:	f007 f8fa 	bl	8007d7c <iprintf>
	  HAL_I2C_Master_Transmit(&hi2c2,dev_addr_w,&seconds_addr,sizeof(seconds_addr),HAL_MAX_DELAY);
 8000b88:	e703      	b.n	8000992 <main+0x1e2>
 8000b8a:	bf00      	nop
 8000b8c:	24000090 	.word	0x24000090
 8000b90:	08008cb0 	.word	0x08008cb0

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	; 0x70
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	224c      	movs	r2, #76	; 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 f8e2 	bl	8007d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 f8dc 	bl	8007d6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f003 fc2d 	bl	8004414 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <SystemClock_Config+0xec>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <SystemClock_Config+0xec>)
 8000bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <SystemClock_Config+0xec>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <SystemClock_Config+0xf0>)
 8000bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd8:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <SystemClock_Config+0xf0>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <SystemClock_Config+0xf0>)
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bec:	bf00      	nop
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <SystemClock_Config+0xec>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfa:	d1f8      	bne.n	8000bee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000c12:	23f0      	movs	r3, #240	; 0xf0
 8000c14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c22:	2308      	movs	r3, #8
 8000c24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fc48 	bl	80044c8 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c3e:	f000 f9ad 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	233f      	movs	r3, #63	; 0x3f
 8000c44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2104      	movs	r1, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 f85b 	bl	8004d24 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c74:	f000 f992 	bl	8000f9c <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3770      	adds	r7, #112	; 0x70
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58024800 	.word	0x58024800
 8000c84:	58000400 	.word	0x58000400

08000c88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <MX_I2C2_Init+0x78>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <MX_I2C2_Init+0x7c>)
 8000c96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000cc4:	f002 fc9a 	bl	80035fc <HAL_I2C_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cce:	f000 f965 	bl	8000f9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000cd6:	f003 fb05 	bl	80042e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 f95c 	bl	8000f9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_I2C2_Init+0x74>)
 8000ce8:	f003 fb47 	bl	800437a <HAL_I2CEx_ConfigDigitalFilter>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 f953 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000090 	.word	0x24000090
 8000d00:	40005800 	.word	0x40005800
 8000d04:	307075b1 	.word	0x307075b1

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <MX_USART2_UART_Init+0x98>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d30:	220c      	movs	r2, #12
 8000d32:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d54:	f005 feda 	bl	8006b0c <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000d5e:	f000 f91d 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d66:	f006 ff0d 	bl	8007b84 <HAL_UARTEx_SetTxFifoThreshold>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000d70:	f000 f914 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4809      	ldr	r0, [pc, #36]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d78:	f006 ff42 	bl	8007c00 <HAL_UARTEx_SetRxFifoThreshold>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000d82:	f000 f90b 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d88:	f006 fec3 	bl	8007b12 <HAL_UARTEx_DisableFifoMode>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000d92:	f000 f903 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	240001cc 	.word	0x240001cc
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <MX_USART3_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000db0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dee:	f005 fe8d 	bl	8006b0c <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f8d0 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e00:	f006 fec0 	bl	8007b84 <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 f8c7 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e12:	f006 fef5 	bl	8007c00 <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f8be 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e22:	f006 fe76 	bl	8007b12 <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f8b6 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2400025c 	.word	0x2400025c
 8000e38:	40004800 	.word	0x40004800

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_DMA_Init+0x4c>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e48:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <MX_DMA_Init+0x4c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_DMA_Init+0x4c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	200b      	movs	r0, #11
 8000e66:	f000 fcda 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e6a:	200b      	movs	r0, #11
 8000e6c:	f000 fcf1 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	200c      	movs	r0, #12
 8000e76:	f000 fcd2 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e7a:	200c      	movs	r0, #12
 8000e7c:	f000 fce9 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58024400 	.word	0x58024400

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a38      	ldr	r2, [pc, #224]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a31      	ldr	r2, [pc, #196]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f20:	481b      	ldr	r0, [pc, #108]	; (8000f90 <MX_GPIO_Init+0x104>)
 8000f22:	f002 fb23 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_TEST_GPIO_Port, Pin_TEST_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2110      	movs	r1, #16
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_GPIO_Init+0x108>)
 8000f2c:	f002 fb1e 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_GPIO_Init+0x10c>)
 8000f46:	f002 f961 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f4a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <MX_GPIO_Init+0x104>)
 8000f64:	f002 f952 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_TEST_Pin */
  GPIO_InitStruct.Pin = Pin_TEST_Pin;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_TEST_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_GPIO_Init+0x108>)
 8000f80:	f002 f944 	bl	800320c <HAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020400 	.word	0x58020400
 8000f94:	58020c00 	.word	0x58020c00
 8000f98:	58020800 	.word	0x58020800

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fb0:	1d39      	adds	r1, r7, #4
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <__io_putchar+0x20>)
 8000fba:	f005 fdf7 	bl	8006bac <HAL_UART_Transmit>
  return ch;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400025c 	.word	0x2400025c

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x30>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58024400 	.word	0x58024400

08001000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0b8      	sub	sp, #224	; 0xe0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22bc      	movs	r2, #188	; 0xbc
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f006 fea3 	bl	8007d6c <memset>
  if(hi2c->Instance==I2C2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a56      	ldr	r2, [pc, #344]	; (8001184 <HAL_I2C_MspInit+0x184>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 80a5 	bne.w	800117c <HAL_I2C_MspInit+0x17c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001032:	2308      	movs	r3, #8
 8001034:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f004 f9fb 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800104c:	f7ff ffa6 	bl	8000f9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <HAL_I2C_MspInit+0x188>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_I2C_MspInit+0x188>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_I2C_MspInit+0x188>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800106e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001076:	2312      	movs	r3, #18
 8001078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107c:	2301      	movs	r3, #1
 800107e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001088:	2304      	movs	r3, #4
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001092:	4619      	mov	r1, r3
 8001094:	483d      	ldr	r0, [pc, #244]	; (800118c <HAL_I2C_MspInit+0x18c>)
 8001096:	f002 f8b9 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <HAL_I2C_MspInit+0x188>)
 800109c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a0:	4a39      	ldr	r2, [pc, #228]	; (8001188 <HAL_I2C_MspInit+0x188>)
 80010a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <HAL_I2C_MspInit+0x188>)
 80010ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream0;
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010ba:	4a36      	ldr	r2, [pc, #216]	; (8001194 <HAL_I2C_MspInit+0x194>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010c0:	2224      	movs	r2, #36	; 0x24
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010f6:	4826      	ldr	r0, [pc, #152]	; (8001190 <HAL_I2C_MspInit+0x190>)
 80010f8:	f000 fbc6 	bl	8001888 <HAL_DMA_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8001102:	f7ff ff4b 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <HAL_I2C_MspInit+0x190>)
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_I2C_MspInit+0x190>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream1;
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <HAL_I2C_MspInit+0x19c>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_I2C_MspInit+0x198>)
 800111a:	2223      	movs	r2, #35	; 0x23
 800111c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_I2C_MspInit+0x198>)
 800112c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001130:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0x198>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_I2C_MspInit+0x198>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001150:	4811      	ldr	r0, [pc, #68]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001152:	f000 fb99 	bl	8001888 <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 800115c:	f7ff ff1e 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_I2C_MspInit+0x198>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2021      	movs	r0, #33	; 0x21
 8001172:	f000 fb54 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001176:	2021      	movs	r0, #33	; 0x21
 8001178:	f000 fb6b 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	37e0      	adds	r7, #224	; 0xe0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005800 	.word	0x40005800
 8001188:	58024400 	.word	0x58024400
 800118c:	58020400 	.word	0x58020400
 8001190:	240000dc 	.word	0x240000dc
 8001194:	40020010 	.word	0x40020010
 8001198:	24000154 	.word	0x24000154
 800119c:	40020028 	.word	0x40020028

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0ba      	sub	sp, #232	; 0xe8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	22bc      	movs	r2, #188	; 0xbc
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fdd3 	bl	8007d6c <memset>
  if(huart->Instance==USART2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <HAL_UART_MspInit+0x150>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d142      	bne.n	8001256 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f92c 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ea:	f7ff fed7 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_UART_MspInit+0x154>)
 80011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f4:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_UART_MspInit+0x154>)
 80011f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_UART_MspInit+0x154>)
 8001200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_UART_MspInit+0x154>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	4a38      	ldr	r2, [pc, #224]	; (80012f4 <HAL_UART_MspInit+0x154>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_UART_MspInit+0x154>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001242:	2307      	movs	r3, #7
 8001244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800124c:	4619      	mov	r1, r3
 800124e:	482a      	ldr	r0, [pc, #168]	; (80012f8 <HAL_UART_MspInit+0x158>)
 8001250:	f001 ffdc 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001254:	e047      	b.n	80012e6 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a28      	ldr	r2, [pc, #160]	; (80012fc <HAL_UART_MspInit+0x15c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d142      	bne.n	80012e6 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f8e4 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800127a:	f7ff fe8f 	bl	8000f9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_UART_MspInit+0x154>)
 8001280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_UART_MspInit+0x154>)
 8001286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x154>)
 8001290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_UART_MspInit+0x154>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_UART_MspInit+0x154>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_UART_MspInit+0x154>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d4:	2307      	movs	r3, #7
 80012d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_UART_MspInit+0x158>)
 80012e2:	f001 ff93 	bl	800320c <HAL_GPIO_Init>
}
 80012e6:	bf00      	nop
 80012e8:	37e8      	adds	r7, #232	; 0xe8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40004400 	.word	0x40004400
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020c00 	.word	0x58020c00
 80012fc:	40004800 	.word	0x40004800

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f960 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA1_Stream0_IRQHandler+0x10>)
 800135a:	f000 fdf1 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	240000dc 	.word	0x240000dc

08001368 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA1_Stream1_IRQHandler+0x10>)
 800136e:	f000 fde7 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	24000154 	.word	0x24000154

0800137c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <I2C2_EV_IRQHandler+0x10>)
 8001382:	f002 fcc9 	bl	8003d18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	24000090 	.word	0x24000090

08001390 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
	}

return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fddf 	bl	8000fa8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
	}
	return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_close>:

int _close(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142a:	605a      	str	r2, [r3, #4]
	return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_isatty>:

int _isatty(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f006 fc3c 	bl	8007d18 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	24080000 	.word	0x24080000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	240002ec 	.word	0x240002ec
 80014d4:	24000308 	.word	0x24000308

080014d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014dc:	f7ff f8d2 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f006 fc0d 	bl	8007d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150a:	f7ff f951 	bl	80007b0 <main>
  bx  lr
 800150e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001510:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001514:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001518:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800151c:	08008de4 	.word	0x08008de4
  ldr r2, =_sbss
 8001520:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001524:	24000304 	.word	0x24000304

08001528 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC3_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f968 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001538:	f003 fdaa 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_Init+0x68>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	4913      	ldr	r1, [pc, #76]	; (8001598 <HAL_Init+0x6c>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
 8001554:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_Init+0x68>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_Init+0x6c>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_Init+0x70>)
 800156e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_Init+0x74>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f814 	bl	80015a4 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e002      	b.n	800158c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001586:	f7ff fd21 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	58024400 	.word	0x58024400
 8001598:	08008cfc 	.word	0x08008cfc
 800159c:	24000004 	.word	0x24000004
 80015a0:	24000000 	.word	0x24000000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_InitTick+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e021      	b.n	80015fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_InitTick+0x64>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f94d 	bl	800186e <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f917 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x68>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2400000c 	.word	0x2400000c
 8001608:	24000000 	.word	0x24000000
 800160c:	24000008 	.word	0x24000008

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2400000c 	.word	0x2400000c
 8001634:	240002f0 	.word	0x240002f0

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	240002f0 	.word	0x240002f0

08001650 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetREVID+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0c1b      	lsrs	r3, r3, #16
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	5c001000 	.word	0x5c001000

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	4313      	orrs	r3, r2
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	05fa0000 	.word	0x05fa0000

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff40 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff33 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa4 	bl	80017c4 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fed2 	bl	8001638 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e316      	b.n	8001ece <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a66      	ldr	r2, [pc, #408]	; (8001a40 <HAL_DMA_Init+0x1b8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d04a      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a65      	ldr	r2, [pc, #404]	; (8001a44 <HAL_DMA_Init+0x1bc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d045      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a63      	ldr	r2, [pc, #396]	; (8001a48 <HAL_DMA_Init+0x1c0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d040      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a62      	ldr	r2, [pc, #392]	; (8001a4c <HAL_DMA_Init+0x1c4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d03b      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a60      	ldr	r2, [pc, #384]	; (8001a50 <HAL_DMA_Init+0x1c8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d036      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a5f      	ldr	r2, [pc, #380]	; (8001a54 <HAL_DMA_Init+0x1cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d031      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a5d      	ldr	r2, [pc, #372]	; (8001a58 <HAL_DMA_Init+0x1d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02c      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_DMA_Init+0x1d4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d027      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5a      	ldr	r2, [pc, #360]	; (8001a60 <HAL_DMA_Init+0x1d8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d022      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a59      	ldr	r2, [pc, #356]	; (8001a64 <HAL_DMA_Init+0x1dc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d01d      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_DMA_Init+0x1e0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d018      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_DMA_Init+0x1e4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a54      	ldr	r2, [pc, #336]	; (8001a70 <HAL_DMA_Init+0x1e8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00e      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a53      	ldr	r2, [pc, #332]	; (8001a74 <HAL_DMA_Init+0x1ec>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_DMA_Init+0x1f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_DMA_Init+0x1f4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Init+0xbc>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_DMA_Init+0xbe>
 8001944:	2300      	movs	r3, #0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 813b 	beq.w	8001bc2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <HAL_DMA_Init+0x1b8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d04a      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <HAL_DMA_Init+0x1bc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d045      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_DMA_Init+0x1c0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d040      	beq.n	80019fc <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <HAL_DMA_Init+0x1c4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d03b      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <HAL_DMA_Init+0x1c8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d036      	beq.n	80019fc <HAL_DMA_Init+0x174>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_DMA_Init+0x1cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d031      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <HAL_DMA_Init+0x1d0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02c      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <HAL_DMA_Init+0x1d4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d027      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <HAL_DMA_Init+0x1d8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d022      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_DMA_Init+0x1dc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01d      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_DMA_Init+0x1e0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d018      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <HAL_DMA_Init+0x1e4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <HAL_DMA_Init+0x1e8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_DMA_Init+0x1ec>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_DMA_Init+0x1f0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_DMA_Init+0x1f4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <HAL_DMA_Init+0x186>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_DMA_Init+0x196>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a1e:	e02f      	b.n	8001a80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a20:	f7ff fe0a 	bl	8001638 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d928      	bls.n	8001a80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e246      	b.n	8001ece <HAL_DMA_Init+0x646>
 8001a40:	40020010 	.word	0x40020010
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40020040 	.word	0x40020040
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	40020070 	.word	0x40020070
 8001a54:	40020088 	.word	0x40020088
 8001a58:	400200a0 	.word	0x400200a0
 8001a5c:	400200b8 	.word	0x400200b8
 8001a60:	40020410 	.word	0x40020410
 8001a64:	40020428 	.word	0x40020428
 8001a68:	40020440 	.word	0x40020440
 8001a6c:	40020458 	.word	0x40020458
 8001a70:	40020470 	.word	0x40020470
 8001a74:	40020488 	.word	0x40020488
 8001a78:	400204a0 	.word	0x400204a0
 8001a7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1c8      	bne.n	8001a20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4b83      	ldr	r3, [pc, #524]	; (8001ca8 <HAL_DMA_Init+0x420>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001aa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4313      	orrs	r3, r2
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ae4:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_DMA_Init+0x424>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b71      	ldr	r3, [pc, #452]	; (8001cb0 <HAL_DMA_Init+0x428>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af0:	d328      	bcc.n	8001b44 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b28      	cmp	r3, #40	; 0x28
 8001af8:	d903      	bls.n	8001b02 <HAL_DMA_Init+0x27a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b2e      	cmp	r3, #46	; 0x2e
 8001b00:	d917      	bls.n	8001b32 <HAL_DMA_Init+0x2aa>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b3e      	cmp	r3, #62	; 0x3e
 8001b08:	d903      	bls.n	8001b12 <HAL_DMA_Init+0x28a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b42      	cmp	r3, #66	; 0x42
 8001b10:	d90f      	bls.n	8001b32 <HAL_DMA_Init+0x2aa>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b46      	cmp	r3, #70	; 0x46
 8001b18:	d903      	bls.n	8001b22 <HAL_DMA_Init+0x29a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b48      	cmp	r3, #72	; 0x48
 8001b20:	d907      	bls.n	8001b32 <HAL_DMA_Init+0x2aa>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b4e      	cmp	r3, #78	; 0x4e
 8001b28:	d905      	bls.n	8001b36 <HAL_DMA_Init+0x2ae>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b52      	cmp	r3, #82	; 0x52
 8001b30:	d801      	bhi.n	8001b36 <HAL_DMA_Init+0x2ae>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_Init+0x2b0>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b42:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d117      	bne.n	8001b9e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f001 f9b9 	bl	8002ef8 <DMA_CheckFifoParam>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e197      	b.n	8001ece <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f001 f8f4 	bl	8002d94 <DMA_CalcBaseAndBitshift>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	223f      	movs	r2, #63	; 0x3f
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	e0cd      	b.n	8001d5e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_DMA_Init+0x42c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d022      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <HAL_DMA_Init+0x430>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01d      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a38      	ldr	r2, [pc, #224]	; (8001cbc <HAL_DMA_Init+0x434>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d018      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <HAL_DMA_Init+0x438>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a35      	ldr	r2, [pc, #212]	; (8001cc4 <HAL_DMA_Init+0x43c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00e      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a33      	ldr	r2, [pc, #204]	; (8001cc8 <HAL_DMA_Init+0x440>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d009      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <HAL_DMA_Init+0x444>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d004      	beq.n	8001c12 <HAL_DMA_Init+0x38a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a30      	ldr	r2, [pc, #192]	; (8001cd0 <HAL_DMA_Init+0x448>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Init+0x38e>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_DMA_Init+0x390>
 8001c16:	2300      	movs	r3, #0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8097 	beq.w	8001d4c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_DMA_Init+0x42c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d021      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_DMA_Init+0x430>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01c      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_DMA_Init+0x434>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d017      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_DMA_Init+0x438>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d012      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_DMA_Init+0x43c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_DMA_Init+0x440>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d008      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_DMA_Init+0x444>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA_Init+0x3e4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_DMA_Init+0x448>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_DMA_Init+0x44c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d020      	beq.n	8001cd8 <HAL_DMA_Init+0x450>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b80      	cmp	r3, #128	; 0x80
 8001c9c:	d102      	bne.n	8001ca4 <HAL_DMA_Init+0x41c>
 8001c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ca2:	e01a      	b.n	8001cda <HAL_DMA_Init+0x452>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e018      	b.n	8001cda <HAL_DMA_Init+0x452>
 8001ca8:	fe10803f 	.word	0xfe10803f
 8001cac:	5c001000 	.word	0x5c001000
 8001cb0:	ffff0000 	.word	0xffff0000
 8001cb4:	58025408 	.word	0x58025408
 8001cb8:	5802541c 	.word	0x5802541c
 8001cbc:	58025430 	.word	0x58025430
 8001cc0:	58025444 	.word	0x58025444
 8001cc4:	58025458 	.word	0x58025458
 8001cc8:	5802546c 	.word	0x5802546c
 8001ccc:	58025480 	.word	0x58025480
 8001cd0:	58025494 	.word	0x58025494
 8001cd4:	fffe000f 	.word	0xfffe000f
 8001cd8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68d2      	ldr	r2, [r2, #12]
 8001cde:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d08:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <HAL_DMA_Init+0x650>)
 8001d20:	4413      	add	r3, r2
 8001d22:	4a6e      	ldr	r2, [pc, #440]	; (8001edc <HAL_DMA_Init+0x654>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f001 f82f 	bl	8002d94 <DMA_CalcBaseAndBitshift>
 8001d36:	4603      	mov	r3, r0
 8001d38:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2201      	movs	r2, #1
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	e008      	b.n	8001d5e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0b7      	b.n	8001ece <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <HAL_DMA_Init+0x658>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d072      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <HAL_DMA_Init+0x65c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d06d      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a5c      	ldr	r2, [pc, #368]	; (8001ee8 <HAL_DMA_Init+0x660>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d068      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a5a      	ldr	r2, [pc, #360]	; (8001eec <HAL_DMA_Init+0x664>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d063      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <HAL_DMA_Init+0x668>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d05e      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_DMA_Init+0x66c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d059      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a56      	ldr	r2, [pc, #344]	; (8001ef8 <HAL_DMA_Init+0x670>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d054      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a54      	ldr	r2, [pc, #336]	; (8001efc <HAL_DMA_Init+0x674>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d04f      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a53      	ldr	r2, [pc, #332]	; (8001f00 <HAL_DMA_Init+0x678>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d04a      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_DMA_Init+0x67c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d045      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_DMA_Init+0x680>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d040      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_DMA_Init+0x684>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d03b      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_DMA_Init+0x688>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d036      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_DMA_Init+0x68c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_DMA_Init+0x690>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d02c      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_DMA_Init+0x694>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d027      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a47      	ldr	r2, [pc, #284]	; (8001f20 <HAL_DMA_Init+0x698>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <HAL_DMA_Init+0x69c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01d      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <HAL_DMA_Init+0x6a0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d018      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a42      	ldr	r2, [pc, #264]	; (8001f2c <HAL_DMA_Init+0x6a4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <HAL_DMA_Init+0x6a8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00e      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <HAL_DMA_Init+0x6ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <HAL_DMA_Init+0x6b0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_DMA_Init+0x5c6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a3c      	ldr	r2, [pc, #240]	; (8001f3c <HAL_DMA_Init+0x6b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_Init+0x5ca>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_Init+0x5cc>
 8001e52:	2300      	movs	r3, #0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d032      	beq.n	8001ebe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f001 f8c9 	bl	8002ff0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b80      	cmp	r3, #128	; 0x80
 8001e64:	d102      	bne.n	8001e6c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_DMA_Init+0x624>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d80c      	bhi.n	8001eac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f001 f946 	bl	8003124 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e008      	b.n	8001ebe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	a7fdabf8 	.word	0xa7fdabf8
 8001edc:	cccccccd 	.word	0xcccccccd
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	40020040 	.word	0x40020040
 8001eec:	40020058 	.word	0x40020058
 8001ef0:	40020070 	.word	0x40020070
 8001ef4:	40020088 	.word	0x40020088
 8001ef8:	400200a0 	.word	0x400200a0
 8001efc:	400200b8 	.word	0x400200b8
 8001f00:	40020410 	.word	0x40020410
 8001f04:	40020428 	.word	0x40020428
 8001f08:	40020440 	.word	0x40020440
 8001f0c:	40020458 	.word	0x40020458
 8001f10:	40020470 	.word	0x40020470
 8001f14:	40020488 	.word	0x40020488
 8001f18:	400204a0 	.word	0x400204a0
 8001f1c:	400204b8 	.word	0x400204b8
 8001f20:	58025408 	.word	0x58025408
 8001f24:	5802541c 	.word	0x5802541c
 8001f28:	58025430 	.word	0x58025430
 8001f2c:	58025444 	.word	0x58025444
 8001f30:	58025458 	.word	0x58025458
 8001f34:	5802546c 	.word	0x5802546c
 8001f38:	58025480 	.word	0x58025480
 8001f3c:	58025494 	.word	0x58025494

08001f40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f4c:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_DMA_IRQHandler+0x1ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_DMA_IRQHandler+0x1b0>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <HAL_DMA_IRQHandler+0x1b4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04a      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_DMA_IRQHandler+0x1b8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d045      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	; (80020fc <HAL_DMA_IRQHandler+0x1bc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d040      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5a      	ldr	r2, [pc, #360]	; (8002100 <HAL_DMA_IRQHandler+0x1c0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03b      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a59      	ldr	r2, [pc, #356]	; (8002104 <HAL_DMA_IRQHandler+0x1c4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d036      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_DMA_IRQHandler+0x1c8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a56      	ldr	r2, [pc, #344]	; (800210c <HAL_DMA_IRQHandler+0x1cc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02c      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a54      	ldr	r2, [pc, #336]	; (8002110 <HAL_DMA_IRQHandler+0x1d0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a53      	ldr	r2, [pc, #332]	; (8002114 <HAL_DMA_IRQHandler+0x1d4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_DMA_IRQHandler+0x1d8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_DMA_IRQHandler+0x1dc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <HAL_DMA_IRQHandler+0x1e0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a4d      	ldr	r2, [pc, #308]	; (8002124 <HAL_DMA_IRQHandler+0x1e4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <HAL_DMA_IRQHandler+0x1e8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a4a      	ldr	r2, [pc, #296]	; (800212c <HAL_DMA_IRQHandler+0x1ec>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_IRQHandler+0xd2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_DMA_IRQHandler+0x1f0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_DMA_IRQHandler+0xd6>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_DMA_IRQHandler+0xd8>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 842b 	beq.w	8002874 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2208      	movs	r2, #8
 8002028:	409a      	lsls	r2, r3
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80a2 	beq.w	8002178 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <HAL_DMA_IRQHandler+0x1b4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d04a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <HAL_DMA_IRQHandler+0x1b8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d045      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_DMA_IRQHandler+0x1bc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d040      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_DMA_IRQHandler+0x1c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d03b      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_DMA_IRQHandler+0x1c4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d036      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_DMA_IRQHandler+0x1c8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d031      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_DMA_IRQHandler+0x1cc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02c      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <HAL_DMA_IRQHandler+0x1d0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d027      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_DMA_IRQHandler+0x1d4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d022      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_DMA_IRQHandler+0x1d8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d01d      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_DMA_IRQHandler+0x1dc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_DMA_IRQHandler+0x1e0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_DMA_IRQHandler+0x1e4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_DMA_IRQHandler+0x1e8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_DMA_IRQHandler+0x1ec>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x194>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_DMA_IRQHandler+0x1f0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d12f      	bne.n	8002134 <HAL_DMA_IRQHandler+0x1f4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e02e      	b.n	8002148 <HAL_DMA_IRQHandler+0x208>
 80020ea:	bf00      	nop
 80020ec:	24000000 	.word	0x24000000
 80020f0:	1b4e81b5 	.word	0x1b4e81b5
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2208      	movs	r2, #8
 8002166:	409a      	lsls	r2, r3
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06e      	beq.n	800226c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a69      	ldr	r2, [pc, #420]	; (8002338 <HAL_DMA_IRQHandler+0x3f8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04a      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	; (800233c <HAL_DMA_IRQHandler+0x3fc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d045      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a66      	ldr	r2, [pc, #408]	; (8002340 <HAL_DMA_IRQHandler+0x400>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d040      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a64      	ldr	r2, [pc, #400]	; (8002344 <HAL_DMA_IRQHandler+0x404>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d03b      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a63      	ldr	r2, [pc, #396]	; (8002348 <HAL_DMA_IRQHandler+0x408>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d036      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a61      	ldr	r2, [pc, #388]	; (800234c <HAL_DMA_IRQHandler+0x40c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d031      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a60      	ldr	r2, [pc, #384]	; (8002350 <HAL_DMA_IRQHandler+0x410>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d02c      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <HAL_DMA_IRQHandler+0x414>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d027      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a5d      	ldr	r2, [pc, #372]	; (8002358 <HAL_DMA_IRQHandler+0x418>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a5b      	ldr	r2, [pc, #364]	; (800235c <HAL_DMA_IRQHandler+0x41c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_DMA_IRQHandler+0x420>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d018      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a58      	ldr	r2, [pc, #352]	; (8002364 <HAL_DMA_IRQHandler+0x424>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a57      	ldr	r2, [pc, #348]	; (8002368 <HAL_DMA_IRQHandler+0x428>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00e      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_DMA_IRQHandler+0x42c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_DMA_IRQHandler+0x430>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_DMA_IRQHandler+0x2ee>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_DMA_IRQHandler+0x434>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10a      	bne.n	8002244 <HAL_DMA_IRQHandler+0x304>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e003      	b.n	800224c <HAL_DMA_IRQHandler+0x30c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2201      	movs	r2, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0202 	orr.w	r2, r3, #2
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2204      	movs	r2, #4
 8002276:	409a      	lsls	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 808f 	beq.w	80023a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <HAL_DMA_IRQHandler+0x3f8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d04a      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_DMA_IRQHandler+0x3fc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d045      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a29      	ldr	r2, [pc, #164]	; (8002340 <HAL_DMA_IRQHandler+0x400>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d040      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_DMA_IRQHandler+0x404>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d03b      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_DMA_IRQHandler+0x408>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d036      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_DMA_IRQHandler+0x40c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a23      	ldr	r2, [pc, #140]	; (8002350 <HAL_DMA_IRQHandler+0x410>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d02c      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a21      	ldr	r2, [pc, #132]	; (8002354 <HAL_DMA_IRQHandler+0x414>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d027      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_DMA_IRQHandler+0x418>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_DMA_IRQHandler+0x41c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01d      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_DMA_IRQHandler+0x420>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_DMA_IRQHandler+0x424>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_DMA_IRQHandler+0x428>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00e      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_DMA_IRQHandler+0x42c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_DMA_IRQHandler+0x430>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_DMA_IRQHandler+0x3e2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <HAL_DMA_IRQHandler+0x434>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12a      	bne.n	8002378 <HAL_DMA_IRQHandler+0x438>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e023      	b.n	8002380 <HAL_DMA_IRQHandler+0x440>
 8002338:	40020010 	.word	0x40020010
 800233c:	40020028 	.word	0x40020028
 8002340:	40020040 	.word	0x40020040
 8002344:	40020058 	.word	0x40020058
 8002348:	40020070 	.word	0x40020070
 800234c:	40020088 	.word	0x40020088
 8002350:	400200a0 	.word	0x400200a0
 8002354:	400200b8 	.word	0x400200b8
 8002358:	40020410 	.word	0x40020410
 800235c:	40020428 	.word	0x40020428
 8002360:	40020440 	.word	0x40020440
 8002364:	40020458 	.word	0x40020458
 8002368:	40020470 	.word	0x40020470
 800236c:	40020488 	.word	0x40020488
 8002370:	400204a0 	.word	0x400204a0
 8002374:	400204b8 	.word	0x400204b8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2204      	movs	r2, #4
 800238e:	409a      	lsls	r2, r3
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f043 0204 	orr.w	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2210      	movs	r2, #16
 80023aa:	409a      	lsls	r2, r3
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a6 	beq.w	8002502 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a85      	ldr	r2, [pc, #532]	; (80025d0 <HAL_DMA_IRQHandler+0x690>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d04a      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a83      	ldr	r2, [pc, #524]	; (80025d4 <HAL_DMA_IRQHandler+0x694>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d045      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a82      	ldr	r2, [pc, #520]	; (80025d8 <HAL_DMA_IRQHandler+0x698>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d040      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a80      	ldr	r2, [pc, #512]	; (80025dc <HAL_DMA_IRQHandler+0x69c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d03b      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7f      	ldr	r2, [pc, #508]	; (80025e0 <HAL_DMA_IRQHandler+0x6a0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d036      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7d      	ldr	r2, [pc, #500]	; (80025e4 <HAL_DMA_IRQHandler+0x6a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d031      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7c      	ldr	r2, [pc, #496]	; (80025e8 <HAL_DMA_IRQHandler+0x6a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d02c      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a7a      	ldr	r2, [pc, #488]	; (80025ec <HAL_DMA_IRQHandler+0x6ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d027      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a79      	ldr	r2, [pc, #484]	; (80025f0 <HAL_DMA_IRQHandler+0x6b0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d022      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a77      	ldr	r2, [pc, #476]	; (80025f4 <HAL_DMA_IRQHandler+0x6b4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a76      	ldr	r2, [pc, #472]	; (80025f8 <HAL_DMA_IRQHandler+0x6b8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d018      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a74      	ldr	r2, [pc, #464]	; (80025fc <HAL_DMA_IRQHandler+0x6bc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a73      	ldr	r2, [pc, #460]	; (8002600 <HAL_DMA_IRQHandler+0x6c0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00e      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a71      	ldr	r2, [pc, #452]	; (8002604 <HAL_DMA_IRQHandler+0x6c4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a70      	ldr	r2, [pc, #448]	; (8002608 <HAL_DMA_IRQHandler+0x6c8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_DMA_IRQHandler+0x516>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_DMA_IRQHandler+0x6cc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10a      	bne.n	800246c <HAL_DMA_IRQHandler+0x52c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e009      	b.n	8002480 <HAL_DMA_IRQHandler+0x540>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03e      	beq.n	8002502 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2210      	movs	r2, #16
 800248e:	409a      	lsls	r2, r3
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d018      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d024      	beq.n	8002502 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
 80024c0:	e01f      	b.n	8002502 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01b      	beq.n	8002502 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	e016      	b.n	8002502 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2220      	movs	r2, #32
 800250c:	409a      	lsls	r2, r3
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8110 	beq.w	8002738 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2c      	ldr	r2, [pc, #176]	; (80025d0 <HAL_DMA_IRQHandler+0x690>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d04a      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_DMA_IRQHandler+0x694>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d045      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_DMA_IRQHandler+0x698>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d040      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a28      	ldr	r2, [pc, #160]	; (80025dc <HAL_DMA_IRQHandler+0x69c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d03b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <HAL_DMA_IRQHandler+0x6a0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <HAL_DMA_IRQHandler+0x6a4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_DMA_IRQHandler+0x6a8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02c      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_DMA_IRQHandler+0x6ac>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d027      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <HAL_DMA_IRQHandler+0x6b0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d022      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_DMA_IRQHandler+0x6b4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d01d      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_DMA_IRQHandler+0x6b8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d018      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_DMA_IRQHandler+0x6bc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_DMA_IRQHandler+0x6c0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_DMA_IRQHandler+0x6c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_DMA_IRQHandler+0x6c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x678>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_DMA_IRQHandler+0x6cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d12b      	bne.n	8002610 <HAL_DMA_IRQHandler+0x6d0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e02a      	b.n	8002624 <HAL_DMA_IRQHandler+0x6e4>
 80025ce:	bf00      	nop
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8087 	beq.w	8002738 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2220      	movs	r2, #32
 8002634:	409a      	lsls	r2, r3
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b04      	cmp	r3, #4
 8002644:	d139      	bne.n	80026ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0216 	bic.w	r2, r2, #22
 8002654:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002664:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <HAL_DMA_IRQHandler+0x736>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0208 	bic.w	r2, r2, #8
 8002684:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	223f      	movs	r2, #63	; 0x3f
 8002690:	409a      	lsls	r2, r3
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 834a 	beq.w	8002d44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
          }
          return;
 80026b8:	e344      	b.n	8002d44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d018      	beq.n	80026fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02c      	beq.n	8002738 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
 80026e6:	e027      	b.n	8002738 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d023      	beq.n	8002738 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e01e      	b.n	8002738 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0210 	bic.w	r2, r2, #16
 8002716:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8306 	beq.w	8002d4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8088 	beq.w	8002860 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a7a      	ldr	r2, [pc, #488]	; (8002948 <HAL_DMA_IRQHandler+0xa08>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a79      	ldr	r2, [pc, #484]	; (800294c <HAL_DMA_IRQHandler+0xa0c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d045      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_DMA_IRQHandler+0xa10>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d040      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a76      	ldr	r2, [pc, #472]	; (8002954 <HAL_DMA_IRQHandler+0xa14>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d03b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a74      	ldr	r2, [pc, #464]	; (8002958 <HAL_DMA_IRQHandler+0xa18>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d036      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a73      	ldr	r2, [pc, #460]	; (800295c <HAL_DMA_IRQHandler+0xa1c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a71      	ldr	r2, [pc, #452]	; (8002960 <HAL_DMA_IRQHandler+0xa20>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02c      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a70      	ldr	r2, [pc, #448]	; (8002964 <HAL_DMA_IRQHandler+0xa24>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d027      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6e      	ldr	r2, [pc, #440]	; (8002968 <HAL_DMA_IRQHandler+0xa28>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6d      	ldr	r2, [pc, #436]	; (800296c <HAL_DMA_IRQHandler+0xa2c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01d      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6b      	ldr	r2, [pc, #428]	; (8002970 <HAL_DMA_IRQHandler+0xa30>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_DMA_IRQHandler+0xa34>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a68      	ldr	r2, [pc, #416]	; (8002978 <HAL_DMA_IRQHandler+0xa38>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a67      	ldr	r2, [pc, #412]	; (800297c <HAL_DMA_IRQHandler+0xa3c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_DMA_IRQHandler+0xa40>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x8b8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a64      	ldr	r2, [pc, #400]	; (8002984 <HAL_DMA_IRQHandler+0xa44>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <HAL_DMA_IRQHandler+0x8ca>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e007      	b.n	800281a <HAL_DMA_IRQHandler+0x8da>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	429a      	cmp	r2, r3
 8002824:	d307      	bcc.n	8002836 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f2      	bne.n	800281a <HAL_DMA_IRQHandler+0x8da>
 8002834:	e000      	b.n	8002838 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002836:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800284e:	e003      	b.n	8002858 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8272 	beq.w	8002d4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
 8002872:	e26c      	b.n	8002d4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a43      	ldr	r2, [pc, #268]	; (8002988 <HAL_DMA_IRQHandler+0xa48>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d022      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a42      	ldr	r2, [pc, #264]	; (800298c <HAL_DMA_IRQHandler+0xa4c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d01d      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a40      	ldr	r2, [pc, #256]	; (8002990 <HAL_DMA_IRQHandler+0xa50>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d018      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a3f      	ldr	r2, [pc, #252]	; (8002994 <HAL_DMA_IRQHandler+0xa54>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <HAL_DMA_IRQHandler+0xa58>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00e      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3c      	ldr	r2, [pc, #240]	; (800299c <HAL_DMA_IRQHandler+0xa5c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3a      	ldr	r2, [pc, #232]	; (80029a0 <HAL_DMA_IRQHandler+0xa60>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x984>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a39      	ldr	r2, [pc, #228]	; (80029a4 <HAL_DMA_IRQHandler+0xa64>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x988>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_DMA_IRQHandler+0x98a>
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 823f 	beq.w	8002d4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2204      	movs	r2, #4
 80028e2:	409a      	lsls	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80cd 	beq.w	8002a88 <HAL_DMA_IRQHandler+0xb48>
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80c7 	beq.w	8002a88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2204      	movs	r2, #4
 8002904:	409a      	lsls	r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d049      	beq.n	80029a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8210 	beq.w	8002d48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002930:	e20a      	b.n	8002d48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8206 	beq.w	8002d48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002944:	e200      	b.n	8002d48 <HAL_DMA_IRQHandler+0xe08>
 8002946:	bf00      	nop
 8002948:	40020010 	.word	0x40020010
 800294c:	40020028 	.word	0x40020028
 8002950:	40020040 	.word	0x40020040
 8002954:	40020058 	.word	0x40020058
 8002958:	40020070 	.word	0x40020070
 800295c:	40020088 	.word	0x40020088
 8002960:	400200a0 	.word	0x400200a0
 8002964:	400200b8 	.word	0x400200b8
 8002968:	40020410 	.word	0x40020410
 800296c:	40020428 	.word	0x40020428
 8002970:	40020440 	.word	0x40020440
 8002974:	40020458 	.word	0x40020458
 8002978:	40020470 	.word	0x40020470
 800297c:	40020488 	.word	0x40020488
 8002980:	400204a0 	.word	0x400204a0
 8002984:	400204b8 	.word	0x400204b8
 8002988:	58025408 	.word	0x58025408
 800298c:	5802541c 	.word	0x5802541c
 8002990:	58025430 	.word	0x58025430
 8002994:	58025444 	.word	0x58025444
 8002998:	58025458 	.word	0x58025458
 800299c:	5802546c 	.word	0x5802546c
 80029a0:	58025480 	.word	0x58025480
 80029a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d160      	bne.n	8002a74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7f      	ldr	r2, [pc, #508]	; (8002bb4 <HAL_DMA_IRQHandler+0xc74>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d04a      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a7d      	ldr	r2, [pc, #500]	; (8002bb8 <HAL_DMA_IRQHandler+0xc78>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d045      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <HAL_DMA_IRQHandler+0xc7c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d040      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7a      	ldr	r2, [pc, #488]	; (8002bc0 <HAL_DMA_IRQHandler+0xc80>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d03b      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a79      	ldr	r2, [pc, #484]	; (8002bc4 <HAL_DMA_IRQHandler+0xc84>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d036      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a77      	ldr	r2, [pc, #476]	; (8002bc8 <HAL_DMA_IRQHandler+0xc88>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d031      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a76      	ldr	r2, [pc, #472]	; (8002bcc <HAL_DMA_IRQHandler+0xc8c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d02c      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a74      	ldr	r2, [pc, #464]	; (8002bd0 <HAL_DMA_IRQHandler+0xc90>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d027      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a73      	ldr	r2, [pc, #460]	; (8002bd4 <HAL_DMA_IRQHandler+0xc94>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a71      	ldr	r2, [pc, #452]	; (8002bd8 <HAL_DMA_IRQHandler+0xc98>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01d      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a70      	ldr	r2, [pc, #448]	; (8002bdc <HAL_DMA_IRQHandler+0xc9c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d018      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6e      	ldr	r2, [pc, #440]	; (8002be0 <HAL_DMA_IRQHandler+0xca0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6d      	ldr	r2, [pc, #436]	; (8002be4 <HAL_DMA_IRQHandler+0xca4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6b      	ldr	r2, [pc, #428]	; (8002be8 <HAL_DMA_IRQHandler+0xca8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6a      	ldr	r2, [pc, #424]	; (8002bec <HAL_DMA_IRQHandler+0xcac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xb12>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a68      	ldr	r2, [pc, #416]	; (8002bf0 <HAL_DMA_IRQHandler+0xcb0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d108      	bne.n	8002a64 <HAL_DMA_IRQHandler+0xb24>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0208 	bic.w	r2, r2, #8
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb34>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8165 	beq.w	8002d48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a86:	e15f      	b.n	8002d48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2202      	movs	r2, #2
 8002a92:	409a      	lsls	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80c5 	beq.w	8002c28 <HAL_DMA_IRQHandler+0xce8>
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80bf 	beq.w	8002c28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 813a 	beq.w	8002d4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ae0:	e134      	b.n	8002d4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8130 	beq.w	8002d4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002af4:	e12a      	b.n	8002d4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 8089 	bne.w	8002c14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_DMA_IRQHandler+0xc74>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d04a      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_DMA_IRQHandler+0xc78>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d045      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <HAL_DMA_IRQHandler+0xc7c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d040      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_DMA_IRQHandler+0xc80>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d03b      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_DMA_IRQHandler+0xc84>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d036      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <HAL_DMA_IRQHandler+0xc88>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <HAL_DMA_IRQHandler+0xc8c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <HAL_DMA_IRQHandler+0xc90>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <HAL_DMA_IRQHandler+0xc94>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_DMA_IRQHandler+0xc98>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01d      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_DMA_IRQHandler+0xc9c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_DMA_IRQHandler+0xca0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_DMA_IRQHandler+0xca4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_DMA_IRQHandler+0xca8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_DMA_IRQHandler+0xcac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xc62>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_DMA_IRQHandler+0xcb0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d128      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0xcb4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0214 	bic.w	r2, r2, #20
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e027      	b.n	8002c04 <HAL_DMA_IRQHandler+0xcc4>
 8002bb4:	40020010 	.word	0x40020010
 8002bb8:	40020028 	.word	0x40020028
 8002bbc:	40020040 	.word	0x40020040
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	40020070 	.word	0x40020070
 8002bc8:	40020088 	.word	0x40020088
 8002bcc:	400200a0 	.word	0x400200a0
 8002bd0:	400200b8 	.word	0x400200b8
 8002bd4:	40020410 	.word	0x40020410
 8002bd8:	40020428 	.word	0x40020428
 8002bdc:	40020440 	.word	0x40020440
 8002be0:	40020458 	.word	0x40020458
 8002be4:	40020470 	.word	0x40020470
 8002be8:	40020488 	.word	0x40020488
 8002bec:	400204a0 	.word	0x400204a0
 8002bf0:	400204b8 	.word	0x400204b8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 020a 	bic.w	r2, r2, #10
 8002c02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8097 	beq.w	8002d4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c26:	e091      	b.n	8002d4c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2208      	movs	r2, #8
 8002c32:	409a      	lsls	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8088 	beq.w	8002d4e <HAL_DMA_IRQHandler+0xe0e>
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8082 	beq.w	8002d4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <HAL_DMA_IRQHandler+0xe14>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d04a      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_DMA_IRQHandler+0xe18>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d045      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	; (8002d5c <HAL_DMA_IRQHandler+0xe1c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d040      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <HAL_DMA_IRQHandler+0xe20>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d03b      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <HAL_DMA_IRQHandler+0xe24>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d036      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_DMA_IRQHandler+0xe28>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d031      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <HAL_DMA_IRQHandler+0xe2c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02c      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a36      	ldr	r2, [pc, #216]	; (8002d70 <HAL_DMA_IRQHandler+0xe30>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d027      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a35      	ldr	r2, [pc, #212]	; (8002d74 <HAL_DMA_IRQHandler+0xe34>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a33      	ldr	r2, [pc, #204]	; (8002d78 <HAL_DMA_IRQHandler+0xe38>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01d      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a32      	ldr	r2, [pc, #200]	; (8002d7c <HAL_DMA_IRQHandler+0xe3c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a30      	ldr	r2, [pc, #192]	; (8002d80 <HAL_DMA_IRQHandler+0xe40>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <HAL_DMA_IRQHandler+0xe44>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00e      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <HAL_DMA_IRQHandler+0xe48>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <HAL_DMA_IRQHandler+0xe4c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_IRQHandler+0xdaa>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <HAL_DMA_IRQHandler+0xe50>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <HAL_DMA_IRQHandler+0xdbc>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 021c 	bic.w	r2, r2, #28
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e007      	b.n	8002d0c <HAL_DMA_IRQHandler+0xdcc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2201      	movs	r2, #1
 8002d16:	409a      	lsls	r2, r3
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	e004      	b.n	8002d4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002d44:	bf00      	nop
 8002d46:	e002      	b.n	8002d4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40020010 	.word	0x40020010
 8002d58:	40020028 	.word	0x40020028
 8002d5c:	40020040 	.word	0x40020040
 8002d60:	40020058 	.word	0x40020058
 8002d64:	40020070 	.word	0x40020070
 8002d68:	40020088 	.word	0x40020088
 8002d6c:	400200a0 	.word	0x400200a0
 8002d70:	400200b8 	.word	0x400200b8
 8002d74:	40020410 	.word	0x40020410
 8002d78:	40020428 	.word	0x40020428
 8002d7c:	40020440 	.word	0x40020440
 8002d80:	40020458 	.word	0x40020458
 8002d84:	40020470 	.word	0x40020470
 8002d88:	40020488 	.word	0x40020488
 8002d8c:	400204a0 	.word	0x400204a0
 8002d90:	400204b8 	.word	0x400204b8

08002d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a42      	ldr	r2, [pc, #264]	; (8002eac <DMA_CalcBaseAndBitshift+0x118>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d04a      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d045      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3f      	ldr	r2, [pc, #252]	; (8002eb4 <DMA_CalcBaseAndBitshift+0x120>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d040      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3e      	ldr	r2, [pc, #248]	; (8002eb8 <DMA_CalcBaseAndBitshift+0x124>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d03b      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3c      	ldr	r2, [pc, #240]	; (8002ebc <DMA_CalcBaseAndBitshift+0x128>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d036      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3b      	ldr	r2, [pc, #236]	; (8002ec0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d031      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a39      	ldr	r2, [pc, #228]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x130>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02c      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x134>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d027      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a36      	ldr	r2, [pc, #216]	; (8002ecc <DMA_CalcBaseAndBitshift+0x138>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d022      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a35      	ldr	r2, [pc, #212]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x13c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d01d      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <DMA_CalcBaseAndBitshift+0x140>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d018      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a32      	ldr	r2, [pc, #200]	; (8002ed8 <DMA_CalcBaseAndBitshift+0x144>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a30      	ldr	r2, [pc, #192]	; (8002edc <DMA_CalcBaseAndBitshift+0x148>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2f      	ldr	r2, [pc, #188]	; (8002ee0 <DMA_CalcBaseAndBitshift+0x14c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ee4 <DMA_CalcBaseAndBitshift+0x150>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <DMA_CalcBaseAndBitshift+0xa8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2c      	ldr	r2, [pc, #176]	; (8002ee8 <DMA_CalcBaseAndBitshift+0x154>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <DMA_CalcBaseAndBitshift+0xac>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0xae>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d024      	beq.n	8002e90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3b10      	subs	r3, #16
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <DMA_CalcBaseAndBitshift+0x158>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d908      	bls.n	8002e80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <DMA_CalcBaseAndBitshift+0x160>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	1d1a      	adds	r2, r3, #4
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e7e:	e00d      	b.n	8002e9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <DMA_CalcBaseAndBitshift+0x160>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8e:	e005      	b.n	8002e9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	40020010 	.word	0x40020010
 8002eb0:	40020028 	.word	0x40020028
 8002eb4:	40020040 	.word	0x40020040
 8002eb8:	40020058 	.word	0x40020058
 8002ebc:	40020070 	.word	0x40020070
 8002ec0:	40020088 	.word	0x40020088
 8002ec4:	400200a0 	.word	0x400200a0
 8002ec8:	400200b8 	.word	0x400200b8
 8002ecc:	40020410 	.word	0x40020410
 8002ed0:	40020428 	.word	0x40020428
 8002ed4:	40020440 	.word	0x40020440
 8002ed8:	40020458 	.word	0x40020458
 8002edc:	40020470 	.word	0x40020470
 8002ee0:	40020488 	.word	0x40020488
 8002ee4:	400204a0 	.word	0x400204a0
 8002ee8:	400204b8 	.word	0x400204b8
 8002eec:	aaaaaaab 	.word	0xaaaaaaab
 8002ef0:	08008d0c 	.word	0x08008d0c
 8002ef4:	fffffc00 	.word	0xfffffc00

08002ef8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d120      	bne.n	8002f4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d858      	bhi.n	8002fc6 <DMA_CheckFifoParam+0xce>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <DMA_CheckFifoParam+0x24>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f3f 	.word	0x08002f3f
 8002f24:	08002f2d 	.word	0x08002f2d
 8002f28:	08002fc7 	.word	0x08002fc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d048      	beq.n	8002fca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f3c:	e045      	b.n	8002fca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f46:	d142      	bne.n	8002fce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f4c:	e03f      	b.n	8002fce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f56:	d123      	bne.n	8002fa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d838      	bhi.n	8002fd2 <DMA_CheckFifoParam+0xda>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <DMA_CheckFifoParam+0x70>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f7f 	.word	0x08002f7f
 8002f70:	08002f79 	.word	0x08002f79
 8002f74:	08002f91 	.word	0x08002f91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f7c:	e030      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d025      	beq.n	8002fd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f8e:	e022      	b.n	8002fd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f98:	d11f      	bne.n	8002fda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f9e:	e01c      	b.n	8002fda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d902      	bls.n	8002fae <DMA_CheckFifoParam+0xb6>
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d003      	beq.n	8002fb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002fac:	e018      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb2:	e015      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00e      	beq.n	8002fde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8002fc4:	e00b      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
        break;
 8002fc6:	bf00      	nop
 8002fc8:	e00a      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e008      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e006      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e004      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
    break;
 8002fde:	bf00      	nop
    }
  }

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01d      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a35      	ldr	r2, [pc, #212]	; (80030ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01a      	beq.n	800308e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3b08      	subs	r3, #8
 8003060:	4a28      	ldr	r2, [pc, #160]	; (8003104 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4b26      	ldr	r3, [pc, #152]	; (8003108 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a24      	ldr	r2, [pc, #144]	; (800310c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800307c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800308c:	e024      	b.n	80030d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3b10      	subs	r3, #16
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d806      	bhi.n	80030b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d902      	bls.n	80030b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a16      	ldr	r2, [pc, #88]	; (8003120 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2201      	movs	r2, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	58025408 	.word	0x58025408
 80030e8:	5802541c 	.word	0x5802541c
 80030ec:	58025430 	.word	0x58025430
 80030f0:	58025444 	.word	0x58025444
 80030f4:	58025458 	.word	0x58025458
 80030f8:	5802546c 	.word	0x5802546c
 80030fc:	58025480 	.word	0x58025480
 8003100:	58025494 	.word	0x58025494
 8003104:	cccccccd 	.word	0xcccccccd
 8003108:	16009600 	.word	0x16009600
 800310c:	58025880 	.word	0x58025880
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	400204b8 	.word	0x400204b8
 8003118:	4002040f 	.word	0x4002040f
 800311c:	10008200 	.word	0x10008200
 8003120:	40020880 	.word	0x40020880

08003124 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04a      	beq.n	80031d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d847      	bhi.n	80031d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a25      	ldr	r2, [pc, #148]	; (80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01d      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4b17      	ldr	r3, [pc, #92]	; (80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80031ac:	671a      	str	r2, [r3, #112]	; 0x70
 80031ae:	e009      	b.n	80031c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80031c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	58025408 	.word	0x58025408
 80031e0:	5802541c 	.word	0x5802541c
 80031e4:	58025430 	.word	0x58025430
 80031e8:	58025444 	.word	0x58025444
 80031ec:	58025458 	.word	0x58025458
 80031f0:	5802546c 	.word	0x5802546c
 80031f4:	58025480 	.word	0x58025480
 80031f8:	58025494 	.word	0x58025494
 80031fc:	1600963f 	.word	0x1600963f
 8003200:	58025940 	.word	0x58025940
 8003204:	1000823f 	.word	0x1000823f
 8003208:	40020940 	.word	0x40020940

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800321a:	4b89      	ldr	r3, [pc, #548]	; (8003440 <HAL_GPIO_Init+0x234>)
 800321c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800321e:	e194      	b.n	800354a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2101      	movs	r1, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8186 	beq.w	8003544 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d005      	beq.n	8003250 <HAL_GPIO_Init+0x44>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d130      	bne.n	80032b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003286:	2201      	movs	r2, #1
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 0201 	and.w	r2, r3, #1
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d017      	beq.n	80032ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	2203      	movs	r2, #3
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d123      	bne.n	8003342 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	08da      	lsrs	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3208      	adds	r2, #8
 8003302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0203 	and.w	r2, r3, #3
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80e0 	beq.w	8003544 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003384:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_GPIO_Init+0x238>)
 8003386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800338a:	4a2e      	ldr	r2, [pc, #184]	; (8003444 <HAL_GPIO_Init+0x238>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_GPIO_Init+0x238>)
 8003396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_GPIO_Init+0x23c>)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a20      	ldr	r2, [pc, #128]	; (800344c <HAL_GPIO_Init+0x240>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d052      	beq.n	8003474 <HAL_GPIO_Init+0x268>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_GPIO_Init+0x244>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d031      	beq.n	800343a <HAL_GPIO_Init+0x22e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_GPIO_Init+0x248>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <HAL_GPIO_Init+0x22a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_GPIO_Init+0x24c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d025      	beq.n	8003432 <HAL_GPIO_Init+0x226>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_GPIO_Init+0x250>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <HAL_GPIO_Init+0x222>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_GPIO_Init+0x254>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_GPIO_Init+0x21e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_GPIO_Init+0x258>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0x21a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_GPIO_Init+0x25c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00d      	beq.n	8003422 <HAL_GPIO_Init+0x216>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_GPIO_Init+0x260>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_GPIO_Init+0x264>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_GPIO_Init+0x20e>
 8003416:	2309      	movs	r3, #9
 8003418:	e02d      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 800341a:	230a      	movs	r3, #10
 800341c:	e02b      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 800341e:	2308      	movs	r3, #8
 8003420:	e029      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 8003422:	2307      	movs	r3, #7
 8003424:	e027      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 8003426:	2306      	movs	r3, #6
 8003428:	e025      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 800342a:	2305      	movs	r3, #5
 800342c:	e023      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 800342e:	2304      	movs	r3, #4
 8003430:	e021      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 8003432:	2303      	movs	r3, #3
 8003434:	e01f      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 8003436:	2302      	movs	r3, #2
 8003438:	e01d      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 800343a:	2301      	movs	r3, #1
 800343c:	e01b      	b.n	8003476 <HAL_GPIO_Init+0x26a>
 800343e:	bf00      	nop
 8003440:	58000080 	.word	0x58000080
 8003444:	58024400 	.word	0x58024400
 8003448:	58000400 	.word	0x58000400
 800344c:	58020000 	.word	0x58020000
 8003450:	58020400 	.word	0x58020400
 8003454:	58020800 	.word	0x58020800
 8003458:	58020c00 	.word	0x58020c00
 800345c:	58021000 	.word	0x58021000
 8003460:	58021400 	.word	0x58021400
 8003464:	58021800 	.word	0x58021800
 8003468:	58021c00 	.word	0x58021c00
 800346c:	58022000 	.word	0x58022000
 8003470:	58022400 	.word	0x58022400
 8003474:	2300      	movs	r3, #0
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	4093      	lsls	r3, r2
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003486:	4938      	ldr	r1, [pc, #224]	; (8003568 <HAL_GPIO_Init+0x35c>)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3301      	adds	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f ae63 	bne.w	8003220 <HAL_GPIO_Init+0x14>
  }
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	3724      	adds	r7, #36	; 0x24
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	58000400 	.word	0x58000400

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
 8003578:	4613      	mov	r3, r2
 800357a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003588:	e003      	b.n	8003592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	041a      	lsls	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_HSEM_FastTake+0x2c>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3320      	adds	r3, #32
 80035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_HSEM_FastTake+0x30>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	58026400 	.word	0x58026400
 80035d0:	80000300 	.word	0x80000300

080035d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <HAL_HSEM_Release+0x24>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	58026400 	.word	0x58026400

080035fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07f      	b.n	800370e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fcec 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800364c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	e006      	b.n	8003684 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003682:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d104      	bne.n	8003696 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003694:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_I2C_Init+0x11c>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69d9      	ldr	r1, [r3, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	02008000 	.word	0x02008000

0800371c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	460b      	mov	r3, r1
 800372a:	817b      	strh	r3, [r7, #10]
 800372c:	4613      	mov	r3, r2
 800372e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	f040 80da 	bne.w	80038f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_I2C_Master_Transmit+0x30>
 8003748:	2302      	movs	r3, #2
 800374a:	e0d3      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1d8>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003754:	f7fd ff70 	bl	8001638 <HAL_GetTick>
 8003758:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fb68 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0be      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2221      	movs	r2, #33	; 0x21
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2210      	movs	r2, #16
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	893a      	ldrh	r2, [r7, #8]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2bff      	cmp	r3, #255	; 0xff
 80037a6:	d90e      	bls.n	80037c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	22ff      	movs	r2, #255	; 0xff
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	8979      	ldrh	r1, [r7, #10]
 80037b6:	4b51      	ldr	r3, [pc, #324]	; (80038fc <HAL_I2C_Master_Transmit+0x1e0>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fd5e 	bl	8004280 <I2C_TransferConfig>
 80037c4:	e06c      	b.n	80038a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	4b48      	ldr	r3, [pc, #288]	; (80038fc <HAL_I2C_Master_Transmit+0x1e0>)
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fd4d 	bl	8004280 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037e6:	e05b      	b.n	80038a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	6a39      	ldr	r1, [r7, #32]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fb65 	bl	8003ebc <I2C_WaitOnTXISFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e07b      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d034      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0x184>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d130      	bne.n	80038a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	2200      	movs	r2, #0
 8003846:	2180      	movs	r1, #128	; 0x80
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 faf7 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e04d      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2bff      	cmp	r3, #255	; 0xff
 8003860:	d90e      	bls.n	8003880 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	b2da      	uxtb	r2, r3
 800386e:	8979      	ldrh	r1, [r7, #10]
 8003870:	2300      	movs	r3, #0
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fd01 	bl	8004280 <I2C_TransferConfig>
 800387e:	e00f      	b.n	80038a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	b2da      	uxtb	r2, r3
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fcf0 	bl	8004280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d19e      	bne.n	80037e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fb44 	bl	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01a      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2220      	movs	r2, #32
 80038c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_I2C_Master_Transmit+0x1e4>)
 80038d2:	400b      	ands	r3, r1
 80038d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e000      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	80002000 	.word	0x80002000
 8003900:	fe00e800 	.word	0xfe00e800

08003904 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	461a      	mov	r2, r3
 8003910:	460b      	mov	r3, r1
 8003912:	817b      	strh	r3, [r7, #10]
 8003914:	4613      	mov	r3, r2
 8003916:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	f040 80db 	bne.w	8003adc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_I2C_Master_Receive+0x30>
 8003930:	2302      	movs	r3, #2
 8003932:	e0d4      	b.n	8003ade <HAL_I2C_Master_Receive+0x1da>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800393c:	f7fd fe7c 	bl	8001638 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2319      	movs	r3, #25
 8003948:	2201      	movs	r2, #1
 800394a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa74 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0bf      	b.n	8003ade <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2222      	movs	r2, #34	; 0x22
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2210      	movs	r2, #16
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	893a      	ldrh	r2, [r7, #8]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	2bff      	cmp	r3, #255	; 0xff
 800398e:	d90e      	bls.n	80039ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	22ff      	movs	r2, #255	; 0xff
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	b2da      	uxtb	r2, r3
 800399c:	8979      	ldrh	r1, [r7, #10]
 800399e:	4b52      	ldr	r3, [pc, #328]	; (8003ae8 <HAL_I2C_Master_Receive+0x1e4>)
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fc6a 	bl	8004280 <I2C_TransferConfig>
 80039ac:	e06d      	b.n	8003a8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <HAL_I2C_Master_Receive+0x1e4>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fc59 	bl	8004280 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80039ce:	e05c      	b.n	8003a8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	6a39      	ldr	r1, [r7, #32]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 faed 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e07c      	b.n	8003ade <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d034      	beq.n	8003a8a <HAL_I2C_Master_Receive+0x186>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d130      	bne.n	8003a8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa02 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e04d      	b.n	8003ade <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2bff      	cmp	r3, #255	; 0xff
 8003a4a:	d90e      	bls.n	8003a6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	8979      	ldrh	r1, [r7, #10]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fc0c 	bl	8004280 <I2C_TransferConfig>
 8003a68:	e00f      	b.n	8003a8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fbfb 	bl	8004280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d19d      	bne.n	80039d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	6a39      	ldr	r1, [r7, #32]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fa4f 	bl	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e01a      	b.n	8003ade <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2220      	movs	r2, #32
 8003aae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_I2C_Master_Receive+0x1e8>)
 8003abc:	400b      	ands	r3, r1
 8003abe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	80002400 	.word	0x80002400
 8003aec:	fe00e800 	.word	0xfe00e800

08003af0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	f040 80f9 	bne.w	8003d0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x34>
 8003b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0ed      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Mem_Write+0x4e>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0e6      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd fd77 	bl	8001638 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2319      	movs	r3, #25
 8003b52:	2201      	movs	r2, #1
 8003b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f96f 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0d1      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2221      	movs	r2, #33	; 0x21
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b90:	88f8      	ldrh	r0, [r7, #6]
 8003b92:	893a      	ldrh	r2, [r7, #8]
 8003b94:	8979      	ldrh	r1, [r7, #10]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8d3 	bl	8003d4c <I2C_RequestMemoryWrite>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0a9      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2bff      	cmp	r3, #255	; 0xff
 8003bc0:	d90e      	bls.n	8003be0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	22ff      	movs	r2, #255	; 0xff
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	8979      	ldrh	r1, [r7, #10]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fb51 	bl	8004280 <I2C_TransferConfig>
 8003bde:	e00f      	b.n	8003c00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fb40 	bl	8004280 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f959 	bl	8003ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e07b      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d034      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x1c8>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d130      	bne.n	8003cb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f8eb 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e04d      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2bff      	cmp	r3, #255	; 0xff
 8003c78:	d90e      	bls.n	8003c98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	8979      	ldrh	r1, [r7, #10]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 faf5 	bl	8004280 <I2C_TransferConfig>
 8003c96:	e00f      	b.n	8003cb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	8979      	ldrh	r1, [r7, #10]
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fae4 	bl	8004280 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d19e      	bne.n	8003c00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f938 	bl	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e01a      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_I2C_Mem_Write+0x224>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	fe00e800 	.word	0xfe00e800

08003d18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
  }
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <I2C_RequestMemoryWrite+0xa4>)
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fa83 	bl	8004280 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f89c 	bl	8003ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e02c      	b.n	8003de8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d9e:	e015      	b.n	8003dcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	69b9      	ldr	r1, [r7, #24]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f882 	bl	8003ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e012      	b.n	8003de8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f830 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	80002000 	.word	0x80002000

08003df4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d103      	bne.n	8003e12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d007      	beq.n	8003e30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	619a      	str	r2, [r3, #24]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4c:	e022      	b.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d01e      	beq.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fd fbef 	bl	8001638 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d113      	bne.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e00f      	b.n	8003eb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d0cd      	beq.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ec8:	e02c      	b.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8ea 	bl	80040a8 <I2C_IsErrorOccurred>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02a      	b.n	8003f34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d01e      	beq.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fd fba7 	bl	8001638 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d113      	bne.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e007      	b.n	8003f34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d1cb      	bne.n	8003eca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f48:	e028      	b.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f8aa 	bl	80040a8 <I2C_IsErrorOccurred>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e026      	b.n	8003fac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7fd fb6b 	bl	8001638 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d113      	bne.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	f043 0220 	orr.w	r2, r3, #32
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e007      	b.n	8003fac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d1cf      	bne.n	8003f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc0:	e064      	b.n	800408c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f86e 	bl	80040a8 <I2C_IsErrorOccurred>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e062      	b.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d138      	bne.n	8004056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d105      	bne.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e04e      	b.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d107      	bne.n	800401c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2204      	movs	r2, #4
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
 800401a:	e002      	b.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2220      	movs	r2, #32
 8004028:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004036:	400b      	ands	r3, r1
 8004038:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7fd faef 	bl	8001638 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10f      	bne.n	800408c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e007      	b.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d193      	bne.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	fe00e800 	.word	0xfe00e800

080040a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d075      	beq.n	80041c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040dc:	e056      	b.n	800418c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d052      	beq.n	800418c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fd faa7 	bl	8001638 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <I2C_IsErrorOccurred+0x54>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d147      	bne.n	800418c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800410e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411e:	d12e      	bne.n	800417e <I2C_IsErrorOccurred+0xd6>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004126:	d02a      	beq.n	800417e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b20      	cmp	r3, #32
 800412c:	d027      	beq.n	800417e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800413e:	f7fd fa7b 	bl	8001638 <HAL_GetTick>
 8004142:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004144:	e01b      	b.n	800417e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004146:	f7fd fa77 	bl	8001638 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b19      	cmp	r3, #25
 8004152:	d914      	bls.n	800417e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d1dc      	bne.n	8004146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b20      	cmp	r3, #32
 8004198:	d003      	beq.n	80041a2 <I2C_IsErrorOccurred+0xfa>
 800419a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d09d      	beq.n	80040de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2220      	movs	r2, #32
 80041b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	f043 0308 	orr.w	r3, r3, #8
 80041fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004226:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800422e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01c      	beq.n	8004270 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff fddc 	bl	8003df4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <I2C_IsErrorOccurred+0x1d4>)
 8004248:	400b      	ands	r3, r1
 800424a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004274:	4618      	mov	r0, r3
 8004276:	3728      	adds	r7, #40	; 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	fe00e800 	.word	0xfe00e800

08004280 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	4613      	mov	r3, r2
 8004290:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004298:	7a7b      	ldrb	r3, [r7, #9]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042a0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	0d5b      	lsrs	r3, r3, #21
 80042ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <I2C_TransferConfig+0x60>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	43db      	mvns	r3, r3
 80042c4:	ea02 0103 	and.w	r1, r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	03ff63ff 	.word	0x03ff63ff

080042e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d138      	bne.n	800436c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004304:	2302      	movs	r3, #2
 8004306:	e032      	b.n	800436e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b20      	cmp	r3, #32
 800438e:	d139      	bne.n	8004404 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800439a:	2302      	movs	r3, #2
 800439c:	e033      	b.n	8004406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800441c:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	2b06      	cmp	r3, #6
 8004426:	d00a      	beq.n	800443e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e040      	b.n	80044bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e03e      	b.n	80044bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004446:	491f      	ldr	r1, [pc, #124]	; (80044c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4313      	orrs	r3, r2
 800444c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800444e:	f7fd f8f3 	bl	8001638 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004454:	e009      	b.n	800446a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004456:	f7fd f8ef 	bl	8001638 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004464:	d901      	bls.n	800446a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e028      	b.n	80044bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004476:	d1ee      	bne.n	8004456 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b1e      	cmp	r3, #30
 800447c:	d008      	beq.n	8004490 <HAL_PWREx_ConfigSupply+0x7c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b2e      	cmp	r3, #46	; 0x2e
 8004482:	d005      	beq.n	8004490 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b1d      	cmp	r3, #29
 8004488:	d002      	beq.n	8004490 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b2d      	cmp	r3, #45	; 0x2d
 800448e:	d114      	bne.n	80044ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004490:	f7fd f8d2 	bl	8001638 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004496:	e009      	b.n	80044ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004498:	f7fd f8ce 	bl	8001638 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a6:	d901      	bls.n	80044ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e007      	b.n	80044bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d1ee      	bne.n	8004498 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	58024800 	.word	0x58024800

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08c      	sub	sp, #48	; 0x30
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f000 bc1d 	b.w	8004d16 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8087 	beq.w	80045f8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ea:	4b99      	ldr	r3, [pc, #612]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044f4:	4b96      	ldr	r3, [pc, #600]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d007      	beq.n	8004510 <HAL_RCC_OscConfig+0x48>
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	2b18      	cmp	r3, #24
 8004504:	d110      	bne.n	8004528 <HAL_RCC_OscConfig+0x60>
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d10b      	bne.n	8004528 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	4b8f      	ldr	r3, [pc, #572]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d06c      	beq.n	80045f6 <HAL_RCC_OscConfig+0x12e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d168      	bne.n	80045f6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e3f6      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d106      	bne.n	8004540 <HAL_RCC_OscConfig+0x78>
 8004532:	4b87      	ldr	r3, [pc, #540]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a86      	ldr	r2, [pc, #536]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e02e      	b.n	800459e <HAL_RCC_OscConfig+0xd6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0x9a>
 8004548:	4b81      	ldr	r3, [pc, #516]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a80      	ldr	r2, [pc, #512]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b7e      	ldr	r3, [pc, #504]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a7d      	ldr	r2, [pc, #500]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e01d      	b.n	800459e <HAL_RCC_OscConfig+0xd6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456a:	d10c      	bne.n	8004586 <HAL_RCC_OscConfig+0xbe>
 800456c:	4b78      	ldr	r3, [pc, #480]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a77      	ldr	r2, [pc, #476]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b75      	ldr	r3, [pc, #468]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a74      	ldr	r2, [pc, #464]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	e00b      	b.n	800459e <HAL_RCC_OscConfig+0xd6>
 8004586:	4b72      	ldr	r3, [pc, #456]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a71      	ldr	r2, [pc, #452]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d013      	beq.n	80045ce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd f847 	bl	8001638 <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ae:	f7fd f843 	bl	8001638 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b64      	cmp	r3, #100	; 0x64
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e3aa      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c0:	4b63      	ldr	r3, [pc, #396]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0xe6>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fd f833 	bl	8001638 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d6:	f7fd f82f 	bl	8001638 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	; 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e396      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x10e>
 80045f4:	e000      	b.n	80045f8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80cb 	beq.w	800479c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004606:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_RCC_OscConfig+0x164>
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b18      	cmp	r3, #24
 8004620:	d156      	bne.n	80046d0 <HAL_RCC_OscConfig+0x208>
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d151      	bne.n	80046d0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462c:	4b48      	ldr	r3, [pc, #288]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_OscConfig+0x17c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e368      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 0219 	bic.w	r2, r3, #25
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	493f      	ldr	r1, [pc, #252]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004656:	f7fc ffef 	bl	8001638 <HAL_GetTick>
 800465a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800465e:	f7fc ffeb 	bl	8001638 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e352      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004670:	4b37      	ldr	r3, [pc, #220]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	f7fc ffe8 	bl	8001650 <HAL_GetREVID>
 8004680:	4603      	mov	r3, r0
 8004682:	f241 0203 	movw	r2, #4099	; 0x1003
 8004686:	4293      	cmp	r3, r2
 8004688:	d817      	bhi.n	80046ba <HAL_RCC_OscConfig+0x1f2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d108      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1dc>
 8004692:	4b2f      	ldr	r3, [pc, #188]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800469a:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800469c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a2:	e07b      	b.n	800479c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a4:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	031b      	lsls	r3, r3, #12
 80046b2:	4927      	ldr	r1, [pc, #156]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b8:	e070      	b.n	800479c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ba:	4b25      	ldr	r3, [pc, #148]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	4921      	ldr	r1, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ce:	e065      	b.n	800479c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d048      	beq.n	800476a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f023 0219 	bic.w	r2, r3, #25
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	491a      	ldr	r1, [pc, #104]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fc ffa5 	bl	8001638 <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fc ffa1 	bl	8001638 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e308      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	f7fc ff9e 	bl	8001650 <HAL_GetREVID>
 8004714:	4603      	mov	r3, r0
 8004716:	f241 0203 	movw	r2, #4099	; 0x1003
 800471a:	4293      	cmp	r3, r2
 800471c:	d81a      	bhi.n	8004754 <HAL_RCC_OscConfig+0x28c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d108      	bne.n	8004738 <HAL_RCC_OscConfig+0x270>
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800472e:	4a08      	ldr	r2, [pc, #32]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004734:	6053      	str	r3, [r2, #4]
 8004736:	e031      	b.n	800479c <HAL_RCC_OscConfig+0x2d4>
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	4902      	ldr	r1, [pc, #8]	; (8004750 <HAL_RCC_OscConfig+0x288>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
 800474c:	e026      	b.n	800479c <HAL_RCC_OscConfig+0x2d4>
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
 8004754:	4b9a      	ldr	r3, [pc, #616]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	4997      	ldr	r1, [pc, #604]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	e018      	b.n	800479c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476a:	4b95      	ldr	r3, [pc, #596]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a94      	ldr	r2, [pc, #592]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fc ff5f 	bl	8001638 <HAL_GetTick>
 800477a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477e:	f7fc ff5b 	bl	8001638 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e2c2      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004790:	4b8b      	ldr	r3, [pc, #556]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a9 	beq.w	80048fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047aa:	4b85      	ldr	r3, [pc, #532]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047b4:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d007      	beq.n	80047d0 <HAL_RCC_OscConfig+0x308>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b18      	cmp	r3, #24
 80047c4:	d13a      	bne.n	800483c <HAL_RCC_OscConfig+0x374>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d135      	bne.n	800483c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047d0:	4b7b      	ldr	r3, [pc, #492]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x320>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e296      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047e8:	f7fc ff32 	bl	8001650 <HAL_GetREVID>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d817      	bhi.n	8004826 <HAL_RCC_OscConfig+0x35e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d108      	bne.n	8004810 <HAL_RCC_OscConfig+0x348>
 80047fe:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004806:	4a6e      	ldr	r2, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800480c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800480e:	e075      	b.n	80048fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004810:	4b6b      	ldr	r3, [pc, #428]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	069b      	lsls	r3, r3, #26
 800481e:	4968      	ldr	r1, [pc, #416]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004824:	e06a      	b.n	80048fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004826:	4b66      	ldr	r3, [pc, #408]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	4962      	ldr	r1, [pc, #392]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800483a:	e05f      	b.n	80048fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d042      	beq.n	80048ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004844:	4b5e      	ldr	r3, [pc, #376]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5d      	ldr	r2, [pc, #372]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fc fef2 	bl	8001638 <HAL_GetTick>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004858:	f7fc feee 	bl	8001638 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e255      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800486a:	4b55      	ldr	r3, [pc, #340]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004876:	f7fc feeb 	bl	8001650 <HAL_GetREVID>
 800487a:	4603      	mov	r3, r0
 800487c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004880:	4293      	cmp	r3, r2
 8004882:	d817      	bhi.n	80048b4 <HAL_RCC_OscConfig+0x3ec>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	2b20      	cmp	r3, #32
 800488a:	d108      	bne.n	800489e <HAL_RCC_OscConfig+0x3d6>
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489a:	6053      	str	r3, [r2, #4]
 800489c:	e02e      	b.n	80048fc <HAL_RCC_OscConfig+0x434>
 800489e:	4b48      	ldr	r3, [pc, #288]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	069b      	lsls	r3, r3, #26
 80048ac:	4944      	ldr	r1, [pc, #272]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
 80048b2:	e023      	b.n	80048fc <HAL_RCC_OscConfig+0x434>
 80048b4:	4b42      	ldr	r3, [pc, #264]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	493f      	ldr	r1, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
 80048c8:	e018      	b.n	80048fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048ca:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3c      	ldr	r2, [pc, #240]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fc feaf 	bl	8001638 <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80048de:	f7fc feab 	bl	8001638 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e212      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048f0:	4b33      	ldr	r3, [pc, #204]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f0      	bne.n	80048de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d036      	beq.n	8004976 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d019      	beq.n	8004944 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fc fe8c 	bl	8001638 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004924:	f7fc fe88 	bl	8001638 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1ef      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004936:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x45c>
 8004942:	e018      	b.n	8004976 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004944:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004948:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fc fe72 	bl	8001638 <HAL_GetTick>
 8004954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004958:	f7fc fe6e 	bl	8001638 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1d5      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d039      	beq.n	80049f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004994:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004996:	f7fc fe4f 	bl	8001638 <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800499e:	f7fc fe4b 	bl	8001638 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e1b2      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x4d6>
 80049bc:	e01b      	b.n	80049f6 <HAL_RCC_OscConfig+0x52e>
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049c4:	4b9b      	ldr	r3, [pc, #620]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a9a      	ldr	r2, [pc, #616]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 80049ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049d0:	f7fc fe32 	bl	8001638 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80049d8:	f7fc fe2e 	bl	8001638 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e195      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049ea:	4b92      	ldr	r3, [pc, #584]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8081 	beq.w	8004b06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a04:	4b8c      	ldr	r3, [pc, #560]	; (8004c38 <HAL_RCC_OscConfig+0x770>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a8b      	ldr	r2, [pc, #556]	; (8004c38 <HAL_RCC_OscConfig+0x770>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a10:	f7fc fe12 	bl	8001638 <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a18:	f7fc fe0e 	bl	8001638 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e175      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2a:	4b83      	ldr	r3, [pc, #524]	; (8004c38 <HAL_RCC_OscConfig+0x770>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCC_OscConfig+0x584>
 8004a3e:	4b7d      	ldr	r3, [pc, #500]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a7c      	ldr	r2, [pc, #496]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4a:	e02d      	b.n	8004aa8 <HAL_RCC_OscConfig+0x5e0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10c      	bne.n	8004a6e <HAL_RCC_OscConfig+0x5a6>
 8004a54:	4b77      	ldr	r3, [pc, #476]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a76      	ldr	r2, [pc, #472]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a60:	4b74      	ldr	r3, [pc, #464]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a73      	ldr	r2, [pc, #460]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	f023 0304 	bic.w	r3, r3, #4
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e01c      	b.n	8004aa8 <HAL_RCC_OscConfig+0x5e0>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5c8>
 8004a76:	4b6f      	ldr	r3, [pc, #444]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a6e      	ldr	r2, [pc, #440]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
 8004a82:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a6b      	ldr	r2, [pc, #428]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0x5e0>
 8004a90:	4b68      	ldr	r3, [pc, #416]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a67      	ldr	r2, [pc, #412]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a64      	ldr	r2, [pc, #400]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	f023 0304 	bic.w	r3, r3, #4
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fc fdc2 	bl	8001638 <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fc fdbe 	bl	8001638 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e123      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ace:	4b59      	ldr	r3, [pc, #356]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ee      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x5f0>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fc fdac 	bl	8001638 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fc fda8 	bl	8001638 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e10d      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004afa:	4b4e      	ldr	r3, [pc, #312]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ee      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8102 	beq.w	8004d14 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b10:	4b48      	ldr	r3, [pc, #288]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b18:	2b18      	cmp	r3, #24
 8004b1a:	f000 80bd 	beq.w	8004c98 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	f040 809e 	bne.w	8004c64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a41      	ldr	r2, [pc, #260]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fc fd80 	bl	8001638 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc fd7c 	bl	8001638 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e0e3      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b4e:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <HAL_RCC_OscConfig+0x774>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4931      	ldr	r1, [pc, #196]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	628b      	str	r3, [r1, #40]	; 0x28
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	3b01      	subs	r3, #1
 8004b84:	025b      	lsls	r3, r3, #9
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	041b      	lsls	r3, r3, #16
 8004b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ba4:	4923      	ldr	r1, [pc, #140]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004baa:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bba:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCC_OscConfig+0x778>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bc2:	00d2      	lsls	r2, r2, #3
 8004bc4:	491b      	ldr	r1, [pc, #108]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f023 020c 	bic.w	r2, r3, #12
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	4917      	ldr	r1, [pc, #92]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bdc:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	f023 0202 	bic.w	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	4912      	ldr	r1, [pc, #72]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fc fd05 	bl	8001638 <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c30:	e011      	b.n	8004c56 <HAL_RCC_OscConfig+0x78e>
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
 8004c38:	58024800 	.word	0x58024800
 8004c3c:	fffffc0c 	.word	0xfffffc0c
 8004c40:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fc fcf8 	bl	8001638 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e05f      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c56:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <HAL_RCC_OscConfig+0x858>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x77c>
 8004c62:	e057      	b.n	8004d14 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_RCC_OscConfig+0x858>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <HAL_RCC_OscConfig+0x858>)
 8004c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fc fce2 	bl	8001638 <HAL_GetTick>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fc fcde 	bl	8001638 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e045      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c8a:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <HAL_RCC_OscConfig+0x858>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x7b0>
 8004c96:	e03d      	b.n	8004d14 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <HAL_RCC_OscConfig+0x858>)
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <HAL_RCC_OscConfig+0x858>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d031      	beq.n	8004d10 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f003 0203 	and.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d12a      	bne.n	8004d10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d122      	bne.n	8004d10 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d11a      	bne.n	8004d10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	0a5b      	lsrs	r3, r3, #9
 8004cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d111      	bne.n	8004d10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d108      	bne.n	8004d10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	0e1b      	lsrs	r3, r3, #24
 8004d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3730      	adds	r7, #48	; 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400

08004d24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e19c      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d38:	4b8a      	ldr	r3, [pc, #552]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d910      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b87      	ldr	r3, [pc, #540]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 020f 	bic.w	r2, r3, #15
 8004d4e:	4985      	ldr	r1, [pc, #532]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b83      	ldr	r3, [pc, #524]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e184      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d010      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	4b7b      	ldr	r3, [pc, #492]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d908      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d84:	4b78      	ldr	r3, [pc, #480]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	4975      	ldr	r1, [pc, #468]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d010      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	4b70      	ldr	r3, [pc, #448]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d908      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004db2:	4b6d      	ldr	r3, [pc, #436]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	496a      	ldr	r1, [pc, #424]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d908      	bls.n	8004df2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	495e      	ldr	r1, [pc, #376]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d908      	bls.n	8004e20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e0e:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	4953      	ldr	r1, [pc, #332]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	4b4d      	ldr	r3, [pc, #308]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d908      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f023 020f 	bic.w	r2, r3, #15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4947      	ldr	r1, [pc, #284]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d055      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e5a:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	4940      	ldr	r1, [pc, #256]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e74:	4b3c      	ldr	r3, [pc, #240]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d121      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0f6      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0ea      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ea4:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0de      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0d6      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f023 0207 	bic.w	r2, r3, #7
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4925      	ldr	r1, [pc, #148]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7fc fbaf 	bl	8001638 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ede:	f7fc fbab 	bl	8001638 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e0be      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d1eb      	bne.n	8004ede <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d010      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d208      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f023 020f 	bic.w	r2, r3, #15
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	490e      	ldr	r1, [pc, #56]	; (8004f68 <HAL_RCC_ClockConfig+0x244>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d214      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 020f 	bic.w	r2, r3, #15
 8004f4a:	4906      	ldr	r1, [pc, #24]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCC_ClockConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e086      	b.n	8005072 <HAL_RCC_ClockConfig+0x34e>
 8004f64:	52002000 	.word	0x52002000
 8004f68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d010      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	4b3f      	ldr	r3, [pc, #252]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d208      	bcs.n	8004f9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f88:	4b3c      	ldr	r3, [pc, #240]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	4939      	ldr	r1, [pc, #228]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	4b34      	ldr	r3, [pc, #208]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d208      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fb6:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	492e      	ldr	r1, [pc, #184]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	4b28      	ldr	r3, [pc, #160]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d208      	bcs.n	8004ff6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fe4:	4b25      	ldr	r3, [pc, #148]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	4922      	ldr	r1, [pc, #136]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d010      	beq.n	8005024 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800500e:	429a      	cmp	r2, r3
 8005010:	d208      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	4917      	ldr	r1, [pc, #92]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8005020:	4313      	orrs	r3, r2
 8005022:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005024:	f000 f834 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	4912      	ldr	r1, [pc, #72]	; (8005080 <HAL_RCC_ClockConfig+0x35c>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_RCC_ClockConfig+0x358>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <HAL_RCC_ClockConfig+0x35c>)
 800504c:	5cd3      	ldrb	r3, [r2, r3]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <HAL_RCC_ClockConfig+0x360>)
 800505a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <HAL_RCC_ClockConfig+0x364>)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x368>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fc fa9c 	bl	80015a4 <HAL_InitTick>
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
 8005080:	08008cfc 	.word	0x08008cfc
 8005084:	24000004 	.word	0x24000004
 8005088:	24000000 	.word	0x24000000
 800508c:	24000008 	.word	0x24000008

08005090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005096:	4bb3      	ldr	r3, [pc, #716]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800509e:	2b18      	cmp	r3, #24
 80050a0:	f200 8155 	bhi.w	800534e <HAL_RCC_GetSysClockFreq+0x2be>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	08005111 	.word	0x08005111
 80050b0:	0800534f 	.word	0x0800534f
 80050b4:	0800534f 	.word	0x0800534f
 80050b8:	0800534f 	.word	0x0800534f
 80050bc:	0800534f 	.word	0x0800534f
 80050c0:	0800534f 	.word	0x0800534f
 80050c4:	0800534f 	.word	0x0800534f
 80050c8:	0800534f 	.word	0x0800534f
 80050cc:	08005137 	.word	0x08005137
 80050d0:	0800534f 	.word	0x0800534f
 80050d4:	0800534f 	.word	0x0800534f
 80050d8:	0800534f 	.word	0x0800534f
 80050dc:	0800534f 	.word	0x0800534f
 80050e0:	0800534f 	.word	0x0800534f
 80050e4:	0800534f 	.word	0x0800534f
 80050e8:	0800534f 	.word	0x0800534f
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800534f 	.word	0x0800534f
 80050f4:	0800534f 	.word	0x0800534f
 80050f8:	0800534f 	.word	0x0800534f
 80050fc:	0800534f 	.word	0x0800534f
 8005100:	0800534f 	.word	0x0800534f
 8005104:	0800534f 	.word	0x0800534f
 8005108:	0800534f 	.word	0x0800534f
 800510c:	08005143 	.word	0x08005143
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005110:	4b94      	ldr	r3, [pc, #592]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d009      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800511c:	4b91      	ldr	r3, [pc, #580]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	08db      	lsrs	r3, r3, #3
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	4a90      	ldr	r2, [pc, #576]	; (8005368 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800512e:	e111      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005130:	4b8d      	ldr	r3, [pc, #564]	; (8005368 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005132:	61bb      	str	r3, [r7, #24]
    break;
 8005134:	e10e      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005136:	4b8d      	ldr	r3, [pc, #564]	; (800536c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005138:	61bb      	str	r3, [r7, #24]
    break;
 800513a:	e10b      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b8c      	ldr	r3, [pc, #560]	; (8005370 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800513e:	61bb      	str	r3, [r7, #24]
    break;
 8005140:	e108      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005142:	4b88      	ldr	r3, [pc, #544]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800514c:	4b85      	ldr	r3, [pc, #532]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005156:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005158:	4b82      	ldr	r3, [pc, #520]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005162:	4b80      	ldr	r3, [pc, #512]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	08db      	lsrs	r3, r3, #3
 8005168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80e1 	beq.w	8005348 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b02      	cmp	r3, #2
 800518a:	f000 8083 	beq.w	8005294 <HAL_RCC_GetSysClockFreq+0x204>
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b02      	cmp	r3, #2
 8005192:	f200 80a1 	bhi.w	80052d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x114>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d056      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051a2:	e099      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051a4:	4b6f      	ldr	r3, [pc, #444]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d02d      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051b0:	4b6c      	ldr	r3, [pc, #432]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	4a6b      	ldr	r2, [pc, #428]	; (8005368 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b62      	ldr	r3, [pc, #392]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005374 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800520a:	e087      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005378 <HAL_RCC_GetSysClockFreq+0x2e8>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b51      	ldr	r3, [pc, #324]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005232:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005374 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524e:	e065      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800537c <HAL_RCC_GetSysClockFreq+0x2ec>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b40      	ldr	r3, [pc, #256]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a02 	vldr	s12, [r7, #8]
 8005276:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005374 <HAL_RCC_GetSysClockFreq+0x2e4>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	e043      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005380 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005374 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052d6:	e021      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800537c <HAL_RCC_GetSysClockFreq+0x2ec>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80052fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005374 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	0a5b      	lsrs	r3, r3, #9
 8005322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005326:	3301      	adds	r3, #1
 8005328:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005334:	edd7 6a07 	vldr	s13, [r7, #28]
 8005338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800533c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005340:	ee17 3a90 	vmov	r3, s15
 8005344:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005346:	e005      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
    break;
 800534c:	e002      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005350:	61bb      	str	r3, [r7, #24]
    break;
 8005352:	bf00      	nop
  }

  return sysclockfreq;
 8005354:	69bb      	ldr	r3, [r7, #24]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3724      	adds	r7, #36	; 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	58024400 	.word	0x58024400
 8005368:	03d09000 	.word	0x03d09000
 800536c:	003d0900 	.word	0x003d0900
 8005370:	007a1200 	.word	0x007a1200
 8005374:	46000000 	.word	0x46000000
 8005378:	4c742400 	.word	0x4c742400
 800537c:	4a742400 	.word	0x4a742400
 8005380:	4af42400 	.word	0x4af42400

08005384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800538a:	f7ff fe81 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800538e:	4602      	mov	r2, r0
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	490f      	ldr	r1, [pc, #60]	; (80053d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800539c:	5ccb      	ldrb	r3, [r1, r3]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80053b2:	5cd3      	ldrb	r3, [r2, r3]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	fa22 f303 	lsr.w	r3, r2, r3
 80053be:	4a07      	ldr	r2, [pc, #28]	; (80053dc <HAL_RCC_GetHCLKFreq+0x58>)
 80053c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053c2:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <HAL_RCC_GetHCLKFreq+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	58024400 	.word	0x58024400
 80053d8:	08008cfc 	.word	0x08008cfc
 80053dc:	24000004 	.word	0x24000004
 80053e0:	24000000 	.word	0x24000000

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053e8:	f7ff ffcc 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4904      	ldr	r1, [pc, #16]	; (800540c <HAL_RCC_GetPCLK1Freq+0x28>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	58024400 	.word	0x58024400
 800540c:	08008cfc 	.word	0x08008cfc

08005410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005414:	f7ff ffb6 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4904      	ldr	r1, [pc, #16]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	58024400 	.word	0x58024400
 8005438:	08008cfc 	.word	0x08008cfc

0800543c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005444:	2300      	movs	r3, #0
 8005446:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005448:	2300      	movs	r3, #0
 800544a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03f      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005460:	d02a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005462:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005466:	d824      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546c:	d018      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800546e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005472:	d81e      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547c:	d007      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800547e:	e018      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005480:	4ba3      	ldr	r3, [pc, #652]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4aa2      	ldr	r2, [pc, #648]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800548c:	e015      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	2102      	movs	r1, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f9d5 	bl	8006844 <RCCEx_PLL2_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800549e:	e00c      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	2102      	movs	r1, #2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fa7e 	bl	80069a8 <RCCEx_PLL3_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	75fb      	strb	r3, [r7, #23]
      break;
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054c0:	4b93      	ldr	r3, [pc, #588]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054cc:	4990      	ldr	r1, [pc, #576]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	650b      	str	r3, [r1, #80]	; 0x50
 80054d2:	e001      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d03d      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d826      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005509 	.word	0x08005509
 80054f8:	08005517 	.word	0x08005517
 80054fc:	08005529 	.word	0x08005529
 8005500:	08005541 	.word	0x08005541
 8005504:	08005541 	.word	0x08005541
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005508:	4b81      	ldr	r3, [pc, #516]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4a80      	ldr	r2, [pc, #512]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800550e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005514:	e015      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f001 f991 	bl	8006844 <RCCEx_PLL2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005526:	e00c      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3324      	adds	r3, #36	; 0x24
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fa3a 	bl	80069a8 <RCCEx_PLL3_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005538:	e003      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
      break;
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005548:	4b71      	ldr	r3, [pc, #452]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	f023 0207 	bic.w	r2, r3, #7
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	496e      	ldr	r1, [pc, #440]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	650b      	str	r3, [r1, #80]	; 0x50
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005568:	2b00      	cmp	r3, #0
 800556a:	d042      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d02b      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d825      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800557c:	2bc0      	cmp	r3, #192	; 0xc0
 800557e:	d028      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005580:	2bc0      	cmp	r3, #192	; 0xc0
 8005582:	d821      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d016      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005588:	2b80      	cmp	r3, #128	; 0x80
 800558a:	d81d      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d007      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005594:	e018      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005596:	4b5e      	ldr	r3, [pc, #376]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	4a5d      	ldr	r2, [pc, #372]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800559c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055a2:	e017      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3304      	adds	r3, #4
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f94a 	bl	8006844 <RCCEx_PLL2_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055b4:	e00e      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3324      	adds	r3, #36	; 0x24
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f9f3 	bl	80069a8 <RCCEx_PLL3_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055c6:	e005      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
      break;
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80055d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055da:	4b4d      	ldr	r3, [pc, #308]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	494a      	ldr	r1, [pc, #296]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	650b      	str	r3, [r1, #80]	; 0x50
 80055ec:	e001      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d049      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005608:	d030      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800560a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800560e:	d82a      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005610:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005614:	d02c      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005616:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800561a:	d824      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800561c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005620:	d018      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005626:	d81e      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800562c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005630:	d007      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005632:	e018      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4b36      	ldr	r3, [pc, #216]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4a35      	ldr	r2, [pc, #212]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005640:	e017      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f8fb 	bl	8006844 <RCCEx_PLL2_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005652:	e00e      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f001 f9a4 	bl	80069a8 <RCCEx_PLL3_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005664:	e005      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
      break;
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005678:	4b25      	ldr	r3, [pc, #148]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005688:	4313      	orrs	r3, r2
 800568a:	658b      	str	r3, [r1, #88]	; 0x58
 800568c:	e001      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04b      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056a8:	d030      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80056aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ae:	d82a      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056b4:	d02e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80056b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056ba:	d824      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c0:	d018      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80056c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c6:	d81e      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80056cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056d0:	d007      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80056d2:	e018      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	4a0d      	ldr	r2, [pc, #52]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056e0:	e019      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 f8ab 	bl	8006844 <RCCEx_PLL2_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80056f2:	e010      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 f954 	bl	80069a8 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005704:	e007      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
      break;
 800570a:	e004      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800570c:	bf00      	nop
 800570e:	e002      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005710:	58024400 	.word	0x58024400
      break;
 8005714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800571c:	4b99      	ldr	r3, [pc, #612]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800572a:	4996      	ldr	r1, [pc, #600]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800572c:	4313      	orrs	r3, r2
 800572e:	658b      	str	r3, [r1, #88]	; 0x58
 8005730:	e001      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d032      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005746:	2b30      	cmp	r3, #48	; 0x30
 8005748:	d01c      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800574a:	2b30      	cmp	r3, #48	; 0x30
 800574c:	d817      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800574e:	2b20      	cmp	r3, #32
 8005750:	d00c      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005752:	2b20      	cmp	r3, #32
 8005754:	d813      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800575a:	2b10      	cmp	r3, #16
 800575c:	d10f      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575e:	4b89      	ldr	r3, [pc, #548]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4a88      	ldr	r2, [pc, #544]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800576a:	e00e      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	2102      	movs	r1, #2
 8005772:	4618      	mov	r0, r3
 8005774:	f001 f866 	bl	8006844 <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
      break;
 8005782:	e002      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005790:	4b7c      	ldr	r3, [pc, #496]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	4979      	ldr	r1, [pc, #484]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057a2:	e001      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d047      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057bc:	d030      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c2:	d82a      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057c8:	d02c      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80057ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ce:	d824      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d4:	d018      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057da:	d81e      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e4:	d007      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80057e6:	e018      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4b66      	ldr	r3, [pc, #408]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a65      	ldr	r2, [pc, #404]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80057f4:	e017      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3304      	adds	r3, #4
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f821 	bl	8006844 <RCCEx_PLL2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005806:	e00e      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3324      	adds	r3, #36	; 0x24
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f8ca 	bl	80069a8 <RCCEx_PLL3_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005818:	e005      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
      break;
 800581e:	e002      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800582c:	4b55      	ldr	r3, [pc, #340]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005838:	4952      	ldr	r1, [pc, #328]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800583a:	4313      	orrs	r3, r2
 800583c:	650b      	str	r3, [r1, #80]	; 0x50
 800583e:	e001      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d049      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005858:	d02e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800585a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800585e:	d828      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005864:	d02a      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800586a:	d822      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800586c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005870:	d026      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005872:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005876:	d81c      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800587c:	d010      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800587e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005882:	d816      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01d      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d111      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2101      	movs	r1, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f000 ffd5 	bl	8006844 <RCCEx_PLL2_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800589e:	e012      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	2101      	movs	r1, #1
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f87e 	bl	80069a8 <RCCEx_PLL3_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80058b0:	e009      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	e006      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058b8:	bf00      	nop
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058cc:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d8:	492a      	ldr	r1, [pc, #168]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	650b      	str	r3, [r1, #80]	; 0x50
 80058de:	e001      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d04d      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058fa:	d02e      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80058fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005900:	d828      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005906:	d02a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d822      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800590e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005912:	d026      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005914:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005918:	d81c      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591e:	d010      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005924:	d816      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01d      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800592a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800592e:	d111      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	2101      	movs	r1, #1
 8005936:	4618      	mov	r0, r3
 8005938:	f000 ff84 	bl	8006844 <RCCEx_PLL2_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005940:	e012      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3324      	adds	r3, #36	; 0x24
 8005946:	2101      	movs	r1, #1
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f82d 	bl	80069a8 <RCCEx_PLL3_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005952:	e009      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]
      break;
 8005958:	e006      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800595a:	bf00      	nop
 800595c:	e004      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800595e:	bf00      	nop
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10c      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800597c:	4901      	ldr	r1, [pc, #4]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800597e:	4313      	orrs	r3, r2
 8005980:	658b      	str	r3, [r1, #88]	; 0x58
 8005982:	e003      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a0:	d00e      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80059a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a6:	d814      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d015      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80059ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b0:	d10f      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b2:	4baf      	ldr	r3, [pc, #700]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4aae      	ldr	r2, [pc, #696]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80059be:	e00c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 ff3c 	bl	8006844 <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80059d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059e0:	4ba3      	ldr	r3, [pc, #652]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ec:	49a0      	ldr	r1, [pc, #640]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	650b      	str	r3, [r1, #80]	; 0x50
 80059f2:	e001      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d032      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d81b      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a4b 	.word	0x08005a4b
 8005a18:	08005a25 	.word	0x08005a25
 8005a1c:	08005a33 	.word	0x08005a33
 8005a20:	08005a4b 	.word	0x08005a4b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a24:	4b92      	ldr	r3, [pc, #584]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4a91      	ldr	r2, [pc, #580]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a30:	e00c      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2102      	movs	r1, #2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 ff03 	bl	8006844 <RCCEx_PLL2_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a42:	e003      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
      break;
 8005a48:	e000      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a52:	4b87      	ldr	r3, [pc, #540]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a56:	f023 0203 	bic.w	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4984      	ldr	r1, [pc, #528]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a64:	e001      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
 8005a68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8086 	beq.w	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a78:	4b7e      	ldr	r3, [pc, #504]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7d      	ldr	r2, [pc, #500]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a84:	f7fb fdd8 	bl	8001638 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a8a:	e009      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8c:	f7fb fdd4 	bl	8001638 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d902      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	75fb      	strb	r3, [r7, #23]
        break;
 8005a9e:	e005      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aa0:	4b74      	ldr	r3, [pc, #464]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ef      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d166      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ab2:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005abc:	4053      	eors	r3, r2
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac6:	4b6a      	ldr	r3, [pc, #424]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ace:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad0:	4b67      	ldr	r3, [pc, #412]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad4:	4a66      	ldr	r2, [pc, #408]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ada:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005adc:	4b64      	ldr	r3, [pc, #400]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	4a63      	ldr	r2, [pc, #396]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ae8:	4a61      	ldr	r2, [pc, #388]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af8:	d115      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fb fd9d 	bl	8001638 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b00:	e00b      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b02:	f7fb fd99 	bl	8001638 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d902      	bls.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	75fb      	strb	r3, [r7, #23]
            break;
 8005b18:	e005      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b1a:	4b55      	ldr	r3, [pc, #340]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ed      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d126      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3a:	d10d      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005b3c:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b4a:	0919      	lsrs	r1, r3, #4
 8005b4c:	4b4a      	ldr	r3, [pc, #296]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005b4e:	400b      	ands	r3, r1
 8005b50:	4947      	ldr	r1, [pc, #284]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	610b      	str	r3, [r1, #16]
 8005b56:	e005      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005b58:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	4a44      	ldr	r2, [pc, #272]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b62:	6113      	str	r3, [r2, #16]
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b72:	493f      	ldr	r1, [pc, #252]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	670b      	str	r3, [r1, #112]	; 0x70
 8005b78:	e004      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	75bb      	strb	r3, [r7, #22]
 8005b7e:	e001      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8085 	beq.w	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b96:	2b28      	cmp	r3, #40	; 0x28
 8005b98:	d866      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005c7d 	.word	0x08005c7d
 8005ba4:	08005c69 	.word	0x08005c69
 8005ba8:	08005c69 	.word	0x08005c69
 8005bac:	08005c69 	.word	0x08005c69
 8005bb0:	08005c69 	.word	0x08005c69
 8005bb4:	08005c69 	.word	0x08005c69
 8005bb8:	08005c69 	.word	0x08005c69
 8005bbc:	08005c69 	.word	0x08005c69
 8005bc0:	08005c45 	.word	0x08005c45
 8005bc4:	08005c69 	.word	0x08005c69
 8005bc8:	08005c69 	.word	0x08005c69
 8005bcc:	08005c69 	.word	0x08005c69
 8005bd0:	08005c69 	.word	0x08005c69
 8005bd4:	08005c69 	.word	0x08005c69
 8005bd8:	08005c69 	.word	0x08005c69
 8005bdc:	08005c69 	.word	0x08005c69
 8005be0:	08005c57 	.word	0x08005c57
 8005be4:	08005c69 	.word	0x08005c69
 8005be8:	08005c69 	.word	0x08005c69
 8005bec:	08005c69 	.word	0x08005c69
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c69 	.word	0x08005c69
 8005bf8:	08005c69 	.word	0x08005c69
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005c7d 	.word	0x08005c7d
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c69 	.word	0x08005c69
 8005c0c:	08005c69 	.word	0x08005c69
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005c69 	.word	0x08005c69
 8005c20:	08005c7d 	.word	0x08005c7d
 8005c24:	08005c69 	.word	0x08005c69
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c69 	.word	0x08005c69
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c69 	.word	0x08005c69
 8005c38:	08005c69 	.word	0x08005c69
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	08005c7d 	.word	0x08005c7d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fdfa 	bl	8006844 <RCCEx_PLL2_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c54:	e013      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3324      	adds	r3, #36	; 0x24
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fea3 	bl	80069a8 <RCCEx_PLL3_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c66:	e00a      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	e007      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c6e:	bf00      	nop
 8005c70:	58024400 	.word	0x58024400
 8005c74:	58024800 	.word	0x58024800
 8005c78:	00ffffcf 	.word	0x00ffffcf
      break;
 8005c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c84:	4b96      	ldr	r3, [pc, #600]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c90:	4993      	ldr	r1, [pc, #588]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	654b      	str	r3, [r1, #84]	; 0x54
 8005c96:	e001      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d038      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	d821      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cfb 	.word	0x08005cfb
 8005cbc:	08005cd1 	.word	0x08005cd1
 8005cc0:	08005ce3 	.word	0x08005ce3
 8005cc4:	08005cfb 	.word	0x08005cfb
 8005cc8:	08005cfb 	.word	0x08005cfb
 8005ccc:	08005cfb 	.word	0x08005cfb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fdb4 	bl	8006844 <RCCEx_PLL2_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ce0:	e00c      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fe5d 	bl	80069a8 <RCCEx_PLL3_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf8:	e000      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d02:	4b77      	ldr	r3, [pc, #476]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f023 0207 	bic.w	r2, r3, #7
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0e:	4974      	ldr	r1, [pc, #464]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	654b      	str	r3, [r1, #84]	; 0x54
 8005d14:	e001      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d03a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d821      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d7b 	.word	0x08005d7b
 8005d3c:	08005d51 	.word	0x08005d51
 8005d40:	08005d63 	.word	0x08005d63
 8005d44:	08005d7b 	.word	0x08005d7b
 8005d48:	08005d7b 	.word	0x08005d7b
 8005d4c:	08005d7b 	.word	0x08005d7b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	2101      	movs	r1, #1
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fd74 	bl	8006844 <RCCEx_PLL2_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d60:	e00c      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3324      	adds	r3, #36	; 0x24
 8005d66:	2101      	movs	r1, #1
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fe1d 	bl	80069a8 <RCCEx_PLL3_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d82:	4b57      	ldr	r3, [pc, #348]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f023 0207 	bic.w	r2, r3, #7
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d90:	4953      	ldr	r1, [pc, #332]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	658b      	str	r3, [r1, #88]	; 0x58
 8005d96:	e001      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d04b      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db2:	d02e      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db8:	d828      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbe:	d02a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d822      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dca:	d026      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005dcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dd0:	d81c      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ddc:	d816      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01d      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de6:	d111      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fd28 	bl	8006844 <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005df8:	e012      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	2102      	movs	r1, #2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fdd1 	bl	80069a8 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e0a:	e009      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e12:	bf00      	nop
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e26:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e34:	492a      	ldr	r1, [pc, #168]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	654b      	str	r3, [r1, #84]	; 0x54
 8005e3a:	e001      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d04d      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e56:	d02e      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005e58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e5c:	d828      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e62:	d02a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e68:	d822      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e6e:	d026      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e74:	d81c      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7a:	d010      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e80:	d816      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8a:	d111      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fcd6 	bl	8006844 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005e9c:	e012      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fd7f 	bl	80069a8 <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005eae:	e009      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ece:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed8:	4901      	ldr	r1, [pc, #4]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	658b      	str	r3, [r1, #88]	; 0x58
 8005ede:	e003      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d04b      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005efa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005efe:	d02e      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005f00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f04:	d828      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0a:	d02a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f10:	d822      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f16:	d026      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005f18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f1c:	d81c      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f22:	d010      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f28:	d816      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01d      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f32:	d111      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fc82 	bl	8006844 <RCCEx_PLL2_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f44:	e012      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3324      	adds	r3, #36	; 0x24
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fd2b 	bl	80069a8 <RCCEx_PLL3_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f56:	e009      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5c:	e006      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e004      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f72:	4b9d      	ldr	r3, [pc, #628]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f80:	4999      	ldr	r1, [pc, #612]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	658b      	str	r3, [r1, #88]	; 0x58
 8005f86:	e001      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d10a      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3324      	adds	r3, #36	; 0x24
 8005fa8:	2102      	movs	r1, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fcfc 	bl	80069a8 <RCCEx_PLL3_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fba:	4b8b      	ldr	r3, [pc, #556]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	4987      	ldr	r1, [pc, #540]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe4:	d10a      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3324      	adds	r3, #36	; 0x24
 8005fea:	2102      	movs	r1, #2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fcdb 	bl	80069a8 <RCCEx_PLL3_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ffc:	4b7a      	ldr	r3, [pc, #488]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800600a:	4977      	ldr	r1, [pc, #476]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800600c:	4313      	orrs	r3, r2
 800600e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d034      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006026:	d01d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800602c:	d817      	bhi.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006036:	d009      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006038:	e011      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3304      	adds	r3, #4
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fbff 	bl	8006844 <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800604a:	e00c      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3324      	adds	r3, #36	; 0x24
 8006050:	2102      	movs	r1, #2
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fca8 	bl	80069a8 <RCCEx_PLL3_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800605c:	e003      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
      break;
 8006062:	e000      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800606c:	4b5e      	ldr	r3, [pc, #376]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800607a:	495b      	ldr	r1, [pc, #364]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800607c:	4313      	orrs	r3, r2
 800607e:	658b      	str	r3, [r1, #88]	; 0x58
 8006080:	e001      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d033      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800609c:	d01c      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800609e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060a2:	d816      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80060a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a8:	d003      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80060aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ae:	d007      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80060b0:	e00f      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b2:	4b4d      	ldr	r3, [pc, #308]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	4a4c      	ldr	r2, [pc, #304]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80060be:	e00c      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3324      	adds	r3, #36	; 0x24
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fc6e 	bl	80069a8 <RCCEx_PLL3_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	75fb      	strb	r3, [r7, #23]
      break;
 80060d6:	e000      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80060d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e0:	4b41      	ldr	r3, [pc, #260]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ee:	493e      	ldr	r1, [pc, #248]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	654b      	str	r3, [r1, #84]	; 0x54
 80060f4:	e001      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d029      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800610e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006112:	d007      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006116:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	4a33      	ldr	r2, [pc, #204]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800611c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006122:	e00b      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	2102      	movs	r1, #2
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fb8a 	bl	8006844 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006134:	e002      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
      break;
 800613a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800613c:	7dfb      	ldrb	r3, [r7, #23]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006142:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	4926      	ldr	r1, [pc, #152]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006150:	4313      	orrs	r3, r2
 8006152:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006154:	e001      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2102      	movs	r1, #2
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fc1b 	bl	80069a8 <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d033      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006190:	d017      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006196:	d811      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d013      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800619e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a2:	d80b      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80061a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ac:	d106      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ae:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80061ba:	e007      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
      break;
 80061c0:	e004      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061c2:	bf00      	nop
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10c      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061de:	4902      	ldr	r1, [pc, #8]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	654b      	str	r3, [r1, #84]	; 0x54
 80061e4:	e004      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
 80061ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061fc:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	492e      	ldr	r1, [pc, #184]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800620a:	4313      	orrs	r3, r2
 800620c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800621a:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006228:	4926      	ldr	r1, [pc, #152]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800622a:	4313      	orrs	r3, r2
 800622c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800623a:	4b22      	ldr	r3, [pc, #136]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800623c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006246:	491f      	ldr	r1, [pc, #124]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006248:	4313      	orrs	r3, r2
 800624a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00d      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800625e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006262:	6113      	str	r3, [r2, #16]
 8006264:	4b17      	ldr	r3, [pc, #92]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800626e:	4915      	ldr	r1, [pc, #84]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006270:	4313      	orrs	r3, r2
 8006272:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	da08      	bge.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800627c:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800627e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006280:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	490e      	ldr	r1, [pc, #56]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800628a:	4313      	orrs	r3, r2
 800628c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	4906      	ldr	r1, [pc, #24]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80062ae:	7dbb      	ldrb	r3, [r7, #22]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	58024400 	.word	0x58024400

080062c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062cc:	f7ff f85a 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4904      	ldr	r1, [pc, #16]	; (80062f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	58024400 	.word	0x58024400
 80062f0:	08008cfc 	.word	0x08008cfc

080062f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b089      	sub	sp, #36	; 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062fc:	4ba1      	ldr	r3, [pc, #644]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006306:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	0b1b      	lsrs	r3, r3, #12
 800630c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006310:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006312:	4b9c      	ldr	r3, [pc, #624]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800631e:	4b99      	ldr	r3, [pc, #612]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	08db      	lsrs	r3, r3, #3
 8006324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8111 	beq.w	8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b02      	cmp	r3, #2
 8006346:	f000 8083 	beq.w	8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b02      	cmp	r3, #2
 800634e:	f200 80a1 	bhi.w	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d056      	beq.n	800640c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800635e:	e099      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006360:	4b88      	ldr	r3, [pc, #544]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d02d      	beq.n	80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800636c:	4b85      	ldr	r3, [pc, #532]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	4a84      	ldr	r2, [pc, #528]	; (8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
 800637c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	ee07 3a90 	vmov	s15, r3
 8006384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006396:	4b7b      	ldr	r3, [pc, #492]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063c6:	e087      	b.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006590 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063da:	4b6a      	ldr	r3, [pc, #424]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800640a:	e065      	b.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800641a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641e:	4b59      	ldr	r3, [pc, #356]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006432:	eddf 5a56 	vldr	s11, [pc, #344]	; 800658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800643a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800644e:	e043      	b.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800645e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006462:	4b48      	ldr	r3, [pc, #288]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006472:	ed97 6a03 	vldr	s12, [r7, #12]
 8006476:	eddf 5a45 	vldr	s11, [pc, #276]	; 800658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800647a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006492:	e021      	b.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	ee07 3a90 	vmov	s15, r3
 800649a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a6:	4b37      	ldr	r3, [pc, #220]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80064d8:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	0a5b      	lsrs	r3, r3, #9
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fe:	ee17 2a90 	vmov	r2, s15
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006506:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800651c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006520:	edd7 6a07 	vldr	s13, [r7, #28]
 8006524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800652c:	ee17 2a90 	vmov	r2, s15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006534:	4b13      	ldr	r3, [pc, #76]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	0e1b      	lsrs	r3, r3, #24
 800653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800654a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800654e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655a:	ee17 2a90 	vmov	r2, s15
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006562:	e008      	b.n	8006576 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	609a      	str	r2, [r3, #8]
}
 8006576:	bf00      	nop
 8006578:	3724      	adds	r7, #36	; 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400
 8006588:	03d09000 	.word	0x03d09000
 800658c:	46000000 	.word	0x46000000
 8006590:	4c742400 	.word	0x4c742400
 8006594:	4a742400 	.word	0x4a742400
 8006598:	4af42400 	.word	0x4af42400

0800659c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800659c:	b480      	push	{r7}
 800659e:	b089      	sub	sp, #36	; 0x24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065a4:	4ba1      	ldr	r3, [pc, #644]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80065ae:	4b9f      	ldr	r3, [pc, #636]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	0d1b      	lsrs	r3, r3, #20
 80065b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80065ba:	4b9c      	ldr	r3, [pc, #624]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80065c6:	4b99      	ldr	r3, [pc, #612]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ca:	08db      	lsrs	r3, r3, #3
 80065cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8111 	beq.w	800680c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	f000 8083 	beq.w	80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	f200 80a1 	bhi.w	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d056      	beq.n	80066b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006606:	e099      	b.n	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006608:	4b88      	ldr	r3, [pc, #544]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d02d      	beq.n	8006670 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006614:	4b85      	ldr	r3, [pc, #532]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	4a84      	ldr	r2, [pc, #528]	; (8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
 8006624:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663e:	4b7b      	ldr	r3, [pc, #492]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800666e:	e087      	b.n	8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800667e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006682:	4b6a      	ldr	r3, [pc, #424]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006692:	ed97 6a03 	vldr	s12, [r7, #12]
 8006696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800669a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066b2:	e065      	b.n	8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800683c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c6:	4b59      	ldr	r3, [pc, #356]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066f6:	e043      	b.n	8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b48      	ldr	r3, [pc, #288]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a03 	vldr	s12, [r7, #12]
 800671e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800673a:	e021      	b.n	8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800683c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b37      	ldr	r3, [pc, #220]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800677e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006780:	4b2a      	ldr	r3, [pc, #168]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	0a5b      	lsrs	r3, r3, #9
 8006786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800679a:	edd7 6a07 	vldr	s13, [r7, #28]
 800679e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a6:	ee17 2a90 	vmov	r2, s15
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80067ae:	4b1f      	ldr	r3, [pc, #124]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d4:	ee17 2a90 	vmov	r2, s15
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80067dc:	4b13      	ldr	r3, [pc, #76]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006802:	ee17 2a90 	vmov	r2, s15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800680a:	e008      	b.n	800681e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
}
 800681e:	bf00      	nop
 8006820:	3724      	adds	r7, #36	; 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	58024400 	.word	0x58024400
 8006830:	03d09000 	.word	0x03d09000
 8006834:	46000000 	.word	0x46000000
 8006838:	4c742400 	.word	0x4c742400
 800683c:	4a742400 	.word	0x4a742400
 8006840:	4af42400 	.word	0x4af42400

08006844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006852:	4b53      	ldr	r3, [pc, #332]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d101      	bne.n	8006862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e099      	b.n	8006996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006862:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a4e      	ldr	r2, [pc, #312]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800686c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686e:	f7fa fee3 	bl	8001638 <HAL_GetTick>
 8006872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006874:	e008      	b.n	8006888 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006876:	f7fa fedf 	bl	8001638 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e086      	b.n	8006996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006888:	4b45      	ldr	r3, [pc, #276]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f0      	bne.n	8006876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006894:	4b42      	ldr	r3, [pc, #264]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	493f      	ldr	r1, [pc, #252]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	628b      	str	r3, [r1, #40]	; 0x28
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	025b      	lsls	r3, r3, #9
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068d8:	4931      	ldr	r1, [pc, #196]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068de:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	492d      	ldr	r1, [pc, #180]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068f0:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	f023 0220 	bic.w	r2, r3, #32
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	4928      	ldr	r1, [pc, #160]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006902:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006908:	f023 0310 	bic.w	r3, r3, #16
 800690c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006912:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <RCCEx_PLL2_Config+0x160>)
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	69d2      	ldr	r2, [r2, #28]
 800691a:	00d2      	lsls	r2, r2, #3
 800691c:	4920      	ldr	r1, [pc, #128]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800691e:	4313      	orrs	r3, r2
 8006920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006922:	4b1f      	ldr	r3, [pc, #124]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006928:	f043 0310 	orr.w	r3, r3, #16
 800692c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800693a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800693e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006940:	e00f      	b.n	8006962 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006948:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	4a14      	ldr	r2, [pc, #80]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800694e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006954:	e005      	b.n	8006962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800695c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a0e      	ldr	r2, [pc, #56]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 8006968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800696c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800696e:	f7fa fe63 	bl	8001638 <HAL_GetTick>
 8006972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006974:	e008      	b.n	8006988 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006976:	f7fa fe5f 	bl	8001638 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e006      	b.n	8006996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <RCCEx_PLL2_Config+0x15c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	58024400 	.word	0x58024400
 80069a4:	ffff0007 	.word	0xffff0007

080069a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069b6:	4b53      	ldr	r3, [pc, #332]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d101      	bne.n	80069c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e099      	b.n	8006afa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069c6:	4b4f      	ldr	r3, [pc, #316]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a4e      	ldr	r2, [pc, #312]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d2:	f7fa fe31 	bl	8001638 <HAL_GetTick>
 80069d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069d8:	e008      	b.n	80069ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069da:	f7fa fe2d 	bl	8001638 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e086      	b.n	8006afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069ec:	4b45      	ldr	r3, [pc, #276]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f0      	bne.n	80069da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069f8:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	051b      	lsls	r3, r3, #20
 8006a06:	493f      	ldr	r1, [pc, #252]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	025b      	lsls	r3, r3, #9
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	061b      	lsls	r3, r3, #24
 8006a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a3c:	4931      	ldr	r1, [pc, #196]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a42:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	492d      	ldr	r1, [pc, #180]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a54:	4b2b      	ldr	r3, [pc, #172]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	4928      	ldr	r1, [pc, #160]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a66:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	4a26      	ldr	r2, [pc, #152]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a72:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <RCCEx_PLL3_Config+0x160>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	69d2      	ldr	r2, [r2, #28]
 8006a7e:	00d2      	lsls	r2, r2, #3
 8006a80:	4920      	ldr	r1, [pc, #128]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a86:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a98:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4a19      	ldr	r2, [pc, #100]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006aa4:	e00f      	b.n	8006ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d106      	bne.n	8006aba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006aac:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ab8:	e005      	b.n	8006ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a0e      	ldr	r2, [pc, #56]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad2:	f7fa fdb1 	bl	8001638 <HAL_GetTick>
 8006ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ad8:	e008      	b.n	8006aec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ada:	f7fa fdad 	bl	8001638 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e006      	b.n	8006afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <RCCEx_PLL3_Config+0x15c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0f0      	beq.n	8006ada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
 8006b08:	ffff0007 	.word	0xffff0007

08006b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e042      	b.n	8006ba4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fa fb35 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2224      	movs	r2, #36	; 0x24
 8006b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8c2 	bl	8006cd8 <UART_SetConfig>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e022      	b.n	8006ba4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fe1e 	bl	80077a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fea5 	bl	80078ec <UART_CheckIdleState>
 8006ba2:	4603      	mov	r3, r0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	f040 8083 	bne.w	8006cce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_UART_Transmit+0x28>
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e07b      	b.n	8006cd0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_UART_Transmit+0x3a>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e074      	b.n	8006cd0 <HAL_UART_Transmit+0x124>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2221      	movs	r2, #33	; 0x21
 8006bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bfe:	f7fa fd1b 	bl	8001638 <HAL_GetTick>
 8006c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1c:	d108      	bne.n	8006c30 <HAL_UART_Transmit+0x84>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	e003      	b.n	8006c38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006c40:	e02c      	b.n	8006c9c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2180      	movs	r1, #128	; 0x80
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fe98 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e039      	b.n	8006cd0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	3302      	adds	r3, #2
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e007      	b.n	8006c8a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	3301      	adds	r3, #1
 8006c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1cc      	bne.n	8006c42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2140      	movs	r1, #64	; 0x40
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fe65 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e006      	b.n	8006cd0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
  }
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cdc:	b092      	sub	sp, #72	; 0x48
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4bbe      	ldr	r3, [pc, #760]	; (8007000 <UART_SetConfig+0x328>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d10:	430b      	orrs	r3, r1
 8006d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4ab3      	ldr	r2, [pc, #716]	; (8007004 <UART_SetConfig+0x32c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d40:	4313      	orrs	r3, r2
 8006d42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	4baf      	ldr	r3, [pc, #700]	; (8007008 <UART_SetConfig+0x330>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f023 010f 	bic.w	r1, r3, #15
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4aa6      	ldr	r2, [pc, #664]	; (800700c <UART_SetConfig+0x334>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d177      	bne.n	8006e68 <UART_SetConfig+0x190>
 8006d78:	4ba5      	ldr	r3, [pc, #660]	; (8007010 <UART_SetConfig+0x338>)
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d80:	2b28      	cmp	r3, #40	; 0x28
 8006d82:	d86d      	bhi.n	8006e60 <UART_SetConfig+0x188>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0xb4>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006e31 	.word	0x08006e31
 8006d90:	08006e61 	.word	0x08006e61
 8006d94:	08006e61 	.word	0x08006e61
 8006d98:	08006e61 	.word	0x08006e61
 8006d9c:	08006e61 	.word	0x08006e61
 8006da0:	08006e61 	.word	0x08006e61
 8006da4:	08006e61 	.word	0x08006e61
 8006da8:	08006e61 	.word	0x08006e61
 8006dac:	08006e39 	.word	0x08006e39
 8006db0:	08006e61 	.word	0x08006e61
 8006db4:	08006e61 	.word	0x08006e61
 8006db8:	08006e61 	.word	0x08006e61
 8006dbc:	08006e61 	.word	0x08006e61
 8006dc0:	08006e61 	.word	0x08006e61
 8006dc4:	08006e61 	.word	0x08006e61
 8006dc8:	08006e61 	.word	0x08006e61
 8006dcc:	08006e41 	.word	0x08006e41
 8006dd0:	08006e61 	.word	0x08006e61
 8006dd4:	08006e61 	.word	0x08006e61
 8006dd8:	08006e61 	.word	0x08006e61
 8006ddc:	08006e61 	.word	0x08006e61
 8006de0:	08006e61 	.word	0x08006e61
 8006de4:	08006e61 	.word	0x08006e61
 8006de8:	08006e61 	.word	0x08006e61
 8006dec:	08006e49 	.word	0x08006e49
 8006df0:	08006e61 	.word	0x08006e61
 8006df4:	08006e61 	.word	0x08006e61
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006e61 	.word	0x08006e61
 8006e00:	08006e61 	.word	0x08006e61
 8006e04:	08006e61 	.word	0x08006e61
 8006e08:	08006e61 	.word	0x08006e61
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e61 	.word	0x08006e61
 8006e14:	08006e61 	.word	0x08006e61
 8006e18:	08006e61 	.word	0x08006e61
 8006e1c:	08006e61 	.word	0x08006e61
 8006e20:	08006e61 	.word	0x08006e61
 8006e24:	08006e61 	.word	0x08006e61
 8006e28:	08006e61 	.word	0x08006e61
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e222      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e21e      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e21a      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e216      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e50:	2320      	movs	r3, #32
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e212      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5e:	e20e      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e66:	e20a      	b.n	800727e <UART_SetConfig+0x5a6>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a69      	ldr	r2, [pc, #420]	; (8007014 <UART_SetConfig+0x33c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d130      	bne.n	8006ed4 <UART_SetConfig+0x1fc>
 8006e72:	4b67      	ldr	r3, [pc, #412]	; (8007010 <UART_SetConfig+0x338>)
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d826      	bhi.n	8006ecc <UART_SetConfig+0x1f4>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x1ac>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e1ec      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e1e8      	b.n	800727e <UART_SetConfig+0x5a6>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e1e4      	b.n	800727e <UART_SetConfig+0x5a6>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e1e0      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e1dc      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eca:	e1d8      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed2:	e1d4      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a4f      	ldr	r2, [pc, #316]	; (8007018 <UART_SetConfig+0x340>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d130      	bne.n	8006f40 <UART_SetConfig+0x268>
 8006ede:	4b4c      	ldr	r3, [pc, #304]	; (8007010 <UART_SetConfig+0x338>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d826      	bhi.n	8006f38 <UART_SetConfig+0x260>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x218>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0e:	e1b6      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f16:	e1b2      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1e:	e1ae      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f26:	e1aa      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2e:	e1a6      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f36:	e1a2      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3e:	e19e      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a35      	ldr	r2, [pc, #212]	; (800701c <UART_SetConfig+0x344>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d130      	bne.n	8006fac <UART_SetConfig+0x2d4>
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <UART_SetConfig+0x338>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d826      	bhi.n	8006fa4 <UART_SetConfig+0x2cc>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x284>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006f7d 	.word	0x08006f7d
 8006f64:	08006f85 	.word	0x08006f85
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006f95 	.word	0x08006f95
 8006f70:	08006f9d 	.word	0x08006f9d
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e180      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e17c      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f84:	2308      	movs	r3, #8
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e178      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e174      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f94:	2320      	movs	r3, #32
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9a:	e170      	b.n	800727e <UART_SetConfig+0x5a6>
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa2:	e16c      	b.n	800727e <UART_SetConfig+0x5a6>
 8006fa4:	2380      	movs	r3, #128	; 0x80
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006faa:	e168      	b.n	800727e <UART_SetConfig+0x5a6>
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <UART_SetConfig+0x348>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d142      	bne.n	800703c <UART_SetConfig+0x364>
 8006fb6:	4b16      	ldr	r3, [pc, #88]	; (8007010 <UART_SetConfig+0x338>)
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	d838      	bhi.n	8007034 <UART_SetConfig+0x35c>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <UART_SetConfig+0x2f0>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fe1 	.word	0x08006fe1
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007025 	.word	0x08007025
 8006fdc:	0800702d 	.word	0x0800702d
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e14a      	b.n	800727e <UART_SetConfig+0x5a6>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e146      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e142      	b.n	800727e <UART_SetConfig+0x5a6>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e13e      	b.n	800727e <UART_SetConfig+0x5a6>
 8007000:	cfff69f3 	.word	0xcfff69f3
 8007004:	58000c00 	.word	0x58000c00
 8007008:	11fff4ff 	.word	0x11fff4ff
 800700c:	40011000 	.word	0x40011000
 8007010:	58024400 	.word	0x58024400
 8007014:	40004400 	.word	0x40004400
 8007018:	40004800 	.word	0x40004800
 800701c:	40004c00 	.word	0x40004c00
 8007020:	40005000 	.word	0x40005000
 8007024:	2320      	movs	r3, #32
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e128      	b.n	800727e <UART_SetConfig+0x5a6>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e124      	b.n	800727e <UART_SetConfig+0x5a6>
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e120      	b.n	800727e <UART_SetConfig+0x5a6>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4acb      	ldr	r2, [pc, #812]	; (8007370 <UART_SetConfig+0x698>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d176      	bne.n	8007134 <UART_SetConfig+0x45c>
 8007046:	4bcb      	ldr	r3, [pc, #812]	; (8007374 <UART_SetConfig+0x69c>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800704e:	2b28      	cmp	r3, #40	; 0x28
 8007050:	d86c      	bhi.n	800712c <UART_SetConfig+0x454>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x380>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	080070fd 	.word	0x080070fd
 800705c:	0800712d 	.word	0x0800712d
 8007060:	0800712d 	.word	0x0800712d
 8007064:	0800712d 	.word	0x0800712d
 8007068:	0800712d 	.word	0x0800712d
 800706c:	0800712d 	.word	0x0800712d
 8007070:	0800712d 	.word	0x0800712d
 8007074:	0800712d 	.word	0x0800712d
 8007078:	08007105 	.word	0x08007105
 800707c:	0800712d 	.word	0x0800712d
 8007080:	0800712d 	.word	0x0800712d
 8007084:	0800712d 	.word	0x0800712d
 8007088:	0800712d 	.word	0x0800712d
 800708c:	0800712d 	.word	0x0800712d
 8007090:	0800712d 	.word	0x0800712d
 8007094:	0800712d 	.word	0x0800712d
 8007098:	0800710d 	.word	0x0800710d
 800709c:	0800712d 	.word	0x0800712d
 80070a0:	0800712d 	.word	0x0800712d
 80070a4:	0800712d 	.word	0x0800712d
 80070a8:	0800712d 	.word	0x0800712d
 80070ac:	0800712d 	.word	0x0800712d
 80070b0:	0800712d 	.word	0x0800712d
 80070b4:	0800712d 	.word	0x0800712d
 80070b8:	08007115 	.word	0x08007115
 80070bc:	0800712d 	.word	0x0800712d
 80070c0:	0800712d 	.word	0x0800712d
 80070c4:	0800712d 	.word	0x0800712d
 80070c8:	0800712d 	.word	0x0800712d
 80070cc:	0800712d 	.word	0x0800712d
 80070d0:	0800712d 	.word	0x0800712d
 80070d4:	0800712d 	.word	0x0800712d
 80070d8:	0800711d 	.word	0x0800711d
 80070dc:	0800712d 	.word	0x0800712d
 80070e0:	0800712d 	.word	0x0800712d
 80070e4:	0800712d 	.word	0x0800712d
 80070e8:	0800712d 	.word	0x0800712d
 80070ec:	0800712d 	.word	0x0800712d
 80070f0:	0800712d 	.word	0x0800712d
 80070f4:	0800712d 	.word	0x0800712d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e0bc      	b.n	800727e <UART_SetConfig+0x5a6>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e0b8      	b.n	800727e <UART_SetConfig+0x5a6>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e0b4      	b.n	800727e <UART_SetConfig+0x5a6>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e0b0      	b.n	800727e <UART_SetConfig+0x5a6>
 800711c:	2320      	movs	r3, #32
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007122:	e0ac      	b.n	800727e <UART_SetConfig+0x5a6>
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712a:	e0a8      	b.n	800727e <UART_SetConfig+0x5a6>
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e0a4      	b.n	800727e <UART_SetConfig+0x5a6>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a8f      	ldr	r2, [pc, #572]	; (8007378 <UART_SetConfig+0x6a0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d130      	bne.n	80071a0 <UART_SetConfig+0x4c8>
 800713e:	4b8d      	ldr	r3, [pc, #564]	; (8007374 <UART_SetConfig+0x69c>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b05      	cmp	r3, #5
 8007148:	d826      	bhi.n	8007198 <UART_SetConfig+0x4c0>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x478>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007169 	.word	0x08007169
 8007154:	08007171 	.word	0x08007171
 8007158:	08007179 	.word	0x08007179
 800715c:	08007181 	.word	0x08007181
 8007160:	08007189 	.word	0x08007189
 8007164:	08007191 	.word	0x08007191
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e086      	b.n	800727e <UART_SetConfig+0x5a6>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e082      	b.n	800727e <UART_SetConfig+0x5a6>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e07e      	b.n	800727e <UART_SetConfig+0x5a6>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e07a      	b.n	800727e <UART_SetConfig+0x5a6>
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e076      	b.n	800727e <UART_SetConfig+0x5a6>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e072      	b.n	800727e <UART_SetConfig+0x5a6>
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e06e      	b.n	800727e <UART_SetConfig+0x5a6>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a75      	ldr	r2, [pc, #468]	; (800737c <UART_SetConfig+0x6a4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d130      	bne.n	800720c <UART_SetConfig+0x534>
 80071aa:	4b72      	ldr	r3, [pc, #456]	; (8007374 <UART_SetConfig+0x69c>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d826      	bhi.n	8007204 <UART_SetConfig+0x52c>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x4e4>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071fd 	.word	0x080071fd
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e050      	b.n	800727e <UART_SetConfig+0x5a6>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e04c      	b.n	800727e <UART_SetConfig+0x5a6>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e048      	b.n	800727e <UART_SetConfig+0x5a6>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e044      	b.n	800727e <UART_SetConfig+0x5a6>
 80071f4:	2320      	movs	r3, #32
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fa:	e040      	b.n	800727e <UART_SetConfig+0x5a6>
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007202:	e03c      	b.n	800727e <UART_SetConfig+0x5a6>
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720a:	e038      	b.n	800727e <UART_SetConfig+0x5a6>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a5b      	ldr	r2, [pc, #364]	; (8007380 <UART_SetConfig+0x6a8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d130      	bne.n	8007278 <UART_SetConfig+0x5a0>
 8007216:	4b57      	ldr	r3, [pc, #348]	; (8007374 <UART_SetConfig+0x69c>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b05      	cmp	r3, #5
 8007220:	d826      	bhi.n	8007270 <UART_SetConfig+0x598>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x550>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007241 	.word	0x08007241
 800722c:	08007249 	.word	0x08007249
 8007230:	08007251 	.word	0x08007251
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	08007269 	.word	0x08007269
 8007240:	2302      	movs	r3, #2
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e01a      	b.n	800727e <UART_SetConfig+0x5a6>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e016      	b.n	800727e <UART_SetConfig+0x5a6>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e012      	b.n	800727e <UART_SetConfig+0x5a6>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e00e      	b.n	800727e <UART_SetConfig+0x5a6>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e00a      	b.n	800727e <UART_SetConfig+0x5a6>
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e006      	b.n	800727e <UART_SetConfig+0x5a6>
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e002      	b.n	800727e <UART_SetConfig+0x5a6>
 8007278:	2380      	movs	r3, #128	; 0x80
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3f      	ldr	r2, [pc, #252]	; (8007380 <UART_SetConfig+0x6a8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	f040 80f8 	bne.w	800747a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800728a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800728e:	2b20      	cmp	r3, #32
 8007290:	dc46      	bgt.n	8007320 <UART_SetConfig+0x648>
 8007292:	2b02      	cmp	r3, #2
 8007294:	f2c0 8082 	blt.w	800739c <UART_SetConfig+0x6c4>
 8007298:	3b02      	subs	r3, #2
 800729a:	2b1e      	cmp	r3, #30
 800729c:	d87e      	bhi.n	800739c <UART_SetConfig+0x6c4>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <UART_SetConfig+0x5cc>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	08007327 	.word	0x08007327
 80072a8:	0800739d 	.word	0x0800739d
 80072ac:	0800732f 	.word	0x0800732f
 80072b0:	0800739d 	.word	0x0800739d
 80072b4:	0800739d 	.word	0x0800739d
 80072b8:	0800739d 	.word	0x0800739d
 80072bc:	0800733f 	.word	0x0800733f
 80072c0:	0800739d 	.word	0x0800739d
 80072c4:	0800739d 	.word	0x0800739d
 80072c8:	0800739d 	.word	0x0800739d
 80072cc:	0800739d 	.word	0x0800739d
 80072d0:	0800739d 	.word	0x0800739d
 80072d4:	0800739d 	.word	0x0800739d
 80072d8:	0800739d 	.word	0x0800739d
 80072dc:	0800734f 	.word	0x0800734f
 80072e0:	0800739d 	.word	0x0800739d
 80072e4:	0800739d 	.word	0x0800739d
 80072e8:	0800739d 	.word	0x0800739d
 80072ec:	0800739d 	.word	0x0800739d
 80072f0:	0800739d 	.word	0x0800739d
 80072f4:	0800739d 	.word	0x0800739d
 80072f8:	0800739d 	.word	0x0800739d
 80072fc:	0800739d 	.word	0x0800739d
 8007300:	0800739d 	.word	0x0800739d
 8007304:	0800739d 	.word	0x0800739d
 8007308:	0800739d 	.word	0x0800739d
 800730c:	0800739d 	.word	0x0800739d
 8007310:	0800739d 	.word	0x0800739d
 8007314:	0800739d 	.word	0x0800739d
 8007318:	0800739d 	.word	0x0800739d
 800731c:	0800738f 	.word	0x0800738f
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d037      	beq.n	8007394 <UART_SetConfig+0x6bc>
 8007324:	e03a      	b.n	800739c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007326:	f7fe ffcf 	bl	80062c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800732a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800732c:	e03c      	b.n	80073a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe ffde 	bl	80062f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733c:	e034      	b.n	80073a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800733e:	f107 0318 	add.w	r3, r7, #24
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff f92a 	bl	800659c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800734c:	e02c      	b.n	80073a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <UART_SetConfig+0x69c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800735a:	4b06      	ldr	r3, [pc, #24]	; (8007374 <UART_SetConfig+0x69c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	08db      	lsrs	r3, r3, #3
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	4a07      	ldr	r2, [pc, #28]	; (8007384 <UART_SetConfig+0x6ac>)
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800736c:	e01c      	b.n	80073a8 <UART_SetConfig+0x6d0>
 800736e:	bf00      	nop
 8007370:	40011400 	.word	0x40011400
 8007374:	58024400 	.word	0x58024400
 8007378:	40007800 	.word	0x40007800
 800737c:	40007c00 	.word	0x40007c00
 8007380:	58000c00 	.word	0x58000c00
 8007384:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007388:	4b9d      	ldr	r3, [pc, #628]	; (8007600 <UART_SetConfig+0x928>)
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800738c:	e00c      	b.n	80073a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800738e:	4b9d      	ldr	r3, [pc, #628]	; (8007604 <UART_SetConfig+0x92c>)
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007392:	e009      	b.n	80073a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739a:	e005      	b.n	80073a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 81de 	beq.w	800776c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	4a94      	ldr	r2, [pc, #592]	; (8007608 <UART_SetConfig+0x930>)
 80073b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4413      	add	r3, r2
 80073ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d305      	bcc.n	80073e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073dc:	429a      	cmp	r2, r3
 80073de:	d903      	bls.n	80073e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073e6:	e1c1      	b.n	800776c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	2200      	movs	r2, #0
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	60fa      	str	r2, [r7, #12]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	4a84      	ldr	r2, [pc, #528]	; (8007608 <UART_SetConfig+0x930>)
 80073f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2200      	movs	r2, #0
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007406:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800740a:	f7f8 ffb9 	bl	8000380 <__aeabi_uldivmod>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	020b      	lsls	r3, r1, #8
 8007420:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007424:	0202      	lsls	r2, r0, #8
 8007426:	6979      	ldr	r1, [r7, #20]
 8007428:	6849      	ldr	r1, [r1, #4]
 800742a:	0849      	lsrs	r1, r1, #1
 800742c:	2000      	movs	r0, #0
 800742e:	460c      	mov	r4, r1
 8007430:	4605      	mov	r5, r0
 8007432:	eb12 0804 	adds.w	r8, r2, r4
 8007436:	eb43 0905 	adc.w	r9, r3, r5
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	469a      	mov	sl, r3
 8007442:	4693      	mov	fp, r2
 8007444:	4652      	mov	r2, sl
 8007446:	465b      	mov	r3, fp
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f8 ff98 	bl	8000380 <__aeabi_uldivmod>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4613      	mov	r3, r2
 8007456:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745e:	d308      	bcc.n	8007472 <UART_SetConfig+0x79a>
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007466:	d204      	bcs.n	8007472 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800746e:	60da      	str	r2, [r3, #12]
 8007470:	e17c      	b.n	800776c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007478:	e178      	b.n	800776c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007482:	f040 80c5 	bne.w	8007610 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007486:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800748a:	2b20      	cmp	r3, #32
 800748c:	dc48      	bgt.n	8007520 <UART_SetConfig+0x848>
 800748e:	2b00      	cmp	r3, #0
 8007490:	db7b      	blt.n	800758a <UART_SetConfig+0x8b2>
 8007492:	2b20      	cmp	r3, #32
 8007494:	d879      	bhi.n	800758a <UART_SetConfig+0x8b2>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <UART_SetConfig+0x7c4>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	08007527 	.word	0x08007527
 80074a0:	0800752f 	.word	0x0800752f
 80074a4:	0800758b 	.word	0x0800758b
 80074a8:	0800758b 	.word	0x0800758b
 80074ac:	08007537 	.word	0x08007537
 80074b0:	0800758b 	.word	0x0800758b
 80074b4:	0800758b 	.word	0x0800758b
 80074b8:	0800758b 	.word	0x0800758b
 80074bc:	08007547 	.word	0x08007547
 80074c0:	0800758b 	.word	0x0800758b
 80074c4:	0800758b 	.word	0x0800758b
 80074c8:	0800758b 	.word	0x0800758b
 80074cc:	0800758b 	.word	0x0800758b
 80074d0:	0800758b 	.word	0x0800758b
 80074d4:	0800758b 	.word	0x0800758b
 80074d8:	0800758b 	.word	0x0800758b
 80074dc:	08007557 	.word	0x08007557
 80074e0:	0800758b 	.word	0x0800758b
 80074e4:	0800758b 	.word	0x0800758b
 80074e8:	0800758b 	.word	0x0800758b
 80074ec:	0800758b 	.word	0x0800758b
 80074f0:	0800758b 	.word	0x0800758b
 80074f4:	0800758b 	.word	0x0800758b
 80074f8:	0800758b 	.word	0x0800758b
 80074fc:	0800758b 	.word	0x0800758b
 8007500:	0800758b 	.word	0x0800758b
 8007504:	0800758b 	.word	0x0800758b
 8007508:	0800758b 	.word	0x0800758b
 800750c:	0800758b 	.word	0x0800758b
 8007510:	0800758b 	.word	0x0800758b
 8007514:	0800758b 	.word	0x0800758b
 8007518:	0800758b 	.word	0x0800758b
 800751c:	0800757d 	.word	0x0800757d
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d02e      	beq.n	8007582 <UART_SetConfig+0x8aa>
 8007524:	e031      	b.n	800758a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007526:	f7fd ff5d 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 800752a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800752c:	e033      	b.n	8007596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800752e:	f7fd ff6f 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 8007532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007534:	e02f      	b.n	8007596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe feda 	bl	80062f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007544:	e027      	b.n	8007596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007546:	f107 0318 	add.w	r3, r7, #24
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff f826 	bl	800659c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007554:	e01f      	b.n	8007596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007556:	4b2d      	ldr	r3, [pc, #180]	; (800760c <UART_SetConfig+0x934>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007562:	4b2a      	ldr	r3, [pc, #168]	; (800760c <UART_SetConfig+0x934>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	08db      	lsrs	r3, r3, #3
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	4a24      	ldr	r2, [pc, #144]	; (8007600 <UART_SetConfig+0x928>)
 800756e:	fa22 f303 	lsr.w	r3, r2, r3
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007574:	e00f      	b.n	8007596 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <UART_SetConfig+0x928>)
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800757a:	e00c      	b.n	8007596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800757c:	4b21      	ldr	r3, [pc, #132]	; (8007604 <UART_SetConfig+0x92c>)
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007580:	e009      	b.n	8007596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007588:	e005      	b.n	8007596 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80e7 	beq.w	800776c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	4a19      	ldr	r2, [pc, #100]	; (8007608 <UART_SetConfig+0x930>)
 80075a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b0:	005a      	lsls	r2, r3, #1
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	441a      	add	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d916      	bls.n	80075f8 <UART_SetConfig+0x920>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d0:	d212      	bcs.n	80075f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f023 030f 	bic.w	r3, r3, #15
 80075da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075ea:	4313      	orrs	r3, r2
 80075ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	e0b9      	b.n	800776c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075fe:	e0b5      	b.n	800776c <UART_SetConfig+0xa94>
 8007600:	03d09000 	.word	0x03d09000
 8007604:	003d0900 	.word	0x003d0900
 8007608:	08008d14 	.word	0x08008d14
 800760c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007610:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007614:	2b20      	cmp	r3, #32
 8007616:	dc49      	bgt.n	80076ac <UART_SetConfig+0x9d4>
 8007618:	2b00      	cmp	r3, #0
 800761a:	db7c      	blt.n	8007716 <UART_SetConfig+0xa3e>
 800761c:	2b20      	cmp	r3, #32
 800761e:	d87a      	bhi.n	8007716 <UART_SetConfig+0xa3e>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x950>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	080076b3 	.word	0x080076b3
 800762c:	080076bb 	.word	0x080076bb
 8007630:	08007717 	.word	0x08007717
 8007634:	08007717 	.word	0x08007717
 8007638:	080076c3 	.word	0x080076c3
 800763c:	08007717 	.word	0x08007717
 8007640:	08007717 	.word	0x08007717
 8007644:	08007717 	.word	0x08007717
 8007648:	080076d3 	.word	0x080076d3
 800764c:	08007717 	.word	0x08007717
 8007650:	08007717 	.word	0x08007717
 8007654:	08007717 	.word	0x08007717
 8007658:	08007717 	.word	0x08007717
 800765c:	08007717 	.word	0x08007717
 8007660:	08007717 	.word	0x08007717
 8007664:	08007717 	.word	0x08007717
 8007668:	080076e3 	.word	0x080076e3
 800766c:	08007717 	.word	0x08007717
 8007670:	08007717 	.word	0x08007717
 8007674:	08007717 	.word	0x08007717
 8007678:	08007717 	.word	0x08007717
 800767c:	08007717 	.word	0x08007717
 8007680:	08007717 	.word	0x08007717
 8007684:	08007717 	.word	0x08007717
 8007688:	08007717 	.word	0x08007717
 800768c:	08007717 	.word	0x08007717
 8007690:	08007717 	.word	0x08007717
 8007694:	08007717 	.word	0x08007717
 8007698:	08007717 	.word	0x08007717
 800769c:	08007717 	.word	0x08007717
 80076a0:	08007717 	.word	0x08007717
 80076a4:	08007717 	.word	0x08007717
 80076a8:	08007709 	.word	0x08007709
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d02e      	beq.n	800770e <UART_SetConfig+0xa36>
 80076b0:	e031      	b.n	8007716 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b2:	f7fd fe97 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 80076b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076b8:	e033      	b.n	8007722 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ba:	f7fd fea9 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 80076be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076c0:	e02f      	b.n	8007722 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fe14 	bl	80062f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076d0:	e027      	b.n	8007722 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076d2:	f107 0318 	add.w	r3, r7, #24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe ff60 	bl	800659c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076e0:	e01f      	b.n	8007722 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e2:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <UART_SetConfig+0xac0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076ee:	4b2a      	ldr	r3, [pc, #168]	; (8007798 <UART_SetConfig+0xac0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	08db      	lsrs	r3, r3, #3
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	4a28      	ldr	r2, [pc, #160]	; (800779c <UART_SetConfig+0xac4>)
 80076fa:	fa22 f303 	lsr.w	r3, r2, r3
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007700:	e00f      	b.n	8007722 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007702:	4b26      	ldr	r3, [pc, #152]	; (800779c <UART_SetConfig+0xac4>)
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007706:	e00c      	b.n	8007722 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007708:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <UART_SetConfig+0xac8>)
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800770c:	e009      	b.n	8007722 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007714:	e005      	b.n	8007722 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007720:	bf00      	nop
    }

    if (pclk != 0U)
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d021      	beq.n	800776c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <UART_SetConfig+0xacc>)
 800772e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007732:	461a      	mov	r2, r3
 8007734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007736:	fbb3 f2f2 	udiv	r2, r3, r2
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	085b      	lsrs	r3, r3, #1
 8007740:	441a      	add	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	fbb2 f3f3 	udiv	r3, r2, r3
 800774a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	2b0f      	cmp	r3, #15
 8007750:	d909      	bls.n	8007766 <UART_SetConfig+0xa8e>
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007758:	d205      	bcs.n	8007766 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	b29a      	uxth	r2, r3
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60da      	str	r2, [r3, #12]
 8007764:	e002      	b.n	800776c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2201      	movs	r2, #1
 8007770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2201      	movs	r2, #1
 8007778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2200      	movs	r2, #0
 8007786:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007788:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800778c:	4618      	mov	r0, r3
 800778e:	3748      	adds	r7, #72	; 0x48
 8007790:	46bd      	mov	sp, r7
 8007792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007796:	bf00      	nop
 8007798:	58024400 	.word	0x58024400
 800779c:	03d09000 	.word	0x03d09000
 80077a0:	003d0900 	.word	0x003d0900
 80077a4:	08008d14 	.word	0x08008d14

080077a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01a      	beq.n	80078be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d10a      	bne.n	80078be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078fc:	f7f9 fe9c 	bl	8001638 <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d10e      	bne.n	800792e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f82f 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e025      	b.n	800797a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b04      	cmp	r3, #4
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f819 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00f      	b.n	800797a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b09c      	sub	sp, #112	; 0x70
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007992:	e0a9      	b.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	f000 80a5 	beq.w	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799e:	f7f9 fe4b 	bl	8001638 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80079ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d140      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079c8:	667b      	str	r3, [r7, #100]	; 0x64
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e6      	bne.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	663b      	str	r3, [r7, #96]	; 0x60
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a06:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e069      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d051      	beq.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a52:	d149      	bne.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e6      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ab0:	623a      	str	r2, [r7, #32]
 8007ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e010      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69da      	ldr	r2, [r3, #28]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4013      	ands	r3, r2
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	f43f af46 	beq.w	8007994 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3770      	adds	r7, #112	; 0x70
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e027      	b.n	8007b78 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2224      	movs	r2, #36	; 0x24
 8007b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e02d      	b.n	8007bf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2224      	movs	r2, #36	; 0x24
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f84f 	bl	8007c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e02d      	b.n	8007c74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2224      	movs	r2, #36	; 0x24
 8007c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0201 	bic.w	r2, r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f811 	bl	8007c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d108      	bne.n	8007c9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c9c:	e031      	b.n	8007d02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c9e:	2310      	movs	r3, #16
 8007ca0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ca2:	2310      	movs	r3, #16
 8007ca4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	0e5b      	lsrs	r3, r3, #25
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	0f5b      	lsrs	r3, r3, #29
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	7b3a      	ldrb	r2, [r7, #12]
 8007cca:	4911      	ldr	r1, [pc, #68]	; (8007d10 <UARTEx_SetNbDataToProcess+0x94>)
 8007ccc:	5c8a      	ldrb	r2, [r1, r2]
 8007cce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cd2:	7b3a      	ldrb	r2, [r7, #12]
 8007cd4:	490f      	ldr	r1, [pc, #60]	; (8007d14 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	7b7a      	ldrb	r2, [r7, #13]
 8007ce8:	4909      	ldr	r1, [pc, #36]	; (8007d10 <UARTEx_SetNbDataToProcess+0x94>)
 8007cea:	5c8a      	ldrb	r2, [r1, r2]
 8007cec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cf0:	7b7a      	ldrb	r2, [r7, #13]
 8007cf2:	4908      	ldr	r1, [pc, #32]	; (8007d14 <UARTEx_SetNbDataToProcess+0x98>)
 8007cf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d02:	bf00      	nop
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	08008d2c 	.word	0x08008d2c
 8007d14:	08008d34 	.word	0x08008d34

08007d18 <__errno>:
 8007d18:	4b01      	ldr	r3, [pc, #4]	; (8007d20 <__errno+0x8>)
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	24000010 	.word	0x24000010

08007d24 <__libc_init_array>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4d0d      	ldr	r5, [pc, #52]	; (8007d5c <__libc_init_array+0x38>)
 8007d28:	4c0d      	ldr	r4, [pc, #52]	; (8007d60 <__libc_init_array+0x3c>)
 8007d2a:	1b64      	subs	r4, r4, r5
 8007d2c:	10a4      	asrs	r4, r4, #2
 8007d2e:	2600      	movs	r6, #0
 8007d30:	42a6      	cmp	r6, r4
 8007d32:	d109      	bne.n	8007d48 <__libc_init_array+0x24>
 8007d34:	4d0b      	ldr	r5, [pc, #44]	; (8007d64 <__libc_init_array+0x40>)
 8007d36:	4c0c      	ldr	r4, [pc, #48]	; (8007d68 <__libc_init_array+0x44>)
 8007d38:	f000 ffae 	bl	8008c98 <_init>
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	10a4      	asrs	r4, r4, #2
 8007d40:	2600      	movs	r6, #0
 8007d42:	42a6      	cmp	r6, r4
 8007d44:	d105      	bne.n	8007d52 <__libc_init_array+0x2e>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4c:	4798      	blx	r3
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7ee      	b.n	8007d30 <__libc_init_array+0xc>
 8007d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d56:	4798      	blx	r3
 8007d58:	3601      	adds	r6, #1
 8007d5a:	e7f2      	b.n	8007d42 <__libc_init_array+0x1e>
 8007d5c:	08008ddc 	.word	0x08008ddc
 8007d60:	08008ddc 	.word	0x08008ddc
 8007d64:	08008ddc 	.word	0x08008ddc
 8007d68:	08008de0 	.word	0x08008de0

08007d6c <memset>:
 8007d6c:	4402      	add	r2, r0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d100      	bne.n	8007d76 <memset+0xa>
 8007d74:	4770      	bx	lr
 8007d76:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7a:	e7f9      	b.n	8007d70 <memset+0x4>

08007d7c <iprintf>:
 8007d7c:	b40f      	push	{r0, r1, r2, r3}
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <iprintf+0x2c>)
 8007d80:	b513      	push	{r0, r1, r4, lr}
 8007d82:	681c      	ldr	r4, [r3, #0]
 8007d84:	b124      	cbz	r4, 8007d90 <iprintf+0x14>
 8007d86:	69a3      	ldr	r3, [r4, #24]
 8007d88:	b913      	cbnz	r3, 8007d90 <iprintf+0x14>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f866 	bl	8007e5c <__sinit>
 8007d90:	ab05      	add	r3, sp, #20
 8007d92:	9a04      	ldr	r2, [sp, #16]
 8007d94:	68a1      	ldr	r1, [r4, #8]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 f9bd 	bl	8008118 <_vfiprintf_r>
 8007d9e:	b002      	add	sp, #8
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	b004      	add	sp, #16
 8007da6:	4770      	bx	lr
 8007da8:	24000010 	.word	0x24000010

08007dac <std>:
 8007dac:	2300      	movs	r3, #0
 8007dae:	b510      	push	{r4, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	e9c0 3300 	strd	r3, r3, [r0]
 8007db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dba:	6083      	str	r3, [r0, #8]
 8007dbc:	8181      	strh	r1, [r0, #12]
 8007dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc0:	81c2      	strh	r2, [r0, #14]
 8007dc2:	6183      	str	r3, [r0, #24]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	305c      	adds	r0, #92	; 0x5c
 8007dca:	f7ff ffcf 	bl	8007d6c <memset>
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x38>)
 8007dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x3c>)
 8007dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x40>)
 8007dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x44>)
 8007ddc:	6224      	str	r4, [r4, #32]
 8007dde:	6323      	str	r3, [r4, #48]	; 0x30
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	080086c1 	.word	0x080086c1
 8007de8:	080086e3 	.word	0x080086e3
 8007dec:	0800871b 	.word	0x0800871b
 8007df0:	0800873f 	.word	0x0800873f

08007df4 <_cleanup_r>:
 8007df4:	4901      	ldr	r1, [pc, #4]	; (8007dfc <_cleanup_r+0x8>)
 8007df6:	f000 b8af 	b.w	8007f58 <_fwalk_reent>
 8007dfa:	bf00      	nop
 8007dfc:	08008a19 	.word	0x08008a19

08007e00 <__sfmoreglue>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	2268      	movs	r2, #104	; 0x68
 8007e04:	1e4d      	subs	r5, r1, #1
 8007e06:	4355      	muls	r5, r2
 8007e08:	460e      	mov	r6, r1
 8007e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0e:	f000 f8e5 	bl	8007fdc <_malloc_r>
 8007e12:	4604      	mov	r4, r0
 8007e14:	b140      	cbz	r0, 8007e28 <__sfmoreglue+0x28>
 8007e16:	2100      	movs	r1, #0
 8007e18:	e9c0 1600 	strd	r1, r6, [r0]
 8007e1c:	300c      	adds	r0, #12
 8007e1e:	60a0      	str	r0, [r4, #8]
 8007e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e24:	f7ff ffa2 	bl	8007d6c <memset>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}

08007e2c <__sfp_lock_acquire>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sfp_lock_acquire+0x8>)
 8007e2e:	f000 b8b3 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 8007e32:	bf00      	nop
 8007e34:	240002f5 	.word	0x240002f5

08007e38 <__sfp_lock_release>:
 8007e38:	4801      	ldr	r0, [pc, #4]	; (8007e40 <__sfp_lock_release+0x8>)
 8007e3a:	f000 b8ae 	b.w	8007f9a <__retarget_lock_release_recursive>
 8007e3e:	bf00      	nop
 8007e40:	240002f5 	.word	0x240002f5

08007e44 <__sinit_lock_acquire>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sinit_lock_acquire+0x8>)
 8007e46:	f000 b8a7 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	240002f6 	.word	0x240002f6

08007e50 <__sinit_lock_release>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sinit_lock_release+0x8>)
 8007e52:	f000 b8a2 	b.w	8007f9a <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	240002f6 	.word	0x240002f6

08007e5c <__sinit>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	4604      	mov	r4, r0
 8007e60:	f7ff fff0 	bl	8007e44 <__sinit_lock_acquire>
 8007e64:	69a3      	ldr	r3, [r4, #24]
 8007e66:	b11b      	cbz	r3, 8007e70 <__sinit+0x14>
 8007e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6c:	f7ff bff0 	b.w	8007e50 <__sinit_lock_release>
 8007e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e74:	6523      	str	r3, [r4, #80]	; 0x50
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <__sinit+0x68>)
 8007e78:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <__sinit+0x6c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	bf04      	itt	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	61a3      	streq	r3, [r4, #24]
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 f820 	bl	8007ecc <__sfp>
 8007e8c:	6060      	str	r0, [r4, #4]
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f81c 	bl	8007ecc <__sfp>
 8007e94:	60a0      	str	r0, [r4, #8]
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f818 	bl	8007ecc <__sfp>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	60e0      	str	r0, [r4, #12]
 8007ea0:	2104      	movs	r1, #4
 8007ea2:	6860      	ldr	r0, [r4, #4]
 8007ea4:	f7ff ff82 	bl	8007dac <std>
 8007ea8:	68a0      	ldr	r0, [r4, #8]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	2109      	movs	r1, #9
 8007eae:	f7ff ff7d 	bl	8007dac <std>
 8007eb2:	68e0      	ldr	r0, [r4, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	2112      	movs	r1, #18
 8007eb8:	f7ff ff78 	bl	8007dac <std>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	61a3      	str	r3, [r4, #24]
 8007ec0:	e7d2      	b.n	8007e68 <__sinit+0xc>
 8007ec2:	bf00      	nop
 8007ec4:	08008d3c 	.word	0x08008d3c
 8007ec8:	08007df5 	.word	0x08007df5

08007ecc <__sfp>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	4607      	mov	r7, r0
 8007ed0:	f7ff ffac 	bl	8007e2c <__sfp_lock_acquire>
 8007ed4:	4b1e      	ldr	r3, [pc, #120]	; (8007f50 <__sfp+0x84>)
 8007ed6:	681e      	ldr	r6, [r3, #0]
 8007ed8:	69b3      	ldr	r3, [r6, #24]
 8007eda:	b913      	cbnz	r3, 8007ee2 <__sfp+0x16>
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff ffbd 	bl	8007e5c <__sinit>
 8007ee2:	3648      	adds	r6, #72	; 0x48
 8007ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	d503      	bpl.n	8007ef4 <__sfp+0x28>
 8007eec:	6833      	ldr	r3, [r6, #0]
 8007eee:	b30b      	cbz	r3, 8007f34 <__sfp+0x68>
 8007ef0:	6836      	ldr	r6, [r6, #0]
 8007ef2:	e7f7      	b.n	8007ee4 <__sfp+0x18>
 8007ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ef8:	b9d5      	cbnz	r5, 8007f30 <__sfp+0x64>
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <__sfp+0x88>)
 8007efc:	60e3      	str	r3, [r4, #12]
 8007efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f02:	6665      	str	r5, [r4, #100]	; 0x64
 8007f04:	f000 f847 	bl	8007f96 <__retarget_lock_init_recursive>
 8007f08:	f7ff ff96 	bl	8007e38 <__sfp_lock_release>
 8007f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f14:	6025      	str	r5, [r4, #0]
 8007f16:	61a5      	str	r5, [r4, #24]
 8007f18:	2208      	movs	r2, #8
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f20:	f7ff ff24 	bl	8007d6c <memset>
 8007f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f30:	3468      	adds	r4, #104	; 0x68
 8007f32:	e7d9      	b.n	8007ee8 <__sfp+0x1c>
 8007f34:	2104      	movs	r1, #4
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ff62 	bl	8007e00 <__sfmoreglue>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	6030      	str	r0, [r6, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1d5      	bne.n	8007ef0 <__sfp+0x24>
 8007f44:	f7ff ff78 	bl	8007e38 <__sfp_lock_release>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	e7ee      	b.n	8007f2c <__sfp+0x60>
 8007f4e:	bf00      	nop
 8007f50:	08008d3c 	.word	0x08008d3c
 8007f54:	ffff0001 	.word	0xffff0001

08007f58 <_fwalk_reent>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	4688      	mov	r8, r1
 8007f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f64:	2700      	movs	r7, #0
 8007f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6e:	d505      	bpl.n	8007f7c <_fwalk_reent+0x24>
 8007f70:	6824      	ldr	r4, [r4, #0]
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	d1f7      	bne.n	8007f66 <_fwalk_reent+0xe>
 8007f76:	4638      	mov	r0, r7
 8007f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7c:	89ab      	ldrh	r3, [r5, #12]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d907      	bls.n	8007f92 <_fwalk_reent+0x3a>
 8007f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f86:	3301      	adds	r3, #1
 8007f88:	d003      	beq.n	8007f92 <_fwalk_reent+0x3a>
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	47c0      	blx	r8
 8007f90:	4307      	orrs	r7, r0
 8007f92:	3568      	adds	r5, #104	; 0x68
 8007f94:	e7e9      	b.n	8007f6a <_fwalk_reent+0x12>

08007f96 <__retarget_lock_init_recursive>:
 8007f96:	4770      	bx	lr

08007f98 <__retarget_lock_acquire_recursive>:
 8007f98:	4770      	bx	lr

08007f9a <__retarget_lock_release_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <sbrk_aligned>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	4e0e      	ldr	r6, [pc, #56]	; (8007fd8 <sbrk_aligned+0x3c>)
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	6831      	ldr	r1, [r6, #0]
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	b911      	cbnz	r1, 8007fae <sbrk_aligned+0x12>
 8007fa8:	f000 fb7a 	bl	80086a0 <_sbrk_r>
 8007fac:	6030      	str	r0, [r6, #0]
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 fb75 	bl	80086a0 <_sbrk_r>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	d00a      	beq.n	8007fd0 <sbrk_aligned+0x34>
 8007fba:	1cc4      	adds	r4, r0, #3
 8007fbc:	f024 0403 	bic.w	r4, r4, #3
 8007fc0:	42a0      	cmp	r0, r4
 8007fc2:	d007      	beq.n	8007fd4 <sbrk_aligned+0x38>
 8007fc4:	1a21      	subs	r1, r4, r0
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 fb6a 	bl	80086a0 <_sbrk_r>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d101      	bne.n	8007fd4 <sbrk_aligned+0x38>
 8007fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	240002fc 	.word	0x240002fc

08007fdc <_malloc_r>:
 8007fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe0:	1ccd      	adds	r5, r1, #3
 8007fe2:	f025 0503 	bic.w	r5, r5, #3
 8007fe6:	3508      	adds	r5, #8
 8007fe8:	2d0c      	cmp	r5, #12
 8007fea:	bf38      	it	cc
 8007fec:	250c      	movcc	r5, #12
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	db01      	blt.n	8007ff8 <_malloc_r+0x1c>
 8007ff4:	42a9      	cmp	r1, r5
 8007ff6:	d905      	bls.n	8008004 <_malloc_r+0x28>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	4630      	mov	r0, r6
 8008000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008004:	4e2e      	ldr	r6, [pc, #184]	; (80080c0 <_malloc_r+0xe4>)
 8008006:	f000 fdbb 	bl	8008b80 <__malloc_lock>
 800800a:	6833      	ldr	r3, [r6, #0]
 800800c:	461c      	mov	r4, r3
 800800e:	bb34      	cbnz	r4, 800805e <_malloc_r+0x82>
 8008010:	4629      	mov	r1, r5
 8008012:	4638      	mov	r0, r7
 8008014:	f7ff ffc2 	bl	8007f9c <sbrk_aligned>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	4604      	mov	r4, r0
 800801c:	d14d      	bne.n	80080ba <_malloc_r+0xde>
 800801e:	6834      	ldr	r4, [r6, #0]
 8008020:	4626      	mov	r6, r4
 8008022:	2e00      	cmp	r6, #0
 8008024:	d140      	bne.n	80080a8 <_malloc_r+0xcc>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	4631      	mov	r1, r6
 800802a:	4638      	mov	r0, r7
 800802c:	eb04 0803 	add.w	r8, r4, r3
 8008030:	f000 fb36 	bl	80086a0 <_sbrk_r>
 8008034:	4580      	cmp	r8, r0
 8008036:	d13a      	bne.n	80080ae <_malloc_r+0xd2>
 8008038:	6821      	ldr	r1, [r4, #0]
 800803a:	3503      	adds	r5, #3
 800803c:	1a6d      	subs	r5, r5, r1
 800803e:	f025 0503 	bic.w	r5, r5, #3
 8008042:	3508      	adds	r5, #8
 8008044:	2d0c      	cmp	r5, #12
 8008046:	bf38      	it	cc
 8008048:	250c      	movcc	r5, #12
 800804a:	4629      	mov	r1, r5
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff ffa5 	bl	8007f9c <sbrk_aligned>
 8008052:	3001      	adds	r0, #1
 8008054:	d02b      	beq.n	80080ae <_malloc_r+0xd2>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	442b      	add	r3, r5
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	e00e      	b.n	800807c <_malloc_r+0xa0>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	1b52      	subs	r2, r2, r5
 8008062:	d41e      	bmi.n	80080a2 <_malloc_r+0xc6>
 8008064:	2a0b      	cmp	r2, #11
 8008066:	d916      	bls.n	8008096 <_malloc_r+0xba>
 8008068:	1961      	adds	r1, r4, r5
 800806a:	42a3      	cmp	r3, r4
 800806c:	6025      	str	r5, [r4, #0]
 800806e:	bf18      	it	ne
 8008070:	6059      	strne	r1, [r3, #4]
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	bf08      	it	eq
 8008076:	6031      	streq	r1, [r6, #0]
 8008078:	5162      	str	r2, [r4, r5]
 800807a:	604b      	str	r3, [r1, #4]
 800807c:	4638      	mov	r0, r7
 800807e:	f104 060b 	add.w	r6, r4, #11
 8008082:	f000 fd83 	bl	8008b8c <__malloc_unlock>
 8008086:	f026 0607 	bic.w	r6, r6, #7
 800808a:	1d23      	adds	r3, r4, #4
 800808c:	1af2      	subs	r2, r6, r3
 800808e:	d0b6      	beq.n	8007ffe <_malloc_r+0x22>
 8008090:	1b9b      	subs	r3, r3, r6
 8008092:	50a3      	str	r3, [r4, r2]
 8008094:	e7b3      	b.n	8007ffe <_malloc_r+0x22>
 8008096:	6862      	ldr	r2, [r4, #4]
 8008098:	42a3      	cmp	r3, r4
 800809a:	bf0c      	ite	eq
 800809c:	6032      	streq	r2, [r6, #0]
 800809e:	605a      	strne	r2, [r3, #4]
 80080a0:	e7ec      	b.n	800807c <_malloc_r+0xa0>
 80080a2:	4623      	mov	r3, r4
 80080a4:	6864      	ldr	r4, [r4, #4]
 80080a6:	e7b2      	b.n	800800e <_malloc_r+0x32>
 80080a8:	4634      	mov	r4, r6
 80080aa:	6876      	ldr	r6, [r6, #4]
 80080ac:	e7b9      	b.n	8008022 <_malloc_r+0x46>
 80080ae:	230c      	movs	r3, #12
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	4638      	mov	r0, r7
 80080b4:	f000 fd6a 	bl	8008b8c <__malloc_unlock>
 80080b8:	e7a1      	b.n	8007ffe <_malloc_r+0x22>
 80080ba:	6025      	str	r5, [r4, #0]
 80080bc:	e7de      	b.n	800807c <_malloc_r+0xa0>
 80080be:	bf00      	nop
 80080c0:	240002f8 	.word	0x240002f8

080080c4 <__sfputc_r>:
 80080c4:	6893      	ldr	r3, [r2, #8]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	b410      	push	{r4}
 80080cc:	6093      	str	r3, [r2, #8]
 80080ce:	da08      	bge.n	80080e2 <__sfputc_r+0x1e>
 80080d0:	6994      	ldr	r4, [r2, #24]
 80080d2:	42a3      	cmp	r3, r4
 80080d4:	db01      	blt.n	80080da <__sfputc_r+0x16>
 80080d6:	290a      	cmp	r1, #10
 80080d8:	d103      	bne.n	80080e2 <__sfputc_r+0x1e>
 80080da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080de:	f000 bb33 	b.w	8008748 <__swbuf_r>
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	1c58      	adds	r0, r3, #1
 80080e6:	6010      	str	r0, [r2, #0]
 80080e8:	7019      	strb	r1, [r3, #0]
 80080ea:	4608      	mov	r0, r1
 80080ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <__sfputs_r>:
 80080f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f4:	4606      	mov	r6, r0
 80080f6:	460f      	mov	r7, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	18d5      	adds	r5, r2, r3
 80080fc:	42ac      	cmp	r4, r5
 80080fe:	d101      	bne.n	8008104 <__sfputs_r+0x12>
 8008100:	2000      	movs	r0, #0
 8008102:	e007      	b.n	8008114 <__sfputs_r+0x22>
 8008104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008108:	463a      	mov	r2, r7
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff ffda 	bl	80080c4 <__sfputc_r>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d1f3      	bne.n	80080fc <__sfputs_r+0xa>
 8008114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008118 <_vfiprintf_r>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	460d      	mov	r5, r1
 800811e:	b09d      	sub	sp, #116	; 0x74
 8008120:	4614      	mov	r4, r2
 8008122:	4698      	mov	r8, r3
 8008124:	4606      	mov	r6, r0
 8008126:	b118      	cbz	r0, 8008130 <_vfiprintf_r+0x18>
 8008128:	6983      	ldr	r3, [r0, #24]
 800812a:	b90b      	cbnz	r3, 8008130 <_vfiprintf_r+0x18>
 800812c:	f7ff fe96 	bl	8007e5c <__sinit>
 8008130:	4b89      	ldr	r3, [pc, #548]	; (8008358 <_vfiprintf_r+0x240>)
 8008132:	429d      	cmp	r5, r3
 8008134:	d11b      	bne.n	800816e <_vfiprintf_r+0x56>
 8008136:	6875      	ldr	r5, [r6, #4]
 8008138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813a:	07d9      	lsls	r1, r3, #31
 800813c:	d405      	bmi.n	800814a <_vfiprintf_r+0x32>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	059a      	lsls	r2, r3, #22
 8008142:	d402      	bmi.n	800814a <_vfiprintf_r+0x32>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f7ff ff27 	bl	8007f98 <__retarget_lock_acquire_recursive>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	071b      	lsls	r3, r3, #28
 800814e:	d501      	bpl.n	8008154 <_vfiprintf_r+0x3c>
 8008150:	692b      	ldr	r3, [r5, #16]
 8008152:	b9eb      	cbnz	r3, 8008190 <_vfiprintf_r+0x78>
 8008154:	4629      	mov	r1, r5
 8008156:	4630      	mov	r0, r6
 8008158:	f000 fb5a 	bl	8008810 <__swsetup_r>
 800815c:	b1c0      	cbz	r0, 8008190 <_vfiprintf_r+0x78>
 800815e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008160:	07dc      	lsls	r4, r3, #31
 8008162:	d50e      	bpl.n	8008182 <_vfiprintf_r+0x6a>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	b01d      	add	sp, #116	; 0x74
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	4b7b      	ldr	r3, [pc, #492]	; (800835c <_vfiprintf_r+0x244>)
 8008170:	429d      	cmp	r5, r3
 8008172:	d101      	bne.n	8008178 <_vfiprintf_r+0x60>
 8008174:	68b5      	ldr	r5, [r6, #8]
 8008176:	e7df      	b.n	8008138 <_vfiprintf_r+0x20>
 8008178:	4b79      	ldr	r3, [pc, #484]	; (8008360 <_vfiprintf_r+0x248>)
 800817a:	429d      	cmp	r5, r3
 800817c:	bf08      	it	eq
 800817e:	68f5      	ldreq	r5, [r6, #12]
 8008180:	e7da      	b.n	8008138 <_vfiprintf_r+0x20>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	0598      	lsls	r0, r3, #22
 8008186:	d4ed      	bmi.n	8008164 <_vfiprintf_r+0x4c>
 8008188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800818a:	f7ff ff06 	bl	8007f9a <__retarget_lock_release_recursive>
 800818e:	e7e9      	b.n	8008164 <_vfiprintf_r+0x4c>
 8008190:	2300      	movs	r3, #0
 8008192:	9309      	str	r3, [sp, #36]	; 0x24
 8008194:	2320      	movs	r3, #32
 8008196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800819a:	f8cd 800c 	str.w	r8, [sp, #12]
 800819e:	2330      	movs	r3, #48	; 0x30
 80081a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008364 <_vfiprintf_r+0x24c>
 80081a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a8:	f04f 0901 	mov.w	r9, #1
 80081ac:	4623      	mov	r3, r4
 80081ae:	469a      	mov	sl, r3
 80081b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b4:	b10a      	cbz	r2, 80081ba <_vfiprintf_r+0xa2>
 80081b6:	2a25      	cmp	r2, #37	; 0x25
 80081b8:	d1f9      	bne.n	80081ae <_vfiprintf_r+0x96>
 80081ba:	ebba 0b04 	subs.w	fp, sl, r4
 80081be:	d00b      	beq.n	80081d8 <_vfiprintf_r+0xc0>
 80081c0:	465b      	mov	r3, fp
 80081c2:	4622      	mov	r2, r4
 80081c4:	4629      	mov	r1, r5
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ff93 	bl	80080f2 <__sfputs_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	f000 80aa 	beq.w	8008326 <_vfiprintf_r+0x20e>
 80081d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d4:	445a      	add	r2, fp
 80081d6:	9209      	str	r2, [sp, #36]	; 0x24
 80081d8:	f89a 3000 	ldrb.w	r3, [sl]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80a2 	beq.w	8008326 <_vfiprintf_r+0x20e>
 80081e2:	2300      	movs	r3, #0
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ec:	f10a 0a01 	add.w	sl, sl, #1
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f8:	931a      	str	r3, [sp, #104]	; 0x68
 80081fa:	4654      	mov	r4, sl
 80081fc:	2205      	movs	r2, #5
 80081fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008202:	4858      	ldr	r0, [pc, #352]	; (8008364 <_vfiprintf_r+0x24c>)
 8008204:	f7f8 f86c 	bl	80002e0 <memchr>
 8008208:	9a04      	ldr	r2, [sp, #16]
 800820a:	b9d8      	cbnz	r0, 8008244 <_vfiprintf_r+0x12c>
 800820c:	06d1      	lsls	r1, r2, #27
 800820e:	bf44      	itt	mi
 8008210:	2320      	movmi	r3, #32
 8008212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008216:	0713      	lsls	r3, r2, #28
 8008218:	bf44      	itt	mi
 800821a:	232b      	movmi	r3, #43	; 0x2b
 800821c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008220:	f89a 3000 	ldrb.w	r3, [sl]
 8008224:	2b2a      	cmp	r3, #42	; 0x2a
 8008226:	d015      	beq.n	8008254 <_vfiprintf_r+0x13c>
 8008228:	9a07      	ldr	r2, [sp, #28]
 800822a:	4654      	mov	r4, sl
 800822c:	2000      	movs	r0, #0
 800822e:	f04f 0c0a 	mov.w	ip, #10
 8008232:	4621      	mov	r1, r4
 8008234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008238:	3b30      	subs	r3, #48	; 0x30
 800823a:	2b09      	cmp	r3, #9
 800823c:	d94e      	bls.n	80082dc <_vfiprintf_r+0x1c4>
 800823e:	b1b0      	cbz	r0, 800826e <_vfiprintf_r+0x156>
 8008240:	9207      	str	r2, [sp, #28]
 8008242:	e014      	b.n	800826e <_vfiprintf_r+0x156>
 8008244:	eba0 0308 	sub.w	r3, r0, r8
 8008248:	fa09 f303 	lsl.w	r3, r9, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	46a2      	mov	sl, r4
 8008252:	e7d2      	b.n	80081fa <_vfiprintf_r+0xe2>
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	1d19      	adds	r1, r3, #4
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	9103      	str	r1, [sp, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	bfbb      	ittet	lt
 8008260:	425b      	neglt	r3, r3
 8008262:	f042 0202 	orrlt.w	r2, r2, #2
 8008266:	9307      	strge	r3, [sp, #28]
 8008268:	9307      	strlt	r3, [sp, #28]
 800826a:	bfb8      	it	lt
 800826c:	9204      	strlt	r2, [sp, #16]
 800826e:	7823      	ldrb	r3, [r4, #0]
 8008270:	2b2e      	cmp	r3, #46	; 0x2e
 8008272:	d10c      	bne.n	800828e <_vfiprintf_r+0x176>
 8008274:	7863      	ldrb	r3, [r4, #1]
 8008276:	2b2a      	cmp	r3, #42	; 0x2a
 8008278:	d135      	bne.n	80082e6 <_vfiprintf_r+0x1ce>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	9203      	str	r2, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfb8      	it	lt
 8008286:	f04f 33ff 	movlt.w	r3, #4294967295
 800828a:	3402      	adds	r4, #2
 800828c:	9305      	str	r3, [sp, #20]
 800828e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008374 <_vfiprintf_r+0x25c>
 8008292:	7821      	ldrb	r1, [r4, #0]
 8008294:	2203      	movs	r2, #3
 8008296:	4650      	mov	r0, sl
 8008298:	f7f8 f822 	bl	80002e0 <memchr>
 800829c:	b140      	cbz	r0, 80082b0 <_vfiprintf_r+0x198>
 800829e:	2340      	movs	r3, #64	; 0x40
 80082a0:	eba0 000a 	sub.w	r0, r0, sl
 80082a4:	fa03 f000 	lsl.w	r0, r3, r0
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	4303      	orrs	r3, r0
 80082ac:	3401      	adds	r4, #1
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	482c      	ldr	r0, [pc, #176]	; (8008368 <_vfiprintf_r+0x250>)
 80082b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ba:	2206      	movs	r2, #6
 80082bc:	f7f8 f810 	bl	80002e0 <memchr>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d03f      	beq.n	8008344 <_vfiprintf_r+0x22c>
 80082c4:	4b29      	ldr	r3, [pc, #164]	; (800836c <_vfiprintf_r+0x254>)
 80082c6:	bb1b      	cbnz	r3, 8008310 <_vfiprintf_r+0x1f8>
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	3307      	adds	r3, #7
 80082cc:	f023 0307 	bic.w	r3, r3, #7
 80082d0:	3308      	adds	r3, #8
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	443b      	add	r3, r7
 80082d8:	9309      	str	r3, [sp, #36]	; 0x24
 80082da:	e767      	b.n	80081ac <_vfiprintf_r+0x94>
 80082dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e0:	460c      	mov	r4, r1
 80082e2:	2001      	movs	r0, #1
 80082e4:	e7a5      	b.n	8008232 <_vfiprintf_r+0x11a>
 80082e6:	2300      	movs	r3, #0
 80082e8:	3401      	adds	r4, #1
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	4619      	mov	r1, r3
 80082ee:	f04f 0c0a 	mov.w	ip, #10
 80082f2:	4620      	mov	r0, r4
 80082f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f8:	3a30      	subs	r2, #48	; 0x30
 80082fa:	2a09      	cmp	r2, #9
 80082fc:	d903      	bls.n	8008306 <_vfiprintf_r+0x1ee>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0c5      	beq.n	800828e <_vfiprintf_r+0x176>
 8008302:	9105      	str	r1, [sp, #20]
 8008304:	e7c3      	b.n	800828e <_vfiprintf_r+0x176>
 8008306:	fb0c 2101 	mla	r1, ip, r1, r2
 800830a:	4604      	mov	r4, r0
 800830c:	2301      	movs	r3, #1
 800830e:	e7f0      	b.n	80082f2 <_vfiprintf_r+0x1da>
 8008310:	ab03      	add	r3, sp, #12
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	462a      	mov	r2, r5
 8008316:	4b16      	ldr	r3, [pc, #88]	; (8008370 <_vfiprintf_r+0x258>)
 8008318:	a904      	add	r1, sp, #16
 800831a:	4630      	mov	r0, r6
 800831c:	f3af 8000 	nop.w
 8008320:	4607      	mov	r7, r0
 8008322:	1c78      	adds	r0, r7, #1
 8008324:	d1d6      	bne.n	80082d4 <_vfiprintf_r+0x1bc>
 8008326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008328:	07d9      	lsls	r1, r3, #31
 800832a:	d405      	bmi.n	8008338 <_vfiprintf_r+0x220>
 800832c:	89ab      	ldrh	r3, [r5, #12]
 800832e:	059a      	lsls	r2, r3, #22
 8008330:	d402      	bmi.n	8008338 <_vfiprintf_r+0x220>
 8008332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008334:	f7ff fe31 	bl	8007f9a <__retarget_lock_release_recursive>
 8008338:	89ab      	ldrh	r3, [r5, #12]
 800833a:	065b      	lsls	r3, r3, #25
 800833c:	f53f af12 	bmi.w	8008164 <_vfiprintf_r+0x4c>
 8008340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008342:	e711      	b.n	8008168 <_vfiprintf_r+0x50>
 8008344:	ab03      	add	r3, sp, #12
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	462a      	mov	r2, r5
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <_vfiprintf_r+0x258>)
 800834c:	a904      	add	r1, sp, #16
 800834e:	4630      	mov	r0, r6
 8008350:	f000 f880 	bl	8008454 <_printf_i>
 8008354:	e7e4      	b.n	8008320 <_vfiprintf_r+0x208>
 8008356:	bf00      	nop
 8008358:	08008d60 	.word	0x08008d60
 800835c:	08008d80 	.word	0x08008d80
 8008360:	08008d40 	.word	0x08008d40
 8008364:	08008da0 	.word	0x08008da0
 8008368:	08008daa 	.word	0x08008daa
 800836c:	00000000 	.word	0x00000000
 8008370:	080080f3 	.word	0x080080f3
 8008374:	08008da6 	.word	0x08008da6

08008378 <_printf_common>:
 8008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	4616      	mov	r6, r2
 800837e:	4699      	mov	r9, r3
 8008380:	688a      	ldr	r2, [r1, #8]
 8008382:	690b      	ldr	r3, [r1, #16]
 8008384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008388:	4293      	cmp	r3, r2
 800838a:	bfb8      	it	lt
 800838c:	4613      	movlt	r3, r2
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008394:	4607      	mov	r7, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b10a      	cbz	r2, 800839e <_printf_common+0x26>
 800839a:	3301      	adds	r3, #1
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	0699      	lsls	r1, r3, #26
 80083a2:	bf42      	ittt	mi
 80083a4:	6833      	ldrmi	r3, [r6, #0]
 80083a6:	3302      	addmi	r3, #2
 80083a8:	6033      	strmi	r3, [r6, #0]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	f015 0506 	ands.w	r5, r5, #6
 80083b0:	d106      	bne.n	80083c0 <_printf_common+0x48>
 80083b2:	f104 0a19 	add.w	sl, r4, #25
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	6832      	ldr	r2, [r6, #0]
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	42ab      	cmp	r3, r5
 80083be:	dc26      	bgt.n	800840e <_printf_common+0x96>
 80083c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c4:	1e13      	subs	r3, r2, #0
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	bf18      	it	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	0692      	lsls	r2, r2, #26
 80083ce:	d42b      	bmi.n	8008428 <_printf_common+0xb0>
 80083d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d4:	4649      	mov	r1, r9
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	3001      	adds	r0, #1
 80083dc:	d01e      	beq.n	800841c <_printf_common+0xa4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	68e5      	ldr	r5, [r4, #12]
 80083e2:	6832      	ldr	r2, [r6, #0]
 80083e4:	f003 0306 	and.w	r3, r3, #6
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	bf08      	it	eq
 80083ec:	1aad      	subeq	r5, r5, r2
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	6922      	ldr	r2, [r4, #16]
 80083f2:	bf0c      	ite	eq
 80083f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f8:	2500      	movne	r5, #0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bfc4      	itt	gt
 80083fe:	1a9b      	subgt	r3, r3, r2
 8008400:	18ed      	addgt	r5, r5, r3
 8008402:	2600      	movs	r6, #0
 8008404:	341a      	adds	r4, #26
 8008406:	42b5      	cmp	r5, r6
 8008408:	d11a      	bne.n	8008440 <_printf_common+0xc8>
 800840a:	2000      	movs	r0, #0
 800840c:	e008      	b.n	8008420 <_printf_common+0xa8>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4649      	mov	r1, r9
 8008414:	4638      	mov	r0, r7
 8008416:	47c0      	blx	r8
 8008418:	3001      	adds	r0, #1
 800841a:	d103      	bne.n	8008424 <_printf_common+0xac>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	3501      	adds	r5, #1
 8008426:	e7c6      	b.n	80083b6 <_printf_common+0x3e>
 8008428:	18e1      	adds	r1, r4, r3
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	2030      	movs	r0, #48	; 0x30
 800842e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008432:	4422      	add	r2, r4
 8008434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800843c:	3302      	adds	r3, #2
 800843e:	e7c7      	b.n	80083d0 <_printf_common+0x58>
 8008440:	2301      	movs	r3, #1
 8008442:	4622      	mov	r2, r4
 8008444:	4649      	mov	r1, r9
 8008446:	4638      	mov	r0, r7
 8008448:	47c0      	blx	r8
 800844a:	3001      	adds	r0, #1
 800844c:	d0e6      	beq.n	800841c <_printf_common+0xa4>
 800844e:	3601      	adds	r6, #1
 8008450:	e7d9      	b.n	8008406 <_printf_common+0x8e>
	...

08008454 <_printf_i>:
 8008454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	7e0f      	ldrb	r7, [r1, #24]
 800845a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800845c:	2f78      	cmp	r7, #120	; 0x78
 800845e:	4691      	mov	r9, r2
 8008460:	4680      	mov	r8, r0
 8008462:	460c      	mov	r4, r1
 8008464:	469a      	mov	sl, r3
 8008466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800846a:	d807      	bhi.n	800847c <_printf_i+0x28>
 800846c:	2f62      	cmp	r7, #98	; 0x62
 800846e:	d80a      	bhi.n	8008486 <_printf_i+0x32>
 8008470:	2f00      	cmp	r7, #0
 8008472:	f000 80d8 	beq.w	8008626 <_printf_i+0x1d2>
 8008476:	2f58      	cmp	r7, #88	; 0x58
 8008478:	f000 80a3 	beq.w	80085c2 <_printf_i+0x16e>
 800847c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008484:	e03a      	b.n	80084fc <_printf_i+0xa8>
 8008486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800848a:	2b15      	cmp	r3, #21
 800848c:	d8f6      	bhi.n	800847c <_printf_i+0x28>
 800848e:	a101      	add	r1, pc, #4	; (adr r1, 8008494 <_printf_i+0x40>)
 8008490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008494:	080084ed 	.word	0x080084ed
 8008498:	08008501 	.word	0x08008501
 800849c:	0800847d 	.word	0x0800847d
 80084a0:	0800847d 	.word	0x0800847d
 80084a4:	0800847d 	.word	0x0800847d
 80084a8:	0800847d 	.word	0x0800847d
 80084ac:	08008501 	.word	0x08008501
 80084b0:	0800847d 	.word	0x0800847d
 80084b4:	0800847d 	.word	0x0800847d
 80084b8:	0800847d 	.word	0x0800847d
 80084bc:	0800847d 	.word	0x0800847d
 80084c0:	0800860d 	.word	0x0800860d
 80084c4:	08008531 	.word	0x08008531
 80084c8:	080085ef 	.word	0x080085ef
 80084cc:	0800847d 	.word	0x0800847d
 80084d0:	0800847d 	.word	0x0800847d
 80084d4:	0800862f 	.word	0x0800862f
 80084d8:	0800847d 	.word	0x0800847d
 80084dc:	08008531 	.word	0x08008531
 80084e0:	0800847d 	.word	0x0800847d
 80084e4:	0800847d 	.word	0x0800847d
 80084e8:	080085f7 	.word	0x080085f7
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	1d1a      	adds	r2, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	602a      	str	r2, [r5, #0]
 80084f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084fc:	2301      	movs	r3, #1
 80084fe:	e0a3      	b.n	8008648 <_printf_i+0x1f4>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	6829      	ldr	r1, [r5, #0]
 8008504:	0606      	lsls	r6, r0, #24
 8008506:	f101 0304 	add.w	r3, r1, #4
 800850a:	d50a      	bpl.n	8008522 <_printf_i+0xce>
 800850c:	680e      	ldr	r6, [r1, #0]
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	2e00      	cmp	r6, #0
 8008512:	da03      	bge.n	800851c <_printf_i+0xc8>
 8008514:	232d      	movs	r3, #45	; 0x2d
 8008516:	4276      	negs	r6, r6
 8008518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800851c:	485e      	ldr	r0, [pc, #376]	; (8008698 <_printf_i+0x244>)
 800851e:	230a      	movs	r3, #10
 8008520:	e019      	b.n	8008556 <_printf_i+0x102>
 8008522:	680e      	ldr	r6, [r1, #0]
 8008524:	602b      	str	r3, [r5, #0]
 8008526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800852a:	bf18      	it	ne
 800852c:	b236      	sxthne	r6, r6
 800852e:	e7ef      	b.n	8008510 <_printf_i+0xbc>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	1d19      	adds	r1, r3, #4
 8008536:	6029      	str	r1, [r5, #0]
 8008538:	0601      	lsls	r1, r0, #24
 800853a:	d501      	bpl.n	8008540 <_printf_i+0xec>
 800853c:	681e      	ldr	r6, [r3, #0]
 800853e:	e002      	b.n	8008546 <_printf_i+0xf2>
 8008540:	0646      	lsls	r6, r0, #25
 8008542:	d5fb      	bpl.n	800853c <_printf_i+0xe8>
 8008544:	881e      	ldrh	r6, [r3, #0]
 8008546:	4854      	ldr	r0, [pc, #336]	; (8008698 <_printf_i+0x244>)
 8008548:	2f6f      	cmp	r7, #111	; 0x6f
 800854a:	bf0c      	ite	eq
 800854c:	2308      	moveq	r3, #8
 800854e:	230a      	movne	r3, #10
 8008550:	2100      	movs	r1, #0
 8008552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008556:	6865      	ldr	r5, [r4, #4]
 8008558:	60a5      	str	r5, [r4, #8]
 800855a:	2d00      	cmp	r5, #0
 800855c:	bfa2      	ittt	ge
 800855e:	6821      	ldrge	r1, [r4, #0]
 8008560:	f021 0104 	bicge.w	r1, r1, #4
 8008564:	6021      	strge	r1, [r4, #0]
 8008566:	b90e      	cbnz	r6, 800856c <_printf_i+0x118>
 8008568:	2d00      	cmp	r5, #0
 800856a:	d04d      	beq.n	8008608 <_printf_i+0x1b4>
 800856c:	4615      	mov	r5, r2
 800856e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008572:	fb03 6711 	mls	r7, r3, r1, r6
 8008576:	5dc7      	ldrb	r7, [r0, r7]
 8008578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800857c:	4637      	mov	r7, r6
 800857e:	42bb      	cmp	r3, r7
 8008580:	460e      	mov	r6, r1
 8008582:	d9f4      	bls.n	800856e <_printf_i+0x11a>
 8008584:	2b08      	cmp	r3, #8
 8008586:	d10b      	bne.n	80085a0 <_printf_i+0x14c>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	07de      	lsls	r6, r3, #31
 800858c:	d508      	bpl.n	80085a0 <_printf_i+0x14c>
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	4299      	cmp	r1, r3
 8008594:	bfde      	ittt	le
 8008596:	2330      	movle	r3, #48	; 0x30
 8008598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800859c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085a0:	1b52      	subs	r2, r2, r5
 80085a2:	6122      	str	r2, [r4, #16]
 80085a4:	f8cd a000 	str.w	sl, [sp]
 80085a8:	464b      	mov	r3, r9
 80085aa:	aa03      	add	r2, sp, #12
 80085ac:	4621      	mov	r1, r4
 80085ae:	4640      	mov	r0, r8
 80085b0:	f7ff fee2 	bl	8008378 <_printf_common>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d14c      	bne.n	8008652 <_printf_i+0x1fe>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	b004      	add	sp, #16
 80085be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c2:	4835      	ldr	r0, [pc, #212]	; (8008698 <_printf_i+0x244>)
 80085c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085c8:	6829      	ldr	r1, [r5, #0]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80085d0:	6029      	str	r1, [r5, #0]
 80085d2:	061d      	lsls	r5, r3, #24
 80085d4:	d514      	bpl.n	8008600 <_printf_i+0x1ac>
 80085d6:	07df      	lsls	r7, r3, #31
 80085d8:	bf44      	itt	mi
 80085da:	f043 0320 	orrmi.w	r3, r3, #32
 80085de:	6023      	strmi	r3, [r4, #0]
 80085e0:	b91e      	cbnz	r6, 80085ea <_printf_i+0x196>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f023 0320 	bic.w	r3, r3, #32
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	2310      	movs	r3, #16
 80085ec:	e7b0      	b.n	8008550 <_printf_i+0xfc>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f043 0320 	orr.w	r3, r3, #32
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	2378      	movs	r3, #120	; 0x78
 80085f8:	4828      	ldr	r0, [pc, #160]	; (800869c <_printf_i+0x248>)
 80085fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085fe:	e7e3      	b.n	80085c8 <_printf_i+0x174>
 8008600:	0659      	lsls	r1, r3, #25
 8008602:	bf48      	it	mi
 8008604:	b2b6      	uxthmi	r6, r6
 8008606:	e7e6      	b.n	80085d6 <_printf_i+0x182>
 8008608:	4615      	mov	r5, r2
 800860a:	e7bb      	b.n	8008584 <_printf_i+0x130>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	6826      	ldr	r6, [r4, #0]
 8008610:	6961      	ldr	r1, [r4, #20]
 8008612:	1d18      	adds	r0, r3, #4
 8008614:	6028      	str	r0, [r5, #0]
 8008616:	0635      	lsls	r5, r6, #24
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	d501      	bpl.n	8008620 <_printf_i+0x1cc>
 800861c:	6019      	str	r1, [r3, #0]
 800861e:	e002      	b.n	8008626 <_printf_i+0x1d2>
 8008620:	0670      	lsls	r0, r6, #25
 8008622:	d5fb      	bpl.n	800861c <_printf_i+0x1c8>
 8008624:	8019      	strh	r1, [r3, #0]
 8008626:	2300      	movs	r3, #0
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	4615      	mov	r5, r2
 800862c:	e7ba      	b.n	80085a4 <_printf_i+0x150>
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	681d      	ldr	r5, [r3, #0]
 8008636:	6862      	ldr	r2, [r4, #4]
 8008638:	2100      	movs	r1, #0
 800863a:	4628      	mov	r0, r5
 800863c:	f7f7 fe50 	bl	80002e0 <memchr>
 8008640:	b108      	cbz	r0, 8008646 <_printf_i+0x1f2>
 8008642:	1b40      	subs	r0, r0, r5
 8008644:	6060      	str	r0, [r4, #4]
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	6123      	str	r3, [r4, #16]
 800864a:	2300      	movs	r3, #0
 800864c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008650:	e7a8      	b.n	80085a4 <_printf_i+0x150>
 8008652:	6923      	ldr	r3, [r4, #16]
 8008654:	462a      	mov	r2, r5
 8008656:	4649      	mov	r1, r9
 8008658:	4640      	mov	r0, r8
 800865a:	47d0      	blx	sl
 800865c:	3001      	adds	r0, #1
 800865e:	d0ab      	beq.n	80085b8 <_printf_i+0x164>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	079b      	lsls	r3, r3, #30
 8008664:	d413      	bmi.n	800868e <_printf_i+0x23a>
 8008666:	68e0      	ldr	r0, [r4, #12]
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	4298      	cmp	r0, r3
 800866c:	bfb8      	it	lt
 800866e:	4618      	movlt	r0, r3
 8008670:	e7a4      	b.n	80085bc <_printf_i+0x168>
 8008672:	2301      	movs	r3, #1
 8008674:	4632      	mov	r2, r6
 8008676:	4649      	mov	r1, r9
 8008678:	4640      	mov	r0, r8
 800867a:	47d0      	blx	sl
 800867c:	3001      	adds	r0, #1
 800867e:	d09b      	beq.n	80085b8 <_printf_i+0x164>
 8008680:	3501      	adds	r5, #1
 8008682:	68e3      	ldr	r3, [r4, #12]
 8008684:	9903      	ldr	r1, [sp, #12]
 8008686:	1a5b      	subs	r3, r3, r1
 8008688:	42ab      	cmp	r3, r5
 800868a:	dcf2      	bgt.n	8008672 <_printf_i+0x21e>
 800868c:	e7eb      	b.n	8008666 <_printf_i+0x212>
 800868e:	2500      	movs	r5, #0
 8008690:	f104 0619 	add.w	r6, r4, #25
 8008694:	e7f5      	b.n	8008682 <_printf_i+0x22e>
 8008696:	bf00      	nop
 8008698:	08008db1 	.word	0x08008db1
 800869c:	08008dc2 	.word	0x08008dc2

080086a0 <_sbrk_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	; (80086bc <_sbrk_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f8 fede 	bl	800146c <_sbrk>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_sbrk_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_sbrk_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	24000300 	.word	0x24000300

080086c0 <__sread>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	f000 fab2 	bl	8008c30 <_read_r>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	bfab      	itete	ge
 80086d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086d2:	89a3      	ldrhlt	r3, [r4, #12]
 80086d4:	181b      	addge	r3, r3, r0
 80086d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086da:	bfac      	ite	ge
 80086dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086de:	81a3      	strhlt	r3, [r4, #12]
 80086e0:	bd10      	pop	{r4, pc}

080086e2 <__swrite>:
 80086e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	461f      	mov	r7, r3
 80086e8:	898b      	ldrh	r3, [r1, #12]
 80086ea:	05db      	lsls	r3, r3, #23
 80086ec:	4605      	mov	r5, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4616      	mov	r6, r2
 80086f2:	d505      	bpl.n	8008700 <__swrite+0x1e>
 80086f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f8:	2302      	movs	r3, #2
 80086fa:	2200      	movs	r2, #0
 80086fc:	f000 f9c8 	bl	8008a90 <_lseek_r>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	f000 b869 	b.w	80087ec <_write_r>

0800871a <__sseek>:
 800871a:	b510      	push	{r4, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 f9b5 	bl	8008a90 <_lseek_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	bf15      	itete	ne
 800872c:	6560      	strne	r0, [r4, #84]	; 0x54
 800872e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008736:	81a3      	strheq	r3, [r4, #12]
 8008738:	bf18      	it	ne
 800873a:	81a3      	strhne	r3, [r4, #12]
 800873c:	bd10      	pop	{r4, pc}

0800873e <__sclose>:
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 b8d3 	b.w	80088ec <_close_r>
	...

08008748 <__swbuf_r>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	460e      	mov	r6, r1
 800874c:	4614      	mov	r4, r2
 800874e:	4605      	mov	r5, r0
 8008750:	b118      	cbz	r0, 800875a <__swbuf_r+0x12>
 8008752:	6983      	ldr	r3, [r0, #24]
 8008754:	b90b      	cbnz	r3, 800875a <__swbuf_r+0x12>
 8008756:	f7ff fb81 	bl	8007e5c <__sinit>
 800875a:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <__swbuf_r+0x98>)
 800875c:	429c      	cmp	r4, r3
 800875e:	d12b      	bne.n	80087b8 <__swbuf_r+0x70>
 8008760:	686c      	ldr	r4, [r5, #4]
 8008762:	69a3      	ldr	r3, [r4, #24]
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	071a      	lsls	r2, r3, #28
 800876a:	d52f      	bpl.n	80087cc <__swbuf_r+0x84>
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	b36b      	cbz	r3, 80087cc <__swbuf_r+0x84>
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	6820      	ldr	r0, [r4, #0]
 8008774:	1ac0      	subs	r0, r0, r3
 8008776:	6963      	ldr	r3, [r4, #20]
 8008778:	b2f6      	uxtb	r6, r6
 800877a:	4283      	cmp	r3, r0
 800877c:	4637      	mov	r7, r6
 800877e:	dc04      	bgt.n	800878a <__swbuf_r+0x42>
 8008780:	4621      	mov	r1, r4
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f948 	bl	8008a18 <_fflush_r>
 8008788:	bb30      	cbnz	r0, 80087d8 <__swbuf_r+0x90>
 800878a:	68a3      	ldr	r3, [r4, #8]
 800878c:	3b01      	subs	r3, #1
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	701e      	strb	r6, [r3, #0]
 8008798:	6963      	ldr	r3, [r4, #20]
 800879a:	3001      	adds	r0, #1
 800879c:	4283      	cmp	r3, r0
 800879e:	d004      	beq.n	80087aa <__swbuf_r+0x62>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	07db      	lsls	r3, r3, #31
 80087a4:	d506      	bpl.n	80087b4 <__swbuf_r+0x6c>
 80087a6:	2e0a      	cmp	r6, #10
 80087a8:	d104      	bne.n	80087b4 <__swbuf_r+0x6c>
 80087aa:	4621      	mov	r1, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	f000 f933 	bl	8008a18 <_fflush_r>
 80087b2:	b988      	cbnz	r0, 80087d8 <__swbuf_r+0x90>
 80087b4:	4638      	mov	r0, r7
 80087b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b8:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <__swbuf_r+0x9c>)
 80087ba:	429c      	cmp	r4, r3
 80087bc:	d101      	bne.n	80087c2 <__swbuf_r+0x7a>
 80087be:	68ac      	ldr	r4, [r5, #8]
 80087c0:	e7cf      	b.n	8008762 <__swbuf_r+0x1a>
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <__swbuf_r+0xa0>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	bf08      	it	eq
 80087c8:	68ec      	ldreq	r4, [r5, #12]
 80087ca:	e7ca      	b.n	8008762 <__swbuf_r+0x1a>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 f81e 	bl	8008810 <__swsetup_r>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d0cb      	beq.n	8008770 <__swbuf_r+0x28>
 80087d8:	f04f 37ff 	mov.w	r7, #4294967295
 80087dc:	e7ea      	b.n	80087b4 <__swbuf_r+0x6c>
 80087de:	bf00      	nop
 80087e0:	08008d60 	.word	0x08008d60
 80087e4:	08008d80 	.word	0x08008d80
 80087e8:	08008d40 	.word	0x08008d40

080087ec <_write_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	; (800880c <_write_r+0x20>)
 80087f0:	4604      	mov	r4, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	602a      	str	r2, [r5, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f7f8 fde5 	bl	80013ca <_write>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_write_r+0x1e>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_write_r+0x1e>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	24000300 	.word	0x24000300

08008810 <__swsetup_r>:
 8008810:	4b32      	ldr	r3, [pc, #200]	; (80088dc <__swsetup_r+0xcc>)
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	681d      	ldr	r5, [r3, #0]
 8008816:	4606      	mov	r6, r0
 8008818:	460c      	mov	r4, r1
 800881a:	b125      	cbz	r5, 8008826 <__swsetup_r+0x16>
 800881c:	69ab      	ldr	r3, [r5, #24]
 800881e:	b913      	cbnz	r3, 8008826 <__swsetup_r+0x16>
 8008820:	4628      	mov	r0, r5
 8008822:	f7ff fb1b 	bl	8007e5c <__sinit>
 8008826:	4b2e      	ldr	r3, [pc, #184]	; (80088e0 <__swsetup_r+0xd0>)
 8008828:	429c      	cmp	r4, r3
 800882a:	d10f      	bne.n	800884c <__swsetup_r+0x3c>
 800882c:	686c      	ldr	r4, [r5, #4]
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008834:	0719      	lsls	r1, r3, #28
 8008836:	d42c      	bmi.n	8008892 <__swsetup_r+0x82>
 8008838:	06dd      	lsls	r5, r3, #27
 800883a:	d411      	bmi.n	8008860 <__swsetup_r+0x50>
 800883c:	2309      	movs	r3, #9
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	f04f 30ff 	mov.w	r0, #4294967295
 800884a:	e03e      	b.n	80088ca <__swsetup_r+0xba>
 800884c:	4b25      	ldr	r3, [pc, #148]	; (80088e4 <__swsetup_r+0xd4>)
 800884e:	429c      	cmp	r4, r3
 8008850:	d101      	bne.n	8008856 <__swsetup_r+0x46>
 8008852:	68ac      	ldr	r4, [r5, #8]
 8008854:	e7eb      	b.n	800882e <__swsetup_r+0x1e>
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <__swsetup_r+0xd8>)
 8008858:	429c      	cmp	r4, r3
 800885a:	bf08      	it	eq
 800885c:	68ec      	ldreq	r4, [r5, #12]
 800885e:	e7e6      	b.n	800882e <__swsetup_r+0x1e>
 8008860:	0758      	lsls	r0, r3, #29
 8008862:	d512      	bpl.n	800888a <__swsetup_r+0x7a>
 8008864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008866:	b141      	cbz	r1, 800887a <__swsetup_r+0x6a>
 8008868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800886c:	4299      	cmp	r1, r3
 800886e:	d002      	beq.n	8008876 <__swsetup_r+0x66>
 8008870:	4630      	mov	r0, r6
 8008872:	f000 f991 	bl	8008b98 <_free_r>
 8008876:	2300      	movs	r3, #0
 8008878:	6363      	str	r3, [r4, #52]	; 0x34
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	2300      	movs	r3, #0
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f043 0308 	orr.w	r3, r3, #8
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	b94b      	cbnz	r3, 80088aa <__swsetup_r+0x9a>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800889c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a0:	d003      	beq.n	80088aa <__swsetup_r+0x9a>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4630      	mov	r0, r6
 80088a6:	f000 f92b 	bl	8008b00 <__smakebuf_r>
 80088aa:	89a0      	ldrh	r0, [r4, #12]
 80088ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b0:	f010 0301 	ands.w	r3, r0, #1
 80088b4:	d00a      	beq.n	80088cc <__swsetup_r+0xbc>
 80088b6:	2300      	movs	r3, #0
 80088b8:	60a3      	str	r3, [r4, #8]
 80088ba:	6963      	ldr	r3, [r4, #20]
 80088bc:	425b      	negs	r3, r3
 80088be:	61a3      	str	r3, [r4, #24]
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	b943      	cbnz	r3, 80088d6 <__swsetup_r+0xc6>
 80088c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088c8:	d1ba      	bne.n	8008840 <__swsetup_r+0x30>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	0781      	lsls	r1, r0, #30
 80088ce:	bf58      	it	pl
 80088d0:	6963      	ldrpl	r3, [r4, #20]
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	e7f4      	b.n	80088c0 <__swsetup_r+0xb0>
 80088d6:	2000      	movs	r0, #0
 80088d8:	e7f7      	b.n	80088ca <__swsetup_r+0xba>
 80088da:	bf00      	nop
 80088dc:	24000010 	.word	0x24000010
 80088e0:	08008d60 	.word	0x08008d60
 80088e4:	08008d80 	.word	0x08008d80
 80088e8:	08008d40 	.word	0x08008d40

080088ec <_close_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d06      	ldr	r5, [pc, #24]	; (8008908 <_close_r+0x1c>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	f7f8 fd83 	bl	8001402 <_close>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_close_r+0x1a>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_close_r+0x1a>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	24000300 	.word	0x24000300

0800890c <__sflush_r>:
 800890c:	898a      	ldrh	r2, [r1, #12]
 800890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008912:	4605      	mov	r5, r0
 8008914:	0710      	lsls	r0, r2, #28
 8008916:	460c      	mov	r4, r1
 8008918:	d458      	bmi.n	80089cc <__sflush_r+0xc0>
 800891a:	684b      	ldr	r3, [r1, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dc05      	bgt.n	800892c <__sflush_r+0x20>
 8008920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	dc02      	bgt.n	800892c <__sflush_r+0x20>
 8008926:	2000      	movs	r0, #0
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800892e:	2e00      	cmp	r6, #0
 8008930:	d0f9      	beq.n	8008926 <__sflush_r+0x1a>
 8008932:	2300      	movs	r3, #0
 8008934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008938:	682f      	ldr	r7, [r5, #0]
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	d032      	beq.n	80089a4 <__sflush_r+0x98>
 800893e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	075a      	lsls	r2, r3, #29
 8008944:	d505      	bpl.n	8008952 <__sflush_r+0x46>
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	1ac0      	subs	r0, r0, r3
 800894a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800894c:	b10b      	cbz	r3, 8008952 <__sflush_r+0x46>
 800894e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008950:	1ac0      	subs	r0, r0, r3
 8008952:	2300      	movs	r3, #0
 8008954:	4602      	mov	r2, r0
 8008956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008958:	6a21      	ldr	r1, [r4, #32]
 800895a:	4628      	mov	r0, r5
 800895c:	47b0      	blx	r6
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	d106      	bne.n	8008972 <__sflush_r+0x66>
 8008964:	6829      	ldr	r1, [r5, #0]
 8008966:	291d      	cmp	r1, #29
 8008968:	d82c      	bhi.n	80089c4 <__sflush_r+0xb8>
 800896a:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <__sflush_r+0x108>)
 800896c:	40ca      	lsrs	r2, r1
 800896e:	07d6      	lsls	r6, r2, #31
 8008970:	d528      	bpl.n	80089c4 <__sflush_r+0xb8>
 8008972:	2200      	movs	r2, #0
 8008974:	6062      	str	r2, [r4, #4]
 8008976:	04d9      	lsls	r1, r3, #19
 8008978:	6922      	ldr	r2, [r4, #16]
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	d504      	bpl.n	8008988 <__sflush_r+0x7c>
 800897e:	1c42      	adds	r2, r0, #1
 8008980:	d101      	bne.n	8008986 <__sflush_r+0x7a>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	b903      	cbnz	r3, 8008988 <__sflush_r+0x7c>
 8008986:	6560      	str	r0, [r4, #84]	; 0x54
 8008988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898a:	602f      	str	r7, [r5, #0]
 800898c:	2900      	cmp	r1, #0
 800898e:	d0ca      	beq.n	8008926 <__sflush_r+0x1a>
 8008990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008994:	4299      	cmp	r1, r3
 8008996:	d002      	beq.n	800899e <__sflush_r+0x92>
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f8fd 	bl	8008b98 <_free_r>
 800899e:	2000      	movs	r0, #0
 80089a0:	6360      	str	r0, [r4, #52]	; 0x34
 80089a2:	e7c1      	b.n	8008928 <__sflush_r+0x1c>
 80089a4:	6a21      	ldr	r1, [r4, #32]
 80089a6:	2301      	movs	r3, #1
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b0      	blx	r6
 80089ac:	1c41      	adds	r1, r0, #1
 80089ae:	d1c7      	bne.n	8008940 <__sflush_r+0x34>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c4      	beq.n	8008940 <__sflush_r+0x34>
 80089b6:	2b1d      	cmp	r3, #29
 80089b8:	d001      	beq.n	80089be <__sflush_r+0xb2>
 80089ba:	2b16      	cmp	r3, #22
 80089bc:	d101      	bne.n	80089c2 <__sflush_r+0xb6>
 80089be:	602f      	str	r7, [r5, #0]
 80089c0:	e7b1      	b.n	8008926 <__sflush_r+0x1a>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	e7ad      	b.n	8008928 <__sflush_r+0x1c>
 80089cc:	690f      	ldr	r7, [r1, #16]
 80089ce:	2f00      	cmp	r7, #0
 80089d0:	d0a9      	beq.n	8008926 <__sflush_r+0x1a>
 80089d2:	0793      	lsls	r3, r2, #30
 80089d4:	680e      	ldr	r6, [r1, #0]
 80089d6:	bf08      	it	eq
 80089d8:	694b      	ldreq	r3, [r1, #20]
 80089da:	600f      	str	r7, [r1, #0]
 80089dc:	bf18      	it	ne
 80089de:	2300      	movne	r3, #0
 80089e0:	eba6 0807 	sub.w	r8, r6, r7
 80089e4:	608b      	str	r3, [r1, #8]
 80089e6:	f1b8 0f00 	cmp.w	r8, #0
 80089ea:	dd9c      	ble.n	8008926 <__sflush_r+0x1a>
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089f0:	4643      	mov	r3, r8
 80089f2:	463a      	mov	r2, r7
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b0      	blx	r6
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dc06      	bgt.n	8008a0a <__sflush_r+0xfe>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	e78e      	b.n	8008928 <__sflush_r+0x1c>
 8008a0a:	4407      	add	r7, r0
 8008a0c:	eba8 0800 	sub.w	r8, r8, r0
 8008a10:	e7e9      	b.n	80089e6 <__sflush_r+0xda>
 8008a12:	bf00      	nop
 8008a14:	20400001 	.word	0x20400001

08008a18 <_fflush_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	690b      	ldr	r3, [r1, #16]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b913      	cbnz	r3, 8008a28 <_fflush_r+0x10>
 8008a22:	2500      	movs	r5, #0
 8008a24:	4628      	mov	r0, r5
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	b118      	cbz	r0, 8008a32 <_fflush_r+0x1a>
 8008a2a:	6983      	ldr	r3, [r0, #24]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <_fflush_r+0x1a>
 8008a2e:	f7ff fa15 	bl	8007e5c <__sinit>
 8008a32:	4b14      	ldr	r3, [pc, #80]	; (8008a84 <_fflush_r+0x6c>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d11b      	bne.n	8008a70 <_fflush_r+0x58>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0ef      	beq.n	8008a22 <_fflush_r+0xa>
 8008a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a44:	07d0      	lsls	r0, r2, #31
 8008a46:	d404      	bmi.n	8008a52 <_fflush_r+0x3a>
 8008a48:	0599      	lsls	r1, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_fflush_r+0x3a>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4e:	f7ff faa3 	bl	8007f98 <__retarget_lock_acquire_recursive>
 8008a52:	4628      	mov	r0, r5
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7ff ff59 	bl	800890c <__sflush_r>
 8008a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a5c:	07da      	lsls	r2, r3, #31
 8008a5e:	4605      	mov	r5, r0
 8008a60:	d4e0      	bmi.n	8008a24 <_fflush_r+0xc>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	059b      	lsls	r3, r3, #22
 8008a66:	d4dd      	bmi.n	8008a24 <_fflush_r+0xc>
 8008a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6a:	f7ff fa96 	bl	8007f9a <__retarget_lock_release_recursive>
 8008a6e:	e7d9      	b.n	8008a24 <_fflush_r+0xc>
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <_fflush_r+0x70>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d101      	bne.n	8008a7a <_fflush_r+0x62>
 8008a76:	68ac      	ldr	r4, [r5, #8]
 8008a78:	e7df      	b.n	8008a3a <_fflush_r+0x22>
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <_fflush_r+0x74>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	bf08      	it	eq
 8008a80:	68ec      	ldreq	r4, [r5, #12]
 8008a82:	e7da      	b.n	8008a3a <_fflush_r+0x22>
 8008a84:	08008d60 	.word	0x08008d60
 8008a88:	08008d80 	.word	0x08008d80
 8008a8c:	08008d40 	.word	0x08008d40

08008a90 <_lseek_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d07      	ldr	r5, [pc, #28]	; (8008ab0 <_lseek_r+0x20>)
 8008a94:	4604      	mov	r4, r0
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	602a      	str	r2, [r5, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f7f8 fcd6 	bl	8001450 <_lseek>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_lseek_r+0x1e>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_lseek_r+0x1e>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	24000300 	.word	0x24000300

08008ab4 <__swhatbuf_r>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	460e      	mov	r6, r1
 8008ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abc:	2900      	cmp	r1, #0
 8008abe:	b096      	sub	sp, #88	; 0x58
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	461d      	mov	r5, r3
 8008ac4:	da08      	bge.n	8008ad8 <__swhatbuf_r+0x24>
 8008ac6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	061a      	lsls	r2, r3, #24
 8008ad0:	d410      	bmi.n	8008af4 <__swhatbuf_r+0x40>
 8008ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ad6:	e00e      	b.n	8008af6 <__swhatbuf_r+0x42>
 8008ad8:	466a      	mov	r2, sp
 8008ada:	f000 f8bb 	bl	8008c54 <_fstat_r>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	dbf1      	blt.n	8008ac6 <__swhatbuf_r+0x12>
 8008ae2:	9a01      	ldr	r2, [sp, #4]
 8008ae4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ae8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008aec:	425a      	negs	r2, r3
 8008aee:	415a      	adcs	r2, r3
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	e7ee      	b.n	8008ad2 <__swhatbuf_r+0x1e>
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	2000      	movs	r0, #0
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	b016      	add	sp, #88	; 0x58
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b00 <__smakebuf_r>:
 8008b00:	898b      	ldrh	r3, [r1, #12]
 8008b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b04:	079d      	lsls	r5, r3, #30
 8008b06:	4606      	mov	r6, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	d507      	bpl.n	8008b1c <__smakebuf_r+0x1c>
 8008b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	6123      	str	r3, [r4, #16]
 8008b14:	2301      	movs	r3, #1
 8008b16:	6163      	str	r3, [r4, #20]
 8008b18:	b002      	add	sp, #8
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	ab01      	add	r3, sp, #4
 8008b1e:	466a      	mov	r2, sp
 8008b20:	f7ff ffc8 	bl	8008ab4 <__swhatbuf_r>
 8008b24:	9900      	ldr	r1, [sp, #0]
 8008b26:	4605      	mov	r5, r0
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff fa57 	bl	8007fdc <_malloc_r>
 8008b2e:	b948      	cbnz	r0, 8008b44 <__smakebuf_r+0x44>
 8008b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b34:	059a      	lsls	r2, r3, #22
 8008b36:	d4ef      	bmi.n	8008b18 <__smakebuf_r+0x18>
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	f043 0302 	orr.w	r3, r3, #2
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	e7e3      	b.n	8008b0c <__smakebuf_r+0xc>
 8008b44:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <__smakebuf_r+0x7c>)
 8008b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b48:	89a3      	ldrh	r3, [r4, #12]
 8008b4a:	6020      	str	r0, [r4, #0]
 8008b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	9b00      	ldr	r3, [sp, #0]
 8008b54:	6163      	str	r3, [r4, #20]
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	6120      	str	r0, [r4, #16]
 8008b5a:	b15b      	cbz	r3, 8008b74 <__smakebuf_r+0x74>
 8008b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b60:	4630      	mov	r0, r6
 8008b62:	f000 f889 	bl	8008c78 <_isatty_r>
 8008b66:	b128      	cbz	r0, 8008b74 <__smakebuf_r+0x74>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	f043 0301 	orr.w	r3, r3, #1
 8008b72:	81a3      	strh	r3, [r4, #12]
 8008b74:	89a0      	ldrh	r0, [r4, #12]
 8008b76:	4305      	orrs	r5, r0
 8008b78:	81a5      	strh	r5, [r4, #12]
 8008b7a:	e7cd      	b.n	8008b18 <__smakebuf_r+0x18>
 8008b7c:	08007df5 	.word	0x08007df5

08008b80 <__malloc_lock>:
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__malloc_lock+0x8>)
 8008b82:	f7ff ba09 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	240002f4 	.word	0x240002f4

08008b8c <__malloc_unlock>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__malloc_unlock+0x8>)
 8008b8e:	f7ff ba04 	b.w	8007f9a <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	240002f4 	.word	0x240002f4

08008b98 <_free_r>:
 8008b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	d044      	beq.n	8008c28 <_free_r+0x90>
 8008b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba2:	9001      	str	r0, [sp, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8008baa:	bfb8      	it	lt
 8008bac:	18e4      	addlt	r4, r4, r3
 8008bae:	f7ff ffe7 	bl	8008b80 <__malloc_lock>
 8008bb2:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <_free_r+0x94>)
 8008bb4:	9801      	ldr	r0, [sp, #4]
 8008bb6:	6813      	ldr	r3, [r2, #0]
 8008bb8:	b933      	cbnz	r3, 8008bc8 <_free_r+0x30>
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	6014      	str	r4, [r2, #0]
 8008bbe:	b003      	add	sp, #12
 8008bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bc4:	f7ff bfe2 	b.w	8008b8c <__malloc_unlock>
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	d908      	bls.n	8008bde <_free_r+0x46>
 8008bcc:	6825      	ldr	r5, [r4, #0]
 8008bce:	1961      	adds	r1, r4, r5
 8008bd0:	428b      	cmp	r3, r1
 8008bd2:	bf01      	itttt	eq
 8008bd4:	6819      	ldreq	r1, [r3, #0]
 8008bd6:	685b      	ldreq	r3, [r3, #4]
 8008bd8:	1949      	addeq	r1, r1, r5
 8008bda:	6021      	streq	r1, [r4, #0]
 8008bdc:	e7ed      	b.n	8008bba <_free_r+0x22>
 8008bde:	461a      	mov	r2, r3
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	b10b      	cbz	r3, 8008be8 <_free_r+0x50>
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	d9fa      	bls.n	8008bde <_free_r+0x46>
 8008be8:	6811      	ldr	r1, [r2, #0]
 8008bea:	1855      	adds	r5, r2, r1
 8008bec:	42a5      	cmp	r5, r4
 8008bee:	d10b      	bne.n	8008c08 <_free_r+0x70>
 8008bf0:	6824      	ldr	r4, [r4, #0]
 8008bf2:	4421      	add	r1, r4
 8008bf4:	1854      	adds	r4, r2, r1
 8008bf6:	42a3      	cmp	r3, r4
 8008bf8:	6011      	str	r1, [r2, #0]
 8008bfa:	d1e0      	bne.n	8008bbe <_free_r+0x26>
 8008bfc:	681c      	ldr	r4, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	6053      	str	r3, [r2, #4]
 8008c02:	4421      	add	r1, r4
 8008c04:	6011      	str	r1, [r2, #0]
 8008c06:	e7da      	b.n	8008bbe <_free_r+0x26>
 8008c08:	d902      	bls.n	8008c10 <_free_r+0x78>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	e7d6      	b.n	8008bbe <_free_r+0x26>
 8008c10:	6825      	ldr	r5, [r4, #0]
 8008c12:	1961      	adds	r1, r4, r5
 8008c14:	428b      	cmp	r3, r1
 8008c16:	bf04      	itt	eq
 8008c18:	6819      	ldreq	r1, [r3, #0]
 8008c1a:	685b      	ldreq	r3, [r3, #4]
 8008c1c:	6063      	str	r3, [r4, #4]
 8008c1e:	bf04      	itt	eq
 8008c20:	1949      	addeq	r1, r1, r5
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	6054      	str	r4, [r2, #4]
 8008c26:	e7ca      	b.n	8008bbe <_free_r+0x26>
 8008c28:	b003      	add	sp, #12
 8008c2a:	bd30      	pop	{r4, r5, pc}
 8008c2c:	240002f8 	.word	0x240002f8

08008c30 <_read_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d07      	ldr	r5, [pc, #28]	; (8008c50 <_read_r+0x20>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f8 fba6 	bl	8001390 <_read>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_read_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_read_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	24000300 	.word	0x24000300

08008c54 <_fstat_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	; (8008c74 <_fstat_r+0x20>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f7f8 fbda 	bl	800141a <_fstat>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d102      	bne.n	8008c70 <_fstat_r+0x1c>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	b103      	cbz	r3, 8008c70 <_fstat_r+0x1c>
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	24000300 	.word	0x24000300

08008c78 <_isatty_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	; (8008c94 <_isatty_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f8 fbd9 	bl	800143a <_isatty>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_isatty_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_isatty_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	24000300 	.word	0x24000300

08008c98 <_init>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr

08008ca4 <_fini>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr
