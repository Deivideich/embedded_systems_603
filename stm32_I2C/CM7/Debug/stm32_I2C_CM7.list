
stm32_I2C_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008878  08008878  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008880  08008880  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08008888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000074  080088fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000304  080088fc  00020304  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167f4  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002951  00000000  00000000  00036896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000391e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a39c  00000000  00000000  0003aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169e9  00000000  00000000  0007538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b197  00000000  00000000  0008bd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00206f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  00206f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008780 	.word	0x08008780

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08008780 	.word	0x08008780

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <main+0x110>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	617a      	str	r2, [r7, #20]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fa7d 	bl	8000cd8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fd43 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f875 	bl	80008d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <main+0x110>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <main+0x110>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <main+0x110>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f002 fda7 	bl	8003358 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f002 fdbd 	bl	800338c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <main+0x110>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	617a      	str	r2, [r7, #20]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fa4f 	bl	8000cd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f9c5 	bl	8000bc8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f94f 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000842:	f000 f8ff 	bl	8000a44 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000846:	f000 f8bd 	bl	80009c4 <MX_I2C2_Init>
  MX_DMA_Init();
 800084a:	f000 f995 	bl	8000b78 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  uint8_t addr_sec = 0x00; // DATA to send
 800084e:	2300      	movs	r3, #0
 8000850:	74fb      	strb	r3, [r7, #19]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Master_Transmit(&hi2c2,(0x68<<1 ),&addr_sec,sizeof(addr_sec),HAL_MAX_DELAY); //Sending in Blocking mode
 8000852:	f107 0213 	add.w	r2, r7, #19
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2301      	movs	r3, #1
 800085e:	21d0      	movs	r1, #208	; 0xd0
 8000860:	4818      	ldr	r0, [pc, #96]	; (80008c4 <main+0x114>)
 8000862:	f002 fe37 	bl	80034d4 <HAL_I2C_Master_Transmit>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000866:	2101      	movs	r1, #1
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <main+0x118>)
 800086a:	f002 fd5a 	bl	8003322 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f000 fd8c 	bl	800138c <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c2 , (0x68<<1 )+1,&msg, 7, HAL_MAX_DELAY);
 8000874:	f107 0208 	add.w	r2, r7, #8
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2307      	movs	r3, #7
 8000880:	21d1      	movs	r1, #209	; 0xd1
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <main+0x114>)
 8000884:	f002 ff1a 	bl	80036bc <HAL_I2C_Master_Receive>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000888:	2101      	movs	r1, #1
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <main+0x118>)
 800088c:	f002 fd49 	bl	8003322 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fd7b 	bl	800138c <HAL_Delay>

	  printf("%d%d\r\n",(msg[0]-128)/16, (msg[0]-128)%16);
 8000896:	7a3b      	ldrb	r3, [r7, #8]
 8000898:	3b80      	subs	r3, #128	; 0x80
 800089a:	2b00      	cmp	r3, #0
 800089c:	da00      	bge.n	80008a0 <main+0xf0>
 800089e:	330f      	adds	r3, #15
 80008a0:	111b      	asrs	r3, r3, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	7a3b      	ldrb	r3, [r7, #8]
 80008a6:	3b80      	subs	r3, #128	; 0x80
 80008a8:	425a      	negs	r2, r3
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	f002 020f 	and.w	r2, r2, #15
 80008b2:	bf58      	it	pl
 80008b4:	4253      	negpl	r3, r2
 80008b6:	461a      	mov	r2, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <main+0x11c>)
 80008ba:	f006 ffd3 	bl	8007864 <iprintf>
	  HAL_I2C_Master_Transmit(&hi2c2,(0x68<<1 ),&addr_sec,sizeof(addr_sec),HAL_MAX_DELAY); //Sending in Blocking mode
 80008be:	e7c8      	b.n	8000852 <main+0xa2>
 80008c0:	58024400 	.word	0x58024400
 80008c4:	24000090 	.word	0x24000090
 80008c8:	58020400 	.word	0x58020400
 80008cc:	08008798 	.word	0x08008798

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09c      	sub	sp, #112	; 0x70
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	224c      	movs	r2, #76	; 0x4c
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 ffb8 	bl	8007854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f006 ffb2 	bl	8007854 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f0:	2004      	movs	r0, #4
 80008f2:	f003 fb03 	bl	8003efc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <SystemClock_Config+0xec>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <SystemClock_Config+0xec>)
 8000900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <SystemClock_Config+0xec>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <SystemClock_Config+0xf0>)
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	4a2a      	ldr	r2, [pc, #168]	; (80009c0 <SystemClock_Config+0xf0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xf0>)
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000928:	bf00      	nop
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <SystemClock_Config+0xec>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000936:	d1f8      	bne.n	800092a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000938:	2301      	movs	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800093c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800094e:	23f0      	movs	r3, #240	; 0xf0
 8000950:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800095e:	2308      	movs	r3, #8
 8000960:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000962:	2300      	movs	r3, #0
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fb1e 	bl	8003fb0 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800097a:	f000 f9ad 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	233f      	movs	r3, #63	; 0x3f
 8000980:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2303      	movs	r3, #3
 8000984:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800098a:	2308      	movs	r3, #8
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2104      	movs	r1, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 ff31 	bl	800480c <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009b0:	f000 f992 	bl	8000cd8 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3770      	adds	r7, #112	; 0x70
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58024800 	.word	0x58024800
 80009c0:	58000400 	.word	0x58000400

080009c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_I2C2_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <MX_I2C2_Init+0x7c>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <MX_I2C2_Init+0x74>)
 8000a00:	f002 fcd8 	bl	80033b4 <HAL_I2C_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 f965 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <MX_I2C2_Init+0x74>)
 8000a12:	f003 f9db 	bl	8003dcc <HAL_I2CEx_ConfigAnalogFilter>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 f95c 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_I2C2_Init+0x74>)
 8000a24:	f003 fa1d 	bl	8003e62 <HAL_I2CEx_ConfigDigitalFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 f953 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000090 	.word	0x24000090
 8000a3c:	40005800 	.word	0x40005800
 8000a40:	307075b1 	.word	0x307075b1

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a4a:	4a24      	ldr	r2, [pc, #144]	; (8000adc <MX_USART2_UART_Init+0x98>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a68:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000a90:	f005 fdb0 	bl	80065f4 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a9a:	f000 f91d 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000aa2:	f006 fde3 	bl	800766c <HAL_UARTEx_SetTxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000aac:	f000 f914 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000ab4:	f006 fe18 	bl	80076e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000abe:	f000 f90b 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x94>)
 8000ac4:	f006 fd99 	bl	80075fa <HAL_UARTEx_DisableFifoMode>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 f903 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	240001cc 	.word	0x240001cc
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <MX_USART3_UART_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000aec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b2a:	f005 fd63 	bl	80065f4 <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f8d0 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b3c:	f006 fd96 	bl	800766c <HAL_UARTEx_SetTxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f000 f8c7 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b4e:	f006 fdcb 	bl	80076e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f000 f8be 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f006 fd4c 	bl	80075fa <HAL_UARTEx_DisableFifoMode>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f8b6 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2400025c 	.word	0x2400025c
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_DMA_Init+0x4c>)
 8000b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b84:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <MX_DMA_Init+0x4c>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_DMA_Init+0x4c>)
 8000b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f000 fcfe 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ba6:	200b      	movs	r0, #11
 8000ba8:	f000 fd15 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f000 fcf6 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bb6:	200c      	movs	r0, #12
 8000bb8:	f000 fd0d 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a38      	ldr	r2, [pc, #224]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_GPIO_Init+0x100>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c5c:	481b      	ldr	r0, [pc, #108]	; (8000ccc <MX_GPIO_Init+0x104>)
 8000c5e:	f002 fb47 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_TEST_GPIO_Port, Pin_TEST_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2110      	movs	r1, #16
 8000c66:	481a      	ldr	r0, [pc, #104]	; (8000cd0 <MX_GPIO_Init+0x108>)
 8000c68:	f002 fb42 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <MX_GPIO_Init+0x10c>)
 8000c82:	f002 f985 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c86:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_GPIO_Init+0x104>)
 8000ca0:	f002 f976 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_TEST_Pin */
  GPIO_InitStruct.Pin = Pin_TEST_Pin;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_TEST_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_GPIO_Init+0x108>)
 8000cbc:	f002 f968 	bl	8002f90 <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020400 	.word	0x58020400
 8000cd0:	58020c00 	.word	0x58020c00
 8000cd4:	58020800 	.word	0x58020800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cec:	1d39      	adds	r1, r7, #4
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <__io_putchar+0x20>)
 8000cf6:	f005 fccd 	bl	8006694 <HAL_UART_Transmit>
  return ch;
 8000cfa:	687b      	ldr	r3, [r7, #4]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2400025c 	.word	0x2400025c

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x30>)
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x30>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x30>)
 8000d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	58024400 	.word	0x58024400

08000d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0b8      	sub	sp, #224	; 0xe0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	22bc      	movs	r2, #188	; 0xbc
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 fd79 	bl	8007854 <memset>
  if(hi2c->Instance==I2C2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a56      	ldr	r2, [pc, #344]	; (8000ec0 <HAL_I2C_MspInit+0x184>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	f040 80a5 	bne.w	8000eb8 <HAL_I2C_MspInit+0x17c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f8d1 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000d88:	f7ff ffa6 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_I2C_MspInit+0x188>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a4c      	ldr	r2, [pc, #304]	; (8000ec4 <HAL_I2C_MspInit+0x188>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_I2C_MspInit+0x188>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db2:	2312      	movs	r3, #18
 8000db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dce:	4619      	mov	r1, r3
 8000dd0:	483d      	ldr	r0, [pc, #244]	; (8000ec8 <HAL_I2C_MspInit+0x18c>)
 8000dd2:	f002 f8dd 	bl	8002f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_I2C_MspInit+0x188>)
 8000dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ddc:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <HAL_I2C_MspInit+0x188>)
 8000dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_I2C_MspInit+0x188>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream0;
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000df6:	4a36      	ldr	r2, [pc, #216]	; (8000ed0 <HAL_I2C_MspInit+0x194>)
 8000df8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8000dfa:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000dfc:	2224      	movs	r2, #36	; 0x24
 8000dfe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e02:	2240      	movs	r2, #64	; 0x40
 8000e04:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e12:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000e32:	4826      	ldr	r0, [pc, #152]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e34:	f000 fbea 	bl	800160c <HAL_DMA_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8000e3e:	f7ff ff4b 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_I2C_MspInit+0x190>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream1;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <HAL_I2C_MspInit+0x19c>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e56:	2223      	movs	r2, #35	; 0x23
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000e8e:	f000 fbbd 	bl	800160c <HAL_DMA_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8000e98:	f7ff ff1e 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x198>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2021      	movs	r0, #33	; 0x21
 8000eae:	f000 fb78 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000eb2:	2021      	movs	r0, #33	; 0x21
 8000eb4:	f000 fb8f 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	37e0      	adds	r7, #224	; 0xe0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020400 	.word	0x58020400
 8000ecc:	240000dc 	.word	0x240000dc
 8000ed0:	40020010 	.word	0x40020010
 8000ed4:	24000154 	.word	0x24000154
 8000ed8:	40020028 	.word	0x40020028

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ba      	sub	sp, #232	; 0xe8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	22bc      	movs	r2, #188	; 0xbc
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fca9 	bl	8007854 <memset>
  if(huart->Instance==USART2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a49      	ldr	r2, [pc, #292]	; (800102c <HAL_UART_MspInit+0x150>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d142      	bne.n	8000f92 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f802 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f26:	f7ff fed7 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f30:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f48:	4b39      	ldr	r3, [pc, #228]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	4a38      	ldr	r2, [pc, #224]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f66:	2360      	movs	r3, #96	; 0x60
 8000f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482a      	ldr	r0, [pc, #168]	; (8001034 <HAL_UART_MspInit+0x158>)
 8000f8c:	f002 f800 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f90:	e047      	b.n	8001022 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_UART_MspInit+0x15c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d142      	bne.n	8001022 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 ffba 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000fb6:	f7ff fe8f 	bl	8000cd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x154>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001010:	2307      	movs	r3, #7
 8001012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001016:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_UART_MspInit+0x158>)
 800101e:	f001 ffb7 	bl	8002f90 <HAL_GPIO_Init>
}
 8001022:	bf00      	nop
 8001024:	37e8      	adds	r7, #232	; 0xe8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40004400 	.word	0x40004400
 8001030:	58024400 	.word	0x58024400
 8001034:	58020c00 	.word	0x58020c00
 8001038:	40004800 	.word	0x40004800

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f960 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001096:	f000 fe15 	bl	8001cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	240000dc 	.word	0x240000dc

080010a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Stream1_IRQHandler+0x10>)
 80010aa:	f000 fe0b 	bl	8001cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000154 	.word	0x24000154

080010b8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <I2C2_EV_IRQHandler+0x10>)
 80010be:	f002 fbf3 	bl	80038a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000090 	.word	0x24000090

080010cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e00a      	b.n	80010f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010de:	f3af 8000 	nop.w
 80010e2:	4601      	mov	r1, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	b2ca      	uxtb	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf0      	blt.n	80010de <_read+0x12>
	}

return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e009      	b.n	800112c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fddf 	bl	8000ce4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf1      	blt.n	8001118 <_write+0x12>
	}
	return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	605a      	str	r2, [r3, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f006 fb12 	bl	8007800 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24080000 	.word	0x24080000
 8001208:	00000400 	.word	0x00000400
 800120c:	240002ec 	.word	0x240002ec
 8001210:	24000308 	.word	0x24000308

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001218:	f7ff fa34 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f006 fae3 	bl	800780c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fab3 	bl	80007b0 <main>
  bx  lr
 800124a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001250:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001254:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001258:	08008888 	.word	0x08008888
  ldr r2, =_sbss
 800125c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001260:	24000304 	.word	0x24000304

08001264 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC3_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f98c 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001274:	f003 fc80 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_Init+0x68>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4913      	ldr	r1, [pc, #76]	; (80012d4 <HAL_Init+0x6c>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_Init+0x68>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_Init+0x6c>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_Init+0x70>)
 80012aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_Init+0x74>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 f814 	bl	80012e0 <HAL_InitTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e002      	b.n	80012c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012c2:	f7ff fd21 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	58024400 	.word	0x58024400
 80012d4:	080087a0 	.word	0x080087a0
 80012d8:	24000004 	.word	0x24000004
 80012dc:	24000000 	.word	0x24000000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_InitTick+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e021      	b.n	8001338 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_InitTick+0x64>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_InitTick+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f971 	bl	80015f2 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f93b 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x68>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2400000c 	.word	0x2400000c
 8001344:	24000000 	.word	0x24000000
 8001348:	24000008 	.word	0x24000008

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2400000c 	.word	0x2400000c
 8001370:	240002f0 	.word	0x240002f0

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	240002f0 	.word	0x240002f0

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2400000c 	.word	0x2400000c

080013d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetREVID+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0c1b      	lsrs	r3, r3, #16
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	5c001000 	.word	0x5c001000

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	4313      	orrs	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	05fa0000 	.word	0x05fa0000

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <__NVIC_EnableIRQ+0x38>)
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff29 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff40 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff33 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa4 	bl	8001548 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff feae 	bl	8001374 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e316      	b.n	8001c52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_DMA_Init+0x1b8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d04a      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a65      	ldr	r2, [pc, #404]	; (80017c8 <HAL_DMA_Init+0x1bc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d045      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a63      	ldr	r2, [pc, #396]	; (80017cc <HAL_DMA_Init+0x1c0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d040      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a62      	ldr	r2, [pc, #392]	; (80017d0 <HAL_DMA_Init+0x1c4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d03b      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a60      	ldr	r2, [pc, #384]	; (80017d4 <HAL_DMA_Init+0x1c8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d036      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5f      	ldr	r2, [pc, #380]	; (80017d8 <HAL_DMA_Init+0x1cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d031      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <HAL_DMA_Init+0x1d0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d02c      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a5c      	ldr	r2, [pc, #368]	; (80017e0 <HAL_DMA_Init+0x1d4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d027      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_DMA_Init+0x1d8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d022      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a59      	ldr	r2, [pc, #356]	; (80017e8 <HAL_DMA_Init+0x1dc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d01d      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_DMA_Init+0x1e0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d018      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a56      	ldr	r2, [pc, #344]	; (80017f0 <HAL_DMA_Init+0x1e4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a54      	ldr	r2, [pc, #336]	; (80017f4 <HAL_DMA_Init+0x1e8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00e      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a53      	ldr	r2, [pc, #332]	; (80017f8 <HAL_DMA_Init+0x1ec>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d009      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a51      	ldr	r2, [pc, #324]	; (80017fc <HAL_DMA_Init+0x1f0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_DMA_Init+0xb8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a50      	ldr	r2, [pc, #320]	; (8001800 <HAL_DMA_Init+0x1f4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_DMA_Init+0xbc>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_DMA_Init+0xbe>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 813b 	beq.w	8001946 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a37      	ldr	r2, [pc, #220]	; (80017c4 <HAL_DMA_Init+0x1b8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d04a      	beq.n	8001780 <HAL_DMA_Init+0x174>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a36      	ldr	r2, [pc, #216]	; (80017c8 <HAL_DMA_Init+0x1bc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d045      	beq.n	8001780 <HAL_DMA_Init+0x174>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_DMA_Init+0x1c0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d040      	beq.n	8001780 <HAL_DMA_Init+0x174>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_DMA_Init+0x1c4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d03b      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a31      	ldr	r2, [pc, #196]	; (80017d4 <HAL_DMA_Init+0x1c8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d036      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <HAL_DMA_Init+0x1cc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d031      	beq.n	8001780 <HAL_DMA_Init+0x174>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <HAL_DMA_Init+0x1d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02c      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_DMA_Init+0x1d4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d027      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <HAL_DMA_Init+0x1d8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d022      	beq.n	8001780 <HAL_DMA_Init+0x174>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <HAL_DMA_Init+0x1dc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d01d      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_DMA_Init+0x1e0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d018      	beq.n	8001780 <HAL_DMA_Init+0x174>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_DMA_Init+0x1e4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d013      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_DMA_Init+0x1e8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00e      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <HAL_DMA_Init+0x1ec>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d009      	beq.n	8001780 <HAL_DMA_Init+0x174>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a22      	ldr	r2, [pc, #136]	; (80017fc <HAL_DMA_Init+0x1f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d004      	beq.n	8001780 <HAL_DMA_Init+0x174>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_DMA_Init+0x1f4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <HAL_DMA_Init+0x186>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e007      	b.n	80017a2 <HAL_DMA_Init+0x196>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017a2:	e02f      	b.n	8001804 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a4:	f7ff fde6 	bl	8001374 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d928      	bls.n	8001804 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e246      	b.n	8001c52 <HAL_DMA_Init+0x646>
 80017c4:	40020010 	.word	0x40020010
 80017c8:	40020028 	.word	0x40020028
 80017cc:	40020040 	.word	0x40020040
 80017d0:	40020058 	.word	0x40020058
 80017d4:	40020070 	.word	0x40020070
 80017d8:	40020088 	.word	0x40020088
 80017dc:	400200a0 	.word	0x400200a0
 80017e0:	400200b8 	.word	0x400200b8
 80017e4:	40020410 	.word	0x40020410
 80017e8:	40020428 	.word	0x40020428
 80017ec:	40020440 	.word	0x40020440
 80017f0:	40020458 	.word	0x40020458
 80017f4:	40020470 	.word	0x40020470
 80017f8:	40020488 	.word	0x40020488
 80017fc:	400204a0 	.word	0x400204a0
 8001800:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1c8      	bne.n	80017a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4b83      	ldr	r3, [pc, #524]	; (8001a2c <HAL_DMA_Init+0x420>)
 800181e:	4013      	ands	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800182a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001836:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001842:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2b04      	cmp	r3, #4
 8001856:	d107      	bne.n	8001868 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4313      	orrs	r3, r2
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001868:	4b71      	ldr	r3, [pc, #452]	; (8001a30 <HAL_DMA_Init+0x424>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b71      	ldr	r3, [pc, #452]	; (8001a34 <HAL_DMA_Init+0x428>)
 800186e:	4013      	ands	r3, r2
 8001870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001874:	d328      	bcc.n	80018c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b28      	cmp	r3, #40	; 0x28
 800187c:	d903      	bls.n	8001886 <HAL_DMA_Init+0x27a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b2e      	cmp	r3, #46	; 0x2e
 8001884:	d917      	bls.n	80018b6 <HAL_DMA_Init+0x2aa>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b3e      	cmp	r3, #62	; 0x3e
 800188c:	d903      	bls.n	8001896 <HAL_DMA_Init+0x28a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b42      	cmp	r3, #66	; 0x42
 8001894:	d90f      	bls.n	80018b6 <HAL_DMA_Init+0x2aa>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b46      	cmp	r3, #70	; 0x46
 800189c:	d903      	bls.n	80018a6 <HAL_DMA_Init+0x29a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b48      	cmp	r3, #72	; 0x48
 80018a4:	d907      	bls.n	80018b6 <HAL_DMA_Init+0x2aa>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b4e      	cmp	r3, #78	; 0x4e
 80018ac:	d905      	bls.n	80018ba <HAL_DMA_Init+0x2ae>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b52      	cmp	r3, #82	; 0x52
 80018b4:	d801      	bhi.n	80018ba <HAL_DMA_Init+0x2ae>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_DMA_Init+0x2b0>
 80018ba:	2300      	movs	r3, #0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f023 0307 	bic.w	r3, r3, #7
 80018de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d117      	bne.n	8001922 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00e      	beq.n	8001922 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f001 f9b9 	bl	8002c7c <DMA_CheckFifoParam>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2240      	movs	r2, #64	; 0x40
 8001914:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e197      	b.n	8001c52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f001 f8f4 	bl	8002b18 <DMA_CalcBaseAndBitshift>
 8001930:	4603      	mov	r3, r0
 8001932:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	223f      	movs	r2, #63	; 0x3f
 800193e:	409a      	lsls	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e0cd      	b.n	8001ae2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <HAL_DMA_Init+0x42c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <HAL_DMA_Init+0x430>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01d      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a38      	ldr	r2, [pc, #224]	; (8001a40 <HAL_DMA_Init+0x434>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d018      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <HAL_DMA_Init+0x438>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a35      	ldr	r2, [pc, #212]	; (8001a48 <HAL_DMA_Init+0x43c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <HAL_DMA_Init+0x440>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d009      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <HAL_DMA_Init+0x444>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Init+0x38a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_DMA_Init+0x448>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_DMA_Init+0x38e>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_DMA_Init+0x390>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8097 	beq.w	8001ad0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_DMA_Init+0x42c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d021      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_DMA_Init+0x430>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01c      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_DMA_Init+0x434>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d017      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_DMA_Init+0x438>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d012      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_DMA_Init+0x43c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00d      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_DMA_Init+0x440>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d008      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_DMA_Init+0x444>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d003      	beq.n	80019f0 <HAL_DMA_Init+0x3e4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_DMA_Init+0x448>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_DMA_Init+0x44c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b40      	cmp	r3, #64	; 0x40
 8001a18:	d020      	beq.n	8001a5c <HAL_DMA_Init+0x450>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b80      	cmp	r3, #128	; 0x80
 8001a20:	d102      	bne.n	8001a28 <HAL_DMA_Init+0x41c>
 8001a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a26:	e01a      	b.n	8001a5e <HAL_DMA_Init+0x452>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e018      	b.n	8001a5e <HAL_DMA_Init+0x452>
 8001a2c:	fe10803f 	.word	0xfe10803f
 8001a30:	5c001000 	.word	0x5c001000
 8001a34:	ffff0000 	.word	0xffff0000
 8001a38:	58025408 	.word	0x58025408
 8001a3c:	5802541c 	.word	0x5802541c
 8001a40:	58025430 	.word	0x58025430
 8001a44:	58025444 	.word	0x58025444
 8001a48:	58025458 	.word	0x58025458
 8001a4c:	5802546c 	.word	0x5802546c
 8001a50:	58025480 	.word	0x58025480
 8001a54:	58025494 	.word	0x58025494
 8001a58:	fffe000f 	.word	0xfffe000f
 8001a5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68d2      	ldr	r2, [r2, #12]
 8001a62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <HAL_DMA_Init+0x650>)
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_DMA_Init+0x654>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	009a      	lsls	r2, r3, #2
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f001 f82f 	bl	8002b18 <DMA_CalcBaseAndBitshift>
 8001aba:	4603      	mov	r3, r0
 8001abc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	e008      	b.n	8001ae2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0b7      	b.n	8001c52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <HAL_DMA_Init+0x658>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d072      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <HAL_DMA_Init+0x65c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d06d      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5c      	ldr	r2, [pc, #368]	; (8001c6c <HAL_DMA_Init+0x660>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d068      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5a      	ldr	r2, [pc, #360]	; (8001c70 <HAL_DMA_Init+0x664>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d063      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a59      	ldr	r2, [pc, #356]	; (8001c74 <HAL_DMA_Init+0x668>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d05e      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <HAL_DMA_Init+0x66c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d059      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_DMA_Init+0x670>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d054      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a54      	ldr	r2, [pc, #336]	; (8001c80 <HAL_DMA_Init+0x674>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d04f      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a53      	ldr	r2, [pc, #332]	; (8001c84 <HAL_DMA_Init+0x678>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d04a      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <HAL_DMA_Init+0x67c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d045      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <HAL_DMA_Init+0x680>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d040      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <HAL_DMA_Init+0x684>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d03b      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_DMA_Init+0x688>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d036      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_DMA_Init+0x68c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d031      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_DMA_Init+0x690>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d02c      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_DMA_Init+0x694>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d027      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <HAL_DMA_Init+0x698>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d022      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <HAL_DMA_Init+0x69c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01d      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a44      	ldr	r2, [pc, #272]	; (8001cac <HAL_DMA_Init+0x6a0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d018      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <HAL_DMA_Init+0x6a4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a41      	ldr	r2, [pc, #260]	; (8001cb4 <HAL_DMA_Init+0x6a8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <HAL_DMA_Init+0x6ac>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <HAL_DMA_Init+0x6b0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_DMA_Init+0x5c6>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a3c      	ldr	r2, [pc, #240]	; (8001cc0 <HAL_DMA_Init+0x6b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DMA_Init+0x5ca>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_DMA_Init+0x5cc>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d032      	beq.n	8001c42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 f8c9 	bl	8002d74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b80      	cmp	r3, #128	; 0x80
 8001be8:	d102      	bne.n	8001bf0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_DMA_Init+0x624>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d80c      	bhi.n	8001c30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f001 f946 	bl	8002ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e008      	b.n	8001c42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	a7fdabf8 	.word	0xa7fdabf8
 8001c60:	cccccccd 	.word	0xcccccccd
 8001c64:	40020010 	.word	0x40020010
 8001c68:	40020028 	.word	0x40020028
 8001c6c:	40020040 	.word	0x40020040
 8001c70:	40020058 	.word	0x40020058
 8001c74:	40020070 	.word	0x40020070
 8001c78:	40020088 	.word	0x40020088
 8001c7c:	400200a0 	.word	0x400200a0
 8001c80:	400200b8 	.word	0x400200b8
 8001c84:	40020410 	.word	0x40020410
 8001c88:	40020428 	.word	0x40020428
 8001c8c:	40020440 	.word	0x40020440
 8001c90:	40020458 	.word	0x40020458
 8001c94:	40020470 	.word	0x40020470
 8001c98:	40020488 	.word	0x40020488
 8001c9c:	400204a0 	.word	0x400204a0
 8001ca0:	400204b8 	.word	0x400204b8
 8001ca4:	58025408 	.word	0x58025408
 8001ca8:	5802541c 	.word	0x5802541c
 8001cac:	58025430 	.word	0x58025430
 8001cb0:	58025444 	.word	0x58025444
 8001cb4:	58025458 	.word	0x58025458
 8001cb8:	5802546c 	.word	0x5802546c
 8001cbc:	58025480 	.word	0x58025480
 8001cc0:	58025494 	.word	0x58025494

08001cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd0:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_DMA_IRQHandler+0x1ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_DMA_IRQHandler+0x1b0>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0a9b      	lsrs	r3, r3, #10
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5f      	ldr	r2, [pc, #380]	; (8001e78 <HAL_DMA_IRQHandler+0x1b4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d04a      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <HAL_DMA_IRQHandler+0x1b8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d045      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5c      	ldr	r2, [pc, #368]	; (8001e80 <HAL_DMA_IRQHandler+0x1bc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d040      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_DMA_IRQHandler+0x1c0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d03b      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a59      	ldr	r2, [pc, #356]	; (8001e88 <HAL_DMA_IRQHandler+0x1c4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d036      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_DMA_IRQHandler+0x1c8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d031      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a56      	ldr	r2, [pc, #344]	; (8001e90 <HAL_DMA_IRQHandler+0x1cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d02c      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_DMA_IRQHandler+0x1d0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d027      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <HAL_DMA_IRQHandler+0x1d4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d022      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a51      	ldr	r2, [pc, #324]	; (8001e9c <HAL_DMA_IRQHandler+0x1d8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01d      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <HAL_DMA_IRQHandler+0x1dc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d018      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <HAL_DMA_IRQHandler+0x1e0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_DMA_IRQHandler+0x1e4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00e      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a4b      	ldr	r2, [pc, #300]	; (8001eac <HAL_DMA_IRQHandler+0x1e8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_DMA_IRQHandler+0x1ec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xd2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a48      	ldr	r2, [pc, #288]	; (8001eb4 <HAL_DMA_IRQHandler+0x1f0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_IRQHandler+0xd6>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_IRQHandler+0xd8>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 842b 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2208      	movs	r2, #8
 8001dac:	409a      	lsls	r2, r3
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80a2 	beq.w	8001efc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <HAL_DMA_IRQHandler+0x1b4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d04a      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2d      	ldr	r2, [pc, #180]	; (8001e7c <HAL_DMA_IRQHandler+0x1b8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d045      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_DMA_IRQHandler+0x1bc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d040      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <HAL_DMA_IRQHandler+0x1c0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d03b      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_DMA_IRQHandler+0x1c4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d036      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_DMA_IRQHandler+0x1c8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d031      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_DMA_IRQHandler+0x1cc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02c      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <HAL_DMA_IRQHandler+0x1d0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d027      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <HAL_DMA_IRQHandler+0x1d4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_DMA_IRQHandler+0x1d8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01d      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_DMA_IRQHandler+0x1dc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <HAL_DMA_IRQHandler+0x1e0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_DMA_IRQHandler+0x1e4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_DMA_IRQHandler+0x1e8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_DMA_IRQHandler+0x1ec>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x194>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <HAL_DMA_IRQHandler+0x1f0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d12f      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x1f4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e02e      	b.n	8001ecc <HAL_DMA_IRQHandler+0x208>
 8001e6e:	bf00      	nop
 8001e70:	24000000 	.word	0x24000000
 8001e74:	1b4e81b5 	.word	0x1b4e81b5
 8001e78:	40020010 	.word	0x40020010
 8001e7c:	40020028 	.word	0x40020028
 8001e80:	40020040 	.word	0x40020040
 8001e84:	40020058 	.word	0x40020058
 8001e88:	40020070 	.word	0x40020070
 8001e8c:	40020088 	.word	0x40020088
 8001e90:	400200a0 	.word	0x400200a0
 8001e94:	400200b8 	.word	0x400200b8
 8001e98:	40020410 	.word	0x40020410
 8001e9c:	40020428 	.word	0x40020428
 8001ea0:	40020440 	.word	0x40020440
 8001ea4:	40020458 	.word	0x40020458
 8001ea8:	40020470 	.word	0x40020470
 8001eac:	40020488 	.word	0x40020488
 8001eb0:	400204a0 	.word	0x400204a0
 8001eb4:	400204b8 	.word	0x400204b8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2208      	movs	r2, #8
 8001eea:	409a      	lsls	r2, r3
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d06e      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_DMA_IRQHandler+0x3f8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a67      	ldr	r2, [pc, #412]	; (80020c0 <HAL_DMA_IRQHandler+0x3fc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_DMA_IRQHandler+0x400>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <HAL_DMA_IRQHandler+0x404>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a63      	ldr	r2, [pc, #396]	; (80020cc <HAL_DMA_IRQHandler+0x408>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a61      	ldr	r2, [pc, #388]	; (80020d0 <HAL_DMA_IRQHandler+0x40c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_DMA_IRQHandler+0x410>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <HAL_DMA_IRQHandler+0x414>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_DMA_IRQHandler+0x418>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5b      	ldr	r2, [pc, #364]	; (80020e0 <HAL_DMA_IRQHandler+0x41c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_DMA_IRQHandler+0x420>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_DMA_IRQHandler+0x424>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_DMA_IRQHandler+0x428>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <HAL_DMA_IRQHandler+0x42c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_DMA_IRQHandler+0x430>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2ee>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_DMA_IRQHandler+0x434>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x304>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e003      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x30c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	2201      	movs	r2, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f043 0202 	orr.w	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 808f 	beq.w	8002124 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <HAL_DMA_IRQHandler+0x3f8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d04a      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2a      	ldr	r2, [pc, #168]	; (80020c0 <HAL_DMA_IRQHandler+0x3fc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d045      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_DMA_IRQHandler+0x400>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d040      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_DMA_IRQHandler+0x404>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d03b      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a26      	ldr	r2, [pc, #152]	; (80020cc <HAL_DMA_IRQHandler+0x408>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d036      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HAL_DMA_IRQHandler+0x40c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d031      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <HAL_DMA_IRQHandler+0x410>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d02c      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_DMA_IRQHandler+0x414>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d027      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <HAL_DMA_IRQHandler+0x418>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_DMA_IRQHandler+0x41c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01d      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_DMA_IRQHandler+0x420>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d018      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_DMA_IRQHandler+0x424>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <HAL_DMA_IRQHandler+0x428>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00e      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_DMA_IRQHandler+0x42c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_DMA_IRQHandler+0x430>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x3e2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_DMA_IRQHandler+0x434>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12a      	bne.n	80020fc <HAL_DMA_IRQHandler+0x438>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e023      	b.n	8002104 <HAL_DMA_IRQHandler+0x440>
 80020bc:	40020010 	.word	0x40020010
 80020c0:	40020028 	.word	0x40020028
 80020c4:	40020040 	.word	0x40020040
 80020c8:	40020058 	.word	0x40020058
 80020cc:	40020070 	.word	0x40020070
 80020d0:	40020088 	.word	0x40020088
 80020d4:	400200a0 	.word	0x400200a0
 80020d8:	400200b8 	.word	0x400200b8
 80020dc:	40020410 	.word	0x40020410
 80020e0:	40020428 	.word	0x40020428
 80020e4:	40020440 	.word	0x40020440
 80020e8:	40020458 	.word	0x40020458
 80020ec:	40020470 	.word	0x40020470
 80020f0:	40020488 	.word	0x40020488
 80020f4:	400204a0 	.word	0x400204a0
 80020f8:	400204b8 	.word	0x400204b8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2204      	movs	r2, #4
 8002112:	409a      	lsls	r2, r3
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2210      	movs	r2, #16
 800212e:	409a      	lsls	r2, r3
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a6 	beq.w	8002286 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a85      	ldr	r2, [pc, #532]	; (8002354 <HAL_DMA_IRQHandler+0x690>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d04a      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a83      	ldr	r2, [pc, #524]	; (8002358 <HAL_DMA_IRQHandler+0x694>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d045      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a82      	ldr	r2, [pc, #520]	; (800235c <HAL_DMA_IRQHandler+0x698>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d040      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a80      	ldr	r2, [pc, #512]	; (8002360 <HAL_DMA_IRQHandler+0x69c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d03b      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7f      	ldr	r2, [pc, #508]	; (8002364 <HAL_DMA_IRQHandler+0x6a0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d036      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7d      	ldr	r2, [pc, #500]	; (8002368 <HAL_DMA_IRQHandler+0x6a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_DMA_IRQHandler+0x6a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d02c      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_DMA_IRQHandler+0x6ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d027      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a79      	ldr	r2, [pc, #484]	; (8002374 <HAL_DMA_IRQHandler+0x6b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a77      	ldr	r2, [pc, #476]	; (8002378 <HAL_DMA_IRQHandler+0x6b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01d      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a76      	ldr	r2, [pc, #472]	; (800237c <HAL_DMA_IRQHandler+0x6b8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d018      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a74      	ldr	r2, [pc, #464]	; (8002380 <HAL_DMA_IRQHandler+0x6bc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a73      	ldr	r2, [pc, #460]	; (8002384 <HAL_DMA_IRQHandler+0x6c0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00e      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a71      	ldr	r2, [pc, #452]	; (8002388 <HAL_DMA_IRQHandler+0x6c4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a70      	ldr	r2, [pc, #448]	; (800238c <HAL_DMA_IRQHandler+0x6c8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_DMA_IRQHandler+0x516>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6e      	ldr	r2, [pc, #440]	; (8002390 <HAL_DMA_IRQHandler+0x6cc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10a      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x52c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e009      	b.n	8002204 <HAL_DMA_IRQHandler+0x540>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03e      	beq.n	8002286 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2210      	movs	r2, #16
 8002212:	409a      	lsls	r2, r3
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d018      	beq.n	8002258 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d024      	beq.n	8002286 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e01f      	b.n	8002286 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01b      	beq.n	8002286 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
 8002256:	e016      	b.n	8002286 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0208 	bic.w	r2, r2, #8
 8002274:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2220      	movs	r2, #32
 8002290:	409a      	lsls	r2, r3
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8110 	beq.w	80024bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <HAL_DMA_IRQHandler+0x690>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d04a      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <HAL_DMA_IRQHandler+0x694>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d045      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_DMA_IRQHandler+0x698>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d040      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_DMA_IRQHandler+0x69c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d03b      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <HAL_DMA_IRQHandler+0x6a0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d036      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a25      	ldr	r2, [pc, #148]	; (8002368 <HAL_DMA_IRQHandler+0x6a4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d031      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <HAL_DMA_IRQHandler+0x6a8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02c      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_DMA_IRQHandler+0x6ac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d027      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a20      	ldr	r2, [pc, #128]	; (8002374 <HAL_DMA_IRQHandler+0x6b0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d022      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_DMA_IRQHandler+0x6b4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d01d      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_DMA_IRQHandler+0x6b8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d018      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_DMA_IRQHandler+0x6bc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <HAL_DMA_IRQHandler+0x6c0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00e      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_DMA_IRQHandler+0x6c4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_DMA_IRQHandler+0x6c8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d004      	beq.n	800233c <HAL_DMA_IRQHandler+0x678>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_DMA_IRQHandler+0x6cc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d12b      	bne.n	8002394 <HAL_DMA_IRQHandler+0x6d0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e02a      	b.n	80023a8 <HAL_DMA_IRQHandler+0x6e4>
 8002352:	bf00      	nop
 8002354:	40020010 	.word	0x40020010
 8002358:	40020028 	.word	0x40020028
 800235c:	40020040 	.word	0x40020040
 8002360:	40020058 	.word	0x40020058
 8002364:	40020070 	.word	0x40020070
 8002368:	40020088 	.word	0x40020088
 800236c:	400200a0 	.word	0x400200a0
 8002370:	400200b8 	.word	0x400200b8
 8002374:	40020410 	.word	0x40020410
 8002378:	40020428 	.word	0x40020428
 800237c:	40020440 	.word	0x40020440
 8002380:	40020458 	.word	0x40020458
 8002384:	40020470 	.word	0x40020470
 8002388:	40020488 	.word	0x40020488
 800238c:	400204a0 	.word	0x400204a0
 8002390:	400204b8 	.word	0x400204b8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8087 	beq.w	80024bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2220      	movs	r2, #32
 80023b8:	409a      	lsls	r2, r3
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d139      	bne.n	800243e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0216 	bic.w	r2, r2, #22
 80023d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_DMA_IRQHandler+0x736>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0208 	bic.w	r2, r2, #8
 8002408:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	223f      	movs	r2, #63	; 0x3f
 8002414:	409a      	lsls	r2, r3
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 834a 	beq.w	8002ac8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
          }
          return;
 800243c:	e344      	b.n	8002ac8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d018      	beq.n	800247e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
 800246a:	e027      	b.n	80024bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d023      	beq.n	80024bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e01e      	b.n	80024bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0210 	bic.w	r2, r2, #16
 800249a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8306 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8088 	beq.w	80025e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7a      	ldr	r2, [pc, #488]	; (80026cc <HAL_DMA_IRQHandler+0xa08>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d04a      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a79      	ldr	r2, [pc, #484]	; (80026d0 <HAL_DMA_IRQHandler+0xa0c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d045      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a77      	ldr	r2, [pc, #476]	; (80026d4 <HAL_DMA_IRQHandler+0xa10>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d040      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a76      	ldr	r2, [pc, #472]	; (80026d8 <HAL_DMA_IRQHandler+0xa14>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d03b      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a74      	ldr	r2, [pc, #464]	; (80026dc <HAL_DMA_IRQHandler+0xa18>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d036      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a73      	ldr	r2, [pc, #460]	; (80026e0 <HAL_DMA_IRQHandler+0xa1c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d031      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a71      	ldr	r2, [pc, #452]	; (80026e4 <HAL_DMA_IRQHandler+0xa20>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d02c      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a70      	ldr	r2, [pc, #448]	; (80026e8 <HAL_DMA_IRQHandler+0xa24>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d027      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_DMA_IRQHandler+0xa28>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d022      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6d      	ldr	r2, [pc, #436]	; (80026f0 <HAL_DMA_IRQHandler+0xa2c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d01d      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6b      	ldr	r2, [pc, #428]	; (80026f4 <HAL_DMA_IRQHandler+0xa30>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d018      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_DMA_IRQHandler+0xa34>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d013      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a68      	ldr	r2, [pc, #416]	; (80026fc <HAL_DMA_IRQHandler+0xa38>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00e      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a67      	ldr	r2, [pc, #412]	; (8002700 <HAL_DMA_IRQHandler+0xa3c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a65      	ldr	r2, [pc, #404]	; (8002704 <HAL_DMA_IRQHandler+0xa40>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <HAL_DMA_IRQHandler+0x8b8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a64      	ldr	r2, [pc, #400]	; (8002708 <HAL_DMA_IRQHandler+0xa44>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d108      	bne.n	800258e <HAL_DMA_IRQHandler+0x8ca>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_DMA_IRQHandler+0x8da>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d307      	bcc.n	80025ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f2      	bne.n	800259e <HAL_DMA_IRQHandler+0x8da>
 80025b8:	e000      	b.n	80025bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80025ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80025d2:	e003      	b.n	80025dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8272 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
 80025f6:	e26c      	b.n	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a43      	ldr	r2, [pc, #268]	; (800270c <HAL_DMA_IRQHandler+0xa48>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d022      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a42      	ldr	r2, [pc, #264]	; (8002710 <HAL_DMA_IRQHandler+0xa4c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d01d      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_DMA_IRQHandler+0xa50>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_DMA_IRQHandler+0xa54>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3d      	ldr	r2, [pc, #244]	; (800271c <HAL_DMA_IRQHandler+0xa58>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <HAL_DMA_IRQHandler+0xa5c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_DMA_IRQHandler+0xa60>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_DMA_IRQHandler+0x984>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a39      	ldr	r2, [pc, #228]	; (8002728 <HAL_DMA_IRQHandler+0xa64>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_DMA_IRQHandler+0x988>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_DMA_IRQHandler+0x98a>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 823f 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2204      	movs	r2, #4
 8002666:	409a      	lsls	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80cd 	beq.w	800280c <HAL_DMA_IRQHandler+0xb48>
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80c7 	beq.w	800280c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2204      	movs	r2, #4
 8002688:	409a      	lsls	r2, r3
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d049      	beq.n	800272c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8210 	beq.w	8002acc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026b4:	e20a      	b.n	8002acc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8206 	beq.w	8002acc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026c8:	e200      	b.n	8002acc <HAL_DMA_IRQHandler+0xe08>
 80026ca:	bf00      	nop
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d160      	bne.n	80027f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7f      	ldr	r2, [pc, #508]	; (8002938 <HAL_DMA_IRQHandler+0xc74>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04a      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a7d      	ldr	r2, [pc, #500]	; (800293c <HAL_DMA_IRQHandler+0xc78>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d045      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7c      	ldr	r2, [pc, #496]	; (8002940 <HAL_DMA_IRQHandler+0xc7c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d040      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7a      	ldr	r2, [pc, #488]	; (8002944 <HAL_DMA_IRQHandler+0xc80>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d03b      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a79      	ldr	r2, [pc, #484]	; (8002948 <HAL_DMA_IRQHandler+0xc84>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d036      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_DMA_IRQHandler+0xc88>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d031      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a76      	ldr	r2, [pc, #472]	; (8002950 <HAL_DMA_IRQHandler+0xc8c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d02c      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a74      	ldr	r2, [pc, #464]	; (8002954 <HAL_DMA_IRQHandler+0xc90>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d027      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a73      	ldr	r2, [pc, #460]	; (8002958 <HAL_DMA_IRQHandler+0xc94>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a71      	ldr	r2, [pc, #452]	; (800295c <HAL_DMA_IRQHandler+0xc98>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a70      	ldr	r2, [pc, #448]	; (8002960 <HAL_DMA_IRQHandler+0xc9c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6e      	ldr	r2, [pc, #440]	; (8002964 <HAL_DMA_IRQHandler+0xca0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <HAL_DMA_IRQHandler+0xca4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	; (800296c <HAL_DMA_IRQHandler+0xca8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_DMA_IRQHandler+0xcac>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_IRQHandler+0xb12>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	; (8002974 <HAL_DMA_IRQHandler+0xcb0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <HAL_DMA_IRQHandler+0xb24>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0208 	bic.w	r2, r2, #8
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e007      	b.n	80027f8 <HAL_DMA_IRQHandler+0xb34>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8165 	beq.w	8002acc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800280a:	e15f      	b.n	8002acc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2202      	movs	r2, #2
 8002816:	409a      	lsls	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80c5 	beq.w	80029ac <HAL_DMA_IRQHandler+0xce8>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80bf 	beq.w	80029ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2202      	movs	r2, #2
 8002838:	409a      	lsls	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d018      	beq.n	800287a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 813a 	beq.w	8002ad0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002864:	e134      	b.n	8002ad0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8130 	beq.w	8002ad0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002878:	e12a      	b.n	8002ad0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 8089 	bne.w	8002998 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_DMA_IRQHandler+0xc74>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d04a      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_DMA_IRQHandler+0xc78>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d045      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_DMA_IRQHandler+0xc7c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d040      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <HAL_DMA_IRQHandler+0xc80>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d03b      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_DMA_IRQHandler+0xc84>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d036      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a23      	ldr	r2, [pc, #140]	; (800294c <HAL_DMA_IRQHandler+0xc88>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d031      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_DMA_IRQHandler+0xc8c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d02c      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_DMA_IRQHandler+0xc90>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d027      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_DMA_IRQHandler+0xc94>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_DMA_IRQHandler+0xc98>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01d      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_DMA_IRQHandler+0xc9c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <HAL_DMA_IRQHandler+0xca0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_DMA_IRQHandler+0xca4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_DMA_IRQHandler+0xca8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_DMA_IRQHandler+0xcac>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_IRQHandler+0xc62>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a14      	ldr	r2, [pc, #80]	; (8002974 <HAL_DMA_IRQHandler+0xcb0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d128      	bne.n	8002978 <HAL_DMA_IRQHandler+0xcb4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0214 	bic.w	r2, r2, #20
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e027      	b.n	8002988 <HAL_DMA_IRQHandler+0xcc4>
 8002938:	40020010 	.word	0x40020010
 800293c:	40020028 	.word	0x40020028
 8002940:	40020040 	.word	0x40020040
 8002944:	40020058 	.word	0x40020058
 8002948:	40020070 	.word	0x40020070
 800294c:	40020088 	.word	0x40020088
 8002950:	400200a0 	.word	0x400200a0
 8002954:	400200b8 	.word	0x400200b8
 8002958:	40020410 	.word	0x40020410
 800295c:	40020428 	.word	0x40020428
 8002960:	40020440 	.word	0x40020440
 8002964:	40020458 	.word	0x40020458
 8002968:	40020470 	.word	0x40020470
 800296c:	40020488 	.word	0x40020488
 8002970:	400204a0 	.word	0x400204a0
 8002974:	400204b8 	.word	0x400204b8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 020a 	bic.w	r2, r2, #10
 8002986:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8097 	beq.w	8002ad0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029aa:	e091      	b.n	8002ad0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2208      	movs	r2, #8
 80029b6:	409a      	lsls	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8088 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8082 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a41      	ldr	r2, [pc, #260]	; (8002ad8 <HAL_DMA_IRQHandler+0xe14>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a3f      	ldr	r2, [pc, #252]	; (8002adc <HAL_DMA_IRQHandler+0xe18>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a3e      	ldr	r2, [pc, #248]	; (8002ae0 <HAL_DMA_IRQHandler+0xe1c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3c      	ldr	r2, [pc, #240]	; (8002ae4 <HAL_DMA_IRQHandler+0xe20>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <HAL_DMA_IRQHandler+0xe24>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a39      	ldr	r2, [pc, #228]	; (8002aec <HAL_DMA_IRQHandler+0xe28>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_DMA_IRQHandler+0xe2c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <HAL_DMA_IRQHandler+0xe30>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <HAL_DMA_IRQHandler+0xe34>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_DMA_IRQHandler+0xe38>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_DMA_IRQHandler+0xe3c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_DMA_IRQHandler+0xe40>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_DMA_IRQHandler+0xe44>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_DMA_IRQHandler+0xe48>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2c      	ldr	r2, [pc, #176]	; (8002b10 <HAL_DMA_IRQHandler+0xe4c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xdaa>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_DMA_IRQHandler+0xe50>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_IRQHandler+0xdbc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 021c 	bic.w	r2, r2, #28
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_DMA_IRQHandler+0xdcc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 020e 	bic.w	r2, r2, #14
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2201      	movs	r2, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
 8002ac6:	e004      	b.n	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ac8:	bf00      	nop
 8002aca:	e002      	b.n	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ad0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020010 	.word	0x40020010
 8002adc:	40020028 	.word	0x40020028
 8002ae0:	40020040 	.word	0x40020040
 8002ae4:	40020058 	.word	0x40020058
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	40020088 	.word	0x40020088
 8002af0:	400200a0 	.word	0x400200a0
 8002af4:	400200b8 	.word	0x400200b8
 8002af8:	40020410 	.word	0x40020410
 8002afc:	40020428 	.word	0x40020428
 8002b00:	40020440 	.word	0x40020440
 8002b04:	40020458 	.word	0x40020458
 8002b08:	40020470 	.word	0x40020470
 8002b0c:	40020488 	.word	0x40020488
 8002b10:	400204a0 	.word	0x400204a0
 8002b14:	400204b8 	.word	0x400204b8

08002b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a42      	ldr	r2, [pc, #264]	; (8002c30 <DMA_CalcBaseAndBitshift+0x118>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d04a      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a41      	ldr	r2, [pc, #260]	; (8002c34 <DMA_CalcBaseAndBitshift+0x11c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d045      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3f      	ldr	r2, [pc, #252]	; (8002c38 <DMA_CalcBaseAndBitshift+0x120>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d040      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a3e      	ldr	r2, [pc, #248]	; (8002c3c <DMA_CalcBaseAndBitshift+0x124>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d03b      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3c      	ldr	r2, [pc, #240]	; (8002c40 <DMA_CalcBaseAndBitshift+0x128>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d036      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <DMA_CalcBaseAndBitshift+0x12c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d031      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a39      	ldr	r2, [pc, #228]	; (8002c48 <DMA_CalcBaseAndBitshift+0x130>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02c      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a38      	ldr	r2, [pc, #224]	; (8002c4c <DMA_CalcBaseAndBitshift+0x134>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d027      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a36      	ldr	r2, [pc, #216]	; (8002c50 <DMA_CalcBaseAndBitshift+0x138>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d022      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <DMA_CalcBaseAndBitshift+0x13c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d01d      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <DMA_CalcBaseAndBitshift+0x140>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d018      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <DMA_CalcBaseAndBitshift+0x144>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <DMA_CalcBaseAndBitshift+0x148>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00e      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <DMA_CalcBaseAndBitshift+0x14c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <DMA_CalcBaseAndBitshift+0x150>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2c      	ldr	r2, [pc, #176]	; (8002c6c <DMA_CalcBaseAndBitshift+0x154>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <DMA_CalcBaseAndBitshift+0xac>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <DMA_CalcBaseAndBitshift+0xae>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3b10      	subs	r3, #16
 8002bd2:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <DMA_CalcBaseAndBitshift+0x158>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <DMA_CalcBaseAndBitshift+0x15c>)
 8002be4:	5cd3      	ldrb	r3, [r2, r3]
 8002be6:	461a      	mov	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d908      	bls.n	8002c04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <DMA_CalcBaseAndBitshift+0x160>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	; 0x58
 8002c02:	e00d      	b.n	8002c20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <DMA_CalcBaseAndBitshift+0x160>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6593      	str	r3, [r2, #88]	; 0x58
 8002c12:	e005      	b.n	8002c20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
 8002c70:	aaaaaaab 	.word	0xaaaaaaab
 8002c74:	080087b0 	.word	0x080087b0
 8002c78:	fffffc00 	.word	0xfffffc00

08002c7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d120      	bne.n	8002cd2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d858      	bhi.n	8002d4a <DMA_CheckFifoParam+0xce>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <DMA_CheckFifoParam+0x24>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cc3 	.word	0x08002cc3
 8002ca8:	08002cb1 	.word	0x08002cb1
 8002cac:	08002d4b 	.word	0x08002d4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d048      	beq.n	8002d4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cc0:	e045      	b.n	8002d4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cca:	d142      	bne.n	8002d52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cd0:	e03f      	b.n	8002d52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cda:	d123      	bne.n	8002d24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d838      	bhi.n	8002d56 <DMA_CheckFifoParam+0xda>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <DMA_CheckFifoParam+0x70>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d03 	.word	0x08002d03
 8002cf4:	08002cfd 	.word	0x08002cfd
 8002cf8:	08002d15 	.word	0x08002d15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
        break;
 8002d00:	e030      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d025      	beq.n	8002d5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d12:	e022      	b.n	8002d5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1c:	d11f      	bne.n	8002d5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d22:	e01c      	b.n	8002d5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d902      	bls.n	8002d32 <DMA_CheckFifoParam+0xb6>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d003      	beq.n	8002d38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d30:	e018      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
        break;
 8002d36:	e015      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
    break;
 8002d48:	e00b      	b.n	8002d62 <DMA_CheckFifoParam+0xe6>
        break;
 8002d4a:	bf00      	nop
 8002d4c:	e00a      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        break;
 8002d4e:	bf00      	nop
 8002d50:	e008      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        break;
 8002d52:	bf00      	nop
 8002d54:	e006      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        break;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
    break;
 8002d62:	bf00      	nop
    }
  }

  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01a      	beq.n	8002e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	3b08      	subs	r3, #8
 8002de4:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002e10:	e024      	b.n	8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3b10      	subs	r3, #16
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d806      	bhi.n	8002e3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d902      	bls.n	8002e3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3308      	adds	r3, #8
 8002e38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494
 8002e88:	cccccccd 	.word	0xcccccccd
 8002e8c:	16009600 	.word	0x16009600
 8002e90:	58025880 	.word	0x58025880
 8002e94:	aaaaaaab 	.word	0xaaaaaaab
 8002e98:	400204b8 	.word	0x400204b8
 8002e9c:	4002040f 	.word	0x4002040f
 8002ea0:	10008200 	.word	0x10008200
 8002ea4:	40020880 	.word	0x40020880

08002ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d04a      	beq.n	8002f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d847      	bhi.n	8002f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d022      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d01d      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d018      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f30:	671a      	str	r2, [r3, #112]	; 0x70
 8002f32:	e009      	b.n	8002f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002f46:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	58025408 	.word	0x58025408
 8002f64:	5802541c 	.word	0x5802541c
 8002f68:	58025430 	.word	0x58025430
 8002f6c:	58025444 	.word	0x58025444
 8002f70:	58025458 	.word	0x58025458
 8002f74:	5802546c 	.word	0x5802546c
 8002f78:	58025480 	.word	0x58025480
 8002f7c:	58025494 	.word	0x58025494
 8002f80:	1600963f 	.word	0x1600963f
 8002f84:	58025940 	.word	0x58025940
 8002f88:	1000823f 	.word	0x1000823f
 8002f8c:	40020940 	.word	0x40020940

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f9e:	4b89      	ldr	r3, [pc, #548]	; (80031c4 <HAL_GPIO_Init+0x234>)
 8002fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fa2:	e194      	b.n	80032ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8186 	beq.w	80032c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d005      	beq.n	8002fd4 <HAL_GPIO_Init+0x44>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d130      	bne.n	8003036 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300a:	2201      	movs	r2, #1
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0201 	and.w	r2, r3, #1
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b03      	cmp	r3, #3
 8003040:	d017      	beq.n	8003072 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d123      	bne.n	80030c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	08da      	lsrs	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3208      	adds	r2, #8
 80030c0:	69b9      	ldr	r1, [r7, #24]
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	2203      	movs	r2, #3
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0203 	and.w	r2, r3, #3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80e0 	beq.w	80032c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003108:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <HAL_GPIO_Init+0x238>)
 800310a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <HAL_GPIO_Init+0x238>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_GPIO_Init+0x238>)
 800311a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <HAL_GPIO_Init+0x23c>)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <HAL_GPIO_Init+0x240>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d052      	beq.n	80031f8 <HAL_GPIO_Init+0x268>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_GPIO_Init+0x244>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d031      	beq.n	80031be <HAL_GPIO_Init+0x22e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_GPIO_Init+0x248>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d02b      	beq.n	80031ba <HAL_GPIO_Init+0x22a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_GPIO_Init+0x24c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d025      	beq.n	80031b6 <HAL_GPIO_Init+0x226>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_GPIO_Init+0x250>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01f      	beq.n	80031b2 <HAL_GPIO_Init+0x222>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_GPIO_Init+0x254>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d019      	beq.n	80031ae <HAL_GPIO_Init+0x21e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_GPIO_Init+0x258>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_GPIO_Init+0x21a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_GPIO_Init+0x25c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00d      	beq.n	80031a6 <HAL_GPIO_Init+0x216>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_GPIO_Init+0x260>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <HAL_GPIO_Init+0x212>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_GPIO_Init+0x264>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_GPIO_Init+0x20e>
 800319a:	2309      	movs	r3, #9
 800319c:	e02d      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 800319e:	230a      	movs	r3, #10
 80031a0:	e02b      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031a2:	2308      	movs	r3, #8
 80031a4:	e029      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031a6:	2307      	movs	r3, #7
 80031a8:	e027      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031aa:	2306      	movs	r3, #6
 80031ac:	e025      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031ae:	2305      	movs	r3, #5
 80031b0:	e023      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031b2:	2304      	movs	r3, #4
 80031b4:	e021      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031b6:	2303      	movs	r3, #3
 80031b8:	e01f      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e01d      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031be:	2301      	movs	r3, #1
 80031c0:	e01b      	b.n	80031fa <HAL_GPIO_Init+0x26a>
 80031c2:	bf00      	nop
 80031c4:	58000080 	.word	0x58000080
 80031c8:	58024400 	.word	0x58024400
 80031cc:	58000400 	.word	0x58000400
 80031d0:	58020000 	.word	0x58020000
 80031d4:	58020400 	.word	0x58020400
 80031d8:	58020800 	.word	0x58020800
 80031dc:	58020c00 	.word	0x58020c00
 80031e0:	58021000 	.word	0x58021000
 80031e4:	58021400 	.word	0x58021400
 80031e8:	58021800 	.word	0x58021800
 80031ec:	58021c00 	.word	0x58021c00
 80031f0:	58022000 	.word	0x58022000
 80031f4:	58022400 	.word	0x58022400
 80031f8:	2300      	movs	r3, #0
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	f002 0203 	and.w	r2, r2, #3
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	4093      	lsls	r3, r2
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320a:	4938      	ldr	r1, [pc, #224]	; (80032ec <HAL_GPIO_Init+0x35c>)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	3302      	adds	r3, #2
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800323e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800326c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f ae63 	bne.w	8002fa4 <HAL_GPIO_Init+0x14>
  }
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	58000400 	.word	0x58000400

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	619a      	str	r2, [r3, #24]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003334:	887a      	ldrh	r2, [r7, #2]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	041a      	lsls	r2, r3, #16
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43d9      	mvns	r1, r3
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	400b      	ands	r3, r1
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <HAL_HSEM_FastTake+0x2c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3320      	adds	r3, #32
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_HSEM_FastTake+0x30>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	58026400 	.word	0x58026400
 8003388:	80000300 	.word	0x80000300

0800338c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003396:	4906      	ldr	r1, [pc, #24]	; (80033b0 <HAL_HSEM_Release+0x24>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	58026400 	.word	0x58026400

080033b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fcae 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e006      	b.n	800343c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800343a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d104      	bne.n	800344e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_I2C_Init+0x11c>)
 800345a:	430b      	orrs	r3, r1
 800345c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	02008000 	.word	0x02008000

080034d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	817b      	strh	r3, [r7, #10]
 80034e4:	4613      	mov	r3, r2
 80034e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f040 80da 	bne.w	80036aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x30>
 8003500:	2302      	movs	r3, #2
 8003502:	e0d3      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1d8>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800350c:	f7fd ff32 	bl	8001374 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2319      	movs	r3, #25
 8003518:	2201      	movs	r2, #1
 800351a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fa00 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0be      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2221      	movs	r2, #33	; 0x21
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2210      	movs	r2, #16
 800353a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	893a      	ldrh	r2, [r7, #8]
 800354e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	2bff      	cmp	r3, #255	; 0xff
 800355e:	d90e      	bls.n	800357e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	22ff      	movs	r2, #255	; 0xff
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	b2da      	uxtb	r2, r3
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fbf6 	bl	8003d68 <I2C_TransferConfig>
 800357c:	e06c      	b.n	8003658 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fbe5 	bl	8003d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800359e:	e05b      	b.n	8003658 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	6a39      	ldr	r1, [r7, #32]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f9fd 	bl	80039a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e07b      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d034      	beq.n	8003658 <HAL_I2C_Master_Transmit+0x184>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d130      	bne.n	8003658 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f98f 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e04d      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2bff      	cmp	r3, #255	; 0xff
 8003618:	d90e      	bls.n	8003638 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	b2da      	uxtb	r2, r3
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fb99 	bl	8003d68 <I2C_TransferConfig>
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	2300      	movs	r3, #0
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fb88 	bl	8003d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d19e      	bne.n	80035a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	6a39      	ldr	r1, [r7, #32]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f9dc 	bl	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e01a      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800368a:	400b      	ands	r3, r1
 800368c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	80002000 	.word	0x80002000
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	461a      	mov	r2, r3
 80036c8:	460b      	mov	r3, r1
 80036ca:	817b      	strh	r3, [r7, #10]
 80036cc:	4613      	mov	r3, r2
 80036ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b20      	cmp	r3, #32
 80036da:	f040 80db 	bne.w	8003894 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_I2C_Master_Receive+0x30>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0d4      	b.n	8003896 <HAL_I2C_Master_Receive+0x1da>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f4:	f7fd fe3e 	bl	8001374 <HAL_GetTick>
 80036f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2319      	movs	r3, #25
 8003700:	2201      	movs	r2, #1
 8003702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f90c 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0bf      	b.n	8003896 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2222      	movs	r2, #34	; 0x22
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2210      	movs	r2, #16
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	893a      	ldrh	r2, [r7, #8]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2bff      	cmp	r3, #255	; 0xff
 8003746:	d90e      	bls.n	8003766 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	b2da      	uxtb	r2, r3
 8003754:	8979      	ldrh	r1, [r7, #10]
 8003756:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_I2C_Master_Receive+0x1e4>)
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fb02 	bl	8003d68 <I2C_TransferConfig>
 8003764:	e06d      	b.n	8003842 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	b2da      	uxtb	r2, r3
 8003776:	8979      	ldrh	r1, [r7, #10]
 8003778:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <HAL_I2C_Master_Receive+0x1e4>)
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 faf1 	bl	8003d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003786:	e05c      	b.n	8003842 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	6a39      	ldr	r1, [r7, #32]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f985 	bl	8003a9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e07c      	b.n	8003896 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d034      	beq.n	8003842 <HAL_I2C_Master_Receive+0x186>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d130      	bne.n	8003842 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2200      	movs	r2, #0
 80037e8:	2180      	movs	r1, #128	; 0x80
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f89a 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e04d      	b.n	8003896 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2bff      	cmp	r3, #255	; 0xff
 8003802:	d90e      	bls.n	8003822 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	22ff      	movs	r2, #255	; 0xff
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	b2da      	uxtb	r2, r3
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 faa4 	bl	8003d68 <I2C_TransferConfig>
 8003820:	e00f      	b.n	8003842 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	b2da      	uxtb	r2, r3
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	2300      	movs	r3, #0
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fa93 	bl	8003d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d19d      	bne.n	8003788 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	6a39      	ldr	r1, [r7, #32]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f8e7 	bl	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e01a      	b.n	8003896 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2220      	movs	r2, #32
 8003866:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_I2C_Master_Receive+0x1e8>)
 8003874:	400b      	ands	r3, r1
 8003876:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	80002400 	.word	0x80002400
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
  }
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d103      	bne.n	80038fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d007      	beq.n	8003918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	619a      	str	r2, [r3, #24]
  }
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003934:	e022      	b.n	800397c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d01e      	beq.n	800397c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fd fd19 	bl	8001374 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d113      	bne.n	800397c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e00f      	b.n	800399c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	429a      	cmp	r2, r3
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	429a      	cmp	r2, r3
 8003998:	d0cd      	beq.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039b0:	e02c      	b.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f8ea 	bl	8003b90 <I2C_IsErrorOccurred>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e02a      	b.n	8003a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d01e      	beq.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fd fcd1 	bl	8001374 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d113      	bne.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e007      	b.n	8003a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d1cb      	bne.n	80039b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a30:	e028      	b.n	8003a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f8aa 	bl	8003b90 <I2C_IsErrorOccurred>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e026      	b.n	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fd fc95 	bl	8001374 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d113      	bne.n	8003a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e007      	b.n	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d1cf      	bne.n	8003a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa8:	e064      	b.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f86e 	bl	8003b90 <I2C_IsErrorOccurred>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e062      	b.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d138      	bne.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d105      	bne.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e04e      	b.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d107      	bne.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2210      	movs	r2, #16
 8003afa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2204      	movs	r2, #4
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
 8003b02:	e002      	b.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003b1e:	400b      	ands	r3, r1
 8003b20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e022      	b.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fd fc19 	bl	8001374 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e007      	b.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d193      	bne.n	8003aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	fe00e800 	.word	0xfe00e800

08003b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d075      	beq.n	8003ca8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bc4:	e056      	b.n	8003c74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d052      	beq.n	8003c74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fd fbd1 	bl	8001374 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_IsErrorOccurred+0x54>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d147      	bne.n	8003c74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c06:	d12e      	bne.n	8003c66 <I2C_IsErrorOccurred+0xd6>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d02a      	beq.n	8003c66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d027      	beq.n	8003c66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c24:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c26:	f7fd fba5 	bl	8001374 <HAL_GetTick>
 8003c2a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	e01b      	b.n	8003c66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c2e:	f7fd fba1 	bl	8001374 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b19      	cmp	r3, #25
 8003c3a:	d914      	bls.n	8003c66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d1dc      	bne.n	8003c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d003      	beq.n	8003c8a <I2C_IsErrorOccurred+0xfa>
 8003c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d09d      	beq.n	8003bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2220      	movs	r2, #32
 8003c98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01c      	beq.n	8003d58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fddc 	bl	80038dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <I2C_IsErrorOccurred+0x1d4>)
 8003d30:	400b      	ands	r3, r1
 8003d32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	fe00e800 	.word	0xfe00e800

08003d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	4613      	mov	r3, r2
 8003d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7a:	897b      	ldrh	r3, [r7, #10]
 8003d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d80:	7a7b      	ldrb	r3, [r7, #9]
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d88:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d96:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	0d5b      	lsrs	r3, r3, #21
 8003da2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <I2C_TransferConfig+0x60>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	43db      	mvns	r3, r3
 8003dac:	ea02 0103 	and.w	r1, r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	03ff63ff 	.word	0x03ff63ff

08003dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d138      	bne.n	8003e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e032      	b.n	8003e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	; 0x24
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d139      	bne.n	8003eec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e033      	b.n	8003eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2224      	movs	r2, #36	; 0x24
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f04:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_PWREx_ConfigSupply+0xb0>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	d00a      	beq.n	8003f26 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f10:	4b26      	ldr	r3, [pc, #152]	; (8003fac <HAL_PWREx_ConfigSupply+0xb0>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d001      	beq.n	8003f22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e040      	b.n	8003fa4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e03e      	b.n	8003fa4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f26:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_PWREx_ConfigSupply+0xb0>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003f2e:	491f      	ldr	r1, [pc, #124]	; (8003fac <HAL_PWREx_ConfigSupply+0xb0>)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f36:	f7fd fa1d 	bl	8001374 <HAL_GetTick>
 8003f3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f3c:	e009      	b.n	8003f52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f3e:	f7fd fa19 	bl	8001374 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4c:	d901      	bls.n	8003f52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e028      	b.n	8003fa4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <HAL_PWREx_ConfigSupply+0xb0>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	d1ee      	bne.n	8003f3e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b1e      	cmp	r3, #30
 8003f64:	d008      	beq.n	8003f78 <HAL_PWREx_ConfigSupply+0x7c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b2e      	cmp	r3, #46	; 0x2e
 8003f6a:	d005      	beq.n	8003f78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b1d      	cmp	r3, #29
 8003f70:	d002      	beq.n	8003f78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b2d      	cmp	r3, #45	; 0x2d
 8003f76:	d114      	bne.n	8003fa2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f78:	f7fd f9fc 	bl	8001374 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f7e:	e009      	b.n	8003f94 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f80:	f7fd f9f8 	bl	8001374 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f8e:	d901      	bls.n	8003f94 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e007      	b.n	8003fa4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_PWREx_ConfigSupply+0xb0>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d1ee      	bne.n	8003f80 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	58024800 	.word	0x58024800

08003fb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08c      	sub	sp, #48	; 0x30
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f000 bc1d 	b.w	80047fe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8087 	beq.w	80040e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd2:	4b99      	ldr	r3, [pc, #612]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fdc:	4b96      	ldr	r3, [pc, #600]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d007      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x48>
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b18      	cmp	r3, #24
 8003fec:	d110      	bne.n	8004010 <HAL_RCC_OscConfig+0x60>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	4b8f      	ldr	r3, [pc, #572]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d06c      	beq.n	80040de <HAL_RCC_OscConfig+0x12e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d168      	bne.n	80040de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e3f6      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x78>
 800401a:	4b87      	ldr	r3, [pc, #540]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a86      	ldr	r2, [pc, #536]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e02e      	b.n	8004086 <HAL_RCC_OscConfig+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x9a>
 8004030:	4b81      	ldr	r3, [pc, #516]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a80      	ldr	r2, [pc, #512]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b7e      	ldr	r3, [pc, #504]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7d      	ldr	r2, [pc, #500]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e01d      	b.n	8004086 <HAL_RCC_OscConfig+0xd6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0xbe>
 8004054:	4b78      	ldr	r3, [pc, #480]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800405a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b75      	ldr	r3, [pc, #468]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a74      	ldr	r2, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e00b      	b.n	8004086 <HAL_RCC_OscConfig+0xd6>
 800406e:	4b72      	ldr	r3, [pc, #456]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a71      	ldr	r2, [pc, #452]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6e      	ldr	r2, [pc, #440]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004084:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d013      	beq.n	80040b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd f971 	bl	8001374 <HAL_GetTick>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004096:	f7fd f96d 	bl	8001374 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	; 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e3aa      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a8:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0xe6>
 80040b4:	e014      	b.n	80040e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fd f95d 	bl	8001374 <HAL_GetTick>
 80040ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040be:	f7fd f959 	bl	8001374 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	; 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e396      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x10e>
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80cb 	beq.w	8004284 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4b52      	ldr	r3, [pc, #328]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040f8:	4b4f      	ldr	r3, [pc, #316]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_RCC_OscConfig+0x164>
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b18      	cmp	r3, #24
 8004108:	d156      	bne.n	80041b8 <HAL_RCC_OscConfig+0x208>
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d151      	bne.n	80041b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004114:	4b48      	ldr	r3, [pc, #288]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x17c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e368      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800412c:	4b42      	ldr	r3, [pc, #264]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 0219 	bic.w	r2, r3, #25
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	493f      	ldr	r1, [pc, #252]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800413e:	f7fd f919 	bl	8001374 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004146:	f7fd f915 	bl	8001374 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e352      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004158:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	f7fd f936 	bl	80013d4 <HAL_GetREVID>
 8004168:	4603      	mov	r3, r0
 800416a:	f241 0203 	movw	r2, #4099	; 0x1003
 800416e:	4293      	cmp	r3, r2
 8004170:	d817      	bhi.n	80041a2 <HAL_RCC_OscConfig+0x1f2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d108      	bne.n	800418c <HAL_RCC_OscConfig+0x1dc>
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004182:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800418a:	e07b      	b.n	8004284 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	4927      	ldr	r1, [pc, #156]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a0:	e070      	b.n	8004284 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	061b      	lsls	r3, r3, #24
 80041b0:	4921      	ldr	r1, [pc, #132]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b6:	e065      	b.n	8004284 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d048      	beq.n	8004252 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 0219 	bic.w	r2, r3, #25
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	491a      	ldr	r1, [pc, #104]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd f8cf 	bl	8001374 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7fd f8cb 	bl	8001374 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e308      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	f7fd f8ec 	bl	80013d4 <HAL_GetREVID>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8004202:	4293      	cmp	r3, r2
 8004204:	d81a      	bhi.n	800423c <HAL_RCC_OscConfig+0x28c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d108      	bne.n	8004220 <HAL_RCC_OscConfig+0x270>
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004216:	4a08      	ldr	r2, [pc, #32]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	6053      	str	r3, [r2, #4]
 800421e:	e031      	b.n	8004284 <HAL_RCC_OscConfig+0x2d4>
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	031b      	lsls	r3, r3, #12
 800422e:	4902      	ldr	r1, [pc, #8]	; (8004238 <HAL_RCC_OscConfig+0x288>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	e026      	b.n	8004284 <HAL_RCC_OscConfig+0x2d4>
 8004236:	bf00      	nop
 8004238:	58024400 	.word	0x58024400
 800423c:	4b9a      	ldr	r3, [pc, #616]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	4997      	ldr	r1, [pc, #604]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
 8004250:	e018      	b.n	8004284 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b95      	ldr	r3, [pc, #596]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a94      	ldr	r2, [pc, #592]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fd f889 	bl	8001374 <HAL_GetTick>
 8004262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004266:	f7fd f885 	bl	8001374 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e2c2      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004278:	4b8b      	ldr	r3, [pc, #556]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80a9 	beq.w	80043e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800429c:	4b82      	ldr	r3, [pc, #520]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d007      	beq.n	80042b8 <HAL_RCC_OscConfig+0x308>
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b18      	cmp	r3, #24
 80042ac:	d13a      	bne.n	8004324 <HAL_RCC_OscConfig+0x374>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d135      	bne.n	8004324 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042b8:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_OscConfig+0x320>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e296      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042d0:	f7fd f880 	bl	80013d4 <HAL_GetREVID>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80042da:	4293      	cmp	r3, r2
 80042dc:	d817      	bhi.n	800430e <HAL_RCC_OscConfig+0x35e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d108      	bne.n	80042f8 <HAL_RCC_OscConfig+0x348>
 80042e6:	4b70      	ldr	r3, [pc, #448]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042ee:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80042f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042f6:	e075      	b.n	80043e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	069b      	lsls	r3, r3, #26
 8004306:	4968      	ldr	r1, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800430c:	e06a      	b.n	80043e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800430e:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	4962      	ldr	r1, [pc, #392]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004322:	e05f      	b.n	80043e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d042      	beq.n	80043b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800432c:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5d      	ldr	r2, [pc, #372]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd f81c 	bl	8001374 <HAL_GetTick>
 800433c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004340:	f7fd f818 	bl	8001374 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e255      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004352:	4b55      	ldr	r3, [pc, #340]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800435e:	f7fd f839 	bl	80013d4 <HAL_GetREVID>
 8004362:	4603      	mov	r3, r0
 8004364:	f241 0203 	movw	r2, #4099	; 0x1003
 8004368:	4293      	cmp	r3, r2
 800436a:	d817      	bhi.n	800439c <HAL_RCC_OscConfig+0x3ec>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	2b20      	cmp	r3, #32
 8004372:	d108      	bne.n	8004386 <HAL_RCC_OscConfig+0x3d6>
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800437c:	4a4a      	ldr	r2, [pc, #296]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800437e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004382:	6053      	str	r3, [r2, #4]
 8004384:	e02e      	b.n	80043e4 <HAL_RCC_OscConfig+0x434>
 8004386:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	069b      	lsls	r3, r3, #26
 8004394:	4944      	ldr	r1, [pc, #272]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
 800439a:	e023      	b.n	80043e4 <HAL_RCC_OscConfig+0x434>
 800439c:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	493f      	ldr	r1, [pc, #252]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
 80043b0:	e018      	b.n	80043e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043b2:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80043b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fc ffd9 	bl	8001374 <HAL_GetTick>
 80043c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043c6:	f7fc ffd5 	bl	8001374 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e212      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043d8:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d036      	beq.n	800445e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d019      	beq.n	800442c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fc ffb6 	bl	8001374 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440c:	f7fc ffb2 	bl	8001374 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1ef      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x45c>
 800442a:	e018      	b.n	800445e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004438:	f7fc ff9c 	bl	8001374 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004440:	f7fc ff98 	bl	8001374 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1d5      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d039      	beq.n	80044de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01c      	beq.n	80044ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a0c      	ldr	r2, [pc, #48]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 8004478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800447c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800447e:	f7fc ff79 	bl	8001374 <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004486:	f7fc ff75 	bl	8001374 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1b2      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x4d6>
 80044a4:	e01b      	b.n	80044de <HAL_RCC_OscConfig+0x52e>
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044ac:	4b9b      	ldr	r3, [pc, #620]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a9a      	ldr	r2, [pc, #616]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80044b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044b8:	f7fc ff5c 	bl	8001374 <HAL_GetTick>
 80044bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80044c0:	f7fc ff58 	bl	8001374 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e195      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044d2:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8081 	beq.w	80045ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044ec:	4b8c      	ldr	r3, [pc, #560]	; (8004720 <HAL_RCC_OscConfig+0x770>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a8b      	ldr	r2, [pc, #556]	; (8004720 <HAL_RCC_OscConfig+0x770>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044f8:	f7fc ff3c 	bl	8001374 <HAL_GetTick>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fc ff38 	bl	8001374 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e175      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004512:	4b83      	ldr	r3, [pc, #524]	; (8004720 <HAL_RCC_OscConfig+0x770>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x584>
 8004526:	4b7d      	ldr	r3, [pc, #500]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a7c      	ldr	r2, [pc, #496]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
 8004532:	e02d      	b.n	8004590 <HAL_RCC_OscConfig+0x5e0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10c      	bne.n	8004556 <HAL_RCC_OscConfig+0x5a6>
 800453c:	4b77      	ldr	r3, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a76      	ldr	r2, [pc, #472]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
 8004548:	4b74      	ldr	r3, [pc, #464]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a73      	ldr	r2, [pc, #460]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800454e:	f023 0304 	bic.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	e01c      	b.n	8004590 <HAL_RCC_OscConfig+0x5e0>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b05      	cmp	r3, #5
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0x5c8>
 800455e:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a6e      	ldr	r2, [pc, #440]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004564:	f043 0304 	orr.w	r3, r3, #4
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
 800456a:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a6b      	ldr	r2, [pc, #428]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0x5e0>
 8004578:	4b68      	ldr	r3, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a67      	ldr	r2, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b65      	ldr	r3, [pc, #404]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a64      	ldr	r2, [pc, #400]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800458a:	f023 0304 	bic.w	r3, r3, #4
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d015      	beq.n	80045c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fc feec 	bl	8001374 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7fc fee8 	bl	8001374 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e123      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045b6:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0ee      	beq.n	80045a0 <HAL_RCC_OscConfig+0x5f0>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fc fed6 	bl	8001374 <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fc fed2 	bl	8001374 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e10d      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045e2:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ee      	bne.n	80045cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8102 	beq.w	80047fc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004600:	2b18      	cmp	r3, #24
 8004602:	f000 80bd 	beq.w	8004780 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b02      	cmp	r3, #2
 800460c:	f040 809e 	bne.w	800474c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a41      	ldr	r2, [pc, #260]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fc feaa 	bl	8001374 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004624:	f7fc fea6 	bl	8001374 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0e3      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004636:	4b39      	ldr	r3, [pc, #228]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004646:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_RCC_OscConfig+0x774>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	430a      	orrs	r2, r1
 8004656:	4931      	ldr	r1, [pc, #196]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	628b      	str	r3, [r1, #40]	; 0x28
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	3b01      	subs	r3, #1
 8004662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	3b01      	subs	r3, #1
 800466c:	025b      	lsls	r3, r3, #9
 800466e:	b29b      	uxth	r3, r3
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	3b01      	subs	r3, #1
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	3b01      	subs	r3, #1
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800468c:	4923      	ldr	r1, [pc, #140]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004692:	4b22      	ldr	r3, [pc, #136]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	4a21      	ldr	r2, [pc, #132]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCC_OscConfig+0x778>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046aa:	00d2      	lsls	r2, r2, #3
 80046ac:	491b      	ldr	r1, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	f023 020c 	bic.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4917      	ldr	r1, [pc, #92]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	f023 0202 	bic.w	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	4912      	ldr	r1, [pc, #72]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a04      	ldr	r2, [pc, #16]	; (800471c <HAL_RCC_OscConfig+0x76c>)
 800470c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7fc fe2f 	bl	8001374 <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004718:	e011      	b.n	800473e <HAL_RCC_OscConfig+0x78e>
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	58024800 	.word	0x58024800
 8004724:	fffffc0c 	.word	0xfffffc0c
 8004728:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472c:	f7fc fe22 	bl	8001374 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e05f      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800473e:	4b32      	ldr	r3, [pc, #200]	; (8004808 <HAL_RCC_OscConfig+0x858>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x77c>
 800474a:	e057      	b.n	80047fc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_RCC_OscConfig+0x858>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2d      	ldr	r2, [pc, #180]	; (8004808 <HAL_RCC_OscConfig+0x858>)
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fc fe0c 	bl	8001374 <HAL_GetTick>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fc fe08 	bl	8001374 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e045      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004772:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_RCC_OscConfig+0x858>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x7b0>
 800477e:	e03d      	b.n	80047fc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <HAL_RCC_OscConfig+0x858>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_RCC_OscConfig+0x858>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	2b01      	cmp	r3, #1
 8004792:	d031      	beq.n	80047f8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0203 	and.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d12a      	bne.n	80047f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d122      	bne.n	80047f8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d11a      	bne.n	80047f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	0a5b      	lsrs	r3, r3, #9
 80047c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d111      	bne.n	80047f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	0c1b      	lsrs	r3, r3, #16
 80047d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d108      	bne.n	80047f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	0e1b      	lsrs	r3, r3, #24
 80047ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3730      	adds	r7, #48	; 0x30
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400

0800480c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e19c      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b8a      	ldr	r3, [pc, #552]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d910      	bls.n	8004850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b87      	ldr	r3, [pc, #540]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 020f 	bic.w	r2, r3, #15
 8004836:	4985      	ldr	r1, [pc, #532]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b83      	ldr	r3, [pc, #524]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e184      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	4b7b      	ldr	r3, [pc, #492]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004868:	429a      	cmp	r2, r3
 800486a:	d908      	bls.n	800487e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800486c:	4b78      	ldr	r3, [pc, #480]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	4975      	ldr	r1, [pc, #468]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800487a:	4313      	orrs	r3, r2
 800487c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d010      	beq.n	80048ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	4b70      	ldr	r3, [pc, #448]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004896:	429a      	cmp	r2, r3
 8004898:	d908      	bls.n	80048ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800489a:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	496a      	ldr	r1, [pc, #424]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d010      	beq.n	80048da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699a      	ldr	r2, [r3, #24]
 80048bc:	4b64      	ldr	r3, [pc, #400]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d908      	bls.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048c8:	4b61      	ldr	r3, [pc, #388]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	495e      	ldr	r1, [pc, #376]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d010      	beq.n	8004908 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d908      	bls.n	8004908 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048f6:	4b56      	ldr	r3, [pc, #344]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4953      	ldr	r1, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004904:	4313      	orrs	r3, r2
 8004906:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d010      	beq.n	8004936 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	4b4d      	ldr	r3, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	429a      	cmp	r2, r3
 8004922:	d908      	bls.n	8004936 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	4b4a      	ldr	r3, [pc, #296]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f023 020f 	bic.w	r2, r3, #15
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4947      	ldr	r1, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004932:	4313      	orrs	r3, r2
 8004934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d055      	beq.n	80049ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004942:	4b43      	ldr	r3, [pc, #268]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4940      	ldr	r1, [pc, #256]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004950:	4313      	orrs	r3, r2
 8004952:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d107      	bne.n	800496c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800495c:	4b3c      	ldr	r3, [pc, #240]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d121      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0f6      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d115      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0ea      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800498c:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0de      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0d6      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ac:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f023 0207 	bic.w	r2, r3, #7
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4925      	ldr	r1, [pc, #148]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7fc fcd9 	bl	8001374 <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c6:	f7fc fcd5 	bl	8001374 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0be      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049dc:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d1eb      	bne.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d010      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d208      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f023 020f 	bic.w	r2, r3, #15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x244>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d214      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 020f 	bic.w	r2, r3, #15
 8004a32:	4906      	ldr	r1, [pc, #24]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <HAL_RCC_ClockConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e086      	b.n	8004b5a <HAL_RCC_ClockConfig+0x34e>
 8004a4c:	52002000 	.word	0x52002000
 8004a50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d010      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d208      	bcs.n	8004a82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a70:	4b3c      	ldr	r3, [pc, #240]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	4939      	ldr	r1, [pc, #228]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d010      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d208      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	492e      	ldr	r1, [pc, #184]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d010      	beq.n	8004ade <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d208      	bcs.n	8004ade <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	4922      	ldr	r1, [pc, #136]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d010      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d208      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4917      	ldr	r1, [pc, #92]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b0c:	f000 f834 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	4912      	ldr	r1, [pc, #72]	; (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x358>)
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004b34:	5cd3      	ldrb	r3, [r2, r3]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <HAL_RCC_ClockConfig+0x360>)
 8004b42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b44:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <HAL_RCC_ClockConfig+0x364>)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_RCC_ClockConfig+0x368>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc fbc6 	bl	80012e0 <HAL_InitTick>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
 8004b68:	080087a0 	.word	0x080087a0
 8004b6c:	24000004 	.word	0x24000004
 8004b70:	24000000 	.word	0x24000000
 8004b74:	24000008 	.word	0x24000008

08004b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7e:	4bb3      	ldr	r3, [pc, #716]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b86:	2b18      	cmp	r3, #24
 8004b88:	f200 8155 	bhi.w	8004e36 <HAL_RCC_GetSysClockFreq+0x2be>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bf9 	.word	0x08004bf9
 8004b98:	08004e37 	.word	0x08004e37
 8004b9c:	08004e37 	.word	0x08004e37
 8004ba0:	08004e37 	.word	0x08004e37
 8004ba4:	08004e37 	.word	0x08004e37
 8004ba8:	08004e37 	.word	0x08004e37
 8004bac:	08004e37 	.word	0x08004e37
 8004bb0:	08004e37 	.word	0x08004e37
 8004bb4:	08004c1f 	.word	0x08004c1f
 8004bb8:	08004e37 	.word	0x08004e37
 8004bbc:	08004e37 	.word	0x08004e37
 8004bc0:	08004e37 	.word	0x08004e37
 8004bc4:	08004e37 	.word	0x08004e37
 8004bc8:	08004e37 	.word	0x08004e37
 8004bcc:	08004e37 	.word	0x08004e37
 8004bd0:	08004e37 	.word	0x08004e37
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004e37 	.word	0x08004e37
 8004bdc:	08004e37 	.word	0x08004e37
 8004be0:	08004e37 	.word	0x08004e37
 8004be4:	08004e37 	.word	0x08004e37
 8004be8:	08004e37 	.word	0x08004e37
 8004bec:	08004e37 	.word	0x08004e37
 8004bf0:	08004e37 	.word	0x08004e37
 8004bf4:	08004c2b 	.word	0x08004c2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf8:	4b94      	ldr	r3, [pc, #592]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c04:	4b91      	ldr	r3, [pc, #580]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	08db      	lsrs	r3, r3, #3
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	4a90      	ldr	r2, [pc, #576]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c16:	e111      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c18:	4b8d      	ldr	r3, [pc, #564]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c1a:	61bb      	str	r3, [r7, #24]
    break;
 8004c1c:	e10e      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c1e:	4b8d      	ldr	r3, [pc, #564]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c20:	61bb      	str	r3, [r7, #24]
    break;
 8004c22:	e10b      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004c24:	4b8c      	ldr	r3, [pc, #560]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004c26:	61bb      	str	r3, [r7, #24]
    break;
 8004c28:	e108      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c2a:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c34:	4b85      	ldr	r3, [pc, #532]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c40:	4b82      	ldr	r3, [pc, #520]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c4a:	4b80      	ldr	r3, [pc, #512]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80e1 	beq.w	8004e30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	f000 8083 	beq.w	8004d7c <HAL_RCC_GetSysClockFreq+0x204>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	f200 80a1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x248>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x114>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d056      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c8a:	e099      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c8c:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02d      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c98:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	08db      	lsrs	r3, r3, #3
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	4a6b      	ldr	r2, [pc, #428]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004cf2:	e087      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004e60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d06:	4b51      	ldr	r3, [pc, #324]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d36:	e065      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004e64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4a:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7a:	e043      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004e68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004da2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dbe:	e021      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e04:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	0a5b      	lsrs	r3, r3, #9
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0e:	3301      	adds	r3, #1
 8004e10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e28:	ee17 3a90 	vmov	r3, s15
 8004e2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004e2e:	e005      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]
    break;
 8004e34:	e002      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004e36:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e38:	61bb      	str	r3, [r7, #24]
    break;
 8004e3a:	bf00      	nop
  }

  return sysclockfreq;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3724      	adds	r7, #36	; 0x24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	03d09000 	.word	0x03d09000
 8004e54:	003d0900 	.word	0x003d0900
 8004e58:	007a1200 	.word	0x007a1200
 8004e5c:	46000000 	.word	0x46000000
 8004e60:	4c742400 	.word	0x4c742400
 8004e64:	4a742400 	.word	0x4a742400
 8004e68:	4af42400 	.word	0x4af42400

08004e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e72:	f7ff fe81 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8004e76:	4602      	mov	r2, r0
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_RCC_GetHCLKFreq+0x50>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	490f      	ldr	r1, [pc, #60]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e84:	5ccb      	ldrb	r3, [r1, r3]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <HAL_RCC_GetHCLKFreq+0x50>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ea8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004eb0:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	080087a0 	.word	0x080087a0
 8004ec4:	24000004 	.word	0x24000004
 8004ec8:	24000000 	.word	0x24000000

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ed0:	f7ff ffcc 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4904      	ldr	r1, [pc, #16]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	080087a0 	.word	0x080087a0

08004ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004efc:	f7ff ffb6 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4904      	ldr	r1, [pc, #16]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	080087a0 	.word	0x080087a0

08004f24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f30:	2300      	movs	r3, #0
 8004f32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03f      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f48:	d02a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f4e:	d824      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f54:	d018      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f64:	d007      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f66:	e018      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f68:	4ba3      	ldr	r3, [pc, #652]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	4aa2      	ldr	r2, [pc, #648]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f74:	e015      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f9d5 	bl	800632c <RCCEx_PLL2_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f86:	e00c      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3324      	adds	r3, #36	; 0x24
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f001 fa7e 	bl	8006490 <RCCEx_PLL3_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004fa8:	4b93      	ldr	r3, [pc, #588]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb4:	4990      	ldr	r1, [pc, #576]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	650b      	str	r3, [r1, #80]	; 0x50
 8004fba:	e001      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d03d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d826      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08004ff1 	.word	0x08004ff1
 8004fe0:	08004fff 	.word	0x08004fff
 8004fe4:	08005011 	.word	0x08005011
 8004fe8:	08005029 	.word	0x08005029
 8004fec:	08005029 	.word	0x08005029
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff0:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ffc:	e015      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3304      	adds	r3, #4
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f001 f991 	bl	800632c <RCCEx_PLL2_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800500e:	e00c      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3324      	adds	r3, #36	; 0x24
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fa3a 	bl	8006490 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
      break;
 8005026:	e000      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005030:	4b71      	ldr	r3, [pc, #452]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	f023 0207 	bic.w	r2, r3, #7
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503c:	496e      	ldr	r1, [pc, #440]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	650b      	str	r3, [r1, #80]	; 0x50
 8005042:	e001      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005050:	2b00      	cmp	r3, #0
 8005052:	d042      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505c:	d02b      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d825      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005064:	2bc0      	cmp	r3, #192	; 0xc0
 8005066:	d028      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005068:	2bc0      	cmp	r3, #192	; 0xc0
 800506a:	d821      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800506c:	2b80      	cmp	r3, #128	; 0x80
 800506e:	d016      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d81d      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d007      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800507c:	e018      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507e:	4b5e      	ldr	r3, [pc, #376]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	4a5d      	ldr	r2, [pc, #372]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005088:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800508a:	e017      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f001 f94a 	bl	800632c <RCCEx_PLL2_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800509c:	e00e      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3324      	adds	r3, #36	; 0x24
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f9f3 	bl	8006490 <RCCEx_PLL3_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050ae:	e005      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
      break;
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80050ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050c2:	4b4d      	ldr	r3, [pc, #308]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	494a      	ldr	r1, [pc, #296]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	650b      	str	r3, [r1, #80]	; 0x50
 80050d4:	e001      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d049      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f0:	d030      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80050f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f6:	d82a      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050fc:	d02c      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80050fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005102:	d824      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005108:	d018      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510e:	d81e      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005118:	d007      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800511a:	e018      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511c:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	4a35      	ldr	r2, [pc, #212]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005128:	e017      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3304      	adds	r3, #4
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f001 f8fb 	bl	800632c <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800513a:	e00e      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f001 f9a4 	bl	8006490 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800514c:	e005      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
      break;
 8005152:	e002      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005154:	bf00      	nop
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005160:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800516e:	4922      	ldr	r1, [pc, #136]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	658b      	str	r3, [r1, #88]	; 0x58
 8005174:	e001      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005182:	2b00      	cmp	r3, #0
 8005184:	d04b      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800518c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005190:	d030      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005196:	d82a      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800519c:	d02e      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800519e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051a2:	d824      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80051a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a8:	d018      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80051aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ae:	d81e      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80051b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b8:	d007      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80051ba:	e018      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051c8:	e019      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 f8ab 	bl	800632c <RCCEx_PLL2_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051da:	e010      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f954 	bl	8006490 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051ec:	e007      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
      break;
 80051f2:	e004      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80051f8:	58024400 	.word	0x58024400
      break;
 80051fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005204:	4b99      	ldr	r3, [pc, #612]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005212:	4996      	ldr	r1, [pc, #600]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005214:	4313      	orrs	r3, r2
 8005216:	658b      	str	r3, [r1, #88]	; 0x58
 8005218:	e001      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d032      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b30      	cmp	r3, #48	; 0x30
 8005230:	d01c      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005232:	2b30      	cmp	r3, #48	; 0x30
 8005234:	d817      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005236:	2b20      	cmp	r3, #32
 8005238:	d00c      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800523a:	2b20      	cmp	r3, #32
 800523c:	d813      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005242:	2b10      	cmp	r3, #16
 8005244:	d10f      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005246:	4b89      	ldr	r3, [pc, #548]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4a88      	ldr	r2, [pc, #544]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005252:	e00e      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	2102      	movs	r1, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f001 f866 	bl	800632c <RCCEx_PLL2_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
      break;
 800526a:	e002      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005278:	4b7c      	ldr	r3, [pc, #496]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800527a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	4979      	ldr	r1, [pc, #484]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005286:	4313      	orrs	r3, r2
 8005288:	64cb      	str	r3, [r1, #76]	; 0x4c
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d047      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a4:	d030      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80052a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052aa:	d82a      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052b0:	d02c      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80052b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052b6:	d824      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052bc:	d018      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c2:	d81e      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052cc:	d007      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80052ce:	e018      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d0:	4b66      	ldr	r3, [pc, #408]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	4a65      	ldr	r2, [pc, #404]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052dc:	e017      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 f821 	bl	800632c <RCCEx_PLL2_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052ee:	e00e      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 f8ca 	bl	8006490 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005300:	e005      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
      break;
 8005306:	e002      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800530c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005314:	4b55      	ldr	r3, [pc, #340]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	4952      	ldr	r1, [pc, #328]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005322:	4313      	orrs	r3, r2
 8005324:	650b      	str	r3, [r1, #80]	; 0x50
 8005326:	e001      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d049      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005340:	d02e      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005346:	d828      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800534c:	d02a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800534e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005352:	d822      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005358:	d026      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800535a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800535e:	d81c      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005364:	d010      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800536a:	d816      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01d      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d111      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	2101      	movs	r1, #1
 800537c:	4618      	mov	r0, r3
 800537e:	f000 ffd5 	bl	800632c <RCCEx_PLL2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005386:	e012      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3324      	adds	r3, #36	; 0x24
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f001 f87e 	bl	8006490 <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005398:	e009      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	e006      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053a0:	bf00      	nop
 80053a2:	e004      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053a4:	bf00      	nop
 80053a6:	e002      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	492a      	ldr	r1, [pc, #168]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	650b      	str	r3, [r1, #80]	; 0x50
 80053c6:	e001      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d04d      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053e2:	d02e      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80053e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053e8:	d828      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d02a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d822      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053fa:	d026      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80053fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005400:	d81c      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005406:	d010      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540c:	d816      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01d      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005416:	d111      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff84 	bl	800632c <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005428:	e012      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f001 f82d 	bl	8006490 <RCCEx_PLL3_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800543a:	e009      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
      break;
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005442:	bf00      	nop
 8005444:	e004      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800544e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10c      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005464:	4901      	ldr	r1, [pc, #4]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005466:	4313      	orrs	r3, r2
 8005468:	658b      	str	r3, [r1, #88]	; 0x58
 800546a:	e003      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800546c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02f      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005488:	d00e      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800548a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800548e:	d814      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005498:	d10f      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549a:	4baf      	ldr	r3, [pc, #700]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	4aae      	ldr	r2, [pc, #696]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054a6:	e00c      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	2101      	movs	r1, #1
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff3c 	bl	800632c <RCCEx_PLL2_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054b8:	e003      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	75fb      	strb	r3, [r7, #23]
      break;
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80054c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054c8:	4ba3      	ldr	r3, [pc, #652]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d4:	49a0      	ldr	r1, [pc, #640]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	650b      	str	r3, [r1, #80]	; 0x50
 80054da:	e001      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d032      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d81b      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	08005533 	.word	0x08005533
 8005500:	0800550d 	.word	0x0800550d
 8005504:	0800551b 	.word	0x0800551b
 8005508:	08005533 	.word	0x08005533
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800550c:	4b92      	ldr	r3, [pc, #584]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4a91      	ldr	r2, [pc, #580]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005518:	e00c      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 ff03 	bl	800632c <RCCEx_PLL2_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800552a:	e003      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800553a:	4b87      	ldr	r3, [pc, #540]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	4984      	ldr	r1, [pc, #528]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005548:	4313      	orrs	r3, r2
 800554a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800554c:	e001      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8086 	beq.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005560:	4b7e      	ldr	r3, [pc, #504]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a7d      	ldr	r2, [pc, #500]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800556c:	f7fb ff02 	bl	8001374 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005572:	e009      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005574:	f7fb fefe 	bl	8001374 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d902      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	75fb      	strb	r3, [r7, #23]
        break;
 8005586:	e005      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005588:	4b74      	ldr	r3, [pc, #464]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ef      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d166      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800559a:	4b6f      	ldr	r3, [pc, #444]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800559c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a4:	4053      	eors	r3, r2
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ae:	4b6a      	ldr	r3, [pc, #424]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b8:	4b67      	ldr	r3, [pc, #412]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a66      	ldr	r2, [pc, #408]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c4:	4b64      	ldr	r3, [pc, #400]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a63      	ldr	r2, [pc, #396]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055d0:	4a61      	ldr	r2, [pc, #388]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e0:	d115      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fb fec7 	bl	8001374 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e8:	e00b      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fb fec3 	bl	8001374 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d902      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	75fb      	strb	r3, [r7, #23]
            break;
 8005600:	e005      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005602:	4b55      	ldr	r3, [pc, #340]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0ed      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d126      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005622:	d10d      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005624:	4b4c      	ldr	r3, [pc, #304]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005632:	0919      	lsrs	r1, r3, #4
 8005634:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005636:	400b      	ands	r3, r1
 8005638:	4947      	ldr	r1, [pc, #284]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
 800563e:	e005      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005640:	4b45      	ldr	r3, [pc, #276]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4a44      	ldr	r2, [pc, #272]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005646:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800564a:	6113      	str	r3, [r2, #16]
 800564c:	4b42      	ldr	r3, [pc, #264]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800564e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565a:	493f      	ldr	r1, [pc, #252]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800565c:	4313      	orrs	r3, r2
 800565e:	670b      	str	r3, [r1, #112]	; 0x70
 8005660:	e004      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	75bb      	strb	r3, [r7, #22]
 8005666:	e001      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8085 	beq.w	8005784 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800567e:	2b28      	cmp	r3, #40	; 0x28
 8005680:	d866      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	08005765 	.word	0x08005765
 800568c:	08005751 	.word	0x08005751
 8005690:	08005751 	.word	0x08005751
 8005694:	08005751 	.word	0x08005751
 8005698:	08005751 	.word	0x08005751
 800569c:	08005751 	.word	0x08005751
 80056a0:	08005751 	.word	0x08005751
 80056a4:	08005751 	.word	0x08005751
 80056a8:	0800572d 	.word	0x0800572d
 80056ac:	08005751 	.word	0x08005751
 80056b0:	08005751 	.word	0x08005751
 80056b4:	08005751 	.word	0x08005751
 80056b8:	08005751 	.word	0x08005751
 80056bc:	08005751 	.word	0x08005751
 80056c0:	08005751 	.word	0x08005751
 80056c4:	08005751 	.word	0x08005751
 80056c8:	0800573f 	.word	0x0800573f
 80056cc:	08005751 	.word	0x08005751
 80056d0:	08005751 	.word	0x08005751
 80056d4:	08005751 	.word	0x08005751
 80056d8:	08005751 	.word	0x08005751
 80056dc:	08005751 	.word	0x08005751
 80056e0:	08005751 	.word	0x08005751
 80056e4:	08005751 	.word	0x08005751
 80056e8:	08005765 	.word	0x08005765
 80056ec:	08005751 	.word	0x08005751
 80056f0:	08005751 	.word	0x08005751
 80056f4:	08005751 	.word	0x08005751
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005751 	.word	0x08005751
 8005700:	08005751 	.word	0x08005751
 8005704:	08005751 	.word	0x08005751
 8005708:	08005765 	.word	0x08005765
 800570c:	08005751 	.word	0x08005751
 8005710:	08005751 	.word	0x08005751
 8005714:	08005751 	.word	0x08005751
 8005718:	08005751 	.word	0x08005751
 800571c:	08005751 	.word	0x08005751
 8005720:	08005751 	.word	0x08005751
 8005724:	08005751 	.word	0x08005751
 8005728:	08005765 	.word	0x08005765
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fdfa 	bl	800632c <RCCEx_PLL2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800573c:	e013      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	2101      	movs	r1, #1
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fea3 	bl	8006490 <RCCEx_PLL3_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800574e:	e00a      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
      break;
 8005754:	e007      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400
 800575c:	58024800 	.word	0x58024800
 8005760:	00ffffcf 	.word	0x00ffffcf
      break;
 8005764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800576c:	4b96      	ldr	r3, [pc, #600]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005778:	4993      	ldr	r1, [pc, #588]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800577a:	4313      	orrs	r3, r2
 800577c:	654b      	str	r3, [r1, #84]	; 0x54
 800577e:	e001      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d038      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005794:	2b05      	cmp	r3, #5
 8005796:	d821      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057e3 	.word	0x080057e3
 80057a4:	080057b9 	.word	0x080057b9
 80057a8:	080057cb 	.word	0x080057cb
 80057ac:	080057e3 	.word	0x080057e3
 80057b0:	080057e3 	.word	0x080057e3
 80057b4:	080057e3 	.word	0x080057e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fdb4 	bl	800632c <RCCEx_PLL2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057c8:	e00c      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3324      	adds	r3, #36	; 0x24
 80057ce:	2101      	movs	r1, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fe5d 	bl	8006490 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	75fb      	strb	r3, [r7, #23]
      break;
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80057e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057ea:	4b77      	ldr	r3, [pc, #476]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f023 0207 	bic.w	r2, r3, #7
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f6:	4974      	ldr	r1, [pc, #464]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	654b      	str	r3, [r1, #84]	; 0x54
 80057fc:	e001      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d03a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	2b05      	cmp	r3, #5
 8005816:	d821      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005863 	.word	0x08005863
 8005824:	08005839 	.word	0x08005839
 8005828:	0800584b 	.word	0x0800584b
 800582c:	08005863 	.word	0x08005863
 8005830:	08005863 	.word	0x08005863
 8005834:	08005863 	.word	0x08005863
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fd74 	bl	800632c <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005848:	e00c      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3324      	adds	r3, #36	; 0x24
 800584e:	2101      	movs	r1, #1
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fe1d 	bl	8006490 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800585a:	e003      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
      break;
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800586a:	4b57      	ldr	r3, [pc, #348]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586e:	f023 0207 	bic.w	r2, r3, #7
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	4953      	ldr	r1, [pc, #332]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	658b      	str	r3, [r1, #88]	; 0x58
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d04b      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800589a:	d02e      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800589c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a0:	d828      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a6:	d02a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d822      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058b2:	d026      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80058b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058b8:	d81c      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058be:	d010      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80058c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c4:	d816      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01d      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80058ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ce:	d111      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fd28 	bl	800632c <RCCEx_PLL2_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058e0:	e012      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fdd1 	bl	8006490 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058f2:	e009      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	e006      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058fa:	bf00      	nop
 80058fc:	e004      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591c:	492a      	ldr	r1, [pc, #168]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800591e:	4313      	orrs	r3, r2
 8005920:	654b      	str	r3, [r1, #84]	; 0x54
 8005922:	e001      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d04d      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800593a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800593e:	d02e      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005940:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005944:	d828      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594a:	d02a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d822      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005956:	d026      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800595c:	d81c      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800595e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005962:	d010      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005968:	d816      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01d      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005972:	d111      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3304      	adds	r3, #4
 8005978:	2100      	movs	r1, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fcd6 	bl	800632c <RCCEx_PLL2_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005984:	e012      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3324      	adds	r3, #36	; 0x24
 800598a:	2102      	movs	r1, #2
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fd7f 	bl	8006490 <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005996:	e009      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800599e:	bf00      	nop
 80059a0:	e004      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059a2:	bf00      	nop
 80059a4:	e002      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10c      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c0:	4901      	ldr	r1, [pc, #4]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	658b      	str	r3, [r1, #88]	; 0x58
 80059c6:	e003      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80059c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d04b      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059e6:	d02e      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80059e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059ec:	d828      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f2:	d02a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80059f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f8:	d822      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059fe:	d026      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005a00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a04:	d81c      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a0a:	d010      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a10:	d816      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01d      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1a:	d111      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fc82 	bl	800632c <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a2c:	e012      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3324      	adds	r3, #36	; 0x24
 8005a32:	2102      	movs	r1, #2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fd2b 	bl	8006490 <RCCEx_PLL3_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a3e:	e009      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75fb      	strb	r3, [r7, #23]
      break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a46:	bf00      	nop
 8005a48:	e004      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a5a:	4b9d      	ldr	r3, [pc, #628]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a68:	4999      	ldr	r1, [pc, #612]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a6e:	e001      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	d10a      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	2102      	movs	r1, #2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fcfc 	bl	8006490 <RCCEx_PLL3_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005aa2:	4b8b      	ldr	r3, [pc, #556]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ab0:	4987      	ldr	r1, [pc, #540]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005acc:	d10a      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3324      	adds	r3, #36	; 0x24
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fcdb 	bl	8006490 <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ae4:	4b7a      	ldr	r3, [pc, #488]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af2:	4977      	ldr	r1, [pc, #476]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d034      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0e:	d01d      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b14:	d817      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1e:	d009      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005b20:	e011      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fbff 	bl	800632c <RCCEx_PLL2_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b32:	e00c      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3324      	adds	r3, #36	; 0x24
 8005b38:	2102      	movs	r1, #2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fca8 	bl	8006490 <RCCEx_PLL3_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4a:	e000      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b54:	4b5e      	ldr	r3, [pc, #376]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b62:	495b      	ldr	r1, [pc, #364]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	658b      	str	r3, [r1, #88]	; 0x58
 8005b68:	e001      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d033      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b84:	d01c      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005b86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b8a:	d816      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b90:	d003      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b96:	d007      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005b98:	e00f      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9a:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4a4c      	ldr	r2, [pc, #304]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ba6:	e00c      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3324      	adds	r3, #36	; 0x24
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fc6e 	bl	8006490 <RCCEx_PLL3_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005bb8:	e003      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bbe:	e000      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bc8:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd6:	493e      	ldr	r1, [pc, #248]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	654b      	str	r3, [r1, #84]	; 0x54
 8005bdc:	e001      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d029      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfa:	d007      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005bfc:	e00f      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfe:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	4a33      	ldr	r2, [pc, #204]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	2102      	movs	r1, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fb8a 	bl	800632c <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c1c:	e002      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
      break;
 8005c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c36:	4926      	ldr	r1, [pc, #152]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c3c:	e001      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	2102      	movs	r1, #2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fc1b 	bl	8006490 <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d033      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c78:	d017      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7e:	d811      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c84:	d013      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8a:	d80b      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c96:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005ca2:	e007      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc6:	4902      	ldr	r1, [pc, #8]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	654b      	str	r3, [r1, #84]	; 0x54
 8005ccc:	e004      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005cce:	bf00      	nop
 8005cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ce4:	4b31      	ldr	r3, [pc, #196]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	492e      	ldr	r1, [pc, #184]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d10:	4926      	ldr	r1, [pc, #152]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d2e:	491f      	ldr	r1, [pc, #124]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d40:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	4a19      	ldr	r2, [pc, #100]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d4a:	6113      	str	r3, [r2, #16]
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d56:	4915      	ldr	r1, [pc, #84]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	da08      	bge.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	490e      	ldr	r1, [pc, #56]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	4906      	ldr	r1, [pc, #24]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005d96:	7dbb      	ldrb	r3, [r7, #22]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400

08005db0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005db4:	f7ff f85a 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	080087a0 	.word	0x080087a0

08005ddc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005de4:	4ba1      	ldr	r3, [pc, #644]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005dee:	4b9f      	ldr	r3, [pc, #636]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	0b1b      	lsrs	r3, r3, #12
 8005df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dfa:	4b9c      	ldr	r3, [pc, #624]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005e06:	4b99      	ldr	r3, [pc, #612]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	08db      	lsrs	r3, r3, #3
 8005e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8111 	beq.w	800604c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	f000 8083 	beq.w	8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	f200 80a1 	bhi.w	8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d056      	beq.n	8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e46:	e099      	b.n	8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e48:	4b88      	ldr	r3, [pc, #544]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02d      	beq.n	8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e54:	4b85      	ldr	r3, [pc, #532]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	08db      	lsrs	r3, r3, #3
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	4a84      	ldr	r2, [pc, #528]	; (8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
 8005e64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b7b      	ldr	r3, [pc, #492]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005eae:	e087      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b6a      	ldr	r3, [pc, #424]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ef2:	e065      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800607c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b59      	ldr	r3, [pc, #356]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f36:	e043      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b48      	ldr	r3, [pc, #288]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f7a:	e021      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800607c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b37      	ldr	r3, [pc, #220]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005fc0:	4b2a      	ldr	r3, [pc, #168]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	0a5b      	lsrs	r3, r3, #9
 8005fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe6:	ee17 2a90 	vmov	r2, s15
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fee:	4b1f      	ldr	r3, [pc, #124]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006004:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006008:	edd7 6a07 	vldr	s13, [r7, #28]
 800600c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006014:	ee17 2a90 	vmov	r2, s15
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	0e1b      	lsrs	r3, r3, #24
 8006022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006032:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006036:	edd7 6a07 	vldr	s13, [r7, #28]
 800603a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800603e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006042:	ee17 2a90 	vmov	r2, s15
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800604a:	e008      	b.n	800605e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	609a      	str	r2, [r3, #8]
}
 800605e:	bf00      	nop
 8006060:	3724      	adds	r7, #36	; 0x24
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	58024400 	.word	0x58024400
 8006070:	03d09000 	.word	0x03d09000
 8006074:	46000000 	.word	0x46000000
 8006078:	4c742400 	.word	0x4c742400
 800607c:	4a742400 	.word	0x4a742400
 8006080:	4af42400 	.word	0x4af42400

08006084 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006084:	b480      	push	{r7}
 8006086:	b089      	sub	sp, #36	; 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800608c:	4ba1      	ldr	r3, [pc, #644]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006096:	4b9f      	ldr	r3, [pc, #636]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	0d1b      	lsrs	r3, r3, #20
 800609c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060a2:	4b9c      	ldr	r3, [pc, #624]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80060ae:	4b99      	ldr	r3, [pc, #612]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	08db      	lsrs	r3, r3, #3
 80060b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8111 	beq.w	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f000 8083 	beq.w	80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	f200 80a1 	bhi.w	8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d056      	beq.n	800619c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060ee:	e099      	b.n	8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f0:	4b88      	ldr	r3, [pc, #544]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02d      	beq.n	8006158 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060fc:	4b85      	ldr	r3, [pc, #532]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	08db      	lsrs	r3, r3, #3
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	4a84      	ldr	r2, [pc, #528]	; (8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
 800610c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006126:	4b7b      	ldr	r3, [pc, #492]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006136:	ed97 6a03 	vldr	s12, [r7, #12]
 800613a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800613e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006152:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006156:	e087      	b.n	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616a:	4b6a      	ldr	r3, [pc, #424]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617a:	ed97 6a03 	vldr	s12, [r7, #12]
 800617e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800619a:	e065      	b.n	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b59      	ldr	r3, [pc, #356]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061de:	e043      	b.n	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f2:	4b48      	ldr	r3, [pc, #288]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006202:	ed97 6a03 	vldr	s12, [r7, #12]
 8006206:	eddf 5a45 	vldr	s11, [pc, #276]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800620a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006222:	e021      	b.n	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b37      	ldr	r3, [pc, #220]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006246:	ed97 6a03 	vldr	s12, [r7, #12]
 800624a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006266:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006268:	4b2a      	ldr	r3, [pc, #168]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	0a5b      	lsrs	r3, r3, #9
 800626e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006282:	edd7 6a07 	vldr	s13, [r7, #28]
 8006286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628e:	ee17 2a90 	vmov	r2, s15
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006296:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062bc:	ee17 2a90 	vmov	r2, s15
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062de:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ea:	ee17 2a90 	vmov	r2, s15
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062f2:	e008      	b.n	8006306 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	609a      	str	r2, [r3, #8]
}
 8006306:	bf00      	nop
 8006308:	3724      	adds	r7, #36	; 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	58024400 	.word	0x58024400
 8006318:	03d09000 	.word	0x03d09000
 800631c:	46000000 	.word	0x46000000
 8006320:	4c742400 	.word	0x4c742400
 8006324:	4a742400 	.word	0x4a742400
 8006328:	4af42400 	.word	0x4af42400

0800632c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800633a:	4b53      	ldr	r3, [pc, #332]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d101      	bne.n	800634a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e099      	b.n	800647e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800634a:	4b4f      	ldr	r3, [pc, #316]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006356:	f7fb f80d 	bl	8001374 <HAL_GetTick>
 800635a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800635c:	e008      	b.n	8006370 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800635e:	f7fb f809 	bl	8001374 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e086      	b.n	800647e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006370:	4b45      	ldr	r3, [pc, #276]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800637c:	4b42      	ldr	r3, [pc, #264]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	493f      	ldr	r1, [pc, #252]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	628b      	str	r3, [r1, #40]	; 0x28
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	3b01      	subs	r3, #1
 80063a0:	025b      	lsls	r3, r3, #9
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063c0:	4931      	ldr	r1, [pc, #196]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063c6:	4b30      	ldr	r3, [pc, #192]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	492d      	ldr	r1, [pc, #180]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f023 0220 	bic.w	r2, r3, #32
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	4928      	ldr	r1, [pc, #160]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063ea:	4b27      	ldr	r3, [pc, #156]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063f0:	f023 0310 	bic.w	r3, r3, #16
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <RCCEx_PLL2_Config+0x160>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	69d2      	ldr	r2, [r2, #28]
 8006402:	00d2      	lsls	r2, r2, #3
 8006404:	4920      	ldr	r1, [pc, #128]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800640a:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006410:	f043 0310 	orr.w	r3, r3, #16
 8006414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a19      	ldr	r2, [pc, #100]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006428:	e00f      	b.n	800644a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d106      	bne.n	800643e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800643c:	e005      	b.n	800644a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a11      	ldr	r2, [pc, #68]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006456:	f7fa ff8d 	bl	8001374 <HAL_GetTick>
 800645a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800645c:	e008      	b.n	8006470 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800645e:	f7fa ff89 	bl	8001374 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e006      	b.n	800647e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	58024400 	.word	0x58024400
 800648c:	ffff0007 	.word	0xffff0007

08006490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800649e:	4b53      	ldr	r3, [pc, #332]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d101      	bne.n	80064ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e099      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ae:	4b4f      	ldr	r3, [pc, #316]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a4e      	ldr	r2, [pc, #312]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ba:	f7fa ff5b 	bl	8001374 <HAL_GetTick>
 80064be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064c2:	f7fa ff57 	bl	8001374 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e086      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064d4:	4b45      	ldr	r3, [pc, #276]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064e0:	4b42      	ldr	r3, [pc, #264]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	051b      	lsls	r3, r3, #20
 80064ee:	493f      	ldr	r1, [pc, #252]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	628b      	str	r3, [r1, #40]	; 0x28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	025b      	lsls	r3, r3, #9
 8006506:	b29b      	uxth	r3, r3
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	3b01      	subs	r3, #1
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	3b01      	subs	r3, #1
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006524:	4931      	ldr	r1, [pc, #196]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	492d      	ldr	r1, [pc, #180]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006538:	4313      	orrs	r3, r2
 800653a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800653c:	4b2b      	ldr	r3, [pc, #172]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	4928      	ldr	r1, [pc, #160]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800654e:	4b27      	ldr	r3, [pc, #156]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	4a26      	ldr	r2, [pc, #152]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800655a:	4b24      	ldr	r3, [pc, #144]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800655c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <RCCEx_PLL3_Config+0x160>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	69d2      	ldr	r2, [r2, #28]
 8006566:	00d2      	lsls	r2, r2, #3
 8006568:	4920      	ldr	r1, [pc, #128]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800656e:	4b1f      	ldr	r3, [pc, #124]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006580:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800658a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800658c:	e00f      	b.n	80065ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006594:	4b15      	ldr	r3, [pc, #84]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800659a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065a0:	e005      	b.n	80065ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ba:	f7fa fedb 	bl	8001374 <HAL_GetTick>
 80065be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065c0:	e008      	b.n	80065d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065c2:	f7fa fed7 	bl	8001374 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	ffff0007 	.word	0xffff0007

080065f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e042      	b.n	800668c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fa fc5f 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2224      	movs	r2, #36	; 0x24
 8006622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8c2 	bl	80067c0 <UART_SetConfig>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e022      	b.n	800668c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fe1e 	bl	8007290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fea5 	bl	80073d4 <UART_CheckIdleState>
 800668a:	4603      	mov	r3, r0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	f040 8083 	bne.w	80067b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_UART_Transmit+0x28>
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e07b      	b.n	80067b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_UART_Transmit+0x3a>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e074      	b.n	80067b8 <HAL_UART_Transmit+0x124>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2221      	movs	r2, #33	; 0x21
 80066e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066e6:	f7fa fe45 	bl	8001374 <HAL_GetTick>
 80066ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006704:	d108      	bne.n	8006718 <HAL_UART_Transmit+0x84>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e003      	b.n	8006720 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006728:	e02c      	b.n	8006784 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fe98 	bl	800746a <UART_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e039      	b.n	80067b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	3302      	adds	r3, #2
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	e007      	b.n	8006772 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1cc      	bne.n	800672a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	2140      	movs	r1, #64	; 0x40
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fe65 	bl	800746a <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e006      	b.n	80067b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c4:	b092      	sub	sp, #72	; 0x48
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	431a      	orrs	r2, r3
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	431a      	orrs	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4bbe      	ldr	r3, [pc, #760]	; (8006ae8 <UART_SetConfig+0x328>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4ab3      	ldr	r2, [pc, #716]	; (8006aec <UART_SetConfig+0x32c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006828:	4313      	orrs	r3, r2
 800682a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	4baf      	ldr	r3, [pc, #700]	; (8006af0 <UART_SetConfig+0x330>)
 8006834:	4013      	ands	r3, r2
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800683c:	430b      	orrs	r3, r1
 800683e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	f023 010f 	bic.w	r1, r3, #15
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4aa6      	ldr	r2, [pc, #664]	; (8006af4 <UART_SetConfig+0x334>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d177      	bne.n	8006950 <UART_SetConfig+0x190>
 8006860:	4ba5      	ldr	r3, [pc, #660]	; (8006af8 <UART_SetConfig+0x338>)
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006868:	2b28      	cmp	r3, #40	; 0x28
 800686a:	d86d      	bhi.n	8006948 <UART_SetConfig+0x188>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0xb4>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	08006919 	.word	0x08006919
 8006878:	08006949 	.word	0x08006949
 800687c:	08006949 	.word	0x08006949
 8006880:	08006949 	.word	0x08006949
 8006884:	08006949 	.word	0x08006949
 8006888:	08006949 	.word	0x08006949
 800688c:	08006949 	.word	0x08006949
 8006890:	08006949 	.word	0x08006949
 8006894:	08006921 	.word	0x08006921
 8006898:	08006949 	.word	0x08006949
 800689c:	08006949 	.word	0x08006949
 80068a0:	08006949 	.word	0x08006949
 80068a4:	08006949 	.word	0x08006949
 80068a8:	08006949 	.word	0x08006949
 80068ac:	08006949 	.word	0x08006949
 80068b0:	08006949 	.word	0x08006949
 80068b4:	08006929 	.word	0x08006929
 80068b8:	08006949 	.word	0x08006949
 80068bc:	08006949 	.word	0x08006949
 80068c0:	08006949 	.word	0x08006949
 80068c4:	08006949 	.word	0x08006949
 80068c8:	08006949 	.word	0x08006949
 80068cc:	08006949 	.word	0x08006949
 80068d0:	08006949 	.word	0x08006949
 80068d4:	08006931 	.word	0x08006931
 80068d8:	08006949 	.word	0x08006949
 80068dc:	08006949 	.word	0x08006949
 80068e0:	08006949 	.word	0x08006949
 80068e4:	08006949 	.word	0x08006949
 80068e8:	08006949 	.word	0x08006949
 80068ec:	08006949 	.word	0x08006949
 80068f0:	08006949 	.word	0x08006949
 80068f4:	08006939 	.word	0x08006939
 80068f8:	08006949 	.word	0x08006949
 80068fc:	08006949 	.word	0x08006949
 8006900:	08006949 	.word	0x08006949
 8006904:	08006949 	.word	0x08006949
 8006908:	08006949 	.word	0x08006949
 800690c:	08006949 	.word	0x08006949
 8006910:	08006949 	.word	0x08006949
 8006914:	08006941 	.word	0x08006941
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e222      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006920:	2304      	movs	r3, #4
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e21e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006928:	2308      	movs	r3, #8
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e21a      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006930:	2310      	movs	r3, #16
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e216      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006938:	2320      	movs	r3, #32
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e212      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006940:	2340      	movs	r3, #64	; 0x40
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e20e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e20a      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a69      	ldr	r2, [pc, #420]	; (8006afc <UART_SetConfig+0x33c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d130      	bne.n	80069bc <UART_SetConfig+0x1fc>
 800695a:	4b67      	ldr	r3, [pc, #412]	; (8006af8 <UART_SetConfig+0x338>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	2b05      	cmp	r3, #5
 8006964:	d826      	bhi.n	80069b4 <UART_SetConfig+0x1f4>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <UART_SetConfig+0x1ac>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	08006985 	.word	0x08006985
 8006970:	0800698d 	.word	0x0800698d
 8006974:	08006995 	.word	0x08006995
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069a5 	.word	0x080069a5
 8006980:	080069ad 	.word	0x080069ad
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698a:	e1ec      	b.n	8006d66 <UART_SetConfig+0x5a6>
 800698c:	2304      	movs	r3, #4
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e1e8      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006994:	2308      	movs	r3, #8
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e1e4      	b.n	8006d66 <UART_SetConfig+0x5a6>
 800699c:	2310      	movs	r3, #16
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e1e0      	b.n	8006d66 <UART_SetConfig+0x5a6>
 80069a4:	2320      	movs	r3, #32
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e1dc      	b.n	8006d66 <UART_SetConfig+0x5a6>
 80069ac:	2340      	movs	r3, #64	; 0x40
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e1d8      	b.n	8006d66 <UART_SetConfig+0x5a6>
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e1d4      	b.n	8006d66 <UART_SetConfig+0x5a6>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a4f      	ldr	r2, [pc, #316]	; (8006b00 <UART_SetConfig+0x340>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d130      	bne.n	8006a28 <UART_SetConfig+0x268>
 80069c6:	4b4c      	ldr	r3, [pc, #304]	; (8006af8 <UART_SetConfig+0x338>)
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d826      	bhi.n	8006a20 <UART_SetConfig+0x260>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0x218>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069f1 	.word	0x080069f1
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	08006a01 	.word	0x08006a01
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f6:	e1b6      	b.n	8006d66 <UART_SetConfig+0x5a6>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fe:	e1b2      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a06:	e1ae      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0e:	e1aa      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a10:	2320      	movs	r3, #32
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e1a6      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a18:	2340      	movs	r3, #64	; 0x40
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e1a2      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a26:	e19e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a35      	ldr	r2, [pc, #212]	; (8006b04 <UART_SetConfig+0x344>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d130      	bne.n	8006a94 <UART_SetConfig+0x2d4>
 8006a32:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <UART_SetConfig+0x338>)
 8006a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	d826      	bhi.n	8006a8c <UART_SetConfig+0x2cc>
 8006a3e:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <UART_SetConfig+0x284>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006a5d 	.word	0x08006a5d
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a62:	e180      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e17c      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e178      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7a:	e174      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a7c:	2320      	movs	r3, #32
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e170      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e16c      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a8c:	2380      	movs	r3, #128	; 0x80
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e168      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <UART_SetConfig+0x348>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d142      	bne.n	8006b24 <UART_SetConfig+0x364>
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <UART_SetConfig+0x338>)
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	d838      	bhi.n	8006b1c <UART_SetConfig+0x35c>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x2f0>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ac9 	.word	0x08006ac9
 8006ab4:	08006ad1 	.word	0x08006ad1
 8006ab8:	08006ad9 	.word	0x08006ad9
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006b15 	.word	0x08006b15
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ace:	e14a      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad6:	e146      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ade:	e142      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae6:	e13e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006ae8:	cfff69f3 	.word	0xcfff69f3
 8006aec:	58000c00 	.word	0x58000c00
 8006af0:	11fff4ff 	.word	0x11fff4ff
 8006af4:	40011000 	.word	0x40011000
 8006af8:	58024400 	.word	0x58024400
 8006afc:	40004400 	.word	0x40004400
 8006b00:	40004800 	.word	0x40004800
 8006b04:	40004c00 	.word	0x40004c00
 8006b08:	40005000 	.word	0x40005000
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e128      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006b14:	2340      	movs	r3, #64	; 0x40
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e124      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e120      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4acb      	ldr	r2, [pc, #812]	; (8006e58 <UART_SetConfig+0x698>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d176      	bne.n	8006c1c <UART_SetConfig+0x45c>
 8006b2e:	4bcb      	ldr	r3, [pc, #812]	; (8006e5c <UART_SetConfig+0x69c>)
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b36:	2b28      	cmp	r3, #40	; 0x28
 8006b38:	d86c      	bhi.n	8006c14 <UART_SetConfig+0x454>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x380>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006be5 	.word	0x08006be5
 8006b44:	08006c15 	.word	0x08006c15
 8006b48:	08006c15 	.word	0x08006c15
 8006b4c:	08006c15 	.word	0x08006c15
 8006b50:	08006c15 	.word	0x08006c15
 8006b54:	08006c15 	.word	0x08006c15
 8006b58:	08006c15 	.word	0x08006c15
 8006b5c:	08006c15 	.word	0x08006c15
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006c15 	.word	0x08006c15
 8006b68:	08006c15 	.word	0x08006c15
 8006b6c:	08006c15 	.word	0x08006c15
 8006b70:	08006c15 	.word	0x08006c15
 8006b74:	08006c15 	.word	0x08006c15
 8006b78:	08006c15 	.word	0x08006c15
 8006b7c:	08006c15 	.word	0x08006c15
 8006b80:	08006bf5 	.word	0x08006bf5
 8006b84:	08006c15 	.word	0x08006c15
 8006b88:	08006c15 	.word	0x08006c15
 8006b8c:	08006c15 	.word	0x08006c15
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006c15 	.word	0x08006c15
 8006b98:	08006c15 	.word	0x08006c15
 8006b9c:	08006c15 	.word	0x08006c15
 8006ba0:	08006bfd 	.word	0x08006bfd
 8006ba4:	08006c15 	.word	0x08006c15
 8006ba8:	08006c15 	.word	0x08006c15
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006c15 	.word	0x08006c15
 8006bb4:	08006c15 	.word	0x08006c15
 8006bb8:	08006c15 	.word	0x08006c15
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c05 	.word	0x08006c05
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c15 	.word	0x08006c15
 8006bcc:	08006c15 	.word	0x08006c15
 8006bd0:	08006c15 	.word	0x08006c15
 8006bd4:	08006c15 	.word	0x08006c15
 8006bd8:	08006c15 	.word	0x08006c15
 8006bdc:	08006c15 	.word	0x08006c15
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e0bc      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006bec:	2304      	movs	r3, #4
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e0b8      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e0b4      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e0b0      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c04:	2320      	movs	r3, #32
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e0ac      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e0a8      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e0a4      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a8f      	ldr	r2, [pc, #572]	; (8006e60 <UART_SetConfig+0x6a0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d130      	bne.n	8006c88 <UART_SetConfig+0x4c8>
 8006c26:	4b8d      	ldr	r3, [pc, #564]	; (8006e5c <UART_SetConfig+0x69c>)
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d826      	bhi.n	8006c80 <UART_SetConfig+0x4c0>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x478>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c51 	.word	0x08006c51
 8006c3c:	08006c59 	.word	0x08006c59
 8006c40:	08006c61 	.word	0x08006c61
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c71 	.word	0x08006c71
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e086      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e082      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e07e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e07a      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c70:	2320      	movs	r3, #32
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e076      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e072      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e06e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a75      	ldr	r2, [pc, #468]	; (8006e64 <UART_SetConfig+0x6a4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d130      	bne.n	8006cf4 <UART_SetConfig+0x534>
 8006c92:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <UART_SetConfig+0x69c>)
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	d826      	bhi.n	8006cec <UART_SetConfig+0x52c>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0x4e4>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cc5 	.word	0x08006cc5
 8006cac:	08006ccd 	.word	0x08006ccd
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cdd 	.word	0x08006cdd
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc2:	e050      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cca:	e04c      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e048      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e044      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e040      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e03c      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e038      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a5b      	ldr	r2, [pc, #364]	; (8006e68 <UART_SetConfig+0x6a8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d130      	bne.n	8006d60 <UART_SetConfig+0x5a0>
 8006cfe:	4b57      	ldr	r3, [pc, #348]	; (8006e5c <UART_SetConfig+0x69c>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d826      	bhi.n	8006d58 <UART_SetConfig+0x598>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x550>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d29 	.word	0x08006d29
 8006d14:	08006d31 	.word	0x08006d31
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e01a      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e016      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e012      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e00e      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d48:	2320      	movs	r3, #32
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e00a      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e006      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e002      	b.n	8006d66 <UART_SetConfig+0x5a6>
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3f      	ldr	r2, [pc, #252]	; (8006e68 <UART_SetConfig+0x6a8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	f040 80f8 	bne.w	8006f62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	dc46      	bgt.n	8006e08 <UART_SetConfig+0x648>
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	f2c0 8082 	blt.w	8006e84 <UART_SetConfig+0x6c4>
 8006d80:	3b02      	subs	r3, #2
 8006d82:	2b1e      	cmp	r3, #30
 8006d84:	d87e      	bhi.n	8006e84 <UART_SetConfig+0x6c4>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x5cc>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006e0f 	.word	0x08006e0f
 8006d90:	08006e85 	.word	0x08006e85
 8006d94:	08006e17 	.word	0x08006e17
 8006d98:	08006e85 	.word	0x08006e85
 8006d9c:	08006e85 	.word	0x08006e85
 8006da0:	08006e85 	.word	0x08006e85
 8006da4:	08006e27 	.word	0x08006e27
 8006da8:	08006e85 	.word	0x08006e85
 8006dac:	08006e85 	.word	0x08006e85
 8006db0:	08006e85 	.word	0x08006e85
 8006db4:	08006e85 	.word	0x08006e85
 8006db8:	08006e85 	.word	0x08006e85
 8006dbc:	08006e85 	.word	0x08006e85
 8006dc0:	08006e85 	.word	0x08006e85
 8006dc4:	08006e37 	.word	0x08006e37
 8006dc8:	08006e85 	.word	0x08006e85
 8006dcc:	08006e85 	.word	0x08006e85
 8006dd0:	08006e85 	.word	0x08006e85
 8006dd4:	08006e85 	.word	0x08006e85
 8006dd8:	08006e85 	.word	0x08006e85
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006e85 	.word	0x08006e85
 8006de4:	08006e85 	.word	0x08006e85
 8006de8:	08006e85 	.word	0x08006e85
 8006dec:	08006e85 	.word	0x08006e85
 8006df0:	08006e85 	.word	0x08006e85
 8006df4:	08006e85 	.word	0x08006e85
 8006df8:	08006e85 	.word	0x08006e85
 8006dfc:	08006e85 	.word	0x08006e85
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006e77 	.word	0x08006e77
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d037      	beq.n	8006e7c <UART_SetConfig+0x6bc>
 8006e0c:	e03a      	b.n	8006e84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e0e:	f7fe ffcf 	bl	8005db0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e14:	e03c      	b.n	8006e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe ffde 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e24:	e034      	b.n	8006e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e26:	f107 0318 	add.w	r3, r7, #24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff f92a 	bl	8006084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e34:	e02c      	b.n	8006e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <UART_SetConfig+0x69c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d016      	beq.n	8006e70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <UART_SetConfig+0x69c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	08db      	lsrs	r3, r3, #3
 8006e48:	f003 0303 	and.w	r3, r3, #3
 8006e4c:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <UART_SetConfig+0x6ac>)
 8006e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e54:	e01c      	b.n	8006e90 <UART_SetConfig+0x6d0>
 8006e56:	bf00      	nop
 8006e58:	40011400 	.word	0x40011400
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	40007800 	.word	0x40007800
 8006e64:	40007c00 	.word	0x40007c00
 8006e68:	58000c00 	.word	0x58000c00
 8006e6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b9d      	ldr	r3, [pc, #628]	; (80070e8 <UART_SetConfig+0x928>)
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e74:	e00c      	b.n	8006e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e76:	4b9d      	ldr	r3, [pc, #628]	; (80070ec <UART_SetConfig+0x92c>)
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e7a:	e009      	b.n	8006e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e82:	e005      	b.n	8006e90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 81de 	beq.w	8007254 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	4a94      	ldr	r2, [pc, #592]	; (80070f0 <UART_SetConfig+0x930>)
 8006e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	4413      	add	r3, r2
 8006eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d305      	bcc.n	8006ec8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d903      	bls.n	8006ed0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ece:	e1c1      	b.n	8007254 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	60fa      	str	r2, [r7, #12]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	4a84      	ldr	r2, [pc, #528]	; (80070f0 <UART_SetConfig+0x930>)
 8006ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ef2:	f7f9 fa45 	bl	8000380 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	020b      	lsls	r3, r1, #8
 8006f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f0c:	0202      	lsls	r2, r0, #8
 8006f0e:	6979      	ldr	r1, [r7, #20]
 8006f10:	6849      	ldr	r1, [r1, #4]
 8006f12:	0849      	lsrs	r1, r1, #1
 8006f14:	2000      	movs	r0, #0
 8006f16:	460c      	mov	r4, r1
 8006f18:	4605      	mov	r5, r0
 8006f1a:	eb12 0804 	adds.w	r8, r2, r4
 8006f1e:	eb43 0905 	adc.w	r9, r3, r5
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	469a      	mov	sl, r3
 8006f2a:	4693      	mov	fp, r2
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	465b      	mov	r3, fp
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 fa24 	bl	8000380 <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f46:	d308      	bcc.n	8006f5a <UART_SetConfig+0x79a>
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4e:	d204      	bcs.n	8006f5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f56:	60da      	str	r2, [r3, #12]
 8006f58:	e17c      	b.n	8007254 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f60:	e178      	b.n	8007254 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6a:	f040 80c5 	bne.w	80070f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	dc48      	bgt.n	8007008 <UART_SetConfig+0x848>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	db7b      	blt.n	8007072 <UART_SetConfig+0x8b2>
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d879      	bhi.n	8007072 <UART_SetConfig+0x8b2>
 8006f7e:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <UART_SetConfig+0x7c4>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	0800700f 	.word	0x0800700f
 8006f88:	08007017 	.word	0x08007017
 8006f8c:	08007073 	.word	0x08007073
 8006f90:	08007073 	.word	0x08007073
 8006f94:	0800701f 	.word	0x0800701f
 8006f98:	08007073 	.word	0x08007073
 8006f9c:	08007073 	.word	0x08007073
 8006fa0:	08007073 	.word	0x08007073
 8006fa4:	0800702f 	.word	0x0800702f
 8006fa8:	08007073 	.word	0x08007073
 8006fac:	08007073 	.word	0x08007073
 8006fb0:	08007073 	.word	0x08007073
 8006fb4:	08007073 	.word	0x08007073
 8006fb8:	08007073 	.word	0x08007073
 8006fbc:	08007073 	.word	0x08007073
 8006fc0:	08007073 	.word	0x08007073
 8006fc4:	0800703f 	.word	0x0800703f
 8006fc8:	08007073 	.word	0x08007073
 8006fcc:	08007073 	.word	0x08007073
 8006fd0:	08007073 	.word	0x08007073
 8006fd4:	08007073 	.word	0x08007073
 8006fd8:	08007073 	.word	0x08007073
 8006fdc:	08007073 	.word	0x08007073
 8006fe0:	08007073 	.word	0x08007073
 8006fe4:	08007073 	.word	0x08007073
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	08007073 	.word	0x08007073
 8006ff0:	08007073 	.word	0x08007073
 8006ff4:	08007073 	.word	0x08007073
 8006ff8:	08007073 	.word	0x08007073
 8006ffc:	08007073 	.word	0x08007073
 8007000:	08007073 	.word	0x08007073
 8007004:	08007065 	.word	0x08007065
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d02e      	beq.n	800706a <UART_SetConfig+0x8aa>
 800700c:	e031      	b.n	8007072 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700e:	f7fd ff5d 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8007012:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007014:	e033      	b.n	800707e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007016:	f7fd ff6f 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 800701a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800701c:	e02f      	b.n	800707e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe feda 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702c:	e027      	b.n	800707e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800702e:	f107 0318 	add.w	r3, r7, #24
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff f826 	bl	8006084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800703c:	e01f      	b.n	800707e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703e:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <UART_SetConfig+0x934>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800704a:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <UART_SetConfig+0x934>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	08db      	lsrs	r3, r3, #3
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <UART_SetConfig+0x928>)
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800705c:	e00f      	b.n	800707e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800705e:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <UART_SetConfig+0x928>)
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007062:	e00c      	b.n	800707e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007064:	4b21      	ldr	r3, [pc, #132]	; (80070ec <UART_SetConfig+0x92c>)
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007068:	e009      	b.n	800707e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007070:	e005      	b.n	800707e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800707c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80e7 	beq.w	8007254 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	4a19      	ldr	r2, [pc, #100]	; (80070f0 <UART_SetConfig+0x930>)
 800708c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007090:	461a      	mov	r2, r3
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007094:	fbb3 f3f2 	udiv	r3, r3, r2
 8007098:	005a      	lsls	r2, r3, #1
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	441a      	add	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	d916      	bls.n	80070e0 <UART_SetConfig+0x920>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b8:	d212      	bcs.n	80070e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f023 030f 	bic.w	r3, r3, #15
 80070c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070d2:	4313      	orrs	r3, r2
 80070d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e0b9      	b.n	8007254 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070e6:	e0b5      	b.n	8007254 <UART_SetConfig+0xa94>
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	080087b8 	.word	0x080087b8
 80070f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80070f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	dc49      	bgt.n	8007194 <UART_SetConfig+0x9d4>
 8007100:	2b00      	cmp	r3, #0
 8007102:	db7c      	blt.n	80071fe <UART_SetConfig+0xa3e>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d87a      	bhi.n	80071fe <UART_SetConfig+0xa3e>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <UART_SetConfig+0x950>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	0800719b 	.word	0x0800719b
 8007114:	080071a3 	.word	0x080071a3
 8007118:	080071ff 	.word	0x080071ff
 800711c:	080071ff 	.word	0x080071ff
 8007120:	080071ab 	.word	0x080071ab
 8007124:	080071ff 	.word	0x080071ff
 8007128:	080071ff 	.word	0x080071ff
 800712c:	080071ff 	.word	0x080071ff
 8007130:	080071bb 	.word	0x080071bb
 8007134:	080071ff 	.word	0x080071ff
 8007138:	080071ff 	.word	0x080071ff
 800713c:	080071ff 	.word	0x080071ff
 8007140:	080071ff 	.word	0x080071ff
 8007144:	080071ff 	.word	0x080071ff
 8007148:	080071ff 	.word	0x080071ff
 800714c:	080071ff 	.word	0x080071ff
 8007150:	080071cb 	.word	0x080071cb
 8007154:	080071ff 	.word	0x080071ff
 8007158:	080071ff 	.word	0x080071ff
 800715c:	080071ff 	.word	0x080071ff
 8007160:	080071ff 	.word	0x080071ff
 8007164:	080071ff 	.word	0x080071ff
 8007168:	080071ff 	.word	0x080071ff
 800716c:	080071ff 	.word	0x080071ff
 8007170:	080071ff 	.word	0x080071ff
 8007174:	080071ff 	.word	0x080071ff
 8007178:	080071ff 	.word	0x080071ff
 800717c:	080071ff 	.word	0x080071ff
 8007180:	080071ff 	.word	0x080071ff
 8007184:	080071ff 	.word	0x080071ff
 8007188:	080071ff 	.word	0x080071ff
 800718c:	080071ff 	.word	0x080071ff
 8007190:	080071f1 	.word	0x080071f1
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d02e      	beq.n	80071f6 <UART_SetConfig+0xa36>
 8007198:	e031      	b.n	80071fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800719a:	f7fd fe97 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800719e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071a0:	e033      	b.n	800720a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a2:	f7fd fea9 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 80071a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071a8:	e02f      	b.n	800720a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fe14 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b8:	e027      	b.n	800720a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ba:	f107 0318 	add.w	r3, r7, #24
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe ff60 	bl	8006084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c8:	e01f      	b.n	800720a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ca:	4b2d      	ldr	r3, [pc, #180]	; (8007280 <UART_SetConfig+0xac0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071d6:	4b2a      	ldr	r3, [pc, #168]	; (8007280 <UART_SetConfig+0xac0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	08db      	lsrs	r3, r3, #3
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	4a28      	ldr	r2, [pc, #160]	; (8007284 <UART_SetConfig+0xac4>)
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071e8:	e00f      	b.n	800720a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80071ea:	4b26      	ldr	r3, [pc, #152]	; (8007284 <UART_SetConfig+0xac4>)
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ee:	e00c      	b.n	800720a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <UART_SetConfig+0xac8>)
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f4:	e009      	b.n	800720a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fc:	e005      	b.n	800720a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007208:	bf00      	nop
    }

    if (pclk != 0U)
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d021      	beq.n	8007254 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	4a1d      	ldr	r2, [pc, #116]	; (800728c <UART_SetConfig+0xacc>)
 8007216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800721a:	461a      	mov	r2, r3
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	441a      	add	r2, r3
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	2b0f      	cmp	r3, #15
 8007238:	d909      	bls.n	800724e <UART_SetConfig+0xa8e>
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007240:	d205      	bcs.n	800724e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	b29a      	uxth	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60da      	str	r2, [r3, #12]
 800724c:	e002      	b.n	8007254 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2201      	movs	r2, #1
 8007258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2201      	movs	r2, #1
 8007260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007270:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007274:	4618      	mov	r0, r3
 8007276:	3748      	adds	r7, #72	; 0x48
 8007278:	46bd      	mov	sp, r7
 800727a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
 8007284:	03d09000 	.word	0x03d09000
 8007288:	003d0900 	.word	0x003d0900
 800728c:	080087b8 	.word	0x080087b8

08007290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738e:	d10a      	bne.n	80073a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af02      	add	r7, sp, #8
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073e4:	f7f9 ffc6 	bl	8001374 <HAL_GetTick>
 80073e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d10e      	bne.n	8007416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f82f 	bl	800746a <UART_WaitOnFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e025      	b.n	8007462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b04      	cmp	r3, #4
 8007422:	d10e      	bne.n	8007442 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f819 	bl	800746a <UART_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e00f      	b.n	8007462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b09c      	sub	sp, #112	; 0x70
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	603b      	str	r3, [r7, #0]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747a:	e0a9      	b.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	f000 80a5 	beq.w	80075d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7f9 ff75 	bl	8001374 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <UART_WaitOnFlagUntilTimeout+0x32>
 8007496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007498:	2b00      	cmp	r3, #0
 800749a:	d140      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074b0:	667b      	str	r3, [r7, #100]	; 0x64
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e6      	bne.n	800749c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	663b      	str	r3, [r7, #96]	; 0x60
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e069      	b.n	80075f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d051      	beq.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753a:	d149      	bne.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007544:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
 8007566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e6      	bne.n	8007546 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	613b      	str	r3, [r7, #16]
   return(result);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007598:	623a      	str	r2, [r7, #32]
 800759a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	69f9      	ldr	r1, [r7, #28]
 800759e:	6a3a      	ldr	r2, [r7, #32]
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e010      	b.n	80075f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69da      	ldr	r2, [r3, #28]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4013      	ands	r3, r2
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	f43f af46 	beq.w	800747c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3770      	adds	r7, #112	; 0x70
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_UARTEx_DisableFifoMode+0x16>
 800760c:	2302      	movs	r3, #2
 800760e:	e027      	b.n	8007660 <HAL_UARTEx_DisableFifoMode+0x66>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2224      	movs	r2, #36	; 0x24
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800763e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007680:	2302      	movs	r3, #2
 8007682:	e02d      	b.n	80076e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2224      	movs	r2, #36	; 0x24
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f84f 	bl	8007764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e02d      	b.n	800775c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2224      	movs	r2, #36	; 0x24
 800770c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f811 	bl	8007764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007784:	e031      	b.n	80077ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007786:	2310      	movs	r3, #16
 8007788:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800778a:	2310      	movs	r3, #16
 800778c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	0e5b      	lsrs	r3, r3, #25
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	0f5b      	lsrs	r3, r3, #29
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	7b3a      	ldrb	r2, [r7, #12]
 80077b2:	4911      	ldr	r1, [pc, #68]	; (80077f8 <UARTEx_SetNbDataToProcess+0x94>)
 80077b4:	5c8a      	ldrb	r2, [r1, r2]
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077ba:	7b3a      	ldrb	r2, [r7, #12]
 80077bc:	490f      	ldr	r1, [pc, #60]	; (80077fc <UARTEx_SetNbDataToProcess+0x98>)
 80077be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	7b7a      	ldrb	r2, [r7, #13]
 80077d0:	4909      	ldr	r1, [pc, #36]	; (80077f8 <UARTEx_SetNbDataToProcess+0x94>)
 80077d2:	5c8a      	ldrb	r2, [r1, r2]
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077d8:	7b7a      	ldrb	r2, [r7, #13]
 80077da:	4908      	ldr	r1, [pc, #32]	; (80077fc <UARTEx_SetNbDataToProcess+0x98>)
 80077dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077de:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	080087d0 	.word	0x080087d0
 80077fc:	080087d8 	.word	0x080087d8

08007800 <__errno>:
 8007800:	4b01      	ldr	r3, [pc, #4]	; (8007808 <__errno+0x8>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	24000010 	.word	0x24000010

0800780c <__libc_init_array>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4d0d      	ldr	r5, [pc, #52]	; (8007844 <__libc_init_array+0x38>)
 8007810:	4c0d      	ldr	r4, [pc, #52]	; (8007848 <__libc_init_array+0x3c>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	2600      	movs	r6, #0
 8007818:	42a6      	cmp	r6, r4
 800781a:	d109      	bne.n	8007830 <__libc_init_array+0x24>
 800781c:	4d0b      	ldr	r5, [pc, #44]	; (800784c <__libc_init_array+0x40>)
 800781e:	4c0c      	ldr	r4, [pc, #48]	; (8007850 <__libc_init_array+0x44>)
 8007820:	f000 ffae 	bl	8008780 <_init>
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	2600      	movs	r6, #0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d105      	bne.n	800783a <__libc_init_array+0x2e>
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	f855 3b04 	ldr.w	r3, [r5], #4
 8007834:	4798      	blx	r3
 8007836:	3601      	adds	r6, #1
 8007838:	e7ee      	b.n	8007818 <__libc_init_array+0xc>
 800783a:	f855 3b04 	ldr.w	r3, [r5], #4
 800783e:	4798      	blx	r3
 8007840:	3601      	adds	r6, #1
 8007842:	e7f2      	b.n	800782a <__libc_init_array+0x1e>
 8007844:	08008880 	.word	0x08008880
 8007848:	08008880 	.word	0x08008880
 800784c:	08008880 	.word	0x08008880
 8007850:	08008884 	.word	0x08008884

08007854 <memset>:
 8007854:	4402      	add	r2, r0
 8007856:	4603      	mov	r3, r0
 8007858:	4293      	cmp	r3, r2
 800785a:	d100      	bne.n	800785e <memset+0xa>
 800785c:	4770      	bx	lr
 800785e:	f803 1b01 	strb.w	r1, [r3], #1
 8007862:	e7f9      	b.n	8007858 <memset+0x4>

08007864 <iprintf>:
 8007864:	b40f      	push	{r0, r1, r2, r3}
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <iprintf+0x2c>)
 8007868:	b513      	push	{r0, r1, r4, lr}
 800786a:	681c      	ldr	r4, [r3, #0]
 800786c:	b124      	cbz	r4, 8007878 <iprintf+0x14>
 800786e:	69a3      	ldr	r3, [r4, #24]
 8007870:	b913      	cbnz	r3, 8007878 <iprintf+0x14>
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f866 	bl	8007944 <__sinit>
 8007878:	ab05      	add	r3, sp, #20
 800787a:	9a04      	ldr	r2, [sp, #16]
 800787c:	68a1      	ldr	r1, [r4, #8]
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	4620      	mov	r0, r4
 8007882:	f000 f9bd 	bl	8007c00 <_vfiprintf_r>
 8007886:	b002      	add	sp, #8
 8007888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788c:	b004      	add	sp, #16
 800788e:	4770      	bx	lr
 8007890:	24000010 	.word	0x24000010

08007894 <std>:
 8007894:	2300      	movs	r3, #0
 8007896:	b510      	push	{r4, lr}
 8007898:	4604      	mov	r4, r0
 800789a:	e9c0 3300 	strd	r3, r3, [r0]
 800789e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078a2:	6083      	str	r3, [r0, #8]
 80078a4:	8181      	strh	r1, [r0, #12]
 80078a6:	6643      	str	r3, [r0, #100]	; 0x64
 80078a8:	81c2      	strh	r2, [r0, #14]
 80078aa:	6183      	str	r3, [r0, #24]
 80078ac:	4619      	mov	r1, r3
 80078ae:	2208      	movs	r2, #8
 80078b0:	305c      	adds	r0, #92	; 0x5c
 80078b2:	f7ff ffcf 	bl	8007854 <memset>
 80078b6:	4b05      	ldr	r3, [pc, #20]	; (80078cc <std+0x38>)
 80078b8:	6263      	str	r3, [r4, #36]	; 0x24
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <std+0x3c>)
 80078bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <std+0x40>)
 80078c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <std+0x44>)
 80078c4:	6224      	str	r4, [r4, #32]
 80078c6:	6323      	str	r3, [r4, #48]	; 0x30
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	bf00      	nop
 80078cc:	080081a9 	.word	0x080081a9
 80078d0:	080081cb 	.word	0x080081cb
 80078d4:	08008203 	.word	0x08008203
 80078d8:	08008227 	.word	0x08008227

080078dc <_cleanup_r>:
 80078dc:	4901      	ldr	r1, [pc, #4]	; (80078e4 <_cleanup_r+0x8>)
 80078de:	f000 b8af 	b.w	8007a40 <_fwalk_reent>
 80078e2:	bf00      	nop
 80078e4:	08008501 	.word	0x08008501

080078e8 <__sfmoreglue>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	2268      	movs	r2, #104	; 0x68
 80078ec:	1e4d      	subs	r5, r1, #1
 80078ee:	4355      	muls	r5, r2
 80078f0:	460e      	mov	r6, r1
 80078f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078f6:	f000 f8e5 	bl	8007ac4 <_malloc_r>
 80078fa:	4604      	mov	r4, r0
 80078fc:	b140      	cbz	r0, 8007910 <__sfmoreglue+0x28>
 80078fe:	2100      	movs	r1, #0
 8007900:	e9c0 1600 	strd	r1, r6, [r0]
 8007904:	300c      	adds	r0, #12
 8007906:	60a0      	str	r0, [r4, #8]
 8007908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800790c:	f7ff ffa2 	bl	8007854 <memset>
 8007910:	4620      	mov	r0, r4
 8007912:	bd70      	pop	{r4, r5, r6, pc}

08007914 <__sfp_lock_acquire>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__sfp_lock_acquire+0x8>)
 8007916:	f000 b8b3 	b.w	8007a80 <__retarget_lock_acquire_recursive>
 800791a:	bf00      	nop
 800791c:	240002f5 	.word	0x240002f5

08007920 <__sfp_lock_release>:
 8007920:	4801      	ldr	r0, [pc, #4]	; (8007928 <__sfp_lock_release+0x8>)
 8007922:	f000 b8ae 	b.w	8007a82 <__retarget_lock_release_recursive>
 8007926:	bf00      	nop
 8007928:	240002f5 	.word	0x240002f5

0800792c <__sinit_lock_acquire>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__sinit_lock_acquire+0x8>)
 800792e:	f000 b8a7 	b.w	8007a80 <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	240002f6 	.word	0x240002f6

08007938 <__sinit_lock_release>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__sinit_lock_release+0x8>)
 800793a:	f000 b8a2 	b.w	8007a82 <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	240002f6 	.word	0x240002f6

08007944 <__sinit>:
 8007944:	b510      	push	{r4, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	f7ff fff0 	bl	800792c <__sinit_lock_acquire>
 800794c:	69a3      	ldr	r3, [r4, #24]
 800794e:	b11b      	cbz	r3, 8007958 <__sinit+0x14>
 8007950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007954:	f7ff bff0 	b.w	8007938 <__sinit_lock_release>
 8007958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800795c:	6523      	str	r3, [r4, #80]	; 0x50
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <__sinit+0x68>)
 8007960:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <__sinit+0x6c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	62a2      	str	r2, [r4, #40]	; 0x28
 8007966:	42a3      	cmp	r3, r4
 8007968:	bf04      	itt	eq
 800796a:	2301      	moveq	r3, #1
 800796c:	61a3      	streq	r3, [r4, #24]
 800796e:	4620      	mov	r0, r4
 8007970:	f000 f820 	bl	80079b4 <__sfp>
 8007974:	6060      	str	r0, [r4, #4]
 8007976:	4620      	mov	r0, r4
 8007978:	f000 f81c 	bl	80079b4 <__sfp>
 800797c:	60a0      	str	r0, [r4, #8]
 800797e:	4620      	mov	r0, r4
 8007980:	f000 f818 	bl	80079b4 <__sfp>
 8007984:	2200      	movs	r2, #0
 8007986:	60e0      	str	r0, [r4, #12]
 8007988:	2104      	movs	r1, #4
 800798a:	6860      	ldr	r0, [r4, #4]
 800798c:	f7ff ff82 	bl	8007894 <std>
 8007990:	68a0      	ldr	r0, [r4, #8]
 8007992:	2201      	movs	r2, #1
 8007994:	2109      	movs	r1, #9
 8007996:	f7ff ff7d 	bl	8007894 <std>
 800799a:	68e0      	ldr	r0, [r4, #12]
 800799c:	2202      	movs	r2, #2
 800799e:	2112      	movs	r1, #18
 80079a0:	f7ff ff78 	bl	8007894 <std>
 80079a4:	2301      	movs	r3, #1
 80079a6:	61a3      	str	r3, [r4, #24]
 80079a8:	e7d2      	b.n	8007950 <__sinit+0xc>
 80079aa:	bf00      	nop
 80079ac:	080087e0 	.word	0x080087e0
 80079b0:	080078dd 	.word	0x080078dd

080079b4 <__sfp>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	4607      	mov	r7, r0
 80079b8:	f7ff ffac 	bl	8007914 <__sfp_lock_acquire>
 80079bc:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <__sfp+0x84>)
 80079be:	681e      	ldr	r6, [r3, #0]
 80079c0:	69b3      	ldr	r3, [r6, #24]
 80079c2:	b913      	cbnz	r3, 80079ca <__sfp+0x16>
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7ff ffbd 	bl	8007944 <__sinit>
 80079ca:	3648      	adds	r6, #72	; 0x48
 80079cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	d503      	bpl.n	80079dc <__sfp+0x28>
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	b30b      	cbz	r3, 8007a1c <__sfp+0x68>
 80079d8:	6836      	ldr	r6, [r6, #0]
 80079da:	e7f7      	b.n	80079cc <__sfp+0x18>
 80079dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079e0:	b9d5      	cbnz	r5, 8007a18 <__sfp+0x64>
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <__sfp+0x88>)
 80079e4:	60e3      	str	r3, [r4, #12]
 80079e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079ea:	6665      	str	r5, [r4, #100]	; 0x64
 80079ec:	f000 f847 	bl	8007a7e <__retarget_lock_init_recursive>
 80079f0:	f7ff ff96 	bl	8007920 <__sfp_lock_release>
 80079f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079fc:	6025      	str	r5, [r4, #0]
 80079fe:	61a5      	str	r5, [r4, #24]
 8007a00:	2208      	movs	r2, #8
 8007a02:	4629      	mov	r1, r5
 8007a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a08:	f7ff ff24 	bl	8007854 <memset>
 8007a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a14:	4620      	mov	r0, r4
 8007a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a18:	3468      	adds	r4, #104	; 0x68
 8007a1a:	e7d9      	b.n	80079d0 <__sfp+0x1c>
 8007a1c:	2104      	movs	r1, #4
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff ff62 	bl	80078e8 <__sfmoreglue>
 8007a24:	4604      	mov	r4, r0
 8007a26:	6030      	str	r0, [r6, #0]
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d1d5      	bne.n	80079d8 <__sfp+0x24>
 8007a2c:	f7ff ff78 	bl	8007920 <__sfp_lock_release>
 8007a30:	230c      	movs	r3, #12
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	e7ee      	b.n	8007a14 <__sfp+0x60>
 8007a36:	bf00      	nop
 8007a38:	080087e0 	.word	0x080087e0
 8007a3c:	ffff0001 	.word	0xffff0001

08007a40 <_fwalk_reent>:
 8007a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a44:	4606      	mov	r6, r0
 8007a46:	4688      	mov	r8, r1
 8007a48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a4c:	2700      	movs	r7, #0
 8007a4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a52:	f1b9 0901 	subs.w	r9, r9, #1
 8007a56:	d505      	bpl.n	8007a64 <_fwalk_reent+0x24>
 8007a58:	6824      	ldr	r4, [r4, #0]
 8007a5a:	2c00      	cmp	r4, #0
 8007a5c:	d1f7      	bne.n	8007a4e <_fwalk_reent+0xe>
 8007a5e:	4638      	mov	r0, r7
 8007a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a64:	89ab      	ldrh	r3, [r5, #12]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d907      	bls.n	8007a7a <_fwalk_reent+0x3a>
 8007a6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	d003      	beq.n	8007a7a <_fwalk_reent+0x3a>
 8007a72:	4629      	mov	r1, r5
 8007a74:	4630      	mov	r0, r6
 8007a76:	47c0      	blx	r8
 8007a78:	4307      	orrs	r7, r0
 8007a7a:	3568      	adds	r5, #104	; 0x68
 8007a7c:	e7e9      	b.n	8007a52 <_fwalk_reent+0x12>

08007a7e <__retarget_lock_init_recursive>:
 8007a7e:	4770      	bx	lr

08007a80 <__retarget_lock_acquire_recursive>:
 8007a80:	4770      	bx	lr

08007a82 <__retarget_lock_release_recursive>:
 8007a82:	4770      	bx	lr

08007a84 <sbrk_aligned>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4e0e      	ldr	r6, [pc, #56]	; (8007ac0 <sbrk_aligned+0x3c>)
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6831      	ldr	r1, [r6, #0]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	b911      	cbnz	r1, 8007a96 <sbrk_aligned+0x12>
 8007a90:	f000 fb7a 	bl	8008188 <_sbrk_r>
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 fb75 	bl	8008188 <_sbrk_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d00a      	beq.n	8007ab8 <sbrk_aligned+0x34>
 8007aa2:	1cc4      	adds	r4, r0, #3
 8007aa4:	f024 0403 	bic.w	r4, r4, #3
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	d007      	beq.n	8007abc <sbrk_aligned+0x38>
 8007aac:	1a21      	subs	r1, r4, r0
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f000 fb6a 	bl	8008188 <_sbrk_r>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d101      	bne.n	8007abc <sbrk_aligned+0x38>
 8007ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8007abc:	4620      	mov	r0, r4
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	240002fc 	.word	0x240002fc

08007ac4 <_malloc_r>:
 8007ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac8:	1ccd      	adds	r5, r1, #3
 8007aca:	f025 0503 	bic.w	r5, r5, #3
 8007ace:	3508      	adds	r5, #8
 8007ad0:	2d0c      	cmp	r5, #12
 8007ad2:	bf38      	it	cc
 8007ad4:	250c      	movcc	r5, #12
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	4607      	mov	r7, r0
 8007ada:	db01      	blt.n	8007ae0 <_malloc_r+0x1c>
 8007adc:	42a9      	cmp	r1, r5
 8007ade:	d905      	bls.n	8007aec <_malloc_r+0x28>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aec:	4e2e      	ldr	r6, [pc, #184]	; (8007ba8 <_malloc_r+0xe4>)
 8007aee:	f000 fdbb 	bl	8008668 <__malloc_lock>
 8007af2:	6833      	ldr	r3, [r6, #0]
 8007af4:	461c      	mov	r4, r3
 8007af6:	bb34      	cbnz	r4, 8007b46 <_malloc_r+0x82>
 8007af8:	4629      	mov	r1, r5
 8007afa:	4638      	mov	r0, r7
 8007afc:	f7ff ffc2 	bl	8007a84 <sbrk_aligned>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	4604      	mov	r4, r0
 8007b04:	d14d      	bne.n	8007ba2 <_malloc_r+0xde>
 8007b06:	6834      	ldr	r4, [r6, #0]
 8007b08:	4626      	mov	r6, r4
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	d140      	bne.n	8007b90 <_malloc_r+0xcc>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	4631      	mov	r1, r6
 8007b12:	4638      	mov	r0, r7
 8007b14:	eb04 0803 	add.w	r8, r4, r3
 8007b18:	f000 fb36 	bl	8008188 <_sbrk_r>
 8007b1c:	4580      	cmp	r8, r0
 8007b1e:	d13a      	bne.n	8007b96 <_malloc_r+0xd2>
 8007b20:	6821      	ldr	r1, [r4, #0]
 8007b22:	3503      	adds	r5, #3
 8007b24:	1a6d      	subs	r5, r5, r1
 8007b26:	f025 0503 	bic.w	r5, r5, #3
 8007b2a:	3508      	adds	r5, #8
 8007b2c:	2d0c      	cmp	r5, #12
 8007b2e:	bf38      	it	cc
 8007b30:	250c      	movcc	r5, #12
 8007b32:	4629      	mov	r1, r5
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff ffa5 	bl	8007a84 <sbrk_aligned>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d02b      	beq.n	8007b96 <_malloc_r+0xd2>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	442b      	add	r3, r5
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	e00e      	b.n	8007b64 <_malloc_r+0xa0>
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	1b52      	subs	r2, r2, r5
 8007b4a:	d41e      	bmi.n	8007b8a <_malloc_r+0xc6>
 8007b4c:	2a0b      	cmp	r2, #11
 8007b4e:	d916      	bls.n	8007b7e <_malloc_r+0xba>
 8007b50:	1961      	adds	r1, r4, r5
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	6025      	str	r5, [r4, #0]
 8007b56:	bf18      	it	ne
 8007b58:	6059      	strne	r1, [r3, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	bf08      	it	eq
 8007b5e:	6031      	streq	r1, [r6, #0]
 8007b60:	5162      	str	r2, [r4, r5]
 8007b62:	604b      	str	r3, [r1, #4]
 8007b64:	4638      	mov	r0, r7
 8007b66:	f104 060b 	add.w	r6, r4, #11
 8007b6a:	f000 fd83 	bl	8008674 <__malloc_unlock>
 8007b6e:	f026 0607 	bic.w	r6, r6, #7
 8007b72:	1d23      	adds	r3, r4, #4
 8007b74:	1af2      	subs	r2, r6, r3
 8007b76:	d0b6      	beq.n	8007ae6 <_malloc_r+0x22>
 8007b78:	1b9b      	subs	r3, r3, r6
 8007b7a:	50a3      	str	r3, [r4, r2]
 8007b7c:	e7b3      	b.n	8007ae6 <_malloc_r+0x22>
 8007b7e:	6862      	ldr	r2, [r4, #4]
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	bf0c      	ite	eq
 8007b84:	6032      	streq	r2, [r6, #0]
 8007b86:	605a      	strne	r2, [r3, #4]
 8007b88:	e7ec      	b.n	8007b64 <_malloc_r+0xa0>
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	6864      	ldr	r4, [r4, #4]
 8007b8e:	e7b2      	b.n	8007af6 <_malloc_r+0x32>
 8007b90:	4634      	mov	r4, r6
 8007b92:	6876      	ldr	r6, [r6, #4]
 8007b94:	e7b9      	b.n	8007b0a <_malloc_r+0x46>
 8007b96:	230c      	movs	r3, #12
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f000 fd6a 	bl	8008674 <__malloc_unlock>
 8007ba0:	e7a1      	b.n	8007ae6 <_malloc_r+0x22>
 8007ba2:	6025      	str	r5, [r4, #0]
 8007ba4:	e7de      	b.n	8007b64 <_malloc_r+0xa0>
 8007ba6:	bf00      	nop
 8007ba8:	240002f8 	.word	0x240002f8

08007bac <__sfputc_r>:
 8007bac:	6893      	ldr	r3, [r2, #8]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	b410      	push	{r4}
 8007bb4:	6093      	str	r3, [r2, #8]
 8007bb6:	da08      	bge.n	8007bca <__sfputc_r+0x1e>
 8007bb8:	6994      	ldr	r4, [r2, #24]
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	db01      	blt.n	8007bc2 <__sfputc_r+0x16>
 8007bbe:	290a      	cmp	r1, #10
 8007bc0:	d103      	bne.n	8007bca <__sfputc_r+0x1e>
 8007bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc6:	f000 bb33 	b.w	8008230 <__swbuf_r>
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	1c58      	adds	r0, r3, #1
 8007bce:	6010      	str	r0, [r2, #0]
 8007bd0:	7019      	strb	r1, [r3, #0]
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <__sfputs_r>:
 8007bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	18d5      	adds	r5, r2, r3
 8007be4:	42ac      	cmp	r4, r5
 8007be6:	d101      	bne.n	8007bec <__sfputs_r+0x12>
 8007be8:	2000      	movs	r0, #0
 8007bea:	e007      	b.n	8007bfc <__sfputs_r+0x22>
 8007bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf0:	463a      	mov	r2, r7
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffda 	bl	8007bac <__sfputc_r>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d1f3      	bne.n	8007be4 <__sfputs_r+0xa>
 8007bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c00 <_vfiprintf_r>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	460d      	mov	r5, r1
 8007c06:	b09d      	sub	sp, #116	; 0x74
 8007c08:	4614      	mov	r4, r2
 8007c0a:	4698      	mov	r8, r3
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	b118      	cbz	r0, 8007c18 <_vfiprintf_r+0x18>
 8007c10:	6983      	ldr	r3, [r0, #24]
 8007c12:	b90b      	cbnz	r3, 8007c18 <_vfiprintf_r+0x18>
 8007c14:	f7ff fe96 	bl	8007944 <__sinit>
 8007c18:	4b89      	ldr	r3, [pc, #548]	; (8007e40 <_vfiprintf_r+0x240>)
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	d11b      	bne.n	8007c56 <_vfiprintf_r+0x56>
 8007c1e:	6875      	ldr	r5, [r6, #4]
 8007c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c22:	07d9      	lsls	r1, r3, #31
 8007c24:	d405      	bmi.n	8007c32 <_vfiprintf_r+0x32>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	059a      	lsls	r2, r3, #22
 8007c2a:	d402      	bmi.n	8007c32 <_vfiprintf_r+0x32>
 8007c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2e:	f7ff ff27 	bl	8007a80 <__retarget_lock_acquire_recursive>
 8007c32:	89ab      	ldrh	r3, [r5, #12]
 8007c34:	071b      	lsls	r3, r3, #28
 8007c36:	d501      	bpl.n	8007c3c <_vfiprintf_r+0x3c>
 8007c38:	692b      	ldr	r3, [r5, #16]
 8007c3a:	b9eb      	cbnz	r3, 8007c78 <_vfiprintf_r+0x78>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f000 fb5a 	bl	80082f8 <__swsetup_r>
 8007c44:	b1c0      	cbz	r0, 8007c78 <_vfiprintf_r+0x78>
 8007c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c48:	07dc      	lsls	r4, r3, #31
 8007c4a:	d50e      	bpl.n	8007c6a <_vfiprintf_r+0x6a>
 8007c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c50:	b01d      	add	sp, #116	; 0x74
 8007c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c56:	4b7b      	ldr	r3, [pc, #492]	; (8007e44 <_vfiprintf_r+0x244>)
 8007c58:	429d      	cmp	r5, r3
 8007c5a:	d101      	bne.n	8007c60 <_vfiprintf_r+0x60>
 8007c5c:	68b5      	ldr	r5, [r6, #8]
 8007c5e:	e7df      	b.n	8007c20 <_vfiprintf_r+0x20>
 8007c60:	4b79      	ldr	r3, [pc, #484]	; (8007e48 <_vfiprintf_r+0x248>)
 8007c62:	429d      	cmp	r5, r3
 8007c64:	bf08      	it	eq
 8007c66:	68f5      	ldreq	r5, [r6, #12]
 8007c68:	e7da      	b.n	8007c20 <_vfiprintf_r+0x20>
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	0598      	lsls	r0, r3, #22
 8007c6e:	d4ed      	bmi.n	8007c4c <_vfiprintf_r+0x4c>
 8007c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c72:	f7ff ff06 	bl	8007a82 <__retarget_lock_release_recursive>
 8007c76:	e7e9      	b.n	8007c4c <_vfiprintf_r+0x4c>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7c:	2320      	movs	r3, #32
 8007c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c86:	2330      	movs	r3, #48	; 0x30
 8007c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e4c <_vfiprintf_r+0x24c>
 8007c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c90:	f04f 0901 	mov.w	r9, #1
 8007c94:	4623      	mov	r3, r4
 8007c96:	469a      	mov	sl, r3
 8007c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_vfiprintf_r+0xa2>
 8007c9e:	2a25      	cmp	r2, #37	; 0x25
 8007ca0:	d1f9      	bne.n	8007c96 <_vfiprintf_r+0x96>
 8007ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca6:	d00b      	beq.n	8007cc0 <_vfiprintf_r+0xc0>
 8007ca8:	465b      	mov	r3, fp
 8007caa:	4622      	mov	r2, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7ff ff93 	bl	8007bda <__sfputs_r>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f000 80aa 	beq.w	8007e0e <_vfiprintf_r+0x20e>
 8007cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cbc:	445a      	add	r2, fp
 8007cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80a2 	beq.w	8007e0e <_vfiprintf_r+0x20e>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd4:	f10a 0a01 	add.w	sl, sl, #1
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	9307      	str	r3, [sp, #28]
 8007cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ce2:	4654      	mov	r4, sl
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cea:	4858      	ldr	r0, [pc, #352]	; (8007e4c <_vfiprintf_r+0x24c>)
 8007cec:	f7f8 faf8 	bl	80002e0 <memchr>
 8007cf0:	9a04      	ldr	r2, [sp, #16]
 8007cf2:	b9d8      	cbnz	r0, 8007d2c <_vfiprintf_r+0x12c>
 8007cf4:	06d1      	lsls	r1, r2, #27
 8007cf6:	bf44      	itt	mi
 8007cf8:	2320      	movmi	r3, #32
 8007cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfe:	0713      	lsls	r3, r2, #28
 8007d00:	bf44      	itt	mi
 8007d02:	232b      	movmi	r3, #43	; 0x2b
 8007d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d08:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0e:	d015      	beq.n	8007d3c <_vfiprintf_r+0x13c>
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	4654      	mov	r4, sl
 8007d14:	2000      	movs	r0, #0
 8007d16:	f04f 0c0a 	mov.w	ip, #10
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d20:	3b30      	subs	r3, #48	; 0x30
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	d94e      	bls.n	8007dc4 <_vfiprintf_r+0x1c4>
 8007d26:	b1b0      	cbz	r0, 8007d56 <_vfiprintf_r+0x156>
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	e014      	b.n	8007d56 <_vfiprintf_r+0x156>
 8007d2c:	eba0 0308 	sub.w	r3, r0, r8
 8007d30:	fa09 f303 	lsl.w	r3, r9, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	46a2      	mov	sl, r4
 8007d3a:	e7d2      	b.n	8007ce2 <_vfiprintf_r+0xe2>
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	1d19      	adds	r1, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	9103      	str	r1, [sp, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfbb      	ittet	lt
 8007d48:	425b      	neglt	r3, r3
 8007d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4e:	9307      	strge	r3, [sp, #28]
 8007d50:	9307      	strlt	r3, [sp, #28]
 8007d52:	bfb8      	it	lt
 8007d54:	9204      	strlt	r2, [sp, #16]
 8007d56:	7823      	ldrb	r3, [r4, #0]
 8007d58:	2b2e      	cmp	r3, #46	; 0x2e
 8007d5a:	d10c      	bne.n	8007d76 <_vfiprintf_r+0x176>
 8007d5c:	7863      	ldrb	r3, [r4, #1]
 8007d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d60:	d135      	bne.n	8007dce <_vfiprintf_r+0x1ce>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	1d1a      	adds	r2, r3, #4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	9203      	str	r2, [sp, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfb8      	it	lt
 8007d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d72:	3402      	adds	r4, #2
 8007d74:	9305      	str	r3, [sp, #20]
 8007d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e5c <_vfiprintf_r+0x25c>
 8007d7a:	7821      	ldrb	r1, [r4, #0]
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	4650      	mov	r0, sl
 8007d80:	f7f8 faae 	bl	80002e0 <memchr>
 8007d84:	b140      	cbz	r0, 8007d98 <_vfiprintf_r+0x198>
 8007d86:	2340      	movs	r3, #64	; 0x40
 8007d88:	eba0 000a 	sub.w	r0, r0, sl
 8007d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	4303      	orrs	r3, r0
 8007d94:	3401      	adds	r4, #1
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9c:	482c      	ldr	r0, [pc, #176]	; (8007e50 <_vfiprintf_r+0x250>)
 8007d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007da2:	2206      	movs	r2, #6
 8007da4:	f7f8 fa9c 	bl	80002e0 <memchr>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d03f      	beq.n	8007e2c <_vfiprintf_r+0x22c>
 8007dac:	4b29      	ldr	r3, [pc, #164]	; (8007e54 <_vfiprintf_r+0x254>)
 8007dae:	bb1b      	cbnz	r3, 8007df8 <_vfiprintf_r+0x1f8>
 8007db0:	9b03      	ldr	r3, [sp, #12]
 8007db2:	3307      	adds	r3, #7
 8007db4:	f023 0307 	bic.w	r3, r3, #7
 8007db8:	3308      	adds	r3, #8
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbe:	443b      	add	r3, r7
 8007dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc2:	e767      	b.n	8007c94 <_vfiprintf_r+0x94>
 8007dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc8:	460c      	mov	r4, r1
 8007dca:	2001      	movs	r0, #1
 8007dcc:	e7a5      	b.n	8007d1a <_vfiprintf_r+0x11a>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	3401      	adds	r4, #1
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f04f 0c0a 	mov.w	ip, #10
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de0:	3a30      	subs	r2, #48	; 0x30
 8007de2:	2a09      	cmp	r2, #9
 8007de4:	d903      	bls.n	8007dee <_vfiprintf_r+0x1ee>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0c5      	beq.n	8007d76 <_vfiprintf_r+0x176>
 8007dea:	9105      	str	r1, [sp, #20]
 8007dec:	e7c3      	b.n	8007d76 <_vfiprintf_r+0x176>
 8007dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df2:	4604      	mov	r4, r0
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f0      	b.n	8007dda <_vfiprintf_r+0x1da>
 8007df8:	ab03      	add	r3, sp, #12
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <_vfiprintf_r+0x258>)
 8007e00:	a904      	add	r1, sp, #16
 8007e02:	4630      	mov	r0, r6
 8007e04:	f3af 8000 	nop.w
 8007e08:	4607      	mov	r7, r0
 8007e0a:	1c78      	adds	r0, r7, #1
 8007e0c:	d1d6      	bne.n	8007dbc <_vfiprintf_r+0x1bc>
 8007e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e10:	07d9      	lsls	r1, r3, #31
 8007e12:	d405      	bmi.n	8007e20 <_vfiprintf_r+0x220>
 8007e14:	89ab      	ldrh	r3, [r5, #12]
 8007e16:	059a      	lsls	r2, r3, #22
 8007e18:	d402      	bmi.n	8007e20 <_vfiprintf_r+0x220>
 8007e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e1c:	f7ff fe31 	bl	8007a82 <__retarget_lock_release_recursive>
 8007e20:	89ab      	ldrh	r3, [r5, #12]
 8007e22:	065b      	lsls	r3, r3, #25
 8007e24:	f53f af12 	bmi.w	8007c4c <_vfiprintf_r+0x4c>
 8007e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e2a:	e711      	b.n	8007c50 <_vfiprintf_r+0x50>
 8007e2c:	ab03      	add	r3, sp, #12
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	462a      	mov	r2, r5
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <_vfiprintf_r+0x258>)
 8007e34:	a904      	add	r1, sp, #16
 8007e36:	4630      	mov	r0, r6
 8007e38:	f000 f880 	bl	8007f3c <_printf_i>
 8007e3c:	e7e4      	b.n	8007e08 <_vfiprintf_r+0x208>
 8007e3e:	bf00      	nop
 8007e40:	08008804 	.word	0x08008804
 8007e44:	08008824 	.word	0x08008824
 8007e48:	080087e4 	.word	0x080087e4
 8007e4c:	08008844 	.word	0x08008844
 8007e50:	0800884e 	.word	0x0800884e
 8007e54:	00000000 	.word	0x00000000
 8007e58:	08007bdb 	.word	0x08007bdb
 8007e5c:	0800884a 	.word	0x0800884a

08007e60 <_printf_common>:
 8007e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	4616      	mov	r6, r2
 8007e66:	4699      	mov	r9, r3
 8007e68:	688a      	ldr	r2, [r1, #8]
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	bfb8      	it	lt
 8007e74:	4613      	movlt	r3, r2
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	b10a      	cbz	r2, 8007e86 <_printf_common+0x26>
 8007e82:	3301      	adds	r3, #1
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	0699      	lsls	r1, r3, #26
 8007e8a:	bf42      	ittt	mi
 8007e8c:	6833      	ldrmi	r3, [r6, #0]
 8007e8e:	3302      	addmi	r3, #2
 8007e90:	6033      	strmi	r3, [r6, #0]
 8007e92:	6825      	ldr	r5, [r4, #0]
 8007e94:	f015 0506 	ands.w	r5, r5, #6
 8007e98:	d106      	bne.n	8007ea8 <_printf_common+0x48>
 8007e9a:	f104 0a19 	add.w	sl, r4, #25
 8007e9e:	68e3      	ldr	r3, [r4, #12]
 8007ea0:	6832      	ldr	r2, [r6, #0]
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	42ab      	cmp	r3, r5
 8007ea6:	dc26      	bgt.n	8007ef6 <_printf_common+0x96>
 8007ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eac:	1e13      	subs	r3, r2, #0
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	2301      	movne	r3, #1
 8007eb4:	0692      	lsls	r2, r2, #26
 8007eb6:	d42b      	bmi.n	8007f10 <_printf_common+0xb0>
 8007eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	47c0      	blx	r8
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	d01e      	beq.n	8007f04 <_printf_common+0xa4>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	68e5      	ldr	r5, [r4, #12]
 8007eca:	6832      	ldr	r2, [r6, #0]
 8007ecc:	f003 0306 	and.w	r3, r3, #6
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	bf08      	it	eq
 8007ed4:	1aad      	subeq	r5, r5, r2
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	bf0c      	ite	eq
 8007edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee0:	2500      	movne	r5, #0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	bfc4      	itt	gt
 8007ee6:	1a9b      	subgt	r3, r3, r2
 8007ee8:	18ed      	addgt	r5, r5, r3
 8007eea:	2600      	movs	r6, #0
 8007eec:	341a      	adds	r4, #26
 8007eee:	42b5      	cmp	r5, r6
 8007ef0:	d11a      	bne.n	8007f28 <_printf_common+0xc8>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e008      	b.n	8007f08 <_printf_common+0xa8>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4652      	mov	r2, sl
 8007efa:	4649      	mov	r1, r9
 8007efc:	4638      	mov	r0, r7
 8007efe:	47c0      	blx	r8
 8007f00:	3001      	adds	r0, #1
 8007f02:	d103      	bne.n	8007f0c <_printf_common+0xac>
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	e7c6      	b.n	8007e9e <_printf_common+0x3e>
 8007f10:	18e1      	adds	r1, r4, r3
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	2030      	movs	r0, #48	; 0x30
 8007f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1a:	4422      	add	r2, r4
 8007f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f24:	3302      	adds	r3, #2
 8007f26:	e7c7      	b.n	8007eb8 <_printf_common+0x58>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	4638      	mov	r0, r7
 8007f30:	47c0      	blx	r8
 8007f32:	3001      	adds	r0, #1
 8007f34:	d0e6      	beq.n	8007f04 <_printf_common+0xa4>
 8007f36:	3601      	adds	r6, #1
 8007f38:	e7d9      	b.n	8007eee <_printf_common+0x8e>
	...

08007f3c <_printf_i>:
 8007f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	7e0f      	ldrb	r7, [r1, #24]
 8007f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f44:	2f78      	cmp	r7, #120	; 0x78
 8007f46:	4691      	mov	r9, r2
 8007f48:	4680      	mov	r8, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f52:	d807      	bhi.n	8007f64 <_printf_i+0x28>
 8007f54:	2f62      	cmp	r7, #98	; 0x62
 8007f56:	d80a      	bhi.n	8007f6e <_printf_i+0x32>
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	f000 80d8 	beq.w	800810e <_printf_i+0x1d2>
 8007f5e:	2f58      	cmp	r7, #88	; 0x58
 8007f60:	f000 80a3 	beq.w	80080aa <_printf_i+0x16e>
 8007f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f6c:	e03a      	b.n	8007fe4 <_printf_i+0xa8>
 8007f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f72:	2b15      	cmp	r3, #21
 8007f74:	d8f6      	bhi.n	8007f64 <_printf_i+0x28>
 8007f76:	a101      	add	r1, pc, #4	; (adr r1, 8007f7c <_printf_i+0x40>)
 8007f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007f65 	.word	0x08007f65
 8007f88:	08007f65 	.word	0x08007f65
 8007f8c:	08007f65 	.word	0x08007f65
 8007f90:	08007f65 	.word	0x08007f65
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007f65 	.word	0x08007f65
 8007f9c:	08007f65 	.word	0x08007f65
 8007fa0:	08007f65 	.word	0x08007f65
 8007fa4:	08007f65 	.word	0x08007f65
 8007fa8:	080080f5 	.word	0x080080f5
 8007fac:	08008019 	.word	0x08008019
 8007fb0:	080080d7 	.word	0x080080d7
 8007fb4:	08007f65 	.word	0x08007f65
 8007fb8:	08007f65 	.word	0x08007f65
 8007fbc:	08008117 	.word	0x08008117
 8007fc0:	08007f65 	.word	0x08007f65
 8007fc4:	08008019 	.word	0x08008019
 8007fc8:	08007f65 	.word	0x08007f65
 8007fcc:	08007f65 	.word	0x08007f65
 8007fd0:	080080df 	.word	0x080080df
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	602a      	str	r2, [r5, #0]
 8007fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0a3      	b.n	8008130 <_printf_i+0x1f4>
 8007fe8:	6820      	ldr	r0, [r4, #0]
 8007fea:	6829      	ldr	r1, [r5, #0]
 8007fec:	0606      	lsls	r6, r0, #24
 8007fee:	f101 0304 	add.w	r3, r1, #4
 8007ff2:	d50a      	bpl.n	800800a <_printf_i+0xce>
 8007ff4:	680e      	ldr	r6, [r1, #0]
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	da03      	bge.n	8008004 <_printf_i+0xc8>
 8007ffc:	232d      	movs	r3, #45	; 0x2d
 8007ffe:	4276      	negs	r6, r6
 8008000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008004:	485e      	ldr	r0, [pc, #376]	; (8008180 <_printf_i+0x244>)
 8008006:	230a      	movs	r3, #10
 8008008:	e019      	b.n	800803e <_printf_i+0x102>
 800800a:	680e      	ldr	r6, [r1, #0]
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008012:	bf18      	it	ne
 8008014:	b236      	sxthne	r6, r6
 8008016:	e7ef      	b.n	8007ff8 <_printf_i+0xbc>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	6820      	ldr	r0, [r4, #0]
 800801c:	1d19      	adds	r1, r3, #4
 800801e:	6029      	str	r1, [r5, #0]
 8008020:	0601      	lsls	r1, r0, #24
 8008022:	d501      	bpl.n	8008028 <_printf_i+0xec>
 8008024:	681e      	ldr	r6, [r3, #0]
 8008026:	e002      	b.n	800802e <_printf_i+0xf2>
 8008028:	0646      	lsls	r6, r0, #25
 800802a:	d5fb      	bpl.n	8008024 <_printf_i+0xe8>
 800802c:	881e      	ldrh	r6, [r3, #0]
 800802e:	4854      	ldr	r0, [pc, #336]	; (8008180 <_printf_i+0x244>)
 8008030:	2f6f      	cmp	r7, #111	; 0x6f
 8008032:	bf0c      	ite	eq
 8008034:	2308      	moveq	r3, #8
 8008036:	230a      	movne	r3, #10
 8008038:	2100      	movs	r1, #0
 800803a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800803e:	6865      	ldr	r5, [r4, #4]
 8008040:	60a5      	str	r5, [r4, #8]
 8008042:	2d00      	cmp	r5, #0
 8008044:	bfa2      	ittt	ge
 8008046:	6821      	ldrge	r1, [r4, #0]
 8008048:	f021 0104 	bicge.w	r1, r1, #4
 800804c:	6021      	strge	r1, [r4, #0]
 800804e:	b90e      	cbnz	r6, 8008054 <_printf_i+0x118>
 8008050:	2d00      	cmp	r5, #0
 8008052:	d04d      	beq.n	80080f0 <_printf_i+0x1b4>
 8008054:	4615      	mov	r5, r2
 8008056:	fbb6 f1f3 	udiv	r1, r6, r3
 800805a:	fb03 6711 	mls	r7, r3, r1, r6
 800805e:	5dc7      	ldrb	r7, [r0, r7]
 8008060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008064:	4637      	mov	r7, r6
 8008066:	42bb      	cmp	r3, r7
 8008068:	460e      	mov	r6, r1
 800806a:	d9f4      	bls.n	8008056 <_printf_i+0x11a>
 800806c:	2b08      	cmp	r3, #8
 800806e:	d10b      	bne.n	8008088 <_printf_i+0x14c>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	07de      	lsls	r6, r3, #31
 8008074:	d508      	bpl.n	8008088 <_printf_i+0x14c>
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	6861      	ldr	r1, [r4, #4]
 800807a:	4299      	cmp	r1, r3
 800807c:	bfde      	ittt	le
 800807e:	2330      	movle	r3, #48	; 0x30
 8008080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008088:	1b52      	subs	r2, r2, r5
 800808a:	6122      	str	r2, [r4, #16]
 800808c:	f8cd a000 	str.w	sl, [sp]
 8008090:	464b      	mov	r3, r9
 8008092:	aa03      	add	r2, sp, #12
 8008094:	4621      	mov	r1, r4
 8008096:	4640      	mov	r0, r8
 8008098:	f7ff fee2 	bl	8007e60 <_printf_common>
 800809c:	3001      	adds	r0, #1
 800809e:	d14c      	bne.n	800813a <_printf_i+0x1fe>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b004      	add	sp, #16
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	4835      	ldr	r0, [pc, #212]	; (8008180 <_printf_i+0x244>)
 80080ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080b0:	6829      	ldr	r1, [r5, #0]
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80080b8:	6029      	str	r1, [r5, #0]
 80080ba:	061d      	lsls	r5, r3, #24
 80080bc:	d514      	bpl.n	80080e8 <_printf_i+0x1ac>
 80080be:	07df      	lsls	r7, r3, #31
 80080c0:	bf44      	itt	mi
 80080c2:	f043 0320 	orrmi.w	r3, r3, #32
 80080c6:	6023      	strmi	r3, [r4, #0]
 80080c8:	b91e      	cbnz	r6, 80080d2 <_printf_i+0x196>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	f023 0320 	bic.w	r3, r3, #32
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	2310      	movs	r3, #16
 80080d4:	e7b0      	b.n	8008038 <_printf_i+0xfc>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	f043 0320 	orr.w	r3, r3, #32
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	2378      	movs	r3, #120	; 0x78
 80080e0:	4828      	ldr	r0, [pc, #160]	; (8008184 <_printf_i+0x248>)
 80080e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080e6:	e7e3      	b.n	80080b0 <_printf_i+0x174>
 80080e8:	0659      	lsls	r1, r3, #25
 80080ea:	bf48      	it	mi
 80080ec:	b2b6      	uxthmi	r6, r6
 80080ee:	e7e6      	b.n	80080be <_printf_i+0x182>
 80080f0:	4615      	mov	r5, r2
 80080f2:	e7bb      	b.n	800806c <_printf_i+0x130>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	6826      	ldr	r6, [r4, #0]
 80080f8:	6961      	ldr	r1, [r4, #20]
 80080fa:	1d18      	adds	r0, r3, #4
 80080fc:	6028      	str	r0, [r5, #0]
 80080fe:	0635      	lsls	r5, r6, #24
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	d501      	bpl.n	8008108 <_printf_i+0x1cc>
 8008104:	6019      	str	r1, [r3, #0]
 8008106:	e002      	b.n	800810e <_printf_i+0x1d2>
 8008108:	0670      	lsls	r0, r6, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0x1c8>
 800810c:	8019      	strh	r1, [r3, #0]
 800810e:	2300      	movs	r3, #0
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	4615      	mov	r5, r2
 8008114:	e7ba      	b.n	800808c <_printf_i+0x150>
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	602a      	str	r2, [r5, #0]
 800811c:	681d      	ldr	r5, [r3, #0]
 800811e:	6862      	ldr	r2, [r4, #4]
 8008120:	2100      	movs	r1, #0
 8008122:	4628      	mov	r0, r5
 8008124:	f7f8 f8dc 	bl	80002e0 <memchr>
 8008128:	b108      	cbz	r0, 800812e <_printf_i+0x1f2>
 800812a:	1b40      	subs	r0, r0, r5
 800812c:	6060      	str	r0, [r4, #4]
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	2300      	movs	r3, #0
 8008134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008138:	e7a8      	b.n	800808c <_printf_i+0x150>
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	462a      	mov	r2, r5
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d0ab      	beq.n	80080a0 <_printf_i+0x164>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	079b      	lsls	r3, r3, #30
 800814c:	d413      	bmi.n	8008176 <_printf_i+0x23a>
 800814e:	68e0      	ldr	r0, [r4, #12]
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	4298      	cmp	r0, r3
 8008154:	bfb8      	it	lt
 8008156:	4618      	movlt	r0, r3
 8008158:	e7a4      	b.n	80080a4 <_printf_i+0x168>
 800815a:	2301      	movs	r3, #1
 800815c:	4632      	mov	r2, r6
 800815e:	4649      	mov	r1, r9
 8008160:	4640      	mov	r0, r8
 8008162:	47d0      	blx	sl
 8008164:	3001      	adds	r0, #1
 8008166:	d09b      	beq.n	80080a0 <_printf_i+0x164>
 8008168:	3501      	adds	r5, #1
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	9903      	ldr	r1, [sp, #12]
 800816e:	1a5b      	subs	r3, r3, r1
 8008170:	42ab      	cmp	r3, r5
 8008172:	dcf2      	bgt.n	800815a <_printf_i+0x21e>
 8008174:	e7eb      	b.n	800814e <_printf_i+0x212>
 8008176:	2500      	movs	r5, #0
 8008178:	f104 0619 	add.w	r6, r4, #25
 800817c:	e7f5      	b.n	800816a <_printf_i+0x22e>
 800817e:	bf00      	nop
 8008180:	08008855 	.word	0x08008855
 8008184:	08008866 	.word	0x08008866

08008188 <_sbrk_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	; (80081a4 <_sbrk_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7f9 f808 	bl	80011a8 <_sbrk>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_sbrk_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_sbrk_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	24000300 	.word	0x24000300

080081a8 <__sread>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	460c      	mov	r4, r1
 80081ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b0:	f000 fab2 	bl	8008718 <_read_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	bfab      	itete	ge
 80081b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ba:	89a3      	ldrhlt	r3, [r4, #12]
 80081bc:	181b      	addge	r3, r3, r0
 80081be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081c2:	bfac      	ite	ge
 80081c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80081c6:	81a3      	strhlt	r3, [r4, #12]
 80081c8:	bd10      	pop	{r4, pc}

080081ca <__swrite>:
 80081ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ce:	461f      	mov	r7, r3
 80081d0:	898b      	ldrh	r3, [r1, #12]
 80081d2:	05db      	lsls	r3, r3, #23
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	4616      	mov	r6, r2
 80081da:	d505      	bpl.n	80081e8 <__swrite+0x1e>
 80081dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e0:	2302      	movs	r3, #2
 80081e2:	2200      	movs	r2, #0
 80081e4:	f000 f9c8 	bl	8008578 <_lseek_r>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	4632      	mov	r2, r6
 80081f6:	463b      	mov	r3, r7
 80081f8:	4628      	mov	r0, r5
 80081fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081fe:	f000 b869 	b.w	80082d4 <_write_r>

08008202 <__sseek>:
 8008202:	b510      	push	{r4, lr}
 8008204:	460c      	mov	r4, r1
 8008206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820a:	f000 f9b5 	bl	8008578 <_lseek_r>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	bf15      	itete	ne
 8008214:	6560      	strne	r0, [r4, #84]	; 0x54
 8008216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800821a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800821e:	81a3      	strheq	r3, [r4, #12]
 8008220:	bf18      	it	ne
 8008222:	81a3      	strhne	r3, [r4, #12]
 8008224:	bd10      	pop	{r4, pc}

08008226 <__sclose>:
 8008226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822a:	f000 b8d3 	b.w	80083d4 <_close_r>
	...

08008230 <__swbuf_r>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	460e      	mov	r6, r1
 8008234:	4614      	mov	r4, r2
 8008236:	4605      	mov	r5, r0
 8008238:	b118      	cbz	r0, 8008242 <__swbuf_r+0x12>
 800823a:	6983      	ldr	r3, [r0, #24]
 800823c:	b90b      	cbnz	r3, 8008242 <__swbuf_r+0x12>
 800823e:	f7ff fb81 	bl	8007944 <__sinit>
 8008242:	4b21      	ldr	r3, [pc, #132]	; (80082c8 <__swbuf_r+0x98>)
 8008244:	429c      	cmp	r4, r3
 8008246:	d12b      	bne.n	80082a0 <__swbuf_r+0x70>
 8008248:	686c      	ldr	r4, [r5, #4]
 800824a:	69a3      	ldr	r3, [r4, #24]
 800824c:	60a3      	str	r3, [r4, #8]
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	071a      	lsls	r2, r3, #28
 8008252:	d52f      	bpl.n	80082b4 <__swbuf_r+0x84>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	b36b      	cbz	r3, 80082b4 <__swbuf_r+0x84>
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	6820      	ldr	r0, [r4, #0]
 800825c:	1ac0      	subs	r0, r0, r3
 800825e:	6963      	ldr	r3, [r4, #20]
 8008260:	b2f6      	uxtb	r6, r6
 8008262:	4283      	cmp	r3, r0
 8008264:	4637      	mov	r7, r6
 8008266:	dc04      	bgt.n	8008272 <__swbuf_r+0x42>
 8008268:	4621      	mov	r1, r4
 800826a:	4628      	mov	r0, r5
 800826c:	f000 f948 	bl	8008500 <_fflush_r>
 8008270:	bb30      	cbnz	r0, 80082c0 <__swbuf_r+0x90>
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	3b01      	subs	r3, #1
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	701e      	strb	r6, [r3, #0]
 8008280:	6963      	ldr	r3, [r4, #20]
 8008282:	3001      	adds	r0, #1
 8008284:	4283      	cmp	r3, r0
 8008286:	d004      	beq.n	8008292 <__swbuf_r+0x62>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	07db      	lsls	r3, r3, #31
 800828c:	d506      	bpl.n	800829c <__swbuf_r+0x6c>
 800828e:	2e0a      	cmp	r6, #10
 8008290:	d104      	bne.n	800829c <__swbuf_r+0x6c>
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f000 f933 	bl	8008500 <_fflush_r>
 800829a:	b988      	cbnz	r0, 80082c0 <__swbuf_r+0x90>
 800829c:	4638      	mov	r0, r7
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <__swbuf_r+0x9c>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d101      	bne.n	80082aa <__swbuf_r+0x7a>
 80082a6:	68ac      	ldr	r4, [r5, #8]
 80082a8:	e7cf      	b.n	800824a <__swbuf_r+0x1a>
 80082aa:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <__swbuf_r+0xa0>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	bf08      	it	eq
 80082b0:	68ec      	ldreq	r4, [r5, #12]
 80082b2:	e7ca      	b.n	800824a <__swbuf_r+0x1a>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 f81e 	bl	80082f8 <__swsetup_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d0cb      	beq.n	8008258 <__swbuf_r+0x28>
 80082c0:	f04f 37ff 	mov.w	r7, #4294967295
 80082c4:	e7ea      	b.n	800829c <__swbuf_r+0x6c>
 80082c6:	bf00      	nop
 80082c8:	08008804 	.word	0x08008804
 80082cc:	08008824 	.word	0x08008824
 80082d0:	080087e4 	.word	0x080087e4

080082d4 <_write_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <_write_r+0x20>)
 80082d8:	4604      	mov	r4, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	4611      	mov	r1, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	602a      	str	r2, [r5, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7f8 ff0f 	bl	8001106 <_write>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_write_r+0x1e>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_write_r+0x1e>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	24000300 	.word	0x24000300

080082f8 <__swsetup_r>:
 80082f8:	4b32      	ldr	r3, [pc, #200]	; (80083c4 <__swsetup_r+0xcc>)
 80082fa:	b570      	push	{r4, r5, r6, lr}
 80082fc:	681d      	ldr	r5, [r3, #0]
 80082fe:	4606      	mov	r6, r0
 8008300:	460c      	mov	r4, r1
 8008302:	b125      	cbz	r5, 800830e <__swsetup_r+0x16>
 8008304:	69ab      	ldr	r3, [r5, #24]
 8008306:	b913      	cbnz	r3, 800830e <__swsetup_r+0x16>
 8008308:	4628      	mov	r0, r5
 800830a:	f7ff fb1b 	bl	8007944 <__sinit>
 800830e:	4b2e      	ldr	r3, [pc, #184]	; (80083c8 <__swsetup_r+0xd0>)
 8008310:	429c      	cmp	r4, r3
 8008312:	d10f      	bne.n	8008334 <__swsetup_r+0x3c>
 8008314:	686c      	ldr	r4, [r5, #4]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800831c:	0719      	lsls	r1, r3, #28
 800831e:	d42c      	bmi.n	800837a <__swsetup_r+0x82>
 8008320:	06dd      	lsls	r5, r3, #27
 8008322:	d411      	bmi.n	8008348 <__swsetup_r+0x50>
 8008324:	2309      	movs	r3, #9
 8008326:	6033      	str	r3, [r6, #0]
 8008328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
 8008332:	e03e      	b.n	80083b2 <__swsetup_r+0xba>
 8008334:	4b25      	ldr	r3, [pc, #148]	; (80083cc <__swsetup_r+0xd4>)
 8008336:	429c      	cmp	r4, r3
 8008338:	d101      	bne.n	800833e <__swsetup_r+0x46>
 800833a:	68ac      	ldr	r4, [r5, #8]
 800833c:	e7eb      	b.n	8008316 <__swsetup_r+0x1e>
 800833e:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <__swsetup_r+0xd8>)
 8008340:	429c      	cmp	r4, r3
 8008342:	bf08      	it	eq
 8008344:	68ec      	ldreq	r4, [r5, #12]
 8008346:	e7e6      	b.n	8008316 <__swsetup_r+0x1e>
 8008348:	0758      	lsls	r0, r3, #29
 800834a:	d512      	bpl.n	8008372 <__swsetup_r+0x7a>
 800834c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800834e:	b141      	cbz	r1, 8008362 <__swsetup_r+0x6a>
 8008350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008354:	4299      	cmp	r1, r3
 8008356:	d002      	beq.n	800835e <__swsetup_r+0x66>
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f991 	bl	8008680 <_free_r>
 800835e:	2300      	movs	r3, #0
 8008360:	6363      	str	r3, [r4, #52]	; 0x34
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	2300      	movs	r3, #0
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f043 0308 	orr.w	r3, r3, #8
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	b94b      	cbnz	r3, 8008392 <__swsetup_r+0x9a>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008388:	d003      	beq.n	8008392 <__swsetup_r+0x9a>
 800838a:	4621      	mov	r1, r4
 800838c:	4630      	mov	r0, r6
 800838e:	f000 f92b 	bl	80085e8 <__smakebuf_r>
 8008392:	89a0      	ldrh	r0, [r4, #12]
 8008394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008398:	f010 0301 	ands.w	r3, r0, #1
 800839c:	d00a      	beq.n	80083b4 <__swsetup_r+0xbc>
 800839e:	2300      	movs	r3, #0
 80083a0:	60a3      	str	r3, [r4, #8]
 80083a2:	6963      	ldr	r3, [r4, #20]
 80083a4:	425b      	negs	r3, r3
 80083a6:	61a3      	str	r3, [r4, #24]
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	b943      	cbnz	r3, 80083be <__swsetup_r+0xc6>
 80083ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083b0:	d1ba      	bne.n	8008328 <__swsetup_r+0x30>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	0781      	lsls	r1, r0, #30
 80083b6:	bf58      	it	pl
 80083b8:	6963      	ldrpl	r3, [r4, #20]
 80083ba:	60a3      	str	r3, [r4, #8]
 80083bc:	e7f4      	b.n	80083a8 <__swsetup_r+0xb0>
 80083be:	2000      	movs	r0, #0
 80083c0:	e7f7      	b.n	80083b2 <__swsetup_r+0xba>
 80083c2:	bf00      	nop
 80083c4:	24000010 	.word	0x24000010
 80083c8:	08008804 	.word	0x08008804
 80083cc:	08008824 	.word	0x08008824
 80083d0:	080087e4 	.word	0x080087e4

080083d4 <_close_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d06      	ldr	r5, [pc, #24]	; (80083f0 <_close_r+0x1c>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7f8 fead 	bl	800113e <_close>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_close_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_close_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	24000300 	.word	0x24000300

080083f4 <__sflush_r>:
 80083f4:	898a      	ldrh	r2, [r1, #12]
 80083f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	0710      	lsls	r0, r2, #28
 80083fe:	460c      	mov	r4, r1
 8008400:	d458      	bmi.n	80084b4 <__sflush_r+0xc0>
 8008402:	684b      	ldr	r3, [r1, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dc05      	bgt.n	8008414 <__sflush_r+0x20>
 8008408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc02      	bgt.n	8008414 <__sflush_r+0x20>
 800840e:	2000      	movs	r0, #0
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008416:	2e00      	cmp	r6, #0
 8008418:	d0f9      	beq.n	800840e <__sflush_r+0x1a>
 800841a:	2300      	movs	r3, #0
 800841c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008420:	682f      	ldr	r7, [r5, #0]
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	d032      	beq.n	800848c <__sflush_r+0x98>
 8008426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	075a      	lsls	r2, r3, #29
 800842c:	d505      	bpl.n	800843a <__sflush_r+0x46>
 800842e:	6863      	ldr	r3, [r4, #4]
 8008430:	1ac0      	subs	r0, r0, r3
 8008432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008434:	b10b      	cbz	r3, 800843a <__sflush_r+0x46>
 8008436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008438:	1ac0      	subs	r0, r0, r3
 800843a:	2300      	movs	r3, #0
 800843c:	4602      	mov	r2, r0
 800843e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008440:	6a21      	ldr	r1, [r4, #32]
 8008442:	4628      	mov	r0, r5
 8008444:	47b0      	blx	r6
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	d106      	bne.n	800845a <__sflush_r+0x66>
 800844c:	6829      	ldr	r1, [r5, #0]
 800844e:	291d      	cmp	r1, #29
 8008450:	d82c      	bhi.n	80084ac <__sflush_r+0xb8>
 8008452:	4a2a      	ldr	r2, [pc, #168]	; (80084fc <__sflush_r+0x108>)
 8008454:	40ca      	lsrs	r2, r1
 8008456:	07d6      	lsls	r6, r2, #31
 8008458:	d528      	bpl.n	80084ac <__sflush_r+0xb8>
 800845a:	2200      	movs	r2, #0
 800845c:	6062      	str	r2, [r4, #4]
 800845e:	04d9      	lsls	r1, r3, #19
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	6022      	str	r2, [r4, #0]
 8008464:	d504      	bpl.n	8008470 <__sflush_r+0x7c>
 8008466:	1c42      	adds	r2, r0, #1
 8008468:	d101      	bne.n	800846e <__sflush_r+0x7a>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	b903      	cbnz	r3, 8008470 <__sflush_r+0x7c>
 800846e:	6560      	str	r0, [r4, #84]	; 0x54
 8008470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008472:	602f      	str	r7, [r5, #0]
 8008474:	2900      	cmp	r1, #0
 8008476:	d0ca      	beq.n	800840e <__sflush_r+0x1a>
 8008478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800847c:	4299      	cmp	r1, r3
 800847e:	d002      	beq.n	8008486 <__sflush_r+0x92>
 8008480:	4628      	mov	r0, r5
 8008482:	f000 f8fd 	bl	8008680 <_free_r>
 8008486:	2000      	movs	r0, #0
 8008488:	6360      	str	r0, [r4, #52]	; 0x34
 800848a:	e7c1      	b.n	8008410 <__sflush_r+0x1c>
 800848c:	6a21      	ldr	r1, [r4, #32]
 800848e:	2301      	movs	r3, #1
 8008490:	4628      	mov	r0, r5
 8008492:	47b0      	blx	r6
 8008494:	1c41      	adds	r1, r0, #1
 8008496:	d1c7      	bne.n	8008428 <__sflush_r+0x34>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c4      	beq.n	8008428 <__sflush_r+0x34>
 800849e:	2b1d      	cmp	r3, #29
 80084a0:	d001      	beq.n	80084a6 <__sflush_r+0xb2>
 80084a2:	2b16      	cmp	r3, #22
 80084a4:	d101      	bne.n	80084aa <__sflush_r+0xb6>
 80084a6:	602f      	str	r7, [r5, #0]
 80084a8:	e7b1      	b.n	800840e <__sflush_r+0x1a>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	e7ad      	b.n	8008410 <__sflush_r+0x1c>
 80084b4:	690f      	ldr	r7, [r1, #16]
 80084b6:	2f00      	cmp	r7, #0
 80084b8:	d0a9      	beq.n	800840e <__sflush_r+0x1a>
 80084ba:	0793      	lsls	r3, r2, #30
 80084bc:	680e      	ldr	r6, [r1, #0]
 80084be:	bf08      	it	eq
 80084c0:	694b      	ldreq	r3, [r1, #20]
 80084c2:	600f      	str	r7, [r1, #0]
 80084c4:	bf18      	it	ne
 80084c6:	2300      	movne	r3, #0
 80084c8:	eba6 0807 	sub.w	r8, r6, r7
 80084cc:	608b      	str	r3, [r1, #8]
 80084ce:	f1b8 0f00 	cmp.w	r8, #0
 80084d2:	dd9c      	ble.n	800840e <__sflush_r+0x1a>
 80084d4:	6a21      	ldr	r1, [r4, #32]
 80084d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084d8:	4643      	mov	r3, r8
 80084da:	463a      	mov	r2, r7
 80084dc:	4628      	mov	r0, r5
 80084de:	47b0      	blx	r6
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dc06      	bgt.n	80084f2 <__sflush_r+0xfe>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	e78e      	b.n	8008410 <__sflush_r+0x1c>
 80084f2:	4407      	add	r7, r0
 80084f4:	eba8 0800 	sub.w	r8, r8, r0
 80084f8:	e7e9      	b.n	80084ce <__sflush_r+0xda>
 80084fa:	bf00      	nop
 80084fc:	20400001 	.word	0x20400001

08008500 <_fflush_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	690b      	ldr	r3, [r1, #16]
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b913      	cbnz	r3, 8008510 <_fflush_r+0x10>
 800850a:	2500      	movs	r5, #0
 800850c:	4628      	mov	r0, r5
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	b118      	cbz	r0, 800851a <_fflush_r+0x1a>
 8008512:	6983      	ldr	r3, [r0, #24]
 8008514:	b90b      	cbnz	r3, 800851a <_fflush_r+0x1a>
 8008516:	f7ff fa15 	bl	8007944 <__sinit>
 800851a:	4b14      	ldr	r3, [pc, #80]	; (800856c <_fflush_r+0x6c>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d11b      	bne.n	8008558 <_fflush_r+0x58>
 8008520:	686c      	ldr	r4, [r5, #4]
 8008522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ef      	beq.n	800850a <_fflush_r+0xa>
 800852a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800852c:	07d0      	lsls	r0, r2, #31
 800852e:	d404      	bmi.n	800853a <_fflush_r+0x3a>
 8008530:	0599      	lsls	r1, r3, #22
 8008532:	d402      	bmi.n	800853a <_fflush_r+0x3a>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f7ff faa3 	bl	8007a80 <__retarget_lock_acquire_recursive>
 800853a:	4628      	mov	r0, r5
 800853c:	4621      	mov	r1, r4
 800853e:	f7ff ff59 	bl	80083f4 <__sflush_r>
 8008542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008544:	07da      	lsls	r2, r3, #31
 8008546:	4605      	mov	r5, r0
 8008548:	d4e0      	bmi.n	800850c <_fflush_r+0xc>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	059b      	lsls	r3, r3, #22
 800854e:	d4dd      	bmi.n	800850c <_fflush_r+0xc>
 8008550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008552:	f7ff fa96 	bl	8007a82 <__retarget_lock_release_recursive>
 8008556:	e7d9      	b.n	800850c <_fflush_r+0xc>
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <_fflush_r+0x70>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <_fflush_r+0x62>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7df      	b.n	8008522 <_fflush_r+0x22>
 8008562:	4b04      	ldr	r3, [pc, #16]	; (8008574 <_fflush_r+0x74>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7da      	b.n	8008522 <_fflush_r+0x22>
 800856c:	08008804 	.word	0x08008804
 8008570:	08008824 	.word	0x08008824
 8008574:	080087e4 	.word	0x080087e4

08008578 <_lseek_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4d07      	ldr	r5, [pc, #28]	; (8008598 <_lseek_r+0x20>)
 800857c:	4604      	mov	r4, r0
 800857e:	4608      	mov	r0, r1
 8008580:	4611      	mov	r1, r2
 8008582:	2200      	movs	r2, #0
 8008584:	602a      	str	r2, [r5, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f7f8 fe00 	bl	800118c <_lseek>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_lseek_r+0x1e>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	b103      	cbz	r3, 8008596 <_lseek_r+0x1e>
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	24000300 	.word	0x24000300

0800859c <__swhatbuf_r>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	460e      	mov	r6, r1
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	2900      	cmp	r1, #0
 80085a6:	b096      	sub	sp, #88	; 0x58
 80085a8:	4614      	mov	r4, r2
 80085aa:	461d      	mov	r5, r3
 80085ac:	da08      	bge.n	80085c0 <__swhatbuf_r+0x24>
 80085ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	602a      	str	r2, [r5, #0]
 80085b6:	061a      	lsls	r2, r3, #24
 80085b8:	d410      	bmi.n	80085dc <__swhatbuf_r+0x40>
 80085ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085be:	e00e      	b.n	80085de <__swhatbuf_r+0x42>
 80085c0:	466a      	mov	r2, sp
 80085c2:	f000 f8bb 	bl	800873c <_fstat_r>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	dbf1      	blt.n	80085ae <__swhatbuf_r+0x12>
 80085ca:	9a01      	ldr	r2, [sp, #4]
 80085cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085d4:	425a      	negs	r2, r3
 80085d6:	415a      	adcs	r2, r3
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	e7ee      	b.n	80085ba <__swhatbuf_r+0x1e>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	2000      	movs	r0, #0
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	b016      	add	sp, #88	; 0x58
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080085e8 <__smakebuf_r>:
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085ec:	079d      	lsls	r5, r3, #30
 80085ee:	4606      	mov	r6, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	d507      	bpl.n	8008604 <__smakebuf_r+0x1c>
 80085f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	2301      	movs	r3, #1
 80085fe:	6163      	str	r3, [r4, #20]
 8008600:	b002      	add	sp, #8
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	ab01      	add	r3, sp, #4
 8008606:	466a      	mov	r2, sp
 8008608:	f7ff ffc8 	bl	800859c <__swhatbuf_r>
 800860c:	9900      	ldr	r1, [sp, #0]
 800860e:	4605      	mov	r5, r0
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff fa57 	bl	8007ac4 <_malloc_r>
 8008616:	b948      	cbnz	r0, 800862c <__smakebuf_r+0x44>
 8008618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d4ef      	bmi.n	8008600 <__smakebuf_r+0x18>
 8008620:	f023 0303 	bic.w	r3, r3, #3
 8008624:	f043 0302 	orr.w	r3, r3, #2
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	e7e3      	b.n	80085f4 <__smakebuf_r+0xc>
 800862c:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <__smakebuf_r+0x7c>)
 800862e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	6020      	str	r0, [r4, #0]
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	9b00      	ldr	r3, [sp, #0]
 800863c:	6163      	str	r3, [r4, #20]
 800863e:	9b01      	ldr	r3, [sp, #4]
 8008640:	6120      	str	r0, [r4, #16]
 8008642:	b15b      	cbz	r3, 800865c <__smakebuf_r+0x74>
 8008644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008648:	4630      	mov	r0, r6
 800864a:	f000 f889 	bl	8008760 <_isatty_r>
 800864e:	b128      	cbz	r0, 800865c <__smakebuf_r+0x74>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	89a0      	ldrh	r0, [r4, #12]
 800865e:	4305      	orrs	r5, r0
 8008660:	81a5      	strh	r5, [r4, #12]
 8008662:	e7cd      	b.n	8008600 <__smakebuf_r+0x18>
 8008664:	080078dd 	.word	0x080078dd

08008668 <__malloc_lock>:
 8008668:	4801      	ldr	r0, [pc, #4]	; (8008670 <__malloc_lock+0x8>)
 800866a:	f7ff ba09 	b.w	8007a80 <__retarget_lock_acquire_recursive>
 800866e:	bf00      	nop
 8008670:	240002f4 	.word	0x240002f4

08008674 <__malloc_unlock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_unlock+0x8>)
 8008676:	f7ff ba04 	b.w	8007a82 <__retarget_lock_release_recursive>
 800867a:	bf00      	nop
 800867c:	240002f4 	.word	0x240002f4

08008680 <_free_r>:
 8008680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008682:	2900      	cmp	r1, #0
 8008684:	d044      	beq.n	8008710 <_free_r+0x90>
 8008686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868a:	9001      	str	r0, [sp, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f1a1 0404 	sub.w	r4, r1, #4
 8008692:	bfb8      	it	lt
 8008694:	18e4      	addlt	r4, r4, r3
 8008696:	f7ff ffe7 	bl	8008668 <__malloc_lock>
 800869a:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <_free_r+0x94>)
 800869c:	9801      	ldr	r0, [sp, #4]
 800869e:	6813      	ldr	r3, [r2, #0]
 80086a0:	b933      	cbnz	r3, 80086b0 <_free_r+0x30>
 80086a2:	6063      	str	r3, [r4, #4]
 80086a4:	6014      	str	r4, [r2, #0]
 80086a6:	b003      	add	sp, #12
 80086a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ac:	f7ff bfe2 	b.w	8008674 <__malloc_unlock>
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	d908      	bls.n	80086c6 <_free_r+0x46>
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	1961      	adds	r1, r4, r5
 80086b8:	428b      	cmp	r3, r1
 80086ba:	bf01      	itttt	eq
 80086bc:	6819      	ldreq	r1, [r3, #0]
 80086be:	685b      	ldreq	r3, [r3, #4]
 80086c0:	1949      	addeq	r1, r1, r5
 80086c2:	6021      	streq	r1, [r4, #0]
 80086c4:	e7ed      	b.n	80086a2 <_free_r+0x22>
 80086c6:	461a      	mov	r2, r3
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	b10b      	cbz	r3, 80086d0 <_free_r+0x50>
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d9fa      	bls.n	80086c6 <_free_r+0x46>
 80086d0:	6811      	ldr	r1, [r2, #0]
 80086d2:	1855      	adds	r5, r2, r1
 80086d4:	42a5      	cmp	r5, r4
 80086d6:	d10b      	bne.n	80086f0 <_free_r+0x70>
 80086d8:	6824      	ldr	r4, [r4, #0]
 80086da:	4421      	add	r1, r4
 80086dc:	1854      	adds	r4, r2, r1
 80086de:	42a3      	cmp	r3, r4
 80086e0:	6011      	str	r1, [r2, #0]
 80086e2:	d1e0      	bne.n	80086a6 <_free_r+0x26>
 80086e4:	681c      	ldr	r4, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	6053      	str	r3, [r2, #4]
 80086ea:	4421      	add	r1, r4
 80086ec:	6011      	str	r1, [r2, #0]
 80086ee:	e7da      	b.n	80086a6 <_free_r+0x26>
 80086f0:	d902      	bls.n	80086f8 <_free_r+0x78>
 80086f2:	230c      	movs	r3, #12
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	e7d6      	b.n	80086a6 <_free_r+0x26>
 80086f8:	6825      	ldr	r5, [r4, #0]
 80086fa:	1961      	adds	r1, r4, r5
 80086fc:	428b      	cmp	r3, r1
 80086fe:	bf04      	itt	eq
 8008700:	6819      	ldreq	r1, [r3, #0]
 8008702:	685b      	ldreq	r3, [r3, #4]
 8008704:	6063      	str	r3, [r4, #4]
 8008706:	bf04      	itt	eq
 8008708:	1949      	addeq	r1, r1, r5
 800870a:	6021      	streq	r1, [r4, #0]
 800870c:	6054      	str	r4, [r2, #4]
 800870e:	e7ca      	b.n	80086a6 <_free_r+0x26>
 8008710:	b003      	add	sp, #12
 8008712:	bd30      	pop	{r4, r5, pc}
 8008714:	240002f8 	.word	0x240002f8

08008718 <_read_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	; (8008738 <_read_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7f8 fcd0 	bl	80010cc <_read>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_read_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_read_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	24000300 	.word	0x24000300

0800873c <_fstat_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_fstat_r+0x20>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	f7f8 fd04 	bl	8001156 <_fstat>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d102      	bne.n	8008758 <_fstat_r+0x1c>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	b103      	cbz	r3, 8008758 <_fstat_r+0x1c>
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	bf00      	nop
 800875c:	24000300 	.word	0x24000300

08008760 <_isatty_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d06      	ldr	r5, [pc, #24]	; (800877c <_isatty_r+0x1c>)
 8008764:	2300      	movs	r3, #0
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	f7f8 fd03 	bl	8001176 <_isatty>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_isatty_r+0x1a>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_isatty_r+0x1a>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	24000300 	.word	0x24000300

08008780 <_init>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr

0800878c <_fini>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr
