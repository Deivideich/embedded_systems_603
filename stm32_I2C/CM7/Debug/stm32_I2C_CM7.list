
stm32_I2C_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f14  08007f14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f1c  08007f1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08007f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000074  08007f98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000304  08007f98  00020304  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001677b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002951  00000000  00000000  0003681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00039170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  0003a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a39c  00000000  00000000  0003af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018252  00000000  00000000  00075314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b23f  00000000  00000000  0008d566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002087a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  002087f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e1c 	.word	0x08007e1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08007e1c 	.word	0x08007e1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <main+0xbc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	60fa      	str	r2, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fa51 	bl	8000c80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fd17 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f849 	bl	8000878 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <main+0xbc>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <main+0xbc>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <main+0xbc>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f002 fd57 	bl	80032b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f002 fd6d 	bl	80032ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <main+0xbc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	60fa      	str	r2, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fa23 	bl	8000c80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f999 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f923 	bl	8000a88 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000842:	f000 f8d3 	bl	80009ec <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000846:	f000 f891 	bl	800096c <MX_I2C2_Init>
  MX_DMA_Init();
 800084a:	f000 f969 	bl	8000b20 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  uint8_t addr_sec = 0x00; // DATA to send
 800084e:	2300      	movs	r3, #0
 8000850:	72fb      	strb	r3, [r7, #11]
  uint8_t msg = 0x01;
 8000852:	2301      	movs	r3, #1
 8000854:	72bb      	strb	r3, [r7, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000856:	2101      	movs	r1, #1
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <main+0xc0>)
 800085a:	f002 fd12 	bl	8003282 <HAL_GPIO_TogglePin>
//	  HAL_Delay(1000);
//	  HAL_I2C_Master_Receive(&hi2c2 , (0x68<<1 )+1,&msg, sizeof(msg), HAL_MAX_DELAY);
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//	  HAL_Delay(1000);

	  printf("%u\r\n",msg-128);
 800085e:	7abb      	ldrb	r3, [r7, #10]
 8000860:	3b80      	subs	r3, #128	; 0x80
 8000862:	4619      	mov	r1, r3
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <main+0xc4>)
 8000866:	f006 fb4b 	bl	8006f00 <iprintf>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800086a:	e7f4      	b.n	8000856 <main+0xa6>
 800086c:	58024400 	.word	0x58024400
 8000870:	58020400 	.word	0x58020400
 8000874:	08007e34 	.word	0x08007e34

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	; 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	224c      	movs	r2, #76	; 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f006 fb32 	bl	8006ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f006 fb2c 	bl	8006ef0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000898:	2004      	movs	r0, #4
 800089a:	f002 fe7d 	bl	8003598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <SystemClock_Config+0xec>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <SystemClock_Config+0xec>)
 80008a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <SystemClock_Config+0xec>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <SystemClock_Config+0xf0>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <SystemClock_Config+0xf0>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <SystemClock_Config+0xf0>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <SystemClock_Config+0xec>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008f6:	23f0      	movs	r3, #240	; 0xf0
 80008f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000906:	2308      	movs	r3, #8
 8000908:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090a:	2300      	movs	r3, #0
 800090c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fe98 	bl	800364c <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000922:	f000 f9ad 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	233f      	movs	r3, #63	; 0x3f
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000932:	2308      	movs	r3, #8
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2104      	movs	r1, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f003 faab 	bl	8003ea8 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000958:	f000 f992 	bl	8000c80 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3770      	adds	r7, #112	; 0x70
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58024800 	.word	0x58024800
 8000968:	58000400 	.word	0x58000400

0800096c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_I2C2_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <MX_I2C2_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009a8:	f002 fcb4 	bl	8003314 <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 f965 	bl	8000c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009ba:	f002 fd55 	bl	8003468 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 f95c 	bl	8000c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009cc:	f002 fd97 	bl	80034fe <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f953 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24000090 	.word	0x24000090
 80009e4:	40005800 	.word	0x40005800
 80009e8:	307075b1 	.word	0x307075b1

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 80009f2:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <MX_USART2_UART_Init+0x98>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a10:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a14:	220c      	movs	r2, #12
 8000a16:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a38:	f005 f92a 	bl	8005c90 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a42:	f000 f91d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a4a:	f006 f95d 	bl	8006d08 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a54:	f000 f914 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a5c:	f006 f992 	bl	8006d84 <HAL_UARTEx_SetRxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a66:	f000 f90b 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x94>)
 8000a6c:	f006 f913 	bl	8006c96 <HAL_UARTEx_DisableFifoMode>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000a76:	f000 f903 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	240001cc 	.word	0x240001cc
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_USART3_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f005 f8dd 	bl	8005c90 <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 f8d0 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ae4:	f006 f910 	bl	8006d08 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 f8c7 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000af6:	f006 f945 	bl	8006d84 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 f8be 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000b06:	f006 f8c6 	bl	8006c96 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f8b6 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2400025c 	.word	0x2400025c
 8000b1c:	40004800 	.word	0x40004800

08000b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_DMA_Init+0x4c>)
 8000b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b2c:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <MX_DMA_Init+0x4c>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_DMA_Init+0x4c>)
 8000b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	200b      	movs	r0, #11
 8000b4a:	f000 fcda 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b4e:	200b      	movs	r0, #11
 8000b50:	f000 fcf1 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	200c      	movs	r0, #12
 8000b5a:	f000 fcd2 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b5e:	200c      	movs	r0, #12
 8000b60:	f000 fce9 	bl	8001536 <HAL_NVIC_EnableIRQ>

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58024400 	.word	0x58024400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba4:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_GPIO_Init+0x104>)
 8000c06:	f002 fb23 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_TEST_GPIO_Port, Pin_TEST_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000c10:	f002 fb1e 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x10c>)
 8000c2a:	f002 f961 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c2e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480b      	ldr	r0, [pc, #44]	; (8000c74 <MX_GPIO_Init+0x104>)
 8000c48:	f002 f952 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_TEST_Pin */
  GPIO_InitStruct.Pin = Pin_TEST_Pin;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_TEST_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000c64:	f002 f944 	bl	8002ef0 <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58020400 	.word	0x58020400
 8000c78:	58020c00 	.word	0x58020c00
 8000c7c:	58020800 	.word	0x58020800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c94:	1d39      	adds	r1, r7, #4
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <__io_putchar+0x20>)
 8000c9e:	f005 f847 	bl	8005d30 <HAL_UART_Transmit>
  return ch;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2400025c 	.word	0x2400025c

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b8      	sub	sp, #224	; 0xe0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	22bc      	movs	r2, #188	; 0xbc
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 f8f3 	bl	8006ef0 <memset>
  if(hi2c->Instance==I2C2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a56      	ldr	r2, [pc, #344]	; (8000e68 <HAL_I2C_MspInit+0x184>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	f040 80a5 	bne.w	8000e60 <HAL_I2C_MspInit+0x17c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d16:	2308      	movs	r3, #8
 8000d18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fc4b 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000d30:	f7ff ffa6 	bl	8000c80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <HAL_I2C_MspInit+0x188>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a4c      	ldr	r2, [pc, #304]	; (8000e6c <HAL_I2C_MspInit+0x188>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_I2C_MspInit+0x188>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d76:	4619      	mov	r1, r3
 8000d78:	483d      	ldr	r0, [pc, #244]	; (8000e70 <HAL_I2C_MspInit+0x18c>)
 8000d7a:	f002 f8b9 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_I2C_MspInit+0x188>)
 8000d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d84:	4a39      	ldr	r2, [pc, #228]	; (8000e6c <HAL_I2C_MspInit+0x188>)
 8000d86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_I2C_MspInit+0x188>)
 8000d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream0;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000d9e:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <HAL_I2C_MspInit+0x194>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000da4:	2224      	movs	r2, #36	; 0x24
 8000da6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da8:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dae:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db4:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dba:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000ddc:	f000 fbc6 	bl	800156c <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8000de6:	f7ff ff4b 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_I2C_MspInit+0x190>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_I2C_MspInit+0x19c>)
 8000dfa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000dfe:	2223      	movs	r2, #35	; 0x23
 8000e00:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e14:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e36:	f000 fb99 	bl	800156c <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8000e40:	f7ff ff1e 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_I2C_MspInit+0x198>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2021      	movs	r0, #33	; 0x21
 8000e56:	f000 fb54 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e5a:	2021      	movs	r0, #33	; 0x21
 8000e5c:	f000 fb6b 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	37e0      	adds	r7, #224	; 0xe0
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40005800 	.word	0x40005800
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	240000dc 	.word	0x240000dc
 8000e78:	40020010 	.word	0x40020010
 8000e7c:	24000154 	.word	0x24000154
 8000e80:	40020028 	.word	0x40020028

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ba      	sub	sp, #232	; 0xe8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	22bc      	movs	r2, #188	; 0xbc
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 f823 	bl	8006ef0 <memset>
  if(huart->Instance==USART2)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a49      	ldr	r2, [pc, #292]	; (8000fd4 <HAL_UART_MspInit+0x150>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d142      	bne.n	8000f3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fb7c 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ece:	f7ff fed7 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed8:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f0e:	2360      	movs	r3, #96	; 0x60
 8000f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f30:	4619      	mov	r1, r3
 8000f32:	482a      	ldr	r0, [pc, #168]	; (8000fdc <HAL_UART_MspInit+0x158>)
 8000f34:	f001 ffdc 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f38:	e047      	b.n	8000fca <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d142      	bne.n	8000fca <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fb34 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000f5e:	f7ff fe8f 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_UART_MspInit+0x154>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_UART_MspInit+0x158>)
 8000fc6:	f001 ff93 	bl	8002ef0 <HAL_GPIO_Init>
}
 8000fca:	bf00      	nop
 8000fcc:	37e8      	adds	r7, #232	; 0xe8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020c00 	.word	0x58020c00
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f960 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <DMA1_Stream0_IRQHandler+0x10>)
 800103e:	f000 fdf1 	bl	8001c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240000dc 	.word	0x240000dc

0800104c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA1_Stream1_IRQHandler+0x10>)
 8001052:	f000 fde7 	bl	8001c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	24000154 	.word	0x24000154

08001060 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <I2C2_EV_IRQHandler+0x10>)
 8001066:	f002 f9e5 	bl	8003434 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	24000090 	.word	0x24000090

08001074 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001086:	f3af 8000 	nop.w
 800108a:	4601      	mov	r1, r0
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf0      	blt.n	8001086 <_read+0x12>
	}

return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e009      	b.n	80010d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fddf 	bl	8000c8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf1      	blt.n	80010c0 <_write+0x12>
	}
	return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_close>:

int _close(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	605a      	str	r2, [r3, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_isatty>:

int _isatty(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return 1;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f005 fe8c 	bl	8006e9c <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	24080000 	.word	0x24080000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	240002ec 	.word	0x240002ec
 80011b8:	24000308 	.word	0x24000308

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c0:	f7ff fa60 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	; (80011fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	; (8001208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ea:	f005 fe5d 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fadf 	bl	80007b0 <main>
  bx  lr
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011fc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001200:	08007f24 	.word	0x08007f24
  ldr r2, =_sbss
 8001204:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001208:	24000304 	.word	0x24000304

0800120c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC3_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
 8001218:	f000 f968 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800121c:	f002 fffa 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8001220:	4602      	mov	r2, r0
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_Init+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	4913      	ldr	r1, [pc, #76]	; (800127c <HAL_Init+0x6c>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_Init+0x68>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_Init+0x6c>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_Init+0x70>)
 8001252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_Init+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f814 	bl	8001288 <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e002      	b.n	8001270 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800126a:	f7ff fd21 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58024400 	.word	0x58024400
 800127c:	08007e3c 	.word	0x08007e3c
 8001280:	24000004 	.word	0x24000004
 8001284:	24000000 	.word	0x24000000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_InitTick+0x60>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e021      	b.n	80012e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_InitTick+0x64>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_InitTick+0x60>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f94d 	bl	8001552 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f917 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x68>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2400000c 	.word	0x2400000c
 80012ec:	24000000 	.word	0x24000000
 80012f0:	24000008 	.word	0x24000008

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2400000c 	.word	0x2400000c
 8001318:	240002f0 	.word	0x240002f0

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	240002f0 	.word	0x240002f0

08001334 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetREVID+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0c1b      	lsrs	r3, r3, #16
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	5c001000 	.word	0x5c001000

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <__NVIC_SetPriorityGrouping+0x40>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x40>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00
 8001390:	05fa0000 	.word	0x05fa0000

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff40 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff33 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa4 	bl	80014a8 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff fed2 	bl	800131c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e316      	b.n	8001bb2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a66      	ldr	r2, [pc, #408]	; (8001724 <HAL_DMA_Init+0x1b8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d04a      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a65      	ldr	r2, [pc, #404]	; (8001728 <HAL_DMA_Init+0x1bc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d045      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a63      	ldr	r2, [pc, #396]	; (800172c <HAL_DMA_Init+0x1c0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d040      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a62      	ldr	r2, [pc, #392]	; (8001730 <HAL_DMA_Init+0x1c4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d03b      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a60      	ldr	r2, [pc, #384]	; (8001734 <HAL_DMA_Init+0x1c8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d036      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <HAL_DMA_Init+0x1cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d031      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a5d      	ldr	r2, [pc, #372]	; (800173c <HAL_DMA_Init+0x1d0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d02c      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a5c      	ldr	r2, [pc, #368]	; (8001740 <HAL_DMA_Init+0x1d4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d027      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <HAL_DMA_Init+0x1d8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d022      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a59      	ldr	r2, [pc, #356]	; (8001748 <HAL_DMA_Init+0x1dc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d01d      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a57      	ldr	r2, [pc, #348]	; (800174c <HAL_DMA_Init+0x1e0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d018      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a56      	ldr	r2, [pc, #344]	; (8001750 <HAL_DMA_Init+0x1e4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a54      	ldr	r2, [pc, #336]	; (8001754 <HAL_DMA_Init+0x1e8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00e      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a53      	ldr	r2, [pc, #332]	; (8001758 <HAL_DMA_Init+0x1ec>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d009      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a51      	ldr	r2, [pc, #324]	; (800175c <HAL_DMA_Init+0x1f0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d004      	beq.n	8001624 <HAL_DMA_Init+0xb8>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a50      	ldr	r2, [pc, #320]	; (8001760 <HAL_DMA_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Init+0xbc>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_DMA_Init+0xbe>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 813b 	beq.w	80018a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a37      	ldr	r2, [pc, #220]	; (8001724 <HAL_DMA_Init+0x1b8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d04a      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <HAL_DMA_Init+0x1bc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d045      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a34      	ldr	r2, [pc, #208]	; (800172c <HAL_DMA_Init+0x1c0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d040      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a33      	ldr	r2, [pc, #204]	; (8001730 <HAL_DMA_Init+0x1c4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d03b      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a31      	ldr	r2, [pc, #196]	; (8001734 <HAL_DMA_Init+0x1c8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d036      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a30      	ldr	r2, [pc, #192]	; (8001738 <HAL_DMA_Init+0x1cc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d031      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_DMA_Init+0x1d0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d02c      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2d      	ldr	r2, [pc, #180]	; (8001740 <HAL_DMA_Init+0x1d4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d027      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_DMA_Init+0x1d8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d022      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_DMA_Init+0x1dc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d01d      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_DMA_Init+0x1e0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d018      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_DMA_Init+0x1e4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d013      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_DMA_Init+0x1e8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00e      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a24      	ldr	r2, [pc, #144]	; (8001758 <HAL_DMA_Init+0x1ec>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d009      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a22      	ldr	r2, [pc, #136]	; (800175c <HAL_DMA_Init+0x1f0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_DMA_Init+0x174>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <HAL_DMA_Init+0x1f4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d108      	bne.n	80016f2 <HAL_DMA_Init+0x186>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e007      	b.n	8001702 <HAL_DMA_Init+0x196>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001702:	e02f      	b.n	8001764 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001704:	f7ff fe0a 	bl	800131c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b05      	cmp	r3, #5
 8001710:	d928      	bls.n	8001764 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e246      	b.n	8001bb2 <HAL_DMA_Init+0x646>
 8001724:	40020010 	.word	0x40020010
 8001728:	40020028 	.word	0x40020028
 800172c:	40020040 	.word	0x40020040
 8001730:	40020058 	.word	0x40020058
 8001734:	40020070 	.word	0x40020070
 8001738:	40020088 	.word	0x40020088
 800173c:	400200a0 	.word	0x400200a0
 8001740:	400200b8 	.word	0x400200b8
 8001744:	40020410 	.word	0x40020410
 8001748:	40020428 	.word	0x40020428
 800174c:	40020440 	.word	0x40020440
 8001750:	40020458 	.word	0x40020458
 8001754:	40020470 	.word	0x40020470
 8001758:	40020488 	.word	0x40020488
 800175c:	400204a0 	.word	0x400204a0
 8001760:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1c8      	bne.n	8001704 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4b83      	ldr	r3, [pc, #524]	; (800198c <HAL_DMA_Init+0x420>)
 800177e:	4013      	ands	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800178a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4313      	orrs	r3, r2
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017c8:	4b71      	ldr	r3, [pc, #452]	; (8001990 <HAL_DMA_Init+0x424>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_DMA_Init+0x428>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017d4:	d328      	bcc.n	8001828 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b28      	cmp	r3, #40	; 0x28
 80017dc:	d903      	bls.n	80017e6 <HAL_DMA_Init+0x27a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b2e      	cmp	r3, #46	; 0x2e
 80017e4:	d917      	bls.n	8001816 <HAL_DMA_Init+0x2aa>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b3e      	cmp	r3, #62	; 0x3e
 80017ec:	d903      	bls.n	80017f6 <HAL_DMA_Init+0x28a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b42      	cmp	r3, #66	; 0x42
 80017f4:	d90f      	bls.n	8001816 <HAL_DMA_Init+0x2aa>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b46      	cmp	r3, #70	; 0x46
 80017fc:	d903      	bls.n	8001806 <HAL_DMA_Init+0x29a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b48      	cmp	r3, #72	; 0x48
 8001804:	d907      	bls.n	8001816 <HAL_DMA_Init+0x2aa>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b4e      	cmp	r3, #78	; 0x4e
 800180c:	d905      	bls.n	800181a <HAL_DMA_Init+0x2ae>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b52      	cmp	r3, #82	; 0x52
 8001814:	d801      	bhi.n	800181a <HAL_DMA_Init+0x2ae>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_DMA_Init+0x2b0>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001826:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f023 0307 	bic.w	r3, r3, #7
 800183e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4313      	orrs	r3, r2
 8001848:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	2b04      	cmp	r3, #4
 8001850:	d117      	bne.n	8001882 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00e      	beq.n	8001882 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f001 f9b9 	bl	8002bdc <DMA_CheckFifoParam>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e197      	b.n	8001bb2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f001 f8f4 	bl	8002a78 <DMA_CalcBaseAndBitshift>
 8001890:	4603      	mov	r3, r0
 8001892:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	223f      	movs	r2, #63	; 0x3f
 800189e:	409a      	lsls	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e0cd      	b.n	8001a42 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_DMA_Init+0x42c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <HAL_DMA_Init+0x430>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01d      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a38      	ldr	r2, [pc, #224]	; (80019a0 <HAL_DMA_Init+0x434>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d018      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a36      	ldr	r2, [pc, #216]	; (80019a4 <HAL_DMA_Init+0x438>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <HAL_DMA_Init+0x43c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d00e      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <HAL_DMA_Init+0x440>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d009      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a32      	ldr	r2, [pc, #200]	; (80019b0 <HAL_DMA_Init+0x444>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d004      	beq.n	80018f6 <HAL_DMA_Init+0x38a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <HAL_DMA_Init+0x448>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Init+0x38e>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_DMA_Init+0x390>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8097 	beq.w	8001a30 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_DMA_Init+0x42c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d021      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_DMA_Init+0x430>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01c      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <HAL_DMA_Init+0x434>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d017      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_DMA_Init+0x438>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d012      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <HAL_DMA_Init+0x43c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_DMA_Init+0x440>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d008      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_DMA_Init+0x444>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_DMA_Init+0x3e4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_DMA_Init+0x448>)
 800194e:	4293      	cmp	r3, r2
 8001950:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_DMA_Init+0x44c>)
 800196e:	4013      	ands	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d020      	beq.n	80019bc <HAL_DMA_Init+0x450>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b80      	cmp	r3, #128	; 0x80
 8001980:	d102      	bne.n	8001988 <HAL_DMA_Init+0x41c>
 8001982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001986:	e01a      	b.n	80019be <HAL_DMA_Init+0x452>
 8001988:	2300      	movs	r3, #0
 800198a:	e018      	b.n	80019be <HAL_DMA_Init+0x452>
 800198c:	fe10803f 	.word	0xfe10803f
 8001990:	5c001000 	.word	0x5c001000
 8001994:	ffff0000 	.word	0xffff0000
 8001998:	58025408 	.word	0x58025408
 800199c:	5802541c 	.word	0x5802541c
 80019a0:	58025430 	.word	0x58025430
 80019a4:	58025444 	.word	0x58025444
 80019a8:	58025458 	.word	0x58025458
 80019ac:	5802546c 	.word	0x5802546c
 80019b0:	58025480 	.word	0x58025480
 80019b4:	58025494 	.word	0x58025494
 80019b8:	fffe000f 	.word	0xfffe000f
 80019bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <HAL_DMA_Init+0x650>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_DMA_Init+0x654>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	009a      	lsls	r2, r3, #2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f001 f82f 	bl	8002a78 <DMA_CalcBaseAndBitshift>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2201      	movs	r2, #1
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e008      	b.n	8001a42 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0b7      	b.n	8001bb2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_DMA_Init+0x658>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d072      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5d      	ldr	r2, [pc, #372]	; (8001bc8 <HAL_DMA_Init+0x65c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d06d      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5c      	ldr	r2, [pc, #368]	; (8001bcc <HAL_DMA_Init+0x660>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d068      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_DMA_Init+0x664>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d063      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <HAL_DMA_Init+0x668>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d05e      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_DMA_Init+0x66c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d059      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_DMA_Init+0x670>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d054      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_DMA_Init+0x674>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d04f      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a53      	ldr	r2, [pc, #332]	; (8001be4 <HAL_DMA_Init+0x678>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_DMA_Init+0x67c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_DMA_Init+0x680>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_DMA_Init+0x684>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <HAL_DMA_Init+0x688>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_DMA_Init+0x68c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_DMA_Init+0x690>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_DMA_Init+0x694>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_DMA_Init+0x698>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a45      	ldr	r2, [pc, #276]	; (8001c08 <HAL_DMA_Init+0x69c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a44      	ldr	r2, [pc, #272]	; (8001c0c <HAL_DMA_Init+0x6a0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a42      	ldr	r2, [pc, #264]	; (8001c10 <HAL_DMA_Init+0x6a4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a41      	ldr	r2, [pc, #260]	; (8001c14 <HAL_DMA_Init+0x6a8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a3f      	ldr	r2, [pc, #252]	; (8001c18 <HAL_DMA_Init+0x6ac>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a3e      	ldr	r2, [pc, #248]	; (8001c1c <HAL_DMA_Init+0x6b0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Init+0x5c6>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a3c      	ldr	r2, [pc, #240]	; (8001c20 <HAL_DMA_Init+0x6b4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Init+0x5ca>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_Init+0x5cc>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d032      	beq.n	8001ba2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f001 f8c9 	bl	8002cd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b80      	cmp	r3, #128	; 0x80
 8001b48:	d102      	bne.n	8001b50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d010      	beq.n	8001b90 <HAL_DMA_Init+0x624>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d80c      	bhi.n	8001b90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f001 f946 	bl	8002e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	e008      	b.n	8001ba2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	a7fdabf8 	.word	0xa7fdabf8
 8001bc0:	cccccccd 	.word	0xcccccccd
 8001bc4:	40020010 	.word	0x40020010
 8001bc8:	40020028 	.word	0x40020028
 8001bcc:	40020040 	.word	0x40020040
 8001bd0:	40020058 	.word	0x40020058
 8001bd4:	40020070 	.word	0x40020070
 8001bd8:	40020088 	.word	0x40020088
 8001bdc:	400200a0 	.word	0x400200a0
 8001be0:	400200b8 	.word	0x400200b8
 8001be4:	40020410 	.word	0x40020410
 8001be8:	40020428 	.word	0x40020428
 8001bec:	40020440 	.word	0x40020440
 8001bf0:	40020458 	.word	0x40020458
 8001bf4:	40020470 	.word	0x40020470
 8001bf8:	40020488 	.word	0x40020488
 8001bfc:	400204a0 	.word	0x400204a0
 8001c00:	400204b8 	.word	0x400204b8
 8001c04:	58025408 	.word	0x58025408
 8001c08:	5802541c 	.word	0x5802541c
 8001c0c:	58025430 	.word	0x58025430
 8001c10:	58025444 	.word	0x58025444
 8001c14:	58025458 	.word	0x58025458
 8001c18:	5802546c 	.word	0x5802546c
 8001c1c:	58025480 	.word	0x58025480
 8001c20:	58025494 	.word	0x58025494

08001c24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c30:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_DMA_IRQHandler+0x1ac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a67      	ldr	r2, [pc, #412]	; (8001dd4 <HAL_DMA_IRQHandler+0x1b0>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5f      	ldr	r2, [pc, #380]	; (8001dd8 <HAL_DMA_IRQHandler+0x1b4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04a      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_DMA_IRQHandler+0x1b8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d045      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_DMA_IRQHandler+0x1bc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d040      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5a      	ldr	r2, [pc, #360]	; (8001de4 <HAL_DMA_IRQHandler+0x1c0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d03b      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a59      	ldr	r2, [pc, #356]	; (8001de8 <HAL_DMA_IRQHandler+0x1c4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d036      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_DMA_IRQHandler+0x1c8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d031      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a56      	ldr	r2, [pc, #344]	; (8001df0 <HAL_DMA_IRQHandler+0x1cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d02c      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a54      	ldr	r2, [pc, #336]	; (8001df4 <HAL_DMA_IRQHandler+0x1d0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d027      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <HAL_DMA_IRQHandler+0x1d4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d022      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_DMA_IRQHandler+0x1d8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01d      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_DMA_IRQHandler+0x1dc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d018      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4e      	ldr	r2, [pc, #312]	; (8001e04 <HAL_DMA_IRQHandler+0x1e0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4d      	ldr	r2, [pc, #308]	; (8001e08 <HAL_DMA_IRQHandler+0x1e4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_DMA_IRQHandler+0x1e8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d009      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <HAL_DMA_IRQHandler+0x1ec>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d004      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a48      	ldr	r2, [pc, #288]	; (8001e14 <HAL_DMA_IRQHandler+0x1f0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_DMA_IRQHandler+0xd6>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_DMA_IRQHandler+0xd8>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 842b 	beq.w	8002558 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a2 	beq.w	8001e5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <HAL_DMA_IRQHandler+0x1b4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d04a      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <HAL_DMA_IRQHandler+0x1b8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d045      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_DMA_IRQHandler+0x1bc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d040      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <HAL_DMA_IRQHandler+0x1c0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d03b      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_DMA_IRQHandler+0x1c4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d036      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_DMA_IRQHandler+0x1c8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d031      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_DMA_IRQHandler+0x1cc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d02c      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_DMA_IRQHandler+0x1d0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d027      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_DMA_IRQHandler+0x1d4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d022      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_DMA_IRQHandler+0x1d8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d01d      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_DMA_IRQHandler+0x1dc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d018      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_DMA_IRQHandler+0x1e0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_DMA_IRQHandler+0x1e4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00e      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_DMA_IRQHandler+0x1e8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_DMA_IRQHandler+0x1ec>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d004      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x194>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <HAL_DMA_IRQHandler+0x1f0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d12f      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x1f4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	e02e      	b.n	8001e2c <HAL_DMA_IRQHandler+0x208>
 8001dce:	bf00      	nop
 8001dd0:	24000000 	.word	0x24000000
 8001dd4:	1b4e81b5 	.word	0x1b4e81b5
 8001dd8:	40020010 	.word	0x40020010
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	40020040 	.word	0x40020040
 8001de4:	40020058 	.word	0x40020058
 8001de8:	40020070 	.word	0x40020070
 8001dec:	40020088 	.word	0x40020088
 8001df0:	400200a0 	.word	0x400200a0
 8001df4:	400200b8 	.word	0x400200b8
 8001df8:	40020410 	.word	0x40020410
 8001dfc:	40020428 	.word	0x40020428
 8001e00:	40020440 	.word	0x40020440
 8001e04:	40020458 	.word	0x40020458
 8001e08:	40020470 	.word	0x40020470
 8001e0c:	40020488 	.word	0x40020488
 8001e10:	400204a0 	.word	0x400204a0
 8001e14:	400204b8 	.word	0x400204b8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf14      	ite	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	2300      	moveq	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2208      	movs	r2, #8
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06e      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a69      	ldr	r2, [pc, #420]	; (800201c <HAL_DMA_IRQHandler+0x3f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04a      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a67      	ldr	r2, [pc, #412]	; (8002020 <HAL_DMA_IRQHandler+0x3fc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d045      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_DMA_IRQHandler+0x400>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d040      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a64      	ldr	r2, [pc, #400]	; (8002028 <HAL_DMA_IRQHandler+0x404>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d03b      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_DMA_IRQHandler+0x408>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a61      	ldr	r2, [pc, #388]	; (8002030 <HAL_DMA_IRQHandler+0x40c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a60      	ldr	r2, [pc, #384]	; (8002034 <HAL_DMA_IRQHandler+0x410>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d02c      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <HAL_DMA_IRQHandler+0x414>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d027      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_DMA_IRQHandler+0x418>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_DMA_IRQHandler+0x41c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <HAL_DMA_IRQHandler+0x420>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d018      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_DMA_IRQHandler+0x424>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_DMA_IRQHandler+0x428>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_DMA_IRQHandler+0x42c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a54      	ldr	r2, [pc, #336]	; (8002054 <HAL_DMA_IRQHandler+0x430>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2ee>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_DMA_IRQHandler+0x434>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10a      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x304>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e003      	b.n	8001f30 <HAL_DMA_IRQHandler+0x30c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2204      	movs	r2, #4
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 808f 	beq.w	8002084 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <HAL_DMA_IRQHandler+0x3f8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04a      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <HAL_DMA_IRQHandler+0x3fc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a29      	ldr	r2, [pc, #164]	; (8002024 <HAL_DMA_IRQHandler+0x400>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d040      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_DMA_IRQHandler+0x404>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03b      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_DMA_IRQHandler+0x408>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a24      	ldr	r2, [pc, #144]	; (8002030 <HAL_DMA_IRQHandler+0x40c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_DMA_IRQHandler+0x410>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_DMA_IRQHandler+0x414>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_DMA_IRQHandler+0x418>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_DMA_IRQHandler+0x41c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_DMA_IRQHandler+0x420>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_DMA_IRQHandler+0x424>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_DMA_IRQHandler+0x428>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_DMA_IRQHandler+0x42c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_DMA_IRQHandler+0x430>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_IRQHandler+0x3e2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_DMA_IRQHandler+0x434>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12a      	bne.n	800205c <HAL_DMA_IRQHandler+0x438>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e023      	b.n	8002064 <HAL_DMA_IRQHandler+0x440>
 800201c:	40020010 	.word	0x40020010
 8002020:	40020028 	.word	0x40020028
 8002024:	40020040 	.word	0x40020040
 8002028:	40020058 	.word	0x40020058
 800202c:	40020070 	.word	0x40020070
 8002030:	40020088 	.word	0x40020088
 8002034:	400200a0 	.word	0x400200a0
 8002038:	400200b8 	.word	0x400200b8
 800203c:	40020410 	.word	0x40020410
 8002040:	40020428 	.word	0x40020428
 8002044:	40020440 	.word	0x40020440
 8002048:	40020458 	.word	0x40020458
 800204c:	40020470 	.word	0x40020470
 8002050:	40020488 	.word	0x40020488
 8002054:	400204a0 	.word	0x400204a0
 8002058:	400204b8 	.word	0x400204b8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2210      	movs	r2, #16
 800208e:	409a      	lsls	r2, r3
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a6 	beq.w	80021e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a85      	ldr	r2, [pc, #532]	; (80022b4 <HAL_DMA_IRQHandler+0x690>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04a      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a83      	ldr	r2, [pc, #524]	; (80022b8 <HAL_DMA_IRQHandler+0x694>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d045      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a82      	ldr	r2, [pc, #520]	; (80022bc <HAL_DMA_IRQHandler+0x698>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d040      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a80      	ldr	r2, [pc, #512]	; (80022c0 <HAL_DMA_IRQHandler+0x69c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d03b      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7f      	ldr	r2, [pc, #508]	; (80022c4 <HAL_DMA_IRQHandler+0x6a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d036      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7d      	ldr	r2, [pc, #500]	; (80022c8 <HAL_DMA_IRQHandler+0x6a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d031      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7c      	ldr	r2, [pc, #496]	; (80022cc <HAL_DMA_IRQHandler+0x6a8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d02c      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <HAL_DMA_IRQHandler+0x6ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d027      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a79      	ldr	r2, [pc, #484]	; (80022d4 <HAL_DMA_IRQHandler+0x6b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a77      	ldr	r2, [pc, #476]	; (80022d8 <HAL_DMA_IRQHandler+0x6b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a76      	ldr	r2, [pc, #472]	; (80022dc <HAL_DMA_IRQHandler+0x6b8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d018      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a74      	ldr	r2, [pc, #464]	; (80022e0 <HAL_DMA_IRQHandler+0x6bc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_DMA_IRQHandler+0x6c0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00e      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a70      	ldr	r2, [pc, #448]	; (80022ec <HAL_DMA_IRQHandler+0x6c8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_DMA_IRQHandler+0x516>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6e      	ldr	r2, [pc, #440]	; (80022f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10a      	bne.n	8002150 <HAL_DMA_IRQHandler+0x52c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e009      	b.n	8002164 <HAL_DMA_IRQHandler+0x540>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03e      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2210      	movs	r2, #16
 8002172:	409a      	lsls	r2, r3
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d018      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d024      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e01f      	b.n	80021e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e016      	b.n	80021e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0208 	bic.w	r2, r2, #8
 80021d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2220      	movs	r2, #32
 80021f0:	409a      	lsls	r2, r3
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8110 	beq.w	800241c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <HAL_DMA_IRQHandler+0x690>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04a      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_DMA_IRQHandler+0x694>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d045      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a29      	ldr	r2, [pc, #164]	; (80022bc <HAL_DMA_IRQHandler+0x698>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d040      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_DMA_IRQHandler+0x69c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d03b      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_DMA_IRQHandler+0x6a0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d036      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_DMA_IRQHandler+0x6a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d031      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a23      	ldr	r2, [pc, #140]	; (80022cc <HAL_DMA_IRQHandler+0x6a8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02c      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_DMA_IRQHandler+0x6ac>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d027      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_DMA_IRQHandler+0x6b0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d022      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_DMA_IRQHandler+0x6b4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01d      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_DMA_IRQHandler+0x6b8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d018      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_DMA_IRQHandler+0x6bc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <HAL_DMA_IRQHandler+0x6c0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00e      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_DMA_IRQHandler+0x6c8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_DMA_IRQHandler+0x678>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d12b      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x6d0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf14      	ite	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	2300      	moveq	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e02a      	b.n	8002308 <HAL_DMA_IRQHandler+0x6e4>
 80022b2:	bf00      	nop
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8087 	beq.w	800241c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2220      	movs	r2, #32
 8002318:	409a      	lsls	r2, r3
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b04      	cmp	r3, #4
 8002328:	d139      	bne.n	800239e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0216 	bic.w	r2, r2, #22
 8002338:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002348:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_DMA_IRQHandler+0x736>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0208 	bic.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	223f      	movs	r2, #63	; 0x3f
 8002374:	409a      	lsls	r2, r3
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 834a 	beq.w	8002a28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
          }
          return;
 800239c:	e344      	b.n	8002a28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d018      	beq.n	80023de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d02c      	beq.n	800241c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
 80023ca:	e027      	b.n	800241c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e01e      	b.n	800241c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10f      	bne.n	800240c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0210 	bic.w	r2, r2, #16
 80023fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8306 	beq.w	8002a32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8088 	beq.w	8002544 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_DMA_IRQHandler+0xa08>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d04a      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a79      	ldr	r2, [pc, #484]	; (8002630 <HAL_DMA_IRQHandler+0xa0c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d045      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a77      	ldr	r2, [pc, #476]	; (8002634 <HAL_DMA_IRQHandler+0xa10>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d040      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a76      	ldr	r2, [pc, #472]	; (8002638 <HAL_DMA_IRQHandler+0xa14>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d03b      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a74      	ldr	r2, [pc, #464]	; (800263c <HAL_DMA_IRQHandler+0xa18>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d036      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a73      	ldr	r2, [pc, #460]	; (8002640 <HAL_DMA_IRQHandler+0xa1c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d031      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a71      	ldr	r2, [pc, #452]	; (8002644 <HAL_DMA_IRQHandler+0xa20>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02c      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a70      	ldr	r2, [pc, #448]	; (8002648 <HAL_DMA_IRQHandler+0xa24>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d027      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6e      	ldr	r2, [pc, #440]	; (800264c <HAL_DMA_IRQHandler+0xa28>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d022      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6d      	ldr	r2, [pc, #436]	; (8002650 <HAL_DMA_IRQHandler+0xa2c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d01d      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6b      	ldr	r2, [pc, #428]	; (8002654 <HAL_DMA_IRQHandler+0xa30>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d018      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_DMA_IRQHandler+0xa34>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_DMA_IRQHandler+0xa38>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00e      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a67      	ldr	r2, [pc, #412]	; (8002660 <HAL_DMA_IRQHandler+0xa3c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_DMA_IRQHandler+0xa40>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_IRQHandler+0x8b8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a64      	ldr	r2, [pc, #400]	; (8002668 <HAL_DMA_IRQHandler+0xa44>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d108      	bne.n	80024ee <HAL_DMA_IRQHandler+0x8ca>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e007      	b.n	80024fe <HAL_DMA_IRQHandler+0x8da>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3301      	adds	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	429a      	cmp	r2, r3
 8002508:	d307      	bcc.n	800251a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f2      	bne.n	80024fe <HAL_DMA_IRQHandler+0x8da>
 8002518:	e000      	b.n	800251c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800251a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2203      	movs	r2, #3
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002532:	e003      	b.n	800253c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8272 	beq.w	8002a32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
 8002556:	e26c      	b.n	8002a32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a43      	ldr	r2, [pc, #268]	; (800266c <HAL_DMA_IRQHandler+0xa48>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_DMA_IRQHandler+0xa4c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a40      	ldr	r2, [pc, #256]	; (8002674 <HAL_DMA_IRQHandler+0xa50>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3f      	ldr	r2, [pc, #252]	; (8002678 <HAL_DMA_IRQHandler+0xa54>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3d      	ldr	r2, [pc, #244]	; (800267c <HAL_DMA_IRQHandler+0xa58>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <HAL_DMA_IRQHandler+0xa5c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3a      	ldr	r2, [pc, #232]	; (8002684 <HAL_DMA_IRQHandler+0xa60>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x984>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a39      	ldr	r2, [pc, #228]	; (8002688 <HAL_DMA_IRQHandler+0xa64>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_DMA_IRQHandler+0x988>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_DMA_IRQHandler+0x98a>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 823f 	beq.w	8002a32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2204      	movs	r2, #4
 80025c6:	409a      	lsls	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80cd 	beq.w	800276c <HAL_DMA_IRQHandler+0xb48>
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80c7 	beq.w	800276c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2204      	movs	r2, #4
 80025e8:	409a      	lsls	r2, r3
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d049      	beq.n	800268c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8210 	beq.w	8002a2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002614:	e20a      	b.n	8002a2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8206 	beq.w	8002a2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002628:	e200      	b.n	8002a2c <HAL_DMA_IRQHandler+0xe08>
 800262a:	bf00      	nop
 800262c:	40020010 	.word	0x40020010
 8002630:	40020028 	.word	0x40020028
 8002634:	40020040 	.word	0x40020040
 8002638:	40020058 	.word	0x40020058
 800263c:	40020070 	.word	0x40020070
 8002640:	40020088 	.word	0x40020088
 8002644:	400200a0 	.word	0x400200a0
 8002648:	400200b8 	.word	0x400200b8
 800264c:	40020410 	.word	0x40020410
 8002650:	40020428 	.word	0x40020428
 8002654:	40020440 	.word	0x40020440
 8002658:	40020458 	.word	0x40020458
 800265c:	40020470 	.word	0x40020470
 8002660:	40020488 	.word	0x40020488
 8002664:	400204a0 	.word	0x400204a0
 8002668:	400204b8 	.word	0x400204b8
 800266c:	58025408 	.word	0x58025408
 8002670:	5802541c 	.word	0x5802541c
 8002674:	58025430 	.word	0x58025430
 8002678:	58025444 	.word	0x58025444
 800267c:	58025458 	.word	0x58025458
 8002680:	5802546c 	.word	0x5802546c
 8002684:	58025480 	.word	0x58025480
 8002688:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d160      	bne.n	8002758 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7f      	ldr	r2, [pc, #508]	; (8002898 <HAL_DMA_IRQHandler+0xc74>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04a      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7d      	ldr	r2, [pc, #500]	; (800289c <HAL_DMA_IRQHandler+0xc78>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d045      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_DMA_IRQHandler+0xc7c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d040      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_DMA_IRQHandler+0xc80>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d03b      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a79      	ldr	r2, [pc, #484]	; (80028a8 <HAL_DMA_IRQHandler+0xc84>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d036      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a77      	ldr	r2, [pc, #476]	; (80028ac <HAL_DMA_IRQHandler+0xc88>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d031      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a76      	ldr	r2, [pc, #472]	; (80028b0 <HAL_DMA_IRQHandler+0xc8c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d02c      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a74      	ldr	r2, [pc, #464]	; (80028b4 <HAL_DMA_IRQHandler+0xc90>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d027      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a73      	ldr	r2, [pc, #460]	; (80028b8 <HAL_DMA_IRQHandler+0xc94>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a71      	ldr	r2, [pc, #452]	; (80028bc <HAL_DMA_IRQHandler+0xc98>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01d      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a70      	ldr	r2, [pc, #448]	; (80028c0 <HAL_DMA_IRQHandler+0xc9c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d018      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_DMA_IRQHandler+0xca0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6d      	ldr	r2, [pc, #436]	; (80028c8 <HAL_DMA_IRQHandler+0xca4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6b      	ldr	r2, [pc, #428]	; (80028cc <HAL_DMA_IRQHandler+0xca8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6a      	ldr	r2, [pc, #424]	; (80028d0 <HAL_DMA_IRQHandler+0xcac>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_DMA_IRQHandler+0xb12>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a68      	ldr	r2, [pc, #416]	; (80028d4 <HAL_DMA_IRQHandler+0xcb0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d108      	bne.n	8002748 <HAL_DMA_IRQHandler+0xb24>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0208 	bic.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e007      	b.n	8002758 <HAL_DMA_IRQHandler+0xb34>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0204 	bic.w	r2, r2, #4
 8002756:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8165 	beq.w	8002a2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800276a:	e15f      	b.n	8002a2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2202      	movs	r2, #2
 8002776:	409a      	lsls	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80c5 	beq.w	800290c <HAL_DMA_IRQHandler+0xce8>
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80bf 	beq.w	800290c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2202      	movs	r2, #2
 8002798:	409a      	lsls	r2, r3
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d018      	beq.n	80027da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 813a 	beq.w	8002a30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027c4:	e134      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8130 	beq.w	8002a30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027d8:	e12a      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 8089 	bne.w	80028f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <HAL_DMA_IRQHandler+0xc74>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d04a      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_DMA_IRQHandler+0xc78>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d045      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <HAL_DMA_IRQHandler+0xc7c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d040      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_DMA_IRQHandler+0xc80>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d03b      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_DMA_IRQHandler+0xc84>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d036      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_DMA_IRQHandler+0xc88>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d031      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_DMA_IRQHandler+0xc8c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d02c      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <HAL_DMA_IRQHandler+0xc90>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d027      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_DMA_IRQHandler+0xc94>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_DMA_IRQHandler+0xc98>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_DMA_IRQHandler+0xc9c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d018      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <HAL_DMA_IRQHandler+0xca0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_DMA_IRQHandler+0xca4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00e      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_DMA_IRQHandler+0xca8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_DMA_IRQHandler+0xcac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_IRQHandler+0xc62>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_DMA_IRQHandler+0xcb0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d128      	bne.n	80028d8 <HAL_DMA_IRQHandler+0xcb4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0214 	bic.w	r2, r2, #20
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e027      	b.n	80028e8 <HAL_DMA_IRQHandler+0xcc4>
 8002898:	40020010 	.word	0x40020010
 800289c:	40020028 	.word	0x40020028
 80028a0:	40020040 	.word	0x40020040
 80028a4:	40020058 	.word	0x40020058
 80028a8:	40020070 	.word	0x40020070
 80028ac:	40020088 	.word	0x40020088
 80028b0:	400200a0 	.word	0x400200a0
 80028b4:	400200b8 	.word	0x400200b8
 80028b8:	40020410 	.word	0x40020410
 80028bc:	40020428 	.word	0x40020428
 80028c0:	40020440 	.word	0x40020440
 80028c4:	40020458 	.word	0x40020458
 80028c8:	40020470 	.word	0x40020470
 80028cc:	40020488 	.word	0x40020488
 80028d0:	400204a0 	.word	0x400204a0
 80028d4:	400204b8 	.word	0x400204b8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 020a 	bic.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8097 	beq.w	8002a30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800290a:	e091      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2208      	movs	r2, #8
 8002916:	409a      	lsls	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8088 	beq.w	8002a32 <HAL_DMA_IRQHandler+0xe0e>
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8082 	beq.w	8002a32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <HAL_DMA_IRQHandler+0xe14>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04a      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <HAL_DMA_IRQHandler+0xe18>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d045      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3e      	ldr	r2, [pc, #248]	; (8002a40 <HAL_DMA_IRQHandler+0xe1c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d040      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <HAL_DMA_IRQHandler+0xe20>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d03b      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3b      	ldr	r2, [pc, #236]	; (8002a48 <HAL_DMA_IRQHandler+0xe24>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <HAL_DMA_IRQHandler+0xe28>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <HAL_DMA_IRQHandler+0xe2c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a36      	ldr	r2, [pc, #216]	; (8002a54 <HAL_DMA_IRQHandler+0xe30>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a35      	ldr	r2, [pc, #212]	; (8002a58 <HAL_DMA_IRQHandler+0xe34>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a33      	ldr	r2, [pc, #204]	; (8002a5c <HAL_DMA_IRQHandler+0xe38>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <HAL_DMA_IRQHandler+0xe3c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_DMA_IRQHandler+0xe40>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <HAL_DMA_IRQHandler+0xe44>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <HAL_DMA_IRQHandler+0xe48>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <HAL_DMA_IRQHandler+0xe4c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_IRQHandler+0xdaa>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_DMA_IRQHandler+0xe50>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <HAL_DMA_IRQHandler+0xdbc>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 021c 	bic.w	r2, r2, #28
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e007      	b.n	80029f0 <HAL_DMA_IRQHandler+0xdcc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 020e 	bic.w	r2, r2, #14
 80029ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2201      	movs	r2, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e004      	b.n	8002a32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002a28:	bf00      	nop
 8002a2a:	e002      	b.n	8002a32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	40020028 	.word	0x40020028
 8002a40:	40020040 	.word	0x40020040
 8002a44:	40020058 	.word	0x40020058
 8002a48:	40020070 	.word	0x40020070
 8002a4c:	40020088 	.word	0x40020088
 8002a50:	400200a0 	.word	0x400200a0
 8002a54:	400200b8 	.word	0x400200b8
 8002a58:	40020410 	.word	0x40020410
 8002a5c:	40020428 	.word	0x40020428
 8002a60:	40020440 	.word	0x40020440
 8002a64:	40020458 	.word	0x40020458
 8002a68:	40020470 	.word	0x40020470
 8002a6c:	40020488 	.word	0x40020488
 8002a70:	400204a0 	.word	0x400204a0
 8002a74:	400204b8 	.word	0x400204b8

08002a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <DMA_CalcBaseAndBitshift+0x118>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d04a      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <DMA_CalcBaseAndBitshift+0x11c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d045      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <DMA_CalcBaseAndBitshift+0x120>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d040      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3e      	ldr	r2, [pc, #248]	; (8002b9c <DMA_CalcBaseAndBitshift+0x124>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d03b      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <DMA_CalcBaseAndBitshift+0x128>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d036      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <DMA_CalcBaseAndBitshift+0x12c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d031      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x130>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02c      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a38      	ldr	r2, [pc, #224]	; (8002bac <DMA_CalcBaseAndBitshift+0x134>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d027      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a36      	ldr	r2, [pc, #216]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x138>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d022      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d01d      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a33      	ldr	r2, [pc, #204]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x140>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d018      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <DMA_CalcBaseAndBitshift+0x144>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a30      	ldr	r2, [pc, #192]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x148>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2d      	ldr	r2, [pc, #180]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x150>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <DMA_CalcBaseAndBitshift+0x154>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <DMA_CalcBaseAndBitshift+0xac>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <DMA_CalcBaseAndBitshift+0xae>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3b10      	subs	r3, #16
 8002b32:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x158>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x15c>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d908      	bls.n	8002b64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x160>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58
 8002b62:	e00d      	b.n	8002b80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x160>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
 8002b72:	e005      	b.n	8002b80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40020010 	.word	0x40020010
 8002b94:	40020028 	.word	0x40020028
 8002b98:	40020040 	.word	0x40020040
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	40020070 	.word	0x40020070
 8002ba4:	40020088 	.word	0x40020088
 8002ba8:	400200a0 	.word	0x400200a0
 8002bac:	400200b8 	.word	0x400200b8
 8002bb0:	40020410 	.word	0x40020410
 8002bb4:	40020428 	.word	0x40020428
 8002bb8:	40020440 	.word	0x40020440
 8002bbc:	40020458 	.word	0x40020458
 8002bc0:	40020470 	.word	0x40020470
 8002bc4:	40020488 	.word	0x40020488
 8002bc8:	400204a0 	.word	0x400204a0
 8002bcc:	400204b8 	.word	0x400204b8
 8002bd0:	aaaaaaab 	.word	0xaaaaaaab
 8002bd4:	08007e4c 	.word	0x08007e4c
 8002bd8:	fffffc00 	.word	0xfffffc00

08002bdc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d120      	bne.n	8002c32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d858      	bhi.n	8002caa <DMA_CheckFifoParam+0xce>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x24>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c23 	.word	0x08002c23
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002cab 	.word	0x08002cab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d048      	beq.n	8002cae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c20:	e045      	b.n	8002cae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c2a:	d142      	bne.n	8002cb2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c30:	e03f      	b.n	8002cb2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d123      	bne.n	8002c84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d838      	bhi.n	8002cb6 <DMA_CheckFifoParam+0xda>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <DMA_CheckFifoParam+0x70>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c63 	.word	0x08002c63
 8002c54:	08002c5d 	.word	0x08002c5d
 8002c58:	08002c75 	.word	0x08002c75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002c60:	e030      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d025      	beq.n	8002cba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c72:	e022      	b.n	8002cba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c7c:	d11f      	bne.n	8002cbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c82:	e01c      	b.n	8002cbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d902      	bls.n	8002c92 <DMA_CheckFifoParam+0xb6>
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d003      	beq.n	8002c98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002c90:	e018      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
        break;
 8002c96:	e015      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8002ca8:	e00b      	b.n	8002cc2 <DMA_CheckFifoParam+0xe6>
        break;
 8002caa:	bf00      	nop
 8002cac:	e00a      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        break;
 8002cae:	bf00      	nop
 8002cb0:	e008      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        break;
 8002cb2:	bf00      	nop
 8002cb4:	e006      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        break;
 8002cb6:	bf00      	nop
 8002cb8:	e004      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        break;
 8002cba:	bf00      	nop
 8002cbc:	e002      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <DMA_CheckFifoParam+0xe8>
    break;
 8002cc2:	bf00      	nop
    }
  }

  return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop

08002cd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a36      	ldr	r2, [pc, #216]	; (8002dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01d      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d018      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01a      	beq.n	8002d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	3b08      	subs	r3, #8
 8002d44:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4b26      	ldr	r3, [pc, #152]	; (8002dec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002d60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002d70:	e024      	b.n	8002dbc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3b10      	subs	r3, #16
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d806      	bhi.n	8002d9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d902      	bls.n	8002d9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3308      	adds	r3, #8
 8002d98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002dac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2201      	movs	r2, #1
 8002db6:	409a      	lsls	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	58025408 	.word	0x58025408
 8002dcc:	5802541c 	.word	0x5802541c
 8002dd0:	58025430 	.word	0x58025430
 8002dd4:	58025444 	.word	0x58025444
 8002dd8:	58025458 	.word	0x58025458
 8002ddc:	5802546c 	.word	0x5802546c
 8002de0:	58025480 	.word	0x58025480
 8002de4:	58025494 	.word	0x58025494
 8002de8:	cccccccd 	.word	0xcccccccd
 8002dec:	16009600 	.word	0x16009600
 8002df0:	58025880 	.word	0x58025880
 8002df4:	aaaaaaab 	.word	0xaaaaaaab
 8002df8:	400204b8 	.word	0x400204b8
 8002dfc:	4002040f 	.word	0x4002040f
 8002e00:	10008200 	.word	0x10008200
 8002e04:	40020880 	.word	0x40020880

08002e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04a      	beq.n	8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d847      	bhi.n	8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d022      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d01d      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d018      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00e      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002e90:	671a      	str	r2, [r3, #112]	; 0x70
 8002e92:	e009      	b.n	8002ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a11      	ldr	r2, [pc, #68]	; (8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002ea6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	58025408 	.word	0x58025408
 8002ec4:	5802541c 	.word	0x5802541c
 8002ec8:	58025430 	.word	0x58025430
 8002ecc:	58025444 	.word	0x58025444
 8002ed0:	58025458 	.word	0x58025458
 8002ed4:	5802546c 	.word	0x5802546c
 8002ed8:	58025480 	.word	0x58025480
 8002edc:	58025494 	.word	0x58025494
 8002ee0:	1600963f 	.word	0x1600963f
 8002ee4:	58025940 	.word	0x58025940
 8002ee8:	1000823f 	.word	0x1000823f
 8002eec:	40020940 	.word	0x40020940

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002efe:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_GPIO_Init+0x234>)
 8002f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f02:	e194      	b.n	800322e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8186 	beq.w	8003228 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d005      	beq.n	8002f34 <HAL_GPIO_Init+0x44>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d130      	bne.n	8002f96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0201 	and.w	r2, r3, #1
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d017      	beq.n	8002fd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d123      	bne.n	8003026 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	08da      	lsrs	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3208      	adds	r2, #8
 8002fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	69b9      	ldr	r1, [r7, #24]
 8003022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0203 	and.w	r2, r3, #3
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80e0 	beq.w	8003228 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_GPIO_Init+0x238>)
 800306a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800306e:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <HAL_GPIO_Init+0x238>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_GPIO_Init+0x238>)
 800307a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003086:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_GPIO_Init+0x23c>)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <HAL_GPIO_Init+0x240>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d052      	beq.n	8003158 <HAL_GPIO_Init+0x268>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_GPIO_Init+0x244>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_GPIO_Init+0x22e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_GPIO_Init+0x248>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x22a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_GPIO_Init+0x24c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_GPIO_Init+0x250>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_GPIO_Init+0x254>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_GPIO_Init+0x258>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_GPIO_Init+0x25c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_GPIO_Init+0x260>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_GPIO_Init+0x264>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x20e>
 80030fa:	2309      	movs	r3, #9
 80030fc:	e02d      	b.n	800315a <HAL_GPIO_Init+0x26a>
 80030fe:	230a      	movs	r3, #10
 8003100:	e02b      	b.n	800315a <HAL_GPIO_Init+0x26a>
 8003102:	2308      	movs	r3, #8
 8003104:	e029      	b.n	800315a <HAL_GPIO_Init+0x26a>
 8003106:	2307      	movs	r3, #7
 8003108:	e027      	b.n	800315a <HAL_GPIO_Init+0x26a>
 800310a:	2306      	movs	r3, #6
 800310c:	e025      	b.n	800315a <HAL_GPIO_Init+0x26a>
 800310e:	2305      	movs	r3, #5
 8003110:	e023      	b.n	800315a <HAL_GPIO_Init+0x26a>
 8003112:	2304      	movs	r3, #4
 8003114:	e021      	b.n	800315a <HAL_GPIO_Init+0x26a>
 8003116:	2303      	movs	r3, #3
 8003118:	e01f      	b.n	800315a <HAL_GPIO_Init+0x26a>
 800311a:	2302      	movs	r3, #2
 800311c:	e01d      	b.n	800315a <HAL_GPIO_Init+0x26a>
 800311e:	2301      	movs	r3, #1
 8003120:	e01b      	b.n	800315a <HAL_GPIO_Init+0x26a>
 8003122:	bf00      	nop
 8003124:	58000080 	.word	0x58000080
 8003128:	58024400 	.word	0x58024400
 800312c:	58000400 	.word	0x58000400
 8003130:	58020000 	.word	0x58020000
 8003134:	58020400 	.word	0x58020400
 8003138:	58020800 	.word	0x58020800
 800313c:	58020c00 	.word	0x58020c00
 8003140:	58021000 	.word	0x58021000
 8003144:	58021400 	.word	0x58021400
 8003148:	58021800 	.word	0x58021800
 800314c:	58021c00 	.word	0x58021c00
 8003150:	58022000 	.word	0x58022000
 8003154:	58022400 	.word	0x58022400
 8003158:	2300      	movs	r3, #0
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	f002 0203 	and.w	r2, r2, #3
 8003160:	0092      	lsls	r2, r2, #2
 8003162:	4093      	lsls	r3, r2
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316a:	4938      	ldr	r1, [pc, #224]	; (800324c <HAL_GPIO_Init+0x35c>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3301      	adds	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f ae63 	bne.w	8002f04 <HAL_GPIO_Init+0x14>
  }
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3724      	adds	r7, #36	; 0x24
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	58000400 	.word	0x58000400

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4013      	ands	r3, r2
 800329a:	041a      	lsls	r2, r3, #16
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	43d9      	mvns	r1, r3
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	400b      	ands	r3, r1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80032c0:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <HAL_HSEM_FastTake+0x2c>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3320      	adds	r3, #32
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_HSEM_FastTake+0x30>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	58026400 	.word	0x58026400
 80032e8:	80000300 	.word	0x80000300

080032ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032f6:	4906      	ldr	r1, [pc, #24]	; (8003310 <HAL_HSEM_Release+0x24>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	58026400 	.word	0x58026400

08003314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd fcd2 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003364:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003374:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	e006      	b.n	800339c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800339a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d104      	bne.n	80033ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_I2C_Init+0x11c>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69d9      	ldr	r1, [r3, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	02008000 	.word	0x02008000

08003434 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
  }
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	d138      	bne.n	80034f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003488:	2302      	movs	r3, #2
 800348a:	e032      	b.n	80034f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b20      	cmp	r3, #32
 8003512:	d139      	bne.n	8003588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800351e:	2302      	movs	r3, #2
 8003520:	e033      	b.n	800358a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2224      	movs	r2, #36	; 0x24
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d00a      	beq.n	80035c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d001      	beq.n	80035be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e040      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e03e      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80035ca:	491f      	ldr	r1, [pc, #124]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035d2:	f7fd fea3 	bl	800131c <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035d8:	e009      	b.n	80035ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035da:	f7fd fe9f 	bl	800131c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035e8:	d901      	bls.n	80035ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e028      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d1ee      	bne.n	80035da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b1e      	cmp	r3, #30
 8003600:	d008      	beq.n	8003614 <HAL_PWREx_ConfigSupply+0x7c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b2e      	cmp	r3, #46	; 0x2e
 8003606:	d005      	beq.n	8003614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b1d      	cmp	r3, #29
 800360c:	d002      	beq.n	8003614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b2d      	cmp	r3, #45	; 0x2d
 8003612:	d114      	bne.n	800363e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003614:	f7fd fe82 	bl	800131c <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800361a:	e009      	b.n	8003630 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800361c:	f7fd fe7e 	bl	800131c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800362a:	d901      	bls.n	8003630 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d1ee      	bne.n	800361c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	58024800 	.word	0x58024800

0800364c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f000 bc1d 	b.w	8003e9a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8087 	beq.w	800377c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366e:	4b99      	ldr	r3, [pc, #612]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003678:	4b96      	ldr	r3, [pc, #600]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	2b10      	cmp	r3, #16
 8003682:	d007      	beq.n	8003694 <HAL_RCC_OscConfig+0x48>
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	2b18      	cmp	r3, #24
 8003688:	d110      	bne.n	80036ac <HAL_RCC_OscConfig+0x60>
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d10b      	bne.n	80036ac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	4b8f      	ldr	r3, [pc, #572]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d06c      	beq.n	800377a <HAL_RCC_OscConfig+0x12e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d168      	bne.n	800377a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e3f6      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x78>
 80036b6:	4b87      	ldr	r3, [pc, #540]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a86      	ldr	r2, [pc, #536]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e02e      	b.n	8003722 <HAL_RCC_OscConfig+0xd6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10c      	bne.n	80036e6 <HAL_RCC_OscConfig+0x9a>
 80036cc:	4b81      	ldr	r3, [pc, #516]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a80      	ldr	r2, [pc, #512]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b7e      	ldr	r3, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7d      	ldr	r2, [pc, #500]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e01d      	b.n	8003722 <HAL_RCC_OscConfig+0xd6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0xbe>
 80036f0:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a77      	ldr	r2, [pc, #476]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a74      	ldr	r2, [pc, #464]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0xd6>
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a71      	ldr	r2, [pc, #452]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6e      	ldr	r2, [pc, #440]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800371c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d013      	beq.n	8003752 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fd fdf7 	bl	800131c <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003732:	f7fd fdf3 	bl	800131c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b64      	cmp	r3, #100	; 0x64
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e3aa      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003744:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0xe6>
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fd fde3 	bl	800131c <HAL_GetTick>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800375a:	f7fd fddf 	bl	800131c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b64      	cmp	r3, #100	; 0x64
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e396      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x10e>
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80cb 	beq.w	8003920 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378a:	4b52      	ldr	r3, [pc, #328]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003792:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_RCC_OscConfig+0x164>
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b18      	cmp	r3, #24
 80037a4:	d156      	bne.n	8003854 <HAL_RCC_OscConfig+0x208>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d151      	bne.n	8003854 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_OscConfig+0x17c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e368      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 0219 	bic.w	r2, r3, #25
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	493f      	ldr	r1, [pc, #252]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037da:	f7fd fd9f 	bl	800131c <HAL_GetTick>
 80037de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fd fd9b 	bl	800131c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e352      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	f7fd fd98 	bl	8001334 <HAL_GetREVID>
 8003804:	4603      	mov	r3, r0
 8003806:	f241 0203 	movw	r2, #4099	; 0x1003
 800380a:	4293      	cmp	r3, r2
 800380c:	d817      	bhi.n	800383e <HAL_RCC_OscConfig+0x1f2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d108      	bne.n	8003828 <HAL_RCC_OscConfig+0x1dc>
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800381e:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003826:	e07b      	b.n	8003920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	4927      	ldr	r1, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	e070      	b.n	8003920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	4921      	ldr	r1, [pc, #132]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003852:	e065      	b.n	8003920 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d048      	beq.n	80038ee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 0219 	bic.w	r2, r3, #25
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	491a      	ldr	r1, [pc, #104]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd fd55 	bl	800131c <HAL_GetTick>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003876:	f7fd fd51 	bl	800131c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e308      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003888:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003894:	f7fd fd4e 	bl	8001334 <HAL_GetREVID>
 8003898:	4603      	mov	r3, r0
 800389a:	f241 0203 	movw	r2, #4099	; 0x1003
 800389e:	4293      	cmp	r3, r2
 80038a0:	d81a      	bhi.n	80038d8 <HAL_RCC_OscConfig+0x28c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_OscConfig+0x270>
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038b2:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b8:	6053      	str	r3, [r2, #4]
 80038ba:	e031      	b.n	8003920 <HAL_RCC_OscConfig+0x2d4>
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	031b      	lsls	r3, r3, #12
 80038ca:	4902      	ldr	r1, [pc, #8]	; (80038d4 <HAL_RCC_OscConfig+0x288>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
 80038d0:	e026      	b.n	8003920 <HAL_RCC_OscConfig+0x2d4>
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
 80038d8:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	4997      	ldr	r1, [pc, #604]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	e018      	b.n	8003920 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b95      	ldr	r3, [pc, #596]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a94      	ldr	r2, [pc, #592]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd fd0f 	bl	800131c <HAL_GetTick>
 80038fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003902:	f7fd fd0b 	bl	800131c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e2c2      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003914:	4b8b      	ldr	r3, [pc, #556]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a9 	beq.w	8003a80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392e:	4b85      	ldr	r3, [pc, #532]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003938:	4b82      	ldr	r3, [pc, #520]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d007      	beq.n	8003954 <HAL_RCC_OscConfig+0x308>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b18      	cmp	r3, #24
 8003948:	d13a      	bne.n	80039c0 <HAL_RCC_OscConfig+0x374>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d135      	bne.n	80039c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003954:	4b7b      	ldr	r3, [pc, #492]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_OscConfig+0x320>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b80      	cmp	r3, #128	; 0x80
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e296      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800396c:	f7fd fce2 	bl	8001334 <HAL_GetREVID>
 8003970:	4603      	mov	r3, r0
 8003972:	f241 0203 	movw	r2, #4099	; 0x1003
 8003976:	4293      	cmp	r3, r2
 8003978:	d817      	bhi.n	80039aa <HAL_RCC_OscConfig+0x35e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	2b20      	cmp	r3, #32
 8003980:	d108      	bne.n	8003994 <HAL_RCC_OscConfig+0x348>
 8003982:	4b70      	ldr	r3, [pc, #448]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800398a:	4a6e      	ldr	r2, [pc, #440]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 800398c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003990:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003992:	e075      	b.n	8003a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003994:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	069b      	lsls	r3, r3, #26
 80039a2:	4968      	ldr	r1, [pc, #416]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a8:	e06a      	b.n	8003a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039aa:	4b66      	ldr	r3, [pc, #408]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	4962      	ldr	r1, [pc, #392]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039be:	e05f      	b.n	8003a80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d042      	beq.n	8003a4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039c8:	4b5e      	ldr	r3, [pc, #376]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fd fca2 	bl	800131c <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039dc:	f7fd fc9e 	bl	800131c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e255      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ee:	4b55      	ldr	r3, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039fa:	f7fd fc9b 	bl	8001334 <HAL_GetREVID>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d817      	bhi.n	8003a38 <HAL_RCC_OscConfig+0x3ec>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d108      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3d6>
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a1e:	6053      	str	r3, [r2, #4]
 8003a20:	e02e      	b.n	8003a80 <HAL_RCC_OscConfig+0x434>
 8003a22:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	069b      	lsls	r3, r3, #26
 8003a30:	4944      	ldr	r1, [pc, #272]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
 8003a36:	e023      	b.n	8003a80 <HAL_RCC_OscConfig+0x434>
 8003a38:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	493f      	ldr	r1, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60cb      	str	r3, [r1, #12]
 8003a4c:	e018      	b.n	8003a80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3c      	ldr	r2, [pc, #240]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fc5f 	bl	800131c <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a62:	f7fd fc5b 	bl	800131c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e212      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a74:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f0      	bne.n	8003a62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d036      	beq.n	8003afa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d019      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd fc3c 	bl	800131c <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7fd fc38 	bl	800131c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1ef      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x45c>
 8003ac6:	e018      	b.n	8003afa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fc22 	bl	800131c <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fd fc1e 	bl	800131c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e1d5      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d039      	beq.n	8003b7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b1a:	f7fd fbff 	bl	800131c <HAL_GetTick>
 8003b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b22:	f7fd fbfb 	bl	800131c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1b2      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_RCC_OscConfig+0x4f8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x4d6>
 8003b40:	e01b      	b.n	8003b7a <HAL_RCC_OscConfig+0x52e>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b48:	4b9b      	ldr	r3, [pc, #620]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a9a      	ldr	r2, [pc, #616]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b54:	f7fd fbe2 	bl	800131c <HAL_GetTick>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b5c:	f7fd fbde 	bl	800131c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e195      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b6e:	4b92      	ldr	r3, [pc, #584]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8081 	beq.w	8003c8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b88:	4b8c      	ldr	r3, [pc, #560]	; (8003dbc <HAL_RCC_OscConfig+0x770>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a8b      	ldr	r2, [pc, #556]	; (8003dbc <HAL_RCC_OscConfig+0x770>)
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b94:	f7fd fbc2 	bl	800131c <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b9c:	f7fd fbbe 	bl	800131c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e175      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bae:	4b83      	ldr	r3, [pc, #524]	; (8003dbc <HAL_RCC_OscConfig+0x770>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x584>
 8003bc2:	4b7d      	ldr	r3, [pc, #500]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a7c      	ldr	r2, [pc, #496]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bce:	e02d      	b.n	8003c2c <HAL_RCC_OscConfig+0x5e0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x5a6>
 8003bd8:	4b77      	ldr	r3, [pc, #476]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a76      	ldr	r2, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	4b74      	ldr	r3, [pc, #464]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	4a73      	ldr	r2, [pc, #460]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x5e0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c8>
 8003bfa:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a6b      	ldr	r2, [pc, #428]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x5e0>
 8003c14:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a67      	ldr	r2, [pc, #412]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c20:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a64      	ldr	r2, [pc, #400]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd fb72 	bl	800131c <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fb6e 	bl	800131c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e123      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCC_OscConfig+0x5f0>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd fb5c 	bl	800131c <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd fb58 	bl	800131c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e10d      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7e:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8102 	beq.w	8003e98 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c94:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9c:	2b18      	cmp	r3, #24
 8003c9e:	f000 80bd 	beq.w	8003e1c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	f040 809e 	bne.w	8003de8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a41      	ldr	r2, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fb30 	bl	800131c <HAL_GetTick>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fb2c 	bl	800131c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0e3      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <HAL_RCC_OscConfig+0x774>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	4931      	ldr	r1, [pc, #196]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	3b01      	subs	r3, #1
 8003d08:	025b      	lsls	r3, r3, #9
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	3b01      	subs	r3, #1
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d28:	4923      	ldr	r1, [pc, #140]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3e:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_RCC_OscConfig+0x778>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d46:	00d2      	lsls	r2, r2, #3
 8003d48:	491b      	ldr	r1, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f023 020c 	bic.w	r2, r3, #12
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	4917      	ldr	r1, [pc, #92]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f023 0202 	bic.w	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	4912      	ldr	r1, [pc, #72]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd fab5 	bl	800131c <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db4:	e011      	b.n	8003dda <HAL_RCC_OscConfig+0x78e>
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	58024800 	.word	0x58024800
 8003dc0:	fffffc0c 	.word	0xfffffc0c
 8003dc4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd faa8 	bl	800131c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e05f      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCC_OscConfig+0x858>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x77c>
 8003de6:	e057      	b.n	8003e98 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de8:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <HAL_RCC_OscConfig+0x858>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_RCC_OscConfig+0x858>)
 8003dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fa92 	bl	800131c <HAL_GetTick>
 8003df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd fa8e 	bl	800131c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e0e:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_OscConfig+0x858>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x7b0>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_RCC_OscConfig+0x858>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_OscConfig+0x858>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d031      	beq.n	8003e94 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0203 	and.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d12a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d122      	bne.n	8003e94 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d108      	bne.n	8003e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	0e1b      	lsrs	r3, r3, #24
 8003e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3730      	adds	r7, #48	; 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400

08003ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e19c      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b87      	ldr	r3, [pc, #540]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	4985      	ldr	r1, [pc, #532]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b83      	ldr	r3, [pc, #524]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e184      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d908      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4975      	ldr	r1, [pc, #468]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	4b70      	ldr	r3, [pc, #448]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d908      	bls.n	8003f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f36:	4b6d      	ldr	r3, [pc, #436]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	496a      	ldr	r1, [pc, #424]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	495e      	ldr	r1, [pc, #376]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d908      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f92:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4953      	ldr	r1, [pc, #332]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d908      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f023 020f 	bic.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4947      	ldr	r1, [pc, #284]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d055      	beq.n	800408a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4940      	ldr	r1, [pc, #256]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d121      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0f6      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d107      	bne.n	8004020 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0ea      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0de      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d6      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4925      	ldr	r1, [pc, #148]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8004056:	4313      	orrs	r3, r2
 8004058:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd f95f 	bl	800131c <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	e00a      	b.n	8004078 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004062:	f7fd f95b 	bl	800131c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0be      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	429a      	cmp	r2, r3
 8004088:	d1eb      	bne.n	8004062 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d208      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	490e      	ldr	r1, [pc, #56]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d214      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	4906      	ldr	r1, [pc, #24]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e086      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
 80040e8:	52002000 	.word	0x52002000
 80040ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800410c:	4b3c      	ldr	r3, [pc, #240]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	4939      	ldr	r1, [pc, #228]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800411a:	4313      	orrs	r3, r2
 800411c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	4b34      	ldr	r3, [pc, #208]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d208      	bcs.n	800414c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	492e      	ldr	r1, [pc, #184]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004148:	4313      	orrs	r3, r2
 800414a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004164:	429a      	cmp	r2, r3
 8004166:	d208      	bcs.n	800417a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4922      	ldr	r1, [pc, #136]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004176:	4313      	orrs	r3, r2
 8004178:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004192:	429a      	cmp	r2, r3
 8004194:	d208      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4917      	ldr	r1, [pc, #92]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041a8:	f000 f834 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	4912      	ldr	r1, [pc, #72]	; (8004204 <HAL_RCC_ClockConfig+0x35c>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <HAL_RCC_ClockConfig+0x35c>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x360>)
 80041de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x364>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x368>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd f84c 	bl	8001288 <HAL_InitTick>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	08007e3c 	.word	0x08007e3c
 8004208:	24000004 	.word	0x24000004
 800420c:	24000000 	.word	0x24000000
 8004210:	24000008 	.word	0x24000008

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421a:	4bb3      	ldr	r3, [pc, #716]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004222:	2b18      	cmp	r3, #24
 8004224:	f200 8155 	bhi.w	80044d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004295 	.word	0x08004295
 8004234:	080044d3 	.word	0x080044d3
 8004238:	080044d3 	.word	0x080044d3
 800423c:	080044d3 	.word	0x080044d3
 8004240:	080044d3 	.word	0x080044d3
 8004244:	080044d3 	.word	0x080044d3
 8004248:	080044d3 	.word	0x080044d3
 800424c:	080044d3 	.word	0x080044d3
 8004250:	080042bb 	.word	0x080042bb
 8004254:	080044d3 	.word	0x080044d3
 8004258:	080044d3 	.word	0x080044d3
 800425c:	080044d3 	.word	0x080044d3
 8004260:	080044d3 	.word	0x080044d3
 8004264:	080044d3 	.word	0x080044d3
 8004268:	080044d3 	.word	0x080044d3
 800426c:	080044d3 	.word	0x080044d3
 8004270:	080042c1 	.word	0x080042c1
 8004274:	080044d3 	.word	0x080044d3
 8004278:	080044d3 	.word	0x080044d3
 800427c:	080044d3 	.word	0x080044d3
 8004280:	080044d3 	.word	0x080044d3
 8004284:	080044d3 	.word	0x080044d3
 8004288:	080044d3 	.word	0x080044d3
 800428c:	080044d3 	.word	0x080044d3
 8004290:	080042c7 	.word	0x080042c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004294:	4b94      	ldr	r3, [pc, #592]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042a0:	4b91      	ldr	r3, [pc, #580]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a90      	ldr	r2, [pc, #576]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042b2:	e111      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042b4:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b6:	61bb      	str	r3, [r7, #24]
    break;
 80042b8:	e10e      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042ba:	4b8d      	ldr	r3, [pc, #564]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042bc:	61bb      	str	r3, [r7, #24]
    break;
 80042be:	e10b      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042c0:	4b8c      	ldr	r3, [pc, #560]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042c2:	61bb      	str	r3, [r7, #24]
    break;
 80042c4:	e108      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042d0:	4b85      	ldr	r3, [pc, #532]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042dc:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042e6:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	08db      	lsrs	r3, r3, #3
 80042ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80e1 	beq.w	80044cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b02      	cmp	r3, #2
 800430e:	f000 8083 	beq.w	8004418 <HAL_RCC_GetSysClockFreq+0x204>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b02      	cmp	r3, #2
 8004316:	f200 80a1 	bhi.w	800445c <HAL_RCC_GetSysClockFreq+0x248>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x114>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d056      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004326:	e099      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02d      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004334:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	08db      	lsrs	r3, r3, #3
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	4a6b      	ldr	r2, [pc, #428]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800438e:	e087      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043d2:	e065      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b40      	ldr	r3, [pc, #256]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004416:	e043      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800445a:	e021      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800449e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	0a5b      	lsrs	r3, r3, #9
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	3301      	adds	r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c4:	ee17 3a90 	vmov	r3, s15
 80044c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044d4:	61bb      	str	r3, [r7, #24]
    break;
 80044d6:	bf00      	nop
  }

  return sysclockfreq;
 80044d8:	69bb      	ldr	r3, [r7, #24]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	03d09000 	.word	0x03d09000
 80044f0:	003d0900 	.word	0x003d0900
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	46000000 	.word	0x46000000
 80044fc:	4c742400 	.word	0x4c742400
 8004500:	4a742400 	.word	0x4a742400
 8004504:	4af42400 	.word	0x4af42400

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800450e:	f7ff fe81 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_RCC_GetHCLKFreq+0x50>)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	490f      	ldr	r1, [pc, #60]	; (800455c <HAL_RCC_GetHCLKFreq+0x54>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_GetHCLKFreq+0x50>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_RCC_GetHCLKFreq+0x54>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	fa22 f303 	lsr.w	r3, r2, r3
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_RCC_GetHCLKFreq+0x58>)
 8004544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_GetHCLKFreq+0x58>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58024400 	.word	0x58024400
 800455c:	08007e3c 	.word	0x08007e3c
 8004560:	24000004 	.word	0x24000004
 8004564:	24000000 	.word	0x24000000

08004568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800456c:	f7ff ffcc 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4904      	ldr	r1, [pc, #16]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	58024400 	.word	0x58024400
 8004590:	08007e3c 	.word	0x08007e3c

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004598:	f7ff ffb6 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4904      	ldr	r1, [pc, #16]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	58024400 	.word	0x58024400
 80045bc:	08007e3c 	.word	0x08007e3c

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045cc:	2300      	movs	r3, #0
 80045ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03f      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045e4:	d02a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045ea:	d824      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f0:	d018      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f6:	d81e      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004600:	d007      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004602:	e018      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004604:	4ba3      	ldr	r3, [pc, #652]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4aa2      	ldr	r2, [pc, #648]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 f9d5 	bl	80059c8 <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fa7e 	bl	8005b2c <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004644:	4b93      	ldr	r3, [pc, #588]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004650:	4990      	ldr	r1, [pc, #576]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	650b      	str	r3, [r1, #80]	; 0x50
 8004656:	e001      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	2b04      	cmp	r3, #4
 800466e:	d826      	bhi.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	0800468d 	.word	0x0800468d
 800467c:	0800469b 	.word	0x0800469b
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046c5 	.word	0x080046c5
 8004688:	080046c5 	.word	0x080046c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4b81      	ldr	r3, [pc, #516]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4a80      	ldr	r2, [pc, #512]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004698:	e015      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f991 	bl	80059c8 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046aa:	e00c      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3324      	adds	r3, #36	; 0x24
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 fa3a 	bl	8005b2c <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80046c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046cc:	4b71      	ldr	r3, [pc, #452]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	f023 0207 	bic.w	r2, r3, #7
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	496e      	ldr	r1, [pc, #440]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	650b      	str	r3, [r1, #80]	; 0x50
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d042      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f8:	d02b      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	d825      	bhi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004700:	2bc0      	cmp	r3, #192	; 0xc0
 8004702:	d028      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004704:	2bc0      	cmp	r3, #192	; 0xc0
 8004706:	d821      	bhi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d016      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d81d      	bhi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d007      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004718:	e018      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471a:	4b5e      	ldr	r3, [pc, #376]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004726:	e017      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f001 f94a 	bl	80059c8 <RCCEx_PLL2_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004738:	e00e      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3324      	adds	r3, #36	; 0x24
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f001 f9f3 	bl	8005b2c <RCCEx_PLL3_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
      break;
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800475e:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	494a      	ldr	r1, [pc, #296]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	650b      	str	r3, [r1, #80]	; 0x50
 8004770:	e001      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477e:	2b00      	cmp	r3, #0
 8004780:	d049      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478c:	d030      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800478e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004792:	d82a      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004798:	d02c      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800479a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800479e:	d824      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a4:	d018      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80047a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047aa:	d81e      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b4:	d007      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047b6:	e018      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b8:	4b36      	ldr	r3, [pc, #216]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4a35      	ldr	r2, [pc, #212]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c4:	e017      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 f8fb 	bl	80059c8 <RCCEx_PLL2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047d6:	e00e      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3324      	adds	r3, #36	; 0x24
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 f9a4 	bl	8005b2c <RCCEx_PLL3_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047e8:	e005      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047f0:	bf00      	nop
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800480a:	4922      	ldr	r1, [pc, #136]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	658b      	str	r3, [r1, #88]	; 0x58
 8004810:	e001      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004812:	7dfb      	ldrb	r3, [r7, #23]
 8004814:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481e:	2b00      	cmp	r3, #0
 8004820:	d04b      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800482c:	d030      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800482e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004832:	d82a      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004838:	d02e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800483a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800483e:	d824      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004844:	d018      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484a:	d81e      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004854:	d007      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004856:	e018      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004864:	e019      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f001 f8ab 	bl	80059c8 <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004876:	e010      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3324      	adds	r3, #36	; 0x24
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f954 	bl	8005b2c <RCCEx_PLL3_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004888:	e007      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
      break;
 800488e:	e004      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004890:	bf00      	nop
 8004892:	e002      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004894:	58024400 	.word	0x58024400
      break;
 8004898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048a0:	4b99      	ldr	r3, [pc, #612]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ae:	4996      	ldr	r1, [pc, #600]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	658b      	str	r3, [r1, #88]	; 0x58
 80048b4:	e001      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d032      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	2b30      	cmp	r3, #48	; 0x30
 80048cc:	d01c      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d817      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d813      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d10f      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e2:	4b89      	ldr	r3, [pc, #548]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	4a88      	ldr	r2, [pc, #544]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048ee:	e00e      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f866 	bl	80059c8 <RCCEx_PLL2_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004900:	e005      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
      break;
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800490c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004914:	4b7c      	ldr	r3, [pc, #496]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004920:	4979      	ldr	r1, [pc, #484]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004922:	4313      	orrs	r3, r2
 8004924:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d047      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004940:	d030      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004946:	d82a      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004948:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800494c:	d02c      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800494e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004952:	d824      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d018      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495e:	d81e      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d007      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800496a:	e018      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496c:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a65      	ldr	r2, [pc, #404]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004978:	e017      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f821 	bl	80059c8 <RCCEx_PLL2_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800498a:	e00e      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f8ca 	bl	8005b2c <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800499c:	e005      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
      break;
 80049a2:	e002      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80049a4:	bf00      	nop
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80049a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049b0:	4b55      	ldr	r3, [pc, #340]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	4952      	ldr	r1, [pc, #328]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	650b      	str	r3, [r1, #80]	; 0x50
 80049c2:	e001      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d049      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049dc:	d02e      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e2:	d828      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049e8:	d02a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80049ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ee:	d822      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049f4:	d026      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80049f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049fa:	d81c      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a00:	d010      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a06:	d816      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01d      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d111      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 ffd5 	bl	80059c8 <RCCEx_PLL2_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a22:	e012      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	2101      	movs	r1, #1
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 f87e 	bl	8005b2c <RCCEx_PLL3_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a34:	e009      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3a:	e006      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a3c:	bf00      	nop
 8004a3e:	e004      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a40:	bf00      	nop
 8004a42:	e002      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	492a      	ldr	r1, [pc, #168]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	650b      	str	r3, [r1, #80]	; 0x50
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d04d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d02e      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d828      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d02a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d822      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a96:	d026      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a9c:	d81c      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d010      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d816      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01d      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d111      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff84 	bl	80059c8 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ac4:	e012      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3324      	adds	r3, #36	; 0x24
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 f82d 	bl	8005b2c <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ad6:	e009      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e004      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b00:	4901      	ldr	r1, [pc, #4]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	658b      	str	r3, [r1, #88]	; 0x58
 8004b06:	e003      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d02f      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b24:	d00e      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2a:	d814      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b34:	d10f      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b36:	4baf      	ldr	r3, [pc, #700]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4aae      	ldr	r2, [pc, #696]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b42:	e00c      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 ff3c 	bl	80059c8 <RCCEx_PLL2_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b64:	4ba3      	ldr	r3, [pc, #652]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b70:	49a0      	ldr	r1, [pc, #640]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	650b      	str	r3, [r1, #80]	; 0x50
 8004b76:	e001      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d032      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d81b      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004ba9 	.word	0x08004ba9
 8004ba0:	08004bb7 	.word	0x08004bb7
 8004ba4:	08004bcf 	.word	0x08004bcf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4b92      	ldr	r3, [pc, #584]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a91      	ldr	r2, [pc, #580]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bb4:	e00c      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	2102      	movs	r1, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 ff03 	bl	80059c8 <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bc6:	e003      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
      break;
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bd6:	4b87      	ldr	r3, [pc, #540]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	f023 0203 	bic.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	4984      	ldr	r1, [pc, #528]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004be8:	e001      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8086 	beq.w	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bfc:	4b7e      	ldr	r3, [pc, #504]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a7d      	ldr	r2, [pc, #500]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c08:	f7fc fb88 	bl	800131c <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c0e:	e009      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c10:	f7fc fb84 	bl	800131c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d902      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	75fb      	strb	r3, [r7, #23]
        break;
 8004c22:	e005      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c24:	4b74      	ldr	r3, [pc, #464]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ef      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d166      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c36:	4b6f      	ldr	r3, [pc, #444]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c40:	4053      	eors	r3, r2
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d013      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c54:	4b67      	ldr	r3, [pc, #412]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a66      	ldr	r2, [pc, #408]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c60:	4b64      	ldr	r3, [pc, #400]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a63      	ldr	r2, [pc, #396]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c6c:	4a61      	ldr	r2, [pc, #388]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7c:	d115      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fc fb4d 	bl	800131c <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c84:	e00b      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fc fb49 	bl	800131c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d902      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c9c:	e005      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c9e:	4b55      	ldr	r3, [pc, #340]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0ed      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d126      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004cc0:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cce:	0919      	lsrs	r1, r3, #4
 8004cd0:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	4947      	ldr	r1, [pc, #284]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
 8004cda:	e005      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004cdc:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	4a44      	ldr	r2, [pc, #272]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ce2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ce6:	6113      	str	r3, [r2, #16]
 8004ce8:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf6:	493f      	ldr	r1, [pc, #252]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	670b      	str	r3, [r1, #112]	; 0x70
 8004cfc:	e004      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	75bb      	strb	r3, [r7, #22]
 8004d02:	e001      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8085 	beq.w	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1a:	2b28      	cmp	r3, #40	; 0x28
 8004d1c:	d866      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004e01 	.word	0x08004e01
 8004d28:	08004ded 	.word	0x08004ded
 8004d2c:	08004ded 	.word	0x08004ded
 8004d30:	08004ded 	.word	0x08004ded
 8004d34:	08004ded 	.word	0x08004ded
 8004d38:	08004ded 	.word	0x08004ded
 8004d3c:	08004ded 	.word	0x08004ded
 8004d40:	08004ded 	.word	0x08004ded
 8004d44:	08004dc9 	.word	0x08004dc9
 8004d48:	08004ded 	.word	0x08004ded
 8004d4c:	08004ded 	.word	0x08004ded
 8004d50:	08004ded 	.word	0x08004ded
 8004d54:	08004ded 	.word	0x08004ded
 8004d58:	08004ded 	.word	0x08004ded
 8004d5c:	08004ded 	.word	0x08004ded
 8004d60:	08004ded 	.word	0x08004ded
 8004d64:	08004ddb 	.word	0x08004ddb
 8004d68:	08004ded 	.word	0x08004ded
 8004d6c:	08004ded 	.word	0x08004ded
 8004d70:	08004ded 	.word	0x08004ded
 8004d74:	08004ded 	.word	0x08004ded
 8004d78:	08004ded 	.word	0x08004ded
 8004d7c:	08004ded 	.word	0x08004ded
 8004d80:	08004ded 	.word	0x08004ded
 8004d84:	08004e01 	.word	0x08004e01
 8004d88:	08004ded 	.word	0x08004ded
 8004d8c:	08004ded 	.word	0x08004ded
 8004d90:	08004ded 	.word	0x08004ded
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004ded 	.word	0x08004ded
 8004da0:	08004ded 	.word	0x08004ded
 8004da4:	08004e01 	.word	0x08004e01
 8004da8:	08004ded 	.word	0x08004ded
 8004dac:	08004ded 	.word	0x08004ded
 8004db0:	08004ded 	.word	0x08004ded
 8004db4:	08004ded 	.word	0x08004ded
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004ded 	.word	0x08004ded
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	08004e01 	.word	0x08004e01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fdfa 	bl	80059c8 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dd8:	e013      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fea3 	bl	8005b2c <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dea:	e00a      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e007      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
 8004df8:	58024800 	.word	0x58024800
 8004dfc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e08:	4b96      	ldr	r3, [pc, #600]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e14:	4993      	ldr	r1, [pc, #588]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	654b      	str	r3, [r1, #84]	; 0x54
 8004e1a:	e001      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d038      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d821      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e7f 	.word	0x08004e7f
 8004e40:	08004e55 	.word	0x08004e55
 8004e44:	08004e67 	.word	0x08004e67
 8004e48:	08004e7f 	.word	0x08004e7f
 8004e4c:	08004e7f 	.word	0x08004e7f
 8004e50:	08004e7f 	.word	0x08004e7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fdb4 	bl	80059c8 <RCCEx_PLL2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e64:	e00c      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3324      	adds	r3, #36	; 0x24
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fe5d 	bl	8005b2c <RCCEx_PLL3_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e76:	e003      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e7c:	e000      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e86:	4b77      	ldr	r3, [pc, #476]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e92:	4974      	ldr	r1, [pc, #464]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	654b      	str	r3, [r1, #84]	; 0x54
 8004e98:	e001      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	2b05      	cmp	r3, #5
 8004eb2:	d821      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004eff 	.word	0x08004eff
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004ee7 	.word	0x08004ee7
 8004ec8:	08004eff 	.word	0x08004eff
 8004ecc:	08004eff 	.word	0x08004eff
 8004ed0:	08004eff 	.word	0x08004eff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fd74 	bl	80059c8 <RCCEx_PLL2_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ee4:	e00c      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3324      	adds	r3, #36	; 0x24
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fe1d 	bl	8005b2c <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ef6:	e003      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f06:	4b57      	ldr	r3, [pc, #348]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	f023 0207 	bic.w	r2, r3, #7
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	4953      	ldr	r1, [pc, #332]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	658b      	str	r3, [r1, #88]	; 0x58
 8004f1a:	e001      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d04b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f36:	d02e      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f3c:	d828      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d02a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d822      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f4e:	d026      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f54:	d81c      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f60:	d816      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01d      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fd28 	bl	80059c8 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f7c:	e012      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	2102      	movs	r1, #2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fdd1 	bl	8005b2c <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e009      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	e006      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f96:	bf00      	nop
 8004f98:	e004      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004faa:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb8:	492a      	ldr	r1, [pc, #168]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	654b      	str	r3, [r1, #84]	; 0x54
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d04d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fda:	d02e      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004fdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fe0:	d828      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe6:	d02a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d822      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff2:	d026      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff8:	d81c      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffe:	d010      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005004:	d816      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01d      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d111      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fcd6 	bl	80059c8 <RCCEx_PLL2_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005020:	e012      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3324      	adds	r3, #36	; 0x24
 8005026:	2102      	movs	r1, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fd7f 	bl	8005b2c <RCCEx_PLL3_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	75fb      	strb	r3, [r7, #23]
      break;
 8005038:	e006      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800503a:	bf00      	nop
 800503c:	e004      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800505c:	4901      	ldr	r1, [pc, #4]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	658b      	str	r3, [r1, #88]	; 0x58
 8005062:	e003      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	2b00      	cmp	r3, #0
 8005076:	d04b      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005082:	d02e      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005084:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005088:	d828      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508e:	d02a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005094:	d822      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005096:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800509a:	d026      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800509c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050a0:	d81c      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a6:	d010      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80050a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ac:	d816      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01d      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80050b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b6:	d111      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fc82 	bl	80059c8 <RCCEx_PLL2_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050c8:	e012      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3324      	adds	r3, #36	; 0x24
 80050ce:	2102      	movs	r1, #2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fd2b 	bl	8005b2c <RCCEx_PLL3_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050da:	e009      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
      break;
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050e2:	bf00      	nop
 80050e4:	e004      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050f6:	4b9d      	ldr	r3, [pc, #628]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005104:	4999      	ldr	r1, [pc, #612]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005106:	4313      	orrs	r3, r2
 8005108:	658b      	str	r3, [r1, #88]	; 0x58
 800510a:	e001      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d10a      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3324      	adds	r3, #36	; 0x24
 800512c:	2102      	movs	r1, #2
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fcfc 	bl	8005b2c <RCCEx_PLL3_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800513e:	4b8b      	ldr	r3, [pc, #556]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514c:	4987      	ldr	r1, [pc, #540]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800514e:	4313      	orrs	r3, r2
 8005150:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005168:	d10a      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3324      	adds	r3, #36	; 0x24
 800516e:	2102      	movs	r1, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fcdb 	bl	8005b2c <RCCEx_PLL3_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005180:	4b7a      	ldr	r3, [pc, #488]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518e:	4977      	ldr	r1, [pc, #476]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005190:	4313      	orrs	r3, r2
 8005192:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d034      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051aa:	d01d      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80051ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b0:	d817      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80051b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ba:	d009      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80051bc:	e011      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fbff 	bl	80059c8 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051ce:	e00c      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	2102      	movs	r1, #2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fca8 	bl	8005b2c <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051e0:	e003      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	e000      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80051e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051f0:	4b5e      	ldr	r3, [pc, #376]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051fe:	495b      	ldr	r1, [pc, #364]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005200:	4313      	orrs	r3, r2
 8005202:	658b      	str	r3, [r1, #88]	; 0x58
 8005204:	e001      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d033      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005220:	d01c      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005222:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005226:	d816      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522c:	d003      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800522e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005232:	d007      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005234:	e00f      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a4c      	ldr	r2, [pc, #304]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005242:	e00c      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3324      	adds	r3, #36	; 0x24
 8005248:	2101      	movs	r1, #1
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fc6e 	bl	8005b2c <RCCEx_PLL3_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
      break;
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800525c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005264:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005272:	493e      	ldr	r1, [pc, #248]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005274:	4313      	orrs	r3, r2
 8005276:	654b      	str	r3, [r1, #84]	; 0x54
 8005278:	e001      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d029      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005296:	d007      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005298:	e00f      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800529a:	4b34      	ldr	r3, [pc, #208]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a33      	ldr	r2, [pc, #204]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052a6:	e00b      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	2102      	movs	r1, #2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fb8a 	bl	80059c8 <RCCEx_PLL2_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052b8:	e002      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75fb      	strb	r3, [r7, #23]
      break;
 80052be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052c6:	4b29      	ldr	r3, [pc, #164]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	4926      	ldr	r1, [pc, #152]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052d8:	e001      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3324      	adds	r3, #36	; 0x24
 80052ee:	2102      	movs	r1, #2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fc1b 	bl	8005b2c <RCCEx_PLL3_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d033      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005314:	d017      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531a:	d811      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800531c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005320:	d013      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005326:	d80b      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d010      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800532c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005330:	d106      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005332:	4b0e      	ldr	r3, [pc, #56]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	4a0d      	ldr	r2, [pc, #52]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800533e:	e007      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
      break;
 8005344:	e004      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800534e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005362:	4902      	ldr	r1, [pc, #8]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005364:	4313      	orrs	r3, r2
 8005366:	654b      	str	r3, [r1, #84]	; 0x54
 8005368:	e004      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800536a:	bf00      	nop
 800536c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005380:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	492e      	ldr	r1, [pc, #184]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800538e:	4313      	orrs	r3, r2
 8005390:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800539e:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053ac:	4926      	ldr	r1, [pc, #152]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053be:	4b22      	ldr	r3, [pc, #136]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ca:	491f      	ldr	r1, [pc, #124]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00d      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	4a19      	ldr	r2, [pc, #100]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e6:	6113      	str	r3, [r2, #16]
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053f2:	4915      	ldr	r1, [pc, #84]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da08      	bge.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005404:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	490e      	ldr	r1, [pc, #56]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800540e:	4313      	orrs	r3, r2
 8005410:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	4906      	ldr	r1, [pc, #24]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800542e:	4313      	orrs	r3, r2
 8005430:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005432:	7dbb      	ldrb	r3, [r7, #22]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	58024400 	.word	0x58024400

0800544c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005450:	f7ff f85a 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	; (8005474 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58024400 	.word	0x58024400
 8005474:	08007e3c 	.word	0x08007e3c

08005478 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005480:	4ba1      	ldr	r3, [pc, #644]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800548a:	4b9f      	ldr	r3, [pc, #636]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	0b1b      	lsrs	r3, r3, #12
 8005490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005494:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005496:	4b9c      	ldr	r3, [pc, #624]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054a2:	4b99      	ldr	r3, [pc, #612]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	08db      	lsrs	r3, r3, #3
 80054a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8111 	beq.w	80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	f000 8083 	beq.w	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	f200 80a1 	bhi.w	8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d056      	beq.n	8005590 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054e2:	e099      	b.n	8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e4:	4b88      	ldr	r3, [pc, #544]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02d      	beq.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054f0:	4b85      	ldr	r3, [pc, #532]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	08db      	lsrs	r3, r3, #3
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	4a84      	ldr	r2, [pc, #528]	; (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005500:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551a:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552a:	ed97 6a03 	vldr	s12, [r7, #12]
 800552e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005546:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800554a:	e087      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005714 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800558e:	e065      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d2:	e043      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b48      	ldr	r3, [pc, #288]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005616:	e021      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a03 	vldr	s12, [r7, #12]
 800563e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800565c:	4b2a      	ldr	r3, [pc, #168]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	0a5b      	lsrs	r3, r3, #9
 8005662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005676:	edd7 6a07 	vldr	s13, [r7, #28]
 800567a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800567e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005682:	ee17 2a90 	vmov	r2, s15
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800568a:	4b1f      	ldr	r3, [pc, #124]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	0c1b      	lsrs	r3, r3, #16
 8005690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b0:	ee17 2a90 	vmov	r2, s15
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056de:	ee17 2a90 	vmov	r2, s15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056e6:	e008      	b.n	80056fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
}
 80056fa:	bf00      	nop
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	58024400 	.word	0x58024400
 800570c:	03d09000 	.word	0x03d09000
 8005710:	46000000 	.word	0x46000000
 8005714:	4c742400 	.word	0x4c742400
 8005718:	4a742400 	.word	0x4a742400
 800571c:	4af42400 	.word	0x4af42400

08005720 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005728:	4ba1      	ldr	r3, [pc, #644]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005732:	4b9f      	ldr	r3, [pc, #636]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	0d1b      	lsrs	r3, r3, #20
 8005738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800573c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800573e:	4b9c      	ldr	r3, [pc, #624]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800574a:	4b99      	ldr	r3, [pc, #612]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8111 	beq.w	8005990 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b02      	cmp	r3, #2
 8005772:	f000 8083 	beq.w	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f200 80a1 	bhi.w	80058c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d056      	beq.n	8005838 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800578a:	e099      	b.n	80058c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578c:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02d      	beq.n	80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005798:	4b85      	ldr	r3, [pc, #532]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	08db      	lsrs	r3, r3, #3
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	4a84      	ldr	r2, [pc, #528]	; (80059b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b7b      	ldr	r3, [pc, #492]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057f2:	e087      	b.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a03 	vldr	s12, [r7, #12]
 800581a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005836:	e065      	b.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b59      	ldr	r3, [pc, #356]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a03 	vldr	s12, [r7, #12]
 800585e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587a:	e043      	b.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058be:	e021      	b.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005902:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005904:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	0a5b      	lsrs	r3, r3, #9
 800590a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800591e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592a:	ee17 2a90 	vmov	r2, s15
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005932:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800594c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005958:	ee17 2a90 	vmov	r2, s15
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	0e1b      	lsrs	r3, r3, #24
 8005966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800597a:	edd7 6a07 	vldr	s13, [r7, #28]
 800597e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	ee17 2a90 	vmov	r2, s15
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800598e:	e008      	b.n	80059a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
}
 80059a2:	bf00      	nop
 80059a4:	3724      	adds	r7, #36	; 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
 80059b4:	03d09000 	.word	0x03d09000
 80059b8:	46000000 	.word	0x46000000
 80059bc:	4c742400 	.word	0x4c742400
 80059c0:	4a742400 	.word	0x4a742400
 80059c4:	4af42400 	.word	0x4af42400

080059c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059d6:	4b53      	ldr	r3, [pc, #332]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d101      	bne.n	80059e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e099      	b.n	8005b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059e6:	4b4f      	ldr	r3, [pc, #316]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4e      	ldr	r2, [pc, #312]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f2:	f7fb fc93 	bl	800131c <HAL_GetTick>
 80059f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059f8:	e008      	b.n	8005a0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059fa:	f7fb fc8f 	bl	800131c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e086      	b.n	8005b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a0c:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a18:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	493f      	ldr	r1, [pc, #252]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	025b      	lsls	r3, r3, #9
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a5c:	4931      	ldr	r1, [pc, #196]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a62:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	492d      	ldr	r1, [pc, #180]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a74:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f023 0220 	bic.w	r2, r3, #32
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	4928      	ldr	r1, [pc, #160]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a86:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	f023 0310 	bic.w	r3, r3, #16
 8005a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <RCCEx_PLL2_Config+0x160>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	69d2      	ldr	r2, [r2, #28]
 8005a9e:	00d2      	lsls	r2, r2, #3
 8005aa0:	4920      	ldr	r1, [pc, #128]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005aa6:	4b1f      	ldr	r3, [pc, #124]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	f043 0310 	orr.w	r3, r3, #16
 8005ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ac4:	e00f      	b.n	8005ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005acc:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ad8:	e005      	b.n	8005ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af2:	f7fb fc13 	bl	800131c <HAL_GetTick>
 8005af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005af8:	e008      	b.n	8005b0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005afa:	f7fb fc0f 	bl	800131c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e006      	b.n	8005b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	ffff0007 	.word	0xffff0007

08005b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d101      	bne.n	8005b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e099      	b.n	8005c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b4a:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b56:	f7fb fbe1 	bl	800131c <HAL_GetTick>
 8005b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b5e:	f7fb fbdd 	bl	800131c <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e086      	b.n	8005c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b70:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b7c:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	051b      	lsls	r3, r3, #20
 8005b8a:	493f      	ldr	r1, [pc, #252]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	025b      	lsls	r3, r3, #9
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bc0:	4931      	ldr	r1, [pc, #196]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bc6:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	492d      	ldr	r1, [pc, #180]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005bd8:	4b2b      	ldr	r3, [pc, #172]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4928      	ldr	r1, [pc, #160]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bea:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <RCCEx_PLL3_Config+0x160>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	69d2      	ldr	r2, [r2, #28]
 8005c02:	00d2      	lsls	r2, r2, #3
 8005c04:	4920      	ldr	r1, [pc, #128]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4a1e      	ldr	r2, [pc, #120]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c28:	e00f      	b.n	8005c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d106      	bne.n	8005c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c3c:	e005      	b.n	8005c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c56:	f7fb fb61 	bl	800131c <HAL_GetTick>
 8005c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c5e:	f7fb fb5d 	bl	800131c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e006      	b.n	8005c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	ffff0007 	.word	0xffff0007

08005c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e042      	b.n	8005d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fb f8e5 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2224      	movs	r2, #36	; 0x24
 8005cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8c2 	bl	8005e5c <UART_SetConfig>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e022      	b.n	8005d28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fe1e 	bl	800692c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fea5 	bl	8006a70 <UART_CheckIdleState>
 8005d26:	4603      	mov	r3, r0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	f040 8083 	bne.w	8005e52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Transmit+0x28>
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e07b      	b.n	8005e54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Transmit+0x3a>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e074      	b.n	8005e54 <HAL_UART_Transmit+0x124>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2221      	movs	r2, #33	; 0x21
 8005d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d82:	f7fb facb 	bl	800131c <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	88fa      	ldrh	r2, [r7, #6]
 8005d8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da0:	d108      	bne.n	8005db4 <HAL_UART_Transmit+0x84>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e003      	b.n	8005dbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005dc4:	e02c      	b.n	8005e20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fe98 	bl	8006b06 <UART_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e039      	b.n	8005e54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	3302      	adds	r3, #2
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e007      	b.n	8005e0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1cc      	bne.n	8005dc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2140      	movs	r1, #64	; 0x40
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fe65 	bl	8006b06 <UART_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e006      	b.n	8005e54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e000      	b.n	8005e54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005e52:	2302      	movs	r3, #2
  }
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b092      	sub	sp, #72	; 0x48
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4bbe      	ldr	r3, [pc, #760]	; (8006184 <UART_SetConfig+0x328>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e94:	430b      	orrs	r3, r1
 8005e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4ab3      	ldr	r2, [pc, #716]	; (8006188 <UART_SetConfig+0x32c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	4baf      	ldr	r3, [pc, #700]	; (800618c <UART_SetConfig+0x330>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	f023 010f 	bic.w	r1, r3, #15
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4aa6      	ldr	r2, [pc, #664]	; (8006190 <UART_SetConfig+0x334>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d177      	bne.n	8005fec <UART_SetConfig+0x190>
 8005efc:	4ba5      	ldr	r3, [pc, #660]	; (8006194 <UART_SetConfig+0x338>)
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f04:	2b28      	cmp	r3, #40	; 0x28
 8005f06:	d86d      	bhi.n	8005fe4 <UART_SetConfig+0x188>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0xb4>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005fb5 	.word	0x08005fb5
 8005f14:	08005fe5 	.word	0x08005fe5
 8005f18:	08005fe5 	.word	0x08005fe5
 8005f1c:	08005fe5 	.word	0x08005fe5
 8005f20:	08005fe5 	.word	0x08005fe5
 8005f24:	08005fe5 	.word	0x08005fe5
 8005f28:	08005fe5 	.word	0x08005fe5
 8005f2c:	08005fe5 	.word	0x08005fe5
 8005f30:	08005fbd 	.word	0x08005fbd
 8005f34:	08005fe5 	.word	0x08005fe5
 8005f38:	08005fe5 	.word	0x08005fe5
 8005f3c:	08005fe5 	.word	0x08005fe5
 8005f40:	08005fe5 	.word	0x08005fe5
 8005f44:	08005fe5 	.word	0x08005fe5
 8005f48:	08005fe5 	.word	0x08005fe5
 8005f4c:	08005fe5 	.word	0x08005fe5
 8005f50:	08005fc5 	.word	0x08005fc5
 8005f54:	08005fe5 	.word	0x08005fe5
 8005f58:	08005fe5 	.word	0x08005fe5
 8005f5c:	08005fe5 	.word	0x08005fe5
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	08005fe5 	.word	0x08005fe5
 8005f68:	08005fe5 	.word	0x08005fe5
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005fe5 	.word	0x08005fe5
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fd5 	.word	0x08005fd5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fe5 	.word	0x08005fe5
 8005f9c:	08005fe5 	.word	0x08005fe5
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005fe5 	.word	0x08005fe5
 8005fa8:	08005fe5 	.word	0x08005fe5
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e222      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e21e      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e21a      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e216      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e212      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fdc:	2340      	movs	r3, #64	; 0x40
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e20e      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e20a      	b.n	8006402 <UART_SetConfig+0x5a6>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a69      	ldr	r2, [pc, #420]	; (8006198 <UART_SetConfig+0x33c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d130      	bne.n	8006058 <UART_SetConfig+0x1fc>
 8005ff6:	4b67      	ldr	r3, [pc, #412]	; (8006194 <UART_SetConfig+0x338>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d826      	bhi.n	8006050 <UART_SetConfig+0x1f4>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x1ac>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006021 	.word	0x08006021
 800600c:	08006029 	.word	0x08006029
 8006010:	08006031 	.word	0x08006031
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e1ec      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e1e8      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e1e4      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e1e0      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006040:	2320      	movs	r3, #32
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e1dc      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e1d8      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e1d4      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a4f      	ldr	r2, [pc, #316]	; (800619c <UART_SetConfig+0x340>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d130      	bne.n	80060c4 <UART_SetConfig+0x268>
 8006062:	4b4c      	ldr	r3, [pc, #304]	; (8006194 <UART_SetConfig+0x338>)
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b05      	cmp	r3, #5
 800606c:	d826      	bhi.n	80060bc <UART_SetConfig+0x260>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x218>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	0800608d 	.word	0x0800608d
 8006078:	08006095 	.word	0x08006095
 800607c:	0800609d 	.word	0x0800609d
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060b5 	.word	0x080060b5
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e1b6      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e1b2      	b.n	8006402 <UART_SetConfig+0x5a6>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e1ae      	b.n	8006402 <UART_SetConfig+0x5a6>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e1aa      	b.n	8006402 <UART_SetConfig+0x5a6>
 80060ac:	2320      	movs	r3, #32
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e1a6      	b.n	8006402 <UART_SetConfig+0x5a6>
 80060b4:	2340      	movs	r3, #64	; 0x40
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e1a2      	b.n	8006402 <UART_SetConfig+0x5a6>
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e19e      	b.n	8006402 <UART_SetConfig+0x5a6>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a35      	ldr	r2, [pc, #212]	; (80061a0 <UART_SetConfig+0x344>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d130      	bne.n	8006130 <UART_SetConfig+0x2d4>
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <UART_SetConfig+0x338>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d826      	bhi.n	8006128 <UART_SetConfig+0x2cc>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <UART_SetConfig+0x284>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	080060f9 	.word	0x080060f9
 80060e4:	08006101 	.word	0x08006101
 80060e8:	08006109 	.word	0x08006109
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006119 	.word	0x08006119
 80060f4:	08006121 	.word	0x08006121
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e180      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006100:	2304      	movs	r3, #4
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e17c      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006108:	2308      	movs	r3, #8
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e178      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006110:	2310      	movs	r3, #16
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e174      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006118:	2320      	movs	r3, #32
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e170      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e16c      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612e:	e168      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <UART_SetConfig+0x348>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d142      	bne.n	80061c0 <UART_SetConfig+0x364>
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <UART_SetConfig+0x338>)
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b05      	cmp	r3, #5
 8006144:	d838      	bhi.n	80061b8 <UART_SetConfig+0x35c>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <UART_SetConfig+0x2f0>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	08006165 	.word	0x08006165
 8006150:	0800616d 	.word	0x0800616d
 8006154:	08006175 	.word	0x08006175
 8006158:	0800617d 	.word	0x0800617d
 800615c:	080061a9 	.word	0x080061a9
 8006160:	080061b1 	.word	0x080061b1
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616a:	e14a      	b.n	8006402 <UART_SetConfig+0x5a6>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006172:	e146      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e142      	b.n	8006402 <UART_SetConfig+0x5a6>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006182:	e13e      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006184:	cfff69f3 	.word	0xcfff69f3
 8006188:	58000c00 	.word	0x58000c00
 800618c:	11fff4ff 	.word	0x11fff4ff
 8006190:	40011000 	.word	0x40011000
 8006194:	58024400 	.word	0x58024400
 8006198:	40004400 	.word	0x40004400
 800619c:	40004800 	.word	0x40004800
 80061a0:	40004c00 	.word	0x40004c00
 80061a4:	40005000 	.word	0x40005000
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e128      	b.n	8006402 <UART_SetConfig+0x5a6>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e124      	b.n	8006402 <UART_SetConfig+0x5a6>
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e120      	b.n	8006402 <UART_SetConfig+0x5a6>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4acb      	ldr	r2, [pc, #812]	; (80064f4 <UART_SetConfig+0x698>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d176      	bne.n	80062b8 <UART_SetConfig+0x45c>
 80061ca:	4bcb      	ldr	r3, [pc, #812]	; (80064f8 <UART_SetConfig+0x69c>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d2:	2b28      	cmp	r3, #40	; 0x28
 80061d4:	d86c      	bhi.n	80062b0 <UART_SetConfig+0x454>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x380>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006281 	.word	0x08006281
 80061e0:	080062b1 	.word	0x080062b1
 80061e4:	080062b1 	.word	0x080062b1
 80061e8:	080062b1 	.word	0x080062b1
 80061ec:	080062b1 	.word	0x080062b1
 80061f0:	080062b1 	.word	0x080062b1
 80061f4:	080062b1 	.word	0x080062b1
 80061f8:	080062b1 	.word	0x080062b1
 80061fc:	08006289 	.word	0x08006289
 8006200:	080062b1 	.word	0x080062b1
 8006204:	080062b1 	.word	0x080062b1
 8006208:	080062b1 	.word	0x080062b1
 800620c:	080062b1 	.word	0x080062b1
 8006210:	080062b1 	.word	0x080062b1
 8006214:	080062b1 	.word	0x080062b1
 8006218:	080062b1 	.word	0x080062b1
 800621c:	08006291 	.word	0x08006291
 8006220:	080062b1 	.word	0x080062b1
 8006224:	080062b1 	.word	0x080062b1
 8006228:	080062b1 	.word	0x080062b1
 800622c:	080062b1 	.word	0x080062b1
 8006230:	080062b1 	.word	0x080062b1
 8006234:	080062b1 	.word	0x080062b1
 8006238:	080062b1 	.word	0x080062b1
 800623c:	08006299 	.word	0x08006299
 8006240:	080062b1 	.word	0x080062b1
 8006244:	080062b1 	.word	0x080062b1
 8006248:	080062b1 	.word	0x080062b1
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080062b1 	.word	0x080062b1
 8006254:	080062b1 	.word	0x080062b1
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080062b1 	.word	0x080062b1
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062b1 	.word	0x080062b1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e0bc      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e0b8      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e0b4      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e0b0      	b.n	8006402 <UART_SetConfig+0x5a6>
 80062a0:	2320      	movs	r3, #32
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e0ac      	b.n	8006402 <UART_SetConfig+0x5a6>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e0a8      	b.n	8006402 <UART_SetConfig+0x5a6>
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e0a4      	b.n	8006402 <UART_SetConfig+0x5a6>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a8f      	ldr	r2, [pc, #572]	; (80064fc <UART_SetConfig+0x6a0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d130      	bne.n	8006324 <UART_SetConfig+0x4c8>
 80062c2:	4b8d      	ldr	r3, [pc, #564]	; (80064f8 <UART_SetConfig+0x69c>)
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d826      	bhi.n	800631c <UART_SetConfig+0x4c0>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x478>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062ed 	.word	0x080062ed
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e086      	b.n	8006402 <UART_SetConfig+0x5a6>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e082      	b.n	8006402 <UART_SetConfig+0x5a6>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e07e      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e07a      	b.n	8006402 <UART_SetConfig+0x5a6>
 800630c:	2320      	movs	r3, #32
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e076      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e072      	b.n	8006402 <UART_SetConfig+0x5a6>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e06e      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a75      	ldr	r2, [pc, #468]	; (8006500 <UART_SetConfig+0x6a4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d130      	bne.n	8006390 <UART_SetConfig+0x534>
 800632e:	4b72      	ldr	r3, [pc, #456]	; (80064f8 <UART_SetConfig+0x69c>)
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b05      	cmp	r3, #5
 8006338:	d826      	bhi.n	8006388 <UART_SetConfig+0x52c>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x4e4>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006359 	.word	0x08006359
 8006344:	08006361 	.word	0x08006361
 8006348:	08006369 	.word	0x08006369
 800634c:	08006371 	.word	0x08006371
 8006350:	08006379 	.word	0x08006379
 8006354:	08006381 	.word	0x08006381
 8006358:	2300      	movs	r3, #0
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e050      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e04c      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e048      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006376:	e044      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006378:	2320      	movs	r3, #32
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e040      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e03c      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006388:	2380      	movs	r3, #128	; 0x80
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e038      	b.n	8006402 <UART_SetConfig+0x5a6>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5b      	ldr	r2, [pc, #364]	; (8006504 <UART_SetConfig+0x6a8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d130      	bne.n	80063fc <UART_SetConfig+0x5a0>
 800639a:	4b57      	ldr	r3, [pc, #348]	; (80064f8 <UART_SetConfig+0x69c>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d826      	bhi.n	80063f4 <UART_SetConfig+0x598>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0x550>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063cd 	.word	0x080063cd
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	2302      	movs	r3, #2
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e01a      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063cc:	2304      	movs	r3, #4
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e016      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063d4:	2308      	movs	r3, #8
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e012      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063dc:	2310      	movs	r3, #16
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e00e      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063e4:	2320      	movs	r3, #32
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ea:	e00a      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e006      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e002      	b.n	8006402 <UART_SetConfig+0x5a6>
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3f      	ldr	r2, [pc, #252]	; (8006504 <UART_SetConfig+0x6a8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	f040 80f8 	bne.w	80065fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800640e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006412:	2b20      	cmp	r3, #32
 8006414:	dc46      	bgt.n	80064a4 <UART_SetConfig+0x648>
 8006416:	2b02      	cmp	r3, #2
 8006418:	f2c0 8082 	blt.w	8006520 <UART_SetConfig+0x6c4>
 800641c:	3b02      	subs	r3, #2
 800641e:	2b1e      	cmp	r3, #30
 8006420:	d87e      	bhi.n	8006520 <UART_SetConfig+0x6c4>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x5cc>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	080064ab 	.word	0x080064ab
 800642c:	08006521 	.word	0x08006521
 8006430:	080064b3 	.word	0x080064b3
 8006434:	08006521 	.word	0x08006521
 8006438:	08006521 	.word	0x08006521
 800643c:	08006521 	.word	0x08006521
 8006440:	080064c3 	.word	0x080064c3
 8006444:	08006521 	.word	0x08006521
 8006448:	08006521 	.word	0x08006521
 800644c:	08006521 	.word	0x08006521
 8006450:	08006521 	.word	0x08006521
 8006454:	08006521 	.word	0x08006521
 8006458:	08006521 	.word	0x08006521
 800645c:	08006521 	.word	0x08006521
 8006460:	080064d3 	.word	0x080064d3
 8006464:	08006521 	.word	0x08006521
 8006468:	08006521 	.word	0x08006521
 800646c:	08006521 	.word	0x08006521
 8006470:	08006521 	.word	0x08006521
 8006474:	08006521 	.word	0x08006521
 8006478:	08006521 	.word	0x08006521
 800647c:	08006521 	.word	0x08006521
 8006480:	08006521 	.word	0x08006521
 8006484:	08006521 	.word	0x08006521
 8006488:	08006521 	.word	0x08006521
 800648c:	08006521 	.word	0x08006521
 8006490:	08006521 	.word	0x08006521
 8006494:	08006521 	.word	0x08006521
 8006498:	08006521 	.word	0x08006521
 800649c:	08006521 	.word	0x08006521
 80064a0:	08006513 	.word	0x08006513
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d037      	beq.n	8006518 <UART_SetConfig+0x6bc>
 80064a8:	e03a      	b.n	8006520 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064aa:	f7fe ffcf 	bl	800544c <HAL_RCCEx_GetD3PCLK1Freq>
 80064ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064b0:	e03c      	b.n	800652c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe ffde 	bl	8005478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c0:	e034      	b.n	800652c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c2:	f107 0318 	add.w	r3, r7, #24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff f92a 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d0:	e02c      	b.n	800652c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <UART_SetConfig+0x69c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <UART_SetConfig+0x69c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	08db      	lsrs	r3, r3, #3
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	4a07      	ldr	r2, [pc, #28]	; (8006508 <UART_SetConfig+0x6ac>)
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064f0:	e01c      	b.n	800652c <UART_SetConfig+0x6d0>
 80064f2:	bf00      	nop
 80064f4:	40011400 	.word	0x40011400
 80064f8:	58024400 	.word	0x58024400
 80064fc:	40007800 	.word	0x40007800
 8006500:	40007c00 	.word	0x40007c00
 8006504:	58000c00 	.word	0x58000c00
 8006508:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800650c:	4b9d      	ldr	r3, [pc, #628]	; (8006784 <UART_SetConfig+0x928>)
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006510:	e00c      	b.n	800652c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006512:	4b9d      	ldr	r3, [pc, #628]	; (8006788 <UART_SetConfig+0x92c>)
 8006514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006516:	e009      	b.n	800652c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800651e:	e005      	b.n	800652c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800652a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 81de 	beq.w	80068f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	4a94      	ldr	r2, [pc, #592]	; (800678c <UART_SetConfig+0x930>)
 800653a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800653e:	461a      	mov	r2, r3
 8006540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006542:	fbb3 f3f2 	udiv	r3, r3, r2
 8006546:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4413      	add	r3, r2
 8006552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006554:	429a      	cmp	r2, r3
 8006556:	d305      	bcc.n	8006564 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800655e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800656a:	e1c1      	b.n	80068f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656e:	2200      	movs	r2, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	60fa      	str	r2, [r7, #12]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	4a84      	ldr	r2, [pc, #528]	; (800678c <UART_SetConfig+0x930>)
 800657a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800657e:	b29b      	uxth	r3, r3
 8006580:	2200      	movs	r2, #0
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800658e:	f7f9 fef7 	bl	8000380 <__aeabi_uldivmod>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4610      	mov	r0, r2
 8006598:	4619      	mov	r1, r3
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	020b      	lsls	r3, r1, #8
 80065a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065a8:	0202      	lsls	r2, r0, #8
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	6849      	ldr	r1, [r1, #4]
 80065ae:	0849      	lsrs	r1, r1, #1
 80065b0:	2000      	movs	r0, #0
 80065b2:	460c      	mov	r4, r1
 80065b4:	4605      	mov	r5, r0
 80065b6:	eb12 0804 	adds.w	r8, r2, r4
 80065ba:	eb43 0905 	adc.w	r9, r3, r5
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	469a      	mov	sl, r3
 80065c6:	4693      	mov	fp, r2
 80065c8:	4652      	mov	r2, sl
 80065ca:	465b      	mov	r3, fp
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7f9 fed6 	bl	8000380 <__aeabi_uldivmod>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4613      	mov	r3, r2
 80065da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e2:	d308      	bcc.n	80065f6 <UART_SetConfig+0x79a>
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ea:	d204      	bcs.n	80065f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e17c      	b.n	80068f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80065fc:	e178      	b.n	80068f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006606:	f040 80c5 	bne.w	8006794 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800660a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800660e:	2b20      	cmp	r3, #32
 8006610:	dc48      	bgt.n	80066a4 <UART_SetConfig+0x848>
 8006612:	2b00      	cmp	r3, #0
 8006614:	db7b      	blt.n	800670e <UART_SetConfig+0x8b2>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d879      	bhi.n	800670e <UART_SetConfig+0x8b2>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x7c4>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	080066ab 	.word	0x080066ab
 8006624:	080066b3 	.word	0x080066b3
 8006628:	0800670f 	.word	0x0800670f
 800662c:	0800670f 	.word	0x0800670f
 8006630:	080066bb 	.word	0x080066bb
 8006634:	0800670f 	.word	0x0800670f
 8006638:	0800670f 	.word	0x0800670f
 800663c:	0800670f 	.word	0x0800670f
 8006640:	080066cb 	.word	0x080066cb
 8006644:	0800670f 	.word	0x0800670f
 8006648:	0800670f 	.word	0x0800670f
 800664c:	0800670f 	.word	0x0800670f
 8006650:	0800670f 	.word	0x0800670f
 8006654:	0800670f 	.word	0x0800670f
 8006658:	0800670f 	.word	0x0800670f
 800665c:	0800670f 	.word	0x0800670f
 8006660:	080066db 	.word	0x080066db
 8006664:	0800670f 	.word	0x0800670f
 8006668:	0800670f 	.word	0x0800670f
 800666c:	0800670f 	.word	0x0800670f
 8006670:	0800670f 	.word	0x0800670f
 8006674:	0800670f 	.word	0x0800670f
 8006678:	0800670f 	.word	0x0800670f
 800667c:	0800670f 	.word	0x0800670f
 8006680:	0800670f 	.word	0x0800670f
 8006684:	0800670f 	.word	0x0800670f
 8006688:	0800670f 	.word	0x0800670f
 800668c:	0800670f 	.word	0x0800670f
 8006690:	0800670f 	.word	0x0800670f
 8006694:	0800670f 	.word	0x0800670f
 8006698:	0800670f 	.word	0x0800670f
 800669c:	0800670f 	.word	0x0800670f
 80066a0:	08006701 	.word	0x08006701
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d02e      	beq.n	8006706 <UART_SetConfig+0x8aa>
 80066a8:	e031      	b.n	800670e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fd ff5d 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 80066ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066b0:	e033      	b.n	800671a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b2:	f7fd ff6f 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 80066b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066b8:	e02f      	b.n	800671a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe feda 	bl	8005478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c8:	e027      	b.n	800671a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ca:	f107 0318 	add.w	r3, r7, #24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff f826 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066d8:	e01f      	b.n	800671a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066da:	4b2d      	ldr	r3, [pc, #180]	; (8006790 <UART_SetConfig+0x934>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <UART_SetConfig+0x934>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	4a24      	ldr	r2, [pc, #144]	; (8006784 <UART_SetConfig+0x928>)
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066f8:	e00f      	b.n	800671a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80066fa:	4b22      	ldr	r3, [pc, #136]	; (8006784 <UART_SetConfig+0x928>)
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fe:	e00c      	b.n	800671a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006700:	4b21      	ldr	r3, [pc, #132]	; (8006788 <UART_SetConfig+0x92c>)
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006704:	e009      	b.n	800671a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800670c:	e005      	b.n	800671a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80e7 	beq.w	80068f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	4a19      	ldr	r2, [pc, #100]	; (800678c <UART_SetConfig+0x930>)
 8006728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800672c:	461a      	mov	r2, r3
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	fbb3 f3f2 	udiv	r3, r3, r2
 8006734:	005a      	lsls	r2, r3, #1
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d916      	bls.n	800677c <UART_SetConfig+0x920>
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d212      	bcs.n	800677c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	b29b      	uxth	r3, r3
 800675a:	f023 030f 	bic.w	r3, r3, #15
 800675e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	b29a      	uxth	r2, r3
 800676c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800676e:	4313      	orrs	r3, r2
 8006770:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e0b9      	b.n	80068f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006782:	e0b5      	b.n	80068f0 <UART_SetConfig+0xa94>
 8006784:	03d09000 	.word	0x03d09000
 8006788:	003d0900 	.word	0x003d0900
 800678c:	08007e54 	.word	0x08007e54
 8006790:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006794:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006798:	2b20      	cmp	r3, #32
 800679a:	dc49      	bgt.n	8006830 <UART_SetConfig+0x9d4>
 800679c:	2b00      	cmp	r3, #0
 800679e:	db7c      	blt.n	800689a <UART_SetConfig+0xa3e>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d87a      	bhi.n	800689a <UART_SetConfig+0xa3e>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x950>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	08006837 	.word	0x08006837
 80067b0:	0800683f 	.word	0x0800683f
 80067b4:	0800689b 	.word	0x0800689b
 80067b8:	0800689b 	.word	0x0800689b
 80067bc:	08006847 	.word	0x08006847
 80067c0:	0800689b 	.word	0x0800689b
 80067c4:	0800689b 	.word	0x0800689b
 80067c8:	0800689b 	.word	0x0800689b
 80067cc:	08006857 	.word	0x08006857
 80067d0:	0800689b 	.word	0x0800689b
 80067d4:	0800689b 	.word	0x0800689b
 80067d8:	0800689b 	.word	0x0800689b
 80067dc:	0800689b 	.word	0x0800689b
 80067e0:	0800689b 	.word	0x0800689b
 80067e4:	0800689b 	.word	0x0800689b
 80067e8:	0800689b 	.word	0x0800689b
 80067ec:	08006867 	.word	0x08006867
 80067f0:	0800689b 	.word	0x0800689b
 80067f4:	0800689b 	.word	0x0800689b
 80067f8:	0800689b 	.word	0x0800689b
 80067fc:	0800689b 	.word	0x0800689b
 8006800:	0800689b 	.word	0x0800689b
 8006804:	0800689b 	.word	0x0800689b
 8006808:	0800689b 	.word	0x0800689b
 800680c:	0800689b 	.word	0x0800689b
 8006810:	0800689b 	.word	0x0800689b
 8006814:	0800689b 	.word	0x0800689b
 8006818:	0800689b 	.word	0x0800689b
 800681c:	0800689b 	.word	0x0800689b
 8006820:	0800689b 	.word	0x0800689b
 8006824:	0800689b 	.word	0x0800689b
 8006828:	0800689b 	.word	0x0800689b
 800682c:	0800688d 	.word	0x0800688d
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d02e      	beq.n	8006892 <UART_SetConfig+0xa36>
 8006834:	e031      	b.n	800689a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006836:	f7fd fe97 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 800683a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800683c:	e033      	b.n	80068a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683e:	f7fd fea9 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8006842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006844:	e02f      	b.n	80068a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fe14 	bl	8005478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006854:	e027      	b.n	80068a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006856:	f107 0318 	add.w	r3, r7, #24
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe ff60 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006864:	e01f      	b.n	80068a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006866:	4b2d      	ldr	r3, [pc, #180]	; (800691c <UART_SetConfig+0xac0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006872:	4b2a      	ldr	r3, [pc, #168]	; (800691c <UART_SetConfig+0xac0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	08db      	lsrs	r3, r3, #3
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	4a28      	ldr	r2, [pc, #160]	; (8006920 <UART_SetConfig+0xac4>)
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006884:	e00f      	b.n	80068a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006886:	4b26      	ldr	r3, [pc, #152]	; (8006920 <UART_SetConfig+0xac4>)
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800688a:	e00c      	b.n	80068a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <UART_SetConfig+0xac8>)
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068a4:	bf00      	nop
    }

    if (pclk != 0U)
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d021      	beq.n	80068f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <UART_SetConfig+0xacc>)
 80068b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	441a      	add	r2, r3
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b0f      	cmp	r3, #15
 80068d4:	d909      	bls.n	80068ea <UART_SetConfig+0xa8e>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d205      	bcs.n	80068ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e002      	b.n	80068f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2200      	movs	r2, #0
 8006904:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800690c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006910:	4618      	mov	r0, r3
 8006912:	3748      	adds	r7, #72	; 0x48
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop
 800691c:	58024400 	.word	0x58024400
 8006920:	03d09000 	.word	0x03d09000
 8006924:	003d0900 	.word	0x003d0900
 8006928:	08007e54 	.word	0x08007e54

0800692c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01a      	beq.n	8006a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2a:	d10a      	bne.n	8006a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  }
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a80:	f7fa fc4c 	bl	800131c <HAL_GetTick>
 8006a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d10e      	bne.n	8006ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f82f 	bl	8006b06 <UART_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e025      	b.n	8006afe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d10e      	bne.n	8006ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f819 	bl	8006b06 <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e00f      	b.n	8006afe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b09c      	sub	sp, #112	; 0x70
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b16:	e0a9      	b.n	8006c6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	f000 80a5 	beq.w	8006c6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b22:	f7fa fbfb 	bl	800131c <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d302      	bcc.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d140      	bne.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e6      	bne.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	663b      	str	r3, [r7, #96]	; 0x60
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e069      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d051      	beq.n	8006c6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd6:	d149      	bne.n	8006c6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
 8006c02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c34:	623a      	str	r2, [r7, #32]
 8006c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69f9      	ldr	r1, [r7, #28]
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e010      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4013      	ands	r3, r2
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2301      	moveq	r3, #1
 8006c7e:	2300      	movne	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	f43f af46 	beq.w	8006b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3770      	adds	r7, #112	; 0x70
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_UARTEx_DisableFifoMode+0x16>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e027      	b.n	8006cfc <HAL_UARTEx_DisableFifoMode+0x66>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2224      	movs	r2, #36	; 0x24
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e02d      	b.n	8006d7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f84f 	bl	8006e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e02d      	b.n	8006df8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f811 	bl	8006e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d108      	bne.n	8006e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e20:	e031      	b.n	8006e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e22:	2310      	movs	r3, #16
 8006e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e26:	2310      	movs	r3, #16
 8006e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	0e5b      	lsrs	r3, r3, #25
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	0f5b      	lsrs	r3, r3, #29
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	7b3a      	ldrb	r2, [r7, #12]
 8006e4e:	4911      	ldr	r1, [pc, #68]	; (8006e94 <UARTEx_SetNbDataToProcess+0x94>)
 8006e50:	5c8a      	ldrb	r2, [r1, r2]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e56:	7b3a      	ldrb	r2, [r7, #12]
 8006e58:	490f      	ldr	r1, [pc, #60]	; (8006e98 <UARTEx_SetNbDataToProcess+0x98>)
 8006e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	7b7a      	ldrb	r2, [r7, #13]
 8006e6c:	4909      	ldr	r1, [pc, #36]	; (8006e94 <UARTEx_SetNbDataToProcess+0x94>)
 8006e6e:	5c8a      	ldrb	r2, [r1, r2]
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e74:	7b7a      	ldrb	r2, [r7, #13]
 8006e76:	4908      	ldr	r1, [pc, #32]	; (8006e98 <UARTEx_SetNbDataToProcess+0x98>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	08007e6c 	.word	0x08007e6c
 8006e98:	08007e74 	.word	0x08007e74

08006e9c <__errno>:
 8006e9c:	4b01      	ldr	r3, [pc, #4]	; (8006ea4 <__errno+0x8>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	24000010 	.word	0x24000010

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	; (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	; (8006eec <__libc_init_array+0x44>)
 8006ebc:	f000 ffae 	bl	8007e1c <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	08007f1c 	.word	0x08007f1c
 8006ee4:	08007f1c 	.word	0x08007f1c
 8006ee8:	08007f1c 	.word	0x08007f1c
 8006eec:	08007f20 	.word	0x08007f20

08006ef0 <memset>:
 8006ef0:	4402      	add	r2, r0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d100      	bne.n	8006efa <memset+0xa>
 8006ef8:	4770      	bx	lr
 8006efa:	f803 1b01 	strb.w	r1, [r3], #1
 8006efe:	e7f9      	b.n	8006ef4 <memset+0x4>

08006f00 <iprintf>:
 8006f00:	b40f      	push	{r0, r1, r2, r3}
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <iprintf+0x2c>)
 8006f04:	b513      	push	{r0, r1, r4, lr}
 8006f06:	681c      	ldr	r4, [r3, #0]
 8006f08:	b124      	cbz	r4, 8006f14 <iprintf+0x14>
 8006f0a:	69a3      	ldr	r3, [r4, #24]
 8006f0c:	b913      	cbnz	r3, 8006f14 <iprintf+0x14>
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f866 	bl	8006fe0 <__sinit>
 8006f14:	ab05      	add	r3, sp, #20
 8006f16:	9a04      	ldr	r2, [sp, #16]
 8006f18:	68a1      	ldr	r1, [r4, #8]
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f9bd 	bl	800729c <_vfiprintf_r>
 8006f22:	b002      	add	sp, #8
 8006f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	24000010 	.word	0x24000010

08006f30 <std>:
 8006f30:	2300      	movs	r3, #0
 8006f32:	b510      	push	{r4, lr}
 8006f34:	4604      	mov	r4, r0
 8006f36:	e9c0 3300 	strd	r3, r3, [r0]
 8006f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f3e:	6083      	str	r3, [r0, #8]
 8006f40:	8181      	strh	r1, [r0, #12]
 8006f42:	6643      	str	r3, [r0, #100]	; 0x64
 8006f44:	81c2      	strh	r2, [r0, #14]
 8006f46:	6183      	str	r3, [r0, #24]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2208      	movs	r2, #8
 8006f4c:	305c      	adds	r0, #92	; 0x5c
 8006f4e:	f7ff ffcf 	bl	8006ef0 <memset>
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <std+0x38>)
 8006f54:	6263      	str	r3, [r4, #36]	; 0x24
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <std+0x3c>)
 8006f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <std+0x40>)
 8006f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std+0x44>)
 8006f60:	6224      	str	r4, [r4, #32]
 8006f62:	6323      	str	r3, [r4, #48]	; 0x30
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	bf00      	nop
 8006f68:	08007845 	.word	0x08007845
 8006f6c:	08007867 	.word	0x08007867
 8006f70:	0800789f 	.word	0x0800789f
 8006f74:	080078c3 	.word	0x080078c3

08006f78 <_cleanup_r>:
 8006f78:	4901      	ldr	r1, [pc, #4]	; (8006f80 <_cleanup_r+0x8>)
 8006f7a:	f000 b8af 	b.w	80070dc <_fwalk_reent>
 8006f7e:	bf00      	nop
 8006f80:	08007b9d 	.word	0x08007b9d

08006f84 <__sfmoreglue>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	2268      	movs	r2, #104	; 0x68
 8006f88:	1e4d      	subs	r5, r1, #1
 8006f8a:	4355      	muls	r5, r2
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f92:	f000 f8e5 	bl	8007160 <_malloc_r>
 8006f96:	4604      	mov	r4, r0
 8006f98:	b140      	cbz	r0, 8006fac <__sfmoreglue+0x28>
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8006fa0:	300c      	adds	r0, #12
 8006fa2:	60a0      	str	r0, [r4, #8]
 8006fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fa8:	f7ff ffa2 	bl	8006ef0 <memset>
 8006fac:	4620      	mov	r0, r4
 8006fae:	bd70      	pop	{r4, r5, r6, pc}

08006fb0 <__sfp_lock_acquire>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <__sfp_lock_acquire+0x8>)
 8006fb2:	f000 b8b3 	b.w	800711c <__retarget_lock_acquire_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	240002f5 	.word	0x240002f5

08006fbc <__sfp_lock_release>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__sfp_lock_release+0x8>)
 8006fbe:	f000 b8ae 	b.w	800711e <__retarget_lock_release_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	240002f5 	.word	0x240002f5

08006fc8 <__sinit_lock_acquire>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__sinit_lock_acquire+0x8>)
 8006fca:	f000 b8a7 	b.w	800711c <__retarget_lock_acquire_recursive>
 8006fce:	bf00      	nop
 8006fd0:	240002f6 	.word	0x240002f6

08006fd4 <__sinit_lock_release>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__sinit_lock_release+0x8>)
 8006fd6:	f000 b8a2 	b.w	800711e <__retarget_lock_release_recursive>
 8006fda:	bf00      	nop
 8006fdc:	240002f6 	.word	0x240002f6

08006fe0 <__sinit>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	f7ff fff0 	bl	8006fc8 <__sinit_lock_acquire>
 8006fe8:	69a3      	ldr	r3, [r4, #24]
 8006fea:	b11b      	cbz	r3, 8006ff4 <__sinit+0x14>
 8006fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff0:	f7ff bff0 	b.w	8006fd4 <__sinit_lock_release>
 8006ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8006ffa:	4b13      	ldr	r3, [pc, #76]	; (8007048 <__sinit+0x68>)
 8006ffc:	4a13      	ldr	r2, [pc, #76]	; (800704c <__sinit+0x6c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	62a2      	str	r2, [r4, #40]	; 0x28
 8007002:	42a3      	cmp	r3, r4
 8007004:	bf04      	itt	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	61a3      	streq	r3, [r4, #24]
 800700a:	4620      	mov	r0, r4
 800700c:	f000 f820 	bl	8007050 <__sfp>
 8007010:	6060      	str	r0, [r4, #4]
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f81c 	bl	8007050 <__sfp>
 8007018:	60a0      	str	r0, [r4, #8]
 800701a:	4620      	mov	r0, r4
 800701c:	f000 f818 	bl	8007050 <__sfp>
 8007020:	2200      	movs	r2, #0
 8007022:	60e0      	str	r0, [r4, #12]
 8007024:	2104      	movs	r1, #4
 8007026:	6860      	ldr	r0, [r4, #4]
 8007028:	f7ff ff82 	bl	8006f30 <std>
 800702c:	68a0      	ldr	r0, [r4, #8]
 800702e:	2201      	movs	r2, #1
 8007030:	2109      	movs	r1, #9
 8007032:	f7ff ff7d 	bl	8006f30 <std>
 8007036:	68e0      	ldr	r0, [r4, #12]
 8007038:	2202      	movs	r2, #2
 800703a:	2112      	movs	r1, #18
 800703c:	f7ff ff78 	bl	8006f30 <std>
 8007040:	2301      	movs	r3, #1
 8007042:	61a3      	str	r3, [r4, #24]
 8007044:	e7d2      	b.n	8006fec <__sinit+0xc>
 8007046:	bf00      	nop
 8007048:	08007e7c 	.word	0x08007e7c
 800704c:	08006f79 	.word	0x08006f79

08007050 <__sfp>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	4607      	mov	r7, r0
 8007054:	f7ff ffac 	bl	8006fb0 <__sfp_lock_acquire>
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <__sfp+0x84>)
 800705a:	681e      	ldr	r6, [r3, #0]
 800705c:	69b3      	ldr	r3, [r6, #24]
 800705e:	b913      	cbnz	r3, 8007066 <__sfp+0x16>
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff ffbd 	bl	8006fe0 <__sinit>
 8007066:	3648      	adds	r6, #72	; 0x48
 8007068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800706c:	3b01      	subs	r3, #1
 800706e:	d503      	bpl.n	8007078 <__sfp+0x28>
 8007070:	6833      	ldr	r3, [r6, #0]
 8007072:	b30b      	cbz	r3, 80070b8 <__sfp+0x68>
 8007074:	6836      	ldr	r6, [r6, #0]
 8007076:	e7f7      	b.n	8007068 <__sfp+0x18>
 8007078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800707c:	b9d5      	cbnz	r5, 80070b4 <__sfp+0x64>
 800707e:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <__sfp+0x88>)
 8007080:	60e3      	str	r3, [r4, #12]
 8007082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007086:	6665      	str	r5, [r4, #100]	; 0x64
 8007088:	f000 f847 	bl	800711a <__retarget_lock_init_recursive>
 800708c:	f7ff ff96 	bl	8006fbc <__sfp_lock_release>
 8007090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007098:	6025      	str	r5, [r4, #0]
 800709a:	61a5      	str	r5, [r4, #24]
 800709c:	2208      	movs	r2, #8
 800709e:	4629      	mov	r1, r5
 80070a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070a4:	f7ff ff24 	bl	8006ef0 <memset>
 80070a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070b0:	4620      	mov	r0, r4
 80070b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b4:	3468      	adds	r4, #104	; 0x68
 80070b6:	e7d9      	b.n	800706c <__sfp+0x1c>
 80070b8:	2104      	movs	r1, #4
 80070ba:	4638      	mov	r0, r7
 80070bc:	f7ff ff62 	bl	8006f84 <__sfmoreglue>
 80070c0:	4604      	mov	r4, r0
 80070c2:	6030      	str	r0, [r6, #0]
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d1d5      	bne.n	8007074 <__sfp+0x24>
 80070c8:	f7ff ff78 	bl	8006fbc <__sfp_lock_release>
 80070cc:	230c      	movs	r3, #12
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	e7ee      	b.n	80070b0 <__sfp+0x60>
 80070d2:	bf00      	nop
 80070d4:	08007e7c 	.word	0x08007e7c
 80070d8:	ffff0001 	.word	0xffff0001

080070dc <_fwalk_reent>:
 80070dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e0:	4606      	mov	r6, r0
 80070e2:	4688      	mov	r8, r1
 80070e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070e8:	2700      	movs	r7, #0
 80070ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ee:	f1b9 0901 	subs.w	r9, r9, #1
 80070f2:	d505      	bpl.n	8007100 <_fwalk_reent+0x24>
 80070f4:	6824      	ldr	r4, [r4, #0]
 80070f6:	2c00      	cmp	r4, #0
 80070f8:	d1f7      	bne.n	80070ea <_fwalk_reent+0xe>
 80070fa:	4638      	mov	r0, r7
 80070fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007100:	89ab      	ldrh	r3, [r5, #12]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d907      	bls.n	8007116 <_fwalk_reent+0x3a>
 8007106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800710a:	3301      	adds	r3, #1
 800710c:	d003      	beq.n	8007116 <_fwalk_reent+0x3a>
 800710e:	4629      	mov	r1, r5
 8007110:	4630      	mov	r0, r6
 8007112:	47c0      	blx	r8
 8007114:	4307      	orrs	r7, r0
 8007116:	3568      	adds	r5, #104	; 0x68
 8007118:	e7e9      	b.n	80070ee <_fwalk_reent+0x12>

0800711a <__retarget_lock_init_recursive>:
 800711a:	4770      	bx	lr

0800711c <__retarget_lock_acquire_recursive>:
 800711c:	4770      	bx	lr

0800711e <__retarget_lock_release_recursive>:
 800711e:	4770      	bx	lr

08007120 <sbrk_aligned>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4e0e      	ldr	r6, [pc, #56]	; (800715c <sbrk_aligned+0x3c>)
 8007124:	460c      	mov	r4, r1
 8007126:	6831      	ldr	r1, [r6, #0]
 8007128:	4605      	mov	r5, r0
 800712a:	b911      	cbnz	r1, 8007132 <sbrk_aligned+0x12>
 800712c:	f000 fb7a 	bl	8007824 <_sbrk_r>
 8007130:	6030      	str	r0, [r6, #0]
 8007132:	4621      	mov	r1, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 fb75 	bl	8007824 <_sbrk_r>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d00a      	beq.n	8007154 <sbrk_aligned+0x34>
 800713e:	1cc4      	adds	r4, r0, #3
 8007140:	f024 0403 	bic.w	r4, r4, #3
 8007144:	42a0      	cmp	r0, r4
 8007146:	d007      	beq.n	8007158 <sbrk_aligned+0x38>
 8007148:	1a21      	subs	r1, r4, r0
 800714a:	4628      	mov	r0, r5
 800714c:	f000 fb6a 	bl	8007824 <_sbrk_r>
 8007150:	3001      	adds	r0, #1
 8007152:	d101      	bne.n	8007158 <sbrk_aligned+0x38>
 8007154:	f04f 34ff 	mov.w	r4, #4294967295
 8007158:	4620      	mov	r0, r4
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	240002fc 	.word	0x240002fc

08007160 <_malloc_r>:
 8007160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007164:	1ccd      	adds	r5, r1, #3
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	2d00      	cmp	r5, #0
 8007174:	4607      	mov	r7, r0
 8007176:	db01      	blt.n	800717c <_malloc_r+0x1c>
 8007178:	42a9      	cmp	r1, r5
 800717a:	d905      	bls.n	8007188 <_malloc_r+0x28>
 800717c:	230c      	movs	r3, #12
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	2600      	movs	r6, #0
 8007182:	4630      	mov	r0, r6
 8007184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007188:	4e2e      	ldr	r6, [pc, #184]	; (8007244 <_malloc_r+0xe4>)
 800718a:	f000 fdbb 	bl	8007d04 <__malloc_lock>
 800718e:	6833      	ldr	r3, [r6, #0]
 8007190:	461c      	mov	r4, r3
 8007192:	bb34      	cbnz	r4, 80071e2 <_malloc_r+0x82>
 8007194:	4629      	mov	r1, r5
 8007196:	4638      	mov	r0, r7
 8007198:	f7ff ffc2 	bl	8007120 <sbrk_aligned>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	4604      	mov	r4, r0
 80071a0:	d14d      	bne.n	800723e <_malloc_r+0xde>
 80071a2:	6834      	ldr	r4, [r6, #0]
 80071a4:	4626      	mov	r6, r4
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	d140      	bne.n	800722c <_malloc_r+0xcc>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	4631      	mov	r1, r6
 80071ae:	4638      	mov	r0, r7
 80071b0:	eb04 0803 	add.w	r8, r4, r3
 80071b4:	f000 fb36 	bl	8007824 <_sbrk_r>
 80071b8:	4580      	cmp	r8, r0
 80071ba:	d13a      	bne.n	8007232 <_malloc_r+0xd2>
 80071bc:	6821      	ldr	r1, [r4, #0]
 80071be:	3503      	adds	r5, #3
 80071c0:	1a6d      	subs	r5, r5, r1
 80071c2:	f025 0503 	bic.w	r5, r5, #3
 80071c6:	3508      	adds	r5, #8
 80071c8:	2d0c      	cmp	r5, #12
 80071ca:	bf38      	it	cc
 80071cc:	250c      	movcc	r5, #12
 80071ce:	4629      	mov	r1, r5
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff ffa5 	bl	8007120 <sbrk_aligned>
 80071d6:	3001      	adds	r0, #1
 80071d8:	d02b      	beq.n	8007232 <_malloc_r+0xd2>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	442b      	add	r3, r5
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	e00e      	b.n	8007200 <_malloc_r+0xa0>
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	1b52      	subs	r2, r2, r5
 80071e6:	d41e      	bmi.n	8007226 <_malloc_r+0xc6>
 80071e8:	2a0b      	cmp	r2, #11
 80071ea:	d916      	bls.n	800721a <_malloc_r+0xba>
 80071ec:	1961      	adds	r1, r4, r5
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	6025      	str	r5, [r4, #0]
 80071f2:	bf18      	it	ne
 80071f4:	6059      	strne	r1, [r3, #4]
 80071f6:	6863      	ldr	r3, [r4, #4]
 80071f8:	bf08      	it	eq
 80071fa:	6031      	streq	r1, [r6, #0]
 80071fc:	5162      	str	r2, [r4, r5]
 80071fe:	604b      	str	r3, [r1, #4]
 8007200:	4638      	mov	r0, r7
 8007202:	f104 060b 	add.w	r6, r4, #11
 8007206:	f000 fd83 	bl	8007d10 <__malloc_unlock>
 800720a:	f026 0607 	bic.w	r6, r6, #7
 800720e:	1d23      	adds	r3, r4, #4
 8007210:	1af2      	subs	r2, r6, r3
 8007212:	d0b6      	beq.n	8007182 <_malloc_r+0x22>
 8007214:	1b9b      	subs	r3, r3, r6
 8007216:	50a3      	str	r3, [r4, r2]
 8007218:	e7b3      	b.n	8007182 <_malloc_r+0x22>
 800721a:	6862      	ldr	r2, [r4, #4]
 800721c:	42a3      	cmp	r3, r4
 800721e:	bf0c      	ite	eq
 8007220:	6032      	streq	r2, [r6, #0]
 8007222:	605a      	strne	r2, [r3, #4]
 8007224:	e7ec      	b.n	8007200 <_malloc_r+0xa0>
 8007226:	4623      	mov	r3, r4
 8007228:	6864      	ldr	r4, [r4, #4]
 800722a:	e7b2      	b.n	8007192 <_malloc_r+0x32>
 800722c:	4634      	mov	r4, r6
 800722e:	6876      	ldr	r6, [r6, #4]
 8007230:	e7b9      	b.n	80071a6 <_malloc_r+0x46>
 8007232:	230c      	movs	r3, #12
 8007234:	603b      	str	r3, [r7, #0]
 8007236:	4638      	mov	r0, r7
 8007238:	f000 fd6a 	bl	8007d10 <__malloc_unlock>
 800723c:	e7a1      	b.n	8007182 <_malloc_r+0x22>
 800723e:	6025      	str	r5, [r4, #0]
 8007240:	e7de      	b.n	8007200 <_malloc_r+0xa0>
 8007242:	bf00      	nop
 8007244:	240002f8 	.word	0x240002f8

08007248 <__sfputc_r>:
 8007248:	6893      	ldr	r3, [r2, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	b410      	push	{r4}
 8007250:	6093      	str	r3, [r2, #8]
 8007252:	da08      	bge.n	8007266 <__sfputc_r+0x1e>
 8007254:	6994      	ldr	r4, [r2, #24]
 8007256:	42a3      	cmp	r3, r4
 8007258:	db01      	blt.n	800725e <__sfputc_r+0x16>
 800725a:	290a      	cmp	r1, #10
 800725c:	d103      	bne.n	8007266 <__sfputc_r+0x1e>
 800725e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007262:	f000 bb33 	b.w	80078cc <__swbuf_r>
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	1c58      	adds	r0, r3, #1
 800726a:	6010      	str	r0, [r2, #0]
 800726c:	7019      	strb	r1, [r3, #0]
 800726e:	4608      	mov	r0, r1
 8007270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007274:	4770      	bx	lr

08007276 <__sfputs_r>:
 8007276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007278:	4606      	mov	r6, r0
 800727a:	460f      	mov	r7, r1
 800727c:	4614      	mov	r4, r2
 800727e:	18d5      	adds	r5, r2, r3
 8007280:	42ac      	cmp	r4, r5
 8007282:	d101      	bne.n	8007288 <__sfputs_r+0x12>
 8007284:	2000      	movs	r0, #0
 8007286:	e007      	b.n	8007298 <__sfputs_r+0x22>
 8007288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728c:	463a      	mov	r2, r7
 800728e:	4630      	mov	r0, r6
 8007290:	f7ff ffda 	bl	8007248 <__sfputc_r>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d1f3      	bne.n	8007280 <__sfputs_r+0xa>
 8007298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800729c <_vfiprintf_r>:
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	460d      	mov	r5, r1
 80072a2:	b09d      	sub	sp, #116	; 0x74
 80072a4:	4614      	mov	r4, r2
 80072a6:	4698      	mov	r8, r3
 80072a8:	4606      	mov	r6, r0
 80072aa:	b118      	cbz	r0, 80072b4 <_vfiprintf_r+0x18>
 80072ac:	6983      	ldr	r3, [r0, #24]
 80072ae:	b90b      	cbnz	r3, 80072b4 <_vfiprintf_r+0x18>
 80072b0:	f7ff fe96 	bl	8006fe0 <__sinit>
 80072b4:	4b89      	ldr	r3, [pc, #548]	; (80074dc <_vfiprintf_r+0x240>)
 80072b6:	429d      	cmp	r5, r3
 80072b8:	d11b      	bne.n	80072f2 <_vfiprintf_r+0x56>
 80072ba:	6875      	ldr	r5, [r6, #4]
 80072bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_vfiprintf_r+0x32>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	059a      	lsls	r2, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_vfiprintf_r+0x32>
 80072c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ca:	f7ff ff27 	bl	800711c <__retarget_lock_acquire_recursive>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	071b      	lsls	r3, r3, #28
 80072d2:	d501      	bpl.n	80072d8 <_vfiprintf_r+0x3c>
 80072d4:	692b      	ldr	r3, [r5, #16]
 80072d6:	b9eb      	cbnz	r3, 8007314 <_vfiprintf_r+0x78>
 80072d8:	4629      	mov	r1, r5
 80072da:	4630      	mov	r0, r6
 80072dc:	f000 fb5a 	bl	8007994 <__swsetup_r>
 80072e0:	b1c0      	cbz	r0, 8007314 <_vfiprintf_r+0x78>
 80072e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e4:	07dc      	lsls	r4, r3, #31
 80072e6:	d50e      	bpl.n	8007306 <_vfiprintf_r+0x6a>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b01d      	add	sp, #116	; 0x74
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	4b7b      	ldr	r3, [pc, #492]	; (80074e0 <_vfiprintf_r+0x244>)
 80072f4:	429d      	cmp	r5, r3
 80072f6:	d101      	bne.n	80072fc <_vfiprintf_r+0x60>
 80072f8:	68b5      	ldr	r5, [r6, #8]
 80072fa:	e7df      	b.n	80072bc <_vfiprintf_r+0x20>
 80072fc:	4b79      	ldr	r3, [pc, #484]	; (80074e4 <_vfiprintf_r+0x248>)
 80072fe:	429d      	cmp	r5, r3
 8007300:	bf08      	it	eq
 8007302:	68f5      	ldreq	r5, [r6, #12]
 8007304:	e7da      	b.n	80072bc <_vfiprintf_r+0x20>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	0598      	lsls	r0, r3, #22
 800730a:	d4ed      	bmi.n	80072e8 <_vfiprintf_r+0x4c>
 800730c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800730e:	f7ff ff06 	bl	800711e <__retarget_lock_release_recursive>
 8007312:	e7e9      	b.n	80072e8 <_vfiprintf_r+0x4c>
 8007314:	2300      	movs	r3, #0
 8007316:	9309      	str	r3, [sp, #36]	; 0x24
 8007318:	2320      	movs	r3, #32
 800731a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800731e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007322:	2330      	movs	r3, #48	; 0x30
 8007324:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074e8 <_vfiprintf_r+0x24c>
 8007328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800732c:	f04f 0901 	mov.w	r9, #1
 8007330:	4623      	mov	r3, r4
 8007332:	469a      	mov	sl, r3
 8007334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007338:	b10a      	cbz	r2, 800733e <_vfiprintf_r+0xa2>
 800733a:	2a25      	cmp	r2, #37	; 0x25
 800733c:	d1f9      	bne.n	8007332 <_vfiprintf_r+0x96>
 800733e:	ebba 0b04 	subs.w	fp, sl, r4
 8007342:	d00b      	beq.n	800735c <_vfiprintf_r+0xc0>
 8007344:	465b      	mov	r3, fp
 8007346:	4622      	mov	r2, r4
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f7ff ff93 	bl	8007276 <__sfputs_r>
 8007350:	3001      	adds	r0, #1
 8007352:	f000 80aa 	beq.w	80074aa <_vfiprintf_r+0x20e>
 8007356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007358:	445a      	add	r2, fp
 800735a:	9209      	str	r2, [sp, #36]	; 0x24
 800735c:	f89a 3000 	ldrb.w	r3, [sl]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80a2 	beq.w	80074aa <_vfiprintf_r+0x20e>
 8007366:	2300      	movs	r3, #0
 8007368:	f04f 32ff 	mov.w	r2, #4294967295
 800736c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007370:	f10a 0a01 	add.w	sl, sl, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	9307      	str	r3, [sp, #28]
 8007378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800737c:	931a      	str	r3, [sp, #104]	; 0x68
 800737e:	4654      	mov	r4, sl
 8007380:	2205      	movs	r2, #5
 8007382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007386:	4858      	ldr	r0, [pc, #352]	; (80074e8 <_vfiprintf_r+0x24c>)
 8007388:	f7f8 ffaa 	bl	80002e0 <memchr>
 800738c:	9a04      	ldr	r2, [sp, #16]
 800738e:	b9d8      	cbnz	r0, 80073c8 <_vfiprintf_r+0x12c>
 8007390:	06d1      	lsls	r1, r2, #27
 8007392:	bf44      	itt	mi
 8007394:	2320      	movmi	r3, #32
 8007396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739a:	0713      	lsls	r3, r2, #28
 800739c:	bf44      	itt	mi
 800739e:	232b      	movmi	r3, #43	; 0x2b
 80073a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a4:	f89a 3000 	ldrb.w	r3, [sl]
 80073a8:	2b2a      	cmp	r3, #42	; 0x2a
 80073aa:	d015      	beq.n	80073d8 <_vfiprintf_r+0x13c>
 80073ac:	9a07      	ldr	r2, [sp, #28]
 80073ae:	4654      	mov	r4, sl
 80073b0:	2000      	movs	r0, #0
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	4621      	mov	r1, r4
 80073b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073bc:	3b30      	subs	r3, #48	; 0x30
 80073be:	2b09      	cmp	r3, #9
 80073c0:	d94e      	bls.n	8007460 <_vfiprintf_r+0x1c4>
 80073c2:	b1b0      	cbz	r0, 80073f2 <_vfiprintf_r+0x156>
 80073c4:	9207      	str	r2, [sp, #28]
 80073c6:	e014      	b.n	80073f2 <_vfiprintf_r+0x156>
 80073c8:	eba0 0308 	sub.w	r3, r0, r8
 80073cc:	fa09 f303 	lsl.w	r3, r9, r3
 80073d0:	4313      	orrs	r3, r2
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	46a2      	mov	sl, r4
 80073d6:	e7d2      	b.n	800737e <_vfiprintf_r+0xe2>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1d19      	adds	r1, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	9103      	str	r1, [sp, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfbb      	ittet	lt
 80073e4:	425b      	neglt	r3, r3
 80073e6:	f042 0202 	orrlt.w	r2, r2, #2
 80073ea:	9307      	strge	r3, [sp, #28]
 80073ec:	9307      	strlt	r3, [sp, #28]
 80073ee:	bfb8      	it	lt
 80073f0:	9204      	strlt	r2, [sp, #16]
 80073f2:	7823      	ldrb	r3, [r4, #0]
 80073f4:	2b2e      	cmp	r3, #46	; 0x2e
 80073f6:	d10c      	bne.n	8007412 <_vfiprintf_r+0x176>
 80073f8:	7863      	ldrb	r3, [r4, #1]
 80073fa:	2b2a      	cmp	r3, #42	; 0x2a
 80073fc:	d135      	bne.n	800746a <_vfiprintf_r+0x1ce>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9203      	str	r2, [sp, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfb8      	it	lt
 800740a:	f04f 33ff 	movlt.w	r3, #4294967295
 800740e:	3402      	adds	r4, #2
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074f8 <_vfiprintf_r+0x25c>
 8007416:	7821      	ldrb	r1, [r4, #0]
 8007418:	2203      	movs	r2, #3
 800741a:	4650      	mov	r0, sl
 800741c:	f7f8 ff60 	bl	80002e0 <memchr>
 8007420:	b140      	cbz	r0, 8007434 <_vfiprintf_r+0x198>
 8007422:	2340      	movs	r3, #64	; 0x40
 8007424:	eba0 000a 	sub.w	r0, r0, sl
 8007428:	fa03 f000 	lsl.w	r0, r3, r0
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	4303      	orrs	r3, r0
 8007430:	3401      	adds	r4, #1
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007438:	482c      	ldr	r0, [pc, #176]	; (80074ec <_vfiprintf_r+0x250>)
 800743a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800743e:	2206      	movs	r2, #6
 8007440:	f7f8 ff4e 	bl	80002e0 <memchr>
 8007444:	2800      	cmp	r0, #0
 8007446:	d03f      	beq.n	80074c8 <_vfiprintf_r+0x22c>
 8007448:	4b29      	ldr	r3, [pc, #164]	; (80074f0 <_vfiprintf_r+0x254>)
 800744a:	bb1b      	cbnz	r3, 8007494 <_vfiprintf_r+0x1f8>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	3307      	adds	r3, #7
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	3308      	adds	r3, #8
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745a:	443b      	add	r3, r7
 800745c:	9309      	str	r3, [sp, #36]	; 0x24
 800745e:	e767      	b.n	8007330 <_vfiprintf_r+0x94>
 8007460:	fb0c 3202 	mla	r2, ip, r2, r3
 8007464:	460c      	mov	r4, r1
 8007466:	2001      	movs	r0, #1
 8007468:	e7a5      	b.n	80073b6 <_vfiprintf_r+0x11a>
 800746a:	2300      	movs	r3, #0
 800746c:	3401      	adds	r4, #1
 800746e:	9305      	str	r3, [sp, #20]
 8007470:	4619      	mov	r1, r3
 8007472:	f04f 0c0a 	mov.w	ip, #10
 8007476:	4620      	mov	r0, r4
 8007478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800747c:	3a30      	subs	r2, #48	; 0x30
 800747e:	2a09      	cmp	r2, #9
 8007480:	d903      	bls.n	800748a <_vfiprintf_r+0x1ee>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0c5      	beq.n	8007412 <_vfiprintf_r+0x176>
 8007486:	9105      	str	r1, [sp, #20]
 8007488:	e7c3      	b.n	8007412 <_vfiprintf_r+0x176>
 800748a:	fb0c 2101 	mla	r1, ip, r1, r2
 800748e:	4604      	mov	r4, r0
 8007490:	2301      	movs	r3, #1
 8007492:	e7f0      	b.n	8007476 <_vfiprintf_r+0x1da>
 8007494:	ab03      	add	r3, sp, #12
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	462a      	mov	r2, r5
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <_vfiprintf_r+0x258>)
 800749c:	a904      	add	r1, sp, #16
 800749e:	4630      	mov	r0, r6
 80074a0:	f3af 8000 	nop.w
 80074a4:	4607      	mov	r7, r0
 80074a6:	1c78      	adds	r0, r7, #1
 80074a8:	d1d6      	bne.n	8007458 <_vfiprintf_r+0x1bc>
 80074aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ac:	07d9      	lsls	r1, r3, #31
 80074ae:	d405      	bmi.n	80074bc <_vfiprintf_r+0x220>
 80074b0:	89ab      	ldrh	r3, [r5, #12]
 80074b2:	059a      	lsls	r2, r3, #22
 80074b4:	d402      	bmi.n	80074bc <_vfiprintf_r+0x220>
 80074b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074b8:	f7ff fe31 	bl	800711e <__retarget_lock_release_recursive>
 80074bc:	89ab      	ldrh	r3, [r5, #12]
 80074be:	065b      	lsls	r3, r3, #25
 80074c0:	f53f af12 	bmi.w	80072e8 <_vfiprintf_r+0x4c>
 80074c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074c6:	e711      	b.n	80072ec <_vfiprintf_r+0x50>
 80074c8:	ab03      	add	r3, sp, #12
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	462a      	mov	r2, r5
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <_vfiprintf_r+0x258>)
 80074d0:	a904      	add	r1, sp, #16
 80074d2:	4630      	mov	r0, r6
 80074d4:	f000 f880 	bl	80075d8 <_printf_i>
 80074d8:	e7e4      	b.n	80074a4 <_vfiprintf_r+0x208>
 80074da:	bf00      	nop
 80074dc:	08007ea0 	.word	0x08007ea0
 80074e0:	08007ec0 	.word	0x08007ec0
 80074e4:	08007e80 	.word	0x08007e80
 80074e8:	08007ee0 	.word	0x08007ee0
 80074ec:	08007eea 	.word	0x08007eea
 80074f0:	00000000 	.word	0x00000000
 80074f4:	08007277 	.word	0x08007277
 80074f8:	08007ee6 	.word	0x08007ee6

080074fc <_printf_common>:
 80074fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	4616      	mov	r6, r2
 8007502:	4699      	mov	r9, r3
 8007504:	688a      	ldr	r2, [r1, #8]
 8007506:	690b      	ldr	r3, [r1, #16]
 8007508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800750c:	4293      	cmp	r3, r2
 800750e:	bfb8      	it	lt
 8007510:	4613      	movlt	r3, r2
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007518:	4607      	mov	r7, r0
 800751a:	460c      	mov	r4, r1
 800751c:	b10a      	cbz	r2, 8007522 <_printf_common+0x26>
 800751e:	3301      	adds	r3, #1
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	0699      	lsls	r1, r3, #26
 8007526:	bf42      	ittt	mi
 8007528:	6833      	ldrmi	r3, [r6, #0]
 800752a:	3302      	addmi	r3, #2
 800752c:	6033      	strmi	r3, [r6, #0]
 800752e:	6825      	ldr	r5, [r4, #0]
 8007530:	f015 0506 	ands.w	r5, r5, #6
 8007534:	d106      	bne.n	8007544 <_printf_common+0x48>
 8007536:	f104 0a19 	add.w	sl, r4, #25
 800753a:	68e3      	ldr	r3, [r4, #12]
 800753c:	6832      	ldr	r2, [r6, #0]
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	42ab      	cmp	r3, r5
 8007542:	dc26      	bgt.n	8007592 <_printf_common+0x96>
 8007544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007548:	1e13      	subs	r3, r2, #0
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	bf18      	it	ne
 800754e:	2301      	movne	r3, #1
 8007550:	0692      	lsls	r2, r2, #26
 8007552:	d42b      	bmi.n	80075ac <_printf_common+0xb0>
 8007554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007558:	4649      	mov	r1, r9
 800755a:	4638      	mov	r0, r7
 800755c:	47c0      	blx	r8
 800755e:	3001      	adds	r0, #1
 8007560:	d01e      	beq.n	80075a0 <_printf_common+0xa4>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	68e5      	ldr	r5, [r4, #12]
 8007566:	6832      	ldr	r2, [r6, #0]
 8007568:	f003 0306 	and.w	r3, r3, #6
 800756c:	2b04      	cmp	r3, #4
 800756e:	bf08      	it	eq
 8007570:	1aad      	subeq	r5, r5, r2
 8007572:	68a3      	ldr	r3, [r4, #8]
 8007574:	6922      	ldr	r2, [r4, #16]
 8007576:	bf0c      	ite	eq
 8007578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800757c:	2500      	movne	r5, #0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfc4      	itt	gt
 8007582:	1a9b      	subgt	r3, r3, r2
 8007584:	18ed      	addgt	r5, r5, r3
 8007586:	2600      	movs	r6, #0
 8007588:	341a      	adds	r4, #26
 800758a:	42b5      	cmp	r5, r6
 800758c:	d11a      	bne.n	80075c4 <_printf_common+0xc8>
 800758e:	2000      	movs	r0, #0
 8007590:	e008      	b.n	80075a4 <_printf_common+0xa8>
 8007592:	2301      	movs	r3, #1
 8007594:	4652      	mov	r2, sl
 8007596:	4649      	mov	r1, r9
 8007598:	4638      	mov	r0, r7
 800759a:	47c0      	blx	r8
 800759c:	3001      	adds	r0, #1
 800759e:	d103      	bne.n	80075a8 <_printf_common+0xac>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	3501      	adds	r5, #1
 80075aa:	e7c6      	b.n	800753a <_printf_common+0x3e>
 80075ac:	18e1      	adds	r1, r4, r3
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	2030      	movs	r0, #48	; 0x30
 80075b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b6:	4422      	add	r2, r4
 80075b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075c0:	3302      	adds	r3, #2
 80075c2:	e7c7      	b.n	8007554 <_printf_common+0x58>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4622      	mov	r2, r4
 80075c8:	4649      	mov	r1, r9
 80075ca:	4638      	mov	r0, r7
 80075cc:	47c0      	blx	r8
 80075ce:	3001      	adds	r0, #1
 80075d0:	d0e6      	beq.n	80075a0 <_printf_common+0xa4>
 80075d2:	3601      	adds	r6, #1
 80075d4:	e7d9      	b.n	800758a <_printf_common+0x8e>
	...

080075d8 <_printf_i>:
 80075d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	7e0f      	ldrb	r7, [r1, #24]
 80075de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e0:	2f78      	cmp	r7, #120	; 0x78
 80075e2:	4691      	mov	r9, r2
 80075e4:	4680      	mov	r8, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	469a      	mov	sl, r3
 80075ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ee:	d807      	bhi.n	8007600 <_printf_i+0x28>
 80075f0:	2f62      	cmp	r7, #98	; 0x62
 80075f2:	d80a      	bhi.n	800760a <_printf_i+0x32>
 80075f4:	2f00      	cmp	r7, #0
 80075f6:	f000 80d8 	beq.w	80077aa <_printf_i+0x1d2>
 80075fa:	2f58      	cmp	r7, #88	; 0x58
 80075fc:	f000 80a3 	beq.w	8007746 <_printf_i+0x16e>
 8007600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007608:	e03a      	b.n	8007680 <_printf_i+0xa8>
 800760a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760e:	2b15      	cmp	r3, #21
 8007610:	d8f6      	bhi.n	8007600 <_printf_i+0x28>
 8007612:	a101      	add	r1, pc, #4	; (adr r1, 8007618 <_printf_i+0x40>)
 8007614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007618:	08007671 	.word	0x08007671
 800761c:	08007685 	.word	0x08007685
 8007620:	08007601 	.word	0x08007601
 8007624:	08007601 	.word	0x08007601
 8007628:	08007601 	.word	0x08007601
 800762c:	08007601 	.word	0x08007601
 8007630:	08007685 	.word	0x08007685
 8007634:	08007601 	.word	0x08007601
 8007638:	08007601 	.word	0x08007601
 800763c:	08007601 	.word	0x08007601
 8007640:	08007601 	.word	0x08007601
 8007644:	08007791 	.word	0x08007791
 8007648:	080076b5 	.word	0x080076b5
 800764c:	08007773 	.word	0x08007773
 8007650:	08007601 	.word	0x08007601
 8007654:	08007601 	.word	0x08007601
 8007658:	080077b3 	.word	0x080077b3
 800765c:	08007601 	.word	0x08007601
 8007660:	080076b5 	.word	0x080076b5
 8007664:	08007601 	.word	0x08007601
 8007668:	08007601 	.word	0x08007601
 800766c:	0800777b 	.word	0x0800777b
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	602a      	str	r2, [r5, #0]
 8007678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800767c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007680:	2301      	movs	r3, #1
 8007682:	e0a3      	b.n	80077cc <_printf_i+0x1f4>
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	6829      	ldr	r1, [r5, #0]
 8007688:	0606      	lsls	r6, r0, #24
 800768a:	f101 0304 	add.w	r3, r1, #4
 800768e:	d50a      	bpl.n	80076a6 <_printf_i+0xce>
 8007690:	680e      	ldr	r6, [r1, #0]
 8007692:	602b      	str	r3, [r5, #0]
 8007694:	2e00      	cmp	r6, #0
 8007696:	da03      	bge.n	80076a0 <_printf_i+0xc8>
 8007698:	232d      	movs	r3, #45	; 0x2d
 800769a:	4276      	negs	r6, r6
 800769c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a0:	485e      	ldr	r0, [pc, #376]	; (800781c <_printf_i+0x244>)
 80076a2:	230a      	movs	r3, #10
 80076a4:	e019      	b.n	80076da <_printf_i+0x102>
 80076a6:	680e      	ldr	r6, [r1, #0]
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076ae:	bf18      	it	ne
 80076b0:	b236      	sxthne	r6, r6
 80076b2:	e7ef      	b.n	8007694 <_printf_i+0xbc>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	6820      	ldr	r0, [r4, #0]
 80076b8:	1d19      	adds	r1, r3, #4
 80076ba:	6029      	str	r1, [r5, #0]
 80076bc:	0601      	lsls	r1, r0, #24
 80076be:	d501      	bpl.n	80076c4 <_printf_i+0xec>
 80076c0:	681e      	ldr	r6, [r3, #0]
 80076c2:	e002      	b.n	80076ca <_printf_i+0xf2>
 80076c4:	0646      	lsls	r6, r0, #25
 80076c6:	d5fb      	bpl.n	80076c0 <_printf_i+0xe8>
 80076c8:	881e      	ldrh	r6, [r3, #0]
 80076ca:	4854      	ldr	r0, [pc, #336]	; (800781c <_printf_i+0x244>)
 80076cc:	2f6f      	cmp	r7, #111	; 0x6f
 80076ce:	bf0c      	ite	eq
 80076d0:	2308      	moveq	r3, #8
 80076d2:	230a      	movne	r3, #10
 80076d4:	2100      	movs	r1, #0
 80076d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076da:	6865      	ldr	r5, [r4, #4]
 80076dc:	60a5      	str	r5, [r4, #8]
 80076de:	2d00      	cmp	r5, #0
 80076e0:	bfa2      	ittt	ge
 80076e2:	6821      	ldrge	r1, [r4, #0]
 80076e4:	f021 0104 	bicge.w	r1, r1, #4
 80076e8:	6021      	strge	r1, [r4, #0]
 80076ea:	b90e      	cbnz	r6, 80076f0 <_printf_i+0x118>
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	d04d      	beq.n	800778c <_printf_i+0x1b4>
 80076f0:	4615      	mov	r5, r2
 80076f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80076f6:	fb03 6711 	mls	r7, r3, r1, r6
 80076fa:	5dc7      	ldrb	r7, [r0, r7]
 80076fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007700:	4637      	mov	r7, r6
 8007702:	42bb      	cmp	r3, r7
 8007704:	460e      	mov	r6, r1
 8007706:	d9f4      	bls.n	80076f2 <_printf_i+0x11a>
 8007708:	2b08      	cmp	r3, #8
 800770a:	d10b      	bne.n	8007724 <_printf_i+0x14c>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	07de      	lsls	r6, r3, #31
 8007710:	d508      	bpl.n	8007724 <_printf_i+0x14c>
 8007712:	6923      	ldr	r3, [r4, #16]
 8007714:	6861      	ldr	r1, [r4, #4]
 8007716:	4299      	cmp	r1, r3
 8007718:	bfde      	ittt	le
 800771a:	2330      	movle	r3, #48	; 0x30
 800771c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007724:	1b52      	subs	r2, r2, r5
 8007726:	6122      	str	r2, [r4, #16]
 8007728:	f8cd a000 	str.w	sl, [sp]
 800772c:	464b      	mov	r3, r9
 800772e:	aa03      	add	r2, sp, #12
 8007730:	4621      	mov	r1, r4
 8007732:	4640      	mov	r0, r8
 8007734:	f7ff fee2 	bl	80074fc <_printf_common>
 8007738:	3001      	adds	r0, #1
 800773a:	d14c      	bne.n	80077d6 <_printf_i+0x1fe>
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	b004      	add	sp, #16
 8007742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007746:	4835      	ldr	r0, [pc, #212]	; (800781c <_printf_i+0x244>)
 8007748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800774c:	6829      	ldr	r1, [r5, #0]
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	f851 6b04 	ldr.w	r6, [r1], #4
 8007754:	6029      	str	r1, [r5, #0]
 8007756:	061d      	lsls	r5, r3, #24
 8007758:	d514      	bpl.n	8007784 <_printf_i+0x1ac>
 800775a:	07df      	lsls	r7, r3, #31
 800775c:	bf44      	itt	mi
 800775e:	f043 0320 	orrmi.w	r3, r3, #32
 8007762:	6023      	strmi	r3, [r4, #0]
 8007764:	b91e      	cbnz	r6, 800776e <_printf_i+0x196>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	f023 0320 	bic.w	r3, r3, #32
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	2310      	movs	r3, #16
 8007770:	e7b0      	b.n	80076d4 <_printf_i+0xfc>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f043 0320 	orr.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	2378      	movs	r3, #120	; 0x78
 800777c:	4828      	ldr	r0, [pc, #160]	; (8007820 <_printf_i+0x248>)
 800777e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007782:	e7e3      	b.n	800774c <_printf_i+0x174>
 8007784:	0659      	lsls	r1, r3, #25
 8007786:	bf48      	it	mi
 8007788:	b2b6      	uxthmi	r6, r6
 800778a:	e7e6      	b.n	800775a <_printf_i+0x182>
 800778c:	4615      	mov	r5, r2
 800778e:	e7bb      	b.n	8007708 <_printf_i+0x130>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	6826      	ldr	r6, [r4, #0]
 8007794:	6961      	ldr	r1, [r4, #20]
 8007796:	1d18      	adds	r0, r3, #4
 8007798:	6028      	str	r0, [r5, #0]
 800779a:	0635      	lsls	r5, r6, #24
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	d501      	bpl.n	80077a4 <_printf_i+0x1cc>
 80077a0:	6019      	str	r1, [r3, #0]
 80077a2:	e002      	b.n	80077aa <_printf_i+0x1d2>
 80077a4:	0670      	lsls	r0, r6, #25
 80077a6:	d5fb      	bpl.n	80077a0 <_printf_i+0x1c8>
 80077a8:	8019      	strh	r1, [r3, #0]
 80077aa:	2300      	movs	r3, #0
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	4615      	mov	r5, r2
 80077b0:	e7ba      	b.n	8007728 <_printf_i+0x150>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	1d1a      	adds	r2, r3, #4
 80077b6:	602a      	str	r2, [r5, #0]
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	6862      	ldr	r2, [r4, #4]
 80077bc:	2100      	movs	r1, #0
 80077be:	4628      	mov	r0, r5
 80077c0:	f7f8 fd8e 	bl	80002e0 <memchr>
 80077c4:	b108      	cbz	r0, 80077ca <_printf_i+0x1f2>
 80077c6:	1b40      	subs	r0, r0, r5
 80077c8:	6060      	str	r0, [r4, #4]
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	2300      	movs	r3, #0
 80077d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d4:	e7a8      	b.n	8007728 <_printf_i+0x150>
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	462a      	mov	r2, r5
 80077da:	4649      	mov	r1, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	47d0      	blx	sl
 80077e0:	3001      	adds	r0, #1
 80077e2:	d0ab      	beq.n	800773c <_printf_i+0x164>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	079b      	lsls	r3, r3, #30
 80077e8:	d413      	bmi.n	8007812 <_printf_i+0x23a>
 80077ea:	68e0      	ldr	r0, [r4, #12]
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	4298      	cmp	r0, r3
 80077f0:	bfb8      	it	lt
 80077f2:	4618      	movlt	r0, r3
 80077f4:	e7a4      	b.n	8007740 <_printf_i+0x168>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4632      	mov	r2, r6
 80077fa:	4649      	mov	r1, r9
 80077fc:	4640      	mov	r0, r8
 80077fe:	47d0      	blx	sl
 8007800:	3001      	adds	r0, #1
 8007802:	d09b      	beq.n	800773c <_printf_i+0x164>
 8007804:	3501      	adds	r5, #1
 8007806:	68e3      	ldr	r3, [r4, #12]
 8007808:	9903      	ldr	r1, [sp, #12]
 800780a:	1a5b      	subs	r3, r3, r1
 800780c:	42ab      	cmp	r3, r5
 800780e:	dcf2      	bgt.n	80077f6 <_printf_i+0x21e>
 8007810:	e7eb      	b.n	80077ea <_printf_i+0x212>
 8007812:	2500      	movs	r5, #0
 8007814:	f104 0619 	add.w	r6, r4, #25
 8007818:	e7f5      	b.n	8007806 <_printf_i+0x22e>
 800781a:	bf00      	nop
 800781c:	08007ef1 	.word	0x08007ef1
 8007820:	08007f02 	.word	0x08007f02

08007824 <_sbrk_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_sbrk_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 fc8e 	bl	8001150 <_sbrk>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_sbrk_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_sbrk_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	24000300 	.word	0x24000300

08007844 <__sread>:
 8007844:	b510      	push	{r4, lr}
 8007846:	460c      	mov	r4, r1
 8007848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784c:	f000 fab2 	bl	8007db4 <_read_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	bfab      	itete	ge
 8007854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007856:	89a3      	ldrhlt	r3, [r4, #12]
 8007858:	181b      	addge	r3, r3, r0
 800785a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800785e:	bfac      	ite	ge
 8007860:	6563      	strge	r3, [r4, #84]	; 0x54
 8007862:	81a3      	strhlt	r3, [r4, #12]
 8007864:	bd10      	pop	{r4, pc}

08007866 <__swrite>:
 8007866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786a:	461f      	mov	r7, r3
 800786c:	898b      	ldrh	r3, [r1, #12]
 800786e:	05db      	lsls	r3, r3, #23
 8007870:	4605      	mov	r5, r0
 8007872:	460c      	mov	r4, r1
 8007874:	4616      	mov	r6, r2
 8007876:	d505      	bpl.n	8007884 <__swrite+0x1e>
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	2302      	movs	r3, #2
 800787e:	2200      	movs	r2, #0
 8007880:	f000 f9c8 	bl	8007c14 <_lseek_r>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800788a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	4632      	mov	r2, r6
 8007892:	463b      	mov	r3, r7
 8007894:	4628      	mov	r0, r5
 8007896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800789a:	f000 b869 	b.w	8007970 <_write_r>

0800789e <__sseek>:
 800789e:	b510      	push	{r4, lr}
 80078a0:	460c      	mov	r4, r1
 80078a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a6:	f000 f9b5 	bl	8007c14 <_lseek_r>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	bf15      	itete	ne
 80078b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ba:	81a3      	strheq	r3, [r4, #12]
 80078bc:	bf18      	it	ne
 80078be:	81a3      	strhne	r3, [r4, #12]
 80078c0:	bd10      	pop	{r4, pc}

080078c2 <__sclose>:
 80078c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c6:	f000 b8d3 	b.w	8007a70 <_close_r>
	...

080078cc <__swbuf_r>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	460e      	mov	r6, r1
 80078d0:	4614      	mov	r4, r2
 80078d2:	4605      	mov	r5, r0
 80078d4:	b118      	cbz	r0, 80078de <__swbuf_r+0x12>
 80078d6:	6983      	ldr	r3, [r0, #24]
 80078d8:	b90b      	cbnz	r3, 80078de <__swbuf_r+0x12>
 80078da:	f7ff fb81 	bl	8006fe0 <__sinit>
 80078de:	4b21      	ldr	r3, [pc, #132]	; (8007964 <__swbuf_r+0x98>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	d12b      	bne.n	800793c <__swbuf_r+0x70>
 80078e4:	686c      	ldr	r4, [r5, #4]
 80078e6:	69a3      	ldr	r3, [r4, #24]
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	071a      	lsls	r2, r3, #28
 80078ee:	d52f      	bpl.n	8007950 <__swbuf_r+0x84>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b36b      	cbz	r3, 8007950 <__swbuf_r+0x84>
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	1ac0      	subs	r0, r0, r3
 80078fa:	6963      	ldr	r3, [r4, #20]
 80078fc:	b2f6      	uxtb	r6, r6
 80078fe:	4283      	cmp	r3, r0
 8007900:	4637      	mov	r7, r6
 8007902:	dc04      	bgt.n	800790e <__swbuf_r+0x42>
 8007904:	4621      	mov	r1, r4
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f948 	bl	8007b9c <_fflush_r>
 800790c:	bb30      	cbnz	r0, 800795c <__swbuf_r+0x90>
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	3b01      	subs	r3, #1
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	6022      	str	r2, [r4, #0]
 800791a:	701e      	strb	r6, [r3, #0]
 800791c:	6963      	ldr	r3, [r4, #20]
 800791e:	3001      	adds	r0, #1
 8007920:	4283      	cmp	r3, r0
 8007922:	d004      	beq.n	800792e <__swbuf_r+0x62>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	07db      	lsls	r3, r3, #31
 8007928:	d506      	bpl.n	8007938 <__swbuf_r+0x6c>
 800792a:	2e0a      	cmp	r6, #10
 800792c:	d104      	bne.n	8007938 <__swbuf_r+0x6c>
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 f933 	bl	8007b9c <_fflush_r>
 8007936:	b988      	cbnz	r0, 800795c <__swbuf_r+0x90>
 8007938:	4638      	mov	r0, r7
 800793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <__swbuf_r+0x9c>)
 800793e:	429c      	cmp	r4, r3
 8007940:	d101      	bne.n	8007946 <__swbuf_r+0x7a>
 8007942:	68ac      	ldr	r4, [r5, #8]
 8007944:	e7cf      	b.n	80078e6 <__swbuf_r+0x1a>
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <__swbuf_r+0xa0>)
 8007948:	429c      	cmp	r4, r3
 800794a:	bf08      	it	eq
 800794c:	68ec      	ldreq	r4, [r5, #12]
 800794e:	e7ca      	b.n	80078e6 <__swbuf_r+0x1a>
 8007950:	4621      	mov	r1, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f000 f81e 	bl	8007994 <__swsetup_r>
 8007958:	2800      	cmp	r0, #0
 800795a:	d0cb      	beq.n	80078f4 <__swbuf_r+0x28>
 800795c:	f04f 37ff 	mov.w	r7, #4294967295
 8007960:	e7ea      	b.n	8007938 <__swbuf_r+0x6c>
 8007962:	bf00      	nop
 8007964:	08007ea0 	.word	0x08007ea0
 8007968:	08007ec0 	.word	0x08007ec0
 800796c:	08007e80 	.word	0x08007e80

08007970 <_write_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_write_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7f9 fb95 	bl	80010ae <_write>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_write_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_write_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	24000300 	.word	0x24000300

08007994 <__swsetup_r>:
 8007994:	4b32      	ldr	r3, [pc, #200]	; (8007a60 <__swsetup_r+0xcc>)
 8007996:	b570      	push	{r4, r5, r6, lr}
 8007998:	681d      	ldr	r5, [r3, #0]
 800799a:	4606      	mov	r6, r0
 800799c:	460c      	mov	r4, r1
 800799e:	b125      	cbz	r5, 80079aa <__swsetup_r+0x16>
 80079a0:	69ab      	ldr	r3, [r5, #24]
 80079a2:	b913      	cbnz	r3, 80079aa <__swsetup_r+0x16>
 80079a4:	4628      	mov	r0, r5
 80079a6:	f7ff fb1b 	bl	8006fe0 <__sinit>
 80079aa:	4b2e      	ldr	r3, [pc, #184]	; (8007a64 <__swsetup_r+0xd0>)
 80079ac:	429c      	cmp	r4, r3
 80079ae:	d10f      	bne.n	80079d0 <__swsetup_r+0x3c>
 80079b0:	686c      	ldr	r4, [r5, #4]
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079b8:	0719      	lsls	r1, r3, #28
 80079ba:	d42c      	bmi.n	8007a16 <__swsetup_r+0x82>
 80079bc:	06dd      	lsls	r5, r3, #27
 80079be:	d411      	bmi.n	80079e4 <__swsetup_r+0x50>
 80079c0:	2309      	movs	r3, #9
 80079c2:	6033      	str	r3, [r6, #0]
 80079c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295
 80079ce:	e03e      	b.n	8007a4e <__swsetup_r+0xba>
 80079d0:	4b25      	ldr	r3, [pc, #148]	; (8007a68 <__swsetup_r+0xd4>)
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d101      	bne.n	80079da <__swsetup_r+0x46>
 80079d6:	68ac      	ldr	r4, [r5, #8]
 80079d8:	e7eb      	b.n	80079b2 <__swsetup_r+0x1e>
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <__swsetup_r+0xd8>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	bf08      	it	eq
 80079e0:	68ec      	ldreq	r4, [r5, #12]
 80079e2:	e7e6      	b.n	80079b2 <__swsetup_r+0x1e>
 80079e4:	0758      	lsls	r0, r3, #29
 80079e6:	d512      	bpl.n	8007a0e <__swsetup_r+0x7a>
 80079e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ea:	b141      	cbz	r1, 80079fe <__swsetup_r+0x6a>
 80079ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f0:	4299      	cmp	r1, r3
 80079f2:	d002      	beq.n	80079fa <__swsetup_r+0x66>
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f991 	bl	8007d1c <_free_r>
 80079fa:	2300      	movs	r3, #0
 80079fc:	6363      	str	r3, [r4, #52]	; 0x34
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	2300      	movs	r3, #0
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	f043 0308 	orr.w	r3, r3, #8
 8007a14:	81a3      	strh	r3, [r4, #12]
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	b94b      	cbnz	r3, 8007a2e <__swsetup_r+0x9a>
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a24:	d003      	beq.n	8007a2e <__swsetup_r+0x9a>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 f92b 	bl	8007c84 <__smakebuf_r>
 8007a2e:	89a0      	ldrh	r0, [r4, #12]
 8007a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a34:	f010 0301 	ands.w	r3, r0, #1
 8007a38:	d00a      	beq.n	8007a50 <__swsetup_r+0xbc>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	6963      	ldr	r3, [r4, #20]
 8007a40:	425b      	negs	r3, r3
 8007a42:	61a3      	str	r3, [r4, #24]
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	b943      	cbnz	r3, 8007a5a <__swsetup_r+0xc6>
 8007a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a4c:	d1ba      	bne.n	80079c4 <__swsetup_r+0x30>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	0781      	lsls	r1, r0, #30
 8007a52:	bf58      	it	pl
 8007a54:	6963      	ldrpl	r3, [r4, #20]
 8007a56:	60a3      	str	r3, [r4, #8]
 8007a58:	e7f4      	b.n	8007a44 <__swsetup_r+0xb0>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e7f7      	b.n	8007a4e <__swsetup_r+0xba>
 8007a5e:	bf00      	nop
 8007a60:	24000010 	.word	0x24000010
 8007a64:	08007ea0 	.word	0x08007ea0
 8007a68:	08007ec0 	.word	0x08007ec0
 8007a6c:	08007e80 	.word	0x08007e80

08007a70 <_close_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d06      	ldr	r5, [pc, #24]	; (8007a8c <_close_r+0x1c>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f7f9 fb33 	bl	80010e6 <_close>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_close_r+0x1a>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_close_r+0x1a>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	24000300 	.word	0x24000300

08007a90 <__sflush_r>:
 8007a90:	898a      	ldrh	r2, [r1, #12]
 8007a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a96:	4605      	mov	r5, r0
 8007a98:	0710      	lsls	r0, r2, #28
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	d458      	bmi.n	8007b50 <__sflush_r+0xc0>
 8007a9e:	684b      	ldr	r3, [r1, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc05      	bgt.n	8007ab0 <__sflush_r+0x20>
 8007aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dc02      	bgt.n	8007ab0 <__sflush_r+0x20>
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d0f9      	beq.n	8007aaa <__sflush_r+0x1a>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007abc:	682f      	ldr	r7, [r5, #0]
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	d032      	beq.n	8007b28 <__sflush_r+0x98>
 8007ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	075a      	lsls	r2, r3, #29
 8007ac8:	d505      	bpl.n	8007ad6 <__sflush_r+0x46>
 8007aca:	6863      	ldr	r3, [r4, #4]
 8007acc:	1ac0      	subs	r0, r0, r3
 8007ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ad0:	b10b      	cbz	r3, 8007ad6 <__sflush_r+0x46>
 8007ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ad4:	1ac0      	subs	r0, r0, r3
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4602      	mov	r2, r0
 8007ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007adc:	6a21      	ldr	r1, [r4, #32]
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b0      	blx	r6
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	d106      	bne.n	8007af6 <__sflush_r+0x66>
 8007ae8:	6829      	ldr	r1, [r5, #0]
 8007aea:	291d      	cmp	r1, #29
 8007aec:	d82c      	bhi.n	8007b48 <__sflush_r+0xb8>
 8007aee:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <__sflush_r+0x108>)
 8007af0:	40ca      	lsrs	r2, r1
 8007af2:	07d6      	lsls	r6, r2, #31
 8007af4:	d528      	bpl.n	8007b48 <__sflush_r+0xb8>
 8007af6:	2200      	movs	r2, #0
 8007af8:	6062      	str	r2, [r4, #4]
 8007afa:	04d9      	lsls	r1, r3, #19
 8007afc:	6922      	ldr	r2, [r4, #16]
 8007afe:	6022      	str	r2, [r4, #0]
 8007b00:	d504      	bpl.n	8007b0c <__sflush_r+0x7c>
 8007b02:	1c42      	adds	r2, r0, #1
 8007b04:	d101      	bne.n	8007b0a <__sflush_r+0x7a>
 8007b06:	682b      	ldr	r3, [r5, #0]
 8007b08:	b903      	cbnz	r3, 8007b0c <__sflush_r+0x7c>
 8007b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	2900      	cmp	r1, #0
 8007b12:	d0ca      	beq.n	8007aaa <__sflush_r+0x1a>
 8007b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b18:	4299      	cmp	r1, r3
 8007b1a:	d002      	beq.n	8007b22 <__sflush_r+0x92>
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 f8fd 	bl	8007d1c <_free_r>
 8007b22:	2000      	movs	r0, #0
 8007b24:	6360      	str	r0, [r4, #52]	; 0x34
 8007b26:	e7c1      	b.n	8007aac <__sflush_r+0x1c>
 8007b28:	6a21      	ldr	r1, [r4, #32]
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b0      	blx	r6
 8007b30:	1c41      	adds	r1, r0, #1
 8007b32:	d1c7      	bne.n	8007ac4 <__sflush_r+0x34>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0c4      	beq.n	8007ac4 <__sflush_r+0x34>
 8007b3a:	2b1d      	cmp	r3, #29
 8007b3c:	d001      	beq.n	8007b42 <__sflush_r+0xb2>
 8007b3e:	2b16      	cmp	r3, #22
 8007b40:	d101      	bne.n	8007b46 <__sflush_r+0xb6>
 8007b42:	602f      	str	r7, [r5, #0]
 8007b44:	e7b1      	b.n	8007aaa <__sflush_r+0x1a>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	e7ad      	b.n	8007aac <__sflush_r+0x1c>
 8007b50:	690f      	ldr	r7, [r1, #16]
 8007b52:	2f00      	cmp	r7, #0
 8007b54:	d0a9      	beq.n	8007aaa <__sflush_r+0x1a>
 8007b56:	0793      	lsls	r3, r2, #30
 8007b58:	680e      	ldr	r6, [r1, #0]
 8007b5a:	bf08      	it	eq
 8007b5c:	694b      	ldreq	r3, [r1, #20]
 8007b5e:	600f      	str	r7, [r1, #0]
 8007b60:	bf18      	it	ne
 8007b62:	2300      	movne	r3, #0
 8007b64:	eba6 0807 	sub.w	r8, r6, r7
 8007b68:	608b      	str	r3, [r1, #8]
 8007b6a:	f1b8 0f00 	cmp.w	r8, #0
 8007b6e:	dd9c      	ble.n	8007aaa <__sflush_r+0x1a>
 8007b70:	6a21      	ldr	r1, [r4, #32]
 8007b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b74:	4643      	mov	r3, r8
 8007b76:	463a      	mov	r2, r7
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b0      	blx	r6
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	dc06      	bgt.n	8007b8e <__sflush_r+0xfe>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	e78e      	b.n	8007aac <__sflush_r+0x1c>
 8007b8e:	4407      	add	r7, r0
 8007b90:	eba8 0800 	sub.w	r8, r8, r0
 8007b94:	e7e9      	b.n	8007b6a <__sflush_r+0xda>
 8007b96:	bf00      	nop
 8007b98:	20400001 	.word	0x20400001

08007b9c <_fflush_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	690b      	ldr	r3, [r1, #16]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b913      	cbnz	r3, 8007bac <_fflush_r+0x10>
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	b118      	cbz	r0, 8007bb6 <_fflush_r+0x1a>
 8007bae:	6983      	ldr	r3, [r0, #24]
 8007bb0:	b90b      	cbnz	r3, 8007bb6 <_fflush_r+0x1a>
 8007bb2:	f7ff fa15 	bl	8006fe0 <__sinit>
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <_fflush_r+0x6c>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	d11b      	bne.n	8007bf4 <_fflush_r+0x58>
 8007bbc:	686c      	ldr	r4, [r5, #4]
 8007bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0ef      	beq.n	8007ba6 <_fflush_r+0xa>
 8007bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bc8:	07d0      	lsls	r0, r2, #31
 8007bca:	d404      	bmi.n	8007bd6 <_fflush_r+0x3a>
 8007bcc:	0599      	lsls	r1, r3, #22
 8007bce:	d402      	bmi.n	8007bd6 <_fflush_r+0x3a>
 8007bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd2:	f7ff faa3 	bl	800711c <__retarget_lock_acquire_recursive>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	4621      	mov	r1, r4
 8007bda:	f7ff ff59 	bl	8007a90 <__sflush_r>
 8007bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be0:	07da      	lsls	r2, r3, #31
 8007be2:	4605      	mov	r5, r0
 8007be4:	d4e0      	bmi.n	8007ba8 <_fflush_r+0xc>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	059b      	lsls	r3, r3, #22
 8007bea:	d4dd      	bmi.n	8007ba8 <_fflush_r+0xc>
 8007bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bee:	f7ff fa96 	bl	800711e <__retarget_lock_release_recursive>
 8007bf2:	e7d9      	b.n	8007ba8 <_fflush_r+0xc>
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <_fflush_r+0x70>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	d101      	bne.n	8007bfe <_fflush_r+0x62>
 8007bfa:	68ac      	ldr	r4, [r5, #8]
 8007bfc:	e7df      	b.n	8007bbe <_fflush_r+0x22>
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <_fflush_r+0x74>)
 8007c00:	429c      	cmp	r4, r3
 8007c02:	bf08      	it	eq
 8007c04:	68ec      	ldreq	r4, [r5, #12]
 8007c06:	e7da      	b.n	8007bbe <_fflush_r+0x22>
 8007c08:	08007ea0 	.word	0x08007ea0
 8007c0c:	08007ec0 	.word	0x08007ec0
 8007c10:	08007e80 	.word	0x08007e80

08007c14 <_lseek_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	; (8007c34 <_lseek_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7f9 fa86 	bl	8001134 <_lseek>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_lseek_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_lseek_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	24000300 	.word	0x24000300

08007c38 <__swhatbuf_r>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	460e      	mov	r6, r1
 8007c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c40:	2900      	cmp	r1, #0
 8007c42:	b096      	sub	sp, #88	; 0x58
 8007c44:	4614      	mov	r4, r2
 8007c46:	461d      	mov	r5, r3
 8007c48:	da08      	bge.n	8007c5c <__swhatbuf_r+0x24>
 8007c4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	061a      	lsls	r2, r3, #24
 8007c54:	d410      	bmi.n	8007c78 <__swhatbuf_r+0x40>
 8007c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c5a:	e00e      	b.n	8007c7a <__swhatbuf_r+0x42>
 8007c5c:	466a      	mov	r2, sp
 8007c5e:	f000 f8bb 	bl	8007dd8 <_fstat_r>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	dbf1      	blt.n	8007c4a <__swhatbuf_r+0x12>
 8007c66:	9a01      	ldr	r2, [sp, #4]
 8007c68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c70:	425a      	negs	r2, r3
 8007c72:	415a      	adcs	r2, r3
 8007c74:	602a      	str	r2, [r5, #0]
 8007c76:	e7ee      	b.n	8007c56 <__swhatbuf_r+0x1e>
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	b016      	add	sp, #88	; 0x58
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c84 <__smakebuf_r>:
 8007c84:	898b      	ldrh	r3, [r1, #12]
 8007c86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c88:	079d      	lsls	r5, r3, #30
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	d507      	bpl.n	8007ca0 <__smakebuf_r+0x1c>
 8007c90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	6123      	str	r3, [r4, #16]
 8007c98:	2301      	movs	r3, #1
 8007c9a:	6163      	str	r3, [r4, #20]
 8007c9c:	b002      	add	sp, #8
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	ab01      	add	r3, sp, #4
 8007ca2:	466a      	mov	r2, sp
 8007ca4:	f7ff ffc8 	bl	8007c38 <__swhatbuf_r>
 8007ca8:	9900      	ldr	r1, [sp, #0]
 8007caa:	4605      	mov	r5, r0
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff fa57 	bl	8007160 <_malloc_r>
 8007cb2:	b948      	cbnz	r0, 8007cc8 <__smakebuf_r+0x44>
 8007cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb8:	059a      	lsls	r2, r3, #22
 8007cba:	d4ef      	bmi.n	8007c9c <__smakebuf_r+0x18>
 8007cbc:	f023 0303 	bic.w	r3, r3, #3
 8007cc0:	f043 0302 	orr.w	r3, r3, #2
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	e7e3      	b.n	8007c90 <__smakebuf_r+0xc>
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <__smakebuf_r+0x7c>)
 8007cca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	6020      	str	r0, [r4, #0]
 8007cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	6163      	str	r3, [r4, #20]
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	6120      	str	r0, [r4, #16]
 8007cde:	b15b      	cbz	r3, 8007cf8 <__smakebuf_r+0x74>
 8007ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f000 f889 	bl	8007dfc <_isatty_r>
 8007cea:	b128      	cbz	r0, 8007cf8 <__smakebuf_r+0x74>
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	89a0      	ldrh	r0, [r4, #12]
 8007cfa:	4305      	orrs	r5, r0
 8007cfc:	81a5      	strh	r5, [r4, #12]
 8007cfe:	e7cd      	b.n	8007c9c <__smakebuf_r+0x18>
 8007d00:	08006f79 	.word	0x08006f79

08007d04 <__malloc_lock>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__malloc_lock+0x8>)
 8007d06:	f7ff ba09 	b.w	800711c <__retarget_lock_acquire_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	240002f4 	.word	0x240002f4

08007d10 <__malloc_unlock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__malloc_unlock+0x8>)
 8007d12:	f7ff ba04 	b.w	800711e <__retarget_lock_release_recursive>
 8007d16:	bf00      	nop
 8007d18:	240002f4 	.word	0x240002f4

08007d1c <_free_r>:
 8007d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	d044      	beq.n	8007dac <_free_r+0x90>
 8007d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d26:	9001      	str	r0, [sp, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d2e:	bfb8      	it	lt
 8007d30:	18e4      	addlt	r4, r4, r3
 8007d32:	f7ff ffe7 	bl	8007d04 <__malloc_lock>
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <_free_r+0x94>)
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	b933      	cbnz	r3, 8007d4c <_free_r+0x30>
 8007d3e:	6063      	str	r3, [r4, #4]
 8007d40:	6014      	str	r4, [r2, #0]
 8007d42:	b003      	add	sp, #12
 8007d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d48:	f7ff bfe2 	b.w	8007d10 <__malloc_unlock>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d908      	bls.n	8007d62 <_free_r+0x46>
 8007d50:	6825      	ldr	r5, [r4, #0]
 8007d52:	1961      	adds	r1, r4, r5
 8007d54:	428b      	cmp	r3, r1
 8007d56:	bf01      	itttt	eq
 8007d58:	6819      	ldreq	r1, [r3, #0]
 8007d5a:	685b      	ldreq	r3, [r3, #4]
 8007d5c:	1949      	addeq	r1, r1, r5
 8007d5e:	6021      	streq	r1, [r4, #0]
 8007d60:	e7ed      	b.n	8007d3e <_free_r+0x22>
 8007d62:	461a      	mov	r2, r3
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	b10b      	cbz	r3, 8007d6c <_free_r+0x50>
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	d9fa      	bls.n	8007d62 <_free_r+0x46>
 8007d6c:	6811      	ldr	r1, [r2, #0]
 8007d6e:	1855      	adds	r5, r2, r1
 8007d70:	42a5      	cmp	r5, r4
 8007d72:	d10b      	bne.n	8007d8c <_free_r+0x70>
 8007d74:	6824      	ldr	r4, [r4, #0]
 8007d76:	4421      	add	r1, r4
 8007d78:	1854      	adds	r4, r2, r1
 8007d7a:	42a3      	cmp	r3, r4
 8007d7c:	6011      	str	r1, [r2, #0]
 8007d7e:	d1e0      	bne.n	8007d42 <_free_r+0x26>
 8007d80:	681c      	ldr	r4, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	6053      	str	r3, [r2, #4]
 8007d86:	4421      	add	r1, r4
 8007d88:	6011      	str	r1, [r2, #0]
 8007d8a:	e7da      	b.n	8007d42 <_free_r+0x26>
 8007d8c:	d902      	bls.n	8007d94 <_free_r+0x78>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	6003      	str	r3, [r0, #0]
 8007d92:	e7d6      	b.n	8007d42 <_free_r+0x26>
 8007d94:	6825      	ldr	r5, [r4, #0]
 8007d96:	1961      	adds	r1, r4, r5
 8007d98:	428b      	cmp	r3, r1
 8007d9a:	bf04      	itt	eq
 8007d9c:	6819      	ldreq	r1, [r3, #0]
 8007d9e:	685b      	ldreq	r3, [r3, #4]
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	bf04      	itt	eq
 8007da4:	1949      	addeq	r1, r1, r5
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	6054      	str	r4, [r2, #4]
 8007daa:	e7ca      	b.n	8007d42 <_free_r+0x26>
 8007dac:	b003      	add	sp, #12
 8007dae:	bd30      	pop	{r4, r5, pc}
 8007db0:	240002f8 	.word	0x240002f8

08007db4 <_read_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	; (8007dd4 <_read_r+0x20>)
 8007db8:	4604      	mov	r4, r0
 8007dba:	4608      	mov	r0, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7f9 f956 	bl	8001074 <_read>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_read_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_read_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	24000300 	.word	0x24000300

08007dd8 <_fstat_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d07      	ldr	r5, [pc, #28]	; (8007df8 <_fstat_r+0x20>)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	602b      	str	r3, [r5, #0]
 8007de6:	f7f9 f98a 	bl	80010fe <_fstat>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	d102      	bne.n	8007df4 <_fstat_r+0x1c>
 8007dee:	682b      	ldr	r3, [r5, #0]
 8007df0:	b103      	cbz	r3, 8007df4 <_fstat_r+0x1c>
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	bf00      	nop
 8007df8:	24000300 	.word	0x24000300

08007dfc <_isatty_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d06      	ldr	r5, [pc, #24]	; (8007e18 <_isatty_r+0x1c>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	f7f9 f989 	bl	800111e <_isatty>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_isatty_r+0x1a>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_isatty_r+0x1a>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	24000300 	.word	0x24000300

08007e1c <_init>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr

08007e28 <_fini>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr
