
stm32_h7_encoder_plus_can_receiver_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800a890  0800a890  0001a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adec  0800adec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf4  0800adf4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf8  0800adf8  0001adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  0800adfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  240001f4  0800aff0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003c4  0800aff0  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001525c  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241d  00000000  00000000  0003547e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000378a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ad0d  00000000  00000000  000395f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127b0  00000000  00000000  00074305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183cf7  00000000  00000000  00086ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020a7ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  0020a7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a878 	.word	0x0800a878

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	0800a878 	.word	0x0800a878

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000bb4:	bf00      	nop
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <main+0xe4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	617a      	str	r2, [r7, #20]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
		;
	if (timeout < 0) {
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
		Error_Handler();
 8000bd2:	f000 fa6d 	bl	80010b0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 fc83 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f867 	bl	8000cac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <main+0xe4>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <main+0xe4>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <main+0xe4>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f001 fdd5 	bl	80027ac <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f001 fdeb 	bl	80027e0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000c10:	bf00      	nop
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <main+0xe4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	617a      	str	r2, [r7, #20]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
		;
	if (timeout < 0) {
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
		Error_Handler();
 8000c2e:	f000 fa3f 	bl	80010b0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f9bb 	bl	8000fac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 f96d 	bl	8000f14 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000c3a:	f000 f8b3 	bl	8000da4 <MX_FDCAN1_Init>
	//printf("Hello World\r\n");
	//union FloatBytes fb;
	union BytesFloat bf;

	while (1) {
		TxHeader.Identifier = 0x00FF14A3;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <main+0xe8>)
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <main+0xec>)
 8000c42:	601a      	str	r2, [r3, #0]
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <main+0xf0>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <main+0xf4>)
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <main+0xf8>)
 8000c4c:	f001 f876 	bl	8001d3c <HAL_FDCAN_GetRxMessage>
		for (size_t i = 0; i < sizeof(float); i++) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	e00d      	b.n	8000c72 <main+0xca>
			uint8_t receivedByte = TxData[i];
 8000c56:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <main+0xfc>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	73fb      	strb	r3, [r7, #15]
			bf.byteValue[i] = receivedByte;
 8000c60:	f107 0208 	add.w	r2, r7, #8
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4413      	add	r3, r2
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < sizeof(float); i++) {
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d9ee      	bls.n	8000c56 <main+0xae>
		}
		printf("\r\nReceived float: %f \r\n", bf.floatValue);
 8000c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c80:	ec53 2b17 	vmov	r2, r3, d7
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <main+0x100>)
 8000c86:	f006 f8cb 	bl	8006e20 <iprintf>
		TxHeader.Identifier = 0x00FF14A3;
 8000c8a:	e7d8      	b.n	8000c3e <main+0x96>
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	24000360 	.word	0x24000360
 8000c94:	00ff14a3 	.word	0x00ff14a3
 8000c98:	24000010 	.word	0x24000010
 8000c9c:	24000384 	.word	0x24000384
 8000ca0:	24000210 	.word	0x24000210
 8000ca4:	24000008 	.word	0x24000008
 8000ca8:	0800a890 	.word	0x0800a890

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09c      	sub	sp, #112	; 0x70
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	224c      	movs	r2, #76	; 0x4c
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 fa5e 	bl	800617c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f005 fa58 	bl	800617c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f001 fd9b 	bl	8002808 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <SystemClock_Config+0xf0>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <SystemClock_Config+0xf0>)
 8000cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <SystemClock_Config+0xf0>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <SystemClock_Config+0xf4>)
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <SystemClock_Config+0xf4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <SystemClock_Config+0xf4>)
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d04:	bf00      	nop
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SystemClock_Config+0xf0>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d12:	d1f8      	bne.n	8000d06 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d14:	2302      	movs	r3, #2
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1c:	2340      	movs	r3, #64	; 0x40
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d24:	2300      	movs	r3, #0
 8000d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d2c:	233c      	movs	r3, #60	; 0x3c
 8000d2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000d34:	2318      	movs	r3, #24
 8000d36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fdb5 	bl	80028bc <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d58:	f000 f9aa 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	233f      	movs	r3, #63	; 0x3f
 8000d5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2303      	movs	r3, #3
 8000d62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d6c:	2340      	movs	r3, #64	; 0x40
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2104      	movs	r1, #4
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 f9c8 	bl	8003118 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d8e:	f000 f98f 	bl	80010b0 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	; 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58024800 	.word	0x58024800
 8000da0:	58000400 	.word	0x58000400

08000da4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000daa:	4b55      	ldr	r3, [pc, #340]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dac:	4a55      	ldr	r2, [pc, #340]	; (8000f04 <MX_FDCAN1_Init+0x160>)
 8000dae:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000db0:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000db6:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000dbc:	4b50      	ldr	r3, [pc, #320]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000dc8:	4b4d      	ldr	r3, [pc, #308]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000dd4:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000ddc:	223f      	movs	r2, #63	; 0x3f
 8000dde:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000de0:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000de2:	2210      	movs	r2, #16
 8000de4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000de6:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dec:	4b44      	ldr	r3, [pc, #272]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000df8:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e04:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e10:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e2e:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e52:	482b      	ldr	r0, [pc, #172]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e54:	f000 fcc6 	bl	80017e4 <HAL_FDCAN_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e5e:	f000 f927 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	60da      	str	r2, [r3, #12]
//    sFilterConfig.FilterID1 = 0x321;
//    sFilterConfig.FilterID2 = 0x7FF;
	sFilterConfig.FilterID1 = 0x610; //Testing
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e7c:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8000e80:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0xFFF;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e84:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e88:	615a      	str	r2, [r3, #20]

	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT,
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2202      	movs	r2, #2
 8000e92:	2102      	movs	r1, #2
 8000e94:	481a      	ldr	r0, [pc, #104]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e96:	f000 fef9 	bl	8001c8c <HAL_FDCAN_ConfigGlobalFilter>
			FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000e9a:	491b      	ldr	r1, [pc, #108]	; (8000f08 <MX_FDCAN1_Init+0x164>)
 8000e9c:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000e9e:	f000 fe7f 	bl	8001ba0 <HAL_FDCAN_ConfigFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_FDCAN1_Init+0x108>
		/* Filter configuration Error */
		Error_Handler();
 8000ea8:	f000 f902 	bl	80010b0 <Error_Handler>
	}
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000eac:	4814      	ldr	r0, [pc, #80]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000eae:	f000 ff1a 	bl	8001ce6 <HAL_FDCAN_Start>
	}
	/* Start Error */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_FDCAN1_Init+0x15c>)
 8000eb8:	f001 f8ae 	bl	8002018 <HAL_FDCAN_ActivateNotification>
			0) != HAL_OK) {
	}
	/* Notification Error */

	/* Configure Tx buffer message */
	TxHeader.Identifier = 0x00FF14A3;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <MX_FDCAN1_Init+0x16c>)
 8000ec0:	601a      	str	r2, [r3, #0]
//    TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
//    TxHeader.DataLength = FDCAN_DLC_BYTES_12;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ed2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ed6:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ee0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ee4:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ee8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eec:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0x00;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <MX_FDCAN1_Init+0x168>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24000210 	.word	0x24000210
 8000f04:	4000a000 	.word	0x4000a000
 8000f08:	24000340 	.word	0x24000340
 8000f0c:	24000360 	.word	0x24000360
 8000f10:	00ff14a3 	.word	0x00ff14a3

08000f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <MX_USART3_UART_Init+0x94>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f5e:	f003 ffcf 	bl	8004f00 <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f000 f8a2 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f70:	f005 f802 	bl	8005f78 <HAL_UARTEx_SetTxFifoThreshold>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f000 f899 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f82:	f005 f837 	bl	8005ff4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 f890 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f92:	f004 ffb8 	bl	8005f06 <HAL_UARTEx_DisableFifoMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f000 f888 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	240002b0 	.word	0x240002b0
 8000fa8:	40004800 	.word	0x40004800

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a36      	ldr	r2, [pc, #216]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_GPIO_Init+0xf8>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_GPIO_Init+0xf8>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_GPIO_Init+0xf8>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <MX_GPIO_Init+0xf8>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_GPIO_Init+0xf8>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f244 0101 	movw	r1, #16385	; 0x4001
 800105e:	4812      	ldr	r0, [pc, #72]	; (80010a8 <MX_GPIO_Init+0xfc>)
 8001060:	f001 fb8a 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_GPIO_Init+0x100>)
 800107a:	f001 f9cd 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 800107e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_GPIO_Init+0xfc>)
 8001098:	f001 f9be 	bl	8002418 <HAL_GPIO_Init>

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58020400 	.word	0x58020400
 80010ac:	58020800 	.word	0x58020800

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010c4:	1d39      	adds	r1, r7, #4
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	2201      	movs	r2, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <__io_putchar+0x20>)
 80010ce:	f003 ff67 	bl	8004fa0 <HAL_UART_Transmit>
  return ch;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	240002b0 	.word	0x240002b0

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_MspInit+0x30>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x30>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x30>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	58024400 	.word	0x58024400

08001114 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0b8      	sub	sp, #224	; 0xe0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	22bc      	movs	r2, #188	; 0xbc
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f005 f821 	bl	800617c <memset>
  if(hfdcan->Instance==FDCAN1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <HAL_FDCAN_MspInit+0xc0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d142      	bne.n	80011ca <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001148:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800114a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800114e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fb6b 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001160:	f7ff ffa6 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_FDCAN_MspInit+0xc4>)
 8001166:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <HAL_FDCAN_MspInit+0xc4>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_FDCAN_MspInit+0xc4>)
 8001176:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_FDCAN_MspInit+0xc4>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_FDCAN_MspInit+0xc4>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_FDCAN_MspInit+0xc4>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011b8:	2309      	movs	r3, #9
 80011ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_FDCAN_MspInit+0xc8>)
 80011c6:	f001 f927 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	37e0      	adds	r7, #224	; 0xe0
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	4000a000 	.word	0x4000a000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020c00 	.word	0x58020c00

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0b8      	sub	sp, #224	; 0xe0
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	22bc      	movs	r2, #188	; 0xbc
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f004 ffbb 	bl	800617c <memset>
  if(huart->Instance==USART3)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <HAL_UART_MspInit+0xc0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d142      	bne.n	8001296 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fb06 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800122a:	f7ff ff41 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_UART_MspInit+0xc4>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_UART_MspInit+0xc4>)
 8001236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0xc4>)
 8001240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0xc4>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0xc4>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_MspInit+0xc4>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800126a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001284:	2307      	movs	r3, #7
 8001286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_UART_MspInit+0xc8>)
 8001292:	f001 f8c1 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	37e0      	adds	r7, #224	; 0xe0
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004800 	.word	0x40004800
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020c00 	.word	0x58020c00

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f964 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_kill>:

int _kill(int pid, int sig)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800131a:	f004 fef7 	bl	800610c <__errno>
 800131e:	4603      	mov	r3, r0
 8001320:	2216      	movs	r2, #22
 8001322:	601a      	str	r2, [r3, #0]
	return -1;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_exit>:

void _exit (int status)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffe7 	bl	8001310 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001342:	e7fe      	b.n	8001342 <_exit+0x12>

08001344 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00a      	b.n	800136c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001356:	f3af 8000 	nop.w
 800135a:	4601      	mov	r1, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf0      	blt.n	8001356 <_read+0x12>
	}

return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e009      	b.n	80013a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	60ba      	str	r2, [r7, #8]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe8f 	bl	80010bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbf1      	blt.n	8001390 <_write+0x12>
	}
	return len;
 80013ac:	687b      	ldr	r3, [r7, #4]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_close>:

int _close(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	605a      	str	r2, [r3, #4]
	return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_isatty>:

int _isatty(int file)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	return 1;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	return 0;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f004 fe5c 	bl	800610c <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24080000 	.word	0x24080000
 8001480:	00000400 	.word	0x00000400
 8001484:	240003ac 	.word	0x240003ac
 8001488:	240003c8 	.word	0x240003c8

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001490:	f7ff faf4 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001496:	490d      	ldr	r1, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ac:	4c0a      	ldr	r4, [pc, #40]	; (80014d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ba:	f004 fe2d 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fb73 	bl	8000ba8 <main>
  bx  lr
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014cc:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 80014d0:	0800adfc 	.word	0x0800adfc
  ldr r2, =_sbss
 80014d4:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 80014d8:	240003c4 	.word	0x240003c4

080014dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC3_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f94a 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ec:	f001 ffca 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_Init+0x68>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	4913      	ldr	r1, [pc, #76]	; (800154c <HAL_Init+0x6c>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_Init+0x68>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_Init+0x6c>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_Init+0x70>)
 8001522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_Init+0x74>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	200f      	movs	r0, #15
 800152c:	f000 f814 	bl	8001558 <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e002      	b.n	8001540 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800153a:	f7ff fdd1 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58024400 	.word	0x58024400
 800154c:	0800a8f4 	.word	0x0800a8f4
 8001550:	24000004 	.word	0x24000004
 8001554:	24000000 	.word	0x24000000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_InitTick+0x60>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e021      	b.n	80015b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_InitTick+0x64>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_InitTick+0x60>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f921 	bl	80017ca <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f8f9 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x68>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2400001c 	.word	0x2400001c
 80015bc:	24000000 	.word	0x24000000
 80015c0:	24000018 	.word	0x24000018

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2400001c 	.word	0x2400001c
 80015e8:	240003b0 	.word	0x240003b0

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	240003b0 	.word	0x240003b0

08001604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetREVID+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1b      	lsrs	r3, r3, #16
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	5c001000 	.word	0x5c001000

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <__NVIC_SetPriorityGrouping+0x40>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	4313      	orrs	r3, r2
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x40>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	05fa0000 	.word	0x05fa0000

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff47 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff5e 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffb2 	bl	800173c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b098      	sub	sp, #96	; 0x60
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80017ec:	4a84      	ldr	r2, [pc, #528]	; (8001a00 <HAL_FDCAN_Init+0x21c>)
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4611      	mov	r1, r2
 80017f4:	224c      	movs	r2, #76	; 0x4c
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 fcb2 	bl	8006160 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1c6      	b.n	8001b94 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <HAL_FDCAN_Init+0x220>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d106      	bne.n	800181e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fc6e 	bl	8001114 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0210 	bic.w	r2, r2, #16
 8001846:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001848:	f7ff fed0 	bl	80015ec <HAL_GetTick>
 800184c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800184e:	e014      	b.n	800187a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001850:	f7ff fecc 	bl	80015ec <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b0a      	cmp	r3, #10
 800185c:	d90d      	bls.n	800187a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e18c      	b.n	8001b94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d0e3      	beq.n	8001850 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001898:	f7ff fea8 	bl	80015ec <HAL_GetTick>
 800189c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800189e:	e014      	b.n	80018ca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018a0:	f7ff fea4 	bl	80015ec <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b0a      	cmp	r3, #10
 80018ac:	d90d      	bls.n	80018ca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2203      	movs	r2, #3
 80018c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e164      	b.n	8001b94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0e3      	beq.n	80018a0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0202 	orr.w	r2, r2, #2
 80018e6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7c1b      	ldrb	r3, [r3, #16]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	e007      	b.n	8001912 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001910:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7c5b      	ldrb	r3, [r3, #17]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001928:	619a      	str	r2, [r3, #24]
 800192a:	e007      	b.n	800193c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800193a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7c9b      	ldrb	r3, [r3, #18]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001952:	619a      	str	r2, [r3, #24]
 8001954:	e007      	b.n	8001966 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001964:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800198a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0210 	bic.w	r2, r2, #16
 800199a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d108      	bne.n	80019b6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0204 	orr.w	r2, r2, #4
 80019b2:	619a      	str	r2, [r3, #24]
 80019b4:	e030      	b.n	8001a18 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d02c      	beq.n	8001a18 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d020      	beq.n	8001a08 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0210 	orr.w	r2, r2, #16
 80019e4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d114      	bne.n	8001a18 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699a      	ldr	r2, [r3, #24]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0220 	orr.w	r2, r2, #32
 80019fc:	619a      	str	r2, [r3, #24]
 80019fe:	e00b      	b.n	8001a18 <HAL_FDCAN_Init+0x234>
 8001a00:	0800a8a8 	.word	0x0800a8a8
 8001a04:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0220 	orr.w	r2, r2, #32
 8001a16:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a28:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a30:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a40:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a42:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a4c:	d115      	bne.n	8001a7a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a5c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	3b01      	subs	r3, #1
 8001a64:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001a66:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001a76:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a78:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d011      	beq.n	8001aca <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001aae:	f023 0107 	bic.w	r1, r3, #7
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	443b      	add	r3, r7
 8001abc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d011      	beq.n	8001af6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ada:	f023 0107 	bic.w	r1, r3, #7
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	3360      	adds	r3, #96	; 0x60
 8001ae6:	443b      	add	r3, r7
 8001ae8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d012      	beq.n	8001b24 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b06:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	443b      	add	r3, r7
 8001b14:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b18:	011a      	lsls	r2, r3, #4
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d012      	beq.n	8001b52 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b34:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3360      	adds	r3, #96	; 0x60
 8001b40:	443b      	add	r3, r7
 8001b42:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_FDCAN_Init+0x3b8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d107      	bne.n	8001b6c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f022 0203 	bic.w	r2, r2, #3
 8001b6a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fac1 	bl	800210c <FDCAN_CalcultateRamBlockAddresses>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001b90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3760      	adds	r7, #96	; 0x60
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	4000a000 	.word	0x4000a000

08001ba0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001bb0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d002      	beq.n	8001bbe <HAL_FDCAN_ConfigFilter+0x1e>
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d157      	bne.n	8001c6e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d12b      	bne.n	8001c1e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b07      	cmp	r3, #7
 8001bcc:	d10d      	bne.n	8001bea <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001bda:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001be0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001be2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e00e      	b.n	8001c08 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bf6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001bfe:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e025      	b.n	8001c6a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	075a      	lsls	r2, r3, #29
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	d103      	bne.n	8001c3c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e006      	b.n	8001c4a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	079a      	lsls	r2, r3, #30
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3304      	adds	r3, #4
 8001c62:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e008      	b.n	8001c80 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c74:	f043 0202 	orr.w	r2, r3, #2
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d110      	bne.n	8001cc8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001cae:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001cb4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e008      	b.n	8001cda <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cce:	f043 0204 	orr.w	r2, r3, #4
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d111      	bne.n	8001d1e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e008      	b.n	8001d30 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d54:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001d56:	7efb      	ldrb	r3, [r7, #27]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	f040 814b 	bne.w	8001ff4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d14d      	bne.n	8001e00 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d7a:	f043 0220 	orr.w	r2, r3, #32
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e13e      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e12c      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001db4:	0e1b      	lsrs	r3, r3, #24
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dc6:	0fdb      	lsrs	r3, r3, #31
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dd0:	d101      	bne.n	8001dd6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	69f9      	ldr	r1, [r7, #28]
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e069      	b.n	8001ed4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b41      	cmp	r3, #65	; 0x41
 8001e04:	d14d      	bne.n	8001ea2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0ed      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0db      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e56:	0e1b      	lsrs	r3, r3, #24
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10b      	bne.n	8001e78 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e68:	0fdb      	lsrs	r3, r3, #31
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e72:	d101      	bne.n	8001e78 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	69f9      	ldr	r1, [r7, #28]
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	e018      	b.n	8001ed4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d309      	bcc.n	8001ec0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001eb2:	f043 0220 	orr.w	r2, r3, #32
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0a2      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e005      	b.n	8001f04 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3304      	adds	r3, #4
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0fda      	lsrs	r2, r3, #31
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	e00a      	b.n	8001f8e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	440b      	add	r3, r1
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d3eb      	bcc.n	8001f78 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d105      	bne.n	8001fb2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001fb0:	e01e      	b.n	8001ff0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b41      	cmp	r3, #65	; 0x41
 8001fb6:	d105      	bne.n	8001fc4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001fc2:	e015      	b.n	8001ff0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b1f      	cmp	r3, #31
 8001fc8:	d808      	bhi.n	8001fdc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2101      	movs	r1, #1
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001fda:	e009      	b.n	8001ff0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e008      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ffa:	f043 0208 	orr.w	r2, r3, #8
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	372c      	adds	r7, #44	; 0x2c
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	0800a904 	.word	0x0800a904

08002018 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800202a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d002      	beq.n	8002038 <HAL_FDCAN_ActivateNotification+0x20>
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d155      	bne.n	80020e4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c
 8002056:	e014      	b.n	8002082 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	429a      	cmp	r2, r3
 8002066:	d108      	bne.n	800207a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0202 	orr.w	r2, r2, #2
 8002076:	65da      	str	r2, [r3, #92]	; 0x5c
 8002078:	e003      	b.n	8002082 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2203      	movs	r2, #3
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	430a      	orrs	r2, r1
 800209c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_FDCAN_ActivateNotification+0xec>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	430b      	orrs	r3, r1
 80020d0:	6553      	str	r3, [r2, #84]	; 0x54
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_FDCAN_ActivateNotification+0xf0>)
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	0f9b      	lsrs	r3, r3, #30
 80020da:	490b      	ldr	r1, [pc, #44]	; (8002108 <HAL_FDCAN_ActivateNotification+0xf0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e008      	b.n	80020f6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020ea:	f043 0202 	orr.w	r2, r3, #2
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	3fcfffff 	.word	0x3fcfffff
 8002108:	4000a800 	.word	0x4000a800

0800210c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002122:	4ba7      	ldr	r3, [pc, #668]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002124:	4013      	ands	r3, r2
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	0091      	lsls	r1, r2, #2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	430b      	orrs	r3, r1
 8002130:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	4413      	add	r3, r2
 8002158:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002162:	4b97      	ldr	r3, [pc, #604]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002164:	4013      	ands	r3, r2
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	0091      	lsls	r1, r2, #2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	430b      	orrs	r3, r1
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4413      	add	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80021a4:	4b86      	ldr	r3, [pc, #536]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	0091      	lsls	r1, r2, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021ec:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	0091      	lsls	r1, r2, #2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002206:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002234:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	0091      	lsls	r1, r2, #2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002260:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002262:	4013      	ands	r3, r2
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	0091      	lsls	r1, r2, #2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800227a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	0091      	lsls	r1, r2, #2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	430b      	orrs	r3, r1
 80022b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022bc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022d8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	061a      	lsls	r2, r3, #24
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f0:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80022f2:	4413      	add	r3, r2
 80022f4:	009a      	lsls	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d915      	bls.n	80023e8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80023bc:	e006      	b.n	80023cc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80023be:	bf00      	nop
 80023c0:	ffff0003 	.word	0xffff0003
 80023c4:	10002b00 	.word	0x10002b00
 80023c8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2203      	movs	r2, #3
 80023e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e010      	b.n	800240a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e005      	b.n	80023fc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3304      	adds	r3, #4
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d3f3      	bcc.n	80023f0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002426:	4b89      	ldr	r3, [pc, #548]	; (800264c <HAL_GPIO_Init+0x234>)
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800242a:	e194      	b.n	8002756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8186 	beq.w	8002750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x44>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	69b9      	ldr	r1, [r7, #24]
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80e0 	beq.w	8002750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_GPIO_Init+0x238>)
 8002592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <HAL_GPIO_Init+0x238>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_GPIO_Init+0x238>)
 80025a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_GPIO_Init+0x23c>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_GPIO_Init+0x240>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d052      	beq.n	8002680 <HAL_GPIO_Init+0x268>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_GPIO_Init+0x244>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_GPIO_Init+0x22e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_GPIO_Init+0x248>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x22a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_GPIO_Init+0x24c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x226>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_GPIO_Init+0x250>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x222>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_GPIO_Init+0x254>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x21e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1a      	ldr	r2, [pc, #104]	; (8002670 <HAL_GPIO_Init+0x258>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x21a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x25c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x216>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x260>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x212>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_GPIO_Init+0x264>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x20e>
 8002622:	2309      	movs	r3, #9
 8002624:	e02d      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002626:	230a      	movs	r3, #10
 8002628:	e02b      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800262a:	2308      	movs	r3, #8
 800262c:	e029      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800262e:	2307      	movs	r3, #7
 8002630:	e027      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002632:	2306      	movs	r3, #6
 8002634:	e025      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002636:	2305      	movs	r3, #5
 8002638:	e023      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800263a:	2304      	movs	r3, #4
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800263e:	2303      	movs	r3, #3
 8002640:	e01f      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002642:	2302      	movs	r3, #2
 8002644:	e01d      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 8002646:	2301      	movs	r3, #1
 8002648:	e01b      	b.n	8002682 <HAL_GPIO_Init+0x26a>
 800264a:	bf00      	nop
 800264c:	58000080 	.word	0x58000080
 8002650:	58024400 	.word	0x58024400
 8002654:	58000400 	.word	0x58000400
 8002658:	58020000 	.word	0x58020000
 800265c:	58020400 	.word	0x58020400
 8002660:	58020800 	.word	0x58020800
 8002664:	58020c00 	.word	0x58020c00
 8002668:	58021000 	.word	0x58021000
 800266c:	58021400 	.word	0x58021400
 8002670:	58021800 	.word	0x58021800
 8002674:	58021c00 	.word	0x58021c00
 8002678:	58022000 	.word	0x58022000
 800267c:	58022400 	.word	0x58022400
 8002680:	2300      	movs	r3, #0
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	4093      	lsls	r3, r2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <HAL_GPIO_Init+0x35c>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f ae63 	bne.w	800242c <HAL_GPIO_Init+0x14>
  }
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	3724      	adds	r7, #36	; 0x24
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <HAL_HSEM_FastTake+0x2c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3320      	adds	r3, #32
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_HSEM_FastTake+0x30>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	58026400 	.word	0x58026400
 80027dc:	80000300 	.word	0x80000300

080027e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80027ea:	4906      	ldr	r1, [pc, #24]	; (8002804 <HAL_HSEM_Release+0x24>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	58026400 	.word	0x58026400

08002808 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	2b06      	cmp	r3, #6
 800281a:	d00a      	beq.n	8002832 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e040      	b.n	80028b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e03e      	b.n	80028b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800283a:	491f      	ldr	r1, [pc, #124]	; (80028b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4313      	orrs	r3, r2
 8002840:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002842:	f7fe fed3 	bl	80015ec <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002848:	e009      	b.n	800285e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800284a:	f7fe fecf 	bl	80015ec <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002858:	d901      	bls.n	800285e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e028      	b.n	80028b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d1ee      	bne.n	800284a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b1e      	cmp	r3, #30
 8002870:	d008      	beq.n	8002884 <HAL_PWREx_ConfigSupply+0x7c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b2e      	cmp	r3, #46	; 0x2e
 8002876:	d005      	beq.n	8002884 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b1d      	cmp	r3, #29
 800287c:	d002      	beq.n	8002884 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b2d      	cmp	r3, #45	; 0x2d
 8002882:	d114      	bne.n	80028ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002884:	f7fe feb2 	bl	80015ec <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800288a:	e009      	b.n	80028a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800288c:	f7fe feae 	bl	80015ec <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289a:	d901      	bls.n	80028a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e007      	b.n	80028b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d1ee      	bne.n	800288c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58024800 	.word	0x58024800

080028bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f000 bc1d 	b.w	800310a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8087 	beq.w	80029ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4b99      	ldr	r3, [pc, #612]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e8:	4b96      	ldr	r3, [pc, #600]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d007      	beq.n	8002904 <HAL_RCC_OscConfig+0x48>
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	2b18      	cmp	r3, #24
 80028f8:	d110      	bne.n	800291c <HAL_RCC_OscConfig+0x60>
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d10b      	bne.n	800291c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	4b8f      	ldr	r3, [pc, #572]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d06c      	beq.n	80029ea <HAL_RCC_OscConfig+0x12e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d168      	bne.n	80029ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e3f6      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x78>
 8002926:	4b87      	ldr	r3, [pc, #540]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a86      	ldr	r2, [pc, #536]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e02e      	b.n	8002992 <HAL_RCC_OscConfig+0xd6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x9a>
 800293c:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a80      	ldr	r2, [pc, #512]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b7e      	ldr	r3, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7d      	ldr	r2, [pc, #500]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e01d      	b.n	8002992 <HAL_RCC_OscConfig+0xd6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0xbe>
 8002960:	4b78      	ldr	r3, [pc, #480]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a77      	ldr	r2, [pc, #476]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a74      	ldr	r2, [pc, #464]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0xd6>
 800297a:	4b72      	ldr	r3, [pc, #456]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a71      	ldr	r2, [pc, #452]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6e      	ldr	r2, [pc, #440]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 800298c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d013      	beq.n	80029c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fe27 	bl	80015ec <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a2:	f7fe fe23 	bl	80015ec <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e3aa      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029b4:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0xe6>
 80029c0:	e014      	b.n	80029ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe fe13 	bl	80015ec <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ca:	f7fe fe0f 	bl	80015ec <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e396      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x10e>
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80cb 	beq.w	8002b90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fa:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a02:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_OscConfig+0x164>
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	2b18      	cmp	r3, #24
 8002a14:	d156      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x208>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d151      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a20:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_OscConfig+0x17c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e368      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 0219 	bic.w	r2, r3, #25
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	493f      	ldr	r1, [pc, #252]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a4a:	f7fe fdcf 	bl	80015ec <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe fdcb 	bl	80015ec <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e352      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a64:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	f7fe fdc8 	bl	8001604 <HAL_GetREVID>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d817      	bhi.n	8002aae <HAL_RCC_OscConfig+0x1f2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1dc>
 8002a86:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a8e:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a94:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a96:	e07b      	b.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	031b      	lsls	r3, r3, #12
 8002aa6:	4927      	ldr	r1, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	e070      	b.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	4921      	ldr	r1, [pc, #132]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac2:	e065      	b.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d048      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 0219 	bic.w	r2, r3, #25
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	491a      	ldr	r1, [pc, #104]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fd85 	bl	80015ec <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fd81 	bl	80015ec <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e308      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	f7fe fd7e 	bl	8001604 <HAL_GetREVID>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d81a      	bhi.n	8002b48 <HAL_RCC_OscConfig+0x28c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d108      	bne.n	8002b2c <HAL_RCC_OscConfig+0x270>
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	6053      	str	r3, [r2, #4]
 8002b2a:	e031      	b.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	4902      	ldr	r1, [pc, #8]	; (8002b44 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	e026      	b.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
 8002b48:	4b9a      	ldr	r3, [pc, #616]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	4997      	ldr	r1, [pc, #604]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
 8002b5c:	e018      	b.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5e:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a94      	ldr	r2, [pc, #592]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fd3f 	bl	80015ec <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fe fd3b 	bl	80015ec <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e2c2      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b84:	4b8b      	ldr	r3, [pc, #556]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a9 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba8:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d007      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x308>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b18      	cmp	r3, #24
 8002bb8:	d13a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x374>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d135      	bne.n	8002c30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bc4:	4b7b      	ldr	r3, [pc, #492]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x320>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e296      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bdc:	f7fe fd12 	bl	8001604 <HAL_GetREVID>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d817      	bhi.n	8002c1a <HAL_RCC_OscConfig+0x35e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x348>
 8002bf2:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bfa:	4a6e      	ldr	r2, [pc, #440]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c02:	e075      	b.n	8002cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	069b      	lsls	r3, r3, #26
 8002c12:	4968      	ldr	r1, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c18:	e06a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c1a:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	061b      	lsls	r3, r3, #24
 8002c28:	4962      	ldr	r1, [pc, #392]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c2e:	e05f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d042      	beq.n	8002cbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c38:	4b5e      	ldr	r3, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a5d      	ldr	r2, [pc, #372]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fcd2 	bl	80015ec <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fcce 	bl	80015ec <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e255      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c5e:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c6a:	f7fe fccb 	bl	8001604 <HAL_GetREVID>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d817      	bhi.n	8002ca8 <HAL_RCC_OscConfig+0x3ec>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d108      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3d6>
 8002c80:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c88:	4a4a      	ldr	r2, [pc, #296]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c8e:	6053      	str	r3, [r2, #4]
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0x434>
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	069b      	lsls	r3, r3, #26
 8002ca0:	4944      	ldr	r1, [pc, #272]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	e023      	b.n	8002cf0 <HAL_RCC_OscConfig+0x434>
 8002ca8:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	493f      	ldr	r1, [pc, #252]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60cb      	str	r3, [r1, #12]
 8002cbc:	e018      	b.n	8002cf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a3c      	ldr	r2, [pc, #240]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fc8f 	bl	80015ec <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc8b 	bl	80015ec <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e212      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ce4:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d036      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d019      	beq.n	8002d38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fc6c 	bl	80015ec <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fc68 	bl	80015ec <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1ef      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x45c>
 8002d36:	e018      	b.n	8002d6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe fc52 	bl	80015ec <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fc4e 	bl	80015ec <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1d5      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d039      	beq.n	8002dea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fc2f 	bl	80015ec <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d92:	f7fe fc2b 	bl	80015ec <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1b2      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4d6>
 8002db0:	e01b      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
 8002db2:	bf00      	nop
 8002db4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db8:	4b9b      	ldr	r3, [pc, #620]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a9a      	ldr	r2, [pc, #616]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fc12 	bl	80015ec <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dcc:	f7fe fc0e 	bl	80015ec <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e195      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dde:	4b92      	ldr	r3, [pc, #584]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8081 	beq.w	8002efa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002df8:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x770>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8b      	ldr	r2, [pc, #556]	; (800302c <HAL_RCC_OscConfig+0x770>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fbf2 	bl	80015ec <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe fbee 	bl	80015ec <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e175      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1e:	4b83      	ldr	r3, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x770>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x584>
 8002e32:	4b7d      	ldr	r3, [pc, #500]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a7c      	ldr	r2, [pc, #496]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e02d      	b.n	8002e9c <HAL_RCC_OscConfig+0x5e0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5a6>
 8002e48:	4b77      	ldr	r3, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a76      	ldr	r2, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	4b74      	ldr	r3, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a73      	ldr	r2, [pc, #460]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e5a:	f023 0304 	bic.w	r3, r3, #4
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0x5e0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c8>
 8002e6a:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a6e      	ldr	r2, [pc, #440]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a6b      	ldr	r2, [pc, #428]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0x5e0>
 8002e84:	4b68      	ldr	r3, [pc, #416]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a67      	ldr	r2, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b65      	ldr	r3, [pc, #404]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a64      	ldr	r2, [pc, #400]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002e96:	f023 0304 	bic.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fba2 	bl	80015ec <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe fb9e 	bl	80015ec <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e123      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec2:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ee      	beq.n	8002eac <HAL_RCC_OscConfig+0x5f0>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fb8c 	bl	80015ec <HAL_GetTick>
 8002ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fb88 	bl	80015ec <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e10d      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eee:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1ee      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8102 	beq.w	8003108 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0c:	2b18      	cmp	r3, #24
 8002f0e:	f000 80bd 	beq.w	800308c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	f040 809e 	bne.w	8003058 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a41      	ldr	r2, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fb60 	bl	80015ec <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fb5c 	bl	80015ec <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0e3      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCC_OscConfig+0x774>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	430a      	orrs	r2, r1
 8002f62:	4931      	ldr	r1, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	628b      	str	r3, [r1, #40]	; 0x28
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	3b01      	subs	r3, #1
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	3b01      	subs	r3, #1
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	3b01      	subs	r3, #1
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f98:	4923      	ldr	r1, [pc, #140]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f9e:	4b22      	ldr	r3, [pc, #136]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	4a21      	ldr	r2, [pc, #132]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fae:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCC_OscConfig+0x778>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	491b      	ldr	r1, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f023 020c 	bic.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4917      	ldr	r1, [pc, #92]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f023 0202 	bic.w	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	4912      	ldr	r1, [pc, #72]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_RCC_OscConfig+0x76c>)
 8003018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fae5 	bl	80015ec <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003024:	e011      	b.n	800304a <HAL_RCC_OscConfig+0x78e>
 8003026:	bf00      	nop
 8003028:	58024400 	.word	0x58024400
 800302c:	58024800 	.word	0x58024800
 8003030:	fffffc0c 	.word	0xfffffc0c
 8003034:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe fad8 	bl	80015ec <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e05f      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800304a:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_RCC_OscConfig+0x858>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x77c>
 8003056:	e057      	b.n	8003108 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCC_OscConfig+0x858>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x858>)
 800305e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fac2 	bl	80015ec <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fabe 	bl	80015ec <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e045      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800307e:	4b25      	ldr	r3, [pc, #148]	; (8003114 <HAL_RCC_OscConfig+0x858>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x7b0>
 800308a:	e03d      	b.n	8003108 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCC_OscConfig+0x858>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_RCC_OscConfig+0x858>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b01      	cmp	r3, #1
 800309e:	d031      	beq.n	8003104 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d12a      	bne.n	8003104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d122      	bne.n	8003104 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d11a      	bne.n	8003104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d111      	bne.n	8003104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0c1b      	lsrs	r3, r3, #16
 80030e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d108      	bne.n	8003104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	0e1b      	lsrs	r3, r3, #24
 80030f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3730      	adds	r7, #48	; 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	58024400 	.word	0x58024400

08003118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e19c      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d910      	bls.n	800315c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b87      	ldr	r3, [pc, #540]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	4985      	ldr	r1, [pc, #532]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b83      	ldr	r3, [pc, #524]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e184      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	4b7b      	ldr	r3, [pc, #492]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003174:	429a      	cmp	r2, r3
 8003176:	d908      	bls.n	800318a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003178:	4b78      	ldr	r3, [pc, #480]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4975      	ldr	r1, [pc, #468]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003186:	4313      	orrs	r3, r2
 8003188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	4b70      	ldr	r3, [pc, #448]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d908      	bls.n	80031b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031a6:	4b6d      	ldr	r3, [pc, #436]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	496a      	ldr	r1, [pc, #424]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	4b64      	ldr	r3, [pc, #400]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d908      	bls.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031d4:	4b61      	ldr	r3, [pc, #388]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	495e      	ldr	r1, [pc, #376]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	4b59      	ldr	r3, [pc, #356]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031fe:	429a      	cmp	r2, r3
 8003200:	d908      	bls.n	8003214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003202:	4b56      	ldr	r3, [pc, #344]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4953      	ldr	r1, [pc, #332]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003210:	4313      	orrs	r3, r2
 8003212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	4b4d      	ldr	r3, [pc, #308]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	429a      	cmp	r2, r3
 800322e:	d908      	bls.n	8003242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b4a      	ldr	r3, [pc, #296]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f023 020f 	bic.w	r2, r3, #15
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4947      	ldr	r1, [pc, #284]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800323e:	4313      	orrs	r3, r2
 8003240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d055      	beq.n	80032fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4940      	ldr	r1, [pc, #256]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800325c:	4313      	orrs	r3, r2
 800325e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d107      	bne.n	8003278 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003268:	4b3c      	ldr	r3, [pc, #240]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d121      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0f6      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d107      	bne.n	8003290 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d115      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0ea      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0de      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032a8:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d6      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b8:	4b28      	ldr	r3, [pc, #160]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f023 0207 	bic.w	r2, r3, #7
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4925      	ldr	r1, [pc, #148]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe f98f 	bl	80015ec <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7fe f98b 	bl	80015ec <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0be      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d1eb      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d010      	beq.n	8003328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	429a      	cmp	r2, r3
 8003314:	d208      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f023 020f 	bic.w	r2, r3, #15
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	490e      	ldr	r1, [pc, #56]	; (800335c <HAL_RCC_ClockConfig+0x244>)
 8003324:	4313      	orrs	r3, r2
 8003326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d214      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 020f 	bic.w	r2, r3, #15
 800333e:	4906      	ldr	r1, [pc, #24]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCC_ClockConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e086      	b.n	8003466 <HAL_RCC_ClockConfig+0x34e>
 8003358:	52002000 	.word	0x52002000
 800335c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003378:	429a      	cmp	r2, r3
 800337a:	d208      	bcs.n	800338e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800337c:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	4939      	ldr	r1, [pc, #228]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 800338a:	4313      	orrs	r3, r2
 800338c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d208      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	492e      	ldr	r1, [pc, #184]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d010      	beq.n	80033ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d208      	bcs.n	80033ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	4922      	ldr	r1, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003402:	429a      	cmp	r2, r3
 8003404:	d208      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4917      	ldr	r1, [pc, #92]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 8003414:	4313      	orrs	r3, r2
 8003416:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003418:	f000 f834 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	4912      	ldr	r1, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x35c>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCC_ClockConfig+0x358>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <HAL_RCC_ClockConfig+0x35c>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x360>)
 800344e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x364>)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x368>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f87c 	bl	8001558 <HAL_InitTick>
 8003460:	4603      	mov	r3, r0
 8003462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
 8003474:	0800a8f4 	.word	0x0800a8f4
 8003478:	24000004 	.word	0x24000004
 800347c:	24000000 	.word	0x24000000
 8003480:	24000018 	.word	0x24000018

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348a:	4bb3      	ldr	r3, [pc, #716]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003492:	2b18      	cmp	r3, #24
 8003494:	f200 8155 	bhi.w	8003742 <HAL_RCC_GetSysClockFreq+0x2be>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	08003505 	.word	0x08003505
 80034a4:	08003743 	.word	0x08003743
 80034a8:	08003743 	.word	0x08003743
 80034ac:	08003743 	.word	0x08003743
 80034b0:	08003743 	.word	0x08003743
 80034b4:	08003743 	.word	0x08003743
 80034b8:	08003743 	.word	0x08003743
 80034bc:	08003743 	.word	0x08003743
 80034c0:	0800352b 	.word	0x0800352b
 80034c4:	08003743 	.word	0x08003743
 80034c8:	08003743 	.word	0x08003743
 80034cc:	08003743 	.word	0x08003743
 80034d0:	08003743 	.word	0x08003743
 80034d4:	08003743 	.word	0x08003743
 80034d8:	08003743 	.word	0x08003743
 80034dc:	08003743 	.word	0x08003743
 80034e0:	08003531 	.word	0x08003531
 80034e4:	08003743 	.word	0x08003743
 80034e8:	08003743 	.word	0x08003743
 80034ec:	08003743 	.word	0x08003743
 80034f0:	08003743 	.word	0x08003743
 80034f4:	08003743 	.word	0x08003743
 80034f8:	08003743 	.word	0x08003743
 80034fc:	08003743 	.word	0x08003743
 8003500:	08003537 	.word	0x08003537
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003504:	4b94      	ldr	r3, [pc, #592]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003510:	4b91      	ldr	r3, [pc, #580]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	4a90      	ldr	r2, [pc, #576]	; (800375c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003522:	e111      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003524:	4b8d      	ldr	r3, [pc, #564]	; (800375c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003526:	61bb      	str	r3, [r7, #24]
    break;
 8003528:	e10e      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800352a:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800352c:	61bb      	str	r3, [r7, #24]
    break;
 800352e:	e10b      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003530:	4b8c      	ldr	r3, [pc, #560]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003532:	61bb      	str	r3, [r7, #24]
    break;
 8003534:	e108      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003536:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003540:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800354c:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003556:	4b80      	ldr	r3, [pc, #512]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	08db      	lsrs	r3, r3, #3
 800355c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80e1 	beq.w	800373c <HAL_RCC_GetSysClockFreq+0x2b8>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b02      	cmp	r3, #2
 800357e:	f000 8083 	beq.w	8003688 <HAL_RCC_GetSysClockFreq+0x204>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b02      	cmp	r3, #2
 8003586:	f200 80a1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x248>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x114>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d056      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003596:	e099      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003598:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02d      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035a4:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	08db      	lsrs	r3, r3, #3
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	4a6b      	ldr	r2, [pc, #428]	; (800375c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ce:	4b62      	ldr	r3, [pc, #392]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035de:	ed97 6a02 	vldr	s12, [r7, #8]
 80035e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035fe:	e087      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800376c <HAL_RCC_GetSysClockFreq+0x2e8>
 800360e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003622:	ed97 6a02 	vldr	s12, [r7, #8]
 8003626:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800362a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003642:	e065      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b40      	ldr	r3, [pc, #256]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a02 	vldr	s12, [r7, #8]
 800366a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003686:	e043      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ca:	e021      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800370e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	0a5b      	lsrs	r3, r3, #9
 8003716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371a:	3301      	adds	r3, #1
 800371c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003728:	edd7 6a07 	vldr	s13, [r7, #28]
 800372c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003734:	ee17 3a90 	vmov	r3, s15
 8003738:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800373a:	e005      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    break;
 8003740:	e002      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003744:	61bb      	str	r3, [r7, #24]
    break;
 8003746:	bf00      	nop
  }

  return sysclockfreq;
 8003748:	69bb      	ldr	r3, [r7, #24]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
 800375c:	03d09000 	.word	0x03d09000
 8003760:	003d0900 	.word	0x003d0900
 8003764:	007a1200 	.word	0x007a1200
 8003768:	46000000 	.word	0x46000000
 800376c:	4c742400 	.word	0x4c742400
 8003770:	4a742400 	.word	0x4a742400
 8003774:	4af42400 	.word	0x4af42400

08003778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800377e:	f7ff fe81 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003782:	4602      	mov	r2, r0
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	490f      	ldr	r1, [pc, #60]	; (80037cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_RCC_GetHCLKFreq+0x54>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80037b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037b6:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	58024400 	.word	0x58024400
 80037cc:	0800a8f4 	.word	0x0800a8f4
 80037d0:	24000004 	.word	0x24000004
 80037d4:	24000000 	.word	0x24000000

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037dc:	f7ff ffcc 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	58024400 	.word	0x58024400
 8003800:	0800a8f4 	.word	0x0800a8f4

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003808:	f7ff ffb6 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4904      	ldr	r1, [pc, #16]	; (800382c <HAL_RCC_GetPCLK2Freq+0x28>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	58024400 	.word	0x58024400
 800382c:	0800a8f4 	.word	0x0800a8f4

08003830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800383c:	2300      	movs	r3, #0
 800383e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03f      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003854:	d02a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385a:	d824      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800385c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003860:	d018      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003866:	d81e      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800386c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003870:	d007      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003872:	e018      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4ba3      	ldr	r3, [pc, #652]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4aa2      	ldr	r2, [pc, #648]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003880:	e015      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f9d5 	bl	8004c38 <RCCEx_PLL2_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003892:	e00c      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3324      	adds	r3, #36	; 0x24
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fa7e 	bl	8004d9c <RCCEx_PLL3_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038a4:	e003      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
      break;
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038b4:	4b93      	ldr	r3, [pc, #588]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c0:	4990      	ldr	r1, [pc, #576]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	650b      	str	r3, [r1, #80]	; 0x50
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d03d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d826      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	0800390b 	.word	0x0800390b
 80038f0:	0800391d 	.word	0x0800391d
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003935 	.word	0x08003935
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fc:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	4a80      	ldr	r2, [pc, #512]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003908:	e015      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f991 	bl	8004c38 <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800391a:	e00c      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3324      	adds	r3, #36	; 0x24
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fa3a 	bl	8004d9c <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
      break;
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800393c:	4b71      	ldr	r3, [pc, #452]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	f023 0207 	bic.w	r2, r3, #7
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	496e      	ldr	r1, [pc, #440]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	650b      	str	r3, [r1, #80]	; 0x50
 800394e:	e001      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395c:	2b00      	cmp	r3, #0
 800395e:	d042      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003968:	d02b      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800396a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396e:	d825      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003970:	2bc0      	cmp	r3, #192	; 0xc0
 8003972:	d028      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003974:	2bc0      	cmp	r3, #192	; 0xc0
 8003976:	d821      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d016      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d81d      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d007      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003988:	e018      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398a:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003996:	e017      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f94a 	bl	8004c38 <RCCEx_PLL2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039a8:	e00e      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3324      	adds	r3, #36	; 0x24
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 f9f3 	bl	8004d9c <RCCEx_PLL3_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039ba:	e005      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      break;
 80039c0:	e002      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039ce:	4b4d      	ldr	r3, [pc, #308]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	494a      	ldr	r1, [pc, #296]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	650b      	str	r3, [r1, #80]	; 0x50
 80039e0:	e001      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d049      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039fc:	d030      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a02:	d82a      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a08:	d02c      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a0e:	d824      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a14:	d018      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1a:	d81e      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a24:	d007      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a26:	e018      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a34:	e017      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 f8fb 	bl	8004c38 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a46:	e00e      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f9a4 	bl	8004d9c <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a58:	e005      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a7a:	4922      	ldr	r1, [pc, #136]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a80:	e001      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d04b      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9c:	d030      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa2:	d82a      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003aa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aa8:	d02e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003aaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aae:	d824      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab4:	d018      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aba:	d81e      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac4:	d007      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ac6:	e018      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ad4:	e019      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f8ab 	bl	8004c38 <RCCEx_PLL2_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ae6:	e010      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f954 	bl	8004d9c <RCCEx_PLL3_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003af8:	e007      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
      break;
 8003afe:	e004      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003b00:	bf00      	nop
 8003b02:	e002      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003b04:	58024400 	.word	0x58024400
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b10:	4b99      	ldr	r3, [pc, #612]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b1e:	4996      	ldr	r1, [pc, #600]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	658b      	str	r3, [r1, #88]	; 0x58
 8003b24:	e001      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d032      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3a:	2b30      	cmp	r3, #48	; 0x30
 8003b3c:	d01c      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b3e:	2b30      	cmp	r3, #48	; 0x30
 8003b40:	d817      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d00c      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d813      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d10f      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b52:	4b89      	ldr	r3, [pc, #548]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	4a88      	ldr	r2, [pc, #544]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b5e:	e00e      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	2102      	movs	r1, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f866 	bl	8004c38 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b70:	e005      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b84:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	4979      	ldr	r1, [pc, #484]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b96:	e001      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d047      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d030      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb6:	d82a      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bbc:	d02c      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003bbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bc2:	d824      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc8:	d018      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d81e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d007      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003bda:	e018      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003be8:	e017      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f821 	bl	8004c38 <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bfa:	e00e      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3324      	adds	r3, #36	; 0x24
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f8ca 	bl	8004d9c <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e005      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c20:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	4952      	ldr	r1, [pc, #328]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	650b      	str	r3, [r1, #80]	; 0x50
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d049      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d02e      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c52:	d828      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c58:	d02a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c5e:	d822      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c64:	d026      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c6a:	d81c      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c70:	d010      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c76:	d816      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d111      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2101      	movs	r1, #1
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 ffd5 	bl	8004c38 <RCCEx_PLL2_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c92:	e012      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3324      	adds	r3, #36	; 0x24
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f87e 	bl	8004d9c <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ca4:	e009      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8003caa:	e006      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cac:	bf00      	nop
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ccc:	492a      	ldr	r1, [pc, #168]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d04d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cee:	d02e      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf4:	d828      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfa:	d02a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d822      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d06:	d026      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d0c:	d81c      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d12:	d010      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d18:	d816      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01d      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d22:	d111      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 ff84 	bl	8004c38 <RCCEx_PLL2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d34:	e012      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 f82d 	bl	8004d9c <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d46:	e009      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e006      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e004      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d52:	bf00      	nop
 8003d54:	e002      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d70:	4901      	ldr	r1, [pc, #4]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	658b      	str	r3, [r1, #88]	; 0x58
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d00e      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9a:	d814      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da4:	d10f      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da6:	4baf      	ldr	r3, [pc, #700]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4aae      	ldr	r2, [pc, #696]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003db2:	e00c      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 ff3c 	bl	8004c38 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dd4:	4ba3      	ldr	r3, [pc, #652]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de0:	49a0      	ldr	r1, [pc, #640]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	650b      	str	r3, [r1, #80]	; 0x50
 8003de6:	e001      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d032      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d81b      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e19 	.word	0x08003e19
 8003e10:	08003e27 	.word	0x08003e27
 8003e14:	08003e3f 	.word	0x08003e3f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4b92      	ldr	r3, [pc, #584]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a91      	ldr	r2, [pc, #580]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e24:	e00c      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 ff03 	bl	8004c38 <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e46:	4b87      	ldr	r3, [pc, #540]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	4984      	ldr	r1, [pc, #528]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e58:	e001      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8086 	beq.w	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e6c:	4b7e      	ldr	r3, [pc, #504]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7d      	ldr	r2, [pc, #500]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e78:	f7fd fbb8 	bl	80015ec <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7e:	e009      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e80:	f7fd fbb4 	bl	80015ec <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d902      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	75fb      	strb	r3, [r7, #23]
        break;
 8003e92:	e005      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e94:	4b74      	ldr	r3, [pc, #464]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ef      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d166      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ea6:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb0:	4053      	eors	r3, r2
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d013      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec4:	4b67      	ldr	r3, [pc, #412]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a63      	ldr	r2, [pc, #396]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003edc:	4a61      	ldr	r2, [pc, #388]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eec:	d115      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd fb7d 	bl	80015ec <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd fb79 	bl	80015ec <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d902      	bls.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f0e:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ed      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d126      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2e:	d10d      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f30:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f3e:	0919      	lsrs	r1, r3, #4
 8003f40:	4b4a      	ldr	r3, [pc, #296]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003f42:	400b      	ands	r3, r1
 8003f44:	4947      	ldr	r1, [pc, #284]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	610b      	str	r3, [r1, #16]
 8003f4a:	e005      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f4c:	4b45      	ldr	r3, [pc, #276]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	4a44      	ldr	r2, [pc, #272]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f56:	6113      	str	r3, [r2, #16]
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f66:	493f      	ldr	r1, [pc, #252]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	670b      	str	r3, [r1, #112]	; 0x70
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	75bb      	strb	r3, [r7, #22]
 8003f72:	e001      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8085 	beq.w	8004090 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8a:	2b28      	cmp	r3, #40	; 0x28
 8003f8c:	d866      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08004071 	.word	0x08004071
 8003f98:	0800405d 	.word	0x0800405d
 8003f9c:	0800405d 	.word	0x0800405d
 8003fa0:	0800405d 	.word	0x0800405d
 8003fa4:	0800405d 	.word	0x0800405d
 8003fa8:	0800405d 	.word	0x0800405d
 8003fac:	0800405d 	.word	0x0800405d
 8003fb0:	0800405d 	.word	0x0800405d
 8003fb4:	08004039 	.word	0x08004039
 8003fb8:	0800405d 	.word	0x0800405d
 8003fbc:	0800405d 	.word	0x0800405d
 8003fc0:	0800405d 	.word	0x0800405d
 8003fc4:	0800405d 	.word	0x0800405d
 8003fc8:	0800405d 	.word	0x0800405d
 8003fcc:	0800405d 	.word	0x0800405d
 8003fd0:	0800405d 	.word	0x0800405d
 8003fd4:	0800404b 	.word	0x0800404b
 8003fd8:	0800405d 	.word	0x0800405d
 8003fdc:	0800405d 	.word	0x0800405d
 8003fe0:	0800405d 	.word	0x0800405d
 8003fe4:	0800405d 	.word	0x0800405d
 8003fe8:	0800405d 	.word	0x0800405d
 8003fec:	0800405d 	.word	0x0800405d
 8003ff0:	0800405d 	.word	0x0800405d
 8003ff4:	08004071 	.word	0x08004071
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	0800405d 	.word	0x0800405d
 8004000:	0800405d 	.word	0x0800405d
 8004004:	0800405d 	.word	0x0800405d
 8004008:	0800405d 	.word	0x0800405d
 800400c:	0800405d 	.word	0x0800405d
 8004010:	0800405d 	.word	0x0800405d
 8004014:	08004071 	.word	0x08004071
 8004018:	0800405d 	.word	0x0800405d
 800401c:	0800405d 	.word	0x0800405d
 8004020:	0800405d 	.word	0x0800405d
 8004024:	0800405d 	.word	0x0800405d
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800405d 	.word	0x0800405d
 8004030:	0800405d 	.word	0x0800405d
 8004034:	08004071 	.word	0x08004071
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fdfa 	bl	8004c38 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004048:	e013      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fea3 	bl	8004d9c <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800405a:	e00a      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e007      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
 8004068:	58024800 	.word	0x58024800
 800406c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004078:	4b96      	ldr	r3, [pc, #600]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004084:	4993      	ldr	r1, [pc, #588]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	654b      	str	r3, [r1, #84]	; 0x54
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d038      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	d821      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040ef 	.word	0x080040ef
 80040b0:	080040c5 	.word	0x080040c5
 80040b4:	080040d7 	.word	0x080040d7
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040ef 	.word	0x080040ef
 80040c0:	080040ef 	.word	0x080040ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fdb4 	bl	8004c38 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fe5d 	bl	8004d9c <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80040ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040f6:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004102:	4974      	ldr	r1, [pc, #464]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004104:	4313      	orrs	r3, r2
 8004106:	654b      	str	r3, [r1, #84]	; 0x54
 8004108:	e001      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	2b05      	cmp	r3, #5
 8004122:	d821      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	0800416f 	.word	0x0800416f
 8004130:	08004145 	.word	0x08004145
 8004134:	08004157 	.word	0x08004157
 8004138:	0800416f 	.word	0x0800416f
 800413c:	0800416f 	.word	0x0800416f
 8004140:	0800416f 	.word	0x0800416f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fd74 	bl	8004c38 <RCCEx_PLL2_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004154:	e00c      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3324      	adds	r3, #36	; 0x24
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe1d 	bl	8004d9c <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004166:	e003      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
      break;
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800416e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004176:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	f023 0207 	bic.w	r2, r3, #7
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	4953      	ldr	r1, [pc, #332]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	658b      	str	r3, [r1, #88]	; 0x58
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d04b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a6:	d02e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80041a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ac:	d828      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d02a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d822      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041be:	d026      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80041c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c4:	d81c      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ca:	d010      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d0:	d816      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01d      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80041d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041da:	d111      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fd28 	bl	8004c38 <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041ec:	e012      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fdd1 	bl	8004d9c <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041fe:	e009      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004206:	bf00      	nop
 8004208:	e004      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421a:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004228:	492a      	ldr	r1, [pc, #168]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	654b      	str	r3, [r1, #84]	; 0x54
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d04d      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004246:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800424a:	d02e      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800424c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004250:	d828      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d02a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d822      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800425e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004262:	d026      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004268:	d81c      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426e:	d010      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d816      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01d      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d111      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fcd6 	bl	8004c38 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004290:	e012      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fd7f 	bl	8004d9c <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042a2:	e009      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
      break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042cc:	4901      	ldr	r1, [pc, #4]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	658b      	str	r3, [r1, #88]	; 0x58
 80042d2:	e003      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80042d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d04b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042f2:	d02e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042f8:	d828      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fe:	d02a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d822      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004306:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800430a:	d026      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800430c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004310:	d81c      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004316:	d010      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431c:	d816      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01d      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004326:	d111      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fc82 	bl	8004c38 <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004338:	e012      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3324      	adds	r3, #36	; 0x24
 800433e:	2102      	movs	r1, #2
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd2b 	bl	8004d9c <RCCEx_PLL3_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800434a:	e009      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
      break;
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004352:	bf00      	nop
 8004354:	e004      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800435e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004366:	4b9d      	ldr	r3, [pc, #628]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004374:	4999      	ldr	r1, [pc, #612]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004376:	4313      	orrs	r3, r2
 8004378:	658b      	str	r3, [r1, #88]	; 0x58
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004396:	d10a      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3324      	adds	r3, #36	; 0x24
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fcfc 	bl	8004d9c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043ae:	4b8b      	ldr	r3, [pc, #556]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043bc:	4987      	ldr	r1, [pc, #540]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d8:	d10a      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fcdb 	bl	8004d9c <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043f0:	4b7a      	ldr	r3, [pc, #488]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	4977      	ldr	r1, [pc, #476]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004400:	4313      	orrs	r3, r2
 8004402:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d034      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800441a:	d01d      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800441c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004420:	d817      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800442c:	e011      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fbff 	bl	8004c38 <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800443e:	e00c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3324      	adds	r3, #36	; 0x24
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fca8 	bl	8004d9c <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004460:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800446e:	495b      	ldr	r1, [pc, #364]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	658b      	str	r3, [r1, #88]	; 0x58
 8004474:	e001      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d033      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004490:	d01c      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004496:	d816      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449c:	d003      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800449e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a2:	d007      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80044a4:	e00f      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a6:	4b4d      	ldr	r3, [pc, #308]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a4c      	ldr	r2, [pc, #304]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044b2:	e00c      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3324      	adds	r3, #36	; 0x24
 80044b8:	2101      	movs	r1, #1
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fc6e 	bl	8004d9c <RCCEx_PLL3_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80044cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e2:	493e      	ldr	r1, [pc, #248]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	654b      	str	r3, [r1, #84]	; 0x54
 80044e8:	e001      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d029      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d007      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004508:	e00f      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	4a33      	ldr	r2, [pc, #204]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004514:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004516:	e00b      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fb8a 	bl	8004c38 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004528:	e002      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
      break;
 800452e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	4926      	ldr	r1, [pc, #152]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004548:	e001      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3324      	adds	r3, #36	; 0x24
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fc1b 	bl	8004d9c <RCCEx_PLL3_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d033      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004584:	d017      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458a:	d811      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800458c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004590:	d013      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004596:	d80b      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d010      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800459c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a0:	d106      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80045ae:	e007      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
      break;
 80045b4:	e004      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d2:	4902      	ldr	r1, [pc, #8]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	654b      	str	r3, [r1, #84]	; 0x54
 80045d8:	e004      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	492e      	ldr	r1, [pc, #184]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800461c:	4926      	ldr	r1, [pc, #152]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800461e:	4313      	orrs	r3, r2
 8004620:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463a:	491f      	ldr	r1, [pc, #124]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800463c:	4313      	orrs	r3, r2
 800463e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004656:	6113      	str	r3, [r2, #16]
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004662:	4915      	ldr	r1, [pc, #84]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004664:	4313      	orrs	r3, r2
 8004666:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da08      	bge.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004674:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	490e      	ldr	r1, [pc, #56]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800467e:	4313      	orrs	r3, r2
 8004680:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	4906      	ldr	r1, [pc, #24]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80046a2:	7dbb      	ldrb	r3, [r7, #22]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	58024400 	.word	0x58024400

080046bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046c0:	f7ff f85a 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4904      	ldr	r1, [pc, #16]	; (80046e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58024400 	.word	0x58024400
 80046e4:	0800a8f4 	.word	0x0800a8f4

080046e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046f0:	4ba1      	ldr	r3, [pc, #644]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046fa:	4b9f      	ldr	r3, [pc, #636]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	0b1b      	lsrs	r3, r3, #12
 8004700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004704:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004706:	4b9c      	ldr	r3, [pc, #624]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004712:	4b99      	ldr	r3, [pc, #612]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	08db      	lsrs	r3, r3, #3
 8004718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8111 	beq.w	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b02      	cmp	r3, #2
 800473a:	f000 8083 	beq.w	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b02      	cmp	r3, #2
 8004742:	f200 80a1 	bhi.w	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d056      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004752:	e099      	b.n	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004754:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02d      	beq.n	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004760:	4b85      	ldr	r3, [pc, #532]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	08db      	lsrs	r3, r3, #3
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	4a84      	ldr	r2, [pc, #528]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b7b      	ldr	r3, [pc, #492]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a03 	vldr	s12, [r7, #12]
 800479e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047ba:	e087      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047fe:	e065      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004842:	e043      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800498c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004856:	4b48      	ldr	r3, [pc, #288]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	ed97 6a03 	vldr	s12, [r7, #12]
 800486a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004886:	e021      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489a:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80048cc:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	0a5b      	lsrs	r3, r3, #9
 80048d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80048fa:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	0c1b      	lsrs	r3, r3, #16
 8004900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004914:	edd7 6a07 	vldr	s13, [r7, #28]
 8004918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004920:	ee17 2a90 	vmov	r2, s15
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	0e1b      	lsrs	r3, r3, #24
 800492e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800493e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004942:	edd7 6a07 	vldr	s13, [r7, #28]
 8004946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494e:	ee17 2a90 	vmov	r2, s15
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004956:	e008      	b.n	800496a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
}
 800496a:	bf00      	nop
 800496c:	3724      	adds	r7, #36	; 0x24
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	03d09000 	.word	0x03d09000
 8004980:	46000000 	.word	0x46000000
 8004984:	4c742400 	.word	0x4c742400
 8004988:	4a742400 	.word	0x4a742400
 800498c:	4af42400 	.word	0x4af42400

08004990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004998:	4ba1      	ldr	r3, [pc, #644]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80049a2:	4b9f      	ldr	r3, [pc, #636]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ae:	4b9c      	ldr	r3, [pc, #624]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80049ba:	4b99      	ldr	r3, [pc, #612]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8111 	beq.w	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	f000 8083 	beq.w	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f200 80a1 	bhi.w	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d056      	beq.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049fa:	e099      	b.n	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049fc:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d02d      	beq.n	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a08:	4b85      	ldr	r3, [pc, #532]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	4a84      	ldr	r2, [pc, #528]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a62:	e087      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aa6:	e065      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aea:	e043      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b48      	ldr	r3, [pc, #288]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b2e:	e021      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	0a5b      	lsrs	r3, r3, #9
 8004b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9a:	ee17 2a90 	vmov	r2, s15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc8:	ee17 2a90 	vmov	r2, s15
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	0e1b      	lsrs	r3, r3, #24
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf6:	ee17 2a90 	vmov	r2, s15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bfe:	e008      	b.n	8004c12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
}
 8004c12:	bf00      	nop
 8004c14:	3724      	adds	r7, #36	; 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
 8004c24:	03d09000 	.word	0x03d09000
 8004c28:	46000000 	.word	0x46000000
 8004c2c:	4c742400 	.word	0x4c742400
 8004c30:	4a742400 	.word	0x4a742400
 8004c34:	4af42400 	.word	0x4af42400

08004c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c46:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d101      	bne.n	8004c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e099      	b.n	8004d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c56:	4b4f      	ldr	r3, [pc, #316]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4e      	ldr	r2, [pc, #312]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c62:	f7fc fcc3 	bl	80015ec <HAL_GetTick>
 8004c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c6a:	f7fc fcbf 	bl	80015ec <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e086      	b.n	8004d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c7c:	4b45      	ldr	r3, [pc, #276]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c88:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	493f      	ldr	r1, [pc, #252]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	025b      	lsls	r3, r3, #9
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ccc:	4931      	ldr	r1, [pc, #196]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cd2:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	492d      	ldr	r1, [pc, #180]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	f023 0220 	bic.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	4928      	ldr	r1, [pc, #160]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	f023 0310 	bic.w	r3, r3, #16
 8004d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <RCCEx_PLL2_Config+0x160>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	69d2      	ldr	r2, [r2, #28]
 8004d0e:	00d2      	lsls	r2, r2, #3
 8004d10:	4920      	ldr	r1, [pc, #128]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d16:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f043 0310 	orr.w	r3, r3, #16
 8004d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d28:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d34:	e00f      	b.n	8004d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d106      	bne.n	8004d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d3c:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	4a14      	ldr	r2, [pc, #80]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d48:	e005      	b.n	8004d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a0e      	ldr	r2, [pc, #56]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d62:	f7fc fc43 	bl	80015ec <HAL_GetTick>
 8004d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d68:	e008      	b.n	8004d7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d6a:	f7fc fc3f 	bl	80015ec <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e006      	b.n	8004d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	ffff0007 	.word	0xffff0007

08004d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004daa:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d101      	bne.n	8004dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e099      	b.n	8004eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dba:	4b4f      	ldr	r3, [pc, #316]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fc fc11 	bl	80015ec <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dce:	f7fc fc0d 	bl	80015ec <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e086      	b.n	8004eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de0:	4b45      	ldr	r3, [pc, #276]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dec:	4b42      	ldr	r3, [pc, #264]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	051b      	lsls	r3, r3, #20
 8004dfa:	493f      	ldr	r1, [pc, #252]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	025b      	lsls	r3, r3, #9
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e30:	4931      	ldr	r1, [pc, #196]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	492d      	ldr	r1, [pc, #180]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e48:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	4928      	ldr	r1, [pc, #160]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e5a:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <RCCEx_PLL3_Config+0x160>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	69d2      	ldr	r2, [r2, #28]
 8004e72:	00d2      	lsls	r2, r2, #3
 8004e74:	4920      	ldr	r1, [pc, #128]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e98:	e00f      	b.n	8004eba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ea0:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eac:	e005      	b.n	8004eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec6:	f7fc fb91 	bl	80015ec <HAL_GetTick>
 8004eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ece:	f7fc fb8d 	bl	80015ec <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e006      	b.n	8004eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	ffff0007 	.word	0xffff0007

08004f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e042      	b.n	8004f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fc f95b 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2224      	movs	r2, #36	; 0x24
 8004f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8c2 	bl	80050cc <UART_SetConfig>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e022      	b.n	8004f98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fe1e 	bl	8005b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fea5 	bl	8005ce0 <UART_CheckIdleState>
 8004f96:	4603      	mov	r3, r0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	f040 8083 	bne.w	80050c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Transmit+0x28>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e07b      	b.n	80050c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Transmit+0x3a>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e074      	b.n	80050c4 <HAL_UART_Transmit+0x124>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fc fafb 	bl	80015ec <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005010:	d108      	bne.n	8005024 <HAL_UART_Transmit+0x84>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e003      	b.n	800502c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005034:	e02c      	b.n	8005090 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 fe98 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e039      	b.n	80050c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10b      	bne.n	800506e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	3302      	adds	r3, #2
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e007      	b.n	800507e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	3301      	adds	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1cc      	bne.n	8005036 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2140      	movs	r1, #64	; 0x40
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fe65 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e006      	b.n	80050c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
  }
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b092      	sub	sp, #72	; 0x48
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4bbe      	ldr	r3, [pc, #760]	; (80053f4 <UART_SetConfig+0x328>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005104:	430b      	orrs	r3, r1
 8005106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4ab3      	ldr	r2, [pc, #716]	; (80053f8 <UART_SetConfig+0x32c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005134:	4313      	orrs	r3, r2
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	4baf      	ldr	r3, [pc, #700]	; (80053fc <UART_SetConfig+0x330>)
 8005140:	4013      	ands	r3, r2
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005148:	430b      	orrs	r3, r1
 800514a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f023 010f 	bic.w	r1, r3, #15
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4aa6      	ldr	r2, [pc, #664]	; (8005400 <UART_SetConfig+0x334>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d177      	bne.n	800525c <UART_SetConfig+0x190>
 800516c:	4ba5      	ldr	r3, [pc, #660]	; (8005404 <UART_SetConfig+0x338>)
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005174:	2b28      	cmp	r3, #40	; 0x28
 8005176:	d86d      	bhi.n	8005254 <UART_SetConfig+0x188>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0xb4>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005225 	.word	0x08005225
 8005184:	08005255 	.word	0x08005255
 8005188:	08005255 	.word	0x08005255
 800518c:	08005255 	.word	0x08005255
 8005190:	08005255 	.word	0x08005255
 8005194:	08005255 	.word	0x08005255
 8005198:	08005255 	.word	0x08005255
 800519c:	08005255 	.word	0x08005255
 80051a0:	0800522d 	.word	0x0800522d
 80051a4:	08005255 	.word	0x08005255
 80051a8:	08005255 	.word	0x08005255
 80051ac:	08005255 	.word	0x08005255
 80051b0:	08005255 	.word	0x08005255
 80051b4:	08005255 	.word	0x08005255
 80051b8:	08005255 	.word	0x08005255
 80051bc:	08005255 	.word	0x08005255
 80051c0:	08005235 	.word	0x08005235
 80051c4:	08005255 	.word	0x08005255
 80051c8:	08005255 	.word	0x08005255
 80051cc:	08005255 	.word	0x08005255
 80051d0:	08005255 	.word	0x08005255
 80051d4:	08005255 	.word	0x08005255
 80051d8:	08005255 	.word	0x08005255
 80051dc:	08005255 	.word	0x08005255
 80051e0:	0800523d 	.word	0x0800523d
 80051e4:	08005255 	.word	0x08005255
 80051e8:	08005255 	.word	0x08005255
 80051ec:	08005255 	.word	0x08005255
 80051f0:	08005255 	.word	0x08005255
 80051f4:	08005255 	.word	0x08005255
 80051f8:	08005255 	.word	0x08005255
 80051fc:	08005255 	.word	0x08005255
 8005200:	08005245 	.word	0x08005245
 8005204:	08005255 	.word	0x08005255
 8005208:	08005255 	.word	0x08005255
 800520c:	08005255 	.word	0x08005255
 8005210:	08005255 	.word	0x08005255
 8005214:	08005255 	.word	0x08005255
 8005218:	08005255 	.word	0x08005255
 800521c:	08005255 	.word	0x08005255
 8005220:	0800524d 	.word	0x0800524d
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e222      	b.n	8005672 <UART_SetConfig+0x5a6>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e21e      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e21a      	b.n	8005672 <UART_SetConfig+0x5a6>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e216      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005244:	2320      	movs	r3, #32
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e212      	b.n	8005672 <UART_SetConfig+0x5a6>
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e20e      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e20a      	b.n	8005672 <UART_SetConfig+0x5a6>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a69      	ldr	r2, [pc, #420]	; (8005408 <UART_SetConfig+0x33c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d130      	bne.n	80052c8 <UART_SetConfig+0x1fc>
 8005266:	4b67      	ldr	r3, [pc, #412]	; (8005404 <UART_SetConfig+0x338>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b05      	cmp	r3, #5
 8005270:	d826      	bhi.n	80052c0 <UART_SetConfig+0x1f4>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x1ac>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005291 	.word	0x08005291
 800527c:	08005299 	.word	0x08005299
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e1ec      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e1e8      	b.n	8005672 <UART_SetConfig+0x5a6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e1e4      	b.n	8005672 <UART_SetConfig+0x5a6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e1e0      	b.n	8005672 <UART_SetConfig+0x5a6>
 80052b0:	2320      	movs	r3, #32
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e1dc      	b.n	8005672 <UART_SetConfig+0x5a6>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e1d8      	b.n	8005672 <UART_SetConfig+0x5a6>
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e1d4      	b.n	8005672 <UART_SetConfig+0x5a6>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a4f      	ldr	r2, [pc, #316]	; (800540c <UART_SetConfig+0x340>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d130      	bne.n	8005334 <UART_SetConfig+0x268>
 80052d2:	4b4c      	ldr	r3, [pc, #304]	; (8005404 <UART_SetConfig+0x338>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d826      	bhi.n	800532c <UART_SetConfig+0x260>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x218>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052fd 	.word	0x080052fd
 80052e8:	08005305 	.word	0x08005305
 80052ec:	0800530d 	.word	0x0800530d
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e1b6      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e1b2      	b.n	8005672 <UART_SetConfig+0x5a6>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e1ae      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e1aa      	b.n	8005672 <UART_SetConfig+0x5a6>
 800531c:	2320      	movs	r3, #32
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e1a6      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e1a2      	b.n	8005672 <UART_SetConfig+0x5a6>
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e19e      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a35      	ldr	r2, [pc, #212]	; (8005410 <UART_SetConfig+0x344>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d130      	bne.n	80053a0 <UART_SetConfig+0x2d4>
 800533e:	4b31      	ldr	r3, [pc, #196]	; (8005404 <UART_SetConfig+0x338>)
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b05      	cmp	r3, #5
 8005348:	d826      	bhi.n	8005398 <UART_SetConfig+0x2cc>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x284>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005369 	.word	0x08005369
 8005354:	08005371 	.word	0x08005371
 8005358:	08005379 	.word	0x08005379
 800535c:	08005381 	.word	0x08005381
 8005360:	08005389 	.word	0x08005389
 8005364:	08005391 	.word	0x08005391
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e180      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e17c      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e178      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e174      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005388:	2320      	movs	r3, #32
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e170      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005390:	2340      	movs	r3, #64	; 0x40
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e16c      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e168      	b.n	8005672 <UART_SetConfig+0x5a6>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <UART_SetConfig+0x348>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d142      	bne.n	8005430 <UART_SetConfig+0x364>
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <UART_SetConfig+0x338>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d838      	bhi.n	8005428 <UART_SetConfig+0x35c>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <UART_SetConfig+0x2f0>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053d5 	.word	0x080053d5
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	080053e5 	.word	0x080053e5
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005419 	.word	0x08005419
 80053d0:	08005421 	.word	0x08005421
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e14a      	b.n	8005672 <UART_SetConfig+0x5a6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e146      	b.n	8005672 <UART_SetConfig+0x5a6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e142      	b.n	8005672 <UART_SetConfig+0x5a6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e13e      	b.n	8005672 <UART_SetConfig+0x5a6>
 80053f4:	cfff69f3 	.word	0xcfff69f3
 80053f8:	58000c00 	.word	0x58000c00
 80053fc:	11fff4ff 	.word	0x11fff4ff
 8005400:	40011000 	.word	0x40011000
 8005404:	58024400 	.word	0x58024400
 8005408:	40004400 	.word	0x40004400
 800540c:	40004800 	.word	0x40004800
 8005410:	40004c00 	.word	0x40004c00
 8005414:	40005000 	.word	0x40005000
 8005418:	2320      	movs	r3, #32
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e128      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005420:	2340      	movs	r3, #64	; 0x40
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e124      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e120      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4acb      	ldr	r2, [pc, #812]	; (8005764 <UART_SetConfig+0x698>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d176      	bne.n	8005528 <UART_SetConfig+0x45c>
 800543a:	4bcb      	ldr	r3, [pc, #812]	; (8005768 <UART_SetConfig+0x69c>)
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005442:	2b28      	cmp	r3, #40	; 0x28
 8005444:	d86c      	bhi.n	8005520 <UART_SetConfig+0x454>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x380>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	080054f1 	.word	0x080054f1
 8005450:	08005521 	.word	0x08005521
 8005454:	08005521 	.word	0x08005521
 8005458:	08005521 	.word	0x08005521
 800545c:	08005521 	.word	0x08005521
 8005460:	08005521 	.word	0x08005521
 8005464:	08005521 	.word	0x08005521
 8005468:	08005521 	.word	0x08005521
 800546c:	080054f9 	.word	0x080054f9
 8005470:	08005521 	.word	0x08005521
 8005474:	08005521 	.word	0x08005521
 8005478:	08005521 	.word	0x08005521
 800547c:	08005521 	.word	0x08005521
 8005480:	08005521 	.word	0x08005521
 8005484:	08005521 	.word	0x08005521
 8005488:	08005521 	.word	0x08005521
 800548c:	08005501 	.word	0x08005501
 8005490:	08005521 	.word	0x08005521
 8005494:	08005521 	.word	0x08005521
 8005498:	08005521 	.word	0x08005521
 800549c:	08005521 	.word	0x08005521
 80054a0:	08005521 	.word	0x08005521
 80054a4:	08005521 	.word	0x08005521
 80054a8:	08005521 	.word	0x08005521
 80054ac:	08005509 	.word	0x08005509
 80054b0:	08005521 	.word	0x08005521
 80054b4:	08005521 	.word	0x08005521
 80054b8:	08005521 	.word	0x08005521
 80054bc:	08005521 	.word	0x08005521
 80054c0:	08005521 	.word	0x08005521
 80054c4:	08005521 	.word	0x08005521
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005511 	.word	0x08005511
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005521 	.word	0x08005521
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005521 	.word	0x08005521
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005521 	.word	0x08005521
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e0bc      	b.n	8005672 <UART_SetConfig+0x5a6>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e0b8      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e0b4      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e0b0      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e0ac      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e0a8      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e0a4      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a8f      	ldr	r2, [pc, #572]	; (800576c <UART_SetConfig+0x6a0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d130      	bne.n	8005594 <UART_SetConfig+0x4c8>
 8005532:	4b8d      	ldr	r3, [pc, #564]	; (8005768 <UART_SetConfig+0x69c>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d826      	bhi.n	800558c <UART_SetConfig+0x4c0>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x478>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e086      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e082      	b.n	8005672 <UART_SetConfig+0x5a6>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e07e      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e07a      	b.n	8005672 <UART_SetConfig+0x5a6>
 800557c:	2320      	movs	r3, #32
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e076      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e072      	b.n	8005672 <UART_SetConfig+0x5a6>
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e06e      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a75      	ldr	r2, [pc, #468]	; (8005770 <UART_SetConfig+0x6a4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d130      	bne.n	8005600 <UART_SetConfig+0x534>
 800559e:	4b72      	ldr	r3, [pc, #456]	; (8005768 <UART_SetConfig+0x69c>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d826      	bhi.n	80055f8 <UART_SetConfig+0x52c>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x4e4>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e050      	b.n	8005672 <UART_SetConfig+0x5a6>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e04c      	b.n	8005672 <UART_SetConfig+0x5a6>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e048      	b.n	8005672 <UART_SetConfig+0x5a6>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e044      	b.n	8005672 <UART_SetConfig+0x5a6>
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e040      	b.n	8005672 <UART_SetConfig+0x5a6>
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e03c      	b.n	8005672 <UART_SetConfig+0x5a6>
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e038      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5b      	ldr	r2, [pc, #364]	; (8005774 <UART_SetConfig+0x6a8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d130      	bne.n	800566c <UART_SetConfig+0x5a0>
 800560a:	4b57      	ldr	r3, [pc, #348]	; (8005768 <UART_SetConfig+0x69c>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	2b05      	cmp	r3, #5
 8005614:	d826      	bhi.n	8005664 <UART_SetConfig+0x598>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <UART_SetConfig+0x550>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005635 	.word	0x08005635
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005645 	.word	0x08005645
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005655 	.word	0x08005655
 8005630:	0800565d 	.word	0x0800565d
 8005634:	2302      	movs	r3, #2
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e01a      	b.n	8005672 <UART_SetConfig+0x5a6>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e016      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564a:	e012      	b.n	8005672 <UART_SetConfig+0x5a6>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e00e      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005654:	2320      	movs	r3, #32
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e00a      	b.n	8005672 <UART_SetConfig+0x5a6>
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e006      	b.n	8005672 <UART_SetConfig+0x5a6>
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e002      	b.n	8005672 <UART_SetConfig+0x5a6>
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3f      	ldr	r2, [pc, #252]	; (8005774 <UART_SetConfig+0x6a8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	f040 80f8 	bne.w	800586e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800567e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005682:	2b20      	cmp	r3, #32
 8005684:	dc46      	bgt.n	8005714 <UART_SetConfig+0x648>
 8005686:	2b02      	cmp	r3, #2
 8005688:	f2c0 8082 	blt.w	8005790 <UART_SetConfig+0x6c4>
 800568c:	3b02      	subs	r3, #2
 800568e:	2b1e      	cmp	r3, #30
 8005690:	d87e      	bhi.n	8005790 <UART_SetConfig+0x6c4>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <UART_SetConfig+0x5cc>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	0800571b 	.word	0x0800571b
 800569c:	08005791 	.word	0x08005791
 80056a0:	08005723 	.word	0x08005723
 80056a4:	08005791 	.word	0x08005791
 80056a8:	08005791 	.word	0x08005791
 80056ac:	08005791 	.word	0x08005791
 80056b0:	08005733 	.word	0x08005733
 80056b4:	08005791 	.word	0x08005791
 80056b8:	08005791 	.word	0x08005791
 80056bc:	08005791 	.word	0x08005791
 80056c0:	08005791 	.word	0x08005791
 80056c4:	08005791 	.word	0x08005791
 80056c8:	08005791 	.word	0x08005791
 80056cc:	08005791 	.word	0x08005791
 80056d0:	08005743 	.word	0x08005743
 80056d4:	08005791 	.word	0x08005791
 80056d8:	08005791 	.word	0x08005791
 80056dc:	08005791 	.word	0x08005791
 80056e0:	08005791 	.word	0x08005791
 80056e4:	08005791 	.word	0x08005791
 80056e8:	08005791 	.word	0x08005791
 80056ec:	08005791 	.word	0x08005791
 80056f0:	08005791 	.word	0x08005791
 80056f4:	08005791 	.word	0x08005791
 80056f8:	08005791 	.word	0x08005791
 80056fc:	08005791 	.word	0x08005791
 8005700:	08005791 	.word	0x08005791
 8005704:	08005791 	.word	0x08005791
 8005708:	08005791 	.word	0x08005791
 800570c:	08005791 	.word	0x08005791
 8005710:	08005783 	.word	0x08005783
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d037      	beq.n	8005788 <UART_SetConfig+0x6bc>
 8005718:	e03a      	b.n	8005790 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800571a:	f7fe ffcf 	bl	80046bc <HAL_RCCEx_GetD3PCLK1Freq>
 800571e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005720:	e03c      	b.n	800579c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe ffde 	bl	80046e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005730:	e034      	b.n	800579c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005732:	f107 0318 	add.w	r3, r7, #24
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff f92a 	bl	8004990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005740:	e02c      	b.n	800579c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <UART_SetConfig+0x69c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <UART_SetConfig+0x69c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	08db      	lsrs	r3, r3, #3
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	4a07      	ldr	r2, [pc, #28]	; (8005778 <UART_SetConfig+0x6ac>)
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005760:	e01c      	b.n	800579c <UART_SetConfig+0x6d0>
 8005762:	bf00      	nop
 8005764:	40011400 	.word	0x40011400
 8005768:	58024400 	.word	0x58024400
 800576c:	40007800 	.word	0x40007800
 8005770:	40007c00 	.word	0x40007c00
 8005774:	58000c00 	.word	0x58000c00
 8005778:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800577c:	4b9d      	ldr	r3, [pc, #628]	; (80059f4 <UART_SetConfig+0x928>)
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005780:	e00c      	b.n	800579c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005782:	4b9d      	ldr	r3, [pc, #628]	; (80059f8 <UART_SetConfig+0x92c>)
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005786:	e009      	b.n	800579c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800578e:	e005      	b.n	800579c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800579a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800579c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 81de 	beq.w	8005b60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	4a94      	ldr	r2, [pc, #592]	; (80059fc <UART_SetConfig+0x930>)
 80057aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d305      	bcc.n	80057d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d903      	bls.n	80057dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057da:	e1c1      	b.n	8005b60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	2200      	movs	r2, #0
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	60fa      	str	r2, [r7, #12]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	4a84      	ldr	r2, [pc, #528]	; (80059fc <UART_SetConfig+0x930>)
 80057ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057fe:	f7fa ff83 	bl	8000708 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	020b      	lsls	r3, r1, #8
 8005814:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005818:	0202      	lsls	r2, r0, #8
 800581a:	6979      	ldr	r1, [r7, #20]
 800581c:	6849      	ldr	r1, [r1, #4]
 800581e:	0849      	lsrs	r1, r1, #1
 8005820:	2000      	movs	r0, #0
 8005822:	460c      	mov	r4, r1
 8005824:	4605      	mov	r5, r0
 8005826:	eb12 0804 	adds.w	r8, r2, r4
 800582a:	eb43 0905 	adc.w	r9, r3, r5
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	469a      	mov	sl, r3
 8005836:	4693      	mov	fp, r2
 8005838:	4652      	mov	r2, sl
 800583a:	465b      	mov	r3, fp
 800583c:	4640      	mov	r0, r8
 800583e:	4649      	mov	r1, r9
 8005840:	f7fa ff62 	bl	8000708 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4613      	mov	r3, r2
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005852:	d308      	bcc.n	8005866 <UART_SetConfig+0x79a>
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585a:	d204      	bcs.n	8005866 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	e17c      	b.n	8005b60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800586c:	e178      	b.n	8005b60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	f040 80c5 	bne.w	8005a04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800587a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800587e:	2b20      	cmp	r3, #32
 8005880:	dc48      	bgt.n	8005914 <UART_SetConfig+0x848>
 8005882:	2b00      	cmp	r3, #0
 8005884:	db7b      	blt.n	800597e <UART_SetConfig+0x8b2>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d879      	bhi.n	800597e <UART_SetConfig+0x8b2>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x7c4>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	0800591b 	.word	0x0800591b
 8005894:	08005923 	.word	0x08005923
 8005898:	0800597f 	.word	0x0800597f
 800589c:	0800597f 	.word	0x0800597f
 80058a0:	0800592b 	.word	0x0800592b
 80058a4:	0800597f 	.word	0x0800597f
 80058a8:	0800597f 	.word	0x0800597f
 80058ac:	0800597f 	.word	0x0800597f
 80058b0:	0800593b 	.word	0x0800593b
 80058b4:	0800597f 	.word	0x0800597f
 80058b8:	0800597f 	.word	0x0800597f
 80058bc:	0800597f 	.word	0x0800597f
 80058c0:	0800597f 	.word	0x0800597f
 80058c4:	0800597f 	.word	0x0800597f
 80058c8:	0800597f 	.word	0x0800597f
 80058cc:	0800597f 	.word	0x0800597f
 80058d0:	0800594b 	.word	0x0800594b
 80058d4:	0800597f 	.word	0x0800597f
 80058d8:	0800597f 	.word	0x0800597f
 80058dc:	0800597f 	.word	0x0800597f
 80058e0:	0800597f 	.word	0x0800597f
 80058e4:	0800597f 	.word	0x0800597f
 80058e8:	0800597f 	.word	0x0800597f
 80058ec:	0800597f 	.word	0x0800597f
 80058f0:	0800597f 	.word	0x0800597f
 80058f4:	0800597f 	.word	0x0800597f
 80058f8:	0800597f 	.word	0x0800597f
 80058fc:	0800597f 	.word	0x0800597f
 8005900:	0800597f 	.word	0x0800597f
 8005904:	0800597f 	.word	0x0800597f
 8005908:	0800597f 	.word	0x0800597f
 800590c:	0800597f 	.word	0x0800597f
 8005910:	08005971 	.word	0x08005971
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d02e      	beq.n	8005976 <UART_SetConfig+0x8aa>
 8005918:	e031      	b.n	800597e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591a:	f7fd ff5d 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 800591e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005920:	e033      	b.n	800598a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005922:	f7fd ff6f 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8005926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005928:	e02f      	b.n	800598a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800592a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe feda 	bl	80046e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005938:	e027      	b.n	800598a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800593a:	f107 0318 	add.w	r3, r7, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff f826 	bl	8004990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005948:	e01f      	b.n	800598a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800594a:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <UART_SetConfig+0x934>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005956:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <UART_SetConfig+0x934>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	08db      	lsrs	r3, r3, #3
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <UART_SetConfig+0x928>)
 8005962:	fa22 f303 	lsr.w	r3, r2, r3
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005968:	e00f      	b.n	800598a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800596a:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <UART_SetConfig+0x928>)
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800596e:	e00c      	b.n	800598a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <UART_SetConfig+0x92c>)
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005974:	e009      	b.n	800598a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597c:	e005      	b.n	800598a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80e7 	beq.w	8005b60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	4a19      	ldr	r2, [pc, #100]	; (80059fc <UART_SetConfig+0x930>)
 8005998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800599c:	461a      	mov	r2, r3
 800599e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059a4:	005a      	lsls	r2, r3, #1
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	441a      	add	r2, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d916      	bls.n	80059ec <UART_SetConfig+0x920>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d212      	bcs.n	80059ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f023 030f 	bic.w	r3, r3, #15
 80059ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	b29a      	uxth	r2, r3
 80059dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059de:	4313      	orrs	r3, r2
 80059e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e0b9      	b.n	8005b60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059f2:	e0b5      	b.n	8005b60 <UART_SetConfig+0xa94>
 80059f4:	03d09000 	.word	0x03d09000
 80059f8:	003d0900 	.word	0x003d0900
 80059fc:	0800a914 	.word	0x0800a914
 8005a00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	dc49      	bgt.n	8005aa0 <UART_SetConfig+0x9d4>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	db7c      	blt.n	8005b0a <UART_SetConfig+0xa3e>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d87a      	bhi.n	8005b0a <UART_SetConfig+0xa3e>
 8005a14:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0x950>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005aa7 	.word	0x08005aa7
 8005a20:	08005aaf 	.word	0x08005aaf
 8005a24:	08005b0b 	.word	0x08005b0b
 8005a28:	08005b0b 	.word	0x08005b0b
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005b0b 	.word	0x08005b0b
 8005a34:	08005b0b 	.word	0x08005b0b
 8005a38:	08005b0b 	.word	0x08005b0b
 8005a3c:	08005ac7 	.word	0x08005ac7
 8005a40:	08005b0b 	.word	0x08005b0b
 8005a44:	08005b0b 	.word	0x08005b0b
 8005a48:	08005b0b 	.word	0x08005b0b
 8005a4c:	08005b0b 	.word	0x08005b0b
 8005a50:	08005b0b 	.word	0x08005b0b
 8005a54:	08005b0b 	.word	0x08005b0b
 8005a58:	08005b0b 	.word	0x08005b0b
 8005a5c:	08005ad7 	.word	0x08005ad7
 8005a60:	08005b0b 	.word	0x08005b0b
 8005a64:	08005b0b 	.word	0x08005b0b
 8005a68:	08005b0b 	.word	0x08005b0b
 8005a6c:	08005b0b 	.word	0x08005b0b
 8005a70:	08005b0b 	.word	0x08005b0b
 8005a74:	08005b0b 	.word	0x08005b0b
 8005a78:	08005b0b 	.word	0x08005b0b
 8005a7c:	08005b0b 	.word	0x08005b0b
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b0b 	.word	0x08005b0b
 8005a88:	08005b0b 	.word	0x08005b0b
 8005a8c:	08005b0b 	.word	0x08005b0b
 8005a90:	08005b0b 	.word	0x08005b0b
 8005a94:	08005b0b 	.word	0x08005b0b
 8005a98:	08005b0b 	.word	0x08005b0b
 8005a9c:	08005afd 	.word	0x08005afd
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d02e      	beq.n	8005b02 <UART_SetConfig+0xa36>
 8005aa4:	e031      	b.n	8005b0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f7fd fe97 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 8005aaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aac:	e033      	b.n	8005b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aae:	f7fd fea9 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8005ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ab4:	e02f      	b.n	8005b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe14 	bl	80046e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ac4:	e027      	b.n	8005b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe ff60 	bl	8004990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad4:	e01f      	b.n	8005b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad6:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <UART_SetConfig+0xac0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ae2:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <UART_SetConfig+0xac0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	08db      	lsrs	r3, r3, #3
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <UART_SetConfig+0xac4>)
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005af4:	e00f      	b.n	8005b16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005af6:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <UART_SetConfig+0xac4>)
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afa:	e00c      	b.n	8005b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <UART_SetConfig+0xac8>)
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b00:	e009      	b.n	8005b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b08:	e005      	b.n	8005b16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b14:	bf00      	nop
    }

    if (pclk != 0U)
 8005b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d021      	beq.n	8005b60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <UART_SetConfig+0xacc>)
 8005b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	441a      	add	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	d909      	bls.n	8005b5a <UART_SetConfig+0xa8e>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4c:	d205      	bcs.n	8005b5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	e002      	b.n	8005b60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b7c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3748      	adds	r7, #72	; 0x48
 8005b84:	46bd      	mov	sp, r7
 8005b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	03d09000 	.word	0x03d09000
 8005b94:	003d0900 	.word	0x003d0900
 8005b98:	0800a914 	.word	0x0800a914

08005b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9a:	d10a      	bne.n	8005cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf0:	f7fb fc7c 	bl	80015ec <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10e      	bne.n	8005d22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f82f 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e025      	b.n	8005d6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d10e      	bne.n	8005d4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f819 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e00f      	b.n	8005d6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b09c      	sub	sp, #112	; 0x70
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4613      	mov	r3, r2
 8005d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d86:	e0a9      	b.n	8005edc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	f000 80a5 	beq.w	8005edc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d92:	f7fb fc2b 	bl	80015ec <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d140      	bne.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e6      	bne.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	663b      	str	r3, [r7, #96]	; 0x60
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e069      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d051      	beq.n	8005edc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e46:	d149      	bne.n	8005edc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e6      	bne.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	613b      	str	r3, [r7, #16]
   return(result);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ea4:	623a      	str	r2, [r7, #32]
 8005ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	69f9      	ldr	r1, [r7, #28]
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e5      	bne.n	8005e84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e010      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	f43f af46 	beq.w	8005d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3770      	adds	r7, #112	; 0x70
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UARTEx_DisableFifoMode+0x16>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e027      	b.n	8005f6c <HAL_UARTEx_DisableFifoMode+0x66>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e02d      	b.n	8005fec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f84f 	bl	8006070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006008:	2302      	movs	r3, #2
 800600a:	e02d      	b.n	8006068 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f811 	bl	8006070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800607c:	2b00      	cmp	r3, #0
 800607e:	d108      	bne.n	8006092 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006090:	e031      	b.n	80060f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006092:	2310      	movs	r3, #16
 8006094:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006096:	2310      	movs	r3, #16
 8006098:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	0e5b      	lsrs	r3, r3, #25
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	0f5b      	lsrs	r3, r3, #29
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	7b3a      	ldrb	r2, [r7, #12]
 80060be:	4911      	ldr	r1, [pc, #68]	; (8006104 <UARTEx_SetNbDataToProcess+0x94>)
 80060c0:	5c8a      	ldrb	r2, [r1, r2]
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060c6:	7b3a      	ldrb	r2, [r7, #12]
 80060c8:	490f      	ldr	r1, [pc, #60]	; (8006108 <UARTEx_SetNbDataToProcess+0x98>)
 80060ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	7b7a      	ldrb	r2, [r7, #13]
 80060dc:	4909      	ldr	r1, [pc, #36]	; (8006104 <UARTEx_SetNbDataToProcess+0x94>)
 80060de:	5c8a      	ldrb	r2, [r1, r2]
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060e4:	7b7a      	ldrb	r2, [r7, #13]
 80060e6:	4908      	ldr	r1, [pc, #32]	; (8006108 <UARTEx_SetNbDataToProcess+0x98>)
 80060e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	0800a92c 	.word	0x0800a92c
 8006108:	0800a934 	.word	0x0800a934

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	; (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	24000020 	.word	0x24000020

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4d0d      	ldr	r5, [pc, #52]	; (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2600      	movs	r6, #0
 8006124:	42a6      	cmp	r6, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4d0b      	ldr	r5, [pc, #44]	; (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	; (800615c <__libc_init_array+0x44>)
 800612c:	f004 fba4 	bl	800a878 <_init>
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2600      	movs	r6, #0
 8006136:	42a6      	cmp	r6, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006140:	4798      	blx	r3
 8006142:	3601      	adds	r6, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f855 3b04 	ldr.w	r3, [r5], #4
 800614a:	4798      	blx	r3
 800614c:	3601      	adds	r6, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	0800adf4 	.word	0x0800adf4
 8006154:	0800adf4 	.word	0x0800adf4
 8006158:	0800adf4 	.word	0x0800adf4
 800615c:	0800adf8 	.word	0x0800adf8

08006160 <memcpy>:
 8006160:	440a      	add	r2, r1
 8006162:	4291      	cmp	r1, r2
 8006164:	f100 33ff 	add.w	r3, r0, #4294967295
 8006168:	d100      	bne.n	800616c <memcpy+0xc>
 800616a:	4770      	bx	lr
 800616c:	b510      	push	{r4, lr}
 800616e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006176:	4291      	cmp	r1, r2
 8006178:	d1f9      	bne.n	800616e <memcpy+0xe>
 800617a:	bd10      	pop	{r4, pc}

0800617c <memset>:
 800617c:	4402      	add	r2, r0
 800617e:	4603      	mov	r3, r0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <memset+0xa>
 8006184:	4770      	bx	lr
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <memset+0x4>

0800618c <__cvt>:
 800618c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618e:	ed2d 8b02 	vpush	{d8}
 8006192:	eeb0 8b40 	vmov.f64	d8, d0
 8006196:	b085      	sub	sp, #20
 8006198:	4617      	mov	r7, r2
 800619a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800619c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800619e:	ee18 2a90 	vmov	r2, s17
 80061a2:	f025 0520 	bic.w	r5, r5, #32
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	bfb6      	itet	lt
 80061aa:	222d      	movlt	r2, #45	; 0x2d
 80061ac:	2200      	movge	r2, #0
 80061ae:	eeb1 8b40 	vneglt.f64	d8, d0
 80061b2:	2d46      	cmp	r5, #70	; 0x46
 80061b4:	460c      	mov	r4, r1
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	d004      	beq.n	80061c4 <__cvt+0x38>
 80061ba:	2d45      	cmp	r5, #69	; 0x45
 80061bc:	d100      	bne.n	80061c0 <__cvt+0x34>
 80061be:	3401      	adds	r4, #1
 80061c0:	2102      	movs	r1, #2
 80061c2:	e000      	b.n	80061c6 <__cvt+0x3a>
 80061c4:	2103      	movs	r1, #3
 80061c6:	ab03      	add	r3, sp, #12
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	ab02      	add	r3, sp, #8
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	4622      	mov	r2, r4
 80061d0:	4633      	mov	r3, r6
 80061d2:	eeb0 0b48 	vmov.f64	d0, d8
 80061d6:	f001 fd47 	bl	8007c68 <_dtoa_r>
 80061da:	2d47      	cmp	r5, #71	; 0x47
 80061dc:	d101      	bne.n	80061e2 <__cvt+0x56>
 80061de:	07fb      	lsls	r3, r7, #31
 80061e0:	d51a      	bpl.n	8006218 <__cvt+0x8c>
 80061e2:	2d46      	cmp	r5, #70	; 0x46
 80061e4:	eb00 0204 	add.w	r2, r0, r4
 80061e8:	d10c      	bne.n	8006204 <__cvt+0x78>
 80061ea:	7803      	ldrb	r3, [r0, #0]
 80061ec:	2b30      	cmp	r3, #48	; 0x30
 80061ee:	d107      	bne.n	8006200 <__cvt+0x74>
 80061f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	bf1c      	itt	ne
 80061fa:	f1c4 0401 	rsbne	r4, r4, #1
 80061fe:	6034      	strne	r4, [r6, #0]
 8006200:	6833      	ldr	r3, [r6, #0]
 8006202:	441a      	add	r2, r3
 8006204:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	bf08      	it	eq
 800620e:	9203      	streq	r2, [sp, #12]
 8006210:	2130      	movs	r1, #48	; 0x30
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	4293      	cmp	r3, r2
 8006216:	d307      	bcc.n	8006228 <__cvt+0x9c>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800621c:	1a1b      	subs	r3, r3, r0
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	b005      	add	sp, #20
 8006222:	ecbd 8b02 	vpop	{d8}
 8006226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006228:	1c5c      	adds	r4, r3, #1
 800622a:	9403      	str	r4, [sp, #12]
 800622c:	7019      	strb	r1, [r3, #0]
 800622e:	e7f0      	b.n	8006212 <__cvt+0x86>

08006230 <__exponent>:
 8006230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006232:	4603      	mov	r3, r0
 8006234:	2900      	cmp	r1, #0
 8006236:	bfb8      	it	lt
 8006238:	4249      	neglt	r1, r1
 800623a:	f803 2b02 	strb.w	r2, [r3], #2
 800623e:	bfb4      	ite	lt
 8006240:	222d      	movlt	r2, #45	; 0x2d
 8006242:	222b      	movge	r2, #43	; 0x2b
 8006244:	2909      	cmp	r1, #9
 8006246:	7042      	strb	r2, [r0, #1]
 8006248:	dd2a      	ble.n	80062a0 <__exponent+0x70>
 800624a:	f10d 0407 	add.w	r4, sp, #7
 800624e:	46a4      	mov	ip, r4
 8006250:	270a      	movs	r7, #10
 8006252:	46a6      	mov	lr, r4
 8006254:	460a      	mov	r2, r1
 8006256:	fb91 f6f7 	sdiv	r6, r1, r7
 800625a:	fb07 1516 	mls	r5, r7, r6, r1
 800625e:	3530      	adds	r5, #48	; 0x30
 8006260:	2a63      	cmp	r2, #99	; 0x63
 8006262:	f104 34ff 	add.w	r4, r4, #4294967295
 8006266:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800626a:	4631      	mov	r1, r6
 800626c:	dcf1      	bgt.n	8006252 <__exponent+0x22>
 800626e:	3130      	adds	r1, #48	; 0x30
 8006270:	f1ae 0502 	sub.w	r5, lr, #2
 8006274:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006278:	1c44      	adds	r4, r0, #1
 800627a:	4629      	mov	r1, r5
 800627c:	4561      	cmp	r1, ip
 800627e:	d30a      	bcc.n	8006296 <__exponent+0x66>
 8006280:	f10d 0209 	add.w	r2, sp, #9
 8006284:	eba2 020e 	sub.w	r2, r2, lr
 8006288:	4565      	cmp	r5, ip
 800628a:	bf88      	it	hi
 800628c:	2200      	movhi	r2, #0
 800628e:	4413      	add	r3, r2
 8006290:	1a18      	subs	r0, r3, r0
 8006292:	b003      	add	sp, #12
 8006294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800629a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800629e:	e7ed      	b.n	800627c <__exponent+0x4c>
 80062a0:	2330      	movs	r3, #48	; 0x30
 80062a2:	3130      	adds	r1, #48	; 0x30
 80062a4:	7083      	strb	r3, [r0, #2]
 80062a6:	70c1      	strb	r1, [r0, #3]
 80062a8:	1d03      	adds	r3, r0, #4
 80062aa:	e7f1      	b.n	8006290 <__exponent+0x60>
 80062ac:	0000      	movs	r0, r0
	...

080062b0 <_printf_float>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	b08b      	sub	sp, #44	; 0x2c
 80062b6:	460c      	mov	r4, r1
 80062b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80062bc:	4616      	mov	r6, r2
 80062be:	461f      	mov	r7, r3
 80062c0:	4605      	mov	r5, r0
 80062c2:	f002 fea3 	bl	800900c <_localeconv_r>
 80062c6:	f8d0 b000 	ldr.w	fp, [r0]
 80062ca:	4658      	mov	r0, fp
 80062cc:	f7fa f808 	bl	80002e0 <strlen>
 80062d0:	2300      	movs	r3, #0
 80062d2:	9308      	str	r3, [sp, #32]
 80062d4:	f8d8 3000 	ldr.w	r3, [r8]
 80062d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062dc:	6822      	ldr	r2, [r4, #0]
 80062de:	3307      	adds	r3, #7
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	f103 0108 	add.w	r1, r3, #8
 80062e8:	f8c8 1000 	str.w	r1, [r8]
 80062ec:	4682      	mov	sl, r0
 80062ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80062f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006558 <_printf_float+0x2a8>
 80062fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80062fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8006302:	eeb4 6b47 	vcmp.f64	d6, d7
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	dd24      	ble.n	8006356 <_printf_float+0xa6>
 800630c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006314:	d502      	bpl.n	800631c <_printf_float+0x6c>
 8006316:	232d      	movs	r3, #45	; 0x2d
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800631c:	4b90      	ldr	r3, [pc, #576]	; (8006560 <_printf_float+0x2b0>)
 800631e:	4891      	ldr	r0, [pc, #580]	; (8006564 <_printf_float+0x2b4>)
 8006320:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006324:	bf94      	ite	ls
 8006326:	4698      	movls	r8, r3
 8006328:	4680      	movhi	r8, r0
 800632a:	2303      	movs	r3, #3
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	2300      	movs	r3, #0
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	9304      	str	r3, [sp, #16]
 8006338:	9700      	str	r7, [sp, #0]
 800633a:	4633      	mov	r3, r6
 800633c:	aa09      	add	r2, sp, #36	; 0x24
 800633e:	4621      	mov	r1, r4
 8006340:	4628      	mov	r0, r5
 8006342:	f000 f9d3 	bl	80066ec <_printf_common>
 8006346:	3001      	adds	r0, #1
 8006348:	f040 808a 	bne.w	8006460 <_printf_float+0x1b0>
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	b00b      	add	sp, #44	; 0x2c
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	eeb4 0b40 	vcmp.f64	d0, d0
 800635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635e:	d709      	bvc.n	8006374 <_printf_float+0xc4>
 8006360:	ee10 3a90 	vmov	r3, s1
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfbc      	itt	lt
 8006368:	232d      	movlt	r3, #45	; 0x2d
 800636a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800636e:	487e      	ldr	r0, [pc, #504]	; (8006568 <_printf_float+0x2b8>)
 8006370:	4b7e      	ldr	r3, [pc, #504]	; (800656c <_printf_float+0x2bc>)
 8006372:	e7d5      	b.n	8006320 <_printf_float+0x70>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800637a:	9104      	str	r1, [sp, #16]
 800637c:	1c59      	adds	r1, r3, #1
 800637e:	d13c      	bne.n	80063fa <_printf_float+0x14a>
 8006380:	2306      	movs	r3, #6
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	2300      	movs	r3, #0
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	ab08      	add	r3, sp, #32
 800638a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800638e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006392:	ab07      	add	r3, sp, #28
 8006394:	6861      	ldr	r1, [r4, #4]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	6022      	str	r2, [r4, #0]
 800639a:	f10d 031b 	add.w	r3, sp, #27
 800639e:	4628      	mov	r0, r5
 80063a0:	f7ff fef4 	bl	800618c <__cvt>
 80063a4:	9b04      	ldr	r3, [sp, #16]
 80063a6:	9907      	ldr	r1, [sp, #28]
 80063a8:	2b47      	cmp	r3, #71	; 0x47
 80063aa:	4680      	mov	r8, r0
 80063ac:	d108      	bne.n	80063c0 <_printf_float+0x110>
 80063ae:	1cc8      	adds	r0, r1, #3
 80063b0:	db02      	blt.n	80063b8 <_printf_float+0x108>
 80063b2:	6863      	ldr	r3, [r4, #4]
 80063b4:	4299      	cmp	r1, r3
 80063b6:	dd41      	ble.n	800643c <_printf_float+0x18c>
 80063b8:	f1a9 0902 	sub.w	r9, r9, #2
 80063bc:	fa5f f989 	uxtb.w	r9, r9
 80063c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063c4:	d820      	bhi.n	8006408 <_printf_float+0x158>
 80063c6:	3901      	subs	r1, #1
 80063c8:	464a      	mov	r2, r9
 80063ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063ce:	9107      	str	r1, [sp, #28]
 80063d0:	f7ff ff2e 	bl	8006230 <__exponent>
 80063d4:	9a08      	ldr	r2, [sp, #32]
 80063d6:	9004      	str	r0, [sp, #16]
 80063d8:	1813      	adds	r3, r2, r0
 80063da:	2a01      	cmp	r2, #1
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	dc02      	bgt.n	80063e6 <_printf_float+0x136>
 80063e0:	6822      	ldr	r2, [r4, #0]
 80063e2:	07d2      	lsls	r2, r2, #31
 80063e4:	d501      	bpl.n	80063ea <_printf_float+0x13a>
 80063e6:	3301      	adds	r3, #1
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0a2      	beq.n	8006338 <_printf_float+0x88>
 80063f2:	232d      	movs	r3, #45	; 0x2d
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f8:	e79e      	b.n	8006338 <_printf_float+0x88>
 80063fa:	9904      	ldr	r1, [sp, #16]
 80063fc:	2947      	cmp	r1, #71	; 0x47
 80063fe:	d1c1      	bne.n	8006384 <_printf_float+0xd4>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1bf      	bne.n	8006384 <_printf_float+0xd4>
 8006404:	2301      	movs	r3, #1
 8006406:	e7bc      	b.n	8006382 <_printf_float+0xd2>
 8006408:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800640c:	d118      	bne.n	8006440 <_printf_float+0x190>
 800640e:	2900      	cmp	r1, #0
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	dd0b      	ble.n	800642c <_printf_float+0x17c>
 8006414:	6121      	str	r1, [r4, #16]
 8006416:	b913      	cbnz	r3, 800641e <_printf_float+0x16e>
 8006418:	6822      	ldr	r2, [r4, #0]
 800641a:	07d0      	lsls	r0, r2, #31
 800641c:	d502      	bpl.n	8006424 <_printf_float+0x174>
 800641e:	3301      	adds	r3, #1
 8006420:	440b      	add	r3, r1
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	2300      	movs	r3, #0
 8006426:	65a1      	str	r1, [r4, #88]	; 0x58
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	e7de      	b.n	80063ea <_printf_float+0x13a>
 800642c:	b913      	cbnz	r3, 8006434 <_printf_float+0x184>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	07d2      	lsls	r2, r2, #31
 8006432:	d501      	bpl.n	8006438 <_printf_float+0x188>
 8006434:	3302      	adds	r3, #2
 8006436:	e7f4      	b.n	8006422 <_printf_float+0x172>
 8006438:	2301      	movs	r3, #1
 800643a:	e7f2      	b.n	8006422 <_printf_float+0x172>
 800643c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	4299      	cmp	r1, r3
 8006444:	db05      	blt.n	8006452 <_printf_float+0x1a2>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	6121      	str	r1, [r4, #16]
 800644a:	07d8      	lsls	r0, r3, #31
 800644c:	d5ea      	bpl.n	8006424 <_printf_float+0x174>
 800644e:	1c4b      	adds	r3, r1, #1
 8006450:	e7e7      	b.n	8006422 <_printf_float+0x172>
 8006452:	2900      	cmp	r1, #0
 8006454:	bfd4      	ite	le
 8006456:	f1c1 0202 	rsble	r2, r1, #2
 800645a:	2201      	movgt	r2, #1
 800645c:	4413      	add	r3, r2
 800645e:	e7e0      	b.n	8006422 <_printf_float+0x172>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	055a      	lsls	r2, r3, #21
 8006464:	d407      	bmi.n	8006476 <_printf_float+0x1c6>
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	4642      	mov	r2, r8
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	d12a      	bne.n	80064ca <_printf_float+0x21a>
 8006474:	e76a      	b.n	800634c <_printf_float+0x9c>
 8006476:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800647a:	f240 80e2 	bls.w	8006642 <_printf_float+0x392>
 800647e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006482:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648a:	d133      	bne.n	80064f4 <_printf_float+0x244>
 800648c:	4a38      	ldr	r2, [pc, #224]	; (8006570 <_printf_float+0x2c0>)
 800648e:	2301      	movs	r3, #1
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	f43f af58 	beq.w	800634c <_printf_float+0x9c>
 800649c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	db02      	blt.n	80064aa <_printf_float+0x1fa>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	07d8      	lsls	r0, r3, #31
 80064a8:	d50f      	bpl.n	80064ca <_printf_float+0x21a>
 80064aa:	4653      	mov	r3, sl
 80064ac:	465a      	mov	r2, fp
 80064ae:	4631      	mov	r1, r6
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b8      	blx	r7
 80064b4:	3001      	adds	r0, #1
 80064b6:	f43f af49 	beq.w	800634c <_printf_float+0x9c>
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	f104 091a 	add.w	r9, r4, #26
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	4543      	cmp	r3, r8
 80064c8:	dc09      	bgt.n	80064de <_printf_float+0x22e>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	079b      	lsls	r3, r3, #30
 80064ce:	f100 8108 	bmi.w	80066e2 <_printf_float+0x432>
 80064d2:	68e0      	ldr	r0, [r4, #12]
 80064d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d6:	4298      	cmp	r0, r3
 80064d8:	bfb8      	it	lt
 80064da:	4618      	movlt	r0, r3
 80064dc:	e738      	b.n	8006350 <_printf_float+0xa0>
 80064de:	2301      	movs	r3, #1
 80064e0:	464a      	mov	r2, r9
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b8      	blx	r7
 80064e8:	3001      	adds	r0, #1
 80064ea:	f43f af2f 	beq.w	800634c <_printf_float+0x9c>
 80064ee:	f108 0801 	add.w	r8, r8, #1
 80064f2:	e7e6      	b.n	80064c2 <_printf_float+0x212>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dc3c      	bgt.n	8006574 <_printf_float+0x2c4>
 80064fa:	4a1d      	ldr	r2, [pc, #116]	; (8006570 <_printf_float+0x2c0>)
 80064fc:	2301      	movs	r3, #1
 80064fe:	4631      	mov	r1, r6
 8006500:	4628      	mov	r0, r5
 8006502:	47b8      	blx	r7
 8006504:	3001      	adds	r0, #1
 8006506:	f43f af21 	beq.w	800634c <_printf_float+0x9c>
 800650a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800650e:	4313      	orrs	r3, r2
 8006510:	d102      	bne.n	8006518 <_printf_float+0x268>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	07d9      	lsls	r1, r3, #31
 8006516:	d5d8      	bpl.n	80064ca <_printf_float+0x21a>
 8006518:	4653      	mov	r3, sl
 800651a:	465a      	mov	r2, fp
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f af12 	beq.w	800634c <_printf_float+0x9c>
 8006528:	f04f 0900 	mov.w	r9, #0
 800652c:	f104 0a1a 	add.w	sl, r4, #26
 8006530:	9b07      	ldr	r3, [sp, #28]
 8006532:	425b      	negs	r3, r3
 8006534:	454b      	cmp	r3, r9
 8006536:	dc01      	bgt.n	800653c <_printf_float+0x28c>
 8006538:	9b08      	ldr	r3, [sp, #32]
 800653a:	e795      	b.n	8006468 <_printf_float+0x1b8>
 800653c:	2301      	movs	r3, #1
 800653e:	4652      	mov	r2, sl
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	47b8      	blx	r7
 8006546:	3001      	adds	r0, #1
 8006548:	f43f af00 	beq.w	800634c <_printf_float+0x9c>
 800654c:	f109 0901 	add.w	r9, r9, #1
 8006550:	e7ee      	b.n	8006530 <_printf_float+0x280>
 8006552:	bf00      	nop
 8006554:	f3af 8000 	nop.w
 8006558:	ffffffff 	.word	0xffffffff
 800655c:	7fefffff 	.word	0x7fefffff
 8006560:	0800a940 	.word	0x0800a940
 8006564:	0800a944 	.word	0x0800a944
 8006568:	0800a94c 	.word	0x0800a94c
 800656c:	0800a948 	.word	0x0800a948
 8006570:	0800a950 	.word	0x0800a950
 8006574:	9a08      	ldr	r2, [sp, #32]
 8006576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006578:	429a      	cmp	r2, r3
 800657a:	bfa8      	it	ge
 800657c:	461a      	movge	r2, r3
 800657e:	2a00      	cmp	r2, #0
 8006580:	4691      	mov	r9, r2
 8006582:	dc38      	bgt.n	80065f6 <_printf_float+0x346>
 8006584:	2300      	movs	r3, #0
 8006586:	9305      	str	r3, [sp, #20]
 8006588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658c:	f104 021a 	add.w	r2, r4, #26
 8006590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006592:	9905      	ldr	r1, [sp, #20]
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	eba3 0309 	sub.w	r3, r3, r9
 800659a:	428b      	cmp	r3, r1
 800659c:	dc33      	bgt.n	8006606 <_printf_float+0x356>
 800659e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	db3c      	blt.n	8006620 <_printf_float+0x370>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	07da      	lsls	r2, r3, #31
 80065aa:	d439      	bmi.n	8006620 <_printf_float+0x370>
 80065ac:	9b08      	ldr	r3, [sp, #32]
 80065ae:	9a04      	ldr	r2, [sp, #16]
 80065b0:	9907      	ldr	r1, [sp, #28]
 80065b2:	1a9a      	subs	r2, r3, r2
 80065b4:	eba3 0901 	sub.w	r9, r3, r1
 80065b8:	4591      	cmp	r9, r2
 80065ba:	bfa8      	it	ge
 80065bc:	4691      	movge	r9, r2
 80065be:	f1b9 0f00 	cmp.w	r9, #0
 80065c2:	dc35      	bgt.n	8006630 <_printf_float+0x380>
 80065c4:	f04f 0800 	mov.w	r8, #0
 80065c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065cc:	f104 0a1a 	add.w	sl, r4, #26
 80065d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	eba3 0309 	sub.w	r3, r3, r9
 80065da:	4543      	cmp	r3, r8
 80065dc:	f77f af75 	ble.w	80064ca <_printf_float+0x21a>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4652      	mov	r2, sl
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f aeae 	beq.w	800634c <_printf_float+0x9c>
 80065f0:	f108 0801 	add.w	r8, r8, #1
 80065f4:	e7ec      	b.n	80065d0 <_printf_float+0x320>
 80065f6:	4613      	mov	r3, r2
 80065f8:	4631      	mov	r1, r6
 80065fa:	4642      	mov	r2, r8
 80065fc:	4628      	mov	r0, r5
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	d1bf      	bne.n	8006584 <_printf_float+0x2d4>
 8006604:	e6a2      	b.n	800634c <_printf_float+0x9c>
 8006606:	2301      	movs	r3, #1
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	9204      	str	r2, [sp, #16]
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f ae9b 	beq.w	800634c <_printf_float+0x9c>
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	9a04      	ldr	r2, [sp, #16]
 800661a:	3301      	adds	r3, #1
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	e7b7      	b.n	8006590 <_printf_float+0x2e0>
 8006620:	4653      	mov	r3, sl
 8006622:	465a      	mov	r2, fp
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	d1be      	bne.n	80065ac <_printf_float+0x2fc>
 800662e:	e68d      	b.n	800634c <_printf_float+0x9c>
 8006630:	9a04      	ldr	r2, [sp, #16]
 8006632:	464b      	mov	r3, r9
 8006634:	4442      	add	r2, r8
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	d1c1      	bne.n	80065c4 <_printf_float+0x314>
 8006640:	e684      	b.n	800634c <_printf_float+0x9c>
 8006642:	9a08      	ldr	r2, [sp, #32]
 8006644:	2a01      	cmp	r2, #1
 8006646:	dc01      	bgt.n	800664c <_printf_float+0x39c>
 8006648:	07db      	lsls	r3, r3, #31
 800664a:	d537      	bpl.n	80066bc <_printf_float+0x40c>
 800664c:	2301      	movs	r3, #1
 800664e:	4642      	mov	r2, r8
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f ae78 	beq.w	800634c <_printf_float+0x9c>
 800665c:	4653      	mov	r3, sl
 800665e:	465a      	mov	r2, fp
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f ae70 	beq.w	800634c <_printf_float+0x9c>
 800666c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006670:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006678:	d01b      	beq.n	80066b2 <_printf_float+0x402>
 800667a:	9b08      	ldr	r3, [sp, #32]
 800667c:	f108 0201 	add.w	r2, r8, #1
 8006680:	3b01      	subs	r3, #1
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	d10e      	bne.n	80066aa <_printf_float+0x3fa>
 800668c:	e65e      	b.n	800634c <_printf_float+0x9c>
 800668e:	2301      	movs	r3, #1
 8006690:	464a      	mov	r2, r9
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae57 	beq.w	800634c <_printf_float+0x9c>
 800669e:	f108 0801 	add.w	r8, r8, #1
 80066a2:	9b08      	ldr	r3, [sp, #32]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	4543      	cmp	r3, r8
 80066a8:	dcf1      	bgt.n	800668e <_printf_float+0x3de>
 80066aa:	9b04      	ldr	r3, [sp, #16]
 80066ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066b0:	e6db      	b.n	800646a <_printf_float+0x1ba>
 80066b2:	f04f 0800 	mov.w	r8, #0
 80066b6:	f104 091a 	add.w	r9, r4, #26
 80066ba:	e7f2      	b.n	80066a2 <_printf_float+0x3f2>
 80066bc:	2301      	movs	r3, #1
 80066be:	4642      	mov	r2, r8
 80066c0:	e7df      	b.n	8006682 <_printf_float+0x3d2>
 80066c2:	2301      	movs	r3, #1
 80066c4:	464a      	mov	r2, r9
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f ae3d 	beq.w	800634c <_printf_float+0x9c>
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	68e3      	ldr	r3, [r4, #12]
 80066d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066da:	1a5b      	subs	r3, r3, r1
 80066dc:	4543      	cmp	r3, r8
 80066de:	dcf0      	bgt.n	80066c2 <_printf_float+0x412>
 80066e0:	e6f7      	b.n	80064d2 <_printf_float+0x222>
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	f104 0919 	add.w	r9, r4, #25
 80066ea:	e7f4      	b.n	80066d6 <_printf_float+0x426>

080066ec <_printf_common>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	4616      	mov	r6, r2
 80066f2:	4699      	mov	r9, r3
 80066f4:	688a      	ldr	r2, [r1, #8]
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bfb8      	it	lt
 8006700:	4613      	movlt	r3, r2
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006708:	4607      	mov	r7, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b10a      	cbz	r2, 8006712 <_printf_common+0x26>
 800670e:	3301      	adds	r3, #1
 8006710:	6033      	str	r3, [r6, #0]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	0699      	lsls	r1, r3, #26
 8006716:	bf42      	ittt	mi
 8006718:	6833      	ldrmi	r3, [r6, #0]
 800671a:	3302      	addmi	r3, #2
 800671c:	6033      	strmi	r3, [r6, #0]
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	f015 0506 	ands.w	r5, r5, #6
 8006724:	d106      	bne.n	8006734 <_printf_common+0x48>
 8006726:	f104 0a19 	add.w	sl, r4, #25
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	6832      	ldr	r2, [r6, #0]
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	42ab      	cmp	r3, r5
 8006732:	dc26      	bgt.n	8006782 <_printf_common+0x96>
 8006734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006738:	1e13      	subs	r3, r2, #0
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	bf18      	it	ne
 800673e:	2301      	movne	r3, #1
 8006740:	0692      	lsls	r2, r2, #26
 8006742:	d42b      	bmi.n	800679c <_printf_common+0xb0>
 8006744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d01e      	beq.n	8006790 <_printf_common+0xa4>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	68e5      	ldr	r5, [r4, #12]
 8006756:	6832      	ldr	r2, [r6, #0]
 8006758:	f003 0306 	and.w	r3, r3, #6
 800675c:	2b04      	cmp	r3, #4
 800675e:	bf08      	it	eq
 8006760:	1aad      	subeq	r5, r5, r2
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	6922      	ldr	r2, [r4, #16]
 8006766:	bf0c      	ite	eq
 8006768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800676c:	2500      	movne	r5, #0
 800676e:	4293      	cmp	r3, r2
 8006770:	bfc4      	itt	gt
 8006772:	1a9b      	subgt	r3, r3, r2
 8006774:	18ed      	addgt	r5, r5, r3
 8006776:	2600      	movs	r6, #0
 8006778:	341a      	adds	r4, #26
 800677a:	42b5      	cmp	r5, r6
 800677c:	d11a      	bne.n	80067b4 <_printf_common+0xc8>
 800677e:	2000      	movs	r0, #0
 8006780:	e008      	b.n	8006794 <_printf_common+0xa8>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4649      	mov	r1, r9
 8006788:	4638      	mov	r0, r7
 800678a:	47c0      	blx	r8
 800678c:	3001      	adds	r0, #1
 800678e:	d103      	bne.n	8006798 <_printf_common+0xac>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	3501      	adds	r5, #1
 800679a:	e7c6      	b.n	800672a <_printf_common+0x3e>
 800679c:	18e1      	adds	r1, r4, r3
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	2030      	movs	r0, #48	; 0x30
 80067a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a6:	4422      	add	r2, r4
 80067a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b0:	3302      	adds	r3, #2
 80067b2:	e7c7      	b.n	8006744 <_printf_common+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4622      	mov	r2, r4
 80067b8:	4649      	mov	r1, r9
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d0e6      	beq.n	8006790 <_printf_common+0xa4>
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7d9      	b.n	800677a <_printf_common+0x8e>
	...

080067c8 <_printf_i>:
 80067c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	7e0f      	ldrb	r7, [r1, #24]
 80067ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067d0:	2f78      	cmp	r7, #120	; 0x78
 80067d2:	4691      	mov	r9, r2
 80067d4:	4680      	mov	r8, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	469a      	mov	sl, r3
 80067da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067de:	d807      	bhi.n	80067f0 <_printf_i+0x28>
 80067e0:	2f62      	cmp	r7, #98	; 0x62
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x32>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f000 80d8 	beq.w	800699a <_printf_i+0x1d2>
 80067ea:	2f58      	cmp	r7, #88	; 0x58
 80067ec:	f000 80a3 	beq.w	8006936 <_printf_i+0x16e>
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f8:	e03a      	b.n	8006870 <_printf_i+0xa8>
 80067fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067fe:	2b15      	cmp	r3, #21
 8006800:	d8f6      	bhi.n	80067f0 <_printf_i+0x28>
 8006802:	a101      	add	r1, pc, #4	; (adr r1, 8006808 <_printf_i+0x40>)
 8006804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006808:	08006861 	.word	0x08006861
 800680c:	08006875 	.word	0x08006875
 8006810:	080067f1 	.word	0x080067f1
 8006814:	080067f1 	.word	0x080067f1
 8006818:	080067f1 	.word	0x080067f1
 800681c:	080067f1 	.word	0x080067f1
 8006820:	08006875 	.word	0x08006875
 8006824:	080067f1 	.word	0x080067f1
 8006828:	080067f1 	.word	0x080067f1
 800682c:	080067f1 	.word	0x080067f1
 8006830:	080067f1 	.word	0x080067f1
 8006834:	08006981 	.word	0x08006981
 8006838:	080068a5 	.word	0x080068a5
 800683c:	08006963 	.word	0x08006963
 8006840:	080067f1 	.word	0x080067f1
 8006844:	080067f1 	.word	0x080067f1
 8006848:	080069a3 	.word	0x080069a3
 800684c:	080067f1 	.word	0x080067f1
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080067f1 	.word	0x080067f1
 8006858:	080067f1 	.word	0x080067f1
 800685c:	0800696b 	.word	0x0800696b
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	602a      	str	r2, [r5, #0]
 8006868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006870:	2301      	movs	r3, #1
 8006872:	e0a3      	b.n	80069bc <_printf_i+0x1f4>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	6829      	ldr	r1, [r5, #0]
 8006878:	0606      	lsls	r6, r0, #24
 800687a:	f101 0304 	add.w	r3, r1, #4
 800687e:	d50a      	bpl.n	8006896 <_printf_i+0xce>
 8006880:	680e      	ldr	r6, [r1, #0]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	2e00      	cmp	r6, #0
 8006886:	da03      	bge.n	8006890 <_printf_i+0xc8>
 8006888:	232d      	movs	r3, #45	; 0x2d
 800688a:	4276      	negs	r6, r6
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006890:	485e      	ldr	r0, [pc, #376]	; (8006a0c <_printf_i+0x244>)
 8006892:	230a      	movs	r3, #10
 8006894:	e019      	b.n	80068ca <_printf_i+0x102>
 8006896:	680e      	ldr	r6, [r1, #0]
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800689e:	bf18      	it	ne
 80068a0:	b236      	sxthne	r6, r6
 80068a2:	e7ef      	b.n	8006884 <_printf_i+0xbc>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	0601      	lsls	r1, r0, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0xec>
 80068b0:	681e      	ldr	r6, [r3, #0]
 80068b2:	e002      	b.n	80068ba <_printf_i+0xf2>
 80068b4:	0646      	lsls	r6, r0, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0xe8>
 80068b8:	881e      	ldrh	r6, [r3, #0]
 80068ba:	4854      	ldr	r0, [pc, #336]	; (8006a0c <_printf_i+0x244>)
 80068bc:	2f6f      	cmp	r7, #111	; 0x6f
 80068be:	bf0c      	ite	eq
 80068c0:	2308      	moveq	r3, #8
 80068c2:	230a      	movne	r3, #10
 80068c4:	2100      	movs	r1, #0
 80068c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ca:	6865      	ldr	r5, [r4, #4]
 80068cc:	60a5      	str	r5, [r4, #8]
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	bfa2      	ittt	ge
 80068d2:	6821      	ldrge	r1, [r4, #0]
 80068d4:	f021 0104 	bicge.w	r1, r1, #4
 80068d8:	6021      	strge	r1, [r4, #0]
 80068da:	b90e      	cbnz	r6, 80068e0 <_printf_i+0x118>
 80068dc:	2d00      	cmp	r5, #0
 80068de:	d04d      	beq.n	800697c <_printf_i+0x1b4>
 80068e0:	4615      	mov	r5, r2
 80068e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e6:	fb03 6711 	mls	r7, r3, r1, r6
 80068ea:	5dc7      	ldrb	r7, [r0, r7]
 80068ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068f0:	4637      	mov	r7, r6
 80068f2:	42bb      	cmp	r3, r7
 80068f4:	460e      	mov	r6, r1
 80068f6:	d9f4      	bls.n	80068e2 <_printf_i+0x11a>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d10b      	bne.n	8006914 <_printf_i+0x14c>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07de      	lsls	r6, r3, #31
 8006900:	d508      	bpl.n	8006914 <_printf_i+0x14c>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	4299      	cmp	r1, r3
 8006908:	bfde      	ittt	le
 800690a:	2330      	movle	r3, #48	; 0x30
 800690c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006914:	1b52      	subs	r2, r2, r5
 8006916:	6122      	str	r2, [r4, #16]
 8006918:	f8cd a000 	str.w	sl, [sp]
 800691c:	464b      	mov	r3, r9
 800691e:	aa03      	add	r2, sp, #12
 8006920:	4621      	mov	r1, r4
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff fee2 	bl	80066ec <_printf_common>
 8006928:	3001      	adds	r0, #1
 800692a:	d14c      	bne.n	80069c6 <_printf_i+0x1fe>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b004      	add	sp, #16
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	4835      	ldr	r0, [pc, #212]	; (8006a0c <_printf_i+0x244>)
 8006938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800693c:	6829      	ldr	r1, [r5, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	f851 6b04 	ldr.w	r6, [r1], #4
 8006944:	6029      	str	r1, [r5, #0]
 8006946:	061d      	lsls	r5, r3, #24
 8006948:	d514      	bpl.n	8006974 <_printf_i+0x1ac>
 800694a:	07df      	lsls	r7, r3, #31
 800694c:	bf44      	itt	mi
 800694e:	f043 0320 	orrmi.w	r3, r3, #32
 8006952:	6023      	strmi	r3, [r4, #0]
 8006954:	b91e      	cbnz	r6, 800695e <_printf_i+0x196>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	f023 0320 	bic.w	r3, r3, #32
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	2310      	movs	r3, #16
 8006960:	e7b0      	b.n	80068c4 <_printf_i+0xfc>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f043 0320 	orr.w	r3, r3, #32
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	2378      	movs	r3, #120	; 0x78
 800696c:	4828      	ldr	r0, [pc, #160]	; (8006a10 <_printf_i+0x248>)
 800696e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006972:	e7e3      	b.n	800693c <_printf_i+0x174>
 8006974:	0659      	lsls	r1, r3, #25
 8006976:	bf48      	it	mi
 8006978:	b2b6      	uxthmi	r6, r6
 800697a:	e7e6      	b.n	800694a <_printf_i+0x182>
 800697c:	4615      	mov	r5, r2
 800697e:	e7bb      	b.n	80068f8 <_printf_i+0x130>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	6826      	ldr	r6, [r4, #0]
 8006984:	6961      	ldr	r1, [r4, #20]
 8006986:	1d18      	adds	r0, r3, #4
 8006988:	6028      	str	r0, [r5, #0]
 800698a:	0635      	lsls	r5, r6, #24
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	d501      	bpl.n	8006994 <_printf_i+0x1cc>
 8006990:	6019      	str	r1, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0x1d2>
 8006994:	0670      	lsls	r0, r6, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0x1c8>
 8006998:	8019      	strh	r1, [r3, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	4615      	mov	r5, r2
 80069a0:	e7ba      	b.n	8006918 <_printf_i+0x150>
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	602a      	str	r2, [r5, #0]
 80069a8:	681d      	ldr	r5, [r3, #0]
 80069aa:	6862      	ldr	r2, [r4, #4]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7f9 fc9e 	bl	80002f0 <memchr>
 80069b4:	b108      	cbz	r0, 80069ba <_printf_i+0x1f2>
 80069b6:	1b40      	subs	r0, r0, r5
 80069b8:	6060      	str	r0, [r4, #4]
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	2300      	movs	r3, #0
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c4:	e7a8      	b.n	8006918 <_printf_i+0x150>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4649      	mov	r1, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	47d0      	blx	sl
 80069d0:	3001      	adds	r0, #1
 80069d2:	d0ab      	beq.n	800692c <_printf_i+0x164>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	079b      	lsls	r3, r3, #30
 80069d8:	d413      	bmi.n	8006a02 <_printf_i+0x23a>
 80069da:	68e0      	ldr	r0, [r4, #12]
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	4298      	cmp	r0, r3
 80069e0:	bfb8      	it	lt
 80069e2:	4618      	movlt	r0, r3
 80069e4:	e7a4      	b.n	8006930 <_printf_i+0x168>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4632      	mov	r2, r6
 80069ea:	4649      	mov	r1, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	47d0      	blx	sl
 80069f0:	3001      	adds	r0, #1
 80069f2:	d09b      	beq.n	800692c <_printf_i+0x164>
 80069f4:	3501      	adds	r5, #1
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	9903      	ldr	r1, [sp, #12]
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dcf2      	bgt.n	80069e6 <_printf_i+0x21e>
 8006a00:	e7eb      	b.n	80069da <_printf_i+0x212>
 8006a02:	2500      	movs	r5, #0
 8006a04:	f104 0619 	add.w	r6, r4, #25
 8006a08:	e7f5      	b.n	80069f6 <_printf_i+0x22e>
 8006a0a:	bf00      	nop
 8006a0c:	0800a952 	.word	0x0800a952
 8006a10:	0800a963 	.word	0x0800a963

08006a14 <_scanf_float>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	b087      	sub	sp, #28
 8006a1a:	4617      	mov	r7, r2
 8006a1c:	9303      	str	r3, [sp, #12]
 8006a1e:	688b      	ldr	r3, [r1, #8]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a26:	bf83      	ittte	hi
 8006a28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a2c:	195b      	addhi	r3, r3, r5
 8006a2e:	9302      	strhi	r3, [sp, #8]
 8006a30:	2300      	movls	r3, #0
 8006a32:	bf86      	itte	hi
 8006a34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a38:	608b      	strhi	r3, [r1, #8]
 8006a3a:	9302      	strls	r3, [sp, #8]
 8006a3c:	680b      	ldr	r3, [r1, #0]
 8006a3e:	468b      	mov	fp, r1
 8006a40:	2500      	movs	r5, #0
 8006a42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a46:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a4e:	4680      	mov	r8, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	465e      	mov	r6, fp
 8006a54:	46aa      	mov	sl, r5
 8006a56:	46a9      	mov	r9, r5
 8006a58:	9501      	str	r5, [sp, #4]
 8006a5a:	68a2      	ldr	r2, [r4, #8]
 8006a5c:	b152      	cbz	r2, 8006a74 <_scanf_float+0x60>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b4e      	cmp	r3, #78	; 0x4e
 8006a64:	d864      	bhi.n	8006b30 <_scanf_float+0x11c>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d83c      	bhi.n	8006ae4 <_scanf_float+0xd0>
 8006a6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a6e:	b2c8      	uxtb	r0, r1
 8006a70:	280e      	cmp	r0, #14
 8006a72:	d93a      	bls.n	8006aea <_scanf_float+0xd6>
 8006a74:	f1b9 0f00 	cmp.w	r9, #0
 8006a78:	d003      	beq.n	8006a82 <_scanf_float+0x6e>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a86:	f1ba 0f01 	cmp.w	sl, #1
 8006a8a:	f200 8113 	bhi.w	8006cb4 <_scanf_float+0x2a0>
 8006a8e:	455e      	cmp	r6, fp
 8006a90:	f200 8105 	bhi.w	8006c9e <_scanf_float+0x28a>
 8006a94:	2501      	movs	r5, #1
 8006a96:	4628      	mov	r0, r5
 8006a98:	b007      	add	sp, #28
 8006a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006aa2:	2a0d      	cmp	r2, #13
 8006aa4:	d8e6      	bhi.n	8006a74 <_scanf_float+0x60>
 8006aa6:	a101      	add	r1, pc, #4	; (adr r1, 8006aac <_scanf_float+0x98>)
 8006aa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006aac:	08006beb 	.word	0x08006beb
 8006ab0:	08006a75 	.word	0x08006a75
 8006ab4:	08006a75 	.word	0x08006a75
 8006ab8:	08006a75 	.word	0x08006a75
 8006abc:	08006c4b 	.word	0x08006c4b
 8006ac0:	08006c23 	.word	0x08006c23
 8006ac4:	08006a75 	.word	0x08006a75
 8006ac8:	08006a75 	.word	0x08006a75
 8006acc:	08006bf9 	.word	0x08006bf9
 8006ad0:	08006a75 	.word	0x08006a75
 8006ad4:	08006a75 	.word	0x08006a75
 8006ad8:	08006a75 	.word	0x08006a75
 8006adc:	08006a75 	.word	0x08006a75
 8006ae0:	08006bb1 	.word	0x08006bb1
 8006ae4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ae8:	e7db      	b.n	8006aa2 <_scanf_float+0x8e>
 8006aea:	290e      	cmp	r1, #14
 8006aec:	d8c2      	bhi.n	8006a74 <_scanf_float+0x60>
 8006aee:	a001      	add	r0, pc, #4	; (adr r0, 8006af4 <_scanf_float+0xe0>)
 8006af0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006af4:	08006ba3 	.word	0x08006ba3
 8006af8:	08006a75 	.word	0x08006a75
 8006afc:	08006ba3 	.word	0x08006ba3
 8006b00:	08006c37 	.word	0x08006c37
 8006b04:	08006a75 	.word	0x08006a75
 8006b08:	08006b51 	.word	0x08006b51
 8006b0c:	08006b8d 	.word	0x08006b8d
 8006b10:	08006b8d 	.word	0x08006b8d
 8006b14:	08006b8d 	.word	0x08006b8d
 8006b18:	08006b8d 	.word	0x08006b8d
 8006b1c:	08006b8d 	.word	0x08006b8d
 8006b20:	08006b8d 	.word	0x08006b8d
 8006b24:	08006b8d 	.word	0x08006b8d
 8006b28:	08006b8d 	.word	0x08006b8d
 8006b2c:	08006b8d 	.word	0x08006b8d
 8006b30:	2b6e      	cmp	r3, #110	; 0x6e
 8006b32:	d809      	bhi.n	8006b48 <_scanf_float+0x134>
 8006b34:	2b60      	cmp	r3, #96	; 0x60
 8006b36:	d8b2      	bhi.n	8006a9e <_scanf_float+0x8a>
 8006b38:	2b54      	cmp	r3, #84	; 0x54
 8006b3a:	d077      	beq.n	8006c2c <_scanf_float+0x218>
 8006b3c:	2b59      	cmp	r3, #89	; 0x59
 8006b3e:	d199      	bne.n	8006a74 <_scanf_float+0x60>
 8006b40:	2d07      	cmp	r5, #7
 8006b42:	d197      	bne.n	8006a74 <_scanf_float+0x60>
 8006b44:	2508      	movs	r5, #8
 8006b46:	e029      	b.n	8006b9c <_scanf_float+0x188>
 8006b48:	2b74      	cmp	r3, #116	; 0x74
 8006b4a:	d06f      	beq.n	8006c2c <_scanf_float+0x218>
 8006b4c:	2b79      	cmp	r3, #121	; 0x79
 8006b4e:	e7f6      	b.n	8006b3e <_scanf_float+0x12a>
 8006b50:	6821      	ldr	r1, [r4, #0]
 8006b52:	05c8      	lsls	r0, r1, #23
 8006b54:	d51a      	bpl.n	8006b8c <_scanf_float+0x178>
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b5c:	6021      	str	r1, [r4, #0]
 8006b5e:	f109 0901 	add.w	r9, r9, #1
 8006b62:	b11b      	cbz	r3, 8006b6c <_scanf_float+0x158>
 8006b64:	3b01      	subs	r3, #1
 8006b66:	3201      	adds	r2, #1
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	60a2      	str	r2, [r4, #8]
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	3301      	adds	r3, #1
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	607b      	str	r3, [r7, #4]
 8006b80:	f340 8084 	ble.w	8006c8c <_scanf_float+0x278>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	e766      	b.n	8006a5a <_scanf_float+0x46>
 8006b8c:	eb1a 0f05 	cmn.w	sl, r5
 8006b90:	f47f af70 	bne.w	8006a74 <_scanf_float+0x60>
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b9a:	6022      	str	r2, [r4, #0]
 8006b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8006ba0:	e7e4      	b.n	8006b6c <_scanf_float+0x158>
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	0610      	lsls	r0, r2, #24
 8006ba6:	f57f af65 	bpl.w	8006a74 <_scanf_float+0x60>
 8006baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bae:	e7f4      	b.n	8006b9a <_scanf_float+0x186>
 8006bb0:	f1ba 0f00 	cmp.w	sl, #0
 8006bb4:	d10e      	bne.n	8006bd4 <_scanf_float+0x1c0>
 8006bb6:	f1b9 0f00 	cmp.w	r9, #0
 8006bba:	d10e      	bne.n	8006bda <_scanf_float+0x1c6>
 8006bbc:	6822      	ldr	r2, [r4, #0]
 8006bbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bc6:	d108      	bne.n	8006bda <_scanf_float+0x1c6>
 8006bc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bcc:	6022      	str	r2, [r4, #0]
 8006bce:	f04f 0a01 	mov.w	sl, #1
 8006bd2:	e7e3      	b.n	8006b9c <_scanf_float+0x188>
 8006bd4:	f1ba 0f02 	cmp.w	sl, #2
 8006bd8:	d055      	beq.n	8006c86 <_scanf_float+0x272>
 8006bda:	2d01      	cmp	r5, #1
 8006bdc:	d002      	beq.n	8006be4 <_scanf_float+0x1d0>
 8006bde:	2d04      	cmp	r5, #4
 8006be0:	f47f af48 	bne.w	8006a74 <_scanf_float+0x60>
 8006be4:	3501      	adds	r5, #1
 8006be6:	b2ed      	uxtb	r5, r5
 8006be8:	e7d8      	b.n	8006b9c <_scanf_float+0x188>
 8006bea:	f1ba 0f01 	cmp.w	sl, #1
 8006bee:	f47f af41 	bne.w	8006a74 <_scanf_float+0x60>
 8006bf2:	f04f 0a02 	mov.w	sl, #2
 8006bf6:	e7d1      	b.n	8006b9c <_scanf_float+0x188>
 8006bf8:	b97d      	cbnz	r5, 8006c1a <_scanf_float+0x206>
 8006bfa:	f1b9 0f00 	cmp.w	r9, #0
 8006bfe:	f47f af3c 	bne.w	8006a7a <_scanf_float+0x66>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c0c:	f47f af39 	bne.w	8006a82 <_scanf_float+0x6e>
 8006c10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	2501      	movs	r5, #1
 8006c18:	e7c0      	b.n	8006b9c <_scanf_float+0x188>
 8006c1a:	2d03      	cmp	r5, #3
 8006c1c:	d0e2      	beq.n	8006be4 <_scanf_float+0x1d0>
 8006c1e:	2d05      	cmp	r5, #5
 8006c20:	e7de      	b.n	8006be0 <_scanf_float+0x1cc>
 8006c22:	2d02      	cmp	r5, #2
 8006c24:	f47f af26 	bne.w	8006a74 <_scanf_float+0x60>
 8006c28:	2503      	movs	r5, #3
 8006c2a:	e7b7      	b.n	8006b9c <_scanf_float+0x188>
 8006c2c:	2d06      	cmp	r5, #6
 8006c2e:	f47f af21 	bne.w	8006a74 <_scanf_float+0x60>
 8006c32:	2507      	movs	r5, #7
 8006c34:	e7b2      	b.n	8006b9c <_scanf_float+0x188>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	0591      	lsls	r1, r2, #22
 8006c3a:	f57f af1b 	bpl.w	8006a74 <_scanf_float+0x60>
 8006c3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c48:	e7a8      	b.n	8006b9c <_scanf_float+0x188>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c54:	d006      	beq.n	8006c64 <_scanf_float+0x250>
 8006c56:	0550      	lsls	r0, r2, #21
 8006c58:	f57f af0c 	bpl.w	8006a74 <_scanf_float+0x60>
 8006c5c:	f1b9 0f00 	cmp.w	r9, #0
 8006c60:	f43f af0f 	beq.w	8006a82 <_scanf_float+0x6e>
 8006c64:	0591      	lsls	r1, r2, #22
 8006c66:	bf58      	it	pl
 8006c68:	9901      	ldrpl	r1, [sp, #4]
 8006c6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c6e:	bf58      	it	pl
 8006c70:	eba9 0101 	subpl.w	r1, r9, r1
 8006c74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c78:	bf58      	it	pl
 8006c7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c7e:	6022      	str	r2, [r4, #0]
 8006c80:	f04f 0900 	mov.w	r9, #0
 8006c84:	e78a      	b.n	8006b9c <_scanf_float+0x188>
 8006c86:	f04f 0a03 	mov.w	sl, #3
 8006c8a:	e787      	b.n	8006b9c <_scanf_float+0x188>
 8006c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c90:	4639      	mov	r1, r7
 8006c92:	4640      	mov	r0, r8
 8006c94:	4798      	blx	r3
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f43f aedf 	beq.w	8006a5a <_scanf_float+0x46>
 8006c9c:	e6ea      	b.n	8006a74 <_scanf_float+0x60>
 8006c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ca6:	463a      	mov	r2, r7
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4798      	blx	r3
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	e6ec      	b.n	8006a8e <_scanf_float+0x7a>
 8006cb4:	1e6b      	subs	r3, r5, #1
 8006cb6:	2b06      	cmp	r3, #6
 8006cb8:	d825      	bhi.n	8006d06 <_scanf_float+0x2f2>
 8006cba:	2d02      	cmp	r5, #2
 8006cbc:	d836      	bhi.n	8006d2c <_scanf_float+0x318>
 8006cbe:	455e      	cmp	r6, fp
 8006cc0:	f67f aee8 	bls.w	8006a94 <_scanf_float+0x80>
 8006cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ccc:	463a      	mov	r2, r7
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4798      	blx	r3
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	6123      	str	r3, [r4, #16]
 8006cd8:	e7f1      	b.n	8006cbe <_scanf_float+0x2aa>
 8006cda:	9802      	ldr	r0, [sp, #8]
 8006cdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ce0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ce4:	9002      	str	r0, [sp, #8]
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4798      	blx	r3
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf6:	fa5f fa8a 	uxtb.w	sl, sl
 8006cfa:	f1ba 0f02 	cmp.w	sl, #2
 8006cfe:	d1ec      	bne.n	8006cda <_scanf_float+0x2c6>
 8006d00:	3d03      	subs	r5, #3
 8006d02:	b2ed      	uxtb	r5, r5
 8006d04:	1b76      	subs	r6, r6, r5
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	05da      	lsls	r2, r3, #23
 8006d0a:	d52f      	bpl.n	8006d6c <_scanf_float+0x358>
 8006d0c:	055b      	lsls	r3, r3, #21
 8006d0e:	d510      	bpl.n	8006d32 <_scanf_float+0x31e>
 8006d10:	455e      	cmp	r6, fp
 8006d12:	f67f aebf 	bls.w	8006a94 <_scanf_float+0x80>
 8006d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4640      	mov	r0, r8
 8006d22:	4798      	blx	r3
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	e7f1      	b.n	8006d10 <_scanf_float+0x2fc>
 8006d2c:	46aa      	mov	sl, r5
 8006d2e:	9602      	str	r6, [sp, #8]
 8006d30:	e7df      	b.n	8006cf2 <_scanf_float+0x2de>
 8006d32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	2965      	cmp	r1, #101	; 0x65
 8006d3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	d00c      	beq.n	8006d60 <_scanf_float+0x34c>
 8006d46:	2945      	cmp	r1, #69	; 0x45
 8006d48:	d00a      	beq.n	8006d60 <_scanf_float+0x34c>
 8006d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d4e:	463a      	mov	r2, r7
 8006d50:	4640      	mov	r0, r8
 8006d52:	4798      	blx	r3
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	1eb5      	subs	r5, r6, #2
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d64:	463a      	mov	r2, r7
 8006d66:	4640      	mov	r0, r8
 8006d68:	4798      	blx	r3
 8006d6a:	462e      	mov	r6, r5
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	f015 0510 	ands.w	r5, r5, #16
 8006d72:	d14e      	bne.n	8006e12 <_scanf_float+0x3fe>
 8006d74:	7035      	strb	r5, [r6, #0]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d80:	d119      	bne.n	8006db6 <_scanf_float+0x3a2>
 8006d82:	9b01      	ldr	r3, [sp, #4]
 8006d84:	454b      	cmp	r3, r9
 8006d86:	eba3 0209 	sub.w	r2, r3, r9
 8006d8a:	d121      	bne.n	8006dd0 <_scanf_float+0x3bc>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4659      	mov	r1, fp
 8006d90:	4640      	mov	r0, r8
 8006d92:	f000 fe53 	bl	8007a3c <_strtod_r>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	f012 0f02 	tst.w	r2, #2
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	d021      	beq.n	8006de6 <_scanf_float+0x3d2>
 8006da2:	9903      	ldr	r1, [sp, #12]
 8006da4:	1d1a      	adds	r2, r3, #4
 8006da6:	600a      	str	r2, [r1, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	ed83 0b00 	vstr	d0, [r3]
 8006dae:	68e3      	ldr	r3, [r4, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60e3      	str	r3, [r4, #12]
 8006db4:	e66f      	b.n	8006a96 <_scanf_float+0x82>
 8006db6:	9b04      	ldr	r3, [sp, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0e7      	beq.n	8006d8c <_scanf_float+0x378>
 8006dbc:	9905      	ldr	r1, [sp, #20]
 8006dbe:	230a      	movs	r3, #10
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	3101      	adds	r1, #1
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	f000 fec1 	bl	8007b4c <_strtol_r>
 8006dca:	9b04      	ldr	r3, [sp, #16]
 8006dcc:	9e05      	ldr	r6, [sp, #20]
 8006dce:	1ac2      	subs	r2, r0, r3
 8006dd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006dd4:	429e      	cmp	r6, r3
 8006dd6:	bf28      	it	cs
 8006dd8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ddc:	490e      	ldr	r1, [pc, #56]	; (8006e18 <_scanf_float+0x404>)
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 f83c 	bl	8006e5c <siprintf>
 8006de4:	e7d2      	b.n	8006d8c <_scanf_float+0x378>
 8006de6:	9903      	ldr	r1, [sp, #12]
 8006de8:	f012 0f04 	tst.w	r2, #4
 8006dec:	f103 0204 	add.w	r2, r3, #4
 8006df0:	600a      	str	r2, [r1, #0]
 8006df2:	d1d9      	bne.n	8006da8 <_scanf_float+0x394>
 8006df4:	eeb4 0b40 	vcmp.f64	d0, d0
 8006df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfc:	681e      	ldr	r6, [r3, #0]
 8006dfe:	d705      	bvc.n	8006e0c <_scanf_float+0x3f8>
 8006e00:	4806      	ldr	r0, [pc, #24]	; (8006e1c <_scanf_float+0x408>)
 8006e02:	f000 f825 	bl	8006e50 <nanf>
 8006e06:	ed86 0a00 	vstr	s0, [r6]
 8006e0a:	e7d0      	b.n	8006dae <_scanf_float+0x39a>
 8006e0c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e10:	e7f9      	b.n	8006e06 <_scanf_float+0x3f2>
 8006e12:	2500      	movs	r5, #0
 8006e14:	e63f      	b.n	8006a96 <_scanf_float+0x82>
 8006e16:	bf00      	nop
 8006e18:	0800a974 	.word	0x0800a974
 8006e1c:	0800ade8 	.word	0x0800ade8

08006e20 <iprintf>:
 8006e20:	b40f      	push	{r0, r1, r2, r3}
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <iprintf+0x2c>)
 8006e24:	b513      	push	{r0, r1, r4, lr}
 8006e26:	681c      	ldr	r4, [r3, #0]
 8006e28:	b124      	cbz	r4, 8006e34 <iprintf+0x14>
 8006e2a:	69a3      	ldr	r3, [r4, #24]
 8006e2c:	b913      	cbnz	r3, 8006e34 <iprintf+0x14>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f001 fce0 	bl	80087f4 <__sinit>
 8006e34:	ab05      	add	r3, sp, #20
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	68a1      	ldr	r1, [r4, #8]
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f003 f841 	bl	8009ec4 <_vfiprintf_r>
 8006e42:	b002      	add	sp, #8
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	b004      	add	sp, #16
 8006e4a:	4770      	bx	lr
 8006e4c:	24000020 	.word	0x24000020

08006e50 <nanf>:
 8006e50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e58 <nanf+0x8>
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	7fc00000 	.word	0x7fc00000

08006e5c <siprintf>:
 8006e5c:	b40e      	push	{r1, r2, r3}
 8006e5e:	b500      	push	{lr}
 8006e60:	b09c      	sub	sp, #112	; 0x70
 8006e62:	ab1d      	add	r3, sp, #116	; 0x74
 8006e64:	9002      	str	r0, [sp, #8]
 8006e66:	9006      	str	r0, [sp, #24]
 8006e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e6c:	4809      	ldr	r0, [pc, #36]	; (8006e94 <siprintf+0x38>)
 8006e6e:	9107      	str	r1, [sp, #28]
 8006e70:	9104      	str	r1, [sp, #16]
 8006e72:	4909      	ldr	r1, [pc, #36]	; (8006e98 <siprintf+0x3c>)
 8006e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	a902      	add	r1, sp, #8
 8006e80:	f002 fef6 	bl	8009c70 <_svfiprintf_r>
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	b01c      	add	sp, #112	; 0x70
 8006e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e90:	b003      	add	sp, #12
 8006e92:	4770      	bx	lr
 8006e94:	24000020 	.word	0x24000020
 8006e98:	ffff0208 	.word	0xffff0208

08006e9c <sulp>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	4616      	mov	r6, r2
 8006ea4:	ec45 4b10 	vmov	d0, r4, r5
 8006ea8:	f002 fc44 	bl	8009734 <__ulp>
 8006eac:	b17e      	cbz	r6, 8006ece <sulp+0x32>
 8006eae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006eb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd09      	ble.n	8006ece <sulp+0x32>
 8006eba:	051b      	lsls	r3, r3, #20
 8006ebc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006ec6:	ec41 0b17 	vmov	d7, r0, r1
 8006eca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006ece:	bd70      	pop	{r4, r5, r6, pc}

08006ed0 <_strtod_l>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	ed2d 8b0e 	vpush	{d8-d14}
 8006ed8:	b097      	sub	sp, #92	; 0x5c
 8006eda:	461f      	mov	r7, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	9312      	str	r3, [sp, #72]	; 0x48
 8006ee0:	4ba1      	ldr	r3, [pc, #644]	; (8007168 <_strtod_l+0x298>)
 8006ee2:	920d      	str	r2, [sp, #52]	; 0x34
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9307      	str	r3, [sp, #28]
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4618      	mov	r0, r3
 8006eec:	468b      	mov	fp, r1
 8006eee:	f7f9 f9f7 	bl	80002e0 <strlen>
 8006ef2:	f04f 0800 	mov.w	r8, #0
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	f04f 0900 	mov.w	r9, #0
 8006efc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f02:	7813      	ldrb	r3, [r2, #0]
 8006f04:	2b2b      	cmp	r3, #43	; 0x2b
 8006f06:	d04d      	beq.n	8006fa4 <_strtod_l+0xd4>
 8006f08:	d83a      	bhi.n	8006f80 <_strtod_l+0xb0>
 8006f0a:	2b0d      	cmp	r3, #13
 8006f0c:	d833      	bhi.n	8006f76 <_strtod_l+0xa6>
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d833      	bhi.n	8006f7a <_strtod_l+0xaa>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d03d      	beq.n	8006f92 <_strtod_l+0xc2>
 8006f16:	2300      	movs	r3, #0
 8006f18:	9308      	str	r3, [sp, #32]
 8006f1a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006f1c:	7833      	ldrb	r3, [r6, #0]
 8006f1e:	2b30      	cmp	r3, #48	; 0x30
 8006f20:	f040 80b0 	bne.w	8007084 <_strtod_l+0x1b4>
 8006f24:	7873      	ldrb	r3, [r6, #1]
 8006f26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f2a:	2b58      	cmp	r3, #88	; 0x58
 8006f2c:	d167      	bne.n	8006ffe <_strtod_l+0x12e>
 8006f2e:	9b08      	ldr	r3, [sp, #32]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	ab12      	add	r3, sp, #72	; 0x48
 8006f34:	9702      	str	r7, [sp, #8]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4a8c      	ldr	r2, [pc, #560]	; (800716c <_strtod_l+0x29c>)
 8006f3a:	ab13      	add	r3, sp, #76	; 0x4c
 8006f3c:	a911      	add	r1, sp, #68	; 0x44
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f001 fd5c 	bl	80089fc <__gethex>
 8006f44:	f010 0507 	ands.w	r5, r0, #7
 8006f48:	4607      	mov	r7, r0
 8006f4a:	d005      	beq.n	8006f58 <_strtod_l+0x88>
 8006f4c:	2d06      	cmp	r5, #6
 8006f4e:	d12b      	bne.n	8006fa8 <_strtod_l+0xd8>
 8006f50:	3601      	adds	r6, #1
 8006f52:	2300      	movs	r3, #0
 8006f54:	9611      	str	r6, [sp, #68]	; 0x44
 8006f56:	9308      	str	r3, [sp, #32]
 8006f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f040 854e 	bne.w	80079fc <_strtod_l+0xb2c>
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	b1e3      	cbz	r3, 8006f9e <_strtod_l+0xce>
 8006f64:	ec49 8b17 	vmov	d7, r8, r9
 8006f68:	eeb1 0b47 	vneg.f64	d0, d7
 8006f6c:	b017      	add	sp, #92	; 0x5c
 8006f6e:	ecbd 8b0e 	vpop	{d8-d14}
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d1cd      	bne.n	8006f16 <_strtod_l+0x46>
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	9211      	str	r2, [sp, #68]	; 0x44
 8006f7e:	e7bf      	b.n	8006f00 <_strtod_l+0x30>
 8006f80:	2b2d      	cmp	r3, #45	; 0x2d
 8006f82:	d1c8      	bne.n	8006f16 <_strtod_l+0x46>
 8006f84:	2301      	movs	r3, #1
 8006f86:	9308      	str	r3, [sp, #32]
 8006f88:	1c53      	adds	r3, r2, #1
 8006f8a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f8c:	7853      	ldrb	r3, [r2, #1]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1c3      	bne.n	8006f1a <_strtod_l+0x4a>
 8006f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 852d 	bne.w	80079f8 <_strtod_l+0xb28>
 8006f9e:	ec49 8b10 	vmov	d0, r8, r9
 8006fa2:	e7e3      	b.n	8006f6c <_strtod_l+0x9c>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e7ee      	b.n	8006f86 <_strtod_l+0xb6>
 8006fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006faa:	b13a      	cbz	r2, 8006fbc <_strtod_l+0xec>
 8006fac:	2135      	movs	r1, #53	; 0x35
 8006fae:	a814      	add	r0, sp, #80	; 0x50
 8006fb0:	f002 fcc8 	bl	8009944 <__copybits>
 8006fb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f002 f88a 	bl	80090d0 <_Bfree>
 8006fbc:	3d01      	subs	r5, #1
 8006fbe:	2d04      	cmp	r5, #4
 8006fc0:	d806      	bhi.n	8006fd0 <_strtod_l+0x100>
 8006fc2:	e8df f005 	tbb	[pc, r5]
 8006fc6:	030a      	.short	0x030a
 8006fc8:	1714      	.short	0x1714
 8006fca:	0a          	.byte	0x0a
 8006fcb:	00          	.byte	0x00
 8006fcc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8006fd0:	073f      	lsls	r7, r7, #28
 8006fd2:	d5c1      	bpl.n	8006f58 <_strtod_l+0x88>
 8006fd4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006fd8:	e7be      	b.n	8006f58 <_strtod_l+0x88>
 8006fda:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8006fde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fe0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006fe4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006fe8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006fec:	e7f0      	b.n	8006fd0 <_strtod_l+0x100>
 8006fee:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8007170 <_strtod_l+0x2a0>
 8006ff2:	e7ed      	b.n	8006fd0 <_strtod_l+0x100>
 8006ff4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ff8:	f04f 38ff 	mov.w	r8, #4294967295
 8006ffc:	e7e8      	b.n	8006fd0 <_strtod_l+0x100>
 8006ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	9211      	str	r2, [sp, #68]	; 0x44
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b30      	cmp	r3, #48	; 0x30
 8007008:	d0f9      	beq.n	8006ffe <_strtod_l+0x12e>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0a4      	beq.n	8006f58 <_strtod_l+0x88>
 800700e:	2301      	movs	r3, #1
 8007010:	f04f 0a00 	mov.w	sl, #0
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007018:	930a      	str	r3, [sp, #40]	; 0x28
 800701a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800701e:	f8cd a018 	str.w	sl, [sp, #24]
 8007022:	220a      	movs	r2, #10
 8007024:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007026:	7807      	ldrb	r7, [r0, #0]
 8007028:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800702c:	b2d9      	uxtb	r1, r3
 800702e:	2909      	cmp	r1, #9
 8007030:	d92a      	bls.n	8007088 <_strtod_l+0x1b8>
 8007032:	9907      	ldr	r1, [sp, #28]
 8007034:	462a      	mov	r2, r5
 8007036:	f003 f8d2 	bl	800a1de <strncmp>
 800703a:	2800      	cmp	r0, #0
 800703c:	d033      	beq.n	80070a6 <_strtod_l+0x1d6>
 800703e:	2000      	movs	r0, #0
 8007040:	9b06      	ldr	r3, [sp, #24]
 8007042:	463a      	mov	r2, r7
 8007044:	4601      	mov	r1, r0
 8007046:	4607      	mov	r7, r0
 8007048:	2a65      	cmp	r2, #101	; 0x65
 800704a:	d001      	beq.n	8007050 <_strtod_l+0x180>
 800704c:	2a45      	cmp	r2, #69	; 0x45
 800704e:	d117      	bne.n	8007080 <_strtod_l+0x1b0>
 8007050:	b91b      	cbnz	r3, 800705a <_strtod_l+0x18a>
 8007052:	9b04      	ldr	r3, [sp, #16]
 8007054:	4303      	orrs	r3, r0
 8007056:	d09c      	beq.n	8006f92 <_strtod_l+0xc2>
 8007058:	2300      	movs	r3, #0
 800705a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800705e:	f10b 0201 	add.w	r2, fp, #1
 8007062:	9211      	str	r2, [sp, #68]	; 0x44
 8007064:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8007068:	2a2b      	cmp	r2, #43	; 0x2b
 800706a:	d071      	beq.n	8007150 <_strtod_l+0x280>
 800706c:	2a2d      	cmp	r2, #45	; 0x2d
 800706e:	d077      	beq.n	8007160 <_strtod_l+0x290>
 8007070:	f04f 0e00 	mov.w	lr, #0
 8007074:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007078:	2d09      	cmp	r5, #9
 800707a:	d97f      	bls.n	800717c <_strtod_l+0x2ac>
 800707c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007080:	2500      	movs	r5, #0
 8007082:	e09b      	b.n	80071bc <_strtod_l+0x2ec>
 8007084:	2300      	movs	r3, #0
 8007086:	e7c3      	b.n	8007010 <_strtod_l+0x140>
 8007088:	9906      	ldr	r1, [sp, #24]
 800708a:	2908      	cmp	r1, #8
 800708c:	bfdd      	ittte	le
 800708e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007090:	fb02 3301 	mlale	r3, r2, r1, r3
 8007094:	9309      	strle	r3, [sp, #36]	; 0x24
 8007096:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800709a:	9b06      	ldr	r3, [sp, #24]
 800709c:	3001      	adds	r0, #1
 800709e:	3301      	adds	r3, #1
 80070a0:	9306      	str	r3, [sp, #24]
 80070a2:	9011      	str	r0, [sp, #68]	; 0x44
 80070a4:	e7be      	b.n	8007024 <_strtod_l+0x154>
 80070a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070a8:	195a      	adds	r2, r3, r5
 80070aa:	9211      	str	r2, [sp, #68]	; 0x44
 80070ac:	5d5a      	ldrb	r2, [r3, r5]
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	b3a3      	cbz	r3, 800711c <_strtod_l+0x24c>
 80070b2:	4607      	mov	r7, r0
 80070b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80070b8:	2909      	cmp	r1, #9
 80070ba:	d912      	bls.n	80070e2 <_strtod_l+0x212>
 80070bc:	2101      	movs	r1, #1
 80070be:	e7c3      	b.n	8007048 <_strtod_l+0x178>
 80070c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	9211      	str	r2, [sp, #68]	; 0x44
 80070c6:	785a      	ldrb	r2, [r3, #1]
 80070c8:	3001      	adds	r0, #1
 80070ca:	2a30      	cmp	r2, #48	; 0x30
 80070cc:	d0f8      	beq.n	80070c0 <_strtod_l+0x1f0>
 80070ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	f200 8497 	bhi.w	8007a06 <_strtod_l+0xb36>
 80070d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070da:	930a      	str	r3, [sp, #40]	; 0x28
 80070dc:	4607      	mov	r7, r0
 80070de:	2000      	movs	r0, #0
 80070e0:	4603      	mov	r3, r0
 80070e2:	3a30      	subs	r2, #48	; 0x30
 80070e4:	f100 0101 	add.w	r1, r0, #1
 80070e8:	d012      	beq.n	8007110 <_strtod_l+0x240>
 80070ea:	440f      	add	r7, r1
 80070ec:	eb00 0c03 	add.w	ip, r0, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	250a      	movs	r5, #10
 80070f4:	4561      	cmp	r1, ip
 80070f6:	d113      	bne.n	8007120 <_strtod_l+0x250>
 80070f8:	1819      	adds	r1, r3, r0
 80070fa:	2908      	cmp	r1, #8
 80070fc:	f103 0301 	add.w	r3, r3, #1
 8007100:	4403      	add	r3, r0
 8007102:	dc1c      	bgt.n	800713e <_strtod_l+0x26e>
 8007104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007106:	210a      	movs	r1, #10
 8007108:	fb01 2200 	mla	r2, r1, r0, r2
 800710c:	9209      	str	r2, [sp, #36]	; 0x24
 800710e:	2100      	movs	r1, #0
 8007110:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007112:	1c50      	adds	r0, r2, #1
 8007114:	9011      	str	r0, [sp, #68]	; 0x44
 8007116:	7852      	ldrb	r2, [r2, #1]
 8007118:	4608      	mov	r0, r1
 800711a:	e7cb      	b.n	80070b4 <_strtod_l+0x1e4>
 800711c:	9806      	ldr	r0, [sp, #24]
 800711e:	e7d4      	b.n	80070ca <_strtod_l+0x1fa>
 8007120:	2908      	cmp	r1, #8
 8007122:	dc04      	bgt.n	800712e <_strtod_l+0x25e>
 8007124:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007126:	436e      	muls	r6, r5
 8007128:	9609      	str	r6, [sp, #36]	; 0x24
 800712a:	3101      	adds	r1, #1
 800712c:	e7e2      	b.n	80070f4 <_strtod_l+0x224>
 800712e:	f101 0e01 	add.w	lr, r1, #1
 8007132:	f1be 0f10 	cmp.w	lr, #16
 8007136:	bfd8      	it	le
 8007138:	fb05 fa0a 	mulle.w	sl, r5, sl
 800713c:	e7f5      	b.n	800712a <_strtod_l+0x25a>
 800713e:	2b10      	cmp	r3, #16
 8007140:	bfdc      	itt	le
 8007142:	210a      	movle	r1, #10
 8007144:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8007148:	e7e1      	b.n	800710e <_strtod_l+0x23e>
 800714a:	2700      	movs	r7, #0
 800714c:	2101      	movs	r1, #1
 800714e:	e780      	b.n	8007052 <_strtod_l+0x182>
 8007150:	f04f 0e00 	mov.w	lr, #0
 8007154:	f10b 0202 	add.w	r2, fp, #2
 8007158:	9211      	str	r2, [sp, #68]	; 0x44
 800715a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800715e:	e789      	b.n	8007074 <_strtod_l+0x1a4>
 8007160:	f04f 0e01 	mov.w	lr, #1
 8007164:	e7f6      	b.n	8007154 <_strtod_l+0x284>
 8007166:	bf00      	nop
 8007168:	0800ac2c 	.word	0x0800ac2c
 800716c:	0800a97c 	.word	0x0800a97c
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007176:	1c55      	adds	r5, r2, #1
 8007178:	9511      	str	r5, [sp, #68]	; 0x44
 800717a:	7852      	ldrb	r2, [r2, #1]
 800717c:	2a30      	cmp	r2, #48	; 0x30
 800717e:	d0f9      	beq.n	8007174 <_strtod_l+0x2a4>
 8007180:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007184:	2d08      	cmp	r5, #8
 8007186:	f63f af7b 	bhi.w	8007080 <_strtod_l+0x1b0>
 800718a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800718e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007190:	9207      	str	r2, [sp, #28]
 8007192:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007194:	1c55      	adds	r5, r2, #1
 8007196:	9511      	str	r5, [sp, #68]	; 0x44
 8007198:	7852      	ldrb	r2, [r2, #1]
 800719a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800719e:	2e09      	cmp	r6, #9
 80071a0:	d937      	bls.n	8007212 <_strtod_l+0x342>
 80071a2:	9e07      	ldr	r6, [sp, #28]
 80071a4:	1bad      	subs	r5, r5, r6
 80071a6:	2d08      	cmp	r5, #8
 80071a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80071ac:	dc02      	bgt.n	80071b4 <_strtod_l+0x2e4>
 80071ae:	4565      	cmp	r5, ip
 80071b0:	bfa8      	it	ge
 80071b2:	4665      	movge	r5, ip
 80071b4:	f1be 0f00 	cmp.w	lr, #0
 80071b8:	d000      	beq.n	80071bc <_strtod_l+0x2ec>
 80071ba:	426d      	negs	r5, r5
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d14d      	bne.n	800725c <_strtod_l+0x38c>
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	4303      	orrs	r3, r0
 80071c4:	f47f aec8 	bne.w	8006f58 <_strtod_l+0x88>
 80071c8:	2900      	cmp	r1, #0
 80071ca:	f47f aee2 	bne.w	8006f92 <_strtod_l+0xc2>
 80071ce:	2a69      	cmp	r2, #105	; 0x69
 80071d0:	d027      	beq.n	8007222 <_strtod_l+0x352>
 80071d2:	dc24      	bgt.n	800721e <_strtod_l+0x34e>
 80071d4:	2a49      	cmp	r2, #73	; 0x49
 80071d6:	d024      	beq.n	8007222 <_strtod_l+0x352>
 80071d8:	2a4e      	cmp	r2, #78	; 0x4e
 80071da:	f47f aeda 	bne.w	8006f92 <_strtod_l+0xc2>
 80071de:	4996      	ldr	r1, [pc, #600]	; (8007438 <_strtod_l+0x568>)
 80071e0:	a811      	add	r0, sp, #68	; 0x44
 80071e2:	f001 fe63 	bl	8008eac <__match>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f aed3 	beq.w	8006f92 <_strtod_l+0xc2>
 80071ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b28      	cmp	r3, #40	; 0x28
 80071f2:	d12d      	bne.n	8007250 <_strtod_l+0x380>
 80071f4:	4991      	ldr	r1, [pc, #580]	; (800743c <_strtod_l+0x56c>)
 80071f6:	aa14      	add	r2, sp, #80	; 0x50
 80071f8:	a811      	add	r0, sp, #68	; 0x44
 80071fa:	f001 fe6b 	bl	8008ed4 <__hexnan>
 80071fe:	2805      	cmp	r0, #5
 8007200:	d126      	bne.n	8007250 <_strtod_l+0x380>
 8007202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007204:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007208:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800720c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007210:	e6a2      	b.n	8006f58 <_strtod_l+0x88>
 8007212:	250a      	movs	r5, #10
 8007214:	fb05 250c 	mla	r5, r5, ip, r2
 8007218:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800721c:	e7b9      	b.n	8007192 <_strtod_l+0x2c2>
 800721e:	2a6e      	cmp	r2, #110	; 0x6e
 8007220:	e7db      	b.n	80071da <_strtod_l+0x30a>
 8007222:	4987      	ldr	r1, [pc, #540]	; (8007440 <_strtod_l+0x570>)
 8007224:	a811      	add	r0, sp, #68	; 0x44
 8007226:	f001 fe41 	bl	8008eac <__match>
 800722a:	2800      	cmp	r0, #0
 800722c:	f43f aeb1 	beq.w	8006f92 <_strtod_l+0xc2>
 8007230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007232:	4984      	ldr	r1, [pc, #528]	; (8007444 <_strtod_l+0x574>)
 8007234:	3b01      	subs	r3, #1
 8007236:	a811      	add	r0, sp, #68	; 0x44
 8007238:	9311      	str	r3, [sp, #68]	; 0x44
 800723a:	f001 fe37 	bl	8008eac <__match>
 800723e:	b910      	cbnz	r0, 8007246 <_strtod_l+0x376>
 8007240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007242:	3301      	adds	r3, #1
 8007244:	9311      	str	r3, [sp, #68]	; 0x44
 8007246:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007458 <_strtod_l+0x588>
 800724a:	f04f 0800 	mov.w	r8, #0
 800724e:	e683      	b.n	8006f58 <_strtod_l+0x88>
 8007250:	487d      	ldr	r0, [pc, #500]	; (8007448 <_strtod_l+0x578>)
 8007252:	f002 ff69 	bl	800a128 <nan>
 8007256:	ec59 8b10 	vmov	r8, r9, d0
 800725a:	e67d      	b.n	8006f58 <_strtod_l+0x88>
 800725c:	1bea      	subs	r2, r5, r7
 800725e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8007262:	9207      	str	r2, [sp, #28]
 8007264:	9a06      	ldr	r2, [sp, #24]
 8007266:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800726a:	2a00      	cmp	r2, #0
 800726c:	bf08      	it	eq
 800726e:	461a      	moveq	r2, r3
 8007270:	2b10      	cmp	r3, #16
 8007272:	9206      	str	r2, [sp, #24]
 8007274:	461a      	mov	r2, r3
 8007276:	bfa8      	it	ge
 8007278:	2210      	movge	r2, #16
 800727a:	2b09      	cmp	r3, #9
 800727c:	ec59 8b17 	vmov	r8, r9, d7
 8007280:	dd0c      	ble.n	800729c <_strtod_l+0x3cc>
 8007282:	4972      	ldr	r1, [pc, #456]	; (800744c <_strtod_l+0x57c>)
 8007284:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007288:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800728c:	ee06 aa90 	vmov	s13, sl
 8007290:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007294:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007298:	ec59 8b16 	vmov	r8, r9, d6
 800729c:	2b0f      	cmp	r3, #15
 800729e:	dc36      	bgt.n	800730e <_strtod_l+0x43e>
 80072a0:	9907      	ldr	r1, [sp, #28]
 80072a2:	2900      	cmp	r1, #0
 80072a4:	f43f ae58 	beq.w	8006f58 <_strtod_l+0x88>
 80072a8:	dd23      	ble.n	80072f2 <_strtod_l+0x422>
 80072aa:	2916      	cmp	r1, #22
 80072ac:	dc0b      	bgt.n	80072c6 <_strtod_l+0x3f6>
 80072ae:	4b67      	ldr	r3, [pc, #412]	; (800744c <_strtod_l+0x57c>)
 80072b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80072b4:	ed93 7b00 	vldr	d7, [r3]
 80072b8:	ec49 8b16 	vmov	d6, r8, r9
 80072bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072c0:	ec59 8b17 	vmov	r8, r9, d7
 80072c4:	e648      	b.n	8006f58 <_strtod_l+0x88>
 80072c6:	9807      	ldr	r0, [sp, #28]
 80072c8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80072cc:	4281      	cmp	r1, r0
 80072ce:	db1e      	blt.n	800730e <_strtod_l+0x43e>
 80072d0:	4a5e      	ldr	r2, [pc, #376]	; (800744c <_strtod_l+0x57c>)
 80072d2:	f1c3 030f 	rsb	r3, r3, #15
 80072d6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80072da:	ed91 7b00 	vldr	d7, [r1]
 80072de:	ec49 8b16 	vmov	d6, r8, r9
 80072e2:	1ac3      	subs	r3, r0, r3
 80072e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80072e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072ec:	ed92 6b00 	vldr	d6, [r2]
 80072f0:	e7e4      	b.n	80072bc <_strtod_l+0x3ec>
 80072f2:	9907      	ldr	r1, [sp, #28]
 80072f4:	3116      	adds	r1, #22
 80072f6:	db0a      	blt.n	800730e <_strtod_l+0x43e>
 80072f8:	4b54      	ldr	r3, [pc, #336]	; (800744c <_strtod_l+0x57c>)
 80072fa:	1b7d      	subs	r5, r7, r5
 80072fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007300:	ed95 7b00 	vldr	d7, [r5]
 8007304:	ec49 8b16 	vmov	d6, r8, r9
 8007308:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800730c:	e7d8      	b.n	80072c0 <_strtod_l+0x3f0>
 800730e:	9907      	ldr	r1, [sp, #28]
 8007310:	1a9a      	subs	r2, r3, r2
 8007312:	440a      	add	r2, r1
 8007314:	2a00      	cmp	r2, #0
 8007316:	dd6f      	ble.n	80073f8 <_strtod_l+0x528>
 8007318:	f012 000f 	ands.w	r0, r2, #15
 800731c:	d00a      	beq.n	8007334 <_strtod_l+0x464>
 800731e:	494b      	ldr	r1, [pc, #300]	; (800744c <_strtod_l+0x57c>)
 8007320:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007324:	ed91 7b00 	vldr	d7, [r1]
 8007328:	ec49 8b16 	vmov	d6, r8, r9
 800732c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007330:	ec59 8b17 	vmov	r8, r9, d7
 8007334:	f032 020f 	bics.w	r2, r2, #15
 8007338:	d04f      	beq.n	80073da <_strtod_l+0x50a>
 800733a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800733e:	dd22      	ble.n	8007386 <_strtod_l+0x4b6>
 8007340:	2500      	movs	r5, #0
 8007342:	462e      	mov	r6, r5
 8007344:	9506      	str	r5, [sp, #24]
 8007346:	462f      	mov	r7, r5
 8007348:	2322      	movs	r3, #34	; 0x22
 800734a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007458 <_strtod_l+0x588>
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	f04f 0800 	mov.w	r8, #0
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f43f adfe 	beq.w	8006f58 <_strtod_l+0x88>
 800735c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800735e:	4620      	mov	r0, r4
 8007360:	f001 feb6 	bl	80090d0 <_Bfree>
 8007364:	4639      	mov	r1, r7
 8007366:	4620      	mov	r0, r4
 8007368:	f001 feb2 	bl	80090d0 <_Bfree>
 800736c:	4631      	mov	r1, r6
 800736e:	4620      	mov	r0, r4
 8007370:	f001 feae 	bl	80090d0 <_Bfree>
 8007374:	9906      	ldr	r1, [sp, #24]
 8007376:	4620      	mov	r0, r4
 8007378:	f001 feaa 	bl	80090d0 <_Bfree>
 800737c:	4629      	mov	r1, r5
 800737e:	4620      	mov	r0, r4
 8007380:	f001 fea6 	bl	80090d0 <_Bfree>
 8007384:	e5e8      	b.n	8006f58 <_strtod_l+0x88>
 8007386:	2000      	movs	r0, #0
 8007388:	ec49 8b17 	vmov	d7, r8, r9
 800738c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8007450 <_strtod_l+0x580>
 8007390:	1112      	asrs	r2, r2, #4
 8007392:	4601      	mov	r1, r0
 8007394:	2a01      	cmp	r2, #1
 8007396:	dc23      	bgt.n	80073e0 <_strtod_l+0x510>
 8007398:	b108      	cbz	r0, 800739e <_strtod_l+0x4ce>
 800739a:	ec59 8b17 	vmov	r8, r9, d7
 800739e:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <_strtod_l+0x580>)
 80073a0:	482c      	ldr	r0, [pc, #176]	; (8007454 <_strtod_l+0x584>)
 80073a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80073a6:	ed92 7b00 	vldr	d7, [r2]
 80073aa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80073ae:	ec49 8b16 	vmov	d6, r8, r9
 80073b2:	4a29      	ldr	r2, [pc, #164]	; (8007458 <_strtod_l+0x588>)
 80073b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073b8:	ee17 1a90 	vmov	r1, s15
 80073bc:	400a      	ands	r2, r1
 80073be:	4282      	cmp	r2, r0
 80073c0:	ec59 8b17 	vmov	r8, r9, d7
 80073c4:	d8bc      	bhi.n	8007340 <_strtod_l+0x470>
 80073c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80073ca:	4282      	cmp	r2, r0
 80073cc:	bf86      	itte	hi
 80073ce:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800745c <_strtod_l+0x58c>
 80073d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80073d6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80073da:	2200      	movs	r2, #0
 80073dc:	9204      	str	r2, [sp, #16]
 80073de:	e078      	b.n	80074d2 <_strtod_l+0x602>
 80073e0:	07d6      	lsls	r6, r2, #31
 80073e2:	d504      	bpl.n	80073ee <_strtod_l+0x51e>
 80073e4:	ed9c 6b00 	vldr	d6, [ip]
 80073e8:	2001      	movs	r0, #1
 80073ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073ee:	3101      	adds	r1, #1
 80073f0:	1052      	asrs	r2, r2, #1
 80073f2:	f10c 0c08 	add.w	ip, ip, #8
 80073f6:	e7cd      	b.n	8007394 <_strtod_l+0x4c4>
 80073f8:	d0ef      	beq.n	80073da <_strtod_l+0x50a>
 80073fa:	4252      	negs	r2, r2
 80073fc:	f012 000f 	ands.w	r0, r2, #15
 8007400:	d00a      	beq.n	8007418 <_strtod_l+0x548>
 8007402:	4912      	ldr	r1, [pc, #72]	; (800744c <_strtod_l+0x57c>)
 8007404:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007408:	ed91 7b00 	vldr	d7, [r1]
 800740c:	ec49 8b16 	vmov	d6, r8, r9
 8007410:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007414:	ec59 8b17 	vmov	r8, r9, d7
 8007418:	1112      	asrs	r2, r2, #4
 800741a:	d0de      	beq.n	80073da <_strtod_l+0x50a>
 800741c:	2a1f      	cmp	r2, #31
 800741e:	dd1f      	ble.n	8007460 <_strtod_l+0x590>
 8007420:	2500      	movs	r5, #0
 8007422:	462e      	mov	r6, r5
 8007424:	9506      	str	r5, [sp, #24]
 8007426:	462f      	mov	r7, r5
 8007428:	2322      	movs	r3, #34	; 0x22
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	f04f 0900 	mov.w	r9, #0
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	e78e      	b.n	8007354 <_strtod_l+0x484>
 8007436:	bf00      	nop
 8007438:	0800a94d 	.word	0x0800a94d
 800743c:	0800a990 	.word	0x0800a990
 8007440:	0800a945 	.word	0x0800a945
 8007444:	0800aad4 	.word	0x0800aad4
 8007448:	0800ade8 	.word	0x0800ade8
 800744c:	0800acc8 	.word	0x0800acc8
 8007450:	0800aca0 	.word	0x0800aca0
 8007454:	7ca00000 	.word	0x7ca00000
 8007458:	7ff00000 	.word	0x7ff00000
 800745c:	7fefffff 	.word	0x7fefffff
 8007460:	f012 0110 	ands.w	r1, r2, #16
 8007464:	bf18      	it	ne
 8007466:	216a      	movne	r1, #106	; 0x6a
 8007468:	9104      	str	r1, [sp, #16]
 800746a:	ec49 8b17 	vmov	d7, r8, r9
 800746e:	49be      	ldr	r1, [pc, #760]	; (8007768 <_strtod_l+0x898>)
 8007470:	2000      	movs	r0, #0
 8007472:	07d6      	lsls	r6, r2, #31
 8007474:	d504      	bpl.n	8007480 <_strtod_l+0x5b0>
 8007476:	ed91 6b00 	vldr	d6, [r1]
 800747a:	2001      	movs	r0, #1
 800747c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007480:	1052      	asrs	r2, r2, #1
 8007482:	f101 0108 	add.w	r1, r1, #8
 8007486:	d1f4      	bne.n	8007472 <_strtod_l+0x5a2>
 8007488:	b108      	cbz	r0, 800748e <_strtod_l+0x5be>
 800748a:	ec59 8b17 	vmov	r8, r9, d7
 800748e:	9a04      	ldr	r2, [sp, #16]
 8007490:	b1c2      	cbz	r2, 80074c4 <_strtod_l+0x5f4>
 8007492:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8007496:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800749a:	2a00      	cmp	r2, #0
 800749c:	4648      	mov	r0, r9
 800749e:	dd11      	ble.n	80074c4 <_strtod_l+0x5f4>
 80074a0:	2a1f      	cmp	r2, #31
 80074a2:	f340 812e 	ble.w	8007702 <_strtod_l+0x832>
 80074a6:	2a34      	cmp	r2, #52	; 0x34
 80074a8:	bfde      	ittt	le
 80074aa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80074ae:	f04f 32ff 	movle.w	r2, #4294967295
 80074b2:	fa02 f101 	lslle.w	r1, r2, r1
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	bfcc      	ite	gt
 80074bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80074c0:	ea01 0900 	andle.w	r9, r1, r0
 80074c4:	ec49 8b17 	vmov	d7, r8, r9
 80074c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d0:	d0a6      	beq.n	8007420 <_strtod_l+0x550>
 80074d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d4:	9200      	str	r2, [sp, #0]
 80074d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074d8:	9a06      	ldr	r2, [sp, #24]
 80074da:	4620      	mov	r0, r4
 80074dc:	f001 fe60 	bl	80091a0 <__s2b>
 80074e0:	9006      	str	r0, [sp, #24]
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f43f af2c 	beq.w	8007340 <_strtod_l+0x470>
 80074e8:	9b07      	ldr	r3, [sp, #28]
 80074ea:	1b7d      	subs	r5, r7, r5
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfb4      	ite	lt
 80074f0:	462b      	movlt	r3, r5
 80074f2:	2300      	movge	r3, #0
 80074f4:	9309      	str	r3, [sp, #36]	; 0x24
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8007748 <_strtod_l+0x878>
 80074fc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8007750 <_strtod_l+0x880>
 8007500:	ed9f bb95 	vldr	d11, [pc, #596]	; 8007758 <_strtod_l+0x888>
 8007504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007508:	2500      	movs	r5, #0
 800750a:	930c      	str	r3, [sp, #48]	; 0x30
 800750c:	462e      	mov	r6, r5
 800750e:	9b06      	ldr	r3, [sp, #24]
 8007510:	4620      	mov	r0, r4
 8007512:	6859      	ldr	r1, [r3, #4]
 8007514:	f001 fd9c 	bl	8009050 <_Balloc>
 8007518:	4607      	mov	r7, r0
 800751a:	2800      	cmp	r0, #0
 800751c:	f43f af14 	beq.w	8007348 <_strtod_l+0x478>
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	3202      	adds	r2, #2
 8007526:	f103 010c 	add.w	r1, r3, #12
 800752a:	0092      	lsls	r2, r2, #2
 800752c:	300c      	adds	r0, #12
 800752e:	f7fe fe17 	bl	8006160 <memcpy>
 8007532:	ec49 8b10 	vmov	d0, r8, r9
 8007536:	aa14      	add	r2, sp, #80	; 0x50
 8007538:	a913      	add	r1, sp, #76	; 0x4c
 800753a:	4620      	mov	r0, r4
 800753c:	f002 f976 	bl	800982c <__d2b>
 8007540:	ec49 8b18 	vmov	d8, r8, r9
 8007544:	9012      	str	r0, [sp, #72]	; 0x48
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f aefe 	beq.w	8007348 <_strtod_l+0x478>
 800754c:	2101      	movs	r1, #1
 800754e:	4620      	mov	r0, r4
 8007550:	f001 fec0 	bl	80092d4 <__i2b>
 8007554:	4606      	mov	r6, r0
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f aef6 	beq.w	8007348 <_strtod_l+0x478>
 800755c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800755e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfab      	itete	ge
 8007564:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8007566:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8007568:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800756c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8007570:	bfac      	ite	ge
 8007572:	eb03 0b02 	addge.w	fp, r3, r2
 8007576:	eba2 0a03 	sublt.w	sl, r2, r3
 800757a:	9a04      	ldr	r2, [sp, #16]
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	440b      	add	r3, r1
 8007580:	4a7a      	ldr	r2, [pc, #488]	; (800776c <_strtod_l+0x89c>)
 8007582:	3b01      	subs	r3, #1
 8007584:	4293      	cmp	r3, r2
 8007586:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800758a:	f280 80cd 	bge.w	8007728 <_strtod_l+0x858>
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	2a1f      	cmp	r2, #31
 8007592:	eba1 0102 	sub.w	r1, r1, r2
 8007596:	f04f 0001 	mov.w	r0, #1
 800759a:	f300 80b9 	bgt.w	8007710 <_strtod_l+0x840>
 800759e:	fa00 f302 	lsl.w	r3, r0, r2
 80075a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a4:	2300      	movs	r3, #0
 80075a6:	930a      	str	r3, [sp, #40]	; 0x28
 80075a8:	eb0b 0301 	add.w	r3, fp, r1
 80075ac:	9a04      	ldr	r2, [sp, #16]
 80075ae:	459b      	cmp	fp, r3
 80075b0:	448a      	add	sl, r1
 80075b2:	4492      	add	sl, r2
 80075b4:	465a      	mov	r2, fp
 80075b6:	bfa8      	it	ge
 80075b8:	461a      	movge	r2, r3
 80075ba:	4552      	cmp	r2, sl
 80075bc:	bfa8      	it	ge
 80075be:	4652      	movge	r2, sl
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	bfc2      	ittt	gt
 80075c4:	1a9b      	subgt	r3, r3, r2
 80075c6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80075ca:	ebab 0b02 	subgt.w	fp, fp, r2
 80075ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	dd18      	ble.n	8007606 <_strtod_l+0x736>
 80075d4:	4631      	mov	r1, r6
 80075d6:	4620      	mov	r0, r4
 80075d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80075da:	f001 ff3b 	bl	8009454 <__pow5mult>
 80075de:	4606      	mov	r6, r0
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f43f aeb1 	beq.w	8007348 <_strtod_l+0x478>
 80075e6:	4601      	mov	r1, r0
 80075e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ea:	4620      	mov	r0, r4
 80075ec:	f001 fe88 	bl	8009300 <__multiply>
 80075f0:	900e      	str	r0, [sp, #56]	; 0x38
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f43f aea8 	beq.w	8007348 <_strtod_l+0x478>
 80075f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80075fa:	4620      	mov	r0, r4
 80075fc:	f001 fd68 	bl	80090d0 <_Bfree>
 8007600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007604:	9212      	str	r2, [sp, #72]	; 0x48
 8007606:	2b00      	cmp	r3, #0
 8007608:	f300 8093 	bgt.w	8007732 <_strtod_l+0x862>
 800760c:	9b07      	ldr	r3, [sp, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd08      	ble.n	8007624 <_strtod_l+0x754>
 8007612:	4639      	mov	r1, r7
 8007614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007616:	4620      	mov	r0, r4
 8007618:	f001 ff1c 	bl	8009454 <__pow5mult>
 800761c:	4607      	mov	r7, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f ae92 	beq.w	8007348 <_strtod_l+0x478>
 8007624:	f1ba 0f00 	cmp.w	sl, #0
 8007628:	dd08      	ble.n	800763c <_strtod_l+0x76c>
 800762a:	4639      	mov	r1, r7
 800762c:	4652      	mov	r2, sl
 800762e:	4620      	mov	r0, r4
 8007630:	f001 ff6a 	bl	8009508 <__lshift>
 8007634:	4607      	mov	r7, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f ae86 	beq.w	8007348 <_strtod_l+0x478>
 800763c:	f1bb 0f00 	cmp.w	fp, #0
 8007640:	dd08      	ble.n	8007654 <_strtod_l+0x784>
 8007642:	4631      	mov	r1, r6
 8007644:	465a      	mov	r2, fp
 8007646:	4620      	mov	r0, r4
 8007648:	f001 ff5e 	bl	8009508 <__lshift>
 800764c:	4606      	mov	r6, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	f43f ae7a 	beq.w	8007348 <_strtod_l+0x478>
 8007654:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007656:	463a      	mov	r2, r7
 8007658:	4620      	mov	r0, r4
 800765a:	f001 ffe1 	bl	8009620 <__mdiff>
 800765e:	4605      	mov	r5, r0
 8007660:	2800      	cmp	r0, #0
 8007662:	f43f ae71 	beq.w	8007348 <_strtod_l+0x478>
 8007666:	2300      	movs	r3, #0
 8007668:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800766c:	60c3      	str	r3, [r0, #12]
 800766e:	4631      	mov	r1, r6
 8007670:	f001 ffba 	bl	80095e8 <__mcmp>
 8007674:	2800      	cmp	r0, #0
 8007676:	da7d      	bge.n	8007774 <_strtod_l+0x8a4>
 8007678:	ea5a 0308 	orrs.w	r3, sl, r8
 800767c:	f040 80a3 	bne.w	80077c6 <_strtod_l+0x8f6>
 8007680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 809e 	bne.w	80077c6 <_strtod_l+0x8f6>
 800768a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800768e:	0d1b      	lsrs	r3, r3, #20
 8007690:	051b      	lsls	r3, r3, #20
 8007692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007696:	f240 8096 	bls.w	80077c6 <_strtod_l+0x8f6>
 800769a:	696b      	ldr	r3, [r5, #20]
 800769c:	b91b      	cbnz	r3, 80076a6 <_strtod_l+0x7d6>
 800769e:	692b      	ldr	r3, [r5, #16]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f340 8090 	ble.w	80077c6 <_strtod_l+0x8f6>
 80076a6:	4629      	mov	r1, r5
 80076a8:	2201      	movs	r2, #1
 80076aa:	4620      	mov	r0, r4
 80076ac:	f001 ff2c 	bl	8009508 <__lshift>
 80076b0:	4631      	mov	r1, r6
 80076b2:	4605      	mov	r5, r0
 80076b4:	f001 ff98 	bl	80095e8 <__mcmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f340 8084 	ble.w	80077c6 <_strtod_l+0x8f6>
 80076be:	9904      	ldr	r1, [sp, #16]
 80076c0:	4a2b      	ldr	r2, [pc, #172]	; (8007770 <_strtod_l+0x8a0>)
 80076c2:	464b      	mov	r3, r9
 80076c4:	2900      	cmp	r1, #0
 80076c6:	f000 809d 	beq.w	8007804 <_strtod_l+0x934>
 80076ca:	ea02 0109 	and.w	r1, r2, r9
 80076ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076d2:	f300 8097 	bgt.w	8007804 <_strtod_l+0x934>
 80076d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076da:	f77f aea5 	ble.w	8007428 <_strtod_l+0x558>
 80076de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007760 <_strtod_l+0x890>
 80076e2:	ec49 8b16 	vmov	d6, r8, r9
 80076e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80076ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	bf08      	it	eq
 80076f6:	2322      	moveq	r3, #34	; 0x22
 80076f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076fc:	bf08      	it	eq
 80076fe:	6023      	streq	r3, [r4, #0]
 8007700:	e62c      	b.n	800735c <_strtod_l+0x48c>
 8007702:	f04f 31ff 	mov.w	r1, #4294967295
 8007706:	fa01 f202 	lsl.w	r2, r1, r2
 800770a:	ea02 0808 	and.w	r8, r2, r8
 800770e:	e6d9      	b.n	80074c4 <_strtod_l+0x5f4>
 8007710:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007714:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007718:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800771c:	33e2      	adds	r3, #226	; 0xe2
 800771e:	fa00 f303 	lsl.w	r3, r0, r3
 8007722:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8007726:	e73f      	b.n	80075a8 <_strtod_l+0x6d8>
 8007728:	2200      	movs	r2, #0
 800772a:	2301      	movs	r3, #1
 800772c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007730:	e73a      	b.n	80075a8 <_strtod_l+0x6d8>
 8007732:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007734:	461a      	mov	r2, r3
 8007736:	4620      	mov	r0, r4
 8007738:	f001 fee6 	bl	8009508 <__lshift>
 800773c:	9012      	str	r0, [sp, #72]	; 0x48
 800773e:	2800      	cmp	r0, #0
 8007740:	f47f af64 	bne.w	800760c <_strtod_l+0x73c>
 8007744:	e600      	b.n	8007348 <_strtod_l+0x478>
 8007746:	bf00      	nop
 8007748:	94a03595 	.word	0x94a03595
 800774c:	3fcfffff 	.word	0x3fcfffff
 8007750:	94a03595 	.word	0x94a03595
 8007754:	3fdfffff 	.word	0x3fdfffff
 8007758:	35afe535 	.word	0x35afe535
 800775c:	3fe00000 	.word	0x3fe00000
 8007760:	00000000 	.word	0x00000000
 8007764:	39500000 	.word	0x39500000
 8007768:	0800a9a8 	.word	0x0800a9a8
 800776c:	fffffc02 	.word	0xfffffc02
 8007770:	7ff00000 	.word	0x7ff00000
 8007774:	46cb      	mov	fp, r9
 8007776:	d15f      	bne.n	8007838 <_strtod_l+0x968>
 8007778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800777c:	f1ba 0f00 	cmp.w	sl, #0
 8007780:	d02a      	beq.n	80077d8 <_strtod_l+0x908>
 8007782:	4aa7      	ldr	r2, [pc, #668]	; (8007a20 <_strtod_l+0xb50>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d12b      	bne.n	80077e0 <_strtod_l+0x910>
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	4642      	mov	r2, r8
 800778c:	b1fb      	cbz	r3, 80077ce <_strtod_l+0x8fe>
 800778e:	4ba5      	ldr	r3, [pc, #660]	; (8007a24 <_strtod_l+0xb54>)
 8007790:	ea09 0303 	and.w	r3, r9, r3
 8007794:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007798:	f04f 31ff 	mov.w	r1, #4294967295
 800779c:	d81a      	bhi.n	80077d4 <_strtod_l+0x904>
 800779e:	0d1b      	lsrs	r3, r3, #20
 80077a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077a4:	fa01 f303 	lsl.w	r3, r1, r3
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d119      	bne.n	80077e0 <_strtod_l+0x910>
 80077ac:	4b9e      	ldr	r3, [pc, #632]	; (8007a28 <_strtod_l+0xb58>)
 80077ae:	459b      	cmp	fp, r3
 80077b0:	d102      	bne.n	80077b8 <_strtod_l+0x8e8>
 80077b2:	3201      	adds	r2, #1
 80077b4:	f43f adc8 	beq.w	8007348 <_strtod_l+0x478>
 80077b8:	4b9a      	ldr	r3, [pc, #616]	; (8007a24 <_strtod_l+0xb54>)
 80077ba:	ea0b 0303 	and.w	r3, fp, r3
 80077be:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	9b04      	ldr	r3, [sp, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d188      	bne.n	80076de <_strtod_l+0x80e>
 80077cc:	e5c6      	b.n	800735c <_strtod_l+0x48c>
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	e7e9      	b.n	80077a8 <_strtod_l+0x8d8>
 80077d4:	460b      	mov	r3, r1
 80077d6:	e7e7      	b.n	80077a8 <_strtod_l+0x8d8>
 80077d8:	ea53 0308 	orrs.w	r3, r3, r8
 80077dc:	f43f af6f 	beq.w	80076be <_strtod_l+0x7ee>
 80077e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e2:	b1cb      	cbz	r3, 8007818 <_strtod_l+0x948>
 80077e4:	ea13 0f0b 	tst.w	r3, fp
 80077e8:	d0ed      	beq.n	80077c6 <_strtod_l+0x8f6>
 80077ea:	9a04      	ldr	r2, [sp, #16]
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f1ba 0f00 	cmp.w	sl, #0
 80077f4:	d014      	beq.n	8007820 <_strtod_l+0x950>
 80077f6:	f7ff fb51 	bl	8006e9c <sulp>
 80077fa:	ee38 7b00 	vadd.f64	d7, d8, d0
 80077fe:	ec59 8b17 	vmov	r8, r9, d7
 8007802:	e7e0      	b.n	80077c6 <_strtod_l+0x8f6>
 8007804:	4013      	ands	r3, r2
 8007806:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800780a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800780e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007812:	f04f 38ff 	mov.w	r8, #4294967295
 8007816:	e7d6      	b.n	80077c6 <_strtod_l+0x8f6>
 8007818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800781a:	ea13 0f08 	tst.w	r3, r8
 800781e:	e7e3      	b.n	80077e8 <_strtod_l+0x918>
 8007820:	f7ff fb3c 	bl	8006e9c <sulp>
 8007824:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007828:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007830:	ec59 8b10 	vmov	r8, r9, d0
 8007834:	d1c7      	bne.n	80077c6 <_strtod_l+0x8f6>
 8007836:	e5f7      	b.n	8007428 <_strtod_l+0x558>
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	f002 f852 	bl	80098e4 <__ratio>
 8007840:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007844:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	d865      	bhi.n	800791a <_strtod_l+0xa4a>
 800784e:	f1ba 0f00 	cmp.w	sl, #0
 8007852:	d042      	beq.n	80078da <_strtod_l+0xa0a>
 8007854:	4b75      	ldr	r3, [pc, #468]	; (8007a2c <_strtod_l+0xb5c>)
 8007856:	2200      	movs	r2, #0
 8007858:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800785c:	4871      	ldr	r0, [pc, #452]	; (8007a24 <_strtod_l+0xb54>)
 800785e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007a38 <_strtod_l+0xb68>
 8007862:	ea0b 0100 	and.w	r1, fp, r0
 8007866:	4561      	cmp	r1, ip
 8007868:	f040 808e 	bne.w	8007988 <_strtod_l+0xab8>
 800786c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007870:	ec49 8b10 	vmov	d0, r8, r9
 8007874:	ec43 2b1c 	vmov	d12, r2, r3
 8007878:	910a      	str	r1, [sp, #40]	; 0x28
 800787a:	f001 ff5b 	bl	8009734 <__ulp>
 800787e:	ec49 8b1e 	vmov	d14, r8, r9
 8007882:	4868      	ldr	r0, [pc, #416]	; (8007a24 <_strtod_l+0xb54>)
 8007884:	eeac eb00 	vfma.f64	d14, d12, d0
 8007888:	ee1e 3a90 	vmov	r3, s29
 800788c:	4a68      	ldr	r2, [pc, #416]	; (8007a30 <_strtod_l+0xb60>)
 800788e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007890:	4018      	ands	r0, r3
 8007892:	4290      	cmp	r0, r2
 8007894:	ec59 8b1e 	vmov	r8, r9, d14
 8007898:	d94e      	bls.n	8007938 <_strtod_l+0xa68>
 800789a:	ee18 3a90 	vmov	r3, s17
 800789e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d104      	bne.n	80078b0 <_strtod_l+0x9e0>
 80078a6:	ee18 3a10 	vmov	r3, s16
 80078aa:	3301      	adds	r3, #1
 80078ac:	f43f ad4c 	beq.w	8007348 <_strtod_l+0x478>
 80078b0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007a28 <_strtod_l+0xb58>
 80078b4:	f04f 38ff 	mov.w	r8, #4294967295
 80078b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80078ba:	4620      	mov	r0, r4
 80078bc:	f001 fc08 	bl	80090d0 <_Bfree>
 80078c0:	4639      	mov	r1, r7
 80078c2:	4620      	mov	r0, r4
 80078c4:	f001 fc04 	bl	80090d0 <_Bfree>
 80078c8:	4631      	mov	r1, r6
 80078ca:	4620      	mov	r0, r4
 80078cc:	f001 fc00 	bl	80090d0 <_Bfree>
 80078d0:	4629      	mov	r1, r5
 80078d2:	4620      	mov	r0, r4
 80078d4:	f001 fbfc 	bl	80090d0 <_Bfree>
 80078d8:	e619      	b.n	800750e <_strtod_l+0x63e>
 80078da:	f1b8 0f00 	cmp.w	r8, #0
 80078de:	d112      	bne.n	8007906 <_strtod_l+0xa36>
 80078e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e4:	b9b3      	cbnz	r3, 8007914 <_strtod_l+0xa44>
 80078e6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80078ea:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80078f6:	bf58      	it	pl
 80078f8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80078fc:	eeb1 7b4d 	vneg.f64	d7, d13
 8007900:	ec53 2b17 	vmov	r2, r3, d7
 8007904:	e7aa      	b.n	800785c <_strtod_l+0x98c>
 8007906:	f1b8 0f01 	cmp.w	r8, #1
 800790a:	d103      	bne.n	8007914 <_strtod_l+0xa44>
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	f43f ad8a 	beq.w	8007428 <_strtod_l+0x558>
 8007914:	4b47      	ldr	r3, [pc, #284]	; (8007a34 <_strtod_l+0xb64>)
 8007916:	2200      	movs	r2, #0
 8007918:	e79e      	b.n	8007858 <_strtod_l+0x988>
 800791a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800791e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007922:	f1ba 0f00 	cmp.w	sl, #0
 8007926:	d104      	bne.n	8007932 <_strtod_l+0xa62>
 8007928:	eeb1 7b4d 	vneg.f64	d7, d13
 800792c:	ec53 2b17 	vmov	r2, r3, d7
 8007930:	e794      	b.n	800785c <_strtod_l+0x98c>
 8007932:	eeb0 7b4d 	vmov.f64	d7, d13
 8007936:	e7f9      	b.n	800792c <_strtod_l+0xa5c>
 8007938:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800793c:	9b04      	ldr	r3, [sp, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1ba      	bne.n	80078b8 <_strtod_l+0x9e8>
 8007942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007946:	0d1b      	lsrs	r3, r3, #20
 8007948:	051b      	lsls	r3, r3, #20
 800794a:	4299      	cmp	r1, r3
 800794c:	d1b4      	bne.n	80078b8 <_strtod_l+0x9e8>
 800794e:	ec51 0b1d 	vmov	r0, r1, d13
 8007952:	f7f8 fef1 	bl	8000738 <__aeabi_d2lz>
 8007956:	f7f8 fea9 	bl	80006ac <__aeabi_l2d>
 800795a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800795e:	ec41 0b17 	vmov	d7, r0, r1
 8007962:	ea43 0308 	orr.w	r3, r3, r8
 8007966:	ea53 030a 	orrs.w	r3, r3, sl
 800796a:	ee3d db47 	vsub.f64	d13, d13, d7
 800796e:	d03c      	beq.n	80079ea <_strtod_l+0xb1a>
 8007970:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007978:	f53f acf0 	bmi.w	800735c <_strtod_l+0x48c>
 800797c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	dd98      	ble.n	80078b8 <_strtod_l+0x9e8>
 8007986:	e4e9      	b.n	800735c <_strtod_l+0x48c>
 8007988:	9804      	ldr	r0, [sp, #16]
 800798a:	b1f0      	cbz	r0, 80079ca <_strtod_l+0xafa>
 800798c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007990:	d81b      	bhi.n	80079ca <_strtod_l+0xafa>
 8007992:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007a18 <_strtod_l+0xb48>
 8007996:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	d811      	bhi.n	80079c4 <_strtod_l+0xaf4>
 80079a0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80079a4:	ee1d 3a10 	vmov	r3, s26
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	bf38      	it	cc
 80079ac:	2301      	movcc	r3, #1
 80079ae:	ee0d 3a10 	vmov	s26, r3
 80079b2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80079b6:	f1ba 0f00 	cmp.w	sl, #0
 80079ba:	d113      	bne.n	80079e4 <_strtod_l+0xb14>
 80079bc:	eeb1 7b4d 	vneg.f64	d7, d13
 80079c0:	ec53 2b17 	vmov	r2, r3, d7
 80079c4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80079c8:	1a43      	subs	r3, r0, r1
 80079ca:	eeb0 0b48 	vmov.f64	d0, d8
 80079ce:	ec43 2b1c 	vmov	d12, r2, r3
 80079d2:	910a      	str	r1, [sp, #40]	; 0x28
 80079d4:	f001 feae 	bl	8009734 <__ulp>
 80079d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079da:	eeac 8b00 	vfma.f64	d8, d12, d0
 80079de:	ec59 8b18 	vmov	r8, r9, d8
 80079e2:	e7ab      	b.n	800793c <_strtod_l+0xa6c>
 80079e4:	eeb0 7b4d 	vmov.f64	d7, d13
 80079e8:	e7ea      	b.n	80079c0 <_strtod_l+0xaf0>
 80079ea:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80079ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f2:	f57f af61 	bpl.w	80078b8 <_strtod_l+0x9e8>
 80079f6:	e4b1      	b.n	800735c <_strtod_l+0x48c>
 80079f8:	2300      	movs	r3, #0
 80079fa:	9308      	str	r3, [sp, #32]
 80079fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	f7ff baad 	b.w	8006f60 <_strtod_l+0x90>
 8007a06:	2a65      	cmp	r2, #101	; 0x65
 8007a08:	f43f ab9f 	beq.w	800714a <_strtod_l+0x27a>
 8007a0c:	2a45      	cmp	r2, #69	; 0x45
 8007a0e:	f43f ab9c 	beq.w	800714a <_strtod_l+0x27a>
 8007a12:	2101      	movs	r1, #1
 8007a14:	f7ff bbd4 	b.w	80071c0 <_strtod_l+0x2f0>
 8007a18:	ffc00000 	.word	0xffc00000
 8007a1c:	41dfffff 	.word	0x41dfffff
 8007a20:	000fffff 	.word	0x000fffff
 8007a24:	7ff00000 	.word	0x7ff00000
 8007a28:	7fefffff 	.word	0x7fefffff
 8007a2c:	3ff00000 	.word	0x3ff00000
 8007a30:	7c9fffff 	.word	0x7c9fffff
 8007a34:	bff00000 	.word	0xbff00000
 8007a38:	7fe00000 	.word	0x7fe00000

08007a3c <_strtod_r>:
 8007a3c:	4b01      	ldr	r3, [pc, #4]	; (8007a44 <_strtod_r+0x8>)
 8007a3e:	f7ff ba47 	b.w	8006ed0 <_strtod_l>
 8007a42:	bf00      	nop
 8007a44:	24000088 	.word	0x24000088

08007a48 <_strtol_l.constprop.0>:
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4e:	d001      	beq.n	8007a54 <_strtol_l.constprop.0+0xc>
 8007a50:	2b24      	cmp	r3, #36	; 0x24
 8007a52:	d906      	bls.n	8007a62 <_strtol_l.constprop.0+0x1a>
 8007a54:	f7fe fb5a 	bl	800610c <__errno>
 8007a58:	2316      	movs	r3, #22
 8007a5a:	6003      	str	r3, [r0, #0]
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b48 <_strtol_l.constprop.0+0x100>
 8007a66:	460d      	mov	r5, r1
 8007a68:	462e      	mov	r6, r5
 8007a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007a72:	f017 0708 	ands.w	r7, r7, #8
 8007a76:	d1f7      	bne.n	8007a68 <_strtol_l.constprop.0+0x20>
 8007a78:	2c2d      	cmp	r4, #45	; 0x2d
 8007a7a:	d132      	bne.n	8007ae2 <_strtol_l.constprop.0+0x9a>
 8007a7c:	782c      	ldrb	r4, [r5, #0]
 8007a7e:	2701      	movs	r7, #1
 8007a80:	1cb5      	adds	r5, r6, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d05b      	beq.n	8007b3e <_strtol_l.constprop.0+0xf6>
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d109      	bne.n	8007a9e <_strtol_l.constprop.0+0x56>
 8007a8a:	2c30      	cmp	r4, #48	; 0x30
 8007a8c:	d107      	bne.n	8007a9e <_strtol_l.constprop.0+0x56>
 8007a8e:	782c      	ldrb	r4, [r5, #0]
 8007a90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a94:	2c58      	cmp	r4, #88	; 0x58
 8007a96:	d14d      	bne.n	8007b34 <_strtol_l.constprop.0+0xec>
 8007a98:	786c      	ldrb	r4, [r5, #1]
 8007a9a:	2310      	movs	r3, #16
 8007a9c:	3502      	adds	r5, #2
 8007a9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007aa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007aa6:	f04f 0c00 	mov.w	ip, #0
 8007aaa:	fbb8 f9f3 	udiv	r9, r8, r3
 8007aae:	4666      	mov	r6, ip
 8007ab0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007ab4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007ab8:	f1be 0f09 	cmp.w	lr, #9
 8007abc:	d816      	bhi.n	8007aec <_strtol_l.constprop.0+0xa4>
 8007abe:	4674      	mov	r4, lr
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	dd24      	ble.n	8007b0e <_strtol_l.constprop.0+0xc6>
 8007ac4:	f1bc 0f00 	cmp.w	ip, #0
 8007ac8:	db1e      	blt.n	8007b08 <_strtol_l.constprop.0+0xc0>
 8007aca:	45b1      	cmp	r9, r6
 8007acc:	d31c      	bcc.n	8007b08 <_strtol_l.constprop.0+0xc0>
 8007ace:	d101      	bne.n	8007ad4 <_strtol_l.constprop.0+0x8c>
 8007ad0:	45a2      	cmp	sl, r4
 8007ad2:	db19      	blt.n	8007b08 <_strtol_l.constprop.0+0xc0>
 8007ad4:	fb06 4603 	mla	r6, r6, r3, r4
 8007ad8:	f04f 0c01 	mov.w	ip, #1
 8007adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ae0:	e7e8      	b.n	8007ab4 <_strtol_l.constprop.0+0x6c>
 8007ae2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ae4:	bf04      	itt	eq
 8007ae6:	782c      	ldrbeq	r4, [r5, #0]
 8007ae8:	1cb5      	addeq	r5, r6, #2
 8007aea:	e7ca      	b.n	8007a82 <_strtol_l.constprop.0+0x3a>
 8007aec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007af0:	f1be 0f19 	cmp.w	lr, #25
 8007af4:	d801      	bhi.n	8007afa <_strtol_l.constprop.0+0xb2>
 8007af6:	3c37      	subs	r4, #55	; 0x37
 8007af8:	e7e2      	b.n	8007ac0 <_strtol_l.constprop.0+0x78>
 8007afa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007afe:	f1be 0f19 	cmp.w	lr, #25
 8007b02:	d804      	bhi.n	8007b0e <_strtol_l.constprop.0+0xc6>
 8007b04:	3c57      	subs	r4, #87	; 0x57
 8007b06:	e7db      	b.n	8007ac0 <_strtol_l.constprop.0+0x78>
 8007b08:	f04f 3cff 	mov.w	ip, #4294967295
 8007b0c:	e7e6      	b.n	8007adc <_strtol_l.constprop.0+0x94>
 8007b0e:	f1bc 0f00 	cmp.w	ip, #0
 8007b12:	da05      	bge.n	8007b20 <_strtol_l.constprop.0+0xd8>
 8007b14:	2322      	movs	r3, #34	; 0x22
 8007b16:	6003      	str	r3, [r0, #0]
 8007b18:	4646      	mov	r6, r8
 8007b1a:	b942      	cbnz	r2, 8007b2e <_strtol_l.constprop.0+0xe6>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	e79e      	b.n	8007a5e <_strtol_l.constprop.0+0x16>
 8007b20:	b107      	cbz	r7, 8007b24 <_strtol_l.constprop.0+0xdc>
 8007b22:	4276      	negs	r6, r6
 8007b24:	2a00      	cmp	r2, #0
 8007b26:	d0f9      	beq.n	8007b1c <_strtol_l.constprop.0+0xd4>
 8007b28:	f1bc 0f00 	cmp.w	ip, #0
 8007b2c:	d000      	beq.n	8007b30 <_strtol_l.constprop.0+0xe8>
 8007b2e:	1e69      	subs	r1, r5, #1
 8007b30:	6011      	str	r1, [r2, #0]
 8007b32:	e7f3      	b.n	8007b1c <_strtol_l.constprop.0+0xd4>
 8007b34:	2430      	movs	r4, #48	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1b1      	bne.n	8007a9e <_strtol_l.constprop.0+0x56>
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	e7af      	b.n	8007a9e <_strtol_l.constprop.0+0x56>
 8007b3e:	2c30      	cmp	r4, #48	; 0x30
 8007b40:	d0a5      	beq.n	8007a8e <_strtol_l.constprop.0+0x46>
 8007b42:	230a      	movs	r3, #10
 8007b44:	e7ab      	b.n	8007a9e <_strtol_l.constprop.0+0x56>
 8007b46:	bf00      	nop
 8007b48:	0800a9d1 	.word	0x0800a9d1

08007b4c <_strtol_r>:
 8007b4c:	f7ff bf7c 	b.w	8007a48 <_strtol_l.constprop.0>

08007b50 <quorem>:
 8007b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	6903      	ldr	r3, [r0, #16]
 8007b56:	690c      	ldr	r4, [r1, #16]
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f2c0 8081 	blt.w	8007c62 <quorem+0x112>
 8007b60:	3c01      	subs	r4, #1
 8007b62:	f101 0814 	add.w	r8, r1, #20
 8007b66:	f100 0514 	add.w	r5, r0, #20
 8007b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b88:	d331      	bcc.n	8007bee <quorem+0x9e>
 8007b8a:	f04f 0e00 	mov.w	lr, #0
 8007b8e:	4640      	mov	r0, r8
 8007b90:	46ac      	mov	ip, r5
 8007b92:	46f2      	mov	sl, lr
 8007b94:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b98:	b293      	uxth	r3, r2
 8007b9a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ba8:	f8dc a000 	ldr.w	sl, [ip]
 8007bac:	0c12      	lsrs	r2, r2, #16
 8007bae:	fa13 f38a 	uxtah	r3, r3, sl
 8007bb2:	fb06 e202 	mla	r2, r6, r2, lr
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	9b00      	ldr	r3, [sp, #0]
 8007bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007bcc:	4581      	cmp	r9, r0
 8007bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd2:	f84c 3b04 	str.w	r3, [ip], #4
 8007bd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007bda:	d2db      	bcs.n	8007b94 <quorem+0x44>
 8007bdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007be0:	b92b      	cbnz	r3, 8007bee <quorem+0x9e>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	3b04      	subs	r3, #4
 8007be6:	429d      	cmp	r5, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	d32e      	bcc.n	8007c4a <quorem+0xfa>
 8007bec:	613c      	str	r4, [r7, #16]
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f001 fcfa 	bl	80095e8 <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	db24      	blt.n	8007c42 <quorem+0xf2>
 8007bf8:	3601      	adds	r6, #1
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f04f 0c00 	mov.w	ip, #0
 8007c00:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c04:	f8d0 e000 	ldr.w	lr, [r0]
 8007c08:	b293      	uxth	r3, r2
 8007c0a:	ebac 0303 	sub.w	r3, ip, r3
 8007c0e:	0c12      	lsrs	r2, r2, #16
 8007c10:	fa13 f38e 	uxtah	r3, r3, lr
 8007c14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c22:	45c1      	cmp	r9, r8
 8007c24:	f840 3b04 	str.w	r3, [r0], #4
 8007c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c2c:	d2e8      	bcs.n	8007c00 <quorem+0xb0>
 8007c2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c36:	b922      	cbnz	r2, 8007c42 <quorem+0xf2>
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	429d      	cmp	r5, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	d30a      	bcc.n	8007c56 <quorem+0x106>
 8007c40:	613c      	str	r4, [r7, #16]
 8007c42:	4630      	mov	r0, r6
 8007c44:	b003      	add	sp, #12
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1cc      	bne.n	8007bec <quorem+0x9c>
 8007c52:	3c01      	subs	r4, #1
 8007c54:	e7c7      	b.n	8007be6 <quorem+0x96>
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	3b04      	subs	r3, #4
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	d1f0      	bne.n	8007c40 <quorem+0xf0>
 8007c5e:	3c01      	subs	r4, #1
 8007c60:	e7eb      	b.n	8007c3a <quorem+0xea>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e7ee      	b.n	8007c44 <quorem+0xf4>
	...

08007c68 <_dtoa_r>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ed2d 8b02 	vpush	{d8}
 8007c70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c72:	b091      	sub	sp, #68	; 0x44
 8007c74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c78:	ec59 8b10 	vmov	r8, r9, d0
 8007c7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007c7e:	9106      	str	r1, [sp, #24]
 8007c80:	4606      	mov	r6, r0
 8007c82:	9208      	str	r2, [sp, #32]
 8007c84:	930c      	str	r3, [sp, #48]	; 0x30
 8007c86:	b975      	cbnz	r5, 8007ca6 <_dtoa_r+0x3e>
 8007c88:	2010      	movs	r0, #16
 8007c8a:	f001 f9c7 	bl	800901c <malloc>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	6270      	str	r0, [r6, #36]	; 0x24
 8007c92:	b920      	cbnz	r0, 8007c9e <_dtoa_r+0x36>
 8007c94:	4baa      	ldr	r3, [pc, #680]	; (8007f40 <_dtoa_r+0x2d8>)
 8007c96:	21ea      	movs	r1, #234	; 0xea
 8007c98:	48aa      	ldr	r0, [pc, #680]	; (8007f44 <_dtoa_r+0x2dc>)
 8007c9a:	f002 fb95 	bl	800a3c8 <__assert_func>
 8007c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ca2:	6005      	str	r5, [r0, #0]
 8007ca4:	60c5      	str	r5, [r0, #12]
 8007ca6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ca8:	6819      	ldr	r1, [r3, #0]
 8007caa:	b151      	cbz	r1, 8007cc2 <_dtoa_r+0x5a>
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	604a      	str	r2, [r1, #4]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4093      	lsls	r3, r2
 8007cb4:	608b      	str	r3, [r1, #8]
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f001 fa0a 	bl	80090d0 <_Bfree>
 8007cbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f1b9 0300 	subs.w	r3, r9, #0
 8007cc6:	bfbb      	ittet	lt
 8007cc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ccc:	9303      	strlt	r3, [sp, #12]
 8007cce:	2300      	movge	r3, #0
 8007cd0:	2201      	movlt	r2, #1
 8007cd2:	bfac      	ite	ge
 8007cd4:	6023      	strge	r3, [r4, #0]
 8007cd6:	6022      	strlt	r2, [r4, #0]
 8007cd8:	4b9b      	ldr	r3, [pc, #620]	; (8007f48 <_dtoa_r+0x2e0>)
 8007cda:	9c03      	ldr	r4, [sp, #12]
 8007cdc:	43a3      	bics	r3, r4
 8007cde:	d11c      	bne.n	8007d1a <_dtoa_r+0xb2>
 8007ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007cec:	ea53 0308 	orrs.w	r3, r3, r8
 8007cf0:	f000 84fd 	beq.w	80086ee <_dtoa_r+0xa86>
 8007cf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cf6:	b963      	cbnz	r3, 8007d12 <_dtoa_r+0xaa>
 8007cf8:	4b94      	ldr	r3, [pc, #592]	; (8007f4c <_dtoa_r+0x2e4>)
 8007cfa:	e01f      	b.n	8007d3c <_dtoa_r+0xd4>
 8007cfc:	4b94      	ldr	r3, [pc, #592]	; (8007f50 <_dtoa_r+0x2e8>)
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	3308      	adds	r3, #8
 8007d02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	9801      	ldr	r0, [sp, #4]
 8007d08:	b011      	add	sp, #68	; 0x44
 8007d0a:	ecbd 8b02 	vpop	{d8}
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	4b8e      	ldr	r3, [pc, #568]	; (8007f4c <_dtoa_r+0x2e4>)
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	3303      	adds	r3, #3
 8007d18:	e7f3      	b.n	8007d02 <_dtoa_r+0x9a>
 8007d1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007d1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d26:	d10b      	bne.n	8007d40 <_dtoa_r+0xd8>
 8007d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 84d9 	beq.w	80086e8 <_dtoa_r+0xa80>
 8007d36:	4887      	ldr	r0, [pc, #540]	; (8007f54 <_dtoa_r+0x2ec>)
 8007d38:	6018      	str	r0, [r3, #0]
 8007d3a:	1e43      	subs	r3, r0, #1
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	e7e2      	b.n	8007d06 <_dtoa_r+0x9e>
 8007d40:	a90f      	add	r1, sp, #60	; 0x3c
 8007d42:	aa0e      	add	r2, sp, #56	; 0x38
 8007d44:	4630      	mov	r0, r6
 8007d46:	eeb0 0b48 	vmov.f64	d0, d8
 8007d4a:	f001 fd6f 	bl	800982c <__d2b>
 8007d4e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007d52:	4605      	mov	r5, r0
 8007d54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007d56:	2900      	cmp	r1, #0
 8007d58:	d046      	beq.n	8007de8 <_dtoa_r+0x180>
 8007d5a:	ee18 4a90 	vmov	r4, s17
 8007d5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d62:	ec53 2b18 	vmov	r2, r3, d8
 8007d66:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007d6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007d72:	2400      	movs	r4, #0
 8007d74:	ec43 2b16 	vmov	d6, r2, r3
 8007d78:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007d7c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007f28 <_dtoa_r+0x2c0>
 8007d80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d84:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007f30 <_dtoa_r+0x2c8>
 8007d88:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007d8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007f38 <_dtoa_r+0x2d0>
 8007d90:	ee07 1a90 	vmov	s15, r1
 8007d94:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007d98:	eeb0 7b46 	vmov.f64	d7, d6
 8007d9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007da0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007da4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dac:	ee16 ba90 	vmov	fp, s13
 8007db0:	940a      	str	r4, [sp, #40]	; 0x28
 8007db2:	d508      	bpl.n	8007dc6 <_dtoa_r+0x15e>
 8007db4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007db8:	eeb4 6b47 	vcmp.f64	d6, d7
 8007dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc0:	bf18      	it	ne
 8007dc2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007dc6:	f1bb 0f16 	cmp.w	fp, #22
 8007dca:	d82f      	bhi.n	8007e2c <_dtoa_r+0x1c4>
 8007dcc:	4b62      	ldr	r3, [pc, #392]	; (8007f58 <_dtoa_r+0x2f0>)
 8007dce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dd2:	ed93 7b00 	vldr	d7, [r3]
 8007dd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dde:	d501      	bpl.n	8007de4 <_dtoa_r+0x17c>
 8007de0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007de4:	2300      	movs	r3, #0
 8007de6:	e022      	b.n	8007e2e <_dtoa_r+0x1c6>
 8007de8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007dea:	4401      	add	r1, r0
 8007dec:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	bfc1      	itttt	gt
 8007df4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007df8:	fa04 f303 	lslgt.w	r3, r4, r3
 8007dfc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007e00:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007e04:	bfd6      	itet	le
 8007e06:	f1c3 0320 	rsble	r3, r3, #32
 8007e0a:	ea43 0808 	orrgt.w	r8, r3, r8
 8007e0e:	fa08 f803 	lslle.w	r8, r8, r3
 8007e12:	ee07 8a90 	vmov	s15, r8
 8007e16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e1a:	3901      	subs	r1, #1
 8007e1c:	ee17 4a90 	vmov	r4, s15
 8007e20:	ec53 2b17 	vmov	r2, r3, d7
 8007e24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007e28:	2401      	movs	r4, #1
 8007e2a:	e7a3      	b.n	8007d74 <_dtoa_r+0x10c>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e30:	1a43      	subs	r3, r0, r1
 8007e32:	1e5a      	subs	r2, r3, #1
 8007e34:	bf45      	ittet	mi
 8007e36:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e3a:	9304      	strmi	r3, [sp, #16]
 8007e3c:	2300      	movpl	r3, #0
 8007e3e:	2300      	movmi	r3, #0
 8007e40:	9205      	str	r2, [sp, #20]
 8007e42:	bf54      	ite	pl
 8007e44:	9304      	strpl	r3, [sp, #16]
 8007e46:	9305      	strmi	r3, [sp, #20]
 8007e48:	f1bb 0f00 	cmp.w	fp, #0
 8007e4c:	db18      	blt.n	8007e80 <_dtoa_r+0x218>
 8007e4e:	9b05      	ldr	r3, [sp, #20]
 8007e50:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007e54:	445b      	add	r3, fp
 8007e56:	9305      	str	r3, [sp, #20]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9a06      	ldr	r2, [sp, #24]
 8007e5c:	2a09      	cmp	r2, #9
 8007e5e:	d849      	bhi.n	8007ef4 <_dtoa_r+0x28c>
 8007e60:	2a05      	cmp	r2, #5
 8007e62:	bfc4      	itt	gt
 8007e64:	3a04      	subgt	r2, #4
 8007e66:	9206      	strgt	r2, [sp, #24]
 8007e68:	9a06      	ldr	r2, [sp, #24]
 8007e6a:	f1a2 0202 	sub.w	r2, r2, #2
 8007e6e:	bfcc      	ite	gt
 8007e70:	2400      	movgt	r4, #0
 8007e72:	2401      	movle	r4, #1
 8007e74:	2a03      	cmp	r2, #3
 8007e76:	d848      	bhi.n	8007f0a <_dtoa_r+0x2a2>
 8007e78:	e8df f002 	tbb	[pc, r2]
 8007e7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	2200      	movs	r2, #0
 8007e84:	eba3 030b 	sub.w	r3, r3, fp
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8c:	f1cb 0300 	rsb	r3, fp, #0
 8007e90:	e7e3      	b.n	8007e5a <_dtoa_r+0x1f2>
 8007e92:	2200      	movs	r2, #0
 8007e94:	9207      	str	r2, [sp, #28]
 8007e96:	9a08      	ldr	r2, [sp, #32]
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	dc39      	bgt.n	8007f10 <_dtoa_r+0x2a8>
 8007e9c:	f04f 0a01 	mov.w	sl, #1
 8007ea0:	46d1      	mov	r9, sl
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	f8cd a020 	str.w	sl, [sp, #32]
 8007ea8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6079      	str	r1, [r7, #4]
 8007eae:	2004      	movs	r0, #4
 8007eb0:	f100 0c14 	add.w	ip, r0, #20
 8007eb4:	4594      	cmp	ip, r2
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	d92f      	bls.n	8007f1a <_dtoa_r+0x2b2>
 8007eba:	4630      	mov	r0, r6
 8007ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ebe:	f001 f8c7 	bl	8009050 <_Balloc>
 8007ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec4:	9001      	str	r0, [sp, #4]
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d149      	bne.n	8007f60 <_dtoa_r+0x2f8>
 8007ecc:	4b23      	ldr	r3, [pc, #140]	; (8007f5c <_dtoa_r+0x2f4>)
 8007ece:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ed2:	e6e1      	b.n	8007c98 <_dtoa_r+0x30>
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	e7dd      	b.n	8007e94 <_dtoa_r+0x22c>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	9207      	str	r2, [sp, #28]
 8007edc:	9a08      	ldr	r2, [sp, #32]
 8007ede:	eb0b 0a02 	add.w	sl, fp, r2
 8007ee2:	f10a 0901 	add.w	r9, sl, #1
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	2a01      	cmp	r2, #1
 8007eea:	bfb8      	it	lt
 8007eec:	2201      	movlt	r2, #1
 8007eee:	e7db      	b.n	8007ea8 <_dtoa_r+0x240>
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	e7f2      	b.n	8007eda <_dtoa_r+0x272>
 8007ef4:	2401      	movs	r4, #1
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007efc:	f04f 3aff 	mov.w	sl, #4294967295
 8007f00:	2100      	movs	r1, #0
 8007f02:	46d1      	mov	r9, sl
 8007f04:	2212      	movs	r2, #18
 8007f06:	9108      	str	r1, [sp, #32]
 8007f08:	e7ce      	b.n	8007ea8 <_dtoa_r+0x240>
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	9207      	str	r2, [sp, #28]
 8007f0e:	e7f5      	b.n	8007efc <_dtoa_r+0x294>
 8007f10:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f14:	46d1      	mov	r9, sl
 8007f16:	4652      	mov	r2, sl
 8007f18:	e7c6      	b.n	8007ea8 <_dtoa_r+0x240>
 8007f1a:	3101      	adds	r1, #1
 8007f1c:	6079      	str	r1, [r7, #4]
 8007f1e:	0040      	lsls	r0, r0, #1
 8007f20:	e7c6      	b.n	8007eb0 <_dtoa_r+0x248>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	636f4361 	.word	0x636f4361
 8007f2c:	3fd287a7 	.word	0x3fd287a7
 8007f30:	8b60c8b3 	.word	0x8b60c8b3
 8007f34:	3fc68a28 	.word	0x3fc68a28
 8007f38:	509f79fb 	.word	0x509f79fb
 8007f3c:	3fd34413 	.word	0x3fd34413
 8007f40:	0800aade 	.word	0x0800aade
 8007f44:	0800aaf5 	.word	0x0800aaf5
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	0800aada 	.word	0x0800aada
 8007f50:	0800aad1 	.word	0x0800aad1
 8007f54:	0800a951 	.word	0x0800a951
 8007f58:	0800acc8 	.word	0x0800acc8
 8007f5c:	0800ab50 	.word	0x0800ab50
 8007f60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007f62:	9901      	ldr	r1, [sp, #4]
 8007f64:	6011      	str	r1, [r2, #0]
 8007f66:	f1b9 0f0e 	cmp.w	r9, #14
 8007f6a:	d86c      	bhi.n	8008046 <_dtoa_r+0x3de>
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d06a      	beq.n	8008046 <_dtoa_r+0x3de>
 8007f70:	f1bb 0f00 	cmp.w	fp, #0
 8007f74:	f340 80a0 	ble.w	80080b8 <_dtoa_r+0x450>
 8007f78:	49c1      	ldr	r1, [pc, #772]	; (8008280 <_dtoa_r+0x618>)
 8007f7a:	f00b 020f 	and.w	r2, fp, #15
 8007f7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007f82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007f86:	ed92 7b00 	vldr	d7, [r2]
 8007f8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007f8e:	f000 8087 	beq.w	80080a0 <_dtoa_r+0x438>
 8007f92:	4abc      	ldr	r2, [pc, #752]	; (8008284 <_dtoa_r+0x61c>)
 8007f94:	ed92 6b08 	vldr	d6, [r2, #32]
 8007f98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007f9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007fa0:	f001 010f 	and.w	r1, r1, #15
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	48b7      	ldr	r0, [pc, #732]	; (8008284 <_dtoa_r+0x61c>)
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	d17b      	bne.n	80080a4 <_dtoa_r+0x43c>
 8007fac:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007fb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007fb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	f000 80a2 	beq.w	8008104 <_dtoa_r+0x49c>
 8007fc0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007fc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd0:	f140 8098 	bpl.w	8008104 <_dtoa_r+0x49c>
 8007fd4:	f1b9 0f00 	cmp.w	r9, #0
 8007fd8:	f000 8094 	beq.w	8008104 <_dtoa_r+0x49c>
 8007fdc:	f1ba 0f00 	cmp.w	sl, #0
 8007fe0:	dd2f      	ble.n	8008042 <_dtoa_r+0x3da>
 8007fe2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007fe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fee:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	4650      	mov	r0, sl
 8007ff6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ffa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007ffe:	ee07 2a90 	vmov	s15, r2
 8008002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008006:	eea7 5b06 	vfma.f64	d5, d7, d6
 800800a:	ee15 4a90 	vmov	r4, s11
 800800e:	ec52 1b15 	vmov	r1, r2, d5
 8008012:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008016:	2800      	cmp	r0, #0
 8008018:	d177      	bne.n	800810a <_dtoa_r+0x4a2>
 800801a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800801e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008022:	ec42 1b17 	vmov	d7, r1, r2
 8008026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802e:	f300 8263 	bgt.w	80084f8 <_dtoa_r+0x890>
 8008032:	eeb1 7b47 	vneg.f64	d7, d7
 8008036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803e:	f100 8258 	bmi.w	80084f2 <_dtoa_r+0x88a>
 8008042:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008048:	2a00      	cmp	r2, #0
 800804a:	f2c0 811d 	blt.w	8008288 <_dtoa_r+0x620>
 800804e:	f1bb 0f0e 	cmp.w	fp, #14
 8008052:	f300 8119 	bgt.w	8008288 <_dtoa_r+0x620>
 8008056:	4b8a      	ldr	r3, [pc, #552]	; (8008280 <_dtoa_r+0x618>)
 8008058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800805c:	ed93 6b00 	vldr	d6, [r3]
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f280 80b7 	bge.w	80081d6 <_dtoa_r+0x56e>
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	f300 80b3 	bgt.w	80081d6 <_dtoa_r+0x56e>
 8008070:	f040 823f 	bne.w	80084f2 <_dtoa_r+0x88a>
 8008074:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008078:	ee26 6b07 	vmul.f64	d6, d6, d7
 800807c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008080:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008088:	464c      	mov	r4, r9
 800808a:	464f      	mov	r7, r9
 800808c:	f280 8215 	bge.w	80084ba <_dtoa_r+0x852>
 8008090:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008094:	2331      	movs	r3, #49	; 0x31
 8008096:	f808 3b01 	strb.w	r3, [r8], #1
 800809a:	f10b 0b01 	add.w	fp, fp, #1
 800809e:	e211      	b.n	80084c4 <_dtoa_r+0x85c>
 80080a0:	2202      	movs	r2, #2
 80080a2:	e780      	b.n	8007fa6 <_dtoa_r+0x33e>
 80080a4:	07cc      	lsls	r4, r1, #31
 80080a6:	d504      	bpl.n	80080b2 <_dtoa_r+0x44a>
 80080a8:	ed90 6b00 	vldr	d6, [r0]
 80080ac:	3201      	adds	r2, #1
 80080ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080b2:	1049      	asrs	r1, r1, #1
 80080b4:	3008      	adds	r0, #8
 80080b6:	e777      	b.n	8007fa8 <_dtoa_r+0x340>
 80080b8:	d022      	beq.n	8008100 <_dtoa_r+0x498>
 80080ba:	f1cb 0100 	rsb	r1, fp, #0
 80080be:	4a70      	ldr	r2, [pc, #448]	; (8008280 <_dtoa_r+0x618>)
 80080c0:	f001 000f 	and.w	r0, r1, #15
 80080c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80080c8:	ed92 7b00 	vldr	d7, [r2]
 80080cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80080d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080d4:	486b      	ldr	r0, [pc, #428]	; (8008284 <_dtoa_r+0x61c>)
 80080d6:	1109      	asrs	r1, r1, #4
 80080d8:	2400      	movs	r4, #0
 80080da:	2202      	movs	r2, #2
 80080dc:	b929      	cbnz	r1, 80080ea <_dtoa_r+0x482>
 80080de:	2c00      	cmp	r4, #0
 80080e0:	f43f af6a 	beq.w	8007fb8 <_dtoa_r+0x350>
 80080e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080e8:	e766      	b.n	8007fb8 <_dtoa_r+0x350>
 80080ea:	07cf      	lsls	r7, r1, #31
 80080ec:	d505      	bpl.n	80080fa <_dtoa_r+0x492>
 80080ee:	ed90 6b00 	vldr	d6, [r0]
 80080f2:	3201      	adds	r2, #1
 80080f4:	2401      	movs	r4, #1
 80080f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080fa:	1049      	asrs	r1, r1, #1
 80080fc:	3008      	adds	r0, #8
 80080fe:	e7ed      	b.n	80080dc <_dtoa_r+0x474>
 8008100:	2202      	movs	r2, #2
 8008102:	e759      	b.n	8007fb8 <_dtoa_r+0x350>
 8008104:	465f      	mov	r7, fp
 8008106:	4648      	mov	r0, r9
 8008108:	e775      	b.n	8007ff6 <_dtoa_r+0x38e>
 800810a:	ec42 1b17 	vmov	d7, r1, r2
 800810e:	4a5c      	ldr	r2, [pc, #368]	; (8008280 <_dtoa_r+0x618>)
 8008110:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008114:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008118:	9a01      	ldr	r2, [sp, #4]
 800811a:	1814      	adds	r4, r2, r0
 800811c:	9a07      	ldr	r2, [sp, #28]
 800811e:	b352      	cbz	r2, 8008176 <_dtoa_r+0x50e>
 8008120:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008124:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008128:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800812c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008130:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008134:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008138:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800813c:	ee14 2a90 	vmov	r2, s9
 8008140:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008144:	3230      	adds	r2, #48	; 0x30
 8008146:	ee36 6b45 	vsub.f64	d6, d6, d5
 800814a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008152:	f808 2b01 	strb.w	r2, [r8], #1
 8008156:	d439      	bmi.n	80081cc <_dtoa_r+0x564>
 8008158:	ee32 5b46 	vsub.f64	d5, d2, d6
 800815c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	d472      	bmi.n	800824c <_dtoa_r+0x5e4>
 8008166:	45a0      	cmp	r8, r4
 8008168:	f43f af6b 	beq.w	8008042 <_dtoa_r+0x3da>
 800816c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008170:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008174:	e7e0      	b.n	8008138 <_dtoa_r+0x4d0>
 8008176:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800817a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800817e:	4621      	mov	r1, r4
 8008180:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008184:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008188:	ee14 2a90 	vmov	r2, s9
 800818c:	3230      	adds	r2, #48	; 0x30
 800818e:	f808 2b01 	strb.w	r2, [r8], #1
 8008192:	45a0      	cmp	r8, r4
 8008194:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008198:	ee36 6b45 	vsub.f64	d6, d6, d5
 800819c:	d118      	bne.n	80081d0 <_dtoa_r+0x568>
 800819e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80081a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80081a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80081aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ae:	dc4d      	bgt.n	800824c <_dtoa_r+0x5e4>
 80081b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80081b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081bc:	f57f af41 	bpl.w	8008042 <_dtoa_r+0x3da>
 80081c0:	4688      	mov	r8, r1
 80081c2:	3901      	subs	r1, #1
 80081c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80081c8:	2b30      	cmp	r3, #48	; 0x30
 80081ca:	d0f9      	beq.n	80081c0 <_dtoa_r+0x558>
 80081cc:	46bb      	mov	fp, r7
 80081ce:	e02a      	b.n	8008226 <_dtoa_r+0x5be>
 80081d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80081d4:	e7d6      	b.n	8008184 <_dtoa_r+0x51c>
 80081d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80081de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80081e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80081ea:	ee15 3a10 	vmov	r3, s10
 80081ee:	3330      	adds	r3, #48	; 0x30
 80081f0:	f808 3b01 	strb.w	r3, [r8], #1
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	eba8 0303 	sub.w	r3, r8, r3
 80081fa:	4599      	cmp	r9, r3
 80081fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008200:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008204:	d133      	bne.n	800826e <_dtoa_r+0x606>
 8008206:	ee37 7b07 	vadd.f64	d7, d7, d7
 800820a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800820e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008212:	dc1a      	bgt.n	800824a <_dtoa_r+0x5e2>
 8008214:	eeb4 7b46 	vcmp.f64	d7, d6
 8008218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821c:	d103      	bne.n	8008226 <_dtoa_r+0x5be>
 800821e:	ee15 3a10 	vmov	r3, s10
 8008222:	07d9      	lsls	r1, r3, #31
 8008224:	d411      	bmi.n	800824a <_dtoa_r+0x5e2>
 8008226:	4629      	mov	r1, r5
 8008228:	4630      	mov	r0, r6
 800822a:	f000 ff51 	bl	80090d0 <_Bfree>
 800822e:	2300      	movs	r3, #0
 8008230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008232:	f888 3000 	strb.w	r3, [r8]
 8008236:	f10b 0301 	add.w	r3, fp, #1
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800823e:	2b00      	cmp	r3, #0
 8008240:	f43f ad61 	beq.w	8007d06 <_dtoa_r+0x9e>
 8008244:	f8c3 8000 	str.w	r8, [r3]
 8008248:	e55d      	b.n	8007d06 <_dtoa_r+0x9e>
 800824a:	465f      	mov	r7, fp
 800824c:	4643      	mov	r3, r8
 800824e:	4698      	mov	r8, r3
 8008250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008254:	2a39      	cmp	r2, #57	; 0x39
 8008256:	d106      	bne.n	8008266 <_dtoa_r+0x5fe>
 8008258:	9a01      	ldr	r2, [sp, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	d1f7      	bne.n	800824e <_dtoa_r+0x5e6>
 800825e:	9901      	ldr	r1, [sp, #4]
 8008260:	2230      	movs	r2, #48	; 0x30
 8008262:	3701      	adds	r7, #1
 8008264:	700a      	strb	r2, [r1, #0]
 8008266:	781a      	ldrb	r2, [r3, #0]
 8008268:	3201      	adds	r2, #1
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e7ae      	b.n	80081cc <_dtoa_r+0x564>
 800826e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827a:	d1b2      	bne.n	80081e2 <_dtoa_r+0x57a>
 800827c:	e7d3      	b.n	8008226 <_dtoa_r+0x5be>
 800827e:	bf00      	nop
 8008280:	0800acc8 	.word	0x0800acc8
 8008284:	0800aca0 	.word	0x0800aca0
 8008288:	9907      	ldr	r1, [sp, #28]
 800828a:	2900      	cmp	r1, #0
 800828c:	f000 80d0 	beq.w	8008430 <_dtoa_r+0x7c8>
 8008290:	9906      	ldr	r1, [sp, #24]
 8008292:	2901      	cmp	r1, #1
 8008294:	f300 80b4 	bgt.w	8008400 <_dtoa_r+0x798>
 8008298:	990a      	ldr	r1, [sp, #40]	; 0x28
 800829a:	2900      	cmp	r1, #0
 800829c:	f000 80ac 	beq.w	80083f8 <_dtoa_r+0x790>
 80082a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80082a8:	461c      	mov	r4, r3
 80082aa:	930a      	str	r3, [sp, #40]	; 0x28
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	4413      	add	r3, r2
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	2101      	movs	r1, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	4630      	mov	r0, r6
 80082ba:	9305      	str	r3, [sp, #20]
 80082bc:	f001 f80a 	bl	80092d4 <__i2b>
 80082c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c2:	4607      	mov	r7, r0
 80082c4:	f1b8 0f00 	cmp.w	r8, #0
 80082c8:	dd0d      	ble.n	80082e6 <_dtoa_r+0x67e>
 80082ca:	9a05      	ldr	r2, [sp, #20]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	dd0a      	ble.n	80082e6 <_dtoa_r+0x67e>
 80082d0:	4542      	cmp	r2, r8
 80082d2:	9904      	ldr	r1, [sp, #16]
 80082d4:	bfa8      	it	ge
 80082d6:	4642      	movge	r2, r8
 80082d8:	1a89      	subs	r1, r1, r2
 80082da:	9104      	str	r1, [sp, #16]
 80082dc:	9905      	ldr	r1, [sp, #20]
 80082de:	eba8 0802 	sub.w	r8, r8, r2
 80082e2:	1a8a      	subs	r2, r1, r2
 80082e4:	9205      	str	r2, [sp, #20]
 80082e6:	b303      	cbz	r3, 800832a <_dtoa_r+0x6c2>
 80082e8:	9a07      	ldr	r2, [sp, #28]
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	f000 80a5 	beq.w	800843a <_dtoa_r+0x7d2>
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	dd13      	ble.n	800831c <_dtoa_r+0x6b4>
 80082f4:	4639      	mov	r1, r7
 80082f6:	4622      	mov	r2, r4
 80082f8:	4630      	mov	r0, r6
 80082fa:	930d      	str	r3, [sp, #52]	; 0x34
 80082fc:	f001 f8aa 	bl	8009454 <__pow5mult>
 8008300:	462a      	mov	r2, r5
 8008302:	4601      	mov	r1, r0
 8008304:	4607      	mov	r7, r0
 8008306:	4630      	mov	r0, r6
 8008308:	f000 fffa 	bl	8009300 <__multiply>
 800830c:	4629      	mov	r1, r5
 800830e:	900a      	str	r0, [sp, #40]	; 0x28
 8008310:	4630      	mov	r0, r6
 8008312:	f000 fedd 	bl	80090d0 <_Bfree>
 8008316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831a:	4615      	mov	r5, r2
 800831c:	1b1a      	subs	r2, r3, r4
 800831e:	d004      	beq.n	800832a <_dtoa_r+0x6c2>
 8008320:	4629      	mov	r1, r5
 8008322:	4630      	mov	r0, r6
 8008324:	f001 f896 	bl	8009454 <__pow5mult>
 8008328:	4605      	mov	r5, r0
 800832a:	2101      	movs	r1, #1
 800832c:	4630      	mov	r0, r6
 800832e:	f000 ffd1 	bl	80092d4 <__i2b>
 8008332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	4604      	mov	r4, r0
 8008338:	f340 8081 	ble.w	800843e <_dtoa_r+0x7d6>
 800833c:	461a      	mov	r2, r3
 800833e:	4601      	mov	r1, r0
 8008340:	4630      	mov	r0, r6
 8008342:	f001 f887 	bl	8009454 <__pow5mult>
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	2b01      	cmp	r3, #1
 800834a:	4604      	mov	r4, r0
 800834c:	dd7a      	ble.n	8008444 <_dtoa_r+0x7dc>
 800834e:	2300      	movs	r3, #0
 8008350:	930a      	str	r3, [sp, #40]	; 0x28
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008358:	6910      	ldr	r0, [r2, #16]
 800835a:	f000 ff6b 	bl	8009234 <__hi0bits>
 800835e:	f1c0 0020 	rsb	r0, r0, #32
 8008362:	9b05      	ldr	r3, [sp, #20]
 8008364:	4418      	add	r0, r3
 8008366:	f010 001f 	ands.w	r0, r0, #31
 800836a:	f000 808c 	beq.w	8008486 <_dtoa_r+0x81e>
 800836e:	f1c0 0220 	rsb	r2, r0, #32
 8008372:	2a04      	cmp	r2, #4
 8008374:	f340 8085 	ble.w	8008482 <_dtoa_r+0x81a>
 8008378:	f1c0 001c 	rsb	r0, r0, #28
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	4403      	add	r3, r0
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	4403      	add	r3, r0
 8008386:	4480      	add	r8, r0
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	9b04      	ldr	r3, [sp, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd05      	ble.n	800839c <_dtoa_r+0x734>
 8008390:	4629      	mov	r1, r5
 8008392:	461a      	mov	r2, r3
 8008394:	4630      	mov	r0, r6
 8008396:	f001 f8b7 	bl	8009508 <__lshift>
 800839a:	4605      	mov	r5, r0
 800839c:	9b05      	ldr	r3, [sp, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	dd05      	ble.n	80083ae <_dtoa_r+0x746>
 80083a2:	4621      	mov	r1, r4
 80083a4:	461a      	mov	r2, r3
 80083a6:	4630      	mov	r0, r6
 80083a8:	f001 f8ae 	bl	8009508 <__lshift>
 80083ac:	4604      	mov	r4, r0
 80083ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d06a      	beq.n	800848a <_dtoa_r+0x822>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	f001 f916 	bl	80095e8 <__mcmp>
 80083bc:	2800      	cmp	r0, #0
 80083be:	da64      	bge.n	800848a <_dtoa_r+0x822>
 80083c0:	2300      	movs	r3, #0
 80083c2:	4629      	mov	r1, r5
 80083c4:	220a      	movs	r2, #10
 80083c6:	4630      	mov	r0, r6
 80083c8:	f000 fea4 	bl	8009114 <__multadd>
 80083cc:	9b07      	ldr	r3, [sp, #28]
 80083ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083d2:	4605      	mov	r5, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8191 	beq.w	80086fc <_dtoa_r+0xa94>
 80083da:	4639      	mov	r1, r7
 80083dc:	2300      	movs	r3, #0
 80083de:	220a      	movs	r2, #10
 80083e0:	4630      	mov	r0, r6
 80083e2:	f000 fe97 	bl	8009114 <__multadd>
 80083e6:	f1ba 0f00 	cmp.w	sl, #0
 80083ea:	4607      	mov	r7, r0
 80083ec:	f300 808d 	bgt.w	800850a <_dtoa_r+0x8a2>
 80083f0:	9b06      	ldr	r3, [sp, #24]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	dc50      	bgt.n	8008498 <_dtoa_r+0x830>
 80083f6:	e088      	b.n	800850a <_dtoa_r+0x8a2>
 80083f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083fe:	e751      	b.n	80082a4 <_dtoa_r+0x63c>
 8008400:	f109 34ff 	add.w	r4, r9, #4294967295
 8008404:	42a3      	cmp	r3, r4
 8008406:	bfbf      	itttt	lt
 8008408:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800840a:	1ae3      	sublt	r3, r4, r3
 800840c:	18d2      	addlt	r2, r2, r3
 800840e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008410:	bfb6      	itet	lt
 8008412:	4623      	movlt	r3, r4
 8008414:	1b1c      	subge	r4, r3, r4
 8008416:	2400      	movlt	r4, #0
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	bfb5      	itete	lt
 800841e:	9a04      	ldrlt	r2, [sp, #16]
 8008420:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008424:	eba2 0809 	sublt.w	r8, r2, r9
 8008428:	464a      	movge	r2, r9
 800842a:	bfb8      	it	lt
 800842c:	2200      	movlt	r2, #0
 800842e:	e73c      	b.n	80082aa <_dtoa_r+0x642>
 8008430:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008434:	9f07      	ldr	r7, [sp, #28]
 8008436:	461c      	mov	r4, r3
 8008438:	e744      	b.n	80082c4 <_dtoa_r+0x65c>
 800843a:	461a      	mov	r2, r3
 800843c:	e770      	b.n	8008320 <_dtoa_r+0x6b8>
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	2b01      	cmp	r3, #1
 8008442:	dc18      	bgt.n	8008476 <_dtoa_r+0x80e>
 8008444:	9b02      	ldr	r3, [sp, #8]
 8008446:	b9b3      	cbnz	r3, 8008476 <_dtoa_r+0x80e>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800844e:	b9a2      	cbnz	r2, 800847a <_dtoa_r+0x812>
 8008450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008454:	0d12      	lsrs	r2, r2, #20
 8008456:	0512      	lsls	r2, r2, #20
 8008458:	b18a      	cbz	r2, 800847e <_dtoa_r+0x816>
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	3301      	adds	r3, #1
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	9b05      	ldr	r3, [sp, #20]
 8008462:	3301      	adds	r3, #1
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	2301      	movs	r3, #1
 8008468:	930a      	str	r3, [sp, #40]	; 0x28
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	f47f af70 	bne.w	8008352 <_dtoa_r+0x6ea>
 8008472:	2001      	movs	r0, #1
 8008474:	e775      	b.n	8008362 <_dtoa_r+0x6fa>
 8008476:	2300      	movs	r3, #0
 8008478:	e7f6      	b.n	8008468 <_dtoa_r+0x800>
 800847a:	9b02      	ldr	r3, [sp, #8]
 800847c:	e7f4      	b.n	8008468 <_dtoa_r+0x800>
 800847e:	920a      	str	r2, [sp, #40]	; 0x28
 8008480:	e7f3      	b.n	800846a <_dtoa_r+0x802>
 8008482:	d082      	beq.n	800838a <_dtoa_r+0x722>
 8008484:	4610      	mov	r0, r2
 8008486:	301c      	adds	r0, #28
 8008488:	e778      	b.n	800837c <_dtoa_r+0x714>
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	dc37      	bgt.n	8008500 <_dtoa_r+0x898>
 8008490:	9b06      	ldr	r3, [sp, #24]
 8008492:	2b02      	cmp	r3, #2
 8008494:	dd34      	ble.n	8008500 <_dtoa_r+0x898>
 8008496:	46ca      	mov	sl, r9
 8008498:	f1ba 0f00 	cmp.w	sl, #0
 800849c:	d10d      	bne.n	80084ba <_dtoa_r+0x852>
 800849e:	4621      	mov	r1, r4
 80084a0:	4653      	mov	r3, sl
 80084a2:	2205      	movs	r2, #5
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 fe35 	bl	8009114 <__multadd>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4604      	mov	r4, r0
 80084ae:	4628      	mov	r0, r5
 80084b0:	f001 f89a 	bl	80095e8 <__mcmp>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f73f adeb 	bgt.w	8008090 <_dtoa_r+0x428>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084c0:	ea6f 0b03 	mvn.w	fp, r3
 80084c4:	f04f 0900 	mov.w	r9, #0
 80084c8:	4621      	mov	r1, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f000 fe00 	bl	80090d0 <_Bfree>
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	f43f aea8 	beq.w	8008226 <_dtoa_r+0x5be>
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	d005      	beq.n	80084e8 <_dtoa_r+0x880>
 80084dc:	45b9      	cmp	r9, r7
 80084de:	d003      	beq.n	80084e8 <_dtoa_r+0x880>
 80084e0:	4649      	mov	r1, r9
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 fdf4 	bl	80090d0 <_Bfree>
 80084e8:	4639      	mov	r1, r7
 80084ea:	4630      	mov	r0, r6
 80084ec:	f000 fdf0 	bl	80090d0 <_Bfree>
 80084f0:	e699      	b.n	8008226 <_dtoa_r+0x5be>
 80084f2:	2400      	movs	r4, #0
 80084f4:	4627      	mov	r7, r4
 80084f6:	e7e0      	b.n	80084ba <_dtoa_r+0x852>
 80084f8:	46bb      	mov	fp, r7
 80084fa:	4604      	mov	r4, r0
 80084fc:	4607      	mov	r7, r0
 80084fe:	e5c7      	b.n	8008090 <_dtoa_r+0x428>
 8008500:	9b07      	ldr	r3, [sp, #28]
 8008502:	46ca      	mov	sl, r9
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8100 	beq.w	800870a <_dtoa_r+0xaa2>
 800850a:	f1b8 0f00 	cmp.w	r8, #0
 800850e:	dd05      	ble.n	800851c <_dtoa_r+0x8b4>
 8008510:	4639      	mov	r1, r7
 8008512:	4642      	mov	r2, r8
 8008514:	4630      	mov	r0, r6
 8008516:	f000 fff7 	bl	8009508 <__lshift>
 800851a:	4607      	mov	r7, r0
 800851c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851e:	2b00      	cmp	r3, #0
 8008520:	d05d      	beq.n	80085de <_dtoa_r+0x976>
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	4630      	mov	r0, r6
 8008526:	f000 fd93 	bl	8009050 <_Balloc>
 800852a:	4680      	mov	r8, r0
 800852c:	b928      	cbnz	r0, 800853a <_dtoa_r+0x8d2>
 800852e:	4b82      	ldr	r3, [pc, #520]	; (8008738 <_dtoa_r+0xad0>)
 8008530:	4602      	mov	r2, r0
 8008532:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008536:	f7ff bbaf 	b.w	8007c98 <_dtoa_r+0x30>
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	3202      	adds	r2, #2
 800853e:	0092      	lsls	r2, r2, #2
 8008540:	f107 010c 	add.w	r1, r7, #12
 8008544:	300c      	adds	r0, #12
 8008546:	f7fd fe0b 	bl	8006160 <memcpy>
 800854a:	2201      	movs	r2, #1
 800854c:	4641      	mov	r1, r8
 800854e:	4630      	mov	r0, r6
 8008550:	f000 ffda 	bl	8009508 <__lshift>
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	3301      	adds	r3, #1
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	9b01      	ldr	r3, [sp, #4]
 800855c:	4453      	add	r3, sl
 800855e:	9308      	str	r3, [sp, #32]
 8008560:	9b02      	ldr	r3, [sp, #8]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	46b9      	mov	r9, r7
 8008568:	9307      	str	r3, [sp, #28]
 800856a:	4607      	mov	r7, r0
 800856c:	9b04      	ldr	r3, [sp, #16]
 800856e:	4621      	mov	r1, r4
 8008570:	3b01      	subs	r3, #1
 8008572:	4628      	mov	r0, r5
 8008574:	9302      	str	r3, [sp, #8]
 8008576:	f7ff faeb 	bl	8007b50 <quorem>
 800857a:	4603      	mov	r3, r0
 800857c:	3330      	adds	r3, #48	; 0x30
 800857e:	9005      	str	r0, [sp, #20]
 8008580:	4649      	mov	r1, r9
 8008582:	4628      	mov	r0, r5
 8008584:	9309      	str	r3, [sp, #36]	; 0x24
 8008586:	f001 f82f 	bl	80095e8 <__mcmp>
 800858a:	463a      	mov	r2, r7
 800858c:	4682      	mov	sl, r0
 800858e:	4621      	mov	r1, r4
 8008590:	4630      	mov	r0, r6
 8008592:	f001 f845 	bl	8009620 <__mdiff>
 8008596:	68c2      	ldr	r2, [r0, #12]
 8008598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859a:	4680      	mov	r8, r0
 800859c:	bb0a      	cbnz	r2, 80085e2 <_dtoa_r+0x97a>
 800859e:	4601      	mov	r1, r0
 80085a0:	4628      	mov	r0, r5
 80085a2:	f001 f821 	bl	80095e8 <__mcmp>
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	4602      	mov	r2, r0
 80085aa:	4641      	mov	r1, r8
 80085ac:	4630      	mov	r0, r6
 80085ae:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80085b2:	f000 fd8d 	bl	80090d0 <_Bfree>
 80085b6:	9b06      	ldr	r3, [sp, #24]
 80085b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085be:	ea43 0102 	orr.w	r1, r3, r2
 80085c2:	9b07      	ldr	r3, [sp, #28]
 80085c4:	430b      	orrs	r3, r1
 80085c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c8:	d10d      	bne.n	80085e6 <_dtoa_r+0x97e>
 80085ca:	2b39      	cmp	r3, #57	; 0x39
 80085cc:	d029      	beq.n	8008622 <_dtoa_r+0x9ba>
 80085ce:	f1ba 0f00 	cmp.w	sl, #0
 80085d2:	dd01      	ble.n	80085d8 <_dtoa_r+0x970>
 80085d4:	9b05      	ldr	r3, [sp, #20]
 80085d6:	3331      	adds	r3, #49	; 0x31
 80085d8:	9a02      	ldr	r2, [sp, #8]
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	e774      	b.n	80084c8 <_dtoa_r+0x860>
 80085de:	4638      	mov	r0, r7
 80085e0:	e7b8      	b.n	8008554 <_dtoa_r+0x8ec>
 80085e2:	2201      	movs	r2, #1
 80085e4:	e7e1      	b.n	80085aa <_dtoa_r+0x942>
 80085e6:	f1ba 0f00 	cmp.w	sl, #0
 80085ea:	db06      	blt.n	80085fa <_dtoa_r+0x992>
 80085ec:	9906      	ldr	r1, [sp, #24]
 80085ee:	ea41 0a0a 	orr.w	sl, r1, sl
 80085f2:	9907      	ldr	r1, [sp, #28]
 80085f4:	ea5a 0101 	orrs.w	r1, sl, r1
 80085f8:	d120      	bne.n	800863c <_dtoa_r+0x9d4>
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	ddec      	ble.n	80085d8 <_dtoa_r+0x970>
 80085fe:	4629      	mov	r1, r5
 8008600:	2201      	movs	r2, #1
 8008602:	4630      	mov	r0, r6
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	f000 ff7f 	bl	8009508 <__lshift>
 800860a:	4621      	mov	r1, r4
 800860c:	4605      	mov	r5, r0
 800860e:	f000 ffeb 	bl	80095e8 <__mcmp>
 8008612:	2800      	cmp	r0, #0
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	dc02      	bgt.n	800861e <_dtoa_r+0x9b6>
 8008618:	d1de      	bne.n	80085d8 <_dtoa_r+0x970>
 800861a:	07da      	lsls	r2, r3, #31
 800861c:	d5dc      	bpl.n	80085d8 <_dtoa_r+0x970>
 800861e:	2b39      	cmp	r3, #57	; 0x39
 8008620:	d1d8      	bne.n	80085d4 <_dtoa_r+0x96c>
 8008622:	9a02      	ldr	r2, [sp, #8]
 8008624:	2339      	movs	r3, #57	; 0x39
 8008626:	7013      	strb	r3, [r2, #0]
 8008628:	4643      	mov	r3, r8
 800862a:	4698      	mov	r8, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008632:	2a39      	cmp	r2, #57	; 0x39
 8008634:	d051      	beq.n	80086da <_dtoa_r+0xa72>
 8008636:	3201      	adds	r2, #1
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e745      	b.n	80084c8 <_dtoa_r+0x860>
 800863c:	2a00      	cmp	r2, #0
 800863e:	dd03      	ble.n	8008648 <_dtoa_r+0x9e0>
 8008640:	2b39      	cmp	r3, #57	; 0x39
 8008642:	d0ee      	beq.n	8008622 <_dtoa_r+0x9ba>
 8008644:	3301      	adds	r3, #1
 8008646:	e7c7      	b.n	80085d8 <_dtoa_r+0x970>
 8008648:	9a04      	ldr	r2, [sp, #16]
 800864a:	9908      	ldr	r1, [sp, #32]
 800864c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008650:	428a      	cmp	r2, r1
 8008652:	d02b      	beq.n	80086ac <_dtoa_r+0xa44>
 8008654:	4629      	mov	r1, r5
 8008656:	2300      	movs	r3, #0
 8008658:	220a      	movs	r2, #10
 800865a:	4630      	mov	r0, r6
 800865c:	f000 fd5a 	bl	8009114 <__multadd>
 8008660:	45b9      	cmp	r9, r7
 8008662:	4605      	mov	r5, r0
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	f04f 020a 	mov.w	r2, #10
 800866c:	4649      	mov	r1, r9
 800866e:	4630      	mov	r0, r6
 8008670:	d107      	bne.n	8008682 <_dtoa_r+0xa1a>
 8008672:	f000 fd4f 	bl	8009114 <__multadd>
 8008676:	4681      	mov	r9, r0
 8008678:	4607      	mov	r7, r0
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	3301      	adds	r3, #1
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	e774      	b.n	800856c <_dtoa_r+0x904>
 8008682:	f000 fd47 	bl	8009114 <__multadd>
 8008686:	4639      	mov	r1, r7
 8008688:	4681      	mov	r9, r0
 800868a:	2300      	movs	r3, #0
 800868c:	220a      	movs	r2, #10
 800868e:	4630      	mov	r0, r6
 8008690:	f000 fd40 	bl	8009114 <__multadd>
 8008694:	4607      	mov	r7, r0
 8008696:	e7f0      	b.n	800867a <_dtoa_r+0xa12>
 8008698:	f1ba 0f00 	cmp.w	sl, #0
 800869c:	9a01      	ldr	r2, [sp, #4]
 800869e:	bfcc      	ite	gt
 80086a0:	46d0      	movgt	r8, sl
 80086a2:	f04f 0801 	movle.w	r8, #1
 80086a6:	4490      	add	r8, r2
 80086a8:	f04f 0900 	mov.w	r9, #0
 80086ac:	4629      	mov	r1, r5
 80086ae:	2201      	movs	r2, #1
 80086b0:	4630      	mov	r0, r6
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	f000 ff28 	bl	8009508 <__lshift>
 80086b8:	4621      	mov	r1, r4
 80086ba:	4605      	mov	r5, r0
 80086bc:	f000 ff94 	bl	80095e8 <__mcmp>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dcb1      	bgt.n	8008628 <_dtoa_r+0x9c0>
 80086c4:	d102      	bne.n	80086cc <_dtoa_r+0xa64>
 80086c6:	9b02      	ldr	r3, [sp, #8]
 80086c8:	07db      	lsls	r3, r3, #31
 80086ca:	d4ad      	bmi.n	8008628 <_dtoa_r+0x9c0>
 80086cc:	4643      	mov	r3, r8
 80086ce:	4698      	mov	r8, r3
 80086d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086d4:	2a30      	cmp	r2, #48	; 0x30
 80086d6:	d0fa      	beq.n	80086ce <_dtoa_r+0xa66>
 80086d8:	e6f6      	b.n	80084c8 <_dtoa_r+0x860>
 80086da:	9a01      	ldr	r2, [sp, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d1a4      	bne.n	800862a <_dtoa_r+0x9c2>
 80086e0:	f10b 0b01 	add.w	fp, fp, #1
 80086e4:	2331      	movs	r3, #49	; 0x31
 80086e6:	e778      	b.n	80085da <_dtoa_r+0x972>
 80086e8:	4b14      	ldr	r3, [pc, #80]	; (800873c <_dtoa_r+0xad4>)
 80086ea:	f7ff bb27 	b.w	8007d3c <_dtoa_r+0xd4>
 80086ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f47f ab03 	bne.w	8007cfc <_dtoa_r+0x94>
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <_dtoa_r+0xad8>)
 80086f8:	f7ff bb20 	b.w	8007d3c <_dtoa_r+0xd4>
 80086fc:	f1ba 0f00 	cmp.w	sl, #0
 8008700:	dc03      	bgt.n	800870a <_dtoa_r+0xaa2>
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	2b02      	cmp	r3, #2
 8008706:	f73f aec7 	bgt.w	8008498 <_dtoa_r+0x830>
 800870a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	f7ff fa1d 	bl	8007b50 <quorem>
 8008716:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800871a:	f808 3b01 	strb.w	r3, [r8], #1
 800871e:	9a01      	ldr	r2, [sp, #4]
 8008720:	eba8 0202 	sub.w	r2, r8, r2
 8008724:	4592      	cmp	sl, r2
 8008726:	ddb7      	ble.n	8008698 <_dtoa_r+0xa30>
 8008728:	4629      	mov	r1, r5
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4630      	mov	r0, r6
 8008730:	f000 fcf0 	bl	8009114 <__multadd>
 8008734:	4605      	mov	r5, r0
 8008736:	e7ea      	b.n	800870e <_dtoa_r+0xaa6>
 8008738:	0800ab50 	.word	0x0800ab50
 800873c:	0800a950 	.word	0x0800a950
 8008740:	0800aad1 	.word	0x0800aad1

08008744 <std>:
 8008744:	2300      	movs	r3, #0
 8008746:	b510      	push	{r4, lr}
 8008748:	4604      	mov	r4, r0
 800874a:	e9c0 3300 	strd	r3, r3, [r0]
 800874e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008752:	6083      	str	r3, [r0, #8]
 8008754:	8181      	strh	r1, [r0, #12]
 8008756:	6643      	str	r3, [r0, #100]	; 0x64
 8008758:	81c2      	strh	r2, [r0, #14]
 800875a:	6183      	str	r3, [r0, #24]
 800875c:	4619      	mov	r1, r3
 800875e:	2208      	movs	r2, #8
 8008760:	305c      	adds	r0, #92	; 0x5c
 8008762:	f7fd fd0b 	bl	800617c <memset>
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <std+0x38>)
 8008768:	6263      	str	r3, [r4, #36]	; 0x24
 800876a:	4b05      	ldr	r3, [pc, #20]	; (8008780 <std+0x3c>)
 800876c:	62a3      	str	r3, [r4, #40]	; 0x28
 800876e:	4b05      	ldr	r3, [pc, #20]	; (8008784 <std+0x40>)
 8008770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <std+0x44>)
 8008774:	6224      	str	r4, [r4, #32]
 8008776:	6323      	str	r3, [r4, #48]	; 0x30
 8008778:	bd10      	pop	{r4, pc}
 800877a:	bf00      	nop
 800877c:	0800a159 	.word	0x0800a159
 8008780:	0800a17b 	.word	0x0800a17b
 8008784:	0800a1b3 	.word	0x0800a1b3
 8008788:	0800a1d7 	.word	0x0800a1d7

0800878c <_cleanup_r>:
 800878c:	4901      	ldr	r1, [pc, #4]	; (8008794 <_cleanup_r+0x8>)
 800878e:	f000 b8af 	b.w	80088f0 <_fwalk_reent>
 8008792:	bf00      	nop
 8008794:	0800a531 	.word	0x0800a531

08008798 <__sfmoreglue>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	2268      	movs	r2, #104	; 0x68
 800879c:	1e4d      	subs	r5, r1, #1
 800879e:	4355      	muls	r5, r2
 80087a0:	460e      	mov	r6, r1
 80087a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087a6:	f001 f993 	bl	8009ad0 <_malloc_r>
 80087aa:	4604      	mov	r4, r0
 80087ac:	b140      	cbz	r0, 80087c0 <__sfmoreglue+0x28>
 80087ae:	2100      	movs	r1, #0
 80087b0:	e9c0 1600 	strd	r1, r6, [r0]
 80087b4:	300c      	adds	r0, #12
 80087b6:	60a0      	str	r0, [r4, #8]
 80087b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087bc:	f7fd fcde 	bl	800617c <memset>
 80087c0:	4620      	mov	r0, r4
 80087c2:	bd70      	pop	{r4, r5, r6, pc}

080087c4 <__sfp_lock_acquire>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__sfp_lock_acquire+0x8>)
 80087c6:	f000 bc26 	b.w	8009016 <__retarget_lock_acquire_recursive>
 80087ca:	bf00      	nop
 80087cc:	240003b5 	.word	0x240003b5

080087d0 <__sfp_lock_release>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__sfp_lock_release+0x8>)
 80087d2:	f000 bc21 	b.w	8009018 <__retarget_lock_release_recursive>
 80087d6:	bf00      	nop
 80087d8:	240003b5 	.word	0x240003b5

080087dc <__sinit_lock_acquire>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__sinit_lock_acquire+0x8>)
 80087de:	f000 bc1a 	b.w	8009016 <__retarget_lock_acquire_recursive>
 80087e2:	bf00      	nop
 80087e4:	240003b6 	.word	0x240003b6

080087e8 <__sinit_lock_release>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__sinit_lock_release+0x8>)
 80087ea:	f000 bc15 	b.w	8009018 <__retarget_lock_release_recursive>
 80087ee:	bf00      	nop
 80087f0:	240003b6 	.word	0x240003b6

080087f4 <__sinit>:
 80087f4:	b510      	push	{r4, lr}
 80087f6:	4604      	mov	r4, r0
 80087f8:	f7ff fff0 	bl	80087dc <__sinit_lock_acquire>
 80087fc:	69a3      	ldr	r3, [r4, #24]
 80087fe:	b11b      	cbz	r3, 8008808 <__sinit+0x14>
 8008800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008804:	f7ff bff0 	b.w	80087e8 <__sinit_lock_release>
 8008808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800880c:	6523      	str	r3, [r4, #80]	; 0x50
 800880e:	4b13      	ldr	r3, [pc, #76]	; (800885c <__sinit+0x68>)
 8008810:	4a13      	ldr	r2, [pc, #76]	; (8008860 <__sinit+0x6c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	62a2      	str	r2, [r4, #40]	; 0x28
 8008816:	42a3      	cmp	r3, r4
 8008818:	bf04      	itt	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	61a3      	streq	r3, [r4, #24]
 800881e:	4620      	mov	r0, r4
 8008820:	f000 f820 	bl	8008864 <__sfp>
 8008824:	6060      	str	r0, [r4, #4]
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f81c 	bl	8008864 <__sfp>
 800882c:	60a0      	str	r0, [r4, #8]
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f818 	bl	8008864 <__sfp>
 8008834:	2200      	movs	r2, #0
 8008836:	60e0      	str	r0, [r4, #12]
 8008838:	2104      	movs	r1, #4
 800883a:	6860      	ldr	r0, [r4, #4]
 800883c:	f7ff ff82 	bl	8008744 <std>
 8008840:	68a0      	ldr	r0, [r4, #8]
 8008842:	2201      	movs	r2, #1
 8008844:	2109      	movs	r1, #9
 8008846:	f7ff ff7d 	bl	8008744 <std>
 800884a:	68e0      	ldr	r0, [r4, #12]
 800884c:	2202      	movs	r2, #2
 800884e:	2112      	movs	r1, #18
 8008850:	f7ff ff78 	bl	8008744 <std>
 8008854:	2301      	movs	r3, #1
 8008856:	61a3      	str	r3, [r4, #24]
 8008858:	e7d2      	b.n	8008800 <__sinit+0xc>
 800885a:	bf00      	nop
 800885c:	0800a93c 	.word	0x0800a93c
 8008860:	0800878d 	.word	0x0800878d

08008864 <__sfp>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	4607      	mov	r7, r0
 8008868:	f7ff ffac 	bl	80087c4 <__sfp_lock_acquire>
 800886c:	4b1e      	ldr	r3, [pc, #120]	; (80088e8 <__sfp+0x84>)
 800886e:	681e      	ldr	r6, [r3, #0]
 8008870:	69b3      	ldr	r3, [r6, #24]
 8008872:	b913      	cbnz	r3, 800887a <__sfp+0x16>
 8008874:	4630      	mov	r0, r6
 8008876:	f7ff ffbd 	bl	80087f4 <__sinit>
 800887a:	3648      	adds	r6, #72	; 0x48
 800887c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008880:	3b01      	subs	r3, #1
 8008882:	d503      	bpl.n	800888c <__sfp+0x28>
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	b30b      	cbz	r3, 80088cc <__sfp+0x68>
 8008888:	6836      	ldr	r6, [r6, #0]
 800888a:	e7f7      	b.n	800887c <__sfp+0x18>
 800888c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008890:	b9d5      	cbnz	r5, 80088c8 <__sfp+0x64>
 8008892:	4b16      	ldr	r3, [pc, #88]	; (80088ec <__sfp+0x88>)
 8008894:	60e3      	str	r3, [r4, #12]
 8008896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800889a:	6665      	str	r5, [r4, #100]	; 0x64
 800889c:	f000 fbba 	bl	8009014 <__retarget_lock_init_recursive>
 80088a0:	f7ff ff96 	bl	80087d0 <__sfp_lock_release>
 80088a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088ac:	6025      	str	r5, [r4, #0]
 80088ae:	61a5      	str	r5, [r4, #24]
 80088b0:	2208      	movs	r2, #8
 80088b2:	4629      	mov	r1, r5
 80088b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088b8:	f7fd fc60 	bl	800617c <memset>
 80088bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088c4:	4620      	mov	r0, r4
 80088c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c8:	3468      	adds	r4, #104	; 0x68
 80088ca:	e7d9      	b.n	8008880 <__sfp+0x1c>
 80088cc:	2104      	movs	r1, #4
 80088ce:	4638      	mov	r0, r7
 80088d0:	f7ff ff62 	bl	8008798 <__sfmoreglue>
 80088d4:	4604      	mov	r4, r0
 80088d6:	6030      	str	r0, [r6, #0]
 80088d8:	2800      	cmp	r0, #0
 80088da:	d1d5      	bne.n	8008888 <__sfp+0x24>
 80088dc:	f7ff ff78 	bl	80087d0 <__sfp_lock_release>
 80088e0:	230c      	movs	r3, #12
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	e7ee      	b.n	80088c4 <__sfp+0x60>
 80088e6:	bf00      	nop
 80088e8:	0800a93c 	.word	0x0800a93c
 80088ec:	ffff0001 	.word	0xffff0001

080088f0 <_fwalk_reent>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	4606      	mov	r6, r0
 80088f6:	4688      	mov	r8, r1
 80088f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088fc:	2700      	movs	r7, #0
 80088fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008902:	f1b9 0901 	subs.w	r9, r9, #1
 8008906:	d505      	bpl.n	8008914 <_fwalk_reent+0x24>
 8008908:	6824      	ldr	r4, [r4, #0]
 800890a:	2c00      	cmp	r4, #0
 800890c:	d1f7      	bne.n	80088fe <_fwalk_reent+0xe>
 800890e:	4638      	mov	r0, r7
 8008910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008914:	89ab      	ldrh	r3, [r5, #12]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d907      	bls.n	800892a <_fwalk_reent+0x3a>
 800891a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800891e:	3301      	adds	r3, #1
 8008920:	d003      	beq.n	800892a <_fwalk_reent+0x3a>
 8008922:	4629      	mov	r1, r5
 8008924:	4630      	mov	r0, r6
 8008926:	47c0      	blx	r8
 8008928:	4307      	orrs	r7, r0
 800892a:	3568      	adds	r5, #104	; 0x68
 800892c:	e7e9      	b.n	8008902 <_fwalk_reent+0x12>

0800892e <rshift>:
 800892e:	6903      	ldr	r3, [r0, #16]
 8008930:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008938:	ea4f 1261 	mov.w	r2, r1, asr #5
 800893c:	f100 0414 	add.w	r4, r0, #20
 8008940:	dd45      	ble.n	80089ce <rshift+0xa0>
 8008942:	f011 011f 	ands.w	r1, r1, #31
 8008946:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800894a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800894e:	d10c      	bne.n	800896a <rshift+0x3c>
 8008950:	f100 0710 	add.w	r7, r0, #16
 8008954:	4629      	mov	r1, r5
 8008956:	42b1      	cmp	r1, r6
 8008958:	d334      	bcc.n	80089c4 <rshift+0x96>
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	1eea      	subs	r2, r5, #3
 8008960:	4296      	cmp	r6, r2
 8008962:	bf38      	it	cc
 8008964:	2300      	movcc	r3, #0
 8008966:	4423      	add	r3, r4
 8008968:	e015      	b.n	8008996 <rshift+0x68>
 800896a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800896e:	f1c1 0820 	rsb	r8, r1, #32
 8008972:	40cf      	lsrs	r7, r1
 8008974:	f105 0e04 	add.w	lr, r5, #4
 8008978:	46a1      	mov	r9, r4
 800897a:	4576      	cmp	r6, lr
 800897c:	46f4      	mov	ip, lr
 800897e:	d815      	bhi.n	80089ac <rshift+0x7e>
 8008980:	1a9a      	subs	r2, r3, r2
 8008982:	0092      	lsls	r2, r2, #2
 8008984:	3a04      	subs	r2, #4
 8008986:	3501      	adds	r5, #1
 8008988:	42ae      	cmp	r6, r5
 800898a:	bf38      	it	cc
 800898c:	2200      	movcc	r2, #0
 800898e:	18a3      	adds	r3, r4, r2
 8008990:	50a7      	str	r7, [r4, r2]
 8008992:	b107      	cbz	r7, 8008996 <rshift+0x68>
 8008994:	3304      	adds	r3, #4
 8008996:	1b1a      	subs	r2, r3, r4
 8008998:	42a3      	cmp	r3, r4
 800899a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800899e:	bf08      	it	eq
 80089a0:	2300      	moveq	r3, #0
 80089a2:	6102      	str	r2, [r0, #16]
 80089a4:	bf08      	it	eq
 80089a6:	6143      	streq	r3, [r0, #20]
 80089a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ac:	f8dc c000 	ldr.w	ip, [ip]
 80089b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80089b4:	ea4c 0707 	orr.w	r7, ip, r7
 80089b8:	f849 7b04 	str.w	r7, [r9], #4
 80089bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089c0:	40cf      	lsrs	r7, r1
 80089c2:	e7da      	b.n	800897a <rshift+0x4c>
 80089c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80089c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80089cc:	e7c3      	b.n	8008956 <rshift+0x28>
 80089ce:	4623      	mov	r3, r4
 80089d0:	e7e1      	b.n	8008996 <rshift+0x68>

080089d2 <__hexdig_fun>:
 80089d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d802      	bhi.n	80089e0 <__hexdig_fun+0xe>
 80089da:	3820      	subs	r0, #32
 80089dc:	b2c0      	uxtb	r0, r0
 80089de:	4770      	bx	lr
 80089e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d801      	bhi.n	80089ec <__hexdig_fun+0x1a>
 80089e8:	3847      	subs	r0, #71	; 0x47
 80089ea:	e7f7      	b.n	80089dc <__hexdig_fun+0xa>
 80089ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d801      	bhi.n	80089f8 <__hexdig_fun+0x26>
 80089f4:	3827      	subs	r0, #39	; 0x27
 80089f6:	e7f1      	b.n	80089dc <__hexdig_fun+0xa>
 80089f8:	2000      	movs	r0, #0
 80089fa:	4770      	bx	lr

080089fc <__gethex>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	ed2d 8b02 	vpush	{d8}
 8008a04:	b089      	sub	sp, #36	; 0x24
 8008a06:	ee08 0a10 	vmov	s16, r0
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	4bb4      	ldr	r3, [pc, #720]	; (8008ce0 <__gethex+0x2e4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	4618      	mov	r0, r3
 8008a14:	468b      	mov	fp, r1
 8008a16:	4690      	mov	r8, r2
 8008a18:	f7f7 fc62 	bl	80002e0 <strlen>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	f8db 2000 	ldr.w	r2, [fp]
 8008a22:	4403      	add	r3, r0
 8008a24:	4682      	mov	sl, r0
 8008a26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	1c93      	adds	r3, r2, #2
 8008a2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a36:	32fe      	adds	r2, #254	; 0xfe
 8008a38:	18d1      	adds	r1, r2, r3
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a40:	9100      	str	r1, [sp, #0]
 8008a42:	2830      	cmp	r0, #48	; 0x30
 8008a44:	d0f8      	beq.n	8008a38 <__gethex+0x3c>
 8008a46:	f7ff ffc4 	bl	80089d2 <__hexdig_fun>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d13a      	bne.n	8008ac6 <__gethex+0xca>
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	4652      	mov	r2, sl
 8008a54:	4638      	mov	r0, r7
 8008a56:	f001 fbc2 	bl	800a1de <strncmp>
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d168      	bne.n	8008b32 <__gethex+0x136>
 8008a60:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a64:	eb07 060a 	add.w	r6, r7, sl
 8008a68:	f7ff ffb3 	bl	80089d2 <__hexdig_fun>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d062      	beq.n	8008b36 <__gethex+0x13a>
 8008a70:	4633      	mov	r3, r6
 8008a72:	7818      	ldrb	r0, [r3, #0]
 8008a74:	2830      	cmp	r0, #48	; 0x30
 8008a76:	461f      	mov	r7, r3
 8008a78:	f103 0301 	add.w	r3, r3, #1
 8008a7c:	d0f9      	beq.n	8008a72 <__gethex+0x76>
 8008a7e:	f7ff ffa8 	bl	80089d2 <__hexdig_fun>
 8008a82:	2301      	movs	r3, #1
 8008a84:	fab0 f480 	clz	r4, r0
 8008a88:	0964      	lsrs	r4, r4, #5
 8008a8a:	4635      	mov	r5, r6
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	463a      	mov	r2, r7
 8008a90:	4616      	mov	r6, r2
 8008a92:	3201      	adds	r2, #1
 8008a94:	7830      	ldrb	r0, [r6, #0]
 8008a96:	f7ff ff9c 	bl	80089d2 <__hexdig_fun>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1f8      	bne.n	8008a90 <__gethex+0x94>
 8008a9e:	9901      	ldr	r1, [sp, #4]
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f001 fb9b 	bl	800a1de <strncmp>
 8008aa8:	b980      	cbnz	r0, 8008acc <__gethex+0xd0>
 8008aaa:	b94d      	cbnz	r5, 8008ac0 <__gethex+0xc4>
 8008aac:	eb06 050a 	add.w	r5, r6, sl
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4616      	mov	r6, r2
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	7830      	ldrb	r0, [r6, #0]
 8008ab8:	f7ff ff8b 	bl	80089d2 <__hexdig_fun>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1f8      	bne.n	8008ab2 <__gethex+0xb6>
 8008ac0:	1bad      	subs	r5, r5, r6
 8008ac2:	00ad      	lsls	r5, r5, #2
 8008ac4:	e004      	b.n	8008ad0 <__gethex+0xd4>
 8008ac6:	2400      	movs	r4, #0
 8008ac8:	4625      	mov	r5, r4
 8008aca:	e7e0      	b.n	8008a8e <__gethex+0x92>
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	d1f7      	bne.n	8008ac0 <__gethex+0xc4>
 8008ad0:	7833      	ldrb	r3, [r6, #0]
 8008ad2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ad6:	2b50      	cmp	r3, #80	; 0x50
 8008ad8:	d13b      	bne.n	8008b52 <__gethex+0x156>
 8008ada:	7873      	ldrb	r3, [r6, #1]
 8008adc:	2b2b      	cmp	r3, #43	; 0x2b
 8008ade:	d02c      	beq.n	8008b3a <__gethex+0x13e>
 8008ae0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ae2:	d02e      	beq.n	8008b42 <__gethex+0x146>
 8008ae4:	1c71      	adds	r1, r6, #1
 8008ae6:	f04f 0900 	mov.w	r9, #0
 8008aea:	7808      	ldrb	r0, [r1, #0]
 8008aec:	f7ff ff71 	bl	80089d2 <__hexdig_fun>
 8008af0:	1e43      	subs	r3, r0, #1
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b18      	cmp	r3, #24
 8008af6:	d82c      	bhi.n	8008b52 <__gethex+0x156>
 8008af8:	f1a0 0210 	sub.w	r2, r0, #16
 8008afc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b00:	f7ff ff67 	bl	80089d2 <__hexdig_fun>
 8008b04:	1e43      	subs	r3, r0, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b18      	cmp	r3, #24
 8008b0a:	d91d      	bls.n	8008b48 <__gethex+0x14c>
 8008b0c:	f1b9 0f00 	cmp.w	r9, #0
 8008b10:	d000      	beq.n	8008b14 <__gethex+0x118>
 8008b12:	4252      	negs	r2, r2
 8008b14:	4415      	add	r5, r2
 8008b16:	f8cb 1000 	str.w	r1, [fp]
 8008b1a:	b1e4      	cbz	r4, 8008b56 <__gethex+0x15a>
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bf14      	ite	ne
 8008b22:	2700      	movne	r7, #0
 8008b24:	2706      	moveq	r7, #6
 8008b26:	4638      	mov	r0, r7
 8008b28:	b009      	add	sp, #36	; 0x24
 8008b2a:	ecbd 8b02 	vpop	{d8}
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	463e      	mov	r6, r7
 8008b34:	4625      	mov	r5, r4
 8008b36:	2401      	movs	r4, #1
 8008b38:	e7ca      	b.n	8008ad0 <__gethex+0xd4>
 8008b3a:	f04f 0900 	mov.w	r9, #0
 8008b3e:	1cb1      	adds	r1, r6, #2
 8008b40:	e7d3      	b.n	8008aea <__gethex+0xee>
 8008b42:	f04f 0901 	mov.w	r9, #1
 8008b46:	e7fa      	b.n	8008b3e <__gethex+0x142>
 8008b48:	230a      	movs	r3, #10
 8008b4a:	fb03 0202 	mla	r2, r3, r2, r0
 8008b4e:	3a10      	subs	r2, #16
 8008b50:	e7d4      	b.n	8008afc <__gethex+0x100>
 8008b52:	4631      	mov	r1, r6
 8008b54:	e7df      	b.n	8008b16 <__gethex+0x11a>
 8008b56:	1bf3      	subs	r3, r6, r7
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	dc0b      	bgt.n	8008b78 <__gethex+0x17c>
 8008b60:	ee18 0a10 	vmov	r0, s16
 8008b64:	f000 fa74 	bl	8009050 <_Balloc>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	b940      	cbnz	r0, 8008b7e <__gethex+0x182>
 8008b6c:	4b5d      	ldr	r3, [pc, #372]	; (8008ce4 <__gethex+0x2e8>)
 8008b6e:	4602      	mov	r2, r0
 8008b70:	21de      	movs	r1, #222	; 0xde
 8008b72:	485d      	ldr	r0, [pc, #372]	; (8008ce8 <__gethex+0x2ec>)
 8008b74:	f001 fc28 	bl	800a3c8 <__assert_func>
 8008b78:	3101      	adds	r1, #1
 8008b7a:	105b      	asrs	r3, r3, #1
 8008b7c:	e7ee      	b.n	8008b5c <__gethex+0x160>
 8008b7e:	f100 0914 	add.w	r9, r0, #20
 8008b82:	f04f 0b00 	mov.w	fp, #0
 8008b86:	f1ca 0301 	rsb	r3, sl, #1
 8008b8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b8e:	f8cd b000 	str.w	fp, [sp]
 8008b92:	9306      	str	r3, [sp, #24]
 8008b94:	42b7      	cmp	r7, r6
 8008b96:	d340      	bcc.n	8008c1a <__gethex+0x21e>
 8008b98:	9802      	ldr	r0, [sp, #8]
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	eba0 0009 	sub.w	r0, r0, r9
 8008ba4:	1080      	asrs	r0, r0, #2
 8008ba6:	0146      	lsls	r6, r0, #5
 8008ba8:	6120      	str	r0, [r4, #16]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fb42 	bl	8009234 <__hi0bits>
 8008bb0:	1a30      	subs	r0, r6, r0
 8008bb2:	f8d8 6000 	ldr.w	r6, [r8]
 8008bb6:	42b0      	cmp	r0, r6
 8008bb8:	dd63      	ble.n	8008c82 <__gethex+0x286>
 8008bba:	1b87      	subs	r7, r0, r6
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 fee3 	bl	800998a <__any_on>
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	b1a8      	cbz	r0, 8008bf4 <__gethex+0x1f8>
 8008bc8:	1e7b      	subs	r3, r7, #1
 8008bca:	1159      	asrs	r1, r3, #5
 8008bcc:	f003 021f 	and.w	r2, r3, #31
 8008bd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bd4:	f04f 0a01 	mov.w	sl, #1
 8008bd8:	fa0a f202 	lsl.w	r2, sl, r2
 8008bdc:	420a      	tst	r2, r1
 8008bde:	d009      	beq.n	8008bf4 <__gethex+0x1f8>
 8008be0:	4553      	cmp	r3, sl
 8008be2:	dd05      	ble.n	8008bf0 <__gethex+0x1f4>
 8008be4:	1eb9      	subs	r1, r7, #2
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 fecf 	bl	800998a <__any_on>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d145      	bne.n	8008c7c <__gethex+0x280>
 8008bf0:	f04f 0a02 	mov.w	sl, #2
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff fe99 	bl	800892e <rshift>
 8008bfc:	443d      	add	r5, r7
 8008bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c02:	42ab      	cmp	r3, r5
 8008c04:	da4c      	bge.n	8008ca0 <__gethex+0x2a4>
 8008c06:	ee18 0a10 	vmov	r0, s16
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	f000 fa60 	bl	80090d0 <_Bfree>
 8008c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c12:	2300      	movs	r3, #0
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	27a3      	movs	r7, #163	; 0xa3
 8008c18:	e785      	b.n	8008b26 <__gethex+0x12a>
 8008c1a:	1e73      	subs	r3, r6, #1
 8008c1c:	9a05      	ldr	r2, [sp, #20]
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d019      	beq.n	8008c5c <__gethex+0x260>
 8008c28:	f1bb 0f20 	cmp.w	fp, #32
 8008c2c:	d107      	bne.n	8008c3e <__gethex+0x242>
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	9a00      	ldr	r2, [sp, #0]
 8008c32:	f843 2b04 	str.w	r2, [r3], #4
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	469b      	mov	fp, r3
 8008c3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c42:	f7ff fec6 	bl	80089d2 <__hexdig_fun>
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	f000 000f 	and.w	r0, r0, #15
 8008c4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c50:	4303      	orrs	r3, r0
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	f10b 0b04 	add.w	fp, fp, #4
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	e00d      	b.n	8008c78 <__gethex+0x27c>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	9a06      	ldr	r2, [sp, #24]
 8008c60:	4413      	add	r3, r2
 8008c62:	42bb      	cmp	r3, r7
 8008c64:	d3e0      	bcc.n	8008c28 <__gethex+0x22c>
 8008c66:	4618      	mov	r0, r3
 8008c68:	9901      	ldr	r1, [sp, #4]
 8008c6a:	9307      	str	r3, [sp, #28]
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	f001 fab6 	bl	800a1de <strncmp>
 8008c72:	9b07      	ldr	r3, [sp, #28]
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d1d7      	bne.n	8008c28 <__gethex+0x22c>
 8008c78:	461e      	mov	r6, r3
 8008c7a:	e78b      	b.n	8008b94 <__gethex+0x198>
 8008c7c:	f04f 0a03 	mov.w	sl, #3
 8008c80:	e7b8      	b.n	8008bf4 <__gethex+0x1f8>
 8008c82:	da0a      	bge.n	8008c9a <__gethex+0x29e>
 8008c84:	1a37      	subs	r7, r6, r0
 8008c86:	4621      	mov	r1, r4
 8008c88:	ee18 0a10 	vmov	r0, s16
 8008c8c:	463a      	mov	r2, r7
 8008c8e:	f000 fc3b 	bl	8009508 <__lshift>
 8008c92:	1bed      	subs	r5, r5, r7
 8008c94:	4604      	mov	r4, r0
 8008c96:	f100 0914 	add.w	r9, r0, #20
 8008c9a:	f04f 0a00 	mov.w	sl, #0
 8008c9e:	e7ae      	b.n	8008bfe <__gethex+0x202>
 8008ca0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ca4:	42a8      	cmp	r0, r5
 8008ca6:	dd72      	ble.n	8008d8e <__gethex+0x392>
 8008ca8:	1b45      	subs	r5, r0, r5
 8008caa:	42ae      	cmp	r6, r5
 8008cac:	dc36      	bgt.n	8008d1c <__gethex+0x320>
 8008cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d02a      	beq.n	8008d0c <__gethex+0x310>
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d02c      	beq.n	8008d14 <__gethex+0x318>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d11c      	bne.n	8008cf8 <__gethex+0x2fc>
 8008cbe:	42ae      	cmp	r6, r5
 8008cc0:	d11a      	bne.n	8008cf8 <__gethex+0x2fc>
 8008cc2:	2e01      	cmp	r6, #1
 8008cc4:	d112      	bne.n	8008cec <__gethex+0x2f0>
 8008cc6:	9a04      	ldr	r2, [sp, #16]
 8008cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	2301      	movs	r3, #1
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	f8c9 3000 	str.w	r3, [r9]
 8008cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cd8:	2762      	movs	r7, #98	; 0x62
 8008cda:	601c      	str	r4, [r3, #0]
 8008cdc:	e723      	b.n	8008b26 <__gethex+0x12a>
 8008cde:	bf00      	nop
 8008ce0:	0800ac2c 	.word	0x0800ac2c
 8008ce4:	0800ab50 	.word	0x0800ab50
 8008ce8:	0800abc4 	.word	0x0800abc4
 8008cec:	1e71      	subs	r1, r6, #1
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 fe4b 	bl	800998a <__any_on>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1e6      	bne.n	8008cc6 <__gethex+0x2ca>
 8008cf8:	ee18 0a10 	vmov	r0, s16
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	f000 f9e7 	bl	80090d0 <_Bfree>
 8008d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d04:	2300      	movs	r3, #0
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	2750      	movs	r7, #80	; 0x50
 8008d0a:	e70c      	b.n	8008b26 <__gethex+0x12a>
 8008d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f2      	bne.n	8008cf8 <__gethex+0x2fc>
 8008d12:	e7d8      	b.n	8008cc6 <__gethex+0x2ca>
 8008d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1d5      	bne.n	8008cc6 <__gethex+0x2ca>
 8008d1a:	e7ed      	b.n	8008cf8 <__gethex+0x2fc>
 8008d1c:	1e6f      	subs	r7, r5, #1
 8008d1e:	f1ba 0f00 	cmp.w	sl, #0
 8008d22:	d131      	bne.n	8008d88 <__gethex+0x38c>
 8008d24:	b127      	cbz	r7, 8008d30 <__gethex+0x334>
 8008d26:	4639      	mov	r1, r7
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fe2e 	bl	800998a <__any_on>
 8008d2e:	4682      	mov	sl, r0
 8008d30:	117b      	asrs	r3, r7, #5
 8008d32:	2101      	movs	r1, #1
 8008d34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d38:	f007 071f 	and.w	r7, r7, #31
 8008d3c:	fa01 f707 	lsl.w	r7, r1, r7
 8008d40:	421f      	tst	r7, r3
 8008d42:	4629      	mov	r1, r5
 8008d44:	4620      	mov	r0, r4
 8008d46:	bf18      	it	ne
 8008d48:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d4c:	1b76      	subs	r6, r6, r5
 8008d4e:	f7ff fdee 	bl	800892e <rshift>
 8008d52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d56:	2702      	movs	r7, #2
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d048      	beq.n	8008df0 <__gethex+0x3f4>
 8008d5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d015      	beq.n	8008d92 <__gethex+0x396>
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d017      	beq.n	8008d9a <__gethex+0x39e>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d109      	bne.n	8008d82 <__gethex+0x386>
 8008d6e:	f01a 0f02 	tst.w	sl, #2
 8008d72:	d006      	beq.n	8008d82 <__gethex+0x386>
 8008d74:	f8d9 0000 	ldr.w	r0, [r9]
 8008d78:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d7c:	f01a 0f01 	tst.w	sl, #1
 8008d80:	d10e      	bne.n	8008da0 <__gethex+0x3a4>
 8008d82:	f047 0710 	orr.w	r7, r7, #16
 8008d86:	e033      	b.n	8008df0 <__gethex+0x3f4>
 8008d88:	f04f 0a01 	mov.w	sl, #1
 8008d8c:	e7d0      	b.n	8008d30 <__gethex+0x334>
 8008d8e:	2701      	movs	r7, #1
 8008d90:	e7e2      	b.n	8008d58 <__gethex+0x35c>
 8008d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d94:	f1c3 0301 	rsb	r3, r3, #1
 8008d98:	9315      	str	r3, [sp, #84]	; 0x54
 8008d9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <__gethex+0x386>
 8008da0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008da4:	f104 0314 	add.w	r3, r4, #20
 8008da8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008db0:	f04f 0c00 	mov.w	ip, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008dbe:	d01c      	beq.n	8008dfa <__gethex+0x3fe>
 8008dc0:	3201      	adds	r2, #1
 8008dc2:	6002      	str	r2, [r0, #0]
 8008dc4:	2f02      	cmp	r7, #2
 8008dc6:	f104 0314 	add.w	r3, r4, #20
 8008dca:	d13f      	bne.n	8008e4c <__gethex+0x450>
 8008dcc:	f8d8 2000 	ldr.w	r2, [r8]
 8008dd0:	3a01      	subs	r2, #1
 8008dd2:	42b2      	cmp	r2, r6
 8008dd4:	d10a      	bne.n	8008dec <__gethex+0x3f0>
 8008dd6:	1171      	asrs	r1, r6, #5
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dde:	f006 061f 	and.w	r6, r6, #31
 8008de2:	fa02 f606 	lsl.w	r6, r2, r6
 8008de6:	421e      	tst	r6, r3
 8008de8:	bf18      	it	ne
 8008dea:	4617      	movne	r7, r2
 8008dec:	f047 0720 	orr.w	r7, r7, #32
 8008df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008df2:	601c      	str	r4, [r3, #0]
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	601d      	str	r5, [r3, #0]
 8008df8:	e695      	b.n	8008b26 <__gethex+0x12a>
 8008dfa:	4299      	cmp	r1, r3
 8008dfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e00:	d8d8      	bhi.n	8008db4 <__gethex+0x3b8>
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	459b      	cmp	fp, r3
 8008e06:	db19      	blt.n	8008e3c <__gethex+0x440>
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	ee18 0a10 	vmov	r0, s16
 8008e0e:	3101      	adds	r1, #1
 8008e10:	f000 f91e 	bl	8009050 <_Balloc>
 8008e14:	4681      	mov	r9, r0
 8008e16:	b918      	cbnz	r0, 8008e20 <__gethex+0x424>
 8008e18:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <__gethex+0x488>)
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	2184      	movs	r1, #132	; 0x84
 8008e1e:	e6a8      	b.n	8008b72 <__gethex+0x176>
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	3202      	adds	r2, #2
 8008e24:	f104 010c 	add.w	r1, r4, #12
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	300c      	adds	r0, #12
 8008e2c:	f7fd f998 	bl	8006160 <memcpy>
 8008e30:	4621      	mov	r1, r4
 8008e32:	ee18 0a10 	vmov	r0, s16
 8008e36:	f000 f94b 	bl	80090d0 <_Bfree>
 8008e3a:	464c      	mov	r4, r9
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e44:	6122      	str	r2, [r4, #16]
 8008e46:	2201      	movs	r2, #1
 8008e48:	615a      	str	r2, [r3, #20]
 8008e4a:	e7bb      	b.n	8008dc4 <__gethex+0x3c8>
 8008e4c:	6922      	ldr	r2, [r4, #16]
 8008e4e:	455a      	cmp	r2, fp
 8008e50:	dd0b      	ble.n	8008e6a <__gethex+0x46e>
 8008e52:	2101      	movs	r1, #1
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff fd6a 	bl	800892e <rshift>
 8008e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e5e:	3501      	adds	r5, #1
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	f6ff aed0 	blt.w	8008c06 <__gethex+0x20a>
 8008e66:	2701      	movs	r7, #1
 8008e68:	e7c0      	b.n	8008dec <__gethex+0x3f0>
 8008e6a:	f016 061f 	ands.w	r6, r6, #31
 8008e6e:	d0fa      	beq.n	8008e66 <__gethex+0x46a>
 8008e70:	4453      	add	r3, sl
 8008e72:	f1c6 0620 	rsb	r6, r6, #32
 8008e76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e7a:	f000 f9db 	bl	8009234 <__hi0bits>
 8008e7e:	42b0      	cmp	r0, r6
 8008e80:	dbe7      	blt.n	8008e52 <__gethex+0x456>
 8008e82:	e7f0      	b.n	8008e66 <__gethex+0x46a>
 8008e84:	0800ab50 	.word	0x0800ab50

08008e88 <L_shift>:
 8008e88:	f1c2 0208 	rsb	r2, r2, #8
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	b570      	push	{r4, r5, r6, lr}
 8008e90:	f1c2 0620 	rsb	r6, r2, #32
 8008e94:	6843      	ldr	r3, [r0, #4]
 8008e96:	6804      	ldr	r4, [r0, #0]
 8008e98:	fa03 f506 	lsl.w	r5, r3, r6
 8008e9c:	432c      	orrs	r4, r5
 8008e9e:	40d3      	lsrs	r3, r2
 8008ea0:	6004      	str	r4, [r0, #0]
 8008ea2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ea6:	4288      	cmp	r0, r1
 8008ea8:	d3f4      	bcc.n	8008e94 <L_shift+0xc>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}

08008eac <__match>:
 8008eac:	b530      	push	{r4, r5, lr}
 8008eae:	6803      	ldr	r3, [r0, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb6:	b914      	cbnz	r4, 8008ebe <__match+0x12>
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	2001      	movs	r0, #1
 8008ebc:	bd30      	pop	{r4, r5, pc}
 8008ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ec6:	2d19      	cmp	r5, #25
 8008ec8:	bf98      	it	ls
 8008eca:	3220      	addls	r2, #32
 8008ecc:	42a2      	cmp	r2, r4
 8008ece:	d0f0      	beq.n	8008eb2 <__match+0x6>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7f3      	b.n	8008ebc <__match+0x10>

08008ed4 <__hexnan>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	680b      	ldr	r3, [r1, #0]
 8008eda:	115e      	asrs	r6, r3, #5
 8008edc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ee0:	f013 031f 	ands.w	r3, r3, #31
 8008ee4:	b087      	sub	sp, #28
 8008ee6:	bf18      	it	ne
 8008ee8:	3604      	addne	r6, #4
 8008eea:	2500      	movs	r5, #0
 8008eec:	1f37      	subs	r7, r6, #4
 8008eee:	4690      	mov	r8, r2
 8008ef0:	6802      	ldr	r2, [r0, #0]
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008efa:	46b9      	mov	r9, r7
 8008efc:	463c      	mov	r4, r7
 8008efe:	9502      	str	r5, [sp, #8]
 8008f00:	46ab      	mov	fp, r5
 8008f02:	7851      	ldrb	r1, [r2, #1]
 8008f04:	1c53      	adds	r3, r2, #1
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	b341      	cbz	r1, 8008f5c <__hexnan+0x88>
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	9205      	str	r2, [sp, #20]
 8008f0e:	9104      	str	r1, [sp, #16]
 8008f10:	f7ff fd5f 	bl	80089d2 <__hexdig_fun>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d14f      	bne.n	8008fb8 <__hexnan+0xe4>
 8008f18:	9904      	ldr	r1, [sp, #16]
 8008f1a:	9a05      	ldr	r2, [sp, #20]
 8008f1c:	2920      	cmp	r1, #32
 8008f1e:	d818      	bhi.n	8008f52 <__hexnan+0x7e>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	459b      	cmp	fp, r3
 8008f24:	dd13      	ble.n	8008f4e <__hexnan+0x7a>
 8008f26:	454c      	cmp	r4, r9
 8008f28:	d206      	bcs.n	8008f38 <__hexnan+0x64>
 8008f2a:	2d07      	cmp	r5, #7
 8008f2c:	dc04      	bgt.n	8008f38 <__hexnan+0x64>
 8008f2e:	462a      	mov	r2, r5
 8008f30:	4649      	mov	r1, r9
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff ffa8 	bl	8008e88 <L_shift>
 8008f38:	4544      	cmp	r4, r8
 8008f3a:	d950      	bls.n	8008fde <__hexnan+0x10a>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f46:	f8cd b008 	str.w	fp, [sp, #8]
 8008f4a:	464c      	mov	r4, r9
 8008f4c:	461d      	mov	r5, r3
 8008f4e:	9a03      	ldr	r2, [sp, #12]
 8008f50:	e7d7      	b.n	8008f02 <__hexnan+0x2e>
 8008f52:	2929      	cmp	r1, #41	; 0x29
 8008f54:	d156      	bne.n	8009004 <__hexnan+0x130>
 8008f56:	3202      	adds	r2, #2
 8008f58:	f8ca 2000 	str.w	r2, [sl]
 8008f5c:	f1bb 0f00 	cmp.w	fp, #0
 8008f60:	d050      	beq.n	8009004 <__hexnan+0x130>
 8008f62:	454c      	cmp	r4, r9
 8008f64:	d206      	bcs.n	8008f74 <__hexnan+0xa0>
 8008f66:	2d07      	cmp	r5, #7
 8008f68:	dc04      	bgt.n	8008f74 <__hexnan+0xa0>
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7ff ff8a 	bl	8008e88 <L_shift>
 8008f74:	4544      	cmp	r4, r8
 8008f76:	d934      	bls.n	8008fe2 <__hexnan+0x10e>
 8008f78:	f1a8 0204 	sub.w	r2, r8, #4
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f82:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f86:	429f      	cmp	r7, r3
 8008f88:	d2f9      	bcs.n	8008f7e <__hexnan+0xaa>
 8008f8a:	1b3b      	subs	r3, r7, r4
 8008f8c:	f023 0303 	bic.w	r3, r3, #3
 8008f90:	3304      	adds	r3, #4
 8008f92:	3401      	adds	r4, #1
 8008f94:	3e03      	subs	r6, #3
 8008f96:	42b4      	cmp	r4, r6
 8008f98:	bf88      	it	hi
 8008f9a:	2304      	movhi	r3, #4
 8008f9c:	4443      	add	r3, r8
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f843 2b04 	str.w	r2, [r3], #4
 8008fa4:	429f      	cmp	r7, r3
 8008fa6:	d2fb      	bcs.n	8008fa0 <__hexnan+0xcc>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	b91b      	cbnz	r3, 8008fb4 <__hexnan+0xe0>
 8008fac:	4547      	cmp	r7, r8
 8008fae:	d127      	bne.n	8009000 <__hexnan+0x12c>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	2005      	movs	r0, #5
 8008fb6:	e026      	b.n	8009006 <__hexnan+0x132>
 8008fb8:	3501      	adds	r5, #1
 8008fba:	2d08      	cmp	r5, #8
 8008fbc:	f10b 0b01 	add.w	fp, fp, #1
 8008fc0:	dd06      	ble.n	8008fd0 <__hexnan+0xfc>
 8008fc2:	4544      	cmp	r4, r8
 8008fc4:	d9c3      	bls.n	8008f4e <__hexnan+0x7a>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fcc:	2501      	movs	r5, #1
 8008fce:	3c04      	subs	r4, #4
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	f000 000f 	and.w	r0, r0, #15
 8008fd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	e7b7      	b.n	8008f4e <__hexnan+0x7a>
 8008fde:	2508      	movs	r5, #8
 8008fe0:	e7b5      	b.n	8008f4e <__hexnan+0x7a>
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0df      	beq.n	8008fa8 <__hexnan+0xd4>
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	f1c3 0320 	rsb	r3, r3, #32
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ff8:	401a      	ands	r2, r3
 8008ffa:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ffe:	e7d3      	b.n	8008fa8 <__hexnan+0xd4>
 8009000:	3f04      	subs	r7, #4
 8009002:	e7d1      	b.n	8008fa8 <__hexnan+0xd4>
 8009004:	2004      	movs	r0, #4
 8009006:	b007      	add	sp, #28
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800900c <_localeconv_r>:
 800900c:	4800      	ldr	r0, [pc, #0]	; (8009010 <_localeconv_r+0x4>)
 800900e:	4770      	bx	lr
 8009010:	24000178 	.word	0x24000178

08009014 <__retarget_lock_init_recursive>:
 8009014:	4770      	bx	lr

08009016 <__retarget_lock_acquire_recursive>:
 8009016:	4770      	bx	lr

08009018 <__retarget_lock_release_recursive>:
 8009018:	4770      	bx	lr
	...

0800901c <malloc>:
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <malloc+0xc>)
 800901e:	4601      	mov	r1, r0
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f000 bd55 	b.w	8009ad0 <_malloc_r>
 8009026:	bf00      	nop
 8009028:	24000020 	.word	0x24000020

0800902c <__ascii_mbtowc>:
 800902c:	b082      	sub	sp, #8
 800902e:	b901      	cbnz	r1, 8009032 <__ascii_mbtowc+0x6>
 8009030:	a901      	add	r1, sp, #4
 8009032:	b142      	cbz	r2, 8009046 <__ascii_mbtowc+0x1a>
 8009034:	b14b      	cbz	r3, 800904a <__ascii_mbtowc+0x1e>
 8009036:	7813      	ldrb	r3, [r2, #0]
 8009038:	600b      	str	r3, [r1, #0]
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	1e10      	subs	r0, r2, #0
 800903e:	bf18      	it	ne
 8009040:	2001      	movne	r0, #1
 8009042:	b002      	add	sp, #8
 8009044:	4770      	bx	lr
 8009046:	4610      	mov	r0, r2
 8009048:	e7fb      	b.n	8009042 <__ascii_mbtowc+0x16>
 800904a:	f06f 0001 	mvn.w	r0, #1
 800904e:	e7f8      	b.n	8009042 <__ascii_mbtowc+0x16>

08009050 <_Balloc>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
 8009058:	b976      	cbnz	r6, 8009078 <_Balloc+0x28>
 800905a:	2010      	movs	r0, #16
 800905c:	f7ff ffde 	bl	800901c <malloc>
 8009060:	4602      	mov	r2, r0
 8009062:	6260      	str	r0, [r4, #36]	; 0x24
 8009064:	b920      	cbnz	r0, 8009070 <_Balloc+0x20>
 8009066:	4b18      	ldr	r3, [pc, #96]	; (80090c8 <_Balloc+0x78>)
 8009068:	4818      	ldr	r0, [pc, #96]	; (80090cc <_Balloc+0x7c>)
 800906a:	2166      	movs	r1, #102	; 0x66
 800906c:	f001 f9ac 	bl	800a3c8 <__assert_func>
 8009070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009074:	6006      	str	r6, [r0, #0]
 8009076:	60c6      	str	r6, [r0, #12]
 8009078:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800907a:	68f3      	ldr	r3, [r6, #12]
 800907c:	b183      	cbz	r3, 80090a0 <_Balloc+0x50>
 800907e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009086:	b9b8      	cbnz	r0, 80090b8 <_Balloc+0x68>
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f605 	lsl.w	r6, r1, r5
 800908e:	1d72      	adds	r2, r6, #5
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fc9a 	bl	80099cc <_calloc_r>
 8009098:	b160      	cbz	r0, 80090b4 <_Balloc+0x64>
 800909a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800909e:	e00e      	b.n	80090be <_Balloc+0x6e>
 80090a0:	2221      	movs	r2, #33	; 0x21
 80090a2:	2104      	movs	r1, #4
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fc91 	bl	80099cc <_calloc_r>
 80090aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ac:	60f0      	str	r0, [r6, #12]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e4      	bne.n	800907e <_Balloc+0x2e>
 80090b4:	2000      	movs	r0, #0
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	6802      	ldr	r2, [r0, #0]
 80090ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090be:	2300      	movs	r3, #0
 80090c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090c4:	e7f7      	b.n	80090b6 <_Balloc+0x66>
 80090c6:	bf00      	nop
 80090c8:	0800aade 	.word	0x0800aade
 80090cc:	0800ac40 	.word	0x0800ac40

080090d0 <_Bfree>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090d4:	4605      	mov	r5, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	b976      	cbnz	r6, 80090f8 <_Bfree+0x28>
 80090da:	2010      	movs	r0, #16
 80090dc:	f7ff ff9e 	bl	800901c <malloc>
 80090e0:	4602      	mov	r2, r0
 80090e2:	6268      	str	r0, [r5, #36]	; 0x24
 80090e4:	b920      	cbnz	r0, 80090f0 <_Bfree+0x20>
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <_Bfree+0x3c>)
 80090e8:	4809      	ldr	r0, [pc, #36]	; (8009110 <_Bfree+0x40>)
 80090ea:	218a      	movs	r1, #138	; 0x8a
 80090ec:	f001 f96c 	bl	800a3c8 <__assert_func>
 80090f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090f4:	6006      	str	r6, [r0, #0]
 80090f6:	60c6      	str	r6, [r0, #12]
 80090f8:	b13c      	cbz	r4, 800910a <_Bfree+0x3a>
 80090fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090fc:	6862      	ldr	r2, [r4, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009104:	6021      	str	r1, [r4, #0]
 8009106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	0800aade 	.word	0x0800aade
 8009110:	0800ac40 	.word	0x0800ac40

08009114 <__multadd>:
 8009114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009118:	690d      	ldr	r5, [r1, #16]
 800911a:	4607      	mov	r7, r0
 800911c:	460c      	mov	r4, r1
 800911e:	461e      	mov	r6, r3
 8009120:	f101 0c14 	add.w	ip, r1, #20
 8009124:	2000      	movs	r0, #0
 8009126:	f8dc 3000 	ldr.w	r3, [ip]
 800912a:	b299      	uxth	r1, r3
 800912c:	fb02 6101 	mla	r1, r2, r1, r6
 8009130:	0c1e      	lsrs	r6, r3, #16
 8009132:	0c0b      	lsrs	r3, r1, #16
 8009134:	fb02 3306 	mla	r3, r2, r6, r3
 8009138:	b289      	uxth	r1, r1
 800913a:	3001      	adds	r0, #1
 800913c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009140:	4285      	cmp	r5, r0
 8009142:	f84c 1b04 	str.w	r1, [ip], #4
 8009146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800914a:	dcec      	bgt.n	8009126 <__multadd+0x12>
 800914c:	b30e      	cbz	r6, 8009192 <__multadd+0x7e>
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	42ab      	cmp	r3, r5
 8009152:	dc19      	bgt.n	8009188 <__multadd+0x74>
 8009154:	6861      	ldr	r1, [r4, #4]
 8009156:	4638      	mov	r0, r7
 8009158:	3101      	adds	r1, #1
 800915a:	f7ff ff79 	bl	8009050 <_Balloc>
 800915e:	4680      	mov	r8, r0
 8009160:	b928      	cbnz	r0, 800916e <__multadd+0x5a>
 8009162:	4602      	mov	r2, r0
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <__multadd+0x84>)
 8009166:	480d      	ldr	r0, [pc, #52]	; (800919c <__multadd+0x88>)
 8009168:	21b5      	movs	r1, #181	; 0xb5
 800916a:	f001 f92d 	bl	800a3c8 <__assert_func>
 800916e:	6922      	ldr	r2, [r4, #16]
 8009170:	3202      	adds	r2, #2
 8009172:	f104 010c 	add.w	r1, r4, #12
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	300c      	adds	r0, #12
 800917a:	f7fc fff1 	bl	8006160 <memcpy>
 800917e:	4621      	mov	r1, r4
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ffa5 	bl	80090d0 <_Bfree>
 8009186:	4644      	mov	r4, r8
 8009188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800918c:	3501      	adds	r5, #1
 800918e:	615e      	str	r6, [r3, #20]
 8009190:	6125      	str	r5, [r4, #16]
 8009192:	4620      	mov	r0, r4
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	0800ab50 	.word	0x0800ab50
 800919c:	0800ac40 	.word	0x0800ac40

080091a0 <__s2b>:
 80091a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	4615      	mov	r5, r2
 80091a8:	461f      	mov	r7, r3
 80091aa:	2209      	movs	r2, #9
 80091ac:	3308      	adds	r3, #8
 80091ae:	4606      	mov	r6, r0
 80091b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b4:	2100      	movs	r1, #0
 80091b6:	2201      	movs	r2, #1
 80091b8:	429a      	cmp	r2, r3
 80091ba:	db09      	blt.n	80091d0 <__s2b+0x30>
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff ff47 	bl	8009050 <_Balloc>
 80091c2:	b940      	cbnz	r0, 80091d6 <__s2b+0x36>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b19      	ldr	r3, [pc, #100]	; (800922c <__s2b+0x8c>)
 80091c8:	4819      	ldr	r0, [pc, #100]	; (8009230 <__s2b+0x90>)
 80091ca:	21ce      	movs	r1, #206	; 0xce
 80091cc:	f001 f8fc 	bl	800a3c8 <__assert_func>
 80091d0:	0052      	lsls	r2, r2, #1
 80091d2:	3101      	adds	r1, #1
 80091d4:	e7f0      	b.n	80091b8 <__s2b+0x18>
 80091d6:	9b08      	ldr	r3, [sp, #32]
 80091d8:	6143      	str	r3, [r0, #20]
 80091da:	2d09      	cmp	r5, #9
 80091dc:	f04f 0301 	mov.w	r3, #1
 80091e0:	6103      	str	r3, [r0, #16]
 80091e2:	dd16      	ble.n	8009212 <__s2b+0x72>
 80091e4:	f104 0909 	add.w	r9, r4, #9
 80091e8:	46c8      	mov	r8, r9
 80091ea:	442c      	add	r4, r5
 80091ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091f0:	4601      	mov	r1, r0
 80091f2:	3b30      	subs	r3, #48	; 0x30
 80091f4:	220a      	movs	r2, #10
 80091f6:	4630      	mov	r0, r6
 80091f8:	f7ff ff8c 	bl	8009114 <__multadd>
 80091fc:	45a0      	cmp	r8, r4
 80091fe:	d1f5      	bne.n	80091ec <__s2b+0x4c>
 8009200:	f1a5 0408 	sub.w	r4, r5, #8
 8009204:	444c      	add	r4, r9
 8009206:	1b2d      	subs	r5, r5, r4
 8009208:	1963      	adds	r3, r4, r5
 800920a:	42bb      	cmp	r3, r7
 800920c:	db04      	blt.n	8009218 <__s2b+0x78>
 800920e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009212:	340a      	adds	r4, #10
 8009214:	2509      	movs	r5, #9
 8009216:	e7f6      	b.n	8009206 <__s2b+0x66>
 8009218:	f814 3b01 	ldrb.w	r3, [r4], #1
 800921c:	4601      	mov	r1, r0
 800921e:	3b30      	subs	r3, #48	; 0x30
 8009220:	220a      	movs	r2, #10
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ff76 	bl	8009114 <__multadd>
 8009228:	e7ee      	b.n	8009208 <__s2b+0x68>
 800922a:	bf00      	nop
 800922c:	0800ab50 	.word	0x0800ab50
 8009230:	0800ac40 	.word	0x0800ac40

08009234 <__hi0bits>:
 8009234:	0c03      	lsrs	r3, r0, #16
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	b9d3      	cbnz	r3, 8009270 <__hi0bits+0x3c>
 800923a:	0400      	lsls	r0, r0, #16
 800923c:	2310      	movs	r3, #16
 800923e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009242:	bf04      	itt	eq
 8009244:	0200      	lsleq	r0, r0, #8
 8009246:	3308      	addeq	r3, #8
 8009248:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800924c:	bf04      	itt	eq
 800924e:	0100      	lsleq	r0, r0, #4
 8009250:	3304      	addeq	r3, #4
 8009252:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009256:	bf04      	itt	eq
 8009258:	0080      	lsleq	r0, r0, #2
 800925a:	3302      	addeq	r3, #2
 800925c:	2800      	cmp	r0, #0
 800925e:	db05      	blt.n	800926c <__hi0bits+0x38>
 8009260:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009264:	f103 0301 	add.w	r3, r3, #1
 8009268:	bf08      	it	eq
 800926a:	2320      	moveq	r3, #32
 800926c:	4618      	mov	r0, r3
 800926e:	4770      	bx	lr
 8009270:	2300      	movs	r3, #0
 8009272:	e7e4      	b.n	800923e <__hi0bits+0xa>

08009274 <__lo0bits>:
 8009274:	6803      	ldr	r3, [r0, #0]
 8009276:	f013 0207 	ands.w	r2, r3, #7
 800927a:	4601      	mov	r1, r0
 800927c:	d00b      	beq.n	8009296 <__lo0bits+0x22>
 800927e:	07da      	lsls	r2, r3, #31
 8009280:	d423      	bmi.n	80092ca <__lo0bits+0x56>
 8009282:	0798      	lsls	r0, r3, #30
 8009284:	bf49      	itett	mi
 8009286:	085b      	lsrmi	r3, r3, #1
 8009288:	089b      	lsrpl	r3, r3, #2
 800928a:	2001      	movmi	r0, #1
 800928c:	600b      	strmi	r3, [r1, #0]
 800928e:	bf5c      	itt	pl
 8009290:	600b      	strpl	r3, [r1, #0]
 8009292:	2002      	movpl	r0, #2
 8009294:	4770      	bx	lr
 8009296:	b298      	uxth	r0, r3
 8009298:	b9a8      	cbnz	r0, 80092c6 <__lo0bits+0x52>
 800929a:	0c1b      	lsrs	r3, r3, #16
 800929c:	2010      	movs	r0, #16
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	b90a      	cbnz	r2, 80092a6 <__lo0bits+0x32>
 80092a2:	3008      	adds	r0, #8
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	071a      	lsls	r2, r3, #28
 80092a8:	bf04      	itt	eq
 80092aa:	091b      	lsreq	r3, r3, #4
 80092ac:	3004      	addeq	r0, #4
 80092ae:	079a      	lsls	r2, r3, #30
 80092b0:	bf04      	itt	eq
 80092b2:	089b      	lsreq	r3, r3, #2
 80092b4:	3002      	addeq	r0, #2
 80092b6:	07da      	lsls	r2, r3, #31
 80092b8:	d403      	bmi.n	80092c2 <__lo0bits+0x4e>
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	f100 0001 	add.w	r0, r0, #1
 80092c0:	d005      	beq.n	80092ce <__lo0bits+0x5a>
 80092c2:	600b      	str	r3, [r1, #0]
 80092c4:	4770      	bx	lr
 80092c6:	4610      	mov	r0, r2
 80092c8:	e7e9      	b.n	800929e <__lo0bits+0x2a>
 80092ca:	2000      	movs	r0, #0
 80092cc:	4770      	bx	lr
 80092ce:	2020      	movs	r0, #32
 80092d0:	4770      	bx	lr
	...

080092d4 <__i2b>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	2101      	movs	r1, #1
 80092da:	f7ff feb9 	bl	8009050 <_Balloc>
 80092de:	4602      	mov	r2, r0
 80092e0:	b928      	cbnz	r0, 80092ee <__i2b+0x1a>
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <__i2b+0x24>)
 80092e4:	4805      	ldr	r0, [pc, #20]	; (80092fc <__i2b+0x28>)
 80092e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092ea:	f001 f86d 	bl	800a3c8 <__assert_func>
 80092ee:	2301      	movs	r3, #1
 80092f0:	6144      	str	r4, [r0, #20]
 80092f2:	6103      	str	r3, [r0, #16]
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	bf00      	nop
 80092f8:	0800ab50 	.word	0x0800ab50
 80092fc:	0800ac40 	.word	0x0800ac40

08009300 <__multiply>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4691      	mov	r9, r2
 8009306:	690a      	ldr	r2, [r1, #16]
 8009308:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800930c:	429a      	cmp	r2, r3
 800930e:	bfb8      	it	lt
 8009310:	460b      	movlt	r3, r1
 8009312:	460c      	mov	r4, r1
 8009314:	bfbc      	itt	lt
 8009316:	464c      	movlt	r4, r9
 8009318:	4699      	movlt	r9, r3
 800931a:	6927      	ldr	r7, [r4, #16]
 800931c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	6861      	ldr	r1, [r4, #4]
 8009324:	eb07 060a 	add.w	r6, r7, sl
 8009328:	42b3      	cmp	r3, r6
 800932a:	b085      	sub	sp, #20
 800932c:	bfb8      	it	lt
 800932e:	3101      	addlt	r1, #1
 8009330:	f7ff fe8e 	bl	8009050 <_Balloc>
 8009334:	b930      	cbnz	r0, 8009344 <__multiply+0x44>
 8009336:	4602      	mov	r2, r0
 8009338:	4b44      	ldr	r3, [pc, #272]	; (800944c <__multiply+0x14c>)
 800933a:	4845      	ldr	r0, [pc, #276]	; (8009450 <__multiply+0x150>)
 800933c:	f240 115d 	movw	r1, #349	; 0x15d
 8009340:	f001 f842 	bl	800a3c8 <__assert_func>
 8009344:	f100 0514 	add.w	r5, r0, #20
 8009348:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800934c:	462b      	mov	r3, r5
 800934e:	2200      	movs	r2, #0
 8009350:	4543      	cmp	r3, r8
 8009352:	d321      	bcc.n	8009398 <__multiply+0x98>
 8009354:	f104 0314 	add.w	r3, r4, #20
 8009358:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800935c:	f109 0314 	add.w	r3, r9, #20
 8009360:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009364:	9202      	str	r2, [sp, #8]
 8009366:	1b3a      	subs	r2, r7, r4
 8009368:	3a15      	subs	r2, #21
 800936a:	f022 0203 	bic.w	r2, r2, #3
 800936e:	3204      	adds	r2, #4
 8009370:	f104 0115 	add.w	r1, r4, #21
 8009374:	428f      	cmp	r7, r1
 8009376:	bf38      	it	cc
 8009378:	2204      	movcc	r2, #4
 800937a:	9201      	str	r2, [sp, #4]
 800937c:	9a02      	ldr	r2, [sp, #8]
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	d80c      	bhi.n	800939e <__multiply+0x9e>
 8009384:	2e00      	cmp	r6, #0
 8009386:	dd03      	ble.n	8009390 <__multiply+0x90>
 8009388:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800938c:	2b00      	cmp	r3, #0
 800938e:	d05a      	beq.n	8009446 <__multiply+0x146>
 8009390:	6106      	str	r6, [r0, #16]
 8009392:	b005      	add	sp, #20
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	f843 2b04 	str.w	r2, [r3], #4
 800939c:	e7d8      	b.n	8009350 <__multiply+0x50>
 800939e:	f8b3 a000 	ldrh.w	sl, [r3]
 80093a2:	f1ba 0f00 	cmp.w	sl, #0
 80093a6:	d024      	beq.n	80093f2 <__multiply+0xf2>
 80093a8:	f104 0e14 	add.w	lr, r4, #20
 80093ac:	46a9      	mov	r9, r5
 80093ae:	f04f 0c00 	mov.w	ip, #0
 80093b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093b6:	f8d9 1000 	ldr.w	r1, [r9]
 80093ba:	fa1f fb82 	uxth.w	fp, r2
 80093be:	b289      	uxth	r1, r1
 80093c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80093c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093c8:	f8d9 2000 	ldr.w	r2, [r9]
 80093cc:	4461      	add	r1, ip
 80093ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80093d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093da:	b289      	uxth	r1, r1
 80093dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093e0:	4577      	cmp	r7, lr
 80093e2:	f849 1b04 	str.w	r1, [r9], #4
 80093e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ea:	d8e2      	bhi.n	80093b2 <__multiply+0xb2>
 80093ec:	9a01      	ldr	r2, [sp, #4]
 80093ee:	f845 c002 	str.w	ip, [r5, r2]
 80093f2:	9a03      	ldr	r2, [sp, #12]
 80093f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093f8:	3304      	adds	r3, #4
 80093fa:	f1b9 0f00 	cmp.w	r9, #0
 80093fe:	d020      	beq.n	8009442 <__multiply+0x142>
 8009400:	6829      	ldr	r1, [r5, #0]
 8009402:	f104 0c14 	add.w	ip, r4, #20
 8009406:	46ae      	mov	lr, r5
 8009408:	f04f 0a00 	mov.w	sl, #0
 800940c:	f8bc b000 	ldrh.w	fp, [ip]
 8009410:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009414:	fb09 220b 	mla	r2, r9, fp, r2
 8009418:	4492      	add	sl, r2
 800941a:	b289      	uxth	r1, r1
 800941c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009420:	f84e 1b04 	str.w	r1, [lr], #4
 8009424:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009428:	f8be 1000 	ldrh.w	r1, [lr]
 800942c:	0c12      	lsrs	r2, r2, #16
 800942e:	fb09 1102 	mla	r1, r9, r2, r1
 8009432:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009436:	4567      	cmp	r7, ip
 8009438:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800943c:	d8e6      	bhi.n	800940c <__multiply+0x10c>
 800943e:	9a01      	ldr	r2, [sp, #4]
 8009440:	50a9      	str	r1, [r5, r2]
 8009442:	3504      	adds	r5, #4
 8009444:	e79a      	b.n	800937c <__multiply+0x7c>
 8009446:	3e01      	subs	r6, #1
 8009448:	e79c      	b.n	8009384 <__multiply+0x84>
 800944a:	bf00      	nop
 800944c:	0800ab50 	.word	0x0800ab50
 8009450:	0800ac40 	.word	0x0800ac40

08009454 <__pow5mult>:
 8009454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009458:	4615      	mov	r5, r2
 800945a:	f012 0203 	ands.w	r2, r2, #3
 800945e:	4606      	mov	r6, r0
 8009460:	460f      	mov	r7, r1
 8009462:	d007      	beq.n	8009474 <__pow5mult+0x20>
 8009464:	4c25      	ldr	r4, [pc, #148]	; (80094fc <__pow5mult+0xa8>)
 8009466:	3a01      	subs	r2, #1
 8009468:	2300      	movs	r3, #0
 800946a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800946e:	f7ff fe51 	bl	8009114 <__multadd>
 8009472:	4607      	mov	r7, r0
 8009474:	10ad      	asrs	r5, r5, #2
 8009476:	d03d      	beq.n	80094f4 <__pow5mult+0xa0>
 8009478:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800947a:	b97c      	cbnz	r4, 800949c <__pow5mult+0x48>
 800947c:	2010      	movs	r0, #16
 800947e:	f7ff fdcd 	bl	800901c <malloc>
 8009482:	4602      	mov	r2, r0
 8009484:	6270      	str	r0, [r6, #36]	; 0x24
 8009486:	b928      	cbnz	r0, 8009494 <__pow5mult+0x40>
 8009488:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <__pow5mult+0xac>)
 800948a:	481e      	ldr	r0, [pc, #120]	; (8009504 <__pow5mult+0xb0>)
 800948c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009490:	f000 ff9a 	bl	800a3c8 <__assert_func>
 8009494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009498:	6004      	str	r4, [r0, #0]
 800949a:	60c4      	str	r4, [r0, #12]
 800949c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094a4:	b94c      	cbnz	r4, 80094ba <__pow5mult+0x66>
 80094a6:	f240 2171 	movw	r1, #625	; 0x271
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ff12 	bl	80092d4 <__i2b>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80094b6:	4604      	mov	r4, r0
 80094b8:	6003      	str	r3, [r0, #0]
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	07eb      	lsls	r3, r5, #31
 80094c0:	d50a      	bpl.n	80094d8 <__pow5mult+0x84>
 80094c2:	4639      	mov	r1, r7
 80094c4:	4622      	mov	r2, r4
 80094c6:	4630      	mov	r0, r6
 80094c8:	f7ff ff1a 	bl	8009300 <__multiply>
 80094cc:	4639      	mov	r1, r7
 80094ce:	4680      	mov	r8, r0
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7ff fdfd 	bl	80090d0 <_Bfree>
 80094d6:	4647      	mov	r7, r8
 80094d8:	106d      	asrs	r5, r5, #1
 80094da:	d00b      	beq.n	80094f4 <__pow5mult+0xa0>
 80094dc:	6820      	ldr	r0, [r4, #0]
 80094de:	b938      	cbnz	r0, 80094f0 <__pow5mult+0x9c>
 80094e0:	4622      	mov	r2, r4
 80094e2:	4621      	mov	r1, r4
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff ff0b 	bl	8009300 <__multiply>
 80094ea:	6020      	str	r0, [r4, #0]
 80094ec:	f8c0 9000 	str.w	r9, [r0]
 80094f0:	4604      	mov	r4, r0
 80094f2:	e7e4      	b.n	80094be <__pow5mult+0x6a>
 80094f4:	4638      	mov	r0, r7
 80094f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fa:	bf00      	nop
 80094fc:	0800ad90 	.word	0x0800ad90
 8009500:	0800aade 	.word	0x0800aade
 8009504:	0800ac40 	.word	0x0800ac40

08009508 <__lshift>:
 8009508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800950c:	460c      	mov	r4, r1
 800950e:	6849      	ldr	r1, [r1, #4]
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	4607      	mov	r7, r0
 800951a:	4691      	mov	r9, r2
 800951c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009520:	f108 0601 	add.w	r6, r8, #1
 8009524:	42b3      	cmp	r3, r6
 8009526:	db0b      	blt.n	8009540 <__lshift+0x38>
 8009528:	4638      	mov	r0, r7
 800952a:	f7ff fd91 	bl	8009050 <_Balloc>
 800952e:	4605      	mov	r5, r0
 8009530:	b948      	cbnz	r0, 8009546 <__lshift+0x3e>
 8009532:	4602      	mov	r2, r0
 8009534:	4b2a      	ldr	r3, [pc, #168]	; (80095e0 <__lshift+0xd8>)
 8009536:	482b      	ldr	r0, [pc, #172]	; (80095e4 <__lshift+0xdc>)
 8009538:	f240 11d9 	movw	r1, #473	; 0x1d9
 800953c:	f000 ff44 	bl	800a3c8 <__assert_func>
 8009540:	3101      	adds	r1, #1
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	e7ee      	b.n	8009524 <__lshift+0x1c>
 8009546:	2300      	movs	r3, #0
 8009548:	f100 0114 	add.w	r1, r0, #20
 800954c:	f100 0210 	add.w	r2, r0, #16
 8009550:	4618      	mov	r0, r3
 8009552:	4553      	cmp	r3, sl
 8009554:	db37      	blt.n	80095c6 <__lshift+0xbe>
 8009556:	6920      	ldr	r0, [r4, #16]
 8009558:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800955c:	f104 0314 	add.w	r3, r4, #20
 8009560:	f019 091f 	ands.w	r9, r9, #31
 8009564:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009568:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800956c:	d02f      	beq.n	80095ce <__lshift+0xc6>
 800956e:	f1c9 0e20 	rsb	lr, r9, #32
 8009572:	468a      	mov	sl, r1
 8009574:	f04f 0c00 	mov.w	ip, #0
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	fa02 f209 	lsl.w	r2, r2, r9
 800957e:	ea42 020c 	orr.w	r2, r2, ip
 8009582:	f84a 2b04 	str.w	r2, [sl], #4
 8009586:	f853 2b04 	ldr.w	r2, [r3], #4
 800958a:	4298      	cmp	r0, r3
 800958c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009590:	d8f2      	bhi.n	8009578 <__lshift+0x70>
 8009592:	1b03      	subs	r3, r0, r4
 8009594:	3b15      	subs	r3, #21
 8009596:	f023 0303 	bic.w	r3, r3, #3
 800959a:	3304      	adds	r3, #4
 800959c:	f104 0215 	add.w	r2, r4, #21
 80095a0:	4290      	cmp	r0, r2
 80095a2:	bf38      	it	cc
 80095a4:	2304      	movcc	r3, #4
 80095a6:	f841 c003 	str.w	ip, [r1, r3]
 80095aa:	f1bc 0f00 	cmp.w	ip, #0
 80095ae:	d001      	beq.n	80095b4 <__lshift+0xac>
 80095b0:	f108 0602 	add.w	r6, r8, #2
 80095b4:	3e01      	subs	r6, #1
 80095b6:	4638      	mov	r0, r7
 80095b8:	612e      	str	r6, [r5, #16]
 80095ba:	4621      	mov	r1, r4
 80095bc:	f7ff fd88 	bl	80090d0 <_Bfree>
 80095c0:	4628      	mov	r0, r5
 80095c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ca:	3301      	adds	r3, #1
 80095cc:	e7c1      	b.n	8009552 <__lshift+0x4a>
 80095ce:	3904      	subs	r1, #4
 80095d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80095d8:	4298      	cmp	r0, r3
 80095da:	d8f9      	bhi.n	80095d0 <__lshift+0xc8>
 80095dc:	e7ea      	b.n	80095b4 <__lshift+0xac>
 80095de:	bf00      	nop
 80095e0:	0800ab50 	.word	0x0800ab50
 80095e4:	0800ac40 	.word	0x0800ac40

080095e8 <__mcmp>:
 80095e8:	b530      	push	{r4, r5, lr}
 80095ea:	6902      	ldr	r2, [r0, #16]
 80095ec:	690c      	ldr	r4, [r1, #16]
 80095ee:	1b12      	subs	r2, r2, r4
 80095f0:	d10e      	bne.n	8009610 <__mcmp+0x28>
 80095f2:	f100 0314 	add.w	r3, r0, #20
 80095f6:	3114      	adds	r1, #20
 80095f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009600:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009604:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009608:	42a5      	cmp	r5, r4
 800960a:	d003      	beq.n	8009614 <__mcmp+0x2c>
 800960c:	d305      	bcc.n	800961a <__mcmp+0x32>
 800960e:	2201      	movs	r2, #1
 8009610:	4610      	mov	r0, r2
 8009612:	bd30      	pop	{r4, r5, pc}
 8009614:	4283      	cmp	r3, r0
 8009616:	d3f3      	bcc.n	8009600 <__mcmp+0x18>
 8009618:	e7fa      	b.n	8009610 <__mcmp+0x28>
 800961a:	f04f 32ff 	mov.w	r2, #4294967295
 800961e:	e7f7      	b.n	8009610 <__mcmp+0x28>

08009620 <__mdiff>:
 8009620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	460c      	mov	r4, r1
 8009626:	4606      	mov	r6, r0
 8009628:	4611      	mov	r1, r2
 800962a:	4620      	mov	r0, r4
 800962c:	4690      	mov	r8, r2
 800962e:	f7ff ffdb 	bl	80095e8 <__mcmp>
 8009632:	1e05      	subs	r5, r0, #0
 8009634:	d110      	bne.n	8009658 <__mdiff+0x38>
 8009636:	4629      	mov	r1, r5
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff fd09 	bl	8009050 <_Balloc>
 800963e:	b930      	cbnz	r0, 800964e <__mdiff+0x2e>
 8009640:	4b3a      	ldr	r3, [pc, #232]	; (800972c <__mdiff+0x10c>)
 8009642:	4602      	mov	r2, r0
 8009644:	f240 2132 	movw	r1, #562	; 0x232
 8009648:	4839      	ldr	r0, [pc, #228]	; (8009730 <__mdiff+0x110>)
 800964a:	f000 febd 	bl	800a3c8 <__assert_func>
 800964e:	2301      	movs	r3, #1
 8009650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	bfa4      	itt	ge
 800965a:	4643      	movge	r3, r8
 800965c:	46a0      	movge	r8, r4
 800965e:	4630      	mov	r0, r6
 8009660:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009664:	bfa6      	itte	ge
 8009666:	461c      	movge	r4, r3
 8009668:	2500      	movge	r5, #0
 800966a:	2501      	movlt	r5, #1
 800966c:	f7ff fcf0 	bl	8009050 <_Balloc>
 8009670:	b920      	cbnz	r0, 800967c <__mdiff+0x5c>
 8009672:	4b2e      	ldr	r3, [pc, #184]	; (800972c <__mdiff+0x10c>)
 8009674:	4602      	mov	r2, r0
 8009676:	f44f 7110 	mov.w	r1, #576	; 0x240
 800967a:	e7e5      	b.n	8009648 <__mdiff+0x28>
 800967c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009680:	6926      	ldr	r6, [r4, #16]
 8009682:	60c5      	str	r5, [r0, #12]
 8009684:	f104 0914 	add.w	r9, r4, #20
 8009688:	f108 0514 	add.w	r5, r8, #20
 800968c:	f100 0e14 	add.w	lr, r0, #20
 8009690:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009694:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009698:	f108 0210 	add.w	r2, r8, #16
 800969c:	46f2      	mov	sl, lr
 800969e:	2100      	movs	r1, #0
 80096a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80096a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096a8:	fa1f f883 	uxth.w	r8, r3
 80096ac:	fa11 f18b 	uxtah	r1, r1, fp
 80096b0:	0c1b      	lsrs	r3, r3, #16
 80096b2:	eba1 0808 	sub.w	r8, r1, r8
 80096b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096be:	fa1f f888 	uxth.w	r8, r8
 80096c2:	1419      	asrs	r1, r3, #16
 80096c4:	454e      	cmp	r6, r9
 80096c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096ca:	f84a 3b04 	str.w	r3, [sl], #4
 80096ce:	d8e7      	bhi.n	80096a0 <__mdiff+0x80>
 80096d0:	1b33      	subs	r3, r6, r4
 80096d2:	3b15      	subs	r3, #21
 80096d4:	f023 0303 	bic.w	r3, r3, #3
 80096d8:	3304      	adds	r3, #4
 80096da:	3415      	adds	r4, #21
 80096dc:	42a6      	cmp	r6, r4
 80096de:	bf38      	it	cc
 80096e0:	2304      	movcc	r3, #4
 80096e2:	441d      	add	r5, r3
 80096e4:	4473      	add	r3, lr
 80096e6:	469e      	mov	lr, r3
 80096e8:	462e      	mov	r6, r5
 80096ea:	4566      	cmp	r6, ip
 80096ec:	d30e      	bcc.n	800970c <__mdiff+0xec>
 80096ee:	f10c 0203 	add.w	r2, ip, #3
 80096f2:	1b52      	subs	r2, r2, r5
 80096f4:	f022 0203 	bic.w	r2, r2, #3
 80096f8:	3d03      	subs	r5, #3
 80096fa:	45ac      	cmp	ip, r5
 80096fc:	bf38      	it	cc
 80096fe:	2200      	movcc	r2, #0
 8009700:	441a      	add	r2, r3
 8009702:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009706:	b17b      	cbz	r3, 8009728 <__mdiff+0x108>
 8009708:	6107      	str	r7, [r0, #16]
 800970a:	e7a3      	b.n	8009654 <__mdiff+0x34>
 800970c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009710:	fa11 f288 	uxtah	r2, r1, r8
 8009714:	1414      	asrs	r4, r2, #16
 8009716:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800971a:	b292      	uxth	r2, r2
 800971c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009720:	f84e 2b04 	str.w	r2, [lr], #4
 8009724:	1421      	asrs	r1, r4, #16
 8009726:	e7e0      	b.n	80096ea <__mdiff+0xca>
 8009728:	3f01      	subs	r7, #1
 800972a:	e7ea      	b.n	8009702 <__mdiff+0xe2>
 800972c:	0800ab50 	.word	0x0800ab50
 8009730:	0800ac40 	.word	0x0800ac40

08009734 <__ulp>:
 8009734:	b082      	sub	sp, #8
 8009736:	ed8d 0b00 	vstr	d0, [sp]
 800973a:	9b01      	ldr	r3, [sp, #4]
 800973c:	4912      	ldr	r1, [pc, #72]	; (8009788 <__ulp+0x54>)
 800973e:	4019      	ands	r1, r3
 8009740:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009744:	2900      	cmp	r1, #0
 8009746:	dd05      	ble.n	8009754 <__ulp+0x20>
 8009748:	2200      	movs	r2, #0
 800974a:	460b      	mov	r3, r1
 800974c:	ec43 2b10 	vmov	d0, r2, r3
 8009750:	b002      	add	sp, #8
 8009752:	4770      	bx	lr
 8009754:	4249      	negs	r1, r1
 8009756:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800975a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	da04      	bge.n	8009772 <__ulp+0x3e>
 8009768:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800976c:	fa41 f300 	asr.w	r3, r1, r0
 8009770:	e7ec      	b.n	800974c <__ulp+0x18>
 8009772:	f1a0 0114 	sub.w	r1, r0, #20
 8009776:	291e      	cmp	r1, #30
 8009778:	bfda      	itte	le
 800977a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800977e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009782:	2101      	movgt	r1, #1
 8009784:	460a      	mov	r2, r1
 8009786:	e7e1      	b.n	800974c <__ulp+0x18>
 8009788:	7ff00000 	.word	0x7ff00000

0800978c <__b2d>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	6905      	ldr	r5, [r0, #16]
 8009790:	f100 0714 	add.w	r7, r0, #20
 8009794:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009798:	1f2e      	subs	r6, r5, #4
 800979a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff fd48 	bl	8009234 <__hi0bits>
 80097a4:	f1c0 0320 	rsb	r3, r0, #32
 80097a8:	280a      	cmp	r0, #10
 80097aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009828 <__b2d+0x9c>
 80097ae:	600b      	str	r3, [r1, #0]
 80097b0:	dc14      	bgt.n	80097dc <__b2d+0x50>
 80097b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80097b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80097ba:	42b7      	cmp	r7, r6
 80097bc:	ea41 030c 	orr.w	r3, r1, ip
 80097c0:	bf34      	ite	cc
 80097c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097c6:	2100      	movcs	r1, #0
 80097c8:	3015      	adds	r0, #21
 80097ca:	fa04 f000 	lsl.w	r0, r4, r0
 80097ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80097d2:	ea40 0201 	orr.w	r2, r0, r1
 80097d6:	ec43 2b10 	vmov	d0, r2, r3
 80097da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097dc:	42b7      	cmp	r7, r6
 80097de:	bf3a      	itte	cc
 80097e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097e4:	f1a5 0608 	subcc.w	r6, r5, #8
 80097e8:	2100      	movcs	r1, #0
 80097ea:	380b      	subs	r0, #11
 80097ec:	d017      	beq.n	800981e <__b2d+0x92>
 80097ee:	f1c0 0c20 	rsb	ip, r0, #32
 80097f2:	fa04 f500 	lsl.w	r5, r4, r0
 80097f6:	42be      	cmp	r6, r7
 80097f8:	fa21 f40c 	lsr.w	r4, r1, ip
 80097fc:	ea45 0504 	orr.w	r5, r5, r4
 8009800:	bf8c      	ite	hi
 8009802:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009806:	2400      	movls	r4, #0
 8009808:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800980c:	fa01 f000 	lsl.w	r0, r1, r0
 8009810:	fa24 f40c 	lsr.w	r4, r4, ip
 8009814:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009818:	ea40 0204 	orr.w	r2, r0, r4
 800981c:	e7db      	b.n	80097d6 <__b2d+0x4a>
 800981e:	ea44 030c 	orr.w	r3, r4, ip
 8009822:	460a      	mov	r2, r1
 8009824:	e7d7      	b.n	80097d6 <__b2d+0x4a>
 8009826:	bf00      	nop
 8009828:	3ff00000 	.word	0x3ff00000

0800982c <__d2b>:
 800982c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009830:	4689      	mov	r9, r1
 8009832:	2101      	movs	r1, #1
 8009834:	ec57 6b10 	vmov	r6, r7, d0
 8009838:	4690      	mov	r8, r2
 800983a:	f7ff fc09 	bl	8009050 <_Balloc>
 800983e:	4604      	mov	r4, r0
 8009840:	b930      	cbnz	r0, 8009850 <__d2b+0x24>
 8009842:	4602      	mov	r2, r0
 8009844:	4b25      	ldr	r3, [pc, #148]	; (80098dc <__d2b+0xb0>)
 8009846:	4826      	ldr	r0, [pc, #152]	; (80098e0 <__d2b+0xb4>)
 8009848:	f240 310a 	movw	r1, #778	; 0x30a
 800984c:	f000 fdbc 	bl	800a3c8 <__assert_func>
 8009850:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009854:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009858:	bb35      	cbnz	r5, 80098a8 <__d2b+0x7c>
 800985a:	2e00      	cmp	r6, #0
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	d028      	beq.n	80098b2 <__d2b+0x86>
 8009860:	4668      	mov	r0, sp
 8009862:	9600      	str	r6, [sp, #0]
 8009864:	f7ff fd06 	bl	8009274 <__lo0bits>
 8009868:	9900      	ldr	r1, [sp, #0]
 800986a:	b300      	cbz	r0, 80098ae <__d2b+0x82>
 800986c:	9a01      	ldr	r2, [sp, #4]
 800986e:	f1c0 0320 	rsb	r3, r0, #32
 8009872:	fa02 f303 	lsl.w	r3, r2, r3
 8009876:	430b      	orrs	r3, r1
 8009878:	40c2      	lsrs	r2, r0
 800987a:	6163      	str	r3, [r4, #20]
 800987c:	9201      	str	r2, [sp, #4]
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	61a3      	str	r3, [r4, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	bf14      	ite	ne
 8009886:	2202      	movne	r2, #2
 8009888:	2201      	moveq	r2, #1
 800988a:	6122      	str	r2, [r4, #16]
 800988c:	b1d5      	cbz	r5, 80098c4 <__d2b+0x98>
 800988e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009892:	4405      	add	r5, r0
 8009894:	f8c9 5000 	str.w	r5, [r9]
 8009898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800989c:	f8c8 0000 	str.w	r0, [r8]
 80098a0:	4620      	mov	r0, r4
 80098a2:	b003      	add	sp, #12
 80098a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098ac:	e7d5      	b.n	800985a <__d2b+0x2e>
 80098ae:	6161      	str	r1, [r4, #20]
 80098b0:	e7e5      	b.n	800987e <__d2b+0x52>
 80098b2:	a801      	add	r0, sp, #4
 80098b4:	f7ff fcde 	bl	8009274 <__lo0bits>
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	6163      	str	r3, [r4, #20]
 80098bc:	2201      	movs	r2, #1
 80098be:	6122      	str	r2, [r4, #16]
 80098c0:	3020      	adds	r0, #32
 80098c2:	e7e3      	b.n	800988c <__d2b+0x60>
 80098c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098cc:	f8c9 0000 	str.w	r0, [r9]
 80098d0:	6918      	ldr	r0, [r3, #16]
 80098d2:	f7ff fcaf 	bl	8009234 <__hi0bits>
 80098d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098da:	e7df      	b.n	800989c <__d2b+0x70>
 80098dc:	0800ab50 	.word	0x0800ab50
 80098e0:	0800ac40 	.word	0x0800ac40

080098e4 <__ratio>:
 80098e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	4688      	mov	r8, r1
 80098ea:	4669      	mov	r1, sp
 80098ec:	4681      	mov	r9, r0
 80098ee:	f7ff ff4d 	bl	800978c <__b2d>
 80098f2:	a901      	add	r1, sp, #4
 80098f4:	4640      	mov	r0, r8
 80098f6:	ec55 4b10 	vmov	r4, r5, d0
 80098fa:	ee10 aa10 	vmov	sl, s0
 80098fe:	f7ff ff45 	bl	800978c <__b2d>
 8009902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009906:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800990a:	1a59      	subs	r1, r3, r1
 800990c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009916:	ec57 6b10 	vmov	r6, r7, d0
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfd6      	itet	le
 800991e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009922:	462a      	movgt	r2, r5
 8009924:	463a      	movle	r2, r7
 8009926:	46ab      	mov	fp, r5
 8009928:	bfd6      	itet	le
 800992a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800992e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009932:	ee00 3a90 	vmovle	s1, r3
 8009936:	ec4b ab17 	vmov	d7, sl, fp
 800993a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800993e:	b003      	add	sp, #12
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009944 <__copybits>:
 8009944:	3901      	subs	r1, #1
 8009946:	b570      	push	{r4, r5, r6, lr}
 8009948:	1149      	asrs	r1, r1, #5
 800994a:	6914      	ldr	r4, [r2, #16]
 800994c:	3101      	adds	r1, #1
 800994e:	f102 0314 	add.w	r3, r2, #20
 8009952:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009956:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800995a:	1f05      	subs	r5, r0, #4
 800995c:	42a3      	cmp	r3, r4
 800995e:	d30c      	bcc.n	800997a <__copybits+0x36>
 8009960:	1aa3      	subs	r3, r4, r2
 8009962:	3b11      	subs	r3, #17
 8009964:	f023 0303 	bic.w	r3, r3, #3
 8009968:	3211      	adds	r2, #17
 800996a:	42a2      	cmp	r2, r4
 800996c:	bf88      	it	hi
 800996e:	2300      	movhi	r3, #0
 8009970:	4418      	add	r0, r3
 8009972:	2300      	movs	r3, #0
 8009974:	4288      	cmp	r0, r1
 8009976:	d305      	bcc.n	8009984 <__copybits+0x40>
 8009978:	bd70      	pop	{r4, r5, r6, pc}
 800997a:	f853 6b04 	ldr.w	r6, [r3], #4
 800997e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009982:	e7eb      	b.n	800995c <__copybits+0x18>
 8009984:	f840 3b04 	str.w	r3, [r0], #4
 8009988:	e7f4      	b.n	8009974 <__copybits+0x30>

0800998a <__any_on>:
 800998a:	f100 0214 	add.w	r2, r0, #20
 800998e:	6900      	ldr	r0, [r0, #16]
 8009990:	114b      	asrs	r3, r1, #5
 8009992:	4298      	cmp	r0, r3
 8009994:	b510      	push	{r4, lr}
 8009996:	db11      	blt.n	80099bc <__any_on+0x32>
 8009998:	dd0a      	ble.n	80099b0 <__any_on+0x26>
 800999a:	f011 011f 	ands.w	r1, r1, #31
 800999e:	d007      	beq.n	80099b0 <__any_on+0x26>
 80099a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099a4:	fa24 f001 	lsr.w	r0, r4, r1
 80099a8:	fa00 f101 	lsl.w	r1, r0, r1
 80099ac:	428c      	cmp	r4, r1
 80099ae:	d10b      	bne.n	80099c8 <__any_on+0x3e>
 80099b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d803      	bhi.n	80099c0 <__any_on+0x36>
 80099b8:	2000      	movs	r0, #0
 80099ba:	bd10      	pop	{r4, pc}
 80099bc:	4603      	mov	r3, r0
 80099be:	e7f7      	b.n	80099b0 <__any_on+0x26>
 80099c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d0f5      	beq.n	80099b4 <__any_on+0x2a>
 80099c8:	2001      	movs	r0, #1
 80099ca:	e7f6      	b.n	80099ba <__any_on+0x30>

080099cc <_calloc_r>:
 80099cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ce:	fba1 2402 	umull	r2, r4, r1, r2
 80099d2:	b94c      	cbnz	r4, 80099e8 <_calloc_r+0x1c>
 80099d4:	4611      	mov	r1, r2
 80099d6:	9201      	str	r2, [sp, #4]
 80099d8:	f000 f87a 	bl	8009ad0 <_malloc_r>
 80099dc:	9a01      	ldr	r2, [sp, #4]
 80099de:	4605      	mov	r5, r0
 80099e0:	b930      	cbnz	r0, 80099f0 <_calloc_r+0x24>
 80099e2:	4628      	mov	r0, r5
 80099e4:	b003      	add	sp, #12
 80099e6:	bd30      	pop	{r4, r5, pc}
 80099e8:	220c      	movs	r2, #12
 80099ea:	6002      	str	r2, [r0, #0]
 80099ec:	2500      	movs	r5, #0
 80099ee:	e7f8      	b.n	80099e2 <_calloc_r+0x16>
 80099f0:	4621      	mov	r1, r4
 80099f2:	f7fc fbc3 	bl	800617c <memset>
 80099f6:	e7f4      	b.n	80099e2 <_calloc_r+0x16>

080099f8 <_free_r>:
 80099f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fa:	2900      	cmp	r1, #0
 80099fc:	d044      	beq.n	8009a88 <_free_r+0x90>
 80099fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a02:	9001      	str	r0, [sp, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f1a1 0404 	sub.w	r4, r1, #4
 8009a0a:	bfb8      	it	lt
 8009a0c:	18e4      	addlt	r4, r4, r3
 8009a0e:	f000 fe6f 	bl	800a6f0 <__malloc_lock>
 8009a12:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <_free_r+0x94>)
 8009a14:	9801      	ldr	r0, [sp, #4]
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	b933      	cbnz	r3, 8009a28 <_free_r+0x30>
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	6014      	str	r4, [r2, #0]
 8009a1e:	b003      	add	sp, #12
 8009a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a24:	f000 be6a 	b.w	800a6fc <__malloc_unlock>
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	d908      	bls.n	8009a3e <_free_r+0x46>
 8009a2c:	6825      	ldr	r5, [r4, #0]
 8009a2e:	1961      	adds	r1, r4, r5
 8009a30:	428b      	cmp	r3, r1
 8009a32:	bf01      	itttt	eq
 8009a34:	6819      	ldreq	r1, [r3, #0]
 8009a36:	685b      	ldreq	r3, [r3, #4]
 8009a38:	1949      	addeq	r1, r1, r5
 8009a3a:	6021      	streq	r1, [r4, #0]
 8009a3c:	e7ed      	b.n	8009a1a <_free_r+0x22>
 8009a3e:	461a      	mov	r2, r3
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	b10b      	cbz	r3, 8009a48 <_free_r+0x50>
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	d9fa      	bls.n	8009a3e <_free_r+0x46>
 8009a48:	6811      	ldr	r1, [r2, #0]
 8009a4a:	1855      	adds	r5, r2, r1
 8009a4c:	42a5      	cmp	r5, r4
 8009a4e:	d10b      	bne.n	8009a68 <_free_r+0x70>
 8009a50:	6824      	ldr	r4, [r4, #0]
 8009a52:	4421      	add	r1, r4
 8009a54:	1854      	adds	r4, r2, r1
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	6011      	str	r1, [r2, #0]
 8009a5a:	d1e0      	bne.n	8009a1e <_free_r+0x26>
 8009a5c:	681c      	ldr	r4, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	6053      	str	r3, [r2, #4]
 8009a62:	4421      	add	r1, r4
 8009a64:	6011      	str	r1, [r2, #0]
 8009a66:	e7da      	b.n	8009a1e <_free_r+0x26>
 8009a68:	d902      	bls.n	8009a70 <_free_r+0x78>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	e7d6      	b.n	8009a1e <_free_r+0x26>
 8009a70:	6825      	ldr	r5, [r4, #0]
 8009a72:	1961      	adds	r1, r4, r5
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf04      	itt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	bf04      	itt	eq
 8009a80:	1949      	addeq	r1, r1, r5
 8009a82:	6021      	streq	r1, [r4, #0]
 8009a84:	6054      	str	r4, [r2, #4]
 8009a86:	e7ca      	b.n	8009a1e <_free_r+0x26>
 8009a88:	b003      	add	sp, #12
 8009a8a:	bd30      	pop	{r4, r5, pc}
 8009a8c:	240003b8 	.word	0x240003b8

08009a90 <sbrk_aligned>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	4e0e      	ldr	r6, [pc, #56]	; (8009acc <sbrk_aligned+0x3c>)
 8009a94:	460c      	mov	r4, r1
 8009a96:	6831      	ldr	r1, [r6, #0]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b911      	cbnz	r1, 8009aa2 <sbrk_aligned+0x12>
 8009a9c:	f000 fb4c 	bl	800a138 <_sbrk_r>
 8009aa0:	6030      	str	r0, [r6, #0]
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 fb47 	bl	800a138 <_sbrk_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d00a      	beq.n	8009ac4 <sbrk_aligned+0x34>
 8009aae:	1cc4      	adds	r4, r0, #3
 8009ab0:	f024 0403 	bic.w	r4, r4, #3
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	d007      	beq.n	8009ac8 <sbrk_aligned+0x38>
 8009ab8:	1a21      	subs	r1, r4, r0
 8009aba:	4628      	mov	r0, r5
 8009abc:	f000 fb3c 	bl	800a138 <_sbrk_r>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d101      	bne.n	8009ac8 <sbrk_aligned+0x38>
 8009ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac8:	4620      	mov	r0, r4
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	240003bc 	.word	0x240003bc

08009ad0 <_malloc_r>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	1ccd      	adds	r5, r1, #3
 8009ad6:	f025 0503 	bic.w	r5, r5, #3
 8009ada:	3508      	adds	r5, #8
 8009adc:	2d0c      	cmp	r5, #12
 8009ade:	bf38      	it	cc
 8009ae0:	250c      	movcc	r5, #12
 8009ae2:	2d00      	cmp	r5, #0
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	db01      	blt.n	8009aec <_malloc_r+0x1c>
 8009ae8:	42a9      	cmp	r1, r5
 8009aea:	d905      	bls.n	8009af8 <_malloc_r+0x28>
 8009aec:	230c      	movs	r3, #12
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	2600      	movs	r6, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	4e2e      	ldr	r6, [pc, #184]	; (8009bb4 <_malloc_r+0xe4>)
 8009afa:	f000 fdf9 	bl	800a6f0 <__malloc_lock>
 8009afe:	6833      	ldr	r3, [r6, #0]
 8009b00:	461c      	mov	r4, r3
 8009b02:	bb34      	cbnz	r4, 8009b52 <_malloc_r+0x82>
 8009b04:	4629      	mov	r1, r5
 8009b06:	4638      	mov	r0, r7
 8009b08:	f7ff ffc2 	bl	8009a90 <sbrk_aligned>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	4604      	mov	r4, r0
 8009b10:	d14d      	bne.n	8009bae <_malloc_r+0xde>
 8009b12:	6834      	ldr	r4, [r6, #0]
 8009b14:	4626      	mov	r6, r4
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	d140      	bne.n	8009b9c <_malloc_r+0xcc>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4638      	mov	r0, r7
 8009b20:	eb04 0803 	add.w	r8, r4, r3
 8009b24:	f000 fb08 	bl	800a138 <_sbrk_r>
 8009b28:	4580      	cmp	r8, r0
 8009b2a:	d13a      	bne.n	8009ba2 <_malloc_r+0xd2>
 8009b2c:	6821      	ldr	r1, [r4, #0]
 8009b2e:	3503      	adds	r5, #3
 8009b30:	1a6d      	subs	r5, r5, r1
 8009b32:	f025 0503 	bic.w	r5, r5, #3
 8009b36:	3508      	adds	r5, #8
 8009b38:	2d0c      	cmp	r5, #12
 8009b3a:	bf38      	it	cc
 8009b3c:	250c      	movcc	r5, #12
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4638      	mov	r0, r7
 8009b42:	f7ff ffa5 	bl	8009a90 <sbrk_aligned>
 8009b46:	3001      	adds	r0, #1
 8009b48:	d02b      	beq.n	8009ba2 <_malloc_r+0xd2>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	442b      	add	r3, r5
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	e00e      	b.n	8009b70 <_malloc_r+0xa0>
 8009b52:	6822      	ldr	r2, [r4, #0]
 8009b54:	1b52      	subs	r2, r2, r5
 8009b56:	d41e      	bmi.n	8009b96 <_malloc_r+0xc6>
 8009b58:	2a0b      	cmp	r2, #11
 8009b5a:	d916      	bls.n	8009b8a <_malloc_r+0xba>
 8009b5c:	1961      	adds	r1, r4, r5
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	6025      	str	r5, [r4, #0]
 8009b62:	bf18      	it	ne
 8009b64:	6059      	strne	r1, [r3, #4]
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	bf08      	it	eq
 8009b6a:	6031      	streq	r1, [r6, #0]
 8009b6c:	5162      	str	r2, [r4, r5]
 8009b6e:	604b      	str	r3, [r1, #4]
 8009b70:	4638      	mov	r0, r7
 8009b72:	f104 060b 	add.w	r6, r4, #11
 8009b76:	f000 fdc1 	bl	800a6fc <__malloc_unlock>
 8009b7a:	f026 0607 	bic.w	r6, r6, #7
 8009b7e:	1d23      	adds	r3, r4, #4
 8009b80:	1af2      	subs	r2, r6, r3
 8009b82:	d0b6      	beq.n	8009af2 <_malloc_r+0x22>
 8009b84:	1b9b      	subs	r3, r3, r6
 8009b86:	50a3      	str	r3, [r4, r2]
 8009b88:	e7b3      	b.n	8009af2 <_malloc_r+0x22>
 8009b8a:	6862      	ldr	r2, [r4, #4]
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	bf0c      	ite	eq
 8009b90:	6032      	streq	r2, [r6, #0]
 8009b92:	605a      	strne	r2, [r3, #4]
 8009b94:	e7ec      	b.n	8009b70 <_malloc_r+0xa0>
 8009b96:	4623      	mov	r3, r4
 8009b98:	6864      	ldr	r4, [r4, #4]
 8009b9a:	e7b2      	b.n	8009b02 <_malloc_r+0x32>
 8009b9c:	4634      	mov	r4, r6
 8009b9e:	6876      	ldr	r6, [r6, #4]
 8009ba0:	e7b9      	b.n	8009b16 <_malloc_r+0x46>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	603b      	str	r3, [r7, #0]
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	f000 fda8 	bl	800a6fc <__malloc_unlock>
 8009bac:	e7a1      	b.n	8009af2 <_malloc_r+0x22>
 8009bae:	6025      	str	r5, [r4, #0]
 8009bb0:	e7de      	b.n	8009b70 <_malloc_r+0xa0>
 8009bb2:	bf00      	nop
 8009bb4:	240003b8 	.word	0x240003b8

08009bb8 <__ssputs_r>:
 8009bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	688e      	ldr	r6, [r1, #8]
 8009bbe:	429e      	cmp	r6, r3
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	4690      	mov	r8, r2
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	d838      	bhi.n	8009c3c <__ssputs_r+0x84>
 8009bca:	898a      	ldrh	r2, [r1, #12]
 8009bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bd0:	d032      	beq.n	8009c38 <__ssputs_r+0x80>
 8009bd2:	6825      	ldr	r5, [r4, #0]
 8009bd4:	6909      	ldr	r1, [r1, #16]
 8009bd6:	eba5 0901 	sub.w	r9, r5, r1
 8009bda:	6965      	ldr	r5, [r4, #20]
 8009bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009be0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009be4:	3301      	adds	r3, #1
 8009be6:	444b      	add	r3, r9
 8009be8:	106d      	asrs	r5, r5, #1
 8009bea:	429d      	cmp	r5, r3
 8009bec:	bf38      	it	cc
 8009bee:	461d      	movcc	r5, r3
 8009bf0:	0553      	lsls	r3, r2, #21
 8009bf2:	d531      	bpl.n	8009c58 <__ssputs_r+0xa0>
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7ff ff6b 	bl	8009ad0 <_malloc_r>
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	b950      	cbnz	r0, 8009c14 <__ssputs_r+0x5c>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	f8ca 3000 	str.w	r3, [sl]
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c14:	6921      	ldr	r1, [r4, #16]
 8009c16:	464a      	mov	r2, r9
 8009c18:	f7fc faa2 	bl	8006160 <memcpy>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	6126      	str	r6, [r4, #16]
 8009c2a:	6165      	str	r5, [r4, #20]
 8009c2c:	444e      	add	r6, r9
 8009c2e:	eba5 0509 	sub.w	r5, r5, r9
 8009c32:	6026      	str	r6, [r4, #0]
 8009c34:	60a5      	str	r5, [r4, #8]
 8009c36:	463e      	mov	r6, r7
 8009c38:	42be      	cmp	r6, r7
 8009c3a:	d900      	bls.n	8009c3e <__ssputs_r+0x86>
 8009c3c:	463e      	mov	r6, r7
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	4632      	mov	r2, r6
 8009c42:	4641      	mov	r1, r8
 8009c44:	f000 fd3a 	bl	800a6bc <memmove>
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	1b9b      	subs	r3, r3, r6
 8009c4c:	60a3      	str	r3, [r4, #8]
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	4433      	add	r3, r6
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	2000      	movs	r0, #0
 8009c56:	e7db      	b.n	8009c10 <__ssputs_r+0x58>
 8009c58:	462a      	mov	r2, r5
 8009c5a:	f000 fd55 	bl	800a708 <_realloc_r>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d1e1      	bne.n	8009c28 <__ssputs_r+0x70>
 8009c64:	6921      	ldr	r1, [r4, #16]
 8009c66:	4650      	mov	r0, sl
 8009c68:	f7ff fec6 	bl	80099f8 <_free_r>
 8009c6c:	e7c7      	b.n	8009bfe <__ssputs_r+0x46>
	...

08009c70 <_svfiprintf_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	4698      	mov	r8, r3
 8009c76:	898b      	ldrh	r3, [r1, #12]
 8009c78:	061b      	lsls	r3, r3, #24
 8009c7a:	b09d      	sub	sp, #116	; 0x74
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	460d      	mov	r5, r1
 8009c80:	4614      	mov	r4, r2
 8009c82:	d50e      	bpl.n	8009ca2 <_svfiprintf_r+0x32>
 8009c84:	690b      	ldr	r3, [r1, #16]
 8009c86:	b963      	cbnz	r3, 8009ca2 <_svfiprintf_r+0x32>
 8009c88:	2140      	movs	r1, #64	; 0x40
 8009c8a:	f7ff ff21 	bl	8009ad0 <_malloc_r>
 8009c8e:	6028      	str	r0, [r5, #0]
 8009c90:	6128      	str	r0, [r5, #16]
 8009c92:	b920      	cbnz	r0, 8009c9e <_svfiprintf_r+0x2e>
 8009c94:	230c      	movs	r3, #12
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	e0d1      	b.n	8009e42 <_svfiprintf_r+0x1d2>
 8009c9e:	2340      	movs	r3, #64	; 0x40
 8009ca0:	616b      	str	r3, [r5, #20]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca6:	2320      	movs	r3, #32
 8009ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cb0:	2330      	movs	r3, #48	; 0x30
 8009cb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e5c <_svfiprintf_r+0x1ec>
 8009cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cba:	f04f 0901 	mov.w	r9, #1
 8009cbe:	4623      	mov	r3, r4
 8009cc0:	469a      	mov	sl, r3
 8009cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc6:	b10a      	cbz	r2, 8009ccc <_svfiprintf_r+0x5c>
 8009cc8:	2a25      	cmp	r2, #37	; 0x25
 8009cca:	d1f9      	bne.n	8009cc0 <_svfiprintf_r+0x50>
 8009ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd0:	d00b      	beq.n	8009cea <_svfiprintf_r+0x7a>
 8009cd2:	465b      	mov	r3, fp
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff ff6d 	bl	8009bb8 <__ssputs_r>
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f000 80aa 	beq.w	8009e38 <_svfiprintf_r+0x1c8>
 8009ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce6:	445a      	add	r2, fp
 8009ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cea:	f89a 3000 	ldrb.w	r3, [sl]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 80a2 	beq.w	8009e38 <_svfiprintf_r+0x1c8>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cfe:	f10a 0a01 	add.w	sl, sl, #1
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	9307      	str	r3, [sp, #28]
 8009d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d0c:	4654      	mov	r4, sl
 8009d0e:	2205      	movs	r2, #5
 8009d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d14:	4851      	ldr	r0, [pc, #324]	; (8009e5c <_svfiprintf_r+0x1ec>)
 8009d16:	f7f6 faeb 	bl	80002f0 <memchr>
 8009d1a:	9a04      	ldr	r2, [sp, #16]
 8009d1c:	b9d8      	cbnz	r0, 8009d56 <_svfiprintf_r+0xe6>
 8009d1e:	06d0      	lsls	r0, r2, #27
 8009d20:	bf44      	itt	mi
 8009d22:	2320      	movmi	r3, #32
 8009d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d28:	0711      	lsls	r1, r2, #28
 8009d2a:	bf44      	itt	mi
 8009d2c:	232b      	movmi	r3, #43	; 0x2b
 8009d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d32:	f89a 3000 	ldrb.w	r3, [sl]
 8009d36:	2b2a      	cmp	r3, #42	; 0x2a
 8009d38:	d015      	beq.n	8009d66 <_svfiprintf_r+0xf6>
 8009d3a:	9a07      	ldr	r2, [sp, #28]
 8009d3c:	4654      	mov	r4, sl
 8009d3e:	2000      	movs	r0, #0
 8009d40:	f04f 0c0a 	mov.w	ip, #10
 8009d44:	4621      	mov	r1, r4
 8009d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d4a:	3b30      	subs	r3, #48	; 0x30
 8009d4c:	2b09      	cmp	r3, #9
 8009d4e:	d94e      	bls.n	8009dee <_svfiprintf_r+0x17e>
 8009d50:	b1b0      	cbz	r0, 8009d80 <_svfiprintf_r+0x110>
 8009d52:	9207      	str	r2, [sp, #28]
 8009d54:	e014      	b.n	8009d80 <_svfiprintf_r+0x110>
 8009d56:	eba0 0308 	sub.w	r3, r0, r8
 8009d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	46a2      	mov	sl, r4
 8009d64:	e7d2      	b.n	8009d0c <_svfiprintf_r+0x9c>
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	1d19      	adds	r1, r3, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	9103      	str	r1, [sp, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	bfbb      	ittet	lt
 8009d72:	425b      	neglt	r3, r3
 8009d74:	f042 0202 	orrlt.w	r2, r2, #2
 8009d78:	9307      	strge	r3, [sp, #28]
 8009d7a:	9307      	strlt	r3, [sp, #28]
 8009d7c:	bfb8      	it	lt
 8009d7e:	9204      	strlt	r2, [sp, #16]
 8009d80:	7823      	ldrb	r3, [r4, #0]
 8009d82:	2b2e      	cmp	r3, #46	; 0x2e
 8009d84:	d10c      	bne.n	8009da0 <_svfiprintf_r+0x130>
 8009d86:	7863      	ldrb	r3, [r4, #1]
 8009d88:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8a:	d135      	bne.n	8009df8 <_svfiprintf_r+0x188>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	1d1a      	adds	r2, r3, #4
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	9203      	str	r2, [sp, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bfb8      	it	lt
 8009d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d9c:	3402      	adds	r4, #2
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e6c <_svfiprintf_r+0x1fc>
 8009da4:	7821      	ldrb	r1, [r4, #0]
 8009da6:	2203      	movs	r2, #3
 8009da8:	4650      	mov	r0, sl
 8009daa:	f7f6 faa1 	bl	80002f0 <memchr>
 8009dae:	b140      	cbz	r0, 8009dc2 <_svfiprintf_r+0x152>
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	eba0 000a 	sub.w	r0, r0, sl
 8009db6:	fa03 f000 	lsl.w	r0, r3, r0
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	4303      	orrs	r3, r0
 8009dbe:	3401      	adds	r4, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc6:	4826      	ldr	r0, [pc, #152]	; (8009e60 <_svfiprintf_r+0x1f0>)
 8009dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dcc:	2206      	movs	r2, #6
 8009dce:	f7f6 fa8f 	bl	80002f0 <memchr>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d038      	beq.n	8009e48 <_svfiprintf_r+0x1d8>
 8009dd6:	4b23      	ldr	r3, [pc, #140]	; (8009e64 <_svfiprintf_r+0x1f4>)
 8009dd8:	bb1b      	cbnz	r3, 8009e22 <_svfiprintf_r+0x1b2>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	3307      	adds	r3, #7
 8009dde:	f023 0307 	bic.w	r3, r3, #7
 8009de2:	3308      	adds	r3, #8
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de8:	4433      	add	r3, r6
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
 8009dec:	e767      	b.n	8009cbe <_svfiprintf_r+0x4e>
 8009dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df2:	460c      	mov	r4, r1
 8009df4:	2001      	movs	r0, #1
 8009df6:	e7a5      	b.n	8009d44 <_svfiprintf_r+0xd4>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	3401      	adds	r4, #1
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f04f 0c0a 	mov.w	ip, #10
 8009e04:	4620      	mov	r0, r4
 8009e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0a:	3a30      	subs	r2, #48	; 0x30
 8009e0c:	2a09      	cmp	r2, #9
 8009e0e:	d903      	bls.n	8009e18 <_svfiprintf_r+0x1a8>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0c5      	beq.n	8009da0 <_svfiprintf_r+0x130>
 8009e14:	9105      	str	r1, [sp, #20]
 8009e16:	e7c3      	b.n	8009da0 <_svfiprintf_r+0x130>
 8009e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e7f0      	b.n	8009e04 <_svfiprintf_r+0x194>
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	462a      	mov	r2, r5
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <_svfiprintf_r+0x1f8>)
 8009e2a:	a904      	add	r1, sp, #16
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f7fc fa3f 	bl	80062b0 <_printf_float>
 8009e32:	1c42      	adds	r2, r0, #1
 8009e34:	4606      	mov	r6, r0
 8009e36:	d1d6      	bne.n	8009de6 <_svfiprintf_r+0x176>
 8009e38:	89ab      	ldrh	r3, [r5, #12]
 8009e3a:	065b      	lsls	r3, r3, #25
 8009e3c:	f53f af2c 	bmi.w	8009c98 <_svfiprintf_r+0x28>
 8009e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e42:	b01d      	add	sp, #116	; 0x74
 8009e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e48:	ab03      	add	r3, sp, #12
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	462a      	mov	r2, r5
 8009e4e:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <_svfiprintf_r+0x1f8>)
 8009e50:	a904      	add	r1, sp, #16
 8009e52:	4638      	mov	r0, r7
 8009e54:	f7fc fcb8 	bl	80067c8 <_printf_i>
 8009e58:	e7eb      	b.n	8009e32 <_svfiprintf_r+0x1c2>
 8009e5a:	bf00      	nop
 8009e5c:	0800ad9c 	.word	0x0800ad9c
 8009e60:	0800ada6 	.word	0x0800ada6
 8009e64:	080062b1 	.word	0x080062b1
 8009e68:	08009bb9 	.word	0x08009bb9
 8009e6c:	0800ada2 	.word	0x0800ada2

08009e70 <__sfputc_r>:
 8009e70:	6893      	ldr	r3, [r2, #8]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	b410      	push	{r4}
 8009e78:	6093      	str	r3, [r2, #8]
 8009e7a:	da08      	bge.n	8009e8e <__sfputc_r+0x1e>
 8009e7c:	6994      	ldr	r4, [r2, #24]
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	db01      	blt.n	8009e86 <__sfputc_r+0x16>
 8009e82:	290a      	cmp	r1, #10
 8009e84:	d103      	bne.n	8009e8e <__sfputc_r+0x1e>
 8009e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e8a:	f000 b9bd 	b.w	800a208 <__swbuf_r>
 8009e8e:	6813      	ldr	r3, [r2, #0]
 8009e90:	1c58      	adds	r0, r3, #1
 8009e92:	6010      	str	r0, [r2, #0]
 8009e94:	7019      	strb	r1, [r3, #0]
 8009e96:	4608      	mov	r0, r1
 8009e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <__sfputs_r>:
 8009e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	460f      	mov	r7, r1
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	18d5      	adds	r5, r2, r3
 8009ea8:	42ac      	cmp	r4, r5
 8009eaa:	d101      	bne.n	8009eb0 <__sfputs_r+0x12>
 8009eac:	2000      	movs	r0, #0
 8009eae:	e007      	b.n	8009ec0 <__sfputs_r+0x22>
 8009eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb4:	463a      	mov	r2, r7
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ffda 	bl	8009e70 <__sfputc_r>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d1f3      	bne.n	8009ea8 <__sfputs_r+0xa>
 8009ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ec4 <_vfiprintf_r>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	460d      	mov	r5, r1
 8009eca:	b09d      	sub	sp, #116	; 0x74
 8009ecc:	4614      	mov	r4, r2
 8009ece:	4698      	mov	r8, r3
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	b118      	cbz	r0, 8009edc <_vfiprintf_r+0x18>
 8009ed4:	6983      	ldr	r3, [r0, #24]
 8009ed6:	b90b      	cbnz	r3, 8009edc <_vfiprintf_r+0x18>
 8009ed8:	f7fe fc8c 	bl	80087f4 <__sinit>
 8009edc:	4b89      	ldr	r3, [pc, #548]	; (800a104 <_vfiprintf_r+0x240>)
 8009ede:	429d      	cmp	r5, r3
 8009ee0:	d11b      	bne.n	8009f1a <_vfiprintf_r+0x56>
 8009ee2:	6875      	ldr	r5, [r6, #4]
 8009ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee6:	07d9      	lsls	r1, r3, #31
 8009ee8:	d405      	bmi.n	8009ef6 <_vfiprintf_r+0x32>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	059a      	lsls	r2, r3, #22
 8009eee:	d402      	bmi.n	8009ef6 <_vfiprintf_r+0x32>
 8009ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef2:	f7ff f890 	bl	8009016 <__retarget_lock_acquire_recursive>
 8009ef6:	89ab      	ldrh	r3, [r5, #12]
 8009ef8:	071b      	lsls	r3, r3, #28
 8009efa:	d501      	bpl.n	8009f00 <_vfiprintf_r+0x3c>
 8009efc:	692b      	ldr	r3, [r5, #16]
 8009efe:	b9eb      	cbnz	r3, 8009f3c <_vfiprintf_r+0x78>
 8009f00:	4629      	mov	r1, r5
 8009f02:	4630      	mov	r0, r6
 8009f04:	f000 f9f2 	bl	800a2ec <__swsetup_r>
 8009f08:	b1c0      	cbz	r0, 8009f3c <_vfiprintf_r+0x78>
 8009f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0c:	07dc      	lsls	r4, r3, #31
 8009f0e:	d50e      	bpl.n	8009f2e <_vfiprintf_r+0x6a>
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	b01d      	add	sp, #116	; 0x74
 8009f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1a:	4b7b      	ldr	r3, [pc, #492]	; (800a108 <_vfiprintf_r+0x244>)
 8009f1c:	429d      	cmp	r5, r3
 8009f1e:	d101      	bne.n	8009f24 <_vfiprintf_r+0x60>
 8009f20:	68b5      	ldr	r5, [r6, #8]
 8009f22:	e7df      	b.n	8009ee4 <_vfiprintf_r+0x20>
 8009f24:	4b79      	ldr	r3, [pc, #484]	; (800a10c <_vfiprintf_r+0x248>)
 8009f26:	429d      	cmp	r5, r3
 8009f28:	bf08      	it	eq
 8009f2a:	68f5      	ldreq	r5, [r6, #12]
 8009f2c:	e7da      	b.n	8009ee4 <_vfiprintf_r+0x20>
 8009f2e:	89ab      	ldrh	r3, [r5, #12]
 8009f30:	0598      	lsls	r0, r3, #22
 8009f32:	d4ed      	bmi.n	8009f10 <_vfiprintf_r+0x4c>
 8009f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f36:	f7ff f86f 	bl	8009018 <__retarget_lock_release_recursive>
 8009f3a:	e7e9      	b.n	8009f10 <_vfiprintf_r+0x4c>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f40:	2320      	movs	r3, #32
 8009f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f4a:	2330      	movs	r3, #48	; 0x30
 8009f4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a110 <_vfiprintf_r+0x24c>
 8009f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f54:	f04f 0901 	mov.w	r9, #1
 8009f58:	4623      	mov	r3, r4
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f60:	b10a      	cbz	r2, 8009f66 <_vfiprintf_r+0xa2>
 8009f62:	2a25      	cmp	r2, #37	; 0x25
 8009f64:	d1f9      	bne.n	8009f5a <_vfiprintf_r+0x96>
 8009f66:	ebba 0b04 	subs.w	fp, sl, r4
 8009f6a:	d00b      	beq.n	8009f84 <_vfiprintf_r+0xc0>
 8009f6c:	465b      	mov	r3, fp
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7ff ff93 	bl	8009e9e <__sfputs_r>
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f000 80aa 	beq.w	800a0d2 <_vfiprintf_r+0x20e>
 8009f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f80:	445a      	add	r2, fp
 8009f82:	9209      	str	r2, [sp, #36]	; 0x24
 8009f84:	f89a 3000 	ldrb.w	r3, [sl]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 80a2 	beq.w	800a0d2 <_vfiprintf_r+0x20e>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f04f 32ff 	mov.w	r2, #4294967295
 8009f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f98:	f10a 0a01 	add.w	sl, sl, #1
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	9307      	str	r3, [sp, #28]
 8009fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fa6:	4654      	mov	r4, sl
 8009fa8:	2205      	movs	r2, #5
 8009faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fae:	4858      	ldr	r0, [pc, #352]	; (800a110 <_vfiprintf_r+0x24c>)
 8009fb0:	f7f6 f99e 	bl	80002f0 <memchr>
 8009fb4:	9a04      	ldr	r2, [sp, #16]
 8009fb6:	b9d8      	cbnz	r0, 8009ff0 <_vfiprintf_r+0x12c>
 8009fb8:	06d1      	lsls	r1, r2, #27
 8009fba:	bf44      	itt	mi
 8009fbc:	2320      	movmi	r3, #32
 8009fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc2:	0713      	lsls	r3, r2, #28
 8009fc4:	bf44      	itt	mi
 8009fc6:	232b      	movmi	r3, #43	; 0x2b
 8009fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fd2:	d015      	beq.n	800a000 <_vfiprintf_r+0x13c>
 8009fd4:	9a07      	ldr	r2, [sp, #28]
 8009fd6:	4654      	mov	r4, sl
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f04f 0c0a 	mov.w	ip, #10
 8009fde:	4621      	mov	r1, r4
 8009fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe4:	3b30      	subs	r3, #48	; 0x30
 8009fe6:	2b09      	cmp	r3, #9
 8009fe8:	d94e      	bls.n	800a088 <_vfiprintf_r+0x1c4>
 8009fea:	b1b0      	cbz	r0, 800a01a <_vfiprintf_r+0x156>
 8009fec:	9207      	str	r2, [sp, #28]
 8009fee:	e014      	b.n	800a01a <_vfiprintf_r+0x156>
 8009ff0:	eba0 0308 	sub.w	r3, r0, r8
 8009ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	46a2      	mov	sl, r4
 8009ffe:	e7d2      	b.n	8009fa6 <_vfiprintf_r+0xe2>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	1d19      	adds	r1, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	9103      	str	r1, [sp, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfbb      	ittet	lt
 800a00c:	425b      	neglt	r3, r3
 800a00e:	f042 0202 	orrlt.w	r2, r2, #2
 800a012:	9307      	strge	r3, [sp, #28]
 800a014:	9307      	strlt	r3, [sp, #28]
 800a016:	bfb8      	it	lt
 800a018:	9204      	strlt	r2, [sp, #16]
 800a01a:	7823      	ldrb	r3, [r4, #0]
 800a01c:	2b2e      	cmp	r3, #46	; 0x2e
 800a01e:	d10c      	bne.n	800a03a <_vfiprintf_r+0x176>
 800a020:	7863      	ldrb	r3, [r4, #1]
 800a022:	2b2a      	cmp	r3, #42	; 0x2a
 800a024:	d135      	bne.n	800a092 <_vfiprintf_r+0x1ce>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	1d1a      	adds	r2, r3, #4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	9203      	str	r2, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfb8      	it	lt
 800a032:	f04f 33ff 	movlt.w	r3, #4294967295
 800a036:	3402      	adds	r4, #2
 800a038:	9305      	str	r3, [sp, #20]
 800a03a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a120 <_vfiprintf_r+0x25c>
 800a03e:	7821      	ldrb	r1, [r4, #0]
 800a040:	2203      	movs	r2, #3
 800a042:	4650      	mov	r0, sl
 800a044:	f7f6 f954 	bl	80002f0 <memchr>
 800a048:	b140      	cbz	r0, 800a05c <_vfiprintf_r+0x198>
 800a04a:	2340      	movs	r3, #64	; 0x40
 800a04c:	eba0 000a 	sub.w	r0, r0, sl
 800a050:	fa03 f000 	lsl.w	r0, r3, r0
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	4303      	orrs	r3, r0
 800a058:	3401      	adds	r4, #1
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a060:	482c      	ldr	r0, [pc, #176]	; (800a114 <_vfiprintf_r+0x250>)
 800a062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a066:	2206      	movs	r2, #6
 800a068:	f7f6 f942 	bl	80002f0 <memchr>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d03f      	beq.n	800a0f0 <_vfiprintf_r+0x22c>
 800a070:	4b29      	ldr	r3, [pc, #164]	; (800a118 <_vfiprintf_r+0x254>)
 800a072:	bb1b      	cbnz	r3, 800a0bc <_vfiprintf_r+0x1f8>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	3307      	adds	r3, #7
 800a078:	f023 0307 	bic.w	r3, r3, #7
 800a07c:	3308      	adds	r3, #8
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a082:	443b      	add	r3, r7
 800a084:	9309      	str	r3, [sp, #36]	; 0x24
 800a086:	e767      	b.n	8009f58 <_vfiprintf_r+0x94>
 800a088:	fb0c 3202 	mla	r2, ip, r2, r3
 800a08c:	460c      	mov	r4, r1
 800a08e:	2001      	movs	r0, #1
 800a090:	e7a5      	b.n	8009fde <_vfiprintf_r+0x11a>
 800a092:	2300      	movs	r3, #0
 800a094:	3401      	adds	r4, #1
 800a096:	9305      	str	r3, [sp, #20]
 800a098:	4619      	mov	r1, r3
 800a09a:	f04f 0c0a 	mov.w	ip, #10
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a4:	3a30      	subs	r2, #48	; 0x30
 800a0a6:	2a09      	cmp	r2, #9
 800a0a8:	d903      	bls.n	800a0b2 <_vfiprintf_r+0x1ee>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0c5      	beq.n	800a03a <_vfiprintf_r+0x176>
 800a0ae:	9105      	str	r1, [sp, #20]
 800a0b0:	e7c3      	b.n	800a03a <_vfiprintf_r+0x176>
 800a0b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e7f0      	b.n	800a09e <_vfiprintf_r+0x1da>
 800a0bc:	ab03      	add	r3, sp, #12
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	4b16      	ldr	r3, [pc, #88]	; (800a11c <_vfiprintf_r+0x258>)
 800a0c4:	a904      	add	r1, sp, #16
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7fc f8f2 	bl	80062b0 <_printf_float>
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	1c78      	adds	r0, r7, #1
 800a0d0:	d1d6      	bne.n	800a080 <_vfiprintf_r+0x1bc>
 800a0d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d4:	07d9      	lsls	r1, r3, #31
 800a0d6:	d405      	bmi.n	800a0e4 <_vfiprintf_r+0x220>
 800a0d8:	89ab      	ldrh	r3, [r5, #12]
 800a0da:	059a      	lsls	r2, r3, #22
 800a0dc:	d402      	bmi.n	800a0e4 <_vfiprintf_r+0x220>
 800a0de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e0:	f7fe ff9a 	bl	8009018 <__retarget_lock_release_recursive>
 800a0e4:	89ab      	ldrh	r3, [r5, #12]
 800a0e6:	065b      	lsls	r3, r3, #25
 800a0e8:	f53f af12 	bmi.w	8009f10 <_vfiprintf_r+0x4c>
 800a0ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ee:	e711      	b.n	8009f14 <_vfiprintf_r+0x50>
 800a0f0:	ab03      	add	r3, sp, #12
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	4b09      	ldr	r3, [pc, #36]	; (800a11c <_vfiprintf_r+0x258>)
 800a0f8:	a904      	add	r1, sp, #16
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7fc fb64 	bl	80067c8 <_printf_i>
 800a100:	e7e4      	b.n	800a0cc <_vfiprintf_r+0x208>
 800a102:	bf00      	nop
 800a104:	0800ab84 	.word	0x0800ab84
 800a108:	0800aba4 	.word	0x0800aba4
 800a10c:	0800ab64 	.word	0x0800ab64
 800a110:	0800ad9c 	.word	0x0800ad9c
 800a114:	0800ada6 	.word	0x0800ada6
 800a118:	080062b1 	.word	0x080062b1
 800a11c:	08009e9f 	.word	0x08009e9f
 800a120:	0800ada2 	.word	0x0800ada2
 800a124:	00000000 	.word	0x00000000

0800a128 <nan>:
 800a128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a130 <nan+0x8>
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	00000000 	.word	0x00000000
 800a134:	7ff80000 	.word	0x7ff80000

0800a138 <_sbrk_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d06      	ldr	r5, [pc, #24]	; (800a154 <_sbrk_r+0x1c>)
 800a13c:	2300      	movs	r3, #0
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	602b      	str	r3, [r5, #0]
 800a144:	f7f7 f96c 	bl	8001420 <_sbrk>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_sbrk_r+0x1a>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_sbrk_r+0x1a>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	240003c0 	.word	0x240003c0

0800a158 <__sread>:
 800a158:	b510      	push	{r4, lr}
 800a15a:	460c      	mov	r4, r1
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	f000 fb02 	bl	800a768 <_read_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	bfab      	itete	ge
 800a168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a16a:	89a3      	ldrhlt	r3, [r4, #12]
 800a16c:	181b      	addge	r3, r3, r0
 800a16e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a172:	bfac      	ite	ge
 800a174:	6563      	strge	r3, [r4, #84]	; 0x54
 800a176:	81a3      	strhlt	r3, [r4, #12]
 800a178:	bd10      	pop	{r4, pc}

0800a17a <__swrite>:
 800a17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	461f      	mov	r7, r3
 800a180:	898b      	ldrh	r3, [r1, #12]
 800a182:	05db      	lsls	r3, r3, #23
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	4616      	mov	r6, r2
 800a18a:	d505      	bpl.n	800a198 <__swrite+0x1e>
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	2302      	movs	r3, #2
 800a192:	2200      	movs	r2, #0
 800a194:	f000 fa1a 	bl	800a5cc <_lseek_r>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ae:	f000 b88b 	b.w	800a2c8 <_write_r>

0800a1b2 <__sseek>:
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ba:	f000 fa07 	bl	800a5cc <_lseek_r>
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	bf15      	itete	ne
 800a1c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ce:	81a3      	strheq	r3, [r4, #12]
 800a1d0:	bf18      	it	ne
 800a1d2:	81a3      	strhne	r3, [r4, #12]
 800a1d4:	bd10      	pop	{r4, pc}

0800a1d6 <__sclose>:
 800a1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1da:	f000 b913 	b.w	800a404 <_close_r>

0800a1de <strncmp>:
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	b17a      	cbz	r2, 800a202 <strncmp+0x24>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	3901      	subs	r1, #1
 800a1e6:	1884      	adds	r4, r0, r2
 800a1e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1f0:	4290      	cmp	r0, r2
 800a1f2:	d101      	bne.n	800a1f8 <strncmp+0x1a>
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	d101      	bne.n	800a1fc <strncmp+0x1e>
 800a1f8:	1a80      	subs	r0, r0, r2
 800a1fa:	bd10      	pop	{r4, pc}
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d1f3      	bne.n	800a1e8 <strncmp+0xa>
 800a200:	e7fa      	b.n	800a1f8 <strncmp+0x1a>
 800a202:	4610      	mov	r0, r2
 800a204:	e7f9      	b.n	800a1fa <strncmp+0x1c>
	...

0800a208 <__swbuf_r>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	460e      	mov	r6, r1
 800a20c:	4614      	mov	r4, r2
 800a20e:	4605      	mov	r5, r0
 800a210:	b118      	cbz	r0, 800a21a <__swbuf_r+0x12>
 800a212:	6983      	ldr	r3, [r0, #24]
 800a214:	b90b      	cbnz	r3, 800a21a <__swbuf_r+0x12>
 800a216:	f7fe faed 	bl	80087f4 <__sinit>
 800a21a:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <__swbuf_r+0x98>)
 800a21c:	429c      	cmp	r4, r3
 800a21e:	d12b      	bne.n	800a278 <__swbuf_r+0x70>
 800a220:	686c      	ldr	r4, [r5, #4]
 800a222:	69a3      	ldr	r3, [r4, #24]
 800a224:	60a3      	str	r3, [r4, #8]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	071a      	lsls	r2, r3, #28
 800a22a:	d52f      	bpl.n	800a28c <__swbuf_r+0x84>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	b36b      	cbz	r3, 800a28c <__swbuf_r+0x84>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	6820      	ldr	r0, [r4, #0]
 800a234:	1ac0      	subs	r0, r0, r3
 800a236:	6963      	ldr	r3, [r4, #20]
 800a238:	b2f6      	uxtb	r6, r6
 800a23a:	4283      	cmp	r3, r0
 800a23c:	4637      	mov	r7, r6
 800a23e:	dc04      	bgt.n	800a24a <__swbuf_r+0x42>
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f000 f974 	bl	800a530 <_fflush_r>
 800a248:	bb30      	cbnz	r0, 800a298 <__swbuf_r+0x90>
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	60a3      	str	r3, [r4, #8]
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	701e      	strb	r6, [r3, #0]
 800a258:	6963      	ldr	r3, [r4, #20]
 800a25a:	3001      	adds	r0, #1
 800a25c:	4283      	cmp	r3, r0
 800a25e:	d004      	beq.n	800a26a <__swbuf_r+0x62>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	07db      	lsls	r3, r3, #31
 800a264:	d506      	bpl.n	800a274 <__swbuf_r+0x6c>
 800a266:	2e0a      	cmp	r6, #10
 800a268:	d104      	bne.n	800a274 <__swbuf_r+0x6c>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4628      	mov	r0, r5
 800a26e:	f000 f95f 	bl	800a530 <_fflush_r>
 800a272:	b988      	cbnz	r0, 800a298 <__swbuf_r+0x90>
 800a274:	4638      	mov	r0, r7
 800a276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <__swbuf_r+0x9c>)
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d101      	bne.n	800a282 <__swbuf_r+0x7a>
 800a27e:	68ac      	ldr	r4, [r5, #8]
 800a280:	e7cf      	b.n	800a222 <__swbuf_r+0x1a>
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <__swbuf_r+0xa0>)
 800a284:	429c      	cmp	r4, r3
 800a286:	bf08      	it	eq
 800a288:	68ec      	ldreq	r4, [r5, #12]
 800a28a:	e7ca      	b.n	800a222 <__swbuf_r+0x1a>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 f82c 	bl	800a2ec <__swsetup_r>
 800a294:	2800      	cmp	r0, #0
 800a296:	d0cb      	beq.n	800a230 <__swbuf_r+0x28>
 800a298:	f04f 37ff 	mov.w	r7, #4294967295
 800a29c:	e7ea      	b.n	800a274 <__swbuf_r+0x6c>
 800a29e:	bf00      	nop
 800a2a0:	0800ab84 	.word	0x0800ab84
 800a2a4:	0800aba4 	.word	0x0800aba4
 800a2a8:	0800ab64 	.word	0x0800ab64

0800a2ac <__ascii_wctomb>:
 800a2ac:	b149      	cbz	r1, 800a2c2 <__ascii_wctomb+0x16>
 800a2ae:	2aff      	cmp	r2, #255	; 0xff
 800a2b0:	bf85      	ittet	hi
 800a2b2:	238a      	movhi	r3, #138	; 0x8a
 800a2b4:	6003      	strhi	r3, [r0, #0]
 800a2b6:	700a      	strbls	r2, [r1, #0]
 800a2b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2bc:	bf98      	it	ls
 800a2be:	2001      	movls	r0, #1
 800a2c0:	4770      	bx	lr
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4770      	bx	lr
	...

0800a2c8 <_write_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d07      	ldr	r5, [pc, #28]	; (800a2e8 <_write_r+0x20>)
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	4608      	mov	r0, r1
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	602a      	str	r2, [r5, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f7f7 f851 	bl	800137e <_write>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_write_r+0x1e>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_write_r+0x1e>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	240003c0 	.word	0x240003c0

0800a2ec <__swsetup_r>:
 800a2ec:	4b32      	ldr	r3, [pc, #200]	; (800a3b8 <__swsetup_r+0xcc>)
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	681d      	ldr	r5, [r3, #0]
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	b125      	cbz	r5, 800a302 <__swsetup_r+0x16>
 800a2f8:	69ab      	ldr	r3, [r5, #24]
 800a2fa:	b913      	cbnz	r3, 800a302 <__swsetup_r+0x16>
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f7fe fa79 	bl	80087f4 <__sinit>
 800a302:	4b2e      	ldr	r3, [pc, #184]	; (800a3bc <__swsetup_r+0xd0>)
 800a304:	429c      	cmp	r4, r3
 800a306:	d10f      	bne.n	800a328 <__swsetup_r+0x3c>
 800a308:	686c      	ldr	r4, [r5, #4]
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a310:	0719      	lsls	r1, r3, #28
 800a312:	d42c      	bmi.n	800a36e <__swsetup_r+0x82>
 800a314:	06dd      	lsls	r5, r3, #27
 800a316:	d411      	bmi.n	800a33c <__swsetup_r+0x50>
 800a318:	2309      	movs	r3, #9
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a320:	81a3      	strh	r3, [r4, #12]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295
 800a326:	e03e      	b.n	800a3a6 <__swsetup_r+0xba>
 800a328:	4b25      	ldr	r3, [pc, #148]	; (800a3c0 <__swsetup_r+0xd4>)
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d101      	bne.n	800a332 <__swsetup_r+0x46>
 800a32e:	68ac      	ldr	r4, [r5, #8]
 800a330:	e7eb      	b.n	800a30a <__swsetup_r+0x1e>
 800a332:	4b24      	ldr	r3, [pc, #144]	; (800a3c4 <__swsetup_r+0xd8>)
 800a334:	429c      	cmp	r4, r3
 800a336:	bf08      	it	eq
 800a338:	68ec      	ldreq	r4, [r5, #12]
 800a33a:	e7e6      	b.n	800a30a <__swsetup_r+0x1e>
 800a33c:	0758      	lsls	r0, r3, #29
 800a33e:	d512      	bpl.n	800a366 <__swsetup_r+0x7a>
 800a340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a342:	b141      	cbz	r1, 800a356 <__swsetup_r+0x6a>
 800a344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a348:	4299      	cmp	r1, r3
 800a34a:	d002      	beq.n	800a352 <__swsetup_r+0x66>
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff fb53 	bl	80099f8 <_free_r>
 800a352:	2300      	movs	r3, #0
 800a354:	6363      	str	r3, [r4, #52]	; 0x34
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	2300      	movs	r3, #0
 800a360:	6063      	str	r3, [r4, #4]
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f043 0308 	orr.w	r3, r3, #8
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	b94b      	cbnz	r3, 800a386 <__swsetup_r+0x9a>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a37c:	d003      	beq.n	800a386 <__swsetup_r+0x9a>
 800a37e:	4621      	mov	r1, r4
 800a380:	4630      	mov	r0, r6
 800a382:	f000 f95b 	bl	800a63c <__smakebuf_r>
 800a386:	89a0      	ldrh	r0, [r4, #12]
 800a388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a38c:	f010 0301 	ands.w	r3, r0, #1
 800a390:	d00a      	beq.n	800a3a8 <__swsetup_r+0xbc>
 800a392:	2300      	movs	r3, #0
 800a394:	60a3      	str	r3, [r4, #8]
 800a396:	6963      	ldr	r3, [r4, #20]
 800a398:	425b      	negs	r3, r3
 800a39a:	61a3      	str	r3, [r4, #24]
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	b943      	cbnz	r3, 800a3b2 <__swsetup_r+0xc6>
 800a3a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3a4:	d1ba      	bne.n	800a31c <__swsetup_r+0x30>
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	0781      	lsls	r1, r0, #30
 800a3aa:	bf58      	it	pl
 800a3ac:	6963      	ldrpl	r3, [r4, #20]
 800a3ae:	60a3      	str	r3, [r4, #8]
 800a3b0:	e7f4      	b.n	800a39c <__swsetup_r+0xb0>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	e7f7      	b.n	800a3a6 <__swsetup_r+0xba>
 800a3b6:	bf00      	nop
 800a3b8:	24000020 	.word	0x24000020
 800a3bc:	0800ab84 	.word	0x0800ab84
 800a3c0:	0800aba4 	.word	0x0800aba4
 800a3c4:	0800ab64 	.word	0x0800ab64

0800a3c8 <__assert_func>:
 800a3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ca:	4614      	mov	r4, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <__assert_func+0x2c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	68d8      	ldr	r0, [r3, #12]
 800a3d6:	b14c      	cbz	r4, 800a3ec <__assert_func+0x24>
 800a3d8:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <__assert_func+0x30>)
 800a3da:	9100      	str	r1, [sp, #0]
 800a3dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e0:	4906      	ldr	r1, [pc, #24]	; (800a3fc <__assert_func+0x34>)
 800a3e2:	462b      	mov	r3, r5
 800a3e4:	f000 f8e0 	bl	800a5a8 <fiprintf>
 800a3e8:	f000 f9d0 	bl	800a78c <abort>
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <__assert_func+0x38>)
 800a3ee:	461c      	mov	r4, r3
 800a3f0:	e7f3      	b.n	800a3da <__assert_func+0x12>
 800a3f2:	bf00      	nop
 800a3f4:	24000020 	.word	0x24000020
 800a3f8:	0800adad 	.word	0x0800adad
 800a3fc:	0800adba 	.word	0x0800adba
 800a400:	0800ade8 	.word	0x0800ade8

0800a404 <_close_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d06      	ldr	r5, [pc, #24]	; (800a420 <_close_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f6 ffd1 	bl	80013b6 <_close>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_close_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_close_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	240003c0 	.word	0x240003c0

0800a424 <__sflush_r>:
 800a424:	898a      	ldrh	r2, [r1, #12]
 800a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	0710      	lsls	r0, r2, #28
 800a42e:	460c      	mov	r4, r1
 800a430:	d458      	bmi.n	800a4e4 <__sflush_r+0xc0>
 800a432:	684b      	ldr	r3, [r1, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc05      	bgt.n	800a444 <__sflush_r+0x20>
 800a438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc02      	bgt.n	800a444 <__sflush_r+0x20>
 800a43e:	2000      	movs	r0, #0
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a446:	2e00      	cmp	r6, #0
 800a448:	d0f9      	beq.n	800a43e <__sflush_r+0x1a>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a450:	682f      	ldr	r7, [r5, #0]
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	d032      	beq.n	800a4bc <__sflush_r+0x98>
 800a456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	075a      	lsls	r2, r3, #29
 800a45c:	d505      	bpl.n	800a46a <__sflush_r+0x46>
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	1ac0      	subs	r0, r0, r3
 800a462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a464:	b10b      	cbz	r3, 800a46a <__sflush_r+0x46>
 800a466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a468:	1ac0      	subs	r0, r0, r3
 800a46a:	2300      	movs	r3, #0
 800a46c:	4602      	mov	r2, r0
 800a46e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a470:	6a21      	ldr	r1, [r4, #32]
 800a472:	4628      	mov	r0, r5
 800a474:	47b0      	blx	r6
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	d106      	bne.n	800a48a <__sflush_r+0x66>
 800a47c:	6829      	ldr	r1, [r5, #0]
 800a47e:	291d      	cmp	r1, #29
 800a480:	d82c      	bhi.n	800a4dc <__sflush_r+0xb8>
 800a482:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <__sflush_r+0x108>)
 800a484:	40ca      	lsrs	r2, r1
 800a486:	07d6      	lsls	r6, r2, #31
 800a488:	d528      	bpl.n	800a4dc <__sflush_r+0xb8>
 800a48a:	2200      	movs	r2, #0
 800a48c:	6062      	str	r2, [r4, #4]
 800a48e:	04d9      	lsls	r1, r3, #19
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	6022      	str	r2, [r4, #0]
 800a494:	d504      	bpl.n	800a4a0 <__sflush_r+0x7c>
 800a496:	1c42      	adds	r2, r0, #1
 800a498:	d101      	bne.n	800a49e <__sflush_r+0x7a>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b903      	cbnz	r3, 800a4a0 <__sflush_r+0x7c>
 800a49e:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a2:	602f      	str	r7, [r5, #0]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d0ca      	beq.n	800a43e <__sflush_r+0x1a>
 800a4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	d002      	beq.n	800a4b6 <__sflush_r+0x92>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7ff faa1 	bl	80099f8 <_free_r>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4ba:	e7c1      	b.n	800a440 <__sflush_r+0x1c>
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b0      	blx	r6
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	d1c7      	bne.n	800a458 <__sflush_r+0x34>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0c4      	beq.n	800a458 <__sflush_r+0x34>
 800a4ce:	2b1d      	cmp	r3, #29
 800a4d0:	d001      	beq.n	800a4d6 <__sflush_r+0xb2>
 800a4d2:	2b16      	cmp	r3, #22
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0xb6>
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	e7b1      	b.n	800a43e <__sflush_r+0x1a>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e7ad      	b.n	800a440 <__sflush_r+0x1c>
 800a4e4:	690f      	ldr	r7, [r1, #16]
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	d0a9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4ea:	0793      	lsls	r3, r2, #30
 800a4ec:	680e      	ldr	r6, [r1, #0]
 800a4ee:	bf08      	it	eq
 800a4f0:	694b      	ldreq	r3, [r1, #20]
 800a4f2:	600f      	str	r7, [r1, #0]
 800a4f4:	bf18      	it	ne
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	eba6 0807 	sub.w	r8, r6, r7
 800a4fc:	608b      	str	r3, [r1, #8]
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	dd9c      	ble.n	800a43e <__sflush_r+0x1a>
 800a504:	6a21      	ldr	r1, [r4, #32]
 800a506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a508:	4643      	mov	r3, r8
 800a50a:	463a      	mov	r2, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b0      	blx	r6
 800a510:	2800      	cmp	r0, #0
 800a512:	dc06      	bgt.n	800a522 <__sflush_r+0xfe>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e78e      	b.n	800a440 <__sflush_r+0x1c>
 800a522:	4407      	add	r7, r0
 800a524:	eba8 0800 	sub.w	r8, r8, r0
 800a528:	e7e9      	b.n	800a4fe <__sflush_r+0xda>
 800a52a:	bf00      	nop
 800a52c:	20400001 	.word	0x20400001

0800a530 <_fflush_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b913      	cbnz	r3, 800a540 <_fflush_r+0x10>
 800a53a:	2500      	movs	r5, #0
 800a53c:	4628      	mov	r0, r5
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	b118      	cbz	r0, 800a54a <_fflush_r+0x1a>
 800a542:	6983      	ldr	r3, [r0, #24]
 800a544:	b90b      	cbnz	r3, 800a54a <_fflush_r+0x1a>
 800a546:	f7fe f955 	bl	80087f4 <__sinit>
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <_fflush_r+0x6c>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d11b      	bne.n	800a588 <_fflush_r+0x58>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0ef      	beq.n	800a53a <_fflush_r+0xa>
 800a55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a55c:	07d0      	lsls	r0, r2, #31
 800a55e:	d404      	bmi.n	800a56a <_fflush_r+0x3a>
 800a560:	0599      	lsls	r1, r3, #22
 800a562:	d402      	bmi.n	800a56a <_fflush_r+0x3a>
 800a564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a566:	f7fe fd56 	bl	8009016 <__retarget_lock_acquire_recursive>
 800a56a:	4628      	mov	r0, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7ff ff59 	bl	800a424 <__sflush_r>
 800a572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a574:	07da      	lsls	r2, r3, #31
 800a576:	4605      	mov	r5, r0
 800a578:	d4e0      	bmi.n	800a53c <_fflush_r+0xc>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	059b      	lsls	r3, r3, #22
 800a57e:	d4dd      	bmi.n	800a53c <_fflush_r+0xc>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f7fe fd49 	bl	8009018 <__retarget_lock_release_recursive>
 800a586:	e7d9      	b.n	800a53c <_fflush_r+0xc>
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_fflush_r+0x70>)
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d101      	bne.n	800a592 <_fflush_r+0x62>
 800a58e:	68ac      	ldr	r4, [r5, #8]
 800a590:	e7df      	b.n	800a552 <_fflush_r+0x22>
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <_fflush_r+0x74>)
 800a594:	429c      	cmp	r4, r3
 800a596:	bf08      	it	eq
 800a598:	68ec      	ldreq	r4, [r5, #12]
 800a59a:	e7da      	b.n	800a552 <_fflush_r+0x22>
 800a59c:	0800ab84 	.word	0x0800ab84
 800a5a0:	0800aba4 	.word	0x0800aba4
 800a5a4:	0800ab64 	.word	0x0800ab64

0800a5a8 <fiprintf>:
 800a5a8:	b40e      	push	{r1, r2, r3}
 800a5aa:	b503      	push	{r0, r1, lr}
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	ab03      	add	r3, sp, #12
 800a5b0:	4805      	ldr	r0, [pc, #20]	; (800a5c8 <fiprintf+0x20>)
 800a5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b6:	6800      	ldr	r0, [r0, #0]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	f7ff fc83 	bl	8009ec4 <_vfiprintf_r>
 800a5be:	b002      	add	sp, #8
 800a5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c4:	b003      	add	sp, #12
 800a5c6:	4770      	bx	lr
 800a5c8:	24000020 	.word	0x24000020

0800a5cc <_lseek_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	; (800a5ec <_lseek_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f6 ff12 	bl	8001404 <_lseek>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_lseek_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_lseek_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	240003c0 	.word	0x240003c0

0800a5f0 <__swhatbuf_r>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	460e      	mov	r6, r1
 800a5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	b096      	sub	sp, #88	; 0x58
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	461d      	mov	r5, r3
 800a600:	da08      	bge.n	800a614 <__swhatbuf_r+0x24>
 800a602:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	602a      	str	r2, [r5, #0]
 800a60a:	061a      	lsls	r2, r3, #24
 800a60c:	d410      	bmi.n	800a630 <__swhatbuf_r+0x40>
 800a60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a612:	e00e      	b.n	800a632 <__swhatbuf_r+0x42>
 800a614:	466a      	mov	r2, sp
 800a616:	f000 f8c1 	bl	800a79c <_fstat_r>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	dbf1      	blt.n	800a602 <__swhatbuf_r+0x12>
 800a61e:	9a01      	ldr	r2, [sp, #4]
 800a620:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a624:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a628:	425a      	negs	r2, r3
 800a62a:	415a      	adcs	r2, r3
 800a62c:	602a      	str	r2, [r5, #0]
 800a62e:	e7ee      	b.n	800a60e <__swhatbuf_r+0x1e>
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	2000      	movs	r0, #0
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	b016      	add	sp, #88	; 0x58
 800a638:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a63c <__smakebuf_r>:
 800a63c:	898b      	ldrh	r3, [r1, #12]
 800a63e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a640:	079d      	lsls	r5, r3, #30
 800a642:	4606      	mov	r6, r0
 800a644:	460c      	mov	r4, r1
 800a646:	d507      	bpl.n	800a658 <__smakebuf_r+0x1c>
 800a648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	6123      	str	r3, [r4, #16]
 800a650:	2301      	movs	r3, #1
 800a652:	6163      	str	r3, [r4, #20]
 800a654:	b002      	add	sp, #8
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	ab01      	add	r3, sp, #4
 800a65a:	466a      	mov	r2, sp
 800a65c:	f7ff ffc8 	bl	800a5f0 <__swhatbuf_r>
 800a660:	9900      	ldr	r1, [sp, #0]
 800a662:	4605      	mov	r5, r0
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff fa33 	bl	8009ad0 <_malloc_r>
 800a66a:	b948      	cbnz	r0, 800a680 <__smakebuf_r+0x44>
 800a66c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a670:	059a      	lsls	r2, r3, #22
 800a672:	d4ef      	bmi.n	800a654 <__smakebuf_r+0x18>
 800a674:	f023 0303 	bic.w	r3, r3, #3
 800a678:	f043 0302 	orr.w	r3, r3, #2
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	e7e3      	b.n	800a648 <__smakebuf_r+0xc>
 800a680:	4b0d      	ldr	r3, [pc, #52]	; (800a6b8 <__smakebuf_r+0x7c>)
 800a682:	62b3      	str	r3, [r6, #40]	; 0x28
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	6020      	str	r0, [r4, #0]
 800a688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	9b00      	ldr	r3, [sp, #0]
 800a690:	6163      	str	r3, [r4, #20]
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	6120      	str	r0, [r4, #16]
 800a696:	b15b      	cbz	r3, 800a6b0 <__smakebuf_r+0x74>
 800a698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a69c:	4630      	mov	r0, r6
 800a69e:	f000 f88f 	bl	800a7c0 <_isatty_r>
 800a6a2:	b128      	cbz	r0, 800a6b0 <__smakebuf_r+0x74>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f023 0303 	bic.w	r3, r3, #3
 800a6aa:	f043 0301 	orr.w	r3, r3, #1
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	89a0      	ldrh	r0, [r4, #12]
 800a6b2:	4305      	orrs	r5, r0
 800a6b4:	81a5      	strh	r5, [r4, #12]
 800a6b6:	e7cd      	b.n	800a654 <__smakebuf_r+0x18>
 800a6b8:	0800878d 	.word	0x0800878d

0800a6bc <memmove>:
 800a6bc:	4288      	cmp	r0, r1
 800a6be:	b510      	push	{r4, lr}
 800a6c0:	eb01 0402 	add.w	r4, r1, r2
 800a6c4:	d902      	bls.n	800a6cc <memmove+0x10>
 800a6c6:	4284      	cmp	r4, r0
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	d807      	bhi.n	800a6dc <memmove+0x20>
 800a6cc:	1e43      	subs	r3, r0, #1
 800a6ce:	42a1      	cmp	r1, r4
 800a6d0:	d008      	beq.n	800a6e4 <memmove+0x28>
 800a6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6da:	e7f8      	b.n	800a6ce <memmove+0x12>
 800a6dc:	4402      	add	r2, r0
 800a6de:	4601      	mov	r1, r0
 800a6e0:	428a      	cmp	r2, r1
 800a6e2:	d100      	bne.n	800a6e6 <memmove+0x2a>
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ee:	e7f7      	b.n	800a6e0 <memmove+0x24>

0800a6f0 <__malloc_lock>:
 800a6f0:	4801      	ldr	r0, [pc, #4]	; (800a6f8 <__malloc_lock+0x8>)
 800a6f2:	f7fe bc90 	b.w	8009016 <__retarget_lock_acquire_recursive>
 800a6f6:	bf00      	nop
 800a6f8:	240003b4 	.word	0x240003b4

0800a6fc <__malloc_unlock>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__malloc_unlock+0x8>)
 800a6fe:	f7fe bc8b 	b.w	8009018 <__retarget_lock_release_recursive>
 800a702:	bf00      	nop
 800a704:	240003b4 	.word	0x240003b4

0800a708 <_realloc_r>:
 800a708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70c:	4680      	mov	r8, r0
 800a70e:	4614      	mov	r4, r2
 800a710:	460e      	mov	r6, r1
 800a712:	b921      	cbnz	r1, 800a71e <_realloc_r+0x16>
 800a714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a718:	4611      	mov	r1, r2
 800a71a:	f7ff b9d9 	b.w	8009ad0 <_malloc_r>
 800a71e:	b92a      	cbnz	r2, 800a72c <_realloc_r+0x24>
 800a720:	f7ff f96a 	bl	80099f8 <_free_r>
 800a724:	4625      	mov	r5, r4
 800a726:	4628      	mov	r0, r5
 800a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a72c:	f000 f858 	bl	800a7e0 <_malloc_usable_size_r>
 800a730:	4284      	cmp	r4, r0
 800a732:	4607      	mov	r7, r0
 800a734:	d802      	bhi.n	800a73c <_realloc_r+0x34>
 800a736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a73a:	d812      	bhi.n	800a762 <_realloc_r+0x5a>
 800a73c:	4621      	mov	r1, r4
 800a73e:	4640      	mov	r0, r8
 800a740:	f7ff f9c6 	bl	8009ad0 <_malloc_r>
 800a744:	4605      	mov	r5, r0
 800a746:	2800      	cmp	r0, #0
 800a748:	d0ed      	beq.n	800a726 <_realloc_r+0x1e>
 800a74a:	42bc      	cmp	r4, r7
 800a74c:	4622      	mov	r2, r4
 800a74e:	4631      	mov	r1, r6
 800a750:	bf28      	it	cs
 800a752:	463a      	movcs	r2, r7
 800a754:	f7fb fd04 	bl	8006160 <memcpy>
 800a758:	4631      	mov	r1, r6
 800a75a:	4640      	mov	r0, r8
 800a75c:	f7ff f94c 	bl	80099f8 <_free_r>
 800a760:	e7e1      	b.n	800a726 <_realloc_r+0x1e>
 800a762:	4635      	mov	r5, r6
 800a764:	e7df      	b.n	800a726 <_realloc_r+0x1e>
	...

0800a768 <_read_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	; (800a788 <_read_r+0x20>)
 800a76c:	4604      	mov	r4, r0
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f6 fde4 	bl	8001344 <_read>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_read_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_read_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	240003c0 	.word	0x240003c0

0800a78c <abort>:
 800a78c:	b508      	push	{r3, lr}
 800a78e:	2006      	movs	r0, #6
 800a790:	f000 f856 	bl	800a840 <raise>
 800a794:	2001      	movs	r0, #1
 800a796:	f7f6 fdcb 	bl	8001330 <_exit>
	...

0800a79c <_fstat_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	; (800a7bc <_fstat_r+0x20>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	f7f6 fe10 	bl	80013ce <_fstat>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	d102      	bne.n	800a7b8 <_fstat_r+0x1c>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b103      	cbz	r3, 800a7b8 <_fstat_r+0x1c>
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	240003c0 	.word	0x240003c0

0800a7c0 <_isatty_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	; (800a7dc <_isatty_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7f6 fe0f 	bl	80013ee <_isatty>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_isatty_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_isatty_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	240003c0 	.word	0x240003c0

0800a7e0 <_malloc_usable_size_r>:
 800a7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7e4:	1f18      	subs	r0, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfbc      	itt	lt
 800a7ea:	580b      	ldrlt	r3, [r1, r0]
 800a7ec:	18c0      	addlt	r0, r0, r3
 800a7ee:	4770      	bx	lr

0800a7f0 <_raise_r>:
 800a7f0:	291f      	cmp	r1, #31
 800a7f2:	b538      	push	{r3, r4, r5, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	d904      	bls.n	800a804 <_raise_r+0x14>
 800a7fa:	2316      	movs	r3, #22
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a806:	b112      	cbz	r2, 800a80e <_raise_r+0x1e>
 800a808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a80c:	b94b      	cbnz	r3, 800a822 <_raise_r+0x32>
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 f830 	bl	800a874 <_getpid_r>
 800a814:	462a      	mov	r2, r5
 800a816:	4601      	mov	r1, r0
 800a818:	4620      	mov	r0, r4
 800a81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81e:	f000 b817 	b.w	800a850 <_kill_r>
 800a822:	2b01      	cmp	r3, #1
 800a824:	d00a      	beq.n	800a83c <_raise_r+0x4c>
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	d103      	bne.n	800a832 <_raise_r+0x42>
 800a82a:	2316      	movs	r3, #22
 800a82c:	6003      	str	r3, [r0, #0]
 800a82e:	2001      	movs	r0, #1
 800a830:	e7e7      	b.n	800a802 <_raise_r+0x12>
 800a832:	2400      	movs	r4, #0
 800a834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a838:	4628      	mov	r0, r5
 800a83a:	4798      	blx	r3
 800a83c:	2000      	movs	r0, #0
 800a83e:	e7e0      	b.n	800a802 <_raise_r+0x12>

0800a840 <raise>:
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <raise+0xc>)
 800a842:	4601      	mov	r1, r0
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f7ff bfd3 	b.w	800a7f0 <_raise_r>
 800a84a:	bf00      	nop
 800a84c:	24000020 	.word	0x24000020

0800a850 <_kill_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_kill_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f7f6 fd57 	bl	8001310 <_kill>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_kill_r+0x1c>
 800a866:	682b      	ldr	r3, [r5, #0]
 800a868:	b103      	cbz	r3, 800a86c <_kill_r+0x1c>
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	240003c0 	.word	0x240003c0

0800a874 <_getpid_r>:
 800a874:	f7f6 bd44 	b.w	8001300 <_getpid>

0800a878 <_init>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

0800a884 <_fini>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr
